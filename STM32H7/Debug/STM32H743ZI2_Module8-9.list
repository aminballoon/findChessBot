
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010744  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d04  080109e8  080109e8  000209e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080126ec  080126ec  000226ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080126f4  080126f4  000226f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  080126fc  080126fc  000226fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  24000000  08012704  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b00  240001f8  080128fc  000301f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000cf8  080128fc  00030cf8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034597  00000000  00000000  00030226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f05  00000000  00000000  000647bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015c8  00000000  00000000  000696c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001440  00000000  00000000  0006ac90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000086f6  00000000  00000000  0006c0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020a0e  00000000  00000000  000747c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d62b  00000000  00000000  000951d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002027ff  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006ae8  00000000  00000000  00202854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080109cc 	.word	0x080109cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	080109cc 	.word	0x080109cc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000692:	edd7 7a01 	vldr	s15, [r7, #4]
 8000696:	eef0 7ae7 	vabs.f32	s15, s15
 800069a:	eeb0 0a67 	vmov.f32	s0, s15
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80006b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80006b6:	fef8 7a67 	vrinta.f32	s15, s15
 80006ba:	eeb0 0a67 	vmov.f32	s0, s15
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
 80006d4:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	4a18      	ldr	r2, [pc, #96]	; (800073c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 80006da:	615a      	str	r2, [r3, #20]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 80006e0:	619a      	str	r2, [r3, #24]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80006e8:	61da      	str	r2, [r3, #28]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	4a15      	ldr	r2, [pc, #84]	; (8000744 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 80006ee:	621a      	str	r2, [r3, #32]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	22c7      	movs	r2, #199	; 0xc7
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 60.0f;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	4a0d      	ldr	r2, [pc, #52]	; (8000748 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 8000712:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000718:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 800071a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800074c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 800071e:	68f8      	ldr	r0, [r7, #12]
 8000720:	f000 f832 	bl	8000788 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	683a      	ldr	r2, [r7, #0]
 8000728:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	69ba      	ldr	r2, [r7, #24]
 800072e:	60da      	str	r2, [r3, #12]
}
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4618      	mov	r0, r3
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	41a00000 	.word	0x41a00000
 8000740:	469c4000 	.word	0x469c4000
 8000744:	43480000 	.word	0x43480000
 8000748:	42700000 	.word	0x42700000
 800074c:	00000000 	.word	0x00000000

08000750 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
}
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr

08000766 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8000766:	b580      	push	{r7, lr}
 8000768:	b082      	sub	sp, #8
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	4619      	mov	r1, r3
 8000778:	4610      	mov	r0, r2
 800077a:	f009 ff3d 	bl	800a5f8 <HAL_TIM_PWM_Start>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8000788:	b580      	push	{r7, lr}
 800078a:	ed2d 8b02 	vpush	{d8}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80007a4:	eeb0 0a67 	vmov.f32	s0, s15
 80007a8:	f7ff ff6e 	bl	8000688 <_ZSt4fabsf>
 80007ac:	eeb0 7a40 	vmov.f32	s14, s0
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80007b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007be:	bf94      	ite	ls
 80007c0:	2301      	movls	r3, #1
 80007c2:	2300      	movhi	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d003      	beq.n	80007d2 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	e01b      	b.n	800080a <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80007d8:	eeb0 0a67 	vmov.f32	s0, s15
 80007dc:	f7ff ff54 	bl	8000688 <_ZSt4fabsf>
 80007e0:	eeb0 7a40 	vmov.f32	s14, s0
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80007ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007f2:	bfac      	ite	ge
 80007f4:	2301      	movge	r3, #1
 80007f6:	2300      	movlt	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d003      	beq.n	8000806 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	e001      	b.n	800080a <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000810:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8000aac <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8000814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800081c:	f2c0 80db 	blt.w	80009d6 <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6898      	ldr	r0, [r3, #8]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	68db      	ldr	r3, [r3, #12]
 8000828:	b29b      	uxth	r3, r3
 800082a:	2201      	movs	r2, #1
 800082c:	4619      	mov	r1, r3
 800082e:	f007 f909 	bl	8007a44 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800083a:	3301      	adds	r3, #1
 800083c:	ee07 3a90 	vmov	s15, r3
 8000840:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000844:	edd7 7a03 	vldr	s15, [r7, #12]
 8000848:	ee27 7a27 	vmul.f32	s14, s14, s15
 800084c:	eddf 6a98 	vldr	s13, [pc, #608]	; 8000ab0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8000850:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000854:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000858:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800085c:	eeb0 0a67 	vmov.f32	s0, s15
 8000860:	f7ff ff22 	bl	80006a8 <_ZSt5roundf>
 8000864:	eef0 7a40 	vmov.f32	s15, s0
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000872:	ee17 2a90 	vmov	r2, s15
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d113      	bne.n	80008a8 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000888:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 800088a:	085b      	lsrs	r3, r3, #1
 800088c:	4618      	mov	r0, r3
 800088e:	f000 fa5b 	bl	8000d48 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000892:	eeb0 7b40 	vmov.f64	d7, d0
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008a0:	ee17 2a90 	vmov	r2, s15
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 80008a6:	e1e0      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b04      	cmp	r3, #4
 80008ae:	d113      	bne.n	80008d8 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 80008ba:	085b      	lsrs	r3, r3, #1
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fa43 	bl	8000d48 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80008c2:	eeb0 7b40 	vmov.f64	d7, d0
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008d0:	ee17 2a90 	vmov	r2, s15
 80008d4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80008d6:	e1c8      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	2b08      	cmp	r3, #8
 80008de:	d113      	bne.n	8000908 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 80008ea:	085b      	lsrs	r3, r3, #1
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fa2b 	bl	8000d48 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80008f2:	eeb0 7b40 	vmov.f64	d7, d0
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000900:	ee17 2a90 	vmov	r2, s15
 8000904:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000906:	e1b0      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b0c      	cmp	r3, #12
 800090e:	d113      	bne.n	8000938 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000918:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800091a:	085b      	lsrs	r3, r3, #1
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fa13 	bl	8000d48 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000922:	eeb0 7b40 	vmov.f64	d7, d0
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000930:	ee17 2a90 	vmov	r2, s15
 8000934:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000936:	e198      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	2b10      	cmp	r3, #16
 800093e:	d113      	bne.n	8000968 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000948:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800094a:	085b      	lsrs	r3, r3, #1
 800094c:	4618      	mov	r0, r3
 800094e:	f000 f9fb 	bl	8000d48 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000952:	eeb0 7b40 	vmov.f64	d7, d0
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000960:	ee17 2a90 	vmov	r2, s15
 8000964:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000966:	e180      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b14      	cmp	r3, #20
 800096e:	d113      	bne.n	8000998 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000978:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800097a:	085b      	lsrs	r3, r3, #1
 800097c:	4618      	mov	r0, r3
 800097e:	f000 f9e3 	bl	8000d48 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000982:	eeb0 7b40 	vmov.f64	d7, d0
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000990:	ee17 2a90 	vmov	r2, s15
 8000994:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000996:	e168      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2200      	movs	r2, #0
 80009a0:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2200      	movs	r2, #0
 80009aa:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2200      	movs	r2, #0
 80009b4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2200      	movs	r2, #0
 80009be:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	2200      	movs	r2, #0
 80009c8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2200      	movs	r2, #0
 80009d2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80009d4:	e149      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	edd3 7a04 	vldr	s15, [r3, #16]
 80009dc:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000ab4 <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 80009e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009e8:	f200 80e5 	bhi.w	8000bb6 <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6898      	ldr	r0, [r3, #8]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	2200      	movs	r2, #0
 80009f8:	4619      	mov	r1, r3
 80009fa:	f007 f823 	bl	8007a44 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a06:	3301      	adds	r3, #1
 8000a08:	ee07 3a90 	vmov	s15, r3
 8000a0c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000a10:	ed97 0a03 	vldr	s0, [r7, #12]
 8000a14:	f7ff fe38 	bl	8000688 <_ZSt4fabsf>
 8000a18:	eef0 7a40 	vmov.f32	s15, s0
 8000a1c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000a20:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000ab0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8000a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000a28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a30:	eeb0 0a67 	vmov.f32	s0, s15
 8000a34:	f7ff fe38 	bl	80006a8 <_ZSt5roundf>
 8000a38:	eef0 7a40 	vmov.f32	s15, s0
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a46:	ee17 2a90 	vmov	r2, s15
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d113      	bne.n	8000a7c <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000a5e:	085b      	lsrs	r3, r3, #1
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 f971 	bl	8000d48 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a66:	eeb0 7b40 	vmov.f64	d7, d0
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a74:	ee17 2a90 	vmov	r2, s15
 8000a78:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a7a:	e0f6      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d119      	bne.n	8000ab8 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000a8e:	085b      	lsrs	r3, r3, #1
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f959 	bl	8000d48 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a96:	eeb0 7b40 	vmov.f64	d7, d0
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000aa4:	ee17 2a90 	vmov	r2, s15
 8000aa8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000aaa:	e0de      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 8000aac:	3a83126f 	.word	0x3a83126f
 8000ab0:	4d64e1c0 	.word	0x4d64e1c0
 8000ab4:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2b08      	cmp	r3, #8
 8000abe:	d113      	bne.n	8000ae8 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000aca:	085b      	lsrs	r3, r3, #1
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 f93b 	bl	8000d48 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000ad2:	eeb0 7b40 	vmov.f64	d7, d0
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ae0:	ee17 2a90 	vmov	r2, s15
 8000ae4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000ae6:	e0c0      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	2b0c      	cmp	r3, #12
 8000aee:	d113      	bne.n	8000b18 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000afa:	085b      	lsrs	r3, r3, #1
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f923 	bl	8000d48 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b02:	eeb0 7b40 	vmov.f64	d7, d0
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b10:	ee17 2a90 	vmov	r2, s15
 8000b14:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b16:	e0a8      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	2b10      	cmp	r3, #16
 8000b1e:	d113      	bne.n	8000b48 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b28:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000b2a:	085b      	lsrs	r3, r3, #1
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 f90b 	bl	8000d48 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b32:	eeb0 7b40 	vmov.f64	d7, d0
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b40:	ee17 2a90 	vmov	r2, s15
 8000b44:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000b46:	e090      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2b14      	cmp	r3, #20
 8000b4e:	d113      	bne.n	8000b78 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b58:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000b5a:	085b      	lsrs	r3, r3, #1
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 f8f3 	bl	8000d48 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b62:	eeb0 7b40 	vmov.f64	d7, d0
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b70:	ee17 2a90 	vmov	r2, s15
 8000b74:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000b76:	e078      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2200      	movs	r2, #0
 8000b94:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000bb4:	e059      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d105      	bne.n	8000bca <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000bc8:	e04f      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	d105      	bne.n	8000bde <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000bdc:	e045      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b08      	cmp	r3, #8
 8000be4:	d105      	bne.n	8000bf2 <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2200      	movs	r2, #0
 8000bee:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000bf0:	e03b      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	2b0c      	cmp	r3, #12
 8000bf8:	d105      	bne.n	8000c06 <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2200      	movs	r2, #0
 8000c02:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000c04:	e031      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2b10      	cmp	r3, #16
 8000c0c:	d105      	bne.n	8000c1a <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2200      	movs	r2, #0
 8000c16:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000c18:	e027      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2b14      	cmp	r3, #20
 8000c20:	d105      	bne.n	8000c2e <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000c2c:	e01d      	b.n	8000c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2200      	movs	r2, #0
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2200      	movs	r2, #0
 8000c54:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2200      	movs	r2, #0
 8000c68:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	ecbd 8b02 	vpop	{d8}
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop

08000c78 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8000c84:	ed97 0a00 	vldr	s0, [r7]
 8000c88:	f7ff fcfe 	bl	8000688 <_ZSt4fabsf>
 8000c8c:	eef0 7a40 	vmov.f32	s15, s0
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8000c9e:	b480      	push	{r7}
 8000ca0:	b083      	sub	sp, #12
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	ee07 3a90 	vmov	s15, r3
 8000cae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000cb2:	eeb0 0b47 	vmov.f64	d0, d7
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8000ccc:	78fb      	ldrb	r3, [r7, #3]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff ffe5 	bl	8000c9e <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000cd4:	eeb0 7b40 	vmov.f64	d7, d0
 8000cd8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	0000      	movs	r0, r0
 8000cec:	0000      	movs	r0, r0
	...

08000cf0 <_ZN7Stepper20StepperOpenLoopSpeedEf>:
void Stepper::StepperOpenLoopSpeed(float _speed) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	ed93 7a07 	vldr	s14, [r3, #28]
 8000d02:	edd7 7a00 	vldr	s15, [r7]
 8000d06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000d10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	edd3 7a08 	vldr	s15, [r3, #32]
 8000d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d1e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI)));
 8000d22:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8000d40 <_ZN7Stepper20StepperOpenLoopSpeedEf+0x50>
 8000d26:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 8000d2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f7ff fd28 	bl	8000788 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	54442eea 	.word	0x54442eea
 8000d44:	401921fb 	.word	0x401921fb

08000d48 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	ee07 3a90 	vmov	s15, r3
 8000d56:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d5a:	eeb0 0b47 	vmov.f64	d0, d7
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d6c:	4b13      	ldr	r3, [pc, #76]	; (8000dbc <MX_CRC_Init+0x54>)
 8000d6e:	4a14      	ldr	r2, [pc, #80]	; (8000dc0 <MX_CRC_Init+0x58>)
 8000d70:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000d72:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MX_CRC_Init+0x54>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000d78:	4b10      	ldr	r3, [pc, #64]	; (8000dbc <MX_CRC_Init+0x54>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_CRC_Init+0x54>)
 8000d80:	f248 0205 	movw	r2, #32773	; 0x8005
 8000d84:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <MX_CRC_Init+0x54>)
 8000d88:	2208      	movs	r2, #8
 8000d8a:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_CRC_Init+0x54>)
 8000d8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d92:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_CRC_Init+0x54>)
 8000d96:	2220      	movs	r2, #32
 8000d98:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <MX_CRC_Init+0x54>)
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_CRC_Init+0x54>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_CRC_Init+0x54>)
 8000da8:	f003 fc64 	bl	8004674 <HAL_CRC_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 8000db2:	f001 fd09 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	240004ec 	.word	0x240004ec
 8000dc0:	58024c00 	.word	0x58024c00

08000dc4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <HAL_CRC_MspInit+0x3c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d10e      	bne.n	8000df4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_CRC_MspInit+0x40>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ddc:	4a09      	ldr	r2, [pc, #36]	; (8000e04 <HAL_CRC_MspInit+0x40>)
 8000dde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <HAL_CRC_MspInit+0x40>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	58024c00 	.word	0x58024c00
 8000e04:	58024400 	.word	0x58024400

08000e08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_DMA_Init+0x7c>)
 8000e10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <MX_DMA_Init+0x7c>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <MX_DMA_Init+0x7c>)
 8000e20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	200b      	movs	r0, #11
 8000e32:	f003 fbde 	bl	80045f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e36:	200b      	movs	r0, #11
 8000e38:	f003 fbf5 	bl	8004626 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	200c      	movs	r0, #12
 8000e42:	f003 fbd6 	bl	80045f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e46:	200c      	movs	r0, #12
 8000e48:	f003 fbed 	bl	8004626 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	200d      	movs	r0, #13
 8000e52:	f003 fbce 	bl	80045f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000e56:	200d      	movs	r0, #13
 8000e58:	f003 fbe5 	bl	8004626 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	200e      	movs	r0, #14
 8000e62:	f003 fbc6 	bl	80045f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e66:	200e      	movs	r0, #14
 8000e68:	f003 fbdd 	bl	8004626 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	200f      	movs	r0, #15
 8000e72:	f003 fbbe 	bl	80045f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e76:	200f      	movs	r0, #15
 8000e78:	f003 fbd5 	bl	8004626 <HAL_NVIC_EnableIRQ>

}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	58024400 	.word	0x58024400

08000e88 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e9e:	4b8e      	ldr	r3, [pc, #568]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea4:	4a8c      	ldr	r2, [pc, #560]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000ea6:	f043 0310 	orr.w	r3, r3, #16
 8000eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eae:	4b8a      	ldr	r3, [pc, #552]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	f003 0310 	and.w	r3, r3, #16
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebc:	4b86      	ldr	r3, [pc, #536]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec2:	4a85      	ldr	r2, [pc, #532]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ecc:	4b82      	ldr	r3, [pc, #520]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	4b7f      	ldr	r3, [pc, #508]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee0:	4a7d      	ldr	r2, [pc, #500]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eea:	4b7b      	ldr	r3, [pc, #492]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef8:	4b77      	ldr	r3, [pc, #476]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efe:	4a76      	ldr	r2, [pc, #472]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f08:	4b73      	ldr	r3, [pc, #460]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f16:	4b70      	ldr	r3, [pc, #448]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	4a6e      	ldr	r2, [pc, #440]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000f1e:	f043 0302 	orr.w	r3, r3, #2
 8000f22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f26:	4b6c      	ldr	r3, [pc, #432]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f34:	4b68      	ldr	r3, [pc, #416]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	4a67      	ldr	r2, [pc, #412]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f44:	4b64      	ldr	r3, [pc, #400]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f52:	4b61      	ldr	r3, [pc, #388]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	4a5f      	ldr	r2, [pc, #380]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f62:	4b5d      	ldr	r3, [pc, #372]	; (80010d8 <MX_GPIO_Init+0x250>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8000f70:	2200      	movs	r2, #0
 8000f72:	f644 2121 	movw	r1, #18977	; 0x4a21
 8000f76:	4859      	ldr	r0, [pc, #356]	; (80010dc <MX_GPIO_Init+0x254>)
 8000f78:	f006 fd64 	bl	8007a44 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f24c 0102 	movw	r1, #49154	; 0xc002
 8000f82:	4857      	ldr	r0, [pc, #348]	; (80010e0 <MX_GPIO_Init+0x258>)
 8000f84:	f006 fd5e 	bl	8007a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f8e:	4855      	ldr	r0, [pc, #340]	; (80010e4 <MX_GPIO_Init+0x25c>)
 8000f90:	f006 fd58 	bl	8007a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f9a:	4853      	ldr	r0, [pc, #332]	; (80010e8 <MX_GPIO_Init+0x260>)
 8000f9c:	f006 fd52 	bl	8007a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa6:	4851      	ldr	r0, [pc, #324]	; (80010ec <MX_GPIO_Init+0x264>)
 8000fa8:	f006 fd4c 	bl	8007a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 8000fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f107 031c 	add.w	r3, r7, #28
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4849      	ldr	r0, [pc, #292]	; (80010e8 <MX_GPIO_Init+0x260>)
 8000fc4:	f006 fb8e 	bl	80076e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8000fc8:	f644 2321 	movw	r3, #18977	; 0x4a21
 8000fcc:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	483e      	ldr	r0, [pc, #248]	; (80010dc <MX_GPIO_Init+0x254>)
 8000fe2:	f006 fb7f 	bl	80076e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8000fe6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ff6:	f107 031c 	add.w	r3, r7, #28
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4838      	ldr	r0, [pc, #224]	; (80010e0 <MX_GPIO_Init+0x258>)
 8000ffe:	f006 fb71 	bl	80076e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001002:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001008:	2301      	movs	r3, #1
 800100a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4619      	mov	r1, r3
 800101a:	4831      	ldr	r0, [pc, #196]	; (80010e0 <MX_GPIO_Init+0x258>)
 800101c:	f006 fb62 	bl	80076e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	482a      	ldr	r0, [pc, #168]	; (80010e4 <MX_GPIO_Init+0x25c>)
 800103a:	f006 fb53 	bl	80076e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800103e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	4824      	ldr	r0, [pc, #144]	; (80010e8 <MX_GPIO_Init+0x260>)
 8001058:	f006 fb44 	bl	80076e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 800105c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	481d      	ldr	r0, [pc, #116]	; (80010ec <MX_GPIO_Init+0x264>)
 8001076:	f006 fb35 	bl	80076e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM5_Pin;
 800107a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001080:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001084:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	4817      	ldr	r0, [pc, #92]	; (80010f0 <MX_GPIO_Init+0x268>)
 8001092:	f006 fb27 	bl	80076e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001096:	23c0      	movs	r3, #192	; 0xc0
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800109a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800109e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	480c      	ldr	r0, [pc, #48]	; (80010dc <MX_GPIO_Init+0x254>)
 80010ac:	f006 fb1a 	bl	80076e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010b0:	2200      	movs	r2, #0
 80010b2:	2100      	movs	r1, #0
 80010b4:	2017      	movs	r0, #23
 80010b6:	f003 fa9c 	bl	80045f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010ba:	2017      	movs	r0, #23
 80010bc:	f003 fab3 	bl	8004626 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2100      	movs	r1, #0
 80010c4:	2028      	movs	r0, #40	; 0x28
 80010c6:	f003 fa94 	bl	80045f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ca:	2028      	movs	r0, #40	; 0x28
 80010cc:	f003 faab 	bl	8004626 <HAL_NVIC_EnableIRQ>

}
 80010d0:	bf00      	nop
 80010d2:	3730      	adds	r7, #48	; 0x30
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	58024400 	.word	0x58024400
 80010dc:	58020400 	.word	0x58020400
 80010e0:	58021000 	.word	0x58021000
 80010e4:	58020c00 	.word	0x58020c00
 80010e8:	58020800 	.word	0x58020800
 80010ec:	58020000 	.word	0x58020000
 80010f0:	58021800 	.word	0x58021800

080010f4 <HAL_UARTEx_RxEventCallback>:
#define Rx_BUFFER_SIZE   20
uint8_t Old_Rx_Buffer[Rx_BUFFER_SIZE] = {0};
uint8_t New_Rx_Buffer[Rx_BUFFER_SIZE] = {0};
volatile uint16_t cmdDataSize = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a99      	ldr	r2, [pc, #612]	; (8001368 <HAL_UARTEx_RxEventCallback+0x274>)
 8001104:	4293      	cmp	r3, r2
 8001106:	f040 8216 	bne.w	8001536 <HAL_UARTEx_RxEventCallback+0x442>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 800110a:	4a98      	ldr	r2, [pc, #608]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 800110c:	4b98      	ldr	r3, [pc, #608]	; (8001370 <HAL_UARTEx_RxEventCallback+0x27c>)
 800110e:	4614      	mov	r4, r2
 8001110:	461d      	mov	r5, r3
 8001112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001116:	682b      	ldr	r3, [r5, #0]
 8001118:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 800111a:	2214      	movs	r2, #20
 800111c:	2100      	movs	r1, #0
 800111e:	4894      	ldr	r0, [pc, #592]	; (8001370 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001120:	f00d f81a 	bl	800e158 <memset>
		if(Size - 2 > 0 && Size <= Rx_BUFFER_SIZE){	// Check if there's some data.
 8001124:	887b      	ldrh	r3, [r7, #2]
 8001126:	2b02      	cmp	r3, #2
 8001128:	f240 818c 	bls.w	8001444 <HAL_UARTEx_RxEventCallback+0x350>
 800112c:	887b      	ldrh	r3, [r7, #2]
 800112e:	2b14      	cmp	r3, #20
 8001130:	f200 8188 	bhi.w	8001444 <HAL_UARTEx_RxEventCallback+0x350>
			cmdDataSize = Size - 2;	// Calculate data length.
 8001134:	887b      	ldrh	r3, [r7, #2]
 8001136:	3b02      	subs	r3, #2
 8001138:	b29a      	uxth	r2, r3
 800113a:	4b8e      	ldr	r3, [pc, #568]	; (8001374 <HAL_UARTEx_RxEventCallback+0x280>)
 800113c:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)Old_Rx_Buffer, cmdDataSize); // Calculate data only by STM32 Hardware CRC.
 800113e:	4b8d      	ldr	r3, [pc, #564]	; (8001374 <HAL_UARTEx_RxEventCallback+0x280>)
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	b29b      	uxth	r3, r3
 8001144:	461a      	mov	r2, r3
 8001146:	4989      	ldr	r1, [pc, #548]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 8001148:	488b      	ldr	r0, [pc, #556]	; (8001378 <HAL_UARTEx_RxEventCallback+0x284>)
 800114a:	f003 faf7 	bl	800473c <HAL_CRC_Calculate>
 800114e:	4603      	mov	r3, r0
 8001150:	b29a      	uxth	r2, r3
 8001152:	4b8a      	ldr	r3, [pc, #552]	; (800137c <HAL_UARTEx_RxEventCallback+0x288>)
 8001154:	801a      	strh	r2, [r3, #0]
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8 | Old_Rx_Buffer[cmdDataSize+1]; // Read Expected CRC from Protocol.
 8001156:	4b87      	ldr	r3, [pc, #540]	; (8001374 <HAL_UARTEx_RxEventCallback+0x280>)
 8001158:	881b      	ldrh	r3, [r3, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	461a      	mov	r2, r3
 800115e:	4b83      	ldr	r3, [pc, #524]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 8001160:	5c9b      	ldrb	r3, [r3, r2]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b21a      	sxth	r2, r3
 8001166:	4b83      	ldr	r3, [pc, #524]	; (8001374 <HAL_UARTEx_RxEventCallback+0x280>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	b29b      	uxth	r3, r3
 800116c:	3301      	adds	r3, #1
 800116e:	497f      	ldr	r1, [pc, #508]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 8001170:	5ccb      	ldrb	r3, [r1, r3]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21b      	sxth	r3, r3
 8001178:	b29a      	uxth	r2, r3
 800117a:	4b81      	ldr	r3, [pc, #516]	; (8001380 <HAL_UARTEx_RxEventCallback+0x28c>)
 800117c:	801a      	strh	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 800117e:	4b7f      	ldr	r3, [pc, #508]	; (800137c <HAL_UARTEx_RxEventCallback+0x288>)
 8001180:	881b      	ldrh	r3, [r3, #0]
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b7e      	ldr	r3, [pc, #504]	; (8001380 <HAL_UARTEx_RxEventCallback+0x28c>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	b29b      	uxth	r3, r3
 800118a:	429a      	cmp	r2, r3
 800118c:	bf0c      	ite	eq
 800118e:	2301      	moveq	r3, #1
 8001190:	2300      	movne	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 8144 	beq.w	8001422 <HAL_UARTEx_RxEventCallback+0x32e>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	2102      	movs	r1, #2
 800119e:	4879      	ldr	r0, [pc, #484]	; (8001384 <HAL_UARTEx_RxEventCallback+0x290>)
 80011a0:	f006 fc50 	bl	8007a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011aa:	4877      	ldr	r0, [pc, #476]	; (8001388 <HAL_UARTEx_RxEventCallback+0x294>)
 80011ac:	f006 fc4a 	bl	8007a44 <HAL_GPIO_WritePin>
				if(Old_Rx_Buffer[0] == 0x41 && cmdDataSize == 3){	// Joint Jog q1
 80011b0:	4b6e      	ldr	r3, [pc, #440]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b41      	cmp	r3, #65	; 0x41
 80011b6:	d106      	bne.n	80011c6 <HAL_UARTEx_RxEventCallback+0xd2>
 80011b8:	4b6e      	ldr	r3, [pc, #440]	; (8001374 <HAL_UARTEx_RxEventCallback+0x280>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	b29b      	uxth	r3, r3
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d101      	bne.n	80011c6 <HAL_UARTEx_RxEventCallback+0xd2>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_UARTEx_RxEventCallback+0xd4>
 80011c6:	2300      	movs	r3, #0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d00b      	beq.n	80011e4 <HAL_UARTEx_RxEventCallback+0xf0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80011cc:	4b67      	ldr	r3, [pc, #412]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 80011ce:	785b      	ldrb	r3, [r3, #1]
 80011d0:	021b      	lsls	r3, r3, #8
 80011d2:	b25a      	sxtb	r2, r3
 80011d4:	4b65      	ldr	r3, [pc, #404]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 80011d6:	789b      	ldrb	r3, [r3, #2]
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b25a      	sxtb	r2, r3
 80011de:	4b6b      	ldr	r3, [pc, #428]	; (800138c <HAL_UARTEx_RxEventCallback+0x298>)
 80011e0:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80011e2:	e140      	b.n	8001466 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x42 && cmdDataSize == 3){	// Joint Jog q2
 80011e4:	4b61      	ldr	r3, [pc, #388]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	2b42      	cmp	r3, #66	; 0x42
 80011ea:	d106      	bne.n	80011fa <HAL_UARTEx_RxEventCallback+0x106>
 80011ec:	4b61      	ldr	r3, [pc, #388]	; (8001374 <HAL_UARTEx_RxEventCallback+0x280>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d101      	bne.n	80011fa <HAL_UARTEx_RxEventCallback+0x106>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <HAL_UARTEx_RxEventCallback+0x108>
 80011fa:	2300      	movs	r3, #0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00b      	beq.n	8001218 <HAL_UARTEx_RxEventCallback+0x124>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq2 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001200:	4b5a      	ldr	r3, [pc, #360]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 8001202:	785b      	ldrb	r3, [r3, #1]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b25a      	sxtb	r2, r3
 8001208:	4b58      	ldr	r3, [pc, #352]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 800120a:	789b      	ldrb	r3, [r3, #2]
 800120c:	b25b      	sxtb	r3, r3
 800120e:	4313      	orrs	r3, r2
 8001210:	b25a      	sxtb	r2, r3
 8001212:	4b5f      	ldr	r3, [pc, #380]	; (8001390 <HAL_UARTEx_RxEventCallback+0x29c>)
 8001214:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001216:	e126      	b.n	8001466 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x43 && cmdDataSize == 3){	// Joint Jog q3
 8001218:	4b54      	ldr	r3, [pc, #336]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b43      	cmp	r3, #67	; 0x43
 800121e:	d106      	bne.n	800122e <HAL_UARTEx_RxEventCallback+0x13a>
 8001220:	4b54      	ldr	r3, [pc, #336]	; (8001374 <HAL_UARTEx_RxEventCallback+0x280>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	2b03      	cmp	r3, #3
 8001228:	d101      	bne.n	800122e <HAL_UARTEx_RxEventCallback+0x13a>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_UARTEx_RxEventCallback+0x13c>
 800122e:	2300      	movs	r3, #0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00b      	beq.n	800124c <HAL_UARTEx_RxEventCallback+0x158>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq3 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001234:	4b4d      	ldr	r3, [pc, #308]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 8001236:	785b      	ldrb	r3, [r3, #1]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b25a      	sxtb	r2, r3
 800123c:	4b4b      	ldr	r3, [pc, #300]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 800123e:	789b      	ldrb	r3, [r3, #2]
 8001240:	b25b      	sxtb	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b25a      	sxtb	r2, r3
 8001246:	4b53      	ldr	r3, [pc, #332]	; (8001394 <HAL_UARTEx_RxEventCallback+0x2a0>)
 8001248:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 800124a:	e10c      	b.n	8001466 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x44 && cmdDataSize == 3){	// Joint Jog q4
 800124c:	4b47      	ldr	r3, [pc, #284]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b44      	cmp	r3, #68	; 0x44
 8001252:	d106      	bne.n	8001262 <HAL_UARTEx_RxEventCallback+0x16e>
 8001254:	4b47      	ldr	r3, [pc, #284]	; (8001374 <HAL_UARTEx_RxEventCallback+0x280>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	b29b      	uxth	r3, r3
 800125a:	2b03      	cmp	r3, #3
 800125c:	d101      	bne.n	8001262 <HAL_UARTEx_RxEventCallback+0x16e>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_UARTEx_RxEventCallback+0x170>
 8001262:	2300      	movs	r3, #0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d00b      	beq.n	8001280 <HAL_UARTEx_RxEventCallback+0x18c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq4 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001268:	4b40      	ldr	r3, [pc, #256]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 800126a:	785b      	ldrb	r3, [r3, #1]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b25a      	sxtb	r2, r3
 8001270:	4b3e      	ldr	r3, [pc, #248]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 8001272:	789b      	ldrb	r3, [r3, #2]
 8001274:	b25b      	sxtb	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	b25a      	sxtb	r2, r3
 800127a:	4b47      	ldr	r3, [pc, #284]	; (8001398 <HAL_UARTEx_RxEventCallback+0x2a4>)
 800127c:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 800127e:	e0f2      	b.n	8001466 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x51 && cmdDataSize == 3){	// Linear Jog X
 8001280:	4b3a      	ldr	r3, [pc, #232]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b51      	cmp	r3, #81	; 0x51
 8001286:	d106      	bne.n	8001296 <HAL_UARTEx_RxEventCallback+0x1a2>
 8001288:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <HAL_UARTEx_RxEventCallback+0x280>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	2b03      	cmp	r3, #3
 8001290:	d101      	bne.n	8001296 <HAL_UARTEx_RxEventCallback+0x1a2>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <HAL_UARTEx_RxEventCallback+0x1a4>
 8001296:	2300      	movs	r3, #0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00b      	beq.n	80012b4 <HAL_UARTEx_RxEventCallback+0x1c0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 800129c:	4b33      	ldr	r3, [pc, #204]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	b25a      	sxtb	r2, r3
 80012a4:	4b31      	ldr	r3, [pc, #196]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 80012a6:	789b      	ldrb	r3, [r3, #2]
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b25a      	sxtb	r2, r3
 80012ae:	4b3b      	ldr	r3, [pc, #236]	; (800139c <HAL_UARTEx_RxEventCallback+0x2a8>)
 80012b0:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80012b2:	e0d8      	b.n	8001466 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x52 && cmdDataSize == 3){	// Linear Jog Y
 80012b4:	4b2d      	ldr	r3, [pc, #180]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b52      	cmp	r3, #82	; 0x52
 80012ba:	d106      	bne.n	80012ca <HAL_UARTEx_RxEventCallback+0x1d6>
 80012bc:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_UARTEx_RxEventCallback+0x280>)
 80012be:	881b      	ldrh	r3, [r3, #0]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d101      	bne.n	80012ca <HAL_UARTEx_RxEventCallback+0x1d6>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_UARTEx_RxEventCallback+0x1d8>
 80012ca:	2300      	movs	r3, #0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00b      	beq.n	80012e8 <HAL_UARTEx_RxEventCallback+0x1f4>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dy = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80012d0:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 80012d2:	785b      	ldrb	r3, [r3, #1]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b25a      	sxtb	r2, r3
 80012d8:	4b24      	ldr	r3, [pc, #144]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 80012da:	789b      	ldrb	r3, [r3, #2]
 80012dc:	b25b      	sxtb	r3, r3
 80012de:	4313      	orrs	r3, r2
 80012e0:	b25a      	sxtb	r2, r3
 80012e2:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <HAL_UARTEx_RxEventCallback+0x2ac>)
 80012e4:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80012e6:	e0be      	b.n	8001466 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x53 && cmdDataSize == 3){	// Linear Jog Z
 80012e8:	4b20      	ldr	r3, [pc, #128]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b53      	cmp	r3, #83	; 0x53
 80012ee:	d106      	bne.n	80012fe <HAL_UARTEx_RxEventCallback+0x20a>
 80012f0:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_UARTEx_RxEventCallback+0x280>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	2b03      	cmp	r3, #3
 80012f8:	d101      	bne.n	80012fe <HAL_UARTEx_RxEventCallback+0x20a>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <HAL_UARTEx_RxEventCallback+0x20c>
 80012fe:	2300      	movs	r3, #0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00b      	beq.n	800131c <HAL_UARTEx_RxEventCallback+0x228>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dz = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 8001306:	785b      	ldrb	r3, [r3, #1]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	b25a      	sxtb	r2, r3
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 800130e:	789b      	ldrb	r3, [r3, #2]
 8001310:	b25b      	sxtb	r3, r3
 8001312:	4313      	orrs	r3, r2
 8001314:	b25a      	sxtb	r2, r3
 8001316:	4b23      	ldr	r3, [pc, #140]	; (80013a4 <HAL_UARTEx_RxEventCallback+0x2b0>)
 8001318:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 800131a:	e0a4      	b.n	8001466 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3){	// Linear Jog Yaw
 800131c:	4b13      	ldr	r3, [pc, #76]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b54      	cmp	r3, #84	; 0x54
 8001322:	d106      	bne.n	8001332 <HAL_UARTEx_RxEventCallback+0x23e>
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_UARTEx_RxEventCallback+0x280>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	b29b      	uxth	r3, r3
 800132a:	2b03      	cmp	r3, #3
 800132c:	d101      	bne.n	8001332 <HAL_UARTEx_RxEventCallback+0x23e>
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <HAL_UARTEx_RxEventCallback+0x240>
 8001332:	2300      	movs	r3, #0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00b      	beq.n	8001350 <HAL_UARTEx_RxEventCallback+0x25c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 800133a:	785b      	ldrb	r3, [r3, #1]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b25a      	sxtb	r2, r3
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 8001342:	789b      	ldrb	r3, [r3, #2]
 8001344:	b25b      	sxtb	r3, r3
 8001346:	4313      	orrs	r3, r2
 8001348:	b25a      	sxtb	r2, r3
 800134a:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <HAL_UARTEx_RxEventCallback+0x2b4>)
 800134c:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 800134e:	e08a      	b.n	8001466 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5){ // Joint Jog 4q
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_UARTEx_RxEventCallback+0x278>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b61      	cmp	r3, #97	; 0x61
 8001356:	d129      	bne.n	80013ac <HAL_UARTEx_RxEventCallback+0x2b8>
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_UARTEx_RxEventCallback+0x280>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	b29b      	uxth	r3, r3
 800135e:	2b05      	cmp	r3, #5
 8001360:	d124      	bne.n	80013ac <HAL_UARTEx_RxEventCallback+0x2b8>
 8001362:	2301      	movs	r3, #1
 8001364:	e023      	b.n	80013ae <HAL_UARTEx_RxEventCallback+0x2ba>
 8001366:	bf00      	nop
 8001368:	24000a5c 	.word	0x24000a5c
 800136c:	24000220 	.word	0x24000220
 8001370:	24000234 	.word	0x24000234
 8001374:	24000248 	.word	0x24000248
 8001378:	240004ec 	.word	0x240004ec
 800137c:	2400021c 	.word	0x2400021c
 8001380:	2400021e 	.word	0x2400021e
 8001384:	58021000 	.word	0x58021000
 8001388:	58020400 	.word	0x58020400
 800138c:	24000214 	.word	0x24000214
 8001390:	24000215 	.word	0x24000215
 8001394:	24000216 	.word	0x24000216
 8001398:	24000217 	.word	0x24000217
 800139c:	24000218 	.word	0x24000218
 80013a0:	24000219 	.word	0x24000219
 80013a4:	2400021a 	.word	0x2400021a
 80013a8:	2400021b 	.word	0x2400021b
 80013ac:	2300      	movs	r3, #0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d014      	beq.n	80013dc <HAL_UARTEx_RxEventCallback+0x2e8>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 80013b2:	4b63      	ldr	r3, [pc, #396]	; (8001540 <HAL_UARTEx_RxEventCallback+0x44c>)
 80013b4:	785b      	ldrb	r3, [r3, #1]
 80013b6:	b25a      	sxtb	r2, r3
 80013b8:	4b62      	ldr	r3, [pc, #392]	; (8001544 <HAL_UARTEx_RxEventCallback+0x450>)
 80013ba:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 80013bc:	4b60      	ldr	r3, [pc, #384]	; (8001540 <HAL_UARTEx_RxEventCallback+0x44c>)
 80013be:	789b      	ldrb	r3, [r3, #2]
 80013c0:	b25a      	sxtb	r2, r3
 80013c2:	4b61      	ldr	r3, [pc, #388]	; (8001548 <HAL_UARTEx_RxEventCallback+0x454>)
 80013c4:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 80013c6:	4b5e      	ldr	r3, [pc, #376]	; (8001540 <HAL_UARTEx_RxEventCallback+0x44c>)
 80013c8:	78db      	ldrb	r3, [r3, #3]
 80013ca:	b25a      	sxtb	r2, r3
 80013cc:	4b5f      	ldr	r3, [pc, #380]	; (800154c <HAL_UARTEx_RxEventCallback+0x458>)
 80013ce:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 80013d0:	4b5b      	ldr	r3, [pc, #364]	; (8001540 <HAL_UARTEx_RxEventCallback+0x44c>)
 80013d2:	791b      	ldrb	r3, [r3, #4]
 80013d4:	b25a      	sxtb	r2, r3
 80013d6:	4b5e      	ldr	r3, [pc, #376]	; (8001550 <HAL_UARTEx_RxEventCallback+0x45c>)
 80013d8:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80013da:	e044      	b.n	8001466 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5){ // Linear Jog X,Y,Z,Yaw
 80013dc:	4b58      	ldr	r3, [pc, #352]	; (8001540 <HAL_UARTEx_RxEventCallback+0x44c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b71      	cmp	r3, #113	; 0x71
 80013e2:	d106      	bne.n	80013f2 <HAL_UARTEx_RxEventCallback+0x2fe>
 80013e4:	4b5b      	ldr	r3, [pc, #364]	; (8001554 <HAL_UARTEx_RxEventCallback+0x460>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	2b05      	cmp	r3, #5
 80013ec:	d101      	bne.n	80013f2 <HAL_UARTEx_RxEventCallback+0x2fe>
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <HAL_UARTEx_RxEventCallback+0x300>
 80013f2:	2300      	movs	r3, #0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d036      	beq.n	8001466 <HAL_UARTEx_RxEventCallback+0x372>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = Old_Rx_Buffer[1];
 80013f8:	4b51      	ldr	r3, [pc, #324]	; (8001540 <HAL_UARTEx_RxEventCallback+0x44c>)
 80013fa:	785b      	ldrb	r3, [r3, #1]
 80013fc:	b25a      	sxtb	r2, r3
 80013fe:	4b56      	ldr	r3, [pc, #344]	; (8001558 <HAL_UARTEx_RxEventCallback+0x464>)
 8001400:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 8001402:	4b4f      	ldr	r3, [pc, #316]	; (8001540 <HAL_UARTEx_RxEventCallback+0x44c>)
 8001404:	789b      	ldrb	r3, [r3, #2]
 8001406:	b25a      	sxtb	r2, r3
 8001408:	4b54      	ldr	r3, [pc, #336]	; (800155c <HAL_UARTEx_RxEventCallback+0x468>)
 800140a:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 800140c:	4b4c      	ldr	r3, [pc, #304]	; (8001540 <HAL_UARTEx_RxEventCallback+0x44c>)
 800140e:	78db      	ldrb	r3, [r3, #3]
 8001410:	b25a      	sxtb	r2, r3
 8001412:	4b53      	ldr	r3, [pc, #332]	; (8001560 <HAL_UARTEx_RxEventCallback+0x46c>)
 8001414:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 8001416:	4b4a      	ldr	r3, [pc, #296]	; (8001540 <HAL_UARTEx_RxEventCallback+0x44c>)
 8001418:	791b      	ldrb	r3, [r3, #4]
 800141a:	b25a      	sxtb	r2, r3
 800141c:	4b51      	ldr	r3, [pc, #324]	; (8001564 <HAL_UARTEx_RxEventCallback+0x470>)
 800141e:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001420:	e021      	b.n	8001466 <HAL_UARTEx_RxEventCallback+0x372>
				}
			}
			else{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	2102      	movs	r1, #2
 8001426:	4850      	ldr	r0, [pc, #320]	; (8001568 <HAL_UARTEx_RxEventCallback+0x474>)
 8001428:	f006 fb0c 	bl	8007a44 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001432:	484e      	ldr	r0, [pc, #312]	; (800156c <HAL_UARTEx_RxEventCallback+0x478>)
 8001434:	f006 fb06 	bl	8007a44 <HAL_GPIO_WritePin>
				HAL_UART_Transmit_DMA(&huart3, (uint8_t *)"CRC16 error\n", 12);
 8001438:	220c      	movs	r2, #12
 800143a:	494d      	ldr	r1, [pc, #308]	; (8001570 <HAL_UARTEx_RxEventCallback+0x47c>)
 800143c:	484d      	ldr	r0, [pc, #308]	; (8001574 <HAL_UARTEx_RxEventCallback+0x480>)
 800143e:	f00a faeb 	bl	800ba18 <HAL_UART_Transmit_DMA>
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001442:	e010      	b.n	8001466 <HAL_UARTEx_RxEventCallback+0x372>
			}
		}
		else{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	2102      	movs	r1, #2
 8001448:	4847      	ldr	r0, [pc, #284]	; (8001568 <HAL_UARTEx_RxEventCallback+0x474>)
 800144a:	f006 fafb 	bl	8007a44 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800144e:	2201      	movs	r2, #1
 8001450:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001454:	4845      	ldr	r0, [pc, #276]	; (800156c <HAL_UARTEx_RxEventCallback+0x478>)
 8001456:	f006 faf5 	bl	8007a44 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t *)"Protocol match error\n", 21);
 800145a:	2215      	movs	r2, #21
 800145c:	4946      	ldr	r1, [pc, #280]	; (8001578 <HAL_UARTEx_RxEventCallback+0x484>)
 800145e:	4845      	ldr	r0, [pc, #276]	; (8001574 <HAL_UARTEx_RxEventCallback+0x480>)
 8001460:	f00a fada 	bl	800ba18 <HAL_UART_Transmit_DMA>
 8001464:	e000      	b.n	8001468 <HAL_UARTEx_RxEventCallback+0x374>
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001466:	bf00      	nop
		}
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 8001468:	2214      	movs	r2, #20
 800146a:	4944      	ldr	r1, [pc, #272]	; (800157c <HAL_UARTEx_RxEventCallback+0x488>)
 800146c:	4841      	ldr	r0, [pc, #260]	; (8001574 <HAL_UARTEx_RxEventCallback+0x480>)
 800146e:	f00c fa26 	bl	800d8be <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001472:	4b43      	ldr	r3, [pc, #268]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a43      	ldr	r2, [pc, #268]	; (8001584 <HAL_UARTEx_RxEventCallback+0x490>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d04a      	beq.n	8001512 <HAL_UARTEx_RxEventCallback+0x41e>
 800147c:	4b40      	ldr	r3, [pc, #256]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a41      	ldr	r2, [pc, #260]	; (8001588 <HAL_UARTEx_RxEventCallback+0x494>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d045      	beq.n	8001512 <HAL_UARTEx_RxEventCallback+0x41e>
 8001486:	4b3e      	ldr	r3, [pc, #248]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a40      	ldr	r2, [pc, #256]	; (800158c <HAL_UARTEx_RxEventCallback+0x498>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d040      	beq.n	8001512 <HAL_UARTEx_RxEventCallback+0x41e>
 8001490:	4b3b      	ldr	r3, [pc, #236]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a3e      	ldr	r2, [pc, #248]	; (8001590 <HAL_UARTEx_RxEventCallback+0x49c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d03b      	beq.n	8001512 <HAL_UARTEx_RxEventCallback+0x41e>
 800149a:	4b39      	ldr	r3, [pc, #228]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a3d      	ldr	r2, [pc, #244]	; (8001594 <HAL_UARTEx_RxEventCallback+0x4a0>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d036      	beq.n	8001512 <HAL_UARTEx_RxEventCallback+0x41e>
 80014a4:	4b36      	ldr	r3, [pc, #216]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a3b      	ldr	r2, [pc, #236]	; (8001598 <HAL_UARTEx_RxEventCallback+0x4a4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d031      	beq.n	8001512 <HAL_UARTEx_RxEventCallback+0x41e>
 80014ae:	4b34      	ldr	r3, [pc, #208]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a3a      	ldr	r2, [pc, #232]	; (800159c <HAL_UARTEx_RxEventCallback+0x4a8>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d02c      	beq.n	8001512 <HAL_UARTEx_RxEventCallback+0x41e>
 80014b8:	4b31      	ldr	r3, [pc, #196]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a38      	ldr	r2, [pc, #224]	; (80015a0 <HAL_UARTEx_RxEventCallback+0x4ac>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d027      	beq.n	8001512 <HAL_UARTEx_RxEventCallback+0x41e>
 80014c2:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a37      	ldr	r2, [pc, #220]	; (80015a4 <HAL_UARTEx_RxEventCallback+0x4b0>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d022      	beq.n	8001512 <HAL_UARTEx_RxEventCallback+0x41e>
 80014cc:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a35      	ldr	r2, [pc, #212]	; (80015a8 <HAL_UARTEx_RxEventCallback+0x4b4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d01d      	beq.n	8001512 <HAL_UARTEx_RxEventCallback+0x41e>
 80014d6:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a34      	ldr	r2, [pc, #208]	; (80015ac <HAL_UARTEx_RxEventCallback+0x4b8>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d018      	beq.n	8001512 <HAL_UARTEx_RxEventCallback+0x41e>
 80014e0:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a32      	ldr	r2, [pc, #200]	; (80015b0 <HAL_UARTEx_RxEventCallback+0x4bc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d013      	beq.n	8001512 <HAL_UARTEx_RxEventCallback+0x41e>
 80014ea:	4b25      	ldr	r3, [pc, #148]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a31      	ldr	r2, [pc, #196]	; (80015b4 <HAL_UARTEx_RxEventCallback+0x4c0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d00e      	beq.n	8001512 <HAL_UARTEx_RxEventCallback+0x41e>
 80014f4:	4b22      	ldr	r3, [pc, #136]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a2f      	ldr	r2, [pc, #188]	; (80015b8 <HAL_UARTEx_RxEventCallback+0x4c4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d009      	beq.n	8001512 <HAL_UARTEx_RxEventCallback+0x41e>
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a2e      	ldr	r2, [pc, #184]	; (80015bc <HAL_UARTEx_RxEventCallback+0x4c8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d004      	beq.n	8001512 <HAL_UARTEx_RxEventCallback+0x41e>
 8001508:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a2c      	ldr	r2, [pc, #176]	; (80015c0 <HAL_UARTEx_RxEventCallback+0x4cc>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d109      	bne.n	8001526 <HAL_UARTEx_RxEventCallback+0x432>
 8001512:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0208 	bic.w	r2, r2, #8
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	bf00      	nop
	}
}
 8001524:	e007      	b.n	8001536 <HAL_UARTEx_RxEventCallback+0x442>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_UARTEx_RxEventCallback+0x48c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0204 	bic.w	r2, r2, #4
 8001534:	601a      	str	r2, [r3, #0]
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bdb0      	pop	{r4, r5, r7, pc}
 800153e:	bf00      	nop
 8001540:	24000220 	.word	0x24000220
 8001544:	24000214 	.word	0x24000214
 8001548:	24000215 	.word	0x24000215
 800154c:	24000216 	.word	0x24000216
 8001550:	24000217 	.word	0x24000217
 8001554:	24000248 	.word	0x24000248
 8001558:	24000218 	.word	0x24000218
 800155c:	24000219 	.word	0x24000219
 8001560:	2400021a 	.word	0x2400021a
 8001564:	2400021b 	.word	0x2400021b
 8001568:	58021000 	.word	0x58021000
 800156c:	58020400 	.word	0x58020400
 8001570:	080109e8 	.word	0x080109e8
 8001574:	24000a5c 	.word	0x24000a5c
 8001578:	080109f8 	.word	0x080109f8
 800157c:	24000234 	.word	0x24000234
 8001580:	240009e4 	.word	0x240009e4
 8001584:	40020010 	.word	0x40020010
 8001588:	40020028 	.word	0x40020028
 800158c:	40020040 	.word	0x40020040
 8001590:	40020058 	.word	0x40020058
 8001594:	40020070 	.word	0x40020070
 8001598:	40020088 	.word	0x40020088
 800159c:	400200a0 	.word	0x400200a0
 80015a0:	400200b8 	.word	0x400200b8
 80015a4:	40020410 	.word	0x40020410
 80015a8:	40020428 	.word	0x40020428
 80015ac:	40020440 	.word	0x40020440
 80015b0:	40020458 	.word	0x40020458
 80015b4:	40020470 	.word	0x40020470
 80015b8:	40020488 	.word	0x40020488
 80015bc:	400204a0 	.word	0x400204a0
 80015c0:	400204b8 	.word	0x400204b8

080015c4 <_ZN11robot_jointC1Ev>:
struct joint_state {
    float q1,q2,q3,q4;
};
typedef struct joint_state joint_config;

struct robot_joint{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	661a      	str	r2, [r3, #96]	; 0x60
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015e2:	665a      	str	r2, [r3, #100]	; 0x64
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f04f 0200 	mov.w	r2, #0
 80015ea:	669a      	str	r2, [r3, #104]	; 0x68
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015f2:	66da      	str	r2, [r3, #108]	; 0x6c
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	671a      	str	r2, [r3, #112]	; 0x70
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	675a      	str	r2, [r3, #116]	; 0x74
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	679a      	str	r2, [r3, #120]	; 0x78
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a06      	ldr	r2, [pc, #24]	; (8001628 <_ZN11robot_jointC1Ev+0x64>)
 8001610:	67da      	str	r2, [r3, #124]	; 0x7c
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a05      	ldr	r2, [pc, #20]	; (800162c <_ZN11robot_jointC1Ev+0x68>)
 8001616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	3dc28f5c 	.word	0x3dc28f5c
 800162c:	387ba882 	.word	0x387ba882

08001630 <_Z12KalmanFilterf11robot_joint>:
////     p21 = P21 + P22*dt + (Q*dt3)/2 - (((Q*dt3)/2 + P22*dt + P21)*(P11 + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
////	 p22 = P22 + Q*dt2 - (((Q*dt3)/2 + P22*dt + P12)*((Q*dt3)/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
//}

fcb_joint KalmanFilter(float theta_k, fcb_joint joint)
{
 8001630:	b084      	sub	sp, #16
 8001632:	b580      	push	{r7, lr}
 8001634:	ed2d 8b08 	vpush	{d8-d11}
 8001638:	b08a      	sub	sp, #40	; 0x28
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	ed87 0a00 	vstr	s0, [r7]
 8001642:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	bug1 = joint.Encoder;
	float X1 = joint.X11;
 800164a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = joint.X21;
 8001650:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001654:	623b      	str	r3, [r7, #32]
	float P11 = joint.p11;
 8001656:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800165a:	61fb      	str	r3, [r7, #28]
	float P12 = joint.p12;
 800165c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001660:	61bb      	str	r3, [r7, #24]
	float P21 = joint.p21;
 8001662:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001666:	617b      	str	r3, [r7, #20]
	float P22 = joint.p22;
 8001668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800166c:	613b      	str	r3, [r7, #16]
	float Q = joint.Q;
 800166e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001672:	60fb      	str	r3, [r7, #12]
	float R = joint.R;
 8001674:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001678:	60bb      	str	r3, [r7, #8]

	joint.X11 = X1 + (X2*dt) - ((X1 - theta_k + X2*dt)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 800167a:	4bef      	ldr	r3, [pc, #956]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 800167c:	ed93 7a00 	vldr	s14, [r3]
 8001680:	edd7 7a08 	vldr	s15, [r7, #32]
 8001684:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001688:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800168c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001690:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001694:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001698:	edd7 7a00 	vldr	s15, [r7]
 800169c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016a0:	4be5      	ldr	r3, [pc, #916]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 80016a2:	edd3 6a00 	vldr	s13, [r3]
 80016a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80016aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80016b6:	4be0      	ldr	r3, [pc, #896]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 80016b8:	ed93 7a00 	vldr	s14, [r3]
 80016bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80016c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80016c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016cc:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80016d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016d4:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80016d8:	4bd7      	ldr	r3, [pc, #860]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 80016da:	edd3 7a00 	vldr	s15, [r3]
 80016de:	2004      	movs	r0, #4
 80016e0:	eeb0 0a67 	vmov.f32	s0, s15
 80016e4:	f001 f88a 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016e8:	eeb0 7b40 	vmov.f64	d7, d0
 80016ec:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80016f0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80016f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016f8:	ee3a 6b07 	vadd.f64	d6, d10, d7
 80016fc:	4bce      	ldr	r3, [pc, #824]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 80016fe:	ed93 7a00 	vldr	s14, [r3]
 8001702:	edd7 7a04 	vldr	s15, [r7, #16]
 8001706:	ee27 7a27 	vmul.f32	s14, s14, s15
 800170a:	edd7 7a06 	vldr	s15, [r7, #24]
 800170e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001712:	4bc9      	ldr	r3, [pc, #804]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001720:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001724:	ee29 9b07 	vmul.f64	d9, d9, d7
 8001728:	ed97 7a07 	vldr	s14, [r7, #28]
 800172c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001730:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001734:	4bc0      	ldr	r3, [pc, #768]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001736:	edd3 6a00 	vldr	s13, [r3]
 800173a:	edd7 7a05 	vldr	s15, [r7, #20]
 800173e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001746:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800174a:	edd7 7a03 	vldr	s15, [r7, #12]
 800174e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001752:	4bb9      	ldr	r3, [pc, #740]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001754:	edd3 7a00 	vldr	s15, [r3]
 8001758:	2004      	movs	r0, #4
 800175a:	eeb0 0a67 	vmov.f32	s0, s15
 800175e:	f001 f84d 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001762:	eeb0 7b40 	vmov.f64	d7, d0
 8001766:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800176a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800176e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001772:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001776:	4bb0      	ldr	r3, [pc, #704]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001778:	ed93 7a00 	vldr	s14, [r3]
 800177c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001780:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001784:	edd7 7a06 	vldr	s15, [r7, #24]
 8001788:	ee37 7a27 	vadd.f32	s14, s14, s15
 800178c:	4baa      	ldr	r3, [pc, #680]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001796:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800179a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800179e:	ee89 7b06 	vdiv.f64	d7, d9, d6
 80017a2:	ee38 7b47 	vsub.f64	d7, d8, d7
 80017a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017aa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	joint.X21 = X2 - (((Q*pow(dt,3))/2 + P22*dt + P21)*(X1 - theta_k + X2*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 80017ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80017b2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80017b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ba:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80017be:	4b9e      	ldr	r3, [pc, #632]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 80017c0:	edd3 7a00 	vldr	s15, [r3]
 80017c4:	2003      	movs	r0, #3
 80017c6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ca:	f001 f817 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80017ce:	eeb0 7b40 	vmov.f64	d7, d0
 80017d2:	ee29 7b07 	vmul.f64	d7, d9, d7
 80017d6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80017da:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80017de:	4b96      	ldr	r3, [pc, #600]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 80017e0:	ed93 7a00 	vldr	s14, [r3]
 80017e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80017f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80017f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017fc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001800:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001804:	edd7 7a00 	vldr	s15, [r7]
 8001808:	ee37 7a67 	vsub.f32	s14, s14, s15
 800180c:	4b8a      	ldr	r3, [pc, #552]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 800180e:	edd3 5a00 	vldr	s11, [r3]
 8001812:	edd7 7a08 	vldr	s15, [r7, #32]
 8001816:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800181a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800181e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001822:	ee26 9b07 	vmul.f64	d9, d6, d7
 8001826:	ed97 7a07 	vldr	s14, [r7, #28]
 800182a:	edd7 7a02 	vldr	s15, [r7, #8]
 800182e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001832:	4b81      	ldr	r3, [pc, #516]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001834:	edd3 6a00 	vldr	s13, [r3]
 8001838:	edd7 7a05 	vldr	s15, [r7, #20]
 800183c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001844:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001848:	edd7 7a03 	vldr	s15, [r7, #12]
 800184c:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001850:	4b79      	ldr	r3, [pc, #484]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001852:	edd3 7a00 	vldr	s15, [r3]
 8001856:	2004      	movs	r0, #4
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	f000 ffce 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001860:	eeb0 7b40 	vmov.f64	d7, d0
 8001864:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001868:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800186c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001870:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001874:	4b70      	ldr	r3, [pc, #448]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001876:	ed93 7a00 	vldr	s14, [r3]
 800187a:	edd7 7a04 	vldr	s15, [r7, #16]
 800187e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001882:	edd7 7a06 	vldr	s15, [r7, #24]
 8001886:	ee37 7a27 	vadd.f32	s14, s14, s15
 800188a:	4b6b      	ldr	r3, [pc, #428]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001894:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001898:	ee36 6b07 	vadd.f64	d6, d6, d7
 800189c:	ee89 7b06 	vdiv.f64	d7, d9, d6
 80018a0:	ee38 7b47 	vsub.f64	d7, d8, d7
 80018a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018a8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	joint.p11 = -((P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)) - 1)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 80018ac:	4b62      	ldr	r3, [pc, #392]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 80018ae:	ed93 7a00 	vldr	s14, [r3]
 80018b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80018b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80018be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80018c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ca:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80018ce:	4b5a      	ldr	r3, [pc, #360]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	2004      	movs	r0, #4
 80018d6:	eeb0 0a67 	vmov.f32	s0, s15
 80018da:	f000 ff8f 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80018de:	eeb0 7b40 	vmov.f64	d7, d0
 80018e2:	ee29 6b07 	vmul.f64	d6, d9, d7
 80018e6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80018ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018ee:	ee38 6b07 	vadd.f64	d6, d8, d7
 80018f2:	4b51      	ldr	r3, [pc, #324]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 80018f4:	ed93 7a00 	vldr	s14, [r3]
 80018f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001900:	edd7 7a06 	vldr	s15, [r7, #24]
 8001904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001908:	4b4b      	ldr	r3, [pc, #300]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001912:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001916:	ee36 8b07 	vadd.f64	d8, d6, d7
 800191a:	ed97 7a07 	vldr	s14, [r7, #28]
 800191e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001922:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001926:	4b44      	ldr	r3, [pc, #272]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001928:	edd3 6a00 	vldr	s13, [r3]
 800192c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001938:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800193c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001940:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001944:	4b3c      	ldr	r3, [pc, #240]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	2004      	movs	r0, #4
 800194c:	eeb0 0a67 	vmov.f32	s0, s15
 8001950:	f000 ff54 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001954:	eeb0 7b40 	vmov.f64	d7, d0
 8001958:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800195c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001960:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001964:	ee39 6b07 	vadd.f64	d6, d9, d7
 8001968:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 800196a:	ed93 7a00 	vldr	s14, [r3]
 800196e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001972:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001976:	edd7 7a06 	vldr	s15, [r7, #24]
 800197a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800197e:	4b2e      	ldr	r3, [pc, #184]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001988:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800198c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001990:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001994:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001998:	ee37 7b46 	vsub.f64	d7, d7, d6
 800199c:	eeb1 8b47 	vneg.f64	d8, d7
 80019a0:	4b25      	ldr	r3, [pc, #148]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 80019a2:	ed93 7a00 	vldr	s14, [r3]
 80019a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80019aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019ae:	edd7 7a07 	vldr	s15, [r7, #28]
 80019b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80019ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80019be:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	2004      	movs	r0, #4
 80019ca:	eeb0 0a67 	vmov.f32	s0, s15
 80019ce:	f000 ff15 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80019d2:	eeb0 7b40 	vmov.f64	d7, d0
 80019d6:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80019da:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80019de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019e2:	ee39 6b07 	vadd.f64	d6, d9, d7
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 80019e8:	ed93 7a00 	vldr	s14, [r3]
 80019ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80019f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a0a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a0e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001a12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a16:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	joint.p12 = -((P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)) - 1)*((Q*pow(dt,3))/2 + P22*dt + P12);
 8001a1a:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001a1c:	ed93 7a00 	vldr	s14, [r3]
 8001a20:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a28:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a30:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001a34:	e002      	b.n	8001a3c <_Z12KalmanFilterf11robot_joint+0x40c>
 8001a36:	bf00      	nop
 8001a38:	24000014 	.word	0x24000014
 8001a3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a40:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001a44:	4bef      	ldr	r3, [pc, #956]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	2004      	movs	r0, #4
 8001a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a50:	f000 fed4 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a54:	eeb0 7b40 	vmov.f64	d7, d0
 8001a58:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001a5c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001a60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a64:	ee38 6b07 	vadd.f64	d6, d8, d7
 8001a68:	4be6      	ldr	r3, [pc, #920]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001a6a:	ed93 7a00 	vldr	s14, [r3]
 8001a6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a76:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a7e:	4be1      	ldr	r3, [pc, #900]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a8c:	ee36 8b07 	vadd.f64	d8, d6, d7
 8001a90:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a94:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a9c:	4bd9      	ldr	r3, [pc, #868]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001a9e:	edd3 6a00 	vldr	s13, [r3]
 8001aa2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aae:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001ab2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ab6:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001aba:	4bd2      	ldr	r3, [pc, #840]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001abc:	edd3 7a00 	vldr	s15, [r3]
 8001ac0:	2004      	movs	r0, #4
 8001ac2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac6:	f000 fe99 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001aca:	eeb0 7b40 	vmov.f64	d7, d0
 8001ace:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001ad2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001ad6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ada:	ee39 6b07 	vadd.f64	d6, d9, d7
 8001ade:	4bc9      	ldr	r3, [pc, #804]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001ae0:	ed93 7a00 	vldr	s14, [r3]
 8001ae4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aec:	edd7 7a06 	vldr	s15, [r7, #24]
 8001af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001af4:	4bc3      	ldr	r3, [pc, #780]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001af6:	edd3 7a00 	vldr	s15, [r3]
 8001afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001afe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b02:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001b06:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001b0a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b12:	eeb1 8b47 	vneg.f64	d8, d7
 8001b16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b1a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001b1e:	4bb9      	ldr	r3, [pc, #740]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001b20:	edd3 7a00 	vldr	s15, [r3]
 8001b24:	2003      	movs	r0, #3
 8001b26:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2a:	f000 fe67 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b2e:	eeb0 7b40 	vmov.f64	d7, d0
 8001b32:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001b36:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001b3a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001b3e:	4bb1      	ldr	r3, [pc, #708]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001b40:	ed93 7a00 	vldr	s14, [r3]
 8001b44:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b50:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001b54:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b60:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001b64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b68:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	joint.p21 = P21 + P22*dt + (Q*pow(dt,3))/2 - (((Q*pow(dt,3))/2 + P22*dt + P21)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8001b6c:	4ba5      	ldr	r3, [pc, #660]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001b6e:	ed93 7a00 	vldr	s14, [r3]
 8001b72:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b82:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001b86:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b8a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001b8e:	4b9d      	ldr	r3, [pc, #628]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	2003      	movs	r0, #3
 8001b96:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9a:	f000 fe2f 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b9e:	eeb0 7b40 	vmov.f64	d7, d0
 8001ba2:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001ba6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001baa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001bae:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001bb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001bba:	4b92      	ldr	r3, [pc, #584]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001bbc:	edd3 7a00 	vldr	s15, [r3]
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc6:	f000 fe19 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001bca:	eeb0 7b40 	vmov.f64	d7, d0
 8001bce:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001bd2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001bd6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001bda:	4b8a      	ldr	r3, [pc, #552]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001bdc:	ed93 7a00 	vldr	s14, [r3]
 8001be0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bec:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001bf0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bf8:	ee36 9b07 	vadd.f64	d9, d6, d7
 8001bfc:	4b81      	ldr	r3, [pc, #516]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001bfe:	ed93 7a00 	vldr	s14, [r3]
 8001c02:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c12:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001c16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c1a:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001c1e:	4b79      	ldr	r3, [pc, #484]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001c20:	edd3 7a00 	vldr	s15, [r3]
 8001c24:	2004      	movs	r0, #4
 8001c26:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2a:	f000 fde7 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c2e:	eeb0 7b40 	vmov.f64	d7, d0
 8001c32:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001c36:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001c3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c3e:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001c42:	4b70      	ldr	r3, [pc, #448]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001c44:	ed93 7a00 	vldr	s14, [r3]
 8001c48:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c50:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c58:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001c5a:	edd3 7a00 	vldr	s15, [r3]
 8001c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c66:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c6a:	ee29 9b07 	vmul.f64	d9, d9, d7
 8001c6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c7a:	4b62      	ldr	r3, [pc, #392]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001c7c:	edd3 6a00 	vldr	s13, [r3]
 8001c80:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c8c:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001c90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c94:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001c98:	4b5a      	ldr	r3, [pc, #360]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001c9a:	edd3 7a00 	vldr	s15, [r3]
 8001c9e:	2004      	movs	r0, #4
 8001ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca4:	f000 fdaa 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001ca8:	eeb0 7b40 	vmov.f64	d7, d0
 8001cac:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001cb0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001cb4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001cb8:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001cbc:	4b51      	ldr	r3, [pc, #324]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001cbe:	ed93 7a00 	vldr	s14, [r3]
 8001cc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cc6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cca:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd2:	4b4c      	ldr	r3, [pc, #304]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001cd4:	edd3 7a00 	vldr	s15, [r3]
 8001cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ce0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ce4:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001ce8:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001cec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cf0:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	joint.p22 = P22 + Q*pow(dt,2) - (((Q*pow(dt,3))/2 + P22*dt + P12)*((Q*pow(dt,3))/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8001cf4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cf8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001cfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d00:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001d04:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d06:	edd3 7a00 	vldr	s15, [r3]
 8001d0a:	2002      	movs	r0, #2
 8001d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d10:	f000 fd74 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001d14:	eeb0 7b40 	vmov.f64	d7, d0
 8001d18:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001d1c:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001d20:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d24:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	2003      	movs	r0, #3
 8001d30:	eeb0 0a67 	vmov.f32	s0, s15
 8001d34:	f000 fd62 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001d38:	eeb0 7b40 	vmov.f64	d7, d0
 8001d3c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001d40:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001d44:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001d48:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d4a:	ed93 7a00 	vldr	s14, [r3]
 8001d4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d5a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001d5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d66:	ee36 9b07 	vadd.f64	d9, d6, d7
 8001d6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d6e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	2003      	movs	r0, #3
 8001d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d7e:	f000 fd3d 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001d82:	eeb0 7b40 	vmov.f64	d7, d0
 8001d86:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8001d8a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001d8e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001d92:	4b1c      	ldr	r3, [pc, #112]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d94:	ed93 7a00 	vldr	s14, [r3]
 8001d98:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001da4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001da8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001db0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001db4:	ee29 9b07 	vmul.f64	d9, d9, d7
 8001db8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001dbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001dc6:	edd3 6a00 	vldr	s13, [r3]
 8001dca:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd6:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001dda:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dde:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	2004      	movs	r0, #4
 8001dea:	eeb0 0a67 	vmov.f32	s0, s15
 8001dee:	f000 fd05 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001df2:	eeb0 7b40 	vmov.f64	d7, d0
 8001df6:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001dfa:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001dfe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e02:	e001      	b.n	8001e08 <_Z12KalmanFilterf11robot_joint+0x7d8>
 8001e04:	24000014 	.word	0x24000014
 8001e08:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001e0c:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <_Z12KalmanFilterf11robot_joint+0x838>)
 8001e0e:	ed93 7a00 	vldr	s14, [r3]
 8001e12:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e22:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <_Z12KalmanFilterf11robot_joint+0x838>)
 8001e24:	edd3 7a00 	vldr	s15, [r3]
 8001e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e30:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001e34:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001e38:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001e3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e40:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
//	joint.p11 = (R*(4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p12 = (2*R*(Q*dt3 + 2*p22*dt + 2*p12))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p21 = (2*R*(Q*dt3 + 2*p22*dt + 2*p21))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p22 = p22 + Q*dt2 - (((Q*dt3)/2 + p22*dt + p12)*((Q*dt3)/2 + p22*dt + p21))/(R + p11 + dt*p21 + (Q*dt4)/4 + dt*(p12 + dt*p22));

	return  joint;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e4c:	2284      	movs	r2, #132	; 0x84
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f00c f974 	bl	800e13c <memcpy>

}
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	3728      	adds	r7, #40	; 0x28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	ecbd 8b08 	vpop	{d8-d11}
 8001e5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001e62:	b004      	add	sp, #16
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	24000014 	.word	0x24000014
 8001e6c:	00000000 	.word	0x00000000

08001e70 <HAL_TIM_PeriodElapsedCallback>:
}




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e72:	ed2d 8b02 	vpush	{d8}
 8001e76:	b0c9      	sub	sp, #292	; 0x124
 8001e78:	af1e      	add	r7, sp, #120	; 0x78
 8001e7a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	if (htim == &htim14){	//

	}
	if (htim == &htim12){	//
	}
	if (htim == &htim5){	//
 8001e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e82:	4a7b      	ldr	r2, [pc, #492]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d123      	bne.n	8001ed0 <HAL_TIM_PeriodElapsedCallback+0x60>
//		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
//		if (HALENCJ3OK == HAL_OK) {
//			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
//		}

		stepperJ1.StepperSetFrequency(dq1*4.0);
 8001e88:	4b7a      	ldr	r3, [pc, #488]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b25b      	sxtb	r3, r3
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001e96:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001e9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea6:	4874      	ldr	r0, [pc, #464]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001ea8:	f7fe fc6e 	bl	8000788 <_ZN7Stepper19StepperSetFrequencyEf>
		stepperJ3.StepperSetFrequency(dq3*3.0);
 8001eac:	4b73      	ldr	r3, [pc, #460]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b25b      	sxtb	r3, r3
 8001eb2:	ee07 3a90 	vmov	s15, r3
 8001eb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001eba:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8001ebe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ec2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eca:	486d      	ldr	r0, [pc, #436]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001ecc:	f7fe fc5c 	bl	8000788 <_ZN7Stepper19StepperSetFrequencyEf>
//		stepperJ1.StepperOpenLoopSpeed(u_q1/80.0);
//		stepperJ3.StepperOpenLoopSpeed(u_q3/80.0);


	}
	if (htim == &htim7) { 	//
 8001ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ed4:	4a6b      	ldr	r2, [pc, #428]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	f040 824b 	bne.w	8002372 <HAL_TIM_PeriodElapsedCallback+0x502>
//			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
//		}



	    float t_2 = t*t;
 8001edc:	4b6a      	ldr	r3, [pc, #424]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001ede:	ed93 7a00 	vldr	s14, [r3]
 8001ee2:	4b69      	ldr	r3, [pc, #420]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eec:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	    float t_3 = t*t*t;
 8001ef0:	4b65      	ldr	r3, [pc, #404]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001ef2:	ed93 7a00 	vldr	s14, [r3]
 8001ef6:	4b64      	ldr	r3, [pc, #400]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001ef8:	edd3 7a00 	vldr	s15, [r3]
 8001efc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f00:	4b61      	ldr	r3, [pc, #388]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001f02:	edd3 7a00 	vldr	s15, [r3]
 8001f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f0a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0

	    fcb_joint3.Goal_Position =  C0_q1 + (C2_q1*t_2) - (C3_q1*t_3);
 8001f0e:	4b5f      	ldr	r3, [pc, #380]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001f10:	ed93 7a00 	vldr	s14, [r3]
 8001f14:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f1c:	4b5c      	ldr	r3, [pc, #368]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001f1e:	edd3 7a00 	vldr	s15, [r3]
 8001f22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f26:	4b5b      	ldr	r3, [pc, #364]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001f28:	edd3 6a00 	vldr	s13, [r3]
 8001f2c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001f30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f38:	4b57      	ldr	r3, [pc, #348]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001f3a:	edc3 7a01 	vstr	s15, [r3, #4]

//	    kalman_pos = fcb_joint1.Goal_Position;
	    kalman_pos = (fcb_joint1.Old_p - fcb_joint1.Encoder);
 8001f3e:	4b57      	ldr	r3, [pc, #348]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001f40:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001f44:	4b55      	ldr	r3, [pc, #340]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001f46:	881b      	ldrh	r3, [r3, #0]
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f56:	4b52      	ldr	r3, [pc, #328]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001f58:	edc3 7a00 	vstr	s15, [r3]

	    kalman_velo_input =  kalman_pos ;
 8001f5c:	4b50      	ldr	r3, [pc, #320]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a50      	ldr	r2, [pc, #320]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001f62:	6013      	str	r3, [r2, #0]

	    if (direction_traj == 1){
 8001f64:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	bf0c      	ite	eq
 8001f6c:	2301      	moveq	r3, #1
 8001f6e:	2300      	movne	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 809c 	beq.w	80020b0 <HAL_TIM_PeriodElapsedCallback+0x240>
	    	fcb_joint1.Goal_Position = unwrap_pose + (C0_q1 + (C2_q1*t_2) - (C3_q1*t_3)) - 0.8 ;
 8001f78:	4b44      	ldr	r3, [pc, #272]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001f7a:	ed93 7a00 	vldr	s14, [r3]
 8001f7e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001f82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f86:	4b42      	ldr	r3, [pc, #264]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f90:	4b40      	ldr	r3, [pc, #256]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001f92:	edd3 6a00 	vldr	s13, [r3]
 8001f96:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001f9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fa2:	4b42      	ldr	r3, [pc, #264]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fb0:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8002068 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 8001fb4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fb8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001fbc:	4b37      	ldr	r3, [pc, #220]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001fbe:	edc3 7a01 	vstr	s15, [r3, #4]
	    	fcb_joint1.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * -2 ;
 8001fc2:	4b32      	ldr	r3, [pc, #200]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001fc4:	edd3 7a00 	vldr	s15, [r3]
 8001fc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fcc:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001fd0:	4b2d      	ldr	r3, [pc, #180]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fda:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001fde:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fe8:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8001fec:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001ff0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001ff4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ff8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ffc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002000:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8002004:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002008:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800200c:	4b23      	ldr	r3, [pc, #140]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800200e:	edc3 7a02 	vstr	s15, [r3, #8]
	    	fcb_joint3.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * -2 ;
 8002012:	4b1e      	ldr	r3, [pc, #120]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800201c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002022:	edd3 7a00 	vldr	s15, [r3]
 8002026:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800202a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800202e:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002038:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800203c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002040:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002044:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002048:	ee25 7b07 	vmul.f64	d7, d5, d7
 800204c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002050:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8002054:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002058:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800205c:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800205e:	edc3 7a02 	vstr	s15, [r3, #8]
 8002062:	e096      	b.n	8002192 <HAL_TIM_PeriodElapsedCallback+0x322>
 8002064:	f3af 8000 	nop.w
 8002068:	9999999a 	.word	0x9999999a
 800206c:	3fe99999 	.word	0x3fe99999
 8002070:	24000630 	.word	0x24000630
 8002074:	24000214 	.word	0x24000214
 8002078:	2400024c 	.word	0x2400024c
 800207c:	24000216 	.word	0x24000216
 8002080:	24000274 	.word	0x24000274
 8002084:	24000890 	.word	0x24000890
 8002088:	240002a4 	.word	0x240002a4
 800208c:	240002a8 	.word	0x240002a8
 8002090:	24000004 	.word	0x24000004
 8002094:	240002ac 	.word	0x240002ac
 8002098:	240003d8 	.word	0x240003d8
 800209c:	240002d0 	.word	0x240002d0
 80020a0:	240002b8 	.word	0x240002b8
 80020a4:	240002c8 	.word	0x240002c8
 80020a8:	2400029c 	.word	0x2400029c
 80020ac:	240002cc 	.word	0x240002cc
	    }
	    else
	    {
	    	fcb_joint1.Goal_Position = unwrap_pose - (C0_q1 + (C2_q1*t_2) - (C3_q1*t_3)) + 0.8;
 80020b0:	4bb7      	ldr	r3, [pc, #732]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80020b2:	ed93 7a00 	vldr	s14, [r3]
 80020b6:	4bb7      	ldr	r3, [pc, #732]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0x524>)
 80020b8:	edd3 6a00 	vldr	s13, [r3]
 80020bc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80020c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020c4:	4bb4      	ldr	r3, [pc, #720]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80020c6:	edd3 7a00 	vldr	s15, [r3]
 80020ca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80020ce:	4bb3      	ldr	r3, [pc, #716]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 80020d0:	ed93 6a00 	vldr	s12, [r3]
 80020d4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80020d8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80020dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80020e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020e8:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8002380 <HAL_TIM_PeriodElapsedCallback+0x510>
 80020ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020f4:	4baa      	ldr	r3, [pc, #680]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80020f6:	edc3 7a01 	vstr	s15, [r3, #4]
	    	fcb_joint1.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * 2 ;
 80020fa:	4ba6      	ldr	r3, [pc, #664]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0x524>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002104:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002108:	4ba6      	ldr	r3, [pc, #664]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x534>)
 800210a:	edd3 7a00 	vldr	s15, [r3]
 800210e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002112:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002116:	4ba1      	ldr	r3, [pc, #644]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002120:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002124:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002128:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800212c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002130:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002134:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002138:	ee37 7b07 	vadd.f64	d7, d7, d7
 800213c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002140:	4b97      	ldr	r3, [pc, #604]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8002142:	edc3 7a02 	vstr	s15, [r3, #8]
	    	fcb_joint3.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * 2 ;
 8002146:	4b93      	ldr	r3, [pc, #588]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8002148:	edd3 7a00 	vldr	s15, [r3]
 800214c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002150:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002154:	4b93      	ldr	r3, [pc, #588]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002156:	edd3 7a00 	vldr	s15, [r3]
 800215a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800215e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002162:	4b8e      	ldr	r3, [pc, #568]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800216c:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002170:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002174:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002178:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800217c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002180:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002184:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002188:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800218c:	4b86      	ldr	r3, [pc, #536]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800218e:	edc3 7a02 	vstr	s15, [r3, #8]


//		fcb_joint1.Goal_Velocity = sin(0.314 * 2 * t) * 2000;
//		fcb_joint3.Goal_Velocity = sin(0.314 * 2 * t) * 4000;

	    chess_board_ang = chessboard_angular_velocity * t;
 8002192:	4b86      	ldr	r3, [pc, #536]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8002194:	ed93 7a00 	vldr	s14, [r3]
 8002198:	4b82      	ldr	r3, [pc, #520]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x534>)
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a2:	4b83      	ldr	r3, [pc, #524]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80021a4:	edc3 7a00 	vstr	s15, [r3]

//		setpointJ1 = Goal_velocity_q1;
//		setpointJ3 = Goal_velocity_q3;


		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 80021a8:	4b7d      	ldr	r3, [pc, #500]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80021aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80021ae:	4b7c      	ldr	r3, [pc, #496]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	ee07 3a90 	vmov	s15, r3
 80021b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c0:	4b77      	ldr	r3, [pc, #476]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80021c2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 80021c6:	4b78      	ldr	r3, [pc, #480]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 80021c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80021cc:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	b21b      	sxth	r3, r3
 80021d2:	ee07 3a90 	vmov	s15, r3
 80021d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021de:	4b72      	ldr	r3, [pc, #456]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 80021e0:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 80021e4:	4b6e      	ldr	r3, [pc, #440]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80021e6:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80021ea:	4b6d      	ldr	r3, [pc, #436]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80021ec:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80021f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f4:	4b6a      	ldr	r3, [pc, #424]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80021f6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 80021fa:	4b6b      	ldr	r3, [pc, #428]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 80021fc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002200:	4b69      	ldr	r3, [pc, #420]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002202:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220a:	4b67      	ldr	r3, [pc, #412]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800220c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

		fcb_joint1.Kp_p = 0.0 ;
 8002210:	4b63      	ldr	r3, [pc, #396]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	61da      	str	r2, [r3, #28]
		fcb_joint1.Ki_p = 0.0 ;
 8002218:	4b61      	ldr	r3, [pc, #388]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	621a      	str	r2, [r3, #32]
		fcb_joint1.Kd_p = 0.0 ;
 8002220:	4b5f      	ldr	r3, [pc, #380]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint1.Kp_v = 0.0 ;
 8002228:	4b5d      	ldr	r3, [pc, #372]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint1.Ki_v = 0.0 ;
 8002230:	4b5b      	ldr	r3, [pc, #364]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint1.Kd_v = 0.0 ;
 8002238:	4b59      	ldr	r3, [pc, #356]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	; 0x30

		fcb_joint3.Kp_p = 0.0 ;
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	61da      	str	r2, [r3, #28]
		fcb_joint3.Ki_p = 0.0 ;
 8002248:	4b57      	ldr	r3, [pc, #348]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	621a      	str	r2, [r3, #32]
		fcb_joint3.Kd_p = 0.0 ;
 8002250:	4b55      	ldr	r3, [pc, #340]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint3.Kp_v = 0.0 ;
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint3.Ki_v = 0.0 ;
 8002260:	4b51      	ldr	r3, [pc, #324]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint3.Kd_v = 0.0 ;
 8002268:	4b4f      	ldr	r3, [pc, #316]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	631a      	str	r2, [r3, #48]	; 0x30

//		KalmanFilter(float theta_k,float kalman_pos,float kalman_velo,float P11,float P12,float P21,float P22);
//		KalmanFilter(fcb_joint1.Encoder/ 2609.0 , X11, X21, p11, p12, p21, p22, fcb_joint1);

		fcb_joint1 = KalmanFilter(fcb_joint1.Encoder/ 2609.0 ,fcb_joint1);
 8002270:	4b4b      	ldr	r3, [pc, #300]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	b21b      	sxth	r3, r3
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800227e:	ed9f 5b42 	vldr	d5, [pc, #264]	; 8002388 <HAL_TIM_PeriodElapsedCallback+0x518>
 8002282:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002286:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
 800228a:	4e45      	ldr	r6, [pc, #276]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 800228c:	463d      	mov	r5, r7
 800228e:	4c44      	ldr	r4, [pc, #272]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8002290:	4668      	mov	r0, sp
 8002292:	f104 030c 	add.w	r3, r4, #12
 8002296:	2278      	movs	r2, #120	; 0x78
 8002298:	4619      	mov	r1, r3
 800229a:	f00b ff4f 	bl	800e13c <memcpy>
 800229e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80022a2:	eeb0 0a48 	vmov.f32	s0, s16
 80022a6:	4628      	mov	r0, r5
 80022a8:	f7ff f9c2 	bl	8001630 <_Z12KalmanFilterf11robot_joint>
 80022ac:	4630      	mov	r0, r6
 80022ae:	463b      	mov	r3, r7
 80022b0:	2284      	movs	r2, #132	; 0x84
 80022b2:	4619      	mov	r1, r3
 80022b4:	f00b ff42 	bl	800e13c <memcpy>
//											  (fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_Error_p));
//
//		fcb_joint1.Output_Stepper_Frequency = (fcb_joint1.Kp_p * fcb_joint1.Error_p);
//		fcb_joint3.Output_Stepper_Frequency = (fcb_joint3.Kp_p * fcb_joint3.Error_p);

		fcb_joint1.Output_Stepper_Frequency = fcb_joint1.Goal_Position;
 80022b8:	4b39      	ldr	r3, [pc, #228]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a38      	ldr	r2, [pc, #224]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80022be:	6553      	str	r3, [r2, #84]	; 0x54
		fcb_joint3.Output_Stepper_Frequency = fcb_joint3.Goal_Position;
 80022c0:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a38      	ldr	r2, [pc, #224]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 80022c6:	6553      	str	r3, [r2, #84]	; 0x54



		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 80022c8:	4b35      	ldr	r3, [pc, #212]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80022ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022cc:	4a34      	ldr	r2, [pc, #208]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80022ce:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 80022d0:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 80022d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d4:	4a34      	ldr	r2, [pc, #208]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 80022d6:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint1.Old_p = fcb_joint1.Encoder;
 80022d8:	4b31      	ldr	r3, [pc, #196]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	b21b      	sxth	r3, r3
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e6:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 80022e8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 80022ec:	4b2e      	ldr	r3, [pc, #184]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	ee07 3a90 	vmov	s15, r3
 80022f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022fa:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 80022fc:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
//		stepperJ1.StepperSetFrequency(300.0f);

//		stepperJ1.StepperSetFrequency(uJ1);
//		stepperJ3.StepperSetFrequency(0.0f);

		stepperJ1.StepperOpenLoopSpeed(fcb_joint1.Goal_Velocity);
 8002300:	4b27      	ldr	r3, [pc, #156]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8002302:	edd3 7a02 	vldr	s15, [r3, #8]
 8002306:	eeb0 0a67 	vmov.f32	s0, s15
 800230a:	482a      	ldr	r0, [pc, #168]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x544>)
 800230c:	f7fe fcf0 	bl	8000cf0 <_ZN7Stepper20StepperOpenLoopSpeedEf>
		stepperJ3.StepperOpenLoopSpeed(fcb_joint3.Goal_Velocity);
 8002310:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002312:	edd3 7a02 	vldr	s15, [r3, #8]
 8002316:	eeb0 0a67 	vmov.f32	s0, s15
 800231a:	4827      	ldr	r0, [pc, #156]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800231c:	f7fe fce8 	bl	8000cf0 <_ZN7Stepper20StepperOpenLoopSpeedEf>

		#endif

		t = t + (sample_time_1000) ;
 8002320:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002322:	ed93 7a00 	vldr	s14, [r3]
 8002326:	4b25      	ldr	r3, [pc, #148]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002330:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002332:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Time)
 8002336:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002338:	ed93 7a00 	vldr	s14, [r3]
 800233c:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x550>)
 800233e:	edd3 7a00 	vldr	s15, [r3]
 8002342:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800234a:	bfac      	ite	ge
 800234c:	2301      	movge	r3, #1
 800234e:	2300      	movlt	r3, #0
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d00d      	beq.n	8002372 <HAL_TIM_PeriodElapsedCallback+0x502>
		{
			t = 0.0;
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
			direction_traj ^= 1;
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f083 0301 	eor.w	r3, r3, #1
 8002366:	4a17      	ldr	r2, [pc, #92]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002368:	6013      	str	r3, [r2, #0]
			unwrap_pose =  fcb_joint1.Goal_Position;
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x530>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4a08      	ldr	r2, [pc, #32]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8002370:	6013      	str	r3, [r2, #0]
		}

	}
}
 8002372:	bf00      	nop
 8002374:	37ac      	adds	r7, #172	; 0xac
 8002376:	46bd      	mov	sp, r7
 8002378:	ecbd 8b02 	vpop	{d8}
 800237c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800237e:	bf00      	nop
 8002380:	9999999a 	.word	0x9999999a
 8002384:	3fe99999 	.word	0x3fe99999
 8002388:	00000000 	.word	0x00000000
 800238c:	40a46200 	.word	0x40a46200
 8002390:	240002cc 	.word	0x240002cc
 8002394:	240002a8 	.word	0x240002a8
 8002398:	24000004 	.word	0x24000004
 800239c:	240002ac 	.word	0x240002ac
 80023a0:	240002d0 	.word	0x240002d0
 80023a4:	240002a4 	.word	0x240002a4
 80023a8:	240003d8 	.word	0x240003d8
 80023ac:	24000010 	.word	0x24000010
 80023b0:	240002a0 	.word	0x240002a0
 80023b4:	2400024c 	.word	0x2400024c
 80023b8:	24000274 	.word	0x24000274
 80023bc:	2400000c 	.word	0x2400000c
 80023c0:	24000000 	.word	0x24000000
 80023c4:	2400029c 	.word	0x2400029c

080023c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023cc:	f001 ff98 	bl	8004300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023d0:	f000 f95a 	bl	8002688 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023d4:	f7fe fd58 	bl	8000e88 <MX_GPIO_Init>
  MX_DMA_Init();
 80023d8:	f7fe fd16 	bl	8000e08 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80023dc:	f001 fce4 	bl	8003da8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80023e0:	f000 fee8 	bl	80031b4 <MX_TIM2_Init>
  MX_UART4_Init();
 80023e4:	f001 fc3e 	bl	8003c64 <MX_UART4_Init>
  MX_TIM4_Init();
 80023e8:	f000 ffd4 	bl	8003394 <MX_TIM4_Init>
  MX_SPI3_Init();
 80023ec:	f000 fb36 	bl	8002a5c <MX_SPI3_Init>
  MX_TIM1_Init();
 80023f0:	f000 fe32 	bl	8003058 <MX_TIM1_Init>
  MX_TIM3_Init();
 80023f4:	f000 ff56 	bl	80032a4 <MX_TIM3_Init>
  MX_TIM5_Init();
 80023f8:	f001 f844 	bl	8003484 <MX_TIM5_Init>
  MX_TIM15_Init();
 80023fc:	f001 f97e 	bl	80036fc <MX_TIM15_Init>
  MX_CRC_Init();
 8002400:	f7fe fcb2 	bl	8000d68 <MX_CRC_Init>
  MX_UART7_Init();
 8002404:	f001 fc82 	bl	8003d0c <MX_UART7_Init>
  MX_TIM6_Init();
 8002408:	f001 f88a 	bl	8003520 <MX_TIM6_Init>
  MX_TIM7_Init();
 800240c:	f001 f8be 	bl	800358c <MX_TIM7_Init>
  MX_TIM12_Init();
 8002410:	f001 f8f2 	bl	80035f8 <MX_TIM12_Init>
  MX_TIM13_Init();
 8002414:	f001 f92a 	bl	800366c <MX_TIM13_Init>
  MX_TIM14_Init();
 8002418:	f001 f94c 	bl	80036b4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800241c:	2201      	movs	r2, #1
 800241e:	2101      	movs	r1, #1
 8002420:	487c      	ldr	r0, [pc, #496]	; (8002614 <main+0x24c>)
 8002422:	f005 fb0f 	bl	8007a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002426:	2201      	movs	r2, #1
 8002428:	2102      	movs	r1, #2
 800242a:	487b      	ldr	r0, [pc, #492]	; (8002618 <main+0x250>)
 800242c:	f005 fb0a 	bl	8007a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002430:	2200      	movs	r2, #0
 8002432:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002436:	4877      	ldr	r0, [pc, #476]	; (8002614 <main+0x24c>)
 8002438:	f005 fb04 	bl	8007a44 <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 800243c:	ed9f 0a77 	vldr	s0, [pc, #476]	; 800261c <main+0x254>
 8002440:	4877      	ldr	r0, [pc, #476]	; (8002620 <main+0x258>)
 8002442:	f7fe f9a1 	bl	8000788 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(16);
 8002446:	2110      	movs	r1, #16
 8002448:	4875      	ldr	r0, [pc, #468]	; (8002620 <main+0x258>)
 800244a:	f7fe fc39 	bl	8000cc0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(3);
 800244e:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002452:	4873      	ldr	r0, [pc, #460]	; (8002620 <main+0x258>)
 8002454:	f7fe fc10 	bl	8000c78 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 8002458:	4871      	ldr	r0, [pc, #452]	; (8002620 <main+0x258>)
 800245a:	f7fe f984 	bl	8000766 <_ZN7Stepper13StepperEnableEv>
//	stepperJ2.StepperSetMicrostep(1);
//	stepperJ2.StepperSetRatio(1);
//	stepperJ1.StepperSetFrequency(15842.0f);
	stepperJ3.StepperSetFrequency(0.0f);
 800245e:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 800261c <main+0x254>
 8002462:	4870      	ldr	r0, [pc, #448]	; (8002624 <main+0x25c>)
 8002464:	f7fe f990 	bl	8000788 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(8);
 8002468:	2108      	movs	r1, #8
 800246a:	486e      	ldr	r0, [pc, #440]	; (8002624 <main+0x25c>)
 800246c:	f7fe fc28 	bl	8000cc0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 8002470:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 8002474:	486b      	ldr	r0, [pc, #428]	; (8002624 <main+0x25c>)
 8002476:	f7fe fbff 	bl	8000c78 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 800247a:	486a      	ldr	r0, [pc, #424]	; (8002624 <main+0x25c>)
 800247c:	f7fe f973 	bl	8000766 <_ZN7Stepper13StepperEnableEv>

//	stepperJ4.StepperSetMicrostep(1);
//	stepperJ4.StepperSetRatio(1);
#endif

	HAL_TIM_Base_Start_IT(&htim5);
 8002480:	4869      	ldr	r0, [pc, #420]	; (8002628 <main+0x260>)
 8002482:	f007 ffdf 	bl	800a444 <HAL_TIM_Base_Start_IT>
//	HAL_TIM_Base_Start_IT(&htim7);
//	HAL_TIM_Base_Start_IT(&htim12);
//	HAL_TIM_Base_Start_IT(&htim14);

	// Encoder
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 8002486:	2214      	movs	r2, #20
 8002488:	4968      	ldr	r1, [pc, #416]	; (800262c <main+0x264>)
 800248a:	4869      	ldr	r0, [pc, #420]	; (8002630 <main+0x268>)
 800248c:	f00b fa17 	bl	800d8be <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002490:	4b68      	ldr	r3, [pc, #416]	; (8002634 <main+0x26c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a68      	ldr	r2, [pc, #416]	; (8002638 <main+0x270>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d04a      	beq.n	8002530 <main+0x168>
 800249a:	4b66      	ldr	r3, [pc, #408]	; (8002634 <main+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a67      	ldr	r2, [pc, #412]	; (800263c <main+0x274>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d045      	beq.n	8002530 <main+0x168>
 80024a4:	4b63      	ldr	r3, [pc, #396]	; (8002634 <main+0x26c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a65      	ldr	r2, [pc, #404]	; (8002640 <main+0x278>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d040      	beq.n	8002530 <main+0x168>
 80024ae:	4b61      	ldr	r3, [pc, #388]	; (8002634 <main+0x26c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a64      	ldr	r2, [pc, #400]	; (8002644 <main+0x27c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d03b      	beq.n	8002530 <main+0x168>
 80024b8:	4b5e      	ldr	r3, [pc, #376]	; (8002634 <main+0x26c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a62      	ldr	r2, [pc, #392]	; (8002648 <main+0x280>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d036      	beq.n	8002530 <main+0x168>
 80024c2:	4b5c      	ldr	r3, [pc, #368]	; (8002634 <main+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a61      	ldr	r2, [pc, #388]	; (800264c <main+0x284>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d031      	beq.n	8002530 <main+0x168>
 80024cc:	4b59      	ldr	r3, [pc, #356]	; (8002634 <main+0x26c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a5f      	ldr	r2, [pc, #380]	; (8002650 <main+0x288>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d02c      	beq.n	8002530 <main+0x168>
 80024d6:	4b57      	ldr	r3, [pc, #348]	; (8002634 <main+0x26c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a5e      	ldr	r2, [pc, #376]	; (8002654 <main+0x28c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d027      	beq.n	8002530 <main+0x168>
 80024e0:	4b54      	ldr	r3, [pc, #336]	; (8002634 <main+0x26c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a5c      	ldr	r2, [pc, #368]	; (8002658 <main+0x290>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d022      	beq.n	8002530 <main+0x168>
 80024ea:	4b52      	ldr	r3, [pc, #328]	; (8002634 <main+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a5b      	ldr	r2, [pc, #364]	; (800265c <main+0x294>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d01d      	beq.n	8002530 <main+0x168>
 80024f4:	4b4f      	ldr	r3, [pc, #316]	; (8002634 <main+0x26c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a59      	ldr	r2, [pc, #356]	; (8002660 <main+0x298>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d018      	beq.n	8002530 <main+0x168>
 80024fe:	4b4d      	ldr	r3, [pc, #308]	; (8002634 <main+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a58      	ldr	r2, [pc, #352]	; (8002664 <main+0x29c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d013      	beq.n	8002530 <main+0x168>
 8002508:	4b4a      	ldr	r3, [pc, #296]	; (8002634 <main+0x26c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a56      	ldr	r2, [pc, #344]	; (8002668 <main+0x2a0>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00e      	beq.n	8002530 <main+0x168>
 8002512:	4b48      	ldr	r3, [pc, #288]	; (8002634 <main+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a55      	ldr	r2, [pc, #340]	; (800266c <main+0x2a4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d009      	beq.n	8002530 <main+0x168>
 800251c:	4b45      	ldr	r3, [pc, #276]	; (8002634 <main+0x26c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a53      	ldr	r2, [pc, #332]	; (8002670 <main+0x2a8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d004      	beq.n	8002530 <main+0x168>
 8002526:	4b43      	ldr	r3, [pc, #268]	; (8002634 <main+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a52      	ldr	r2, [pc, #328]	; (8002674 <main+0x2ac>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d108      	bne.n	8002542 <main+0x17a>
 8002530:	4b40      	ldr	r3, [pc, #256]	; (8002634 <main+0x26c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4b3f      	ldr	r3, [pc, #252]	; (8002634 <main+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0208 	bic.w	r2, r2, #8
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	e007      	b.n	8002552 <main+0x18a>
 8002542:	4b3c      	ldr	r3, [pc, #240]	; (8002634 <main+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <main+0x26c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0204 	bic.w	r2, r2, #4
 8002550:	601a      	str	r2, [r3, #0]
//	stepperJ1.StepperOpenLoopSpeed(1.00f);

	// Backup
	fcb_joint1.Kp_p = 0.0 ;
 8002552:	4b49      	ldr	r3, [pc, #292]	; (8002678 <main+0x2b0>)
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
	fcb_joint1.Kp_v = 0.0 ;
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <main+0x2b0>)
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint1.Ki_p = 0.0 ;
 8002562:	4b45      	ldr	r3, [pc, #276]	; (8002678 <main+0x2b0>)
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	621a      	str	r2, [r3, #32]
	fcb_joint1.Ki_v = 0.0 ;
 800256a:	4b43      	ldr	r3, [pc, #268]	; (8002678 <main+0x2b0>)
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint1.Kd_p = 0.0 ;
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <main+0x2b0>)
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint1.Kd_p = 0.0 ;
 800257a:	4b3f      	ldr	r3, [pc, #252]	; (8002678 <main+0x2b0>)
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint2.Kp_p = 0.0 ;
 8002582:	4b3e      	ldr	r3, [pc, #248]	; (800267c <main+0x2b4>)
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	61da      	str	r2, [r3, #28]
	fcb_joint2.Kp_v = 0.0 ;
 800258a:	4b3c      	ldr	r3, [pc, #240]	; (800267c <main+0x2b4>)
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint2.Ki_p = 0.0 ;
 8002592:	4b3a      	ldr	r3, [pc, #232]	; (800267c <main+0x2b4>)
 8002594:	f04f 0200 	mov.w	r2, #0
 8002598:	621a      	str	r2, [r3, #32]
	fcb_joint2.Ki_v = 0.0 ;
 800259a:	4b38      	ldr	r3, [pc, #224]	; (800267c <main+0x2b4>)
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint2.Kd_p = 0.0 ;
 80025a2:	4b36      	ldr	r3, [pc, #216]	; (800267c <main+0x2b4>)
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint2.Kd_p = 0.0 ;
 80025aa:	4b34      	ldr	r3, [pc, #208]	; (800267c <main+0x2b4>)
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint3.Kp_p = 0.0 ;
 80025b2:	4b33      	ldr	r3, [pc, #204]	; (8002680 <main+0x2b8>)
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
	fcb_joint3.Kp_v = 0.0 ;
 80025ba:	4b31      	ldr	r3, [pc, #196]	; (8002680 <main+0x2b8>)
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint3.Ki_p = 0.0 ;
 80025c2:	4b2f      	ldr	r3, [pc, #188]	; (8002680 <main+0x2b8>)
 80025c4:	f04f 0200 	mov.w	r2, #0
 80025c8:	621a      	str	r2, [r3, #32]
	fcb_joint3.Ki_v = 0.0 ;
 80025ca:	4b2d      	ldr	r3, [pc, #180]	; (8002680 <main+0x2b8>)
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint3.Kd_p = 0.0 ;
 80025d2:	4b2b      	ldr	r3, [pc, #172]	; (8002680 <main+0x2b8>)
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint3.Kd_p = 0.0 ;
 80025da:	4b29      	ldr	r3, [pc, #164]	; (8002680 <main+0x2b8>)
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint4.Kp_p = 0.0 ;
 80025e2:	4b28      	ldr	r3, [pc, #160]	; (8002684 <main+0x2bc>)
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	61da      	str	r2, [r3, #28]
	fcb_joint4.Kp_v = 0.0 ;
 80025ea:	4b26      	ldr	r3, [pc, #152]	; (8002684 <main+0x2bc>)
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint4.Ki_p = 0.0 ;
 80025f2:	4b24      	ldr	r3, [pc, #144]	; (8002684 <main+0x2bc>)
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	621a      	str	r2, [r3, #32]
	fcb_joint4.Ki_v = 0.0 ;
 80025fa:	4b22      	ldr	r3, [pc, #136]	; (8002684 <main+0x2bc>)
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint4.Kd_p = 0.0 ;
 8002602:	4b20      	ldr	r3, [pc, #128]	; (8002684 <main+0x2bc>)
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint4.Kd_p = 0.0 ;
 800260a:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <main+0x2bc>)
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002612:	e7fe      	b.n	8002612 <main+0x24a>
 8002614:	58020400 	.word	0x58020400
 8002618:	58021000 	.word	0x58021000
 800261c:	00000000 	.word	0x00000000
 8002620:	2400024c 	.word	0x2400024c
 8002624:	24000274 	.word	0x24000274
 8002628:	24000630 	.word	0x24000630
 800262c:	24000234 	.word	0x24000234
 8002630:	24000a5c 	.word	0x24000a5c
 8002634:	240009e4 	.word	0x240009e4
 8002638:	40020010 	.word	0x40020010
 800263c:	40020028 	.word	0x40020028
 8002640:	40020040 	.word	0x40020040
 8002644:	40020058 	.word	0x40020058
 8002648:	40020070 	.word	0x40020070
 800264c:	40020088 	.word	0x40020088
 8002650:	400200a0 	.word	0x400200a0
 8002654:	400200b8 	.word	0x400200b8
 8002658:	40020410 	.word	0x40020410
 800265c:	40020428 	.word	0x40020428
 8002660:	40020440 	.word	0x40020440
 8002664:	40020458 	.word	0x40020458
 8002668:	40020470 	.word	0x40020470
 800266c:	40020488 	.word	0x40020488
 8002670:	400204a0 	.word	0x400204a0
 8002674:	400204b8 	.word	0x400204b8
 8002678:	240002d0 	.word	0x240002d0
 800267c:	24000354 	.word	0x24000354
 8002680:	240003d8 	.word	0x240003d8
 8002684:	2400045c 	.word	0x2400045c

08002688 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b09c      	sub	sp, #112	; 0x70
 800268c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800268e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002692:	224c      	movs	r2, #76	; 0x4c
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f00b fd5e 	bl	800e158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	2220      	movs	r2, #32
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f00b fd58 	bl	800e158 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80026a8:	2002      	movs	r0, #2
 80026aa:	f005 f9ff 	bl	8007aac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80026ae:	2300      	movs	r3, #0
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	4b38      	ldr	r3, [pc, #224]	; (8002794 <_Z18SystemClock_Configv+0x10c>)
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	4a37      	ldr	r2, [pc, #220]	; (8002794 <_Z18SystemClock_Configv+0x10c>)
 80026b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026bc:	6193      	str	r3, [r2, #24]
 80026be:	4b35      	ldr	r3, [pc, #212]	; (8002794 <_Z18SystemClock_Configv+0x10c>)
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	4b33      	ldr	r3, [pc, #204]	; (8002798 <_Z18SystemClock_Configv+0x110>)
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	4a32      	ldr	r2, [pc, #200]	; (8002798 <_Z18SystemClock_Configv+0x110>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80026d4:	4b30      	ldr	r3, [pc, #192]	; (8002798 <_Z18SystemClock_Configv+0x110>)
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80026e0:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <_Z18SystemClock_Configv+0x10c>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026ec:	bf14      	ite	ne
 80026ee:	2301      	movne	r3, #1
 80026f0:	2300      	moveq	r3, #0
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d000      	beq.n	80026fa <_Z18SystemClock_Configv+0x72>
 80026f8:	e7f2      	b.n	80026e0 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026fa:	2302      	movs	r3, #2
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80026fe:	2301      	movs	r3, #1
 8002700:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002702:	2340      	movs	r3, #64	; 0x40
 8002704:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002706:	2302      	movs	r3, #2
 8002708:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800270a:	2300      	movs	r3, #0
 800270c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800270e:	2304      	movs	r3, #4
 8002710:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8002712:	233c      	movs	r3, #60	; 0x3c
 8002714:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002716:	2302      	movs	r3, #2
 8002718:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800271a:	2306      	movs	r3, #6
 800271c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800271e:	2302      	movs	r3, #2
 8002720:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002722:	230c      	movs	r3, #12
 8002724:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002726:	2300      	movs	r3, #0
 8002728:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800272e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002732:	4618      	mov	r0, r3
 8002734:	f005 f9f4 	bl	8007b20 <HAL_RCC_OscConfig>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	bf14      	ite	ne
 800273e:	2301      	movne	r3, #1
 8002740:	2300      	moveq	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8002748:	f000 f83e 	bl	80027c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800274c:	233f      	movs	r3, #63	; 0x3f
 800274e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002750:	2303      	movs	r3, #3
 8002752:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002758:	2308      	movs	r3, #8
 800275a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800275c:	2340      	movs	r3, #64	; 0x40
 800275e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002760:	2340      	movs	r3, #64	; 0x40
 8002762:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002768:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800276a:	2340      	movs	r3, #64	; 0x40
 800276c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	2104      	movs	r1, #4
 8002772:	4618      	mov	r0, r3
 8002774:	f005 fe00 	bl	8008378 <HAL_RCC_ClockConfig>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	bf14      	ite	ne
 800277e:	2301      	movne	r3, #1
 8002780:	2300      	moveq	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8002788:	f000 f81e 	bl	80027c8 <Error_Handler>
  }
}
 800278c:	bf00      	nop
 800278e:	3770      	adds	r7, #112	; 0x70
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	58024800 	.word	0x58024800
 8002798:	58000400 	.word	0x58000400

0800279c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	80fb      	strh	r3, [r7, #6]

}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80027cc:	2200      	movs	r2, #0
 80027ce:	2101      	movs	r1, #1
 80027d0:	4808      	ldr	r0, [pc, #32]	; (80027f4 <Error_Handler+0x2c>)
 80027d2:	f005 f937 	bl	8007a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80027d6:	2200      	movs	r2, #0
 80027d8:	2102      	movs	r1, #2
 80027da:	4807      	ldr	r0, [pc, #28]	; (80027f8 <Error_Handler+0x30>)
 80027dc:	f005 f932 	bl	8007a44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80027e0:	2201      	movs	r2, #1
 80027e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027e6:	4803      	ldr	r0, [pc, #12]	; (80027f4 <Error_Handler+0x2c>)
 80027e8:	f005 f92c 	bl	8007a44 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027ec:	b672      	cpsid	i
}
 80027ee:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80027f0:	e7fe      	b.n	80027f0 <Error_Handler+0x28>
 80027f2:	bf00      	nop
 80027f4:	58020400 	.word	0x58020400
 80027f8:	58021000 	.word	0x58021000

080027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	ed87 0a01 	vstr	s0, [r7, #4]
 8002806:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8002808:	edd7 7a01 	vldr	s15, [r7, #4]
 800280c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	ee06 3a90 	vmov	s13, r3
 8002816:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800281a:	eeb0 1b46 	vmov.f64	d1, d6
 800281e:	eeb0 0b47 	vmov.f64	d0, d7
 8002822:	f00b f92d 	bl	800da80 <pow>
 8002826:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800282a:	eeb0 0b47 	vmov.f64	d0, d7
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af02      	add	r7, sp, #8
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b01      	cmp	r3, #1
 8002842:	f040 80be 	bne.w	80029c2 <_Z41__static_initialization_and_destruction_0ii+0x18e>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800284c:	4293      	cmp	r3, r2
 800284e:	f040 80b8 	bne.w	80029c2 <_Z41__static_initialization_and_destruction_0ii+0x18e>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8002852:	2320      	movs	r3, #32
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	4b64      	ldr	r3, [pc, #400]	; (80029e8 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8002858:	2200      	movs	r2, #0
 800285a:	4964      	ldr	r1, [pc, #400]	; (80029ec <_Z41__static_initialization_and_destruction_0ii+0x1b8>)
 800285c:	4864      	ldr	r0, [pc, #400]	; (80029f0 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 800285e:	f7fd ff33 	bl	80006c8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8002862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	4b62      	ldr	r3, [pc, #392]	; (80029f4 <_Z41__static_initialization_and_destruction_0ii+0x1c0>)
 800286a:	2204      	movs	r2, #4
 800286c:	4962      	ldr	r1, [pc, #392]	; (80029f8 <_Z41__static_initialization_and_destruction_0ii+0x1c4>)
 800286e:	4863      	ldr	r0, [pc, #396]	; (80029fc <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 8002870:	f7fd ff2a 	bl	80006c8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
volatile const float C2_q1 = (3.0*C0_q1) / (Time*Time);
 8002874:	4b62      	ldr	r3, [pc, #392]	; (8002a00 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 8002876:	edd3 7a00 	vldr	s15, [r3]
 800287a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800287e:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002882:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002886:	4b5f      	ldr	r3, [pc, #380]	; (8002a04 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8002888:	ed93 7a00 	vldr	s14, [r3]
 800288c:	4b5d      	ldr	r3, [pc, #372]	; (8002a04 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002896:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800289a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800289e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028a2:	4b59      	ldr	r3, [pc, #356]	; (8002a08 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 80028a4:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = (2.0*C0_q1) / (Time*Time*Time);
 80028a8:	4b55      	ldr	r3, [pc, #340]	; (8002a00 <_Z41__static_initialization_and_destruction_0ii+0x1cc>)
 80028aa:	edd3 7a00 	vldr	s15, [r3]
 80028ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028b2:	ee37 5b07 	vadd.f64	d5, d7, d7
 80028b6:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 80028b8:	ed93 7a00 	vldr	s14, [r3]
 80028bc:	4b51      	ldr	r3, [pc, #324]	; (8002a04 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 80028be:	edd3 7a00 	vldr	s15, [r3]
 80028c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028c6:	4b4f      	ldr	r3, [pc, #316]	; (8002a04 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 80028c8:	edd3 7a00 	vldr	s15, [r3]
 80028cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80028d4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80028d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80028dc:	4b4b      	ldr	r3, [pc, #300]	; (8002a0c <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 80028de:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = (3.0*C0_q3) / (Time*Time);
 80028e2:	4b4b      	ldr	r3, [pc, #300]	; (8002a10 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028ec:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80028f0:	ee27 5b06 	vmul.f64	d5, d7, d6
 80028f4:	4b43      	ldr	r3, [pc, #268]	; (8002a04 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 80028f6:	ed93 7a00 	vldr	s14, [r3]
 80028fa:	4b42      	ldr	r3, [pc, #264]	; (8002a04 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 80028fc:	edd3 7a00 	vldr	s15, [r3]
 8002900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002904:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002908:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800290c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002910:	4b40      	ldr	r3, [pc, #256]	; (8002a14 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8002912:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = (2.0*C0_q3) / (Time*Time*Time);
 8002916:	4b3e      	ldr	r3, [pc, #248]	; (8002a10 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002920:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002924:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8002926:	ed93 7a00 	vldr	s14, [r3]
 800292a:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002934:	4b33      	ldr	r3, [pc, #204]	; (8002a04 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002942:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002946:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800294a:	4b33      	ldr	r3, [pc, #204]	; (8002a18 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 800294c:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt2 = pow(dt,2);
 8002950:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8002952:	edd3 7a00 	vldr	s15, [r3]
 8002956:	2002      	movs	r0, #2
 8002958:	eeb0 0a67 	vmov.f32	s0, s15
 800295c:	f7ff ff4e 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002960:	eeb0 7b40 	vmov.f64	d7, d0
 8002964:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002968:	4b2d      	ldr	r3, [pc, #180]	; (8002a20 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 800296a:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt3 = pow(dt,3);
 800296e:	4b2b      	ldr	r3, [pc, #172]	; (8002a1c <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8002970:	edd3 7a00 	vldr	s15, [r3]
 8002974:	2003      	movs	r0, #3
 8002976:	eeb0 0a67 	vmov.f32	s0, s15
 800297a:	f7ff ff3f 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800297e:	eeb0 7b40 	vmov.f64	d7, d0
 8002982:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002986:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8002988:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt4 = pow(dt,4);
 800298c:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	2004      	movs	r0, #4
 8002994:	eeb0 0a67 	vmov.f32	s0, s15
 8002998:	f7ff ff30 	bl	80027fc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800299c:	eeb0 7b40 	vmov.f64	d7, d0
 80029a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80029a4:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80029a6:	edc3 7a00 	vstr	s15, [r3]
fcb_joint fcb_joint1, fcb_joint2, fcb_joint3, fcb_joint4;
 80029aa:	4820      	ldr	r0, [pc, #128]	; (8002a2c <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 80029ac:	f7fe fe0a 	bl	80015c4 <_ZN11robot_jointC1Ev>
 80029b0:	481f      	ldr	r0, [pc, #124]	; (8002a30 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 80029b2:	f7fe fe07 	bl	80015c4 <_ZN11robot_jointC1Ev>
 80029b6:	481f      	ldr	r0, [pc, #124]	; (8002a34 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 80029b8:	f7fe fe04 	bl	80015c4 <_ZN11robot_jointC1Ev>
 80029bc:	481e      	ldr	r0, [pc, #120]	; (8002a38 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80029be:	f7fe fe01 	bl	80015c4 <_ZN11robot_jointC1Ev>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10a      	bne.n	80029de <_Z41__static_initialization_and_destruction_0ii+0x1aa>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d105      	bne.n	80029de <_Z41__static_initialization_and_destruction_0ii+0x1aa>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 80029d2:	480a      	ldr	r0, [pc, #40]	; (80029fc <_Z41__static_initialization_and_destruction_0ii+0x1c8>)
 80029d4:	f7fd febc 	bl	8000750 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 80029d8:	4805      	ldr	r0, [pc, #20]	; (80029f0 <_Z41__static_initialization_and_destruction_0ii+0x1bc>)
 80029da:	f7fd feb9 	bl	8000750 <_ZN7StepperD1Ev>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	58020400 	.word	0x58020400
 80029ec:	2400067c 	.word	0x2400067c
 80029f0:	2400024c 	.word	0x2400024c
 80029f4:	58021000 	.word	0x58021000
 80029f8:	240005e4 	.word	0x240005e4
 80029fc:	24000274 	.word	0x24000274
 8002a00:	24000004 	.word	0x24000004
 8002a04:	24000000 	.word	0x24000000
 8002a08:	240002a8 	.word	0x240002a8
 8002a0c:	240002ac 	.word	0x240002ac
 8002a10:	24000008 	.word	0x24000008
 8002a14:	240002b0 	.word	0x240002b0
 8002a18:	240002b4 	.word	0x240002b4
 8002a1c:	24000014 	.word	0x24000014
 8002a20:	240002bc 	.word	0x240002bc
 8002a24:	240002c0 	.word	0x240002c0
 8002a28:	240002c4 	.word	0x240002c4
 8002a2c:	240002d0 	.word	0x240002d0
 8002a30:	24000354 	.word	0x24000354
 8002a34:	240003d8 	.word	0x240003d8
 8002a38:	2400045c 	.word	0x2400045c

08002a3c <_GLOBAL__sub_I_TIM_MS>:
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a44:	2001      	movs	r0, #1
 8002a46:	f7ff fef5 	bl	8002834 <_Z41__static_initialization_and_destruction_0ii>
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <_GLOBAL__sub_D_TIM_MS>:
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7ff feed 	bl	8002834 <_Z41__static_initialization_and_destruction_0ii>
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002a60:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002a62:	4a28      	ldr	r2, [pc, #160]	; (8002b04 <MX_SPI3_Init+0xa8>)
 8002a64:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002a66:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002a68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002a6c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002a6e:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002a74:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002a76:	2203      	movs	r2, #3
 8002a78:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a7a:	4b21      	ldr	r3, [pc, #132]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a80:	4b1f      	ldr	r3, [pc, #124]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002a86:	4b1e      	ldr	r3, [pc, #120]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002a88:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a8c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a8e:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a94:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a9a:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa0:	4b17      	ldr	r3, [pc, #92]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002aa6:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002aac:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002aae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ab2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002aba:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002ad8:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002aea:	4805      	ldr	r0, [pc, #20]	; (8002b00 <MX_SPI3_Init+0xa4>)
 8002aec:	f007 fb32 	bl	800a154 <HAL_SPI_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8002af6:	f7ff fe67 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	24000510 	.word	0x24000510
 8002b04:	40003c00 	.word	0x40003c00

08002b08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b0b8      	sub	sp, #224	; 0xe0
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b20:	f107 0310 	add.w	r3, r7, #16
 8002b24:	22bc      	movs	r2, #188	; 0xbc
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f00b fb15 	bl	800e158 <memset>
  if(spiHandle->Instance==SPI3)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a25      	ldr	r2, [pc, #148]	; (8002bc8 <HAL_SPI_MspInit+0xc0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d142      	bne.n	8002bbe <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b3c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b42:	f107 0310 	add.w	r3, r7, #16
 8002b46:	4618      	mov	r0, r3
 8002b48:	f005 ffa2 	bl	8008a90 <HAL_RCCEx_PeriphCLKConfig>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002b52:	f7ff fe39 	bl	80027c8 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b56:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <HAL_SPI_MspInit+0xc4>)
 8002b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b5c:	4a1b      	ldr	r2, [pc, #108]	; (8002bcc <HAL_SPI_MspInit+0xc4>)
 8002b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b66:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <HAL_SPI_MspInit+0xc4>)
 8002b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b74:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <HAL_SPI_MspInit+0xc4>)
 8002b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b7a:	4a14      	ldr	r2, [pc, #80]	; (8002bcc <HAL_SPI_MspInit+0xc4>)
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <HAL_SPI_MspInit+0xc4>)
 8002b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b8a:	f003 0304 	and.w	r3, r3, #4
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002b92:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002b96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002bac:	2306      	movs	r3, #6
 8002bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4805      	ldr	r0, [pc, #20]	; (8002bd0 <HAL_SPI_MspInit+0xc8>)
 8002bba:	f004 fd93 	bl	80076e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002bbe:	bf00      	nop
 8002bc0:	37e0      	adds	r7, #224	; 0xe0
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40003c00 	.word	0x40003c00
 8002bcc:	58024400 	.word	0x58024400
 8002bd0:	58020800 	.word	0x58020800

08002bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_MspInit+0x30>)
 8002bdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002be0:	4a08      	ldr	r2, [pc, #32]	; (8002c04 <HAL_MspInit+0x30>)
 8002be2:	f043 0302 	orr.w	r3, r3, #2
 8002be6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <HAL_MspInit+0x30>)
 8002bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	58024400 	.word	0x58024400

08002c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c0c:	e7fe      	b.n	8002c0c <NMI_Handler+0x4>

08002c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c12:	e7fe      	b.n	8002c12 <HardFault_Handler+0x4>

08002c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <MemManage_Handler+0x4>

08002c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c1e:	e7fe      	b.n	8002c1e <BusFault_Handler+0x4>

08002c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c24:	e7fe      	b.n	8002c24 <UsageFault_Handler+0x4>

08002c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c54:	f001 fbc6 	bl	80043e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002c58:	f001 fcff 	bl	800465a <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <DMA1_Stream0_IRQHandler+0x10>)
 8002c66:	f003 fa2b 	bl	80060c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	24000b64 	.word	0x24000b64

08002c74 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <DMA1_Stream1_IRQHandler+0x10>)
 8002c7a:	f003 fa21 	bl	80060c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	240009e4 	.word	0x240009e4

08002c88 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <DMA1_Stream2_IRQHandler+0x10>)
 8002c8e:	f003 fa17 	bl	80060c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	24000aec 	.word	0x24000aec

08002c9c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <DMA1_Stream3_IRQHandler+0x10>)
 8002ca2:	f003 fa0d 	bl	80060c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	240008dc 	.word	0x240008dc

08002cb0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <DMA1_Stream4_IRQHandler+0x10>)
 8002cb6:	f003 fa03 	bl	80060c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	24000c6c 	.word	0x24000c6c

08002cc4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8002cc8:	2040      	movs	r0, #64	; 0x40
 8002cca:	f004 fed4 	bl	8007a76 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 8002cce:	2080      	movs	r0, #128	; 0x80
 8002cd0:	f004 fed1 	bl	8007a76 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002cdc:	4802      	ldr	r0, [pc, #8]	; (8002ce8 <USART3_IRQHandler+0x10>)
 8002cde:	f008 ff2d 	bl	800bb3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	24000a5c 	.word	0x24000a5c

08002cec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8002cf0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002cf4:	f004 febf 	bl	8007a76 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8002cf8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002cfc:	f004 febb 	bl	8007a76 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8002d00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d04:	f004 feb7 	bl	8007a76 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8002d08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002d0c:	f004 feb3 	bl	8007a76 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002d10:	bf00      	nop
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002d18:	4802      	ldr	r0, [pc, #8]	; (8002d24 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002d1a:	f007 fd7b 	bl	800a814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	24000844 	.word	0x24000844

08002d28 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002d2c:	4802      	ldr	r0, [pc, #8]	; (8002d38 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002d2e:	f007 fd71 	bl	800a814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	240006c8 	.word	0x240006c8

08002d3c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002d40:	4802      	ldr	r0, [pc, #8]	; (8002d4c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002d42:	f007 fd67 	bl	800a814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	240007f8 	.word	0x240007f8

08002d50 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002d54:	4802      	ldr	r0, [pc, #8]	; (8002d60 <TIM5_IRQHandler+0x10>)
 8002d56:	f007 fd5d 	bl	800a814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	24000630 	.word	0x24000630

08002d64 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002d68:	4802      	ldr	r0, [pc, #8]	; (8002d74 <UART4_IRQHandler+0x10>)
 8002d6a:	f008 fee7 	bl	800bb3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	24000bdc 	.word	0x24000bdc

08002d78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d7c:	4802      	ldr	r0, [pc, #8]	; (8002d88 <TIM6_DAC_IRQHandler+0x10>)
 8002d7e:	f007 fd49 	bl	800a814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	24000714 	.word	0x24000714

08002d8c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002d90:	4802      	ldr	r0, [pc, #8]	; (8002d9c <TIM7_IRQHandler+0x10>)
 8002d92:	f007 fd3f 	bl	800a814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	24000890 	.word	0x24000890

08002da0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <UART7_IRQHandler+0x10>)
 8002da6:	f008 fec9 	bl	800bb3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	24000954 	.word	0x24000954

08002db4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
	return 1;
 8002db8:	2301      	movs	r3, #1
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <_kill>:

int _kill(int pid, int sig)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002dce:	f00b f98b 	bl	800e0e8 <__errno>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2216      	movs	r2, #22
 8002dd6:	601a      	str	r2, [r3, #0]
	return -1;
 8002dd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <_exit>:

void _exit (int status)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002dec:	f04f 31ff 	mov.w	r1, #4294967295
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff ffe7 	bl	8002dc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002df6:	e7fe      	b.n	8002df6 <_exit+0x12>

08002df8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e00a      	b.n	8002e20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e0a:	f3af 8000 	nop.w
 8002e0e:	4601      	mov	r1, r0
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	60ba      	str	r2, [r7, #8]
 8002e16:	b2ca      	uxtb	r2, r1
 8002e18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	dbf0      	blt.n	8002e0a <_read+0x12>
	}

return len;
 8002e28:	687b      	ldr	r3, [r7, #4]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b086      	sub	sp, #24
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	e009      	b.n	8002e58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	60ba      	str	r2, [r7, #8]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3301      	adds	r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	dbf1      	blt.n	8002e44 <_write+0x12>
	}
	return len;
 8002e60:	687b      	ldr	r3, [r7, #4]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <_close>:

int _close(int file)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
	return -1;
 8002e72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e92:	605a      	str	r2, [r3, #4]
	return 0;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <_isatty>:

int _isatty(int file)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
	return 1;
 8002eaa:	2301      	movs	r3, #1
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002edc:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <_sbrk+0x5c>)
 8002ede:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <_sbrk+0x60>)
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ee8:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <_sbrk+0x64>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <_sbrk+0x64>)
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <_sbrk+0x68>)
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <_sbrk+0x64>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d207      	bcs.n	8002f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f04:	f00b f8f0 	bl	800e0e8 <__errno>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f12:	e009      	b.n	8002f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f14:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <_sbrk+0x64>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f1a:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	4a05      	ldr	r2, [pc, #20]	; (8002f38 <_sbrk+0x64>)
 8002f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f26:	68fb      	ldr	r3, [r7, #12]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	240012f8 	.word	0x240012f8
 8002f34:	00000400 	.word	0x00000400
 8002f38:	240004e0 	.word	0x240004e0
 8002f3c:	24000cf8 	.word	0x24000cf8

08002f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f44:	4b39      	ldr	r3, [pc, #228]	; (800302c <SystemInit+0xec>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	4a38      	ldr	r2, [pc, #224]	; (800302c <SystemInit+0xec>)
 8002f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f54:	4b36      	ldr	r3, [pc, #216]	; (8003030 <SystemInit+0xf0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	2b06      	cmp	r3, #6
 8002f5e:	d807      	bhi.n	8002f70 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f60:	4b33      	ldr	r3, [pc, #204]	; (8003030 <SystemInit+0xf0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f023 030f 	bic.w	r3, r3, #15
 8002f68:	4a31      	ldr	r2, [pc, #196]	; (8003030 <SystemInit+0xf0>)
 8002f6a:	f043 0307 	orr.w	r3, r3, #7
 8002f6e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002f70:	4b30      	ldr	r3, [pc, #192]	; (8003034 <SystemInit+0xf4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a2f      	ldr	r2, [pc, #188]	; (8003034 <SystemInit+0xf4>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	; (8003034 <SystemInit+0xf4>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002f82:	4b2c      	ldr	r3, [pc, #176]	; (8003034 <SystemInit+0xf4>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	492b      	ldr	r1, [pc, #172]	; (8003034 <SystemInit+0xf4>)
 8002f88:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <SystemInit+0xf8>)
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f8e:	4b28      	ldr	r3, [pc, #160]	; (8003030 <SystemInit+0xf0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f9a:	4b25      	ldr	r3, [pc, #148]	; (8003030 <SystemInit+0xf0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 030f 	bic.w	r3, r3, #15
 8002fa2:	4a23      	ldr	r2, [pc, #140]	; (8003030 <SystemInit+0xf0>)
 8002fa4:	f043 0307 	orr.w	r3, r3, #7
 8002fa8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002faa:	4b22      	ldr	r3, [pc, #136]	; (8003034 <SystemInit+0xf4>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002fb0:	4b20      	ldr	r3, [pc, #128]	; (8003034 <SystemInit+0xf4>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002fb6:	4b1f      	ldr	r3, [pc, #124]	; (8003034 <SystemInit+0xf4>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <SystemInit+0xf4>)
 8002fbe:	4a1f      	ldr	r2, [pc, #124]	; (800303c <SystemInit+0xfc>)
 8002fc0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <SystemInit+0xf4>)
 8002fc4:	4a1e      	ldr	r2, [pc, #120]	; (8003040 <SystemInit+0x100>)
 8002fc6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002fc8:	4b1a      	ldr	r3, [pc, #104]	; (8003034 <SystemInit+0xf4>)
 8002fca:	4a1e      	ldr	r2, [pc, #120]	; (8003044 <SystemInit+0x104>)
 8002fcc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002fce:	4b19      	ldr	r3, [pc, #100]	; (8003034 <SystemInit+0xf4>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002fd4:	4b17      	ldr	r3, [pc, #92]	; (8003034 <SystemInit+0xf4>)
 8002fd6:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <SystemInit+0x104>)
 8002fd8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <SystemInit+0xf4>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002fe0:	4b14      	ldr	r3, [pc, #80]	; (8003034 <SystemInit+0xf4>)
 8002fe2:	4a18      	ldr	r2, [pc, #96]	; (8003044 <SystemInit+0x104>)
 8002fe4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002fe6:	4b13      	ldr	r3, [pc, #76]	; (8003034 <SystemInit+0xf4>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002fec:	4b11      	ldr	r3, [pc, #68]	; (8003034 <SystemInit+0xf4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a10      	ldr	r2, [pc, #64]	; (8003034 <SystemInit+0xf4>)
 8002ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002ff8:	4b0e      	ldr	r3, [pc, #56]	; (8003034 <SystemInit+0xf4>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002ffe:	4b12      	ldr	r3, [pc, #72]	; (8003048 <SystemInit+0x108>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	4b12      	ldr	r3, [pc, #72]	; (800304c <SystemInit+0x10c>)
 8003004:	4013      	ands	r3, r2
 8003006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800300a:	d202      	bcs.n	8003012 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800300c:	4b10      	ldr	r3, [pc, #64]	; (8003050 <SystemInit+0x110>)
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003012:	4b10      	ldr	r3, [pc, #64]	; (8003054 <SystemInit+0x114>)
 8003014:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003018:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800301a:	4b04      	ldr	r3, [pc, #16]	; (800302c <SystemInit+0xec>)
 800301c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003020:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003022:	bf00      	nop
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00
 8003030:	52002000 	.word	0x52002000
 8003034:	58024400 	.word	0x58024400
 8003038:	eaf6ed7f 	.word	0xeaf6ed7f
 800303c:	02020200 	.word	0x02020200
 8003040:	01ff0000 	.word	0x01ff0000
 8003044:	01010280 	.word	0x01010280
 8003048:	5c001000 	.word	0x5c001000
 800304c:	ffff0000 	.word	0xffff0000
 8003050:	51008108 	.word	0x51008108
 8003054:	52004000 	.word	0x52004000

08003058 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b09a      	sub	sp, #104	; 0x68
 800305c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800305e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	605a      	str	r2, [r3, #4]
 8003068:	609a      	str	r2, [r3, #8]
 800306a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800306c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
 8003088:	615a      	str	r2, [r3, #20]
 800308a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	222c      	movs	r2, #44	; 0x2c
 8003090:	2100      	movs	r1, #0
 8003092:	4618      	mov	r0, r3
 8003094:	f00b f860 	bl	800e158 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003098:	4b44      	ldr	r3, [pc, #272]	; (80031ac <MX_TIM1_Init+0x154>)
 800309a:	4a45      	ldr	r2, [pc, #276]	; (80031b0 <MX_TIM1_Init+0x158>)
 800309c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 800309e:	4b43      	ldr	r3, [pc, #268]	; (80031ac <MX_TIM1_Init+0x154>)
 80030a0:	22c7      	movs	r2, #199	; 0xc7
 80030a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030a4:	4b41      	ldr	r3, [pc, #260]	; (80031ac <MX_TIM1_Init+0x154>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 80030aa:	4b40      	ldr	r3, [pc, #256]	; (80031ac <MX_TIM1_Init+0x154>)
 80030ac:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80030b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030b2:	4b3e      	ldr	r3, [pc, #248]	; (80031ac <MX_TIM1_Init+0x154>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030b8:	4b3c      	ldr	r3, [pc, #240]	; (80031ac <MX_TIM1_Init+0x154>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030be:	4b3b      	ldr	r3, [pc, #236]	; (80031ac <MX_TIM1_Init+0x154>)
 80030c0:	2280      	movs	r2, #128	; 0x80
 80030c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80030c4:	4839      	ldr	r0, [pc, #228]	; (80031ac <MX_TIM1_Init+0x154>)
 80030c6:	f007 f966 	bl	800a396 <HAL_TIM_Base_Init>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80030d0:	f7ff fb7a 	bl	80027c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030d8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80030da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030de:	4619      	mov	r1, r3
 80030e0:	4832      	ldr	r0, [pc, #200]	; (80031ac <MX_TIM1_Init+0x154>)
 80030e2:	f007 fdcb 	bl	800ac7c <HAL_TIM_ConfigClockSource>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80030ec:	f7ff fb6c 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030f0:	482e      	ldr	r0, [pc, #184]	; (80031ac <MX_TIM1_Init+0x154>)
 80030f2:	f007 fa1f 	bl	800a534 <HAL_TIM_PWM_Init>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80030fc:	f7ff fb64 	bl	80027c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003100:	2300      	movs	r3, #0
 8003102:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003104:	2300      	movs	r3, #0
 8003106:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003108:	2300      	movs	r3, #0
 800310a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800310c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003110:	4619      	mov	r1, r3
 8003112:	4826      	ldr	r0, [pc, #152]	; (80031ac <MX_TIM1_Init+0x154>)
 8003114:	f008 fb06 	bl	800b724 <HAL_TIMEx_MasterConfigSynchronization>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800311e:	f7ff fb53 	bl	80027c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003122:	2360      	movs	r3, #96	; 0x60
 8003124:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8003126:	f240 1339 	movw	r3, #313	; 0x139
 800312a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800312c:	2300      	movs	r3, #0
 800312e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003130:	2300      	movs	r3, #0
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003134:	2300      	movs	r3, #0
 8003136:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003138:	2300      	movs	r3, #0
 800313a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800313c:	2300      	movs	r3, #0
 800313e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003140:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003144:	2204      	movs	r2, #4
 8003146:	4619      	mov	r1, r3
 8003148:	4818      	ldr	r0, [pc, #96]	; (80031ac <MX_TIM1_Init+0x154>)
 800314a:	f007 fc83 	bl	800aa54 <HAL_TIM_PWM_ConfigChannel>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8003154:	f7ff fb38 	bl	80027c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003158:	2300      	movs	r3, #0
 800315a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800316c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003170:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003176:	2300      	movs	r3, #0
 8003178:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800317a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003184:	2300      	movs	r3, #0
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003188:	1d3b      	adds	r3, r7, #4
 800318a:	4619      	mov	r1, r3
 800318c:	4807      	ldr	r0, [pc, #28]	; (80031ac <MX_TIM1_Init+0x154>)
 800318e:	f008 fb57 	bl	800b840 <HAL_TIMEx_ConfigBreakDeadTime>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8003198:	f7ff fb16 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800319c:	4803      	ldr	r0, [pc, #12]	; (80031ac <MX_TIM1_Init+0x154>)
 800319e:	f000 fc85 	bl	8003aac <HAL_TIM_MspPostInit>

}
 80031a2:	bf00      	nop
 80031a4:	3768      	adds	r7, #104	; 0x68
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	24000760 	.word	0x24000760
 80031b0:	40010000 	.word	0x40010000

080031b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08e      	sub	sp, #56	; 0x38
 80031b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	609a      	str	r2, [r3, #8]
 80031c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031c8:	f107 031c 	add.w	r3, r7, #28
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031d4:	463b      	mov	r3, r7
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	60da      	str	r2, [r3, #12]
 80031e0:	611a      	str	r2, [r3, #16]
 80031e2:	615a      	str	r2, [r3, #20]
 80031e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031e6:	4b2e      	ldr	r3, [pc, #184]	; (80032a0 <MX_TIM2_Init+0xec>)
 80031e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 80031ee:	4b2c      	ldr	r3, [pc, #176]	; (80032a0 <MX_TIM2_Init+0xec>)
 80031f0:	22c7      	movs	r2, #199	; 0xc7
 80031f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031f4:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <MX_TIM2_Init+0xec>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 80031fa:	4b29      	ldr	r3, [pc, #164]	; (80032a0 <MX_TIM2_Init+0xec>)
 80031fc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003200:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003202:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <MX_TIM2_Init+0xec>)
 8003204:	2200      	movs	r2, #0
 8003206:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <MX_TIM2_Init+0xec>)
 800320a:	2280      	movs	r2, #128	; 0x80
 800320c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800320e:	4824      	ldr	r0, [pc, #144]	; (80032a0 <MX_TIM2_Init+0xec>)
 8003210:	f007 f8c1 	bl	800a396 <HAL_TIM_Base_Init>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800321a:	f7ff fad5 	bl	80027c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800321e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003228:	4619      	mov	r1, r3
 800322a:	481d      	ldr	r0, [pc, #116]	; (80032a0 <MX_TIM2_Init+0xec>)
 800322c:	f007 fd26 	bl	800ac7c <HAL_TIM_ConfigClockSource>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003236:	f7ff fac7 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800323a:	4819      	ldr	r0, [pc, #100]	; (80032a0 <MX_TIM2_Init+0xec>)
 800323c:	f007 f97a 	bl	800a534 <HAL_TIM_PWM_Init>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003246:	f7ff fabf 	bl	80027c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003252:	f107 031c 	add.w	r3, r7, #28
 8003256:	4619      	mov	r1, r3
 8003258:	4811      	ldr	r0, [pc, #68]	; (80032a0 <MX_TIM2_Init+0xec>)
 800325a:	f008 fa63 	bl	800b724 <HAL_TIMEx_MasterConfigSynchronization>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003264:	f7ff fab0 	bl	80027c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003268:	2360      	movs	r3, #96	; 0x60
 800326a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 800326c:	f240 1339 	movw	r3, #313	; 0x139
 8003270:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003272:	2300      	movs	r3, #0
 8003274:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800327a:	463b      	mov	r3, r7
 800327c:	2208      	movs	r2, #8
 800327e:	4619      	mov	r1, r3
 8003280:	4807      	ldr	r0, [pc, #28]	; (80032a0 <MX_TIM2_Init+0xec>)
 8003282:	f007 fbe7 	bl	800aa54 <HAL_TIM_PWM_ConfigChannel>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800328c:	f7ff fa9c 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003290:	4803      	ldr	r0, [pc, #12]	; (80032a0 <MX_TIM2_Init+0xec>)
 8003292:	f000 fc0b 	bl	8003aac <HAL_TIM_MspPostInit>

}
 8003296:	bf00      	nop
 8003298:	3738      	adds	r7, #56	; 0x38
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	240007ac 	.word	0x240007ac

080032a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08e      	sub	sp, #56	; 0x38
 80032a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	609a      	str	r2, [r3, #8]
 80032b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032b8:	f107 031c 	add.w	r3, r7, #28
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032c4:	463b      	mov	r3, r7
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	609a      	str	r2, [r3, #8]
 80032ce:	60da      	str	r2, [r3, #12]
 80032d0:	611a      	str	r2, [r3, #16]
 80032d2:	615a      	str	r2, [r3, #20]
 80032d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032d6:	4b2d      	ldr	r3, [pc, #180]	; (800338c <MX_TIM3_Init+0xe8>)
 80032d8:	4a2d      	ldr	r2, [pc, #180]	; (8003390 <MX_TIM3_Init+0xec>)
 80032da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 80032dc:	4b2b      	ldr	r3, [pc, #172]	; (800338c <MX_TIM3_Init+0xe8>)
 80032de:	22c7      	movs	r2, #199	; 0xc7
 80032e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032e2:	4b2a      	ldr	r3, [pc, #168]	; (800338c <MX_TIM3_Init+0xe8>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 80032e8:	4b28      	ldr	r3, [pc, #160]	; (800338c <MX_TIM3_Init+0xe8>)
 80032ea:	f640 125f 	movw	r2, #2399	; 0x95f
 80032ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032f0:	4b26      	ldr	r3, [pc, #152]	; (800338c <MX_TIM3_Init+0xe8>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032f6:	4b25      	ldr	r3, [pc, #148]	; (800338c <MX_TIM3_Init+0xe8>)
 80032f8:	2280      	movs	r2, #128	; 0x80
 80032fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032fc:	4823      	ldr	r0, [pc, #140]	; (800338c <MX_TIM3_Init+0xe8>)
 80032fe:	f007 f84a 	bl	800a396 <HAL_TIM_Base_Init>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003308:	f7ff fa5e 	bl	80027c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800330c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003316:	4619      	mov	r1, r3
 8003318:	481c      	ldr	r0, [pc, #112]	; (800338c <MX_TIM3_Init+0xe8>)
 800331a:	f007 fcaf 	bl	800ac7c <HAL_TIM_ConfigClockSource>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003324:	f7ff fa50 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003328:	4818      	ldr	r0, [pc, #96]	; (800338c <MX_TIM3_Init+0xe8>)
 800332a:	f007 f903 	bl	800a534 <HAL_TIM_PWM_Init>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003334:	f7ff fa48 	bl	80027c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003338:	2300      	movs	r3, #0
 800333a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800333c:	2300      	movs	r3, #0
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003340:	f107 031c 	add.w	r3, r7, #28
 8003344:	4619      	mov	r1, r3
 8003346:	4811      	ldr	r0, [pc, #68]	; (800338c <MX_TIM3_Init+0xe8>)
 8003348:	f008 f9ec 	bl	800b724 <HAL_TIMEx_MasterConfigSynchronization>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003352:	f7ff fa39 	bl	80027c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003356:	2360      	movs	r3, #96	; 0x60
 8003358:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800335a:	2300      	movs	r3, #0
 800335c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800335e:	2300      	movs	r3, #0
 8003360:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003366:	463b      	mov	r3, r7
 8003368:	2200      	movs	r2, #0
 800336a:	4619      	mov	r1, r3
 800336c:	4807      	ldr	r0, [pc, #28]	; (800338c <MX_TIM3_Init+0xe8>)
 800336e:	f007 fb71 	bl	800aa54 <HAL_TIM_PWM_ConfigChannel>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003378:	f7ff fa26 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800337c:	4803      	ldr	r0, [pc, #12]	; (800338c <MX_TIM3_Init+0xe8>)
 800337e:	f000 fb95 	bl	8003aac <HAL_TIM_MspPostInit>

}
 8003382:	bf00      	nop
 8003384:	3738      	adds	r7, #56	; 0x38
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	2400067c 	.word	0x2400067c
 8003390:	40000400 	.word	0x40000400

08003394 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08e      	sub	sp, #56	; 0x38
 8003398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800339a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	605a      	str	r2, [r3, #4]
 80033a4:	609a      	str	r2, [r3, #8]
 80033a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033a8:	f107 031c 	add.w	r3, r7, #28
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033b4:	463b      	mov	r3, r7
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	611a      	str	r2, [r3, #16]
 80033c2:	615a      	str	r2, [r3, #20]
 80033c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80033c6:	4b2d      	ldr	r3, [pc, #180]	; (800347c <MX_TIM4_Init+0xe8>)
 80033c8:	4a2d      	ldr	r2, [pc, #180]	; (8003480 <MX_TIM4_Init+0xec>)
 80033ca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 80033cc:	4b2b      	ldr	r3, [pc, #172]	; (800347c <MX_TIM4_Init+0xe8>)
 80033ce:	22c7      	movs	r2, #199	; 0xc7
 80033d0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033d2:	4b2a      	ldr	r3, [pc, #168]	; (800347c <MX_TIM4_Init+0xe8>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 80033d8:	4b28      	ldr	r3, [pc, #160]	; (800347c <MX_TIM4_Init+0xe8>)
 80033da:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80033de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033e0:	4b26      	ldr	r3, [pc, #152]	; (800347c <MX_TIM4_Init+0xe8>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80033e6:	4b25      	ldr	r3, [pc, #148]	; (800347c <MX_TIM4_Init+0xe8>)
 80033e8:	2280      	movs	r2, #128	; 0x80
 80033ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80033ec:	4823      	ldr	r0, [pc, #140]	; (800347c <MX_TIM4_Init+0xe8>)
 80033ee:	f006 ffd2 	bl	800a396 <HAL_TIM_Base_Init>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80033f8:	f7ff f9e6 	bl	80027c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003406:	4619      	mov	r1, r3
 8003408:	481c      	ldr	r0, [pc, #112]	; (800347c <MX_TIM4_Init+0xe8>)
 800340a:	f007 fc37 	bl	800ac7c <HAL_TIM_ConfigClockSource>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003414:	f7ff f9d8 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003418:	4818      	ldr	r0, [pc, #96]	; (800347c <MX_TIM4_Init+0xe8>)
 800341a:	f007 f88b 	bl	800a534 <HAL_TIM_PWM_Init>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003424:	f7ff f9d0 	bl	80027c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003428:	2300      	movs	r3, #0
 800342a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800342c:	2300      	movs	r3, #0
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003430:	f107 031c 	add.w	r3, r7, #28
 8003434:	4619      	mov	r1, r3
 8003436:	4811      	ldr	r0, [pc, #68]	; (800347c <MX_TIM4_Init+0xe8>)
 8003438:	f008 f974 	bl	800b724 <HAL_TIMEx_MasterConfigSynchronization>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003442:	f7ff f9c1 	bl	80027c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003446:	2360      	movs	r3, #96	; 0x60
 8003448:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 800344a:	f240 1339 	movw	r3, #313	; 0x139
 800344e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003454:	2300      	movs	r3, #0
 8003456:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003458:	463b      	mov	r3, r7
 800345a:	2208      	movs	r2, #8
 800345c:	4619      	mov	r1, r3
 800345e:	4807      	ldr	r0, [pc, #28]	; (800347c <MX_TIM4_Init+0xe8>)
 8003460:	f007 faf8 	bl	800aa54 <HAL_TIM_PWM_ConfigChannel>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800346a:	f7ff f9ad 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800346e:	4803      	ldr	r0, [pc, #12]	; (800347c <MX_TIM4_Init+0xe8>)
 8003470:	f000 fb1c 	bl	8003aac <HAL_TIM_MspPostInit>

}
 8003474:	bf00      	nop
 8003476:	3738      	adds	r7, #56	; 0x38
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	24000598 	.word	0x24000598
 8003480:	40000800 	.word	0x40000800

08003484 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800348a:	f107 0310 	add.w	r3, r7, #16
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	609a      	str	r2, [r3, #8]
 8003496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003498:	1d3b      	adds	r3, r7, #4
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80034a2:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <MX_TIM5_Init+0x94>)
 80034a4:	4a1d      	ldr	r2, [pc, #116]	; (800351c <MX_TIM5_Init+0x98>)
 80034a6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 80034a8:	4b1b      	ldr	r3, [pc, #108]	; (8003518 <MX_TIM5_Init+0x94>)
 80034aa:	22c7      	movs	r2, #199	; 0xc7
 80034ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ae:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <MX_TIM5_Init+0x94>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 80034b4:	4b18      	ldr	r3, [pc, #96]	; (8003518 <MX_TIM5_Init+0x94>)
 80034b6:	f642 62df 	movw	r2, #11999	; 0x2edf
 80034ba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034bc:	4b16      	ldr	r3, [pc, #88]	; (8003518 <MX_TIM5_Init+0x94>)
 80034be:	2200      	movs	r2, #0
 80034c0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034c2:	4b15      	ldr	r3, [pc, #84]	; (8003518 <MX_TIM5_Init+0x94>)
 80034c4:	2280      	movs	r2, #128	; 0x80
 80034c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80034c8:	4813      	ldr	r0, [pc, #76]	; (8003518 <MX_TIM5_Init+0x94>)
 80034ca:	f006 ff64 	bl	800a396 <HAL_TIM_Base_Init>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80034d4:	f7ff f978 	bl	80027c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80034de:	f107 0310 	add.w	r3, r7, #16
 80034e2:	4619      	mov	r1, r3
 80034e4:	480c      	ldr	r0, [pc, #48]	; (8003518 <MX_TIM5_Init+0x94>)
 80034e6:	f007 fbc9 	bl	800ac7c <HAL_TIM_ConfigClockSource>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80034f0:	f7ff f96a 	bl	80027c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034f4:	2300      	movs	r3, #0
 80034f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80034fc:	1d3b      	adds	r3, r7, #4
 80034fe:	4619      	mov	r1, r3
 8003500:	4805      	ldr	r0, [pc, #20]	; (8003518 <MX_TIM5_Init+0x94>)
 8003502:	f008 f90f 	bl	800b724 <HAL_TIMEx_MasterConfigSynchronization>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800350c:	f7ff f95c 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003510:	bf00      	nop
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	24000630 	.word	0x24000630
 800351c:	40000c00 	.word	0x40000c00

08003520 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003526:	1d3b      	adds	r3, r7, #4
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003530:	4b14      	ldr	r3, [pc, #80]	; (8003584 <MX_TIM6_Init+0x64>)
 8003532:	4a15      	ldr	r2, [pc, #84]	; (8003588 <MX_TIM6_Init+0x68>)
 8003534:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8003536:	4b13      	ldr	r3, [pc, #76]	; (8003584 <MX_TIM6_Init+0x64>)
 8003538:	22c7      	movs	r2, #199	; 0xc7
 800353a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800353c:	4b11      	ldr	r3, [pc, #68]	; (8003584 <MX_TIM6_Init+0x64>)
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8003542:	4b10      	ldr	r3, [pc, #64]	; (8003584 <MX_TIM6_Init+0x64>)
 8003544:	f241 726f 	movw	r2, #5999	; 0x176f
 8003548:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800354a:	4b0e      	ldr	r3, [pc, #56]	; (8003584 <MX_TIM6_Init+0x64>)
 800354c:	2280      	movs	r2, #128	; 0x80
 800354e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003550:	480c      	ldr	r0, [pc, #48]	; (8003584 <MX_TIM6_Init+0x64>)
 8003552:	f006 ff20 	bl	800a396 <HAL_TIM_Base_Init>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800355c:	f7ff f934 	bl	80027c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003560:	2300      	movs	r3, #0
 8003562:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	4619      	mov	r1, r3
 800356c:	4805      	ldr	r0, [pc, #20]	; (8003584 <MX_TIM6_Init+0x64>)
 800356e:	f008 f8d9 	bl	800b724 <HAL_TIMEx_MasterConfigSynchronization>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003578:	f7ff f926 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	24000714 	.word	0x24000714
 8003588:	40001000 	.word	0x40001000

0800358c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003592:	1d3b      	adds	r3, r7, #4
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800359c:	4b14      	ldr	r3, [pc, #80]	; (80035f0 <MX_TIM7_Init+0x64>)
 800359e:	4a15      	ldr	r2, [pc, #84]	; (80035f4 <MX_TIM7_Init+0x68>)
 80035a0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 80035a2:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <MX_TIM7_Init+0x64>)
 80035a4:	22c7      	movs	r2, #199	; 0xc7
 80035a6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a8:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <MX_TIM7_Init+0x64>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 80035ae:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <MX_TIM7_Init+0x64>)
 80035b0:	f240 42af 	movw	r2, #1199	; 0x4af
 80035b4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035b6:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <MX_TIM7_Init+0x64>)
 80035b8:	2280      	movs	r2, #128	; 0x80
 80035ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80035bc:	480c      	ldr	r0, [pc, #48]	; (80035f0 <MX_TIM7_Init+0x64>)
 80035be:	f006 feea 	bl	800a396 <HAL_TIM_Base_Init>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80035c8:	f7ff f8fe 	bl	80027c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035cc:	2300      	movs	r3, #0
 80035ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035d0:	2300      	movs	r3, #0
 80035d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	4619      	mov	r1, r3
 80035d8:	4805      	ldr	r0, [pc, #20]	; (80035f0 <MX_TIM7_Init+0x64>)
 80035da:	f008 f8a3 	bl	800b724 <HAL_TIMEx_MasterConfigSynchronization>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80035e4:	f7ff f8f0 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	24000890 	.word	0x24000890
 80035f4:	40001400 	.word	0x40001400

080035f8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035fe:	463b      	mov	r3, r7
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800360a:	4b16      	ldr	r3, [pc, #88]	; (8003664 <MX_TIM12_Init+0x6c>)
 800360c:	4a16      	ldr	r2, [pc, #88]	; (8003668 <MX_TIM12_Init+0x70>)
 800360e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8003610:	4b14      	ldr	r3, [pc, #80]	; (8003664 <MX_TIM12_Init+0x6c>)
 8003612:	22c7      	movs	r2, #199	; 0xc7
 8003614:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003616:	4b13      	ldr	r3, [pc, #76]	; (8003664 <MX_TIM12_Init+0x6c>)
 8003618:	2200      	movs	r2, #0
 800361a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 800361c:	4b11      	ldr	r3, [pc, #68]	; (8003664 <MX_TIM12_Init+0x6c>)
 800361e:	f240 2257 	movw	r2, #599	; 0x257
 8003622:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003624:	4b0f      	ldr	r3, [pc, #60]	; (8003664 <MX_TIM12_Init+0x6c>)
 8003626:	2200      	movs	r2, #0
 8003628:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800362a:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <MX_TIM12_Init+0x6c>)
 800362c:	2280      	movs	r2, #128	; 0x80
 800362e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003630:	480c      	ldr	r0, [pc, #48]	; (8003664 <MX_TIM12_Init+0x6c>)
 8003632:	f006 feb0 	bl	800a396 <HAL_TIM_Base_Init>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 800363c:	f7ff f8c4 	bl	80027c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003644:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003646:	463b      	mov	r3, r7
 8003648:	4619      	mov	r1, r3
 800364a:	4806      	ldr	r0, [pc, #24]	; (8003664 <MX_TIM12_Init+0x6c>)
 800364c:	f007 fb16 	bl	800ac7c <HAL_TIM_ConfigClockSource>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8003656:	f7ff f8b7 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	24000844 	.word	0x24000844
 8003668:	40001800 	.word	0x40001800

0800366c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003670:	4b0e      	ldr	r3, [pc, #56]	; (80036ac <MX_TIM13_Init+0x40>)
 8003672:	4a0f      	ldr	r2, [pc, #60]	; (80036b0 <MX_TIM13_Init+0x44>)
 8003674:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8003676:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <MX_TIM13_Init+0x40>)
 8003678:	22c7      	movs	r2, #199	; 0xc7
 800367a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <MX_TIM13_Init+0x40>)
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8003682:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <MX_TIM13_Init+0x40>)
 8003684:	f240 2257 	movw	r2, #599	; 0x257
 8003688:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800368a:	4b08      	ldr	r3, [pc, #32]	; (80036ac <MX_TIM13_Init+0x40>)
 800368c:	2200      	movs	r2, #0
 800368e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <MX_TIM13_Init+0x40>)
 8003692:	2280      	movs	r2, #128	; 0x80
 8003694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003696:	4805      	ldr	r0, [pc, #20]	; (80036ac <MX_TIM13_Init+0x40>)
 8003698:	f006 fe7d 	bl	800a396 <HAL_TIM_Base_Init>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80036a2:	f7ff f891 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80036a6:	bf00      	nop
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	240006c8 	.word	0x240006c8
 80036b0:	40001c00 	.word	0x40001c00

080036b4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80036b8:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <MX_TIM14_Init+0x40>)
 80036ba:	4a0f      	ldr	r2, [pc, #60]	; (80036f8 <MX_TIM14_Init+0x44>)
 80036bc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 80036be:	4b0d      	ldr	r3, [pc, #52]	; (80036f4 <MX_TIM14_Init+0x40>)
 80036c0:	22c7      	movs	r2, #199	; 0xc7
 80036c2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <MX_TIM14_Init+0x40>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <MX_TIM14_Init+0x40>)
 80036cc:	f640 125f 	movw	r2, #2399	; 0x95f
 80036d0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036d2:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <MX_TIM14_Init+0x40>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036d8:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <MX_TIM14_Init+0x40>)
 80036da:	2280      	movs	r2, #128	; 0x80
 80036dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80036de:	4805      	ldr	r0, [pc, #20]	; (80036f4 <MX_TIM14_Init+0x40>)
 80036e0:	f006 fe59 	bl	800a396 <HAL_TIM_Base_Init>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80036ea:	f7ff f86d 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	240007f8 	.word	0x240007f8
 80036f8:	40002000 	.word	0x40002000

080036fc <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b09a      	sub	sp, #104	; 0x68
 8003700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003702:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003710:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800371c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	609a      	str	r2, [r3, #8]
 8003728:	60da      	str	r2, [r3, #12]
 800372a:	611a      	str	r2, [r3, #16]
 800372c:	615a      	str	r2, [r3, #20]
 800372e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003730:	1d3b      	adds	r3, r7, #4
 8003732:	222c      	movs	r2, #44	; 0x2c
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f00a fd0e 	bl	800e158 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800373c:	4b3f      	ldr	r3, [pc, #252]	; (800383c <MX_TIM15_Init+0x140>)
 800373e:	4a40      	ldr	r2, [pc, #256]	; (8003840 <MX_TIM15_Init+0x144>)
 8003740:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8003742:	4b3e      	ldr	r3, [pc, #248]	; (800383c <MX_TIM15_Init+0x140>)
 8003744:	22ef      	movs	r2, #239	; 0xef
 8003746:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003748:	4b3c      	ldr	r3, [pc, #240]	; (800383c <MX_TIM15_Init+0x140>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 800374e:	4b3b      	ldr	r3, [pc, #236]	; (800383c <MX_TIM15_Init+0x140>)
 8003750:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003754:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003756:	4b39      	ldr	r3, [pc, #228]	; (800383c <MX_TIM15_Init+0x140>)
 8003758:	2200      	movs	r2, #0
 800375a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800375c:	4b37      	ldr	r3, [pc, #220]	; (800383c <MX_TIM15_Init+0x140>)
 800375e:	2200      	movs	r2, #0
 8003760:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003762:	4b36      	ldr	r3, [pc, #216]	; (800383c <MX_TIM15_Init+0x140>)
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003768:	4834      	ldr	r0, [pc, #208]	; (800383c <MX_TIM15_Init+0x140>)
 800376a:	f006 fe14 	bl	800a396 <HAL_TIM_Base_Init>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8003774:	f7ff f828 	bl	80027c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800377c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800377e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003782:	4619      	mov	r1, r3
 8003784:	482d      	ldr	r0, [pc, #180]	; (800383c <MX_TIM15_Init+0x140>)
 8003786:	f007 fa79 	bl	800ac7c <HAL_TIM_ConfigClockSource>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8003790:	f7ff f81a 	bl	80027c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003794:	4829      	ldr	r0, [pc, #164]	; (800383c <MX_TIM15_Init+0x140>)
 8003796:	f006 fecd 	bl	800a534 <HAL_TIM_PWM_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80037a0:	f7ff f812 	bl	80027c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a4:	2300      	movs	r3, #0
 80037a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037a8:	2300      	movs	r3, #0
 80037aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80037ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037b0:	4619      	mov	r1, r3
 80037b2:	4822      	ldr	r0, [pc, #136]	; (800383c <MX_TIM15_Init+0x140>)
 80037b4:	f007 ffb6 	bl	800b724 <HAL_TIMEx_MasterConfigSynchronization>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80037be:	f7ff f803 	bl	80027c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037c2:	2360      	movs	r3, #96	; 0x60
 80037c4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80037c6:	f240 1339 	movw	r3, #313	; 0x139
 80037ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037cc:	2300      	movs	r3, #0
 80037ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037d0:	2300      	movs	r3, #0
 80037d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037d4:	2300      	movs	r3, #0
 80037d6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037d8:	2300      	movs	r3, #0
 80037da:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037dc:	2300      	movs	r3, #0
 80037de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80037e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037e4:	2204      	movs	r2, #4
 80037e6:	4619      	mov	r1, r3
 80037e8:	4814      	ldr	r0, [pc, #80]	; (800383c <MX_TIM15_Init+0x140>)
 80037ea:	f007 f933 	bl	800aa54 <HAL_TIM_PWM_ConfigChannel>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80037f4:	f7fe ffe8 	bl	80027c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80037f8:	2300      	movs	r3, #0
 80037fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003800:	2300      	movs	r3, #0
 8003802:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800380c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003810:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003816:	2300      	movs	r3, #0
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800381a:	1d3b      	adds	r3, r7, #4
 800381c:	4619      	mov	r1, r3
 800381e:	4807      	ldr	r0, [pc, #28]	; (800383c <MX_TIM15_Init+0x140>)
 8003820:	f008 f80e 	bl	800b840 <HAL_TIMEx_ConfigBreakDeadTime>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 800382a:	f7fe ffcd 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800382e:	4803      	ldr	r0, [pc, #12]	; (800383c <MX_TIM15_Init+0x140>)
 8003830:	f000 f93c 	bl	8003aac <HAL_TIM_MspPostInit>

}
 8003834:	bf00      	nop
 8003836:	3768      	adds	r7, #104	; 0x68
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	240005e4 	.word	0x240005e4
 8003840:	40014000 	.word	0x40014000

08003844 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08e      	sub	sp, #56	; 0x38
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a8b      	ldr	r2, [pc, #556]	; (8003a80 <HAL_TIM_Base_MspInit+0x23c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d10f      	bne.n	8003876 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003856:	4b8b      	ldr	r3, [pc, #556]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 8003858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800385c:	4a89      	ldr	r2, [pc, #548]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003866:	4b87      	ldr	r3, [pc, #540]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 8003868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	637b      	str	r3, [r7, #52]	; 0x34
 8003872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8003874:	e100      	b.n	8003a78 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM2)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387e:	d10f      	bne.n	80038a0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003880:	4b80      	ldr	r3, [pc, #512]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 8003882:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003886:	4a7f      	ldr	r2, [pc, #508]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003890:	4b7c      	ldr	r3, [pc, #496]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 8003892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	633b      	str	r3, [r7, #48]	; 0x30
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800389e:	e0eb      	b.n	8003a78 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM3)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a78      	ldr	r2, [pc, #480]	; (8003a88 <HAL_TIM_Base_MspInit+0x244>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d10f      	bne.n	80038ca <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80038aa:	4b76      	ldr	r3, [pc, #472]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 80038ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038b0:	4a74      	ldr	r2, [pc, #464]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 80038b2:	f043 0302 	orr.w	r3, r3, #2
 80038b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038ba:	4b72      	ldr	r3, [pc, #456]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 80038bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80038c8:	e0d6      	b.n	8003a78 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM4)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a6f      	ldr	r2, [pc, #444]	; (8003a8c <HAL_TIM_Base_MspInit+0x248>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d10f      	bne.n	80038f4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80038d4:	4b6b      	ldr	r3, [pc, #428]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 80038d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038da:	4a6a      	ldr	r2, [pc, #424]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 80038dc:	f043 0304 	orr.w	r3, r3, #4
 80038e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038e4:	4b67      	ldr	r3, [pc, #412]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 80038e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80038f2:	e0c1      	b.n	8003a78 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM5)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a65      	ldr	r2, [pc, #404]	; (8003a90 <HAL_TIM_Base_MspInit+0x24c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d117      	bne.n	800392e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80038fe:	4b61      	ldr	r3, [pc, #388]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 8003900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003904:	4a5f      	ldr	r2, [pc, #380]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 8003906:	f043 0308 	orr.w	r3, r3, #8
 800390a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800390e:	4b5d      	ldr	r3, [pc, #372]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 8003910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800391c:	2200      	movs	r2, #0
 800391e:	2100      	movs	r1, #0
 8003920:	2032      	movs	r0, #50	; 0x32
 8003922:	f000 fe66 	bl	80045f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003926:	2032      	movs	r0, #50	; 0x32
 8003928:	f000 fe7d 	bl	8004626 <HAL_NVIC_EnableIRQ>
}
 800392c:	e0a4      	b.n	8003a78 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM6)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a58      	ldr	r2, [pc, #352]	; (8003a94 <HAL_TIM_Base_MspInit+0x250>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d117      	bne.n	8003968 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003938:	4b52      	ldr	r3, [pc, #328]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 800393a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800393e:	4a51      	ldr	r2, [pc, #324]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 8003940:	f043 0310 	orr.w	r3, r3, #16
 8003944:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003948:	4b4e      	ldr	r3, [pc, #312]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 800394a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	623b      	str	r3, [r7, #32]
 8003954:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003956:	2200      	movs	r2, #0
 8003958:	2100      	movs	r1, #0
 800395a:	2036      	movs	r0, #54	; 0x36
 800395c:	f000 fe49 	bl	80045f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003960:	2036      	movs	r0, #54	; 0x36
 8003962:	f000 fe60 	bl	8004626 <HAL_NVIC_EnableIRQ>
}
 8003966:	e087      	b.n	8003a78 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM7)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a4a      	ldr	r2, [pc, #296]	; (8003a98 <HAL_TIM_Base_MspInit+0x254>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d117      	bne.n	80039a2 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003972:	4b44      	ldr	r3, [pc, #272]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 8003974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003978:	4a42      	ldr	r2, [pc, #264]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 800397a:	f043 0320 	orr.w	r3, r3, #32
 800397e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003982:	4b40      	ldr	r3, [pc, #256]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 8003984:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003988:	f003 0320 	and.w	r3, r3, #32
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003990:	2200      	movs	r2, #0
 8003992:	2100      	movs	r1, #0
 8003994:	2037      	movs	r0, #55	; 0x37
 8003996:	f000 fe2c 	bl	80045f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800399a:	2037      	movs	r0, #55	; 0x37
 800399c:	f000 fe43 	bl	8004626 <HAL_NVIC_EnableIRQ>
}
 80039a0:	e06a      	b.n	8003a78 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM12)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a3d      	ldr	r2, [pc, #244]	; (8003a9c <HAL_TIM_Base_MspInit+0x258>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d117      	bne.n	80039dc <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80039ac:	4b35      	ldr	r3, [pc, #212]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 80039ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039b2:	4a34      	ldr	r2, [pc, #208]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 80039b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039bc:	4b31      	ldr	r3, [pc, #196]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 80039be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80039ca:	2200      	movs	r2, #0
 80039cc:	2100      	movs	r1, #0
 80039ce:	202b      	movs	r0, #43	; 0x2b
 80039d0:	f000 fe0f 	bl	80045f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80039d4:	202b      	movs	r0, #43	; 0x2b
 80039d6:	f000 fe26 	bl	8004626 <HAL_NVIC_EnableIRQ>
}
 80039da:	e04d      	b.n	8003a78 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM13)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a2f      	ldr	r2, [pc, #188]	; (8003aa0 <HAL_TIM_Base_MspInit+0x25c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d117      	bne.n	8003a16 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80039e6:	4b27      	ldr	r3, [pc, #156]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 80039e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039ec:	4a25      	ldr	r2, [pc, #148]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 80039ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039f6:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 80039f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003a04:	2200      	movs	r2, #0
 8003a06:	2100      	movs	r1, #0
 8003a08:	202c      	movs	r0, #44	; 0x2c
 8003a0a:	f000 fdf2 	bl	80045f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003a0e:	202c      	movs	r0, #44	; 0x2c
 8003a10:	f000 fe09 	bl	8004626 <HAL_NVIC_EnableIRQ>
}
 8003a14:	e030      	b.n	8003a78 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM14)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a22      	ldr	r2, [pc, #136]	; (8003aa4 <HAL_TIM_Base_MspInit+0x260>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d117      	bne.n	8003a50 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003a20:	4b18      	ldr	r3, [pc, #96]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 8003a22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a26:	4a17      	ldr	r2, [pc, #92]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 8003a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a30:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 8003a32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2100      	movs	r1, #0
 8003a42:	202d      	movs	r0, #45	; 0x2d
 8003a44:	f000 fdd5 	bl	80045f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003a48:	202d      	movs	r0, #45	; 0x2d
 8003a4a:	f000 fdec 	bl	8004626 <HAL_NVIC_EnableIRQ>
}
 8003a4e:	e013      	b.n	8003a78 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM15)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a14      	ldr	r2, [pc, #80]	; (8003aa8 <HAL_TIM_Base_MspInit+0x264>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d10e      	bne.n	8003a78 <HAL_TIM_Base_MspInit+0x234>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 8003a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a60:	4a08      	ldr	r2, [pc, #32]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 8003a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a6a:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <HAL_TIM_Base_MspInit+0x240>)
 8003a6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	68fb      	ldr	r3, [r7, #12]
}
 8003a78:	bf00      	nop
 8003a7a:	3738      	adds	r7, #56	; 0x38
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40010000 	.word	0x40010000
 8003a84:	58024400 	.word	0x58024400
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40000800 	.word	0x40000800
 8003a90:	40000c00 	.word	0x40000c00
 8003a94:	40001000 	.word	0x40001000
 8003a98:	40001400 	.word	0x40001400
 8003a9c:	40001800 	.word	0x40001800
 8003aa0:	40001c00 	.word	0x40001c00
 8003aa4:	40002000 	.word	0x40002000
 8003aa8:	40014000 	.word	0x40014000

08003aac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08c      	sub	sp, #48	; 0x30
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab4:	f107 031c 	add.w	r3, r7, #28
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a5e      	ldr	r2, [pc, #376]	; (8003c44 <HAL_TIM_MspPostInit+0x198>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d120      	bne.n	8003b10 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ace:	4b5e      	ldr	r3, [pc, #376]	; (8003c48 <HAL_TIM_MspPostInit+0x19c>)
 8003ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ad4:	4a5c      	ldr	r2, [pc, #368]	; (8003c48 <HAL_TIM_MspPostInit+0x19c>)
 8003ad6:	f043 0310 	orr.w	r3, r3, #16
 8003ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ade:	4b5a      	ldr	r3, [pc, #360]	; (8003c48 <HAL_TIM_MspPostInit+0x19c>)
 8003ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8003aec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af2:	2302      	movs	r3, #2
 8003af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afa:	2300      	movs	r3, #0
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003afe:	2301      	movs	r3, #1
 8003b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8003b02:	f107 031c 	add.w	r3, r7, #28
 8003b06:	4619      	mov	r1, r3
 8003b08:	4850      	ldr	r0, [pc, #320]	; (8003c4c <HAL_TIM_MspPostInit+0x1a0>)
 8003b0a:	f003 fdeb 	bl	80076e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003b0e:	e094      	b.n	8003c3a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b18:	d120      	bne.n	8003b5c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b1a:	4b4b      	ldr	r3, [pc, #300]	; (8003c48 <HAL_TIM_MspPostInit+0x19c>)
 8003b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b20:	4a49      	ldr	r2, [pc, #292]	; (8003c48 <HAL_TIM_MspPostInit+0x19c>)
 8003b22:	f043 0302 	orr.w	r3, r3, #2
 8003b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b2a:	4b47      	ldr	r3, [pc, #284]	; (8003c48 <HAL_TIM_MspPostInit+0x19c>)
 8003b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8003b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b46:	2300      	movs	r3, #0
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8003b4e:	f107 031c 	add.w	r3, r7, #28
 8003b52:	4619      	mov	r1, r3
 8003b54:	483e      	ldr	r0, [pc, #248]	; (8003c50 <HAL_TIM_MspPostInit+0x1a4>)
 8003b56:	f003 fdc5 	bl	80076e4 <HAL_GPIO_Init>
}
 8003b5a:	e06e      	b.n	8003c3a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a3c      	ldr	r2, [pc, #240]	; (8003c54 <HAL_TIM_MspPostInit+0x1a8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d11f      	bne.n	8003ba6 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b66:	4b38      	ldr	r3, [pc, #224]	; (8003c48 <HAL_TIM_MspPostInit+0x19c>)
 8003b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b6c:	4a36      	ldr	r2, [pc, #216]	; (8003c48 <HAL_TIM_MspPostInit+0x19c>)
 8003b6e:	f043 0301 	orr.w	r3, r3, #1
 8003b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b76:	4b34      	ldr	r3, [pc, #208]	; (8003c48 <HAL_TIM_MspPostInit+0x19c>)
 8003b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8003b84:	2340      	movs	r3, #64	; 0x40
 8003b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b88:	2302      	movs	r3, #2
 8003b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b90:	2300      	movs	r3, #0
 8003b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b94:	2302      	movs	r3, #2
 8003b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8003b98:	f107 031c 	add.w	r3, r7, #28
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	482e      	ldr	r0, [pc, #184]	; (8003c58 <HAL_TIM_MspPostInit+0x1ac>)
 8003ba0:	f003 fda0 	bl	80076e4 <HAL_GPIO_Init>
}
 8003ba4:	e049      	b.n	8003c3a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a2c      	ldr	r2, [pc, #176]	; (8003c5c <HAL_TIM_MspPostInit+0x1b0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d120      	bne.n	8003bf2 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bb0:	4b25      	ldr	r3, [pc, #148]	; (8003c48 <HAL_TIM_MspPostInit+0x19c>)
 8003bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bb6:	4a24      	ldr	r2, [pc, #144]	; (8003c48 <HAL_TIM_MspPostInit+0x19c>)
 8003bb8:	f043 0302 	orr.w	r3, r3, #2
 8003bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bc0:	4b21      	ldr	r3, [pc, #132]	; (8003c48 <HAL_TIM_MspPostInit+0x19c>)
 8003bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8003bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003be0:	2302      	movs	r3, #2
 8003be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8003be4:	f107 031c 	add.w	r3, r7, #28
 8003be8:	4619      	mov	r1, r3
 8003bea:	4819      	ldr	r0, [pc, #100]	; (8003c50 <HAL_TIM_MspPostInit+0x1a4>)
 8003bec:	f003 fd7a 	bl	80076e4 <HAL_GPIO_Init>
}
 8003bf0:	e023      	b.n	8003c3a <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1a      	ldr	r2, [pc, #104]	; (8003c60 <HAL_TIM_MspPostInit+0x1b4>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d11e      	bne.n	8003c3a <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bfc:	4b12      	ldr	r3, [pc, #72]	; (8003c48 <HAL_TIM_MspPostInit+0x19c>)
 8003bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c02:	4a11      	ldr	r2, [pc, #68]	; (8003c48 <HAL_TIM_MspPostInit+0x19c>)
 8003c04:	f043 0310 	orr.w	r3, r3, #16
 8003c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c0c:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <HAL_TIM_MspPostInit+0x19c>)
 8003c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8003c1a:	2340      	movs	r3, #64	; 0x40
 8003c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c26:	2300      	movs	r3, #0
 8003c28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003c2a:	2304      	movs	r3, #4
 8003c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8003c2e:	f107 031c 	add.w	r3, r7, #28
 8003c32:	4619      	mov	r1, r3
 8003c34:	4805      	ldr	r0, [pc, #20]	; (8003c4c <HAL_TIM_MspPostInit+0x1a0>)
 8003c36:	f003 fd55 	bl	80076e4 <HAL_GPIO_Init>
}
 8003c3a:	bf00      	nop
 8003c3c:	3730      	adds	r7, #48	; 0x30
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40010000 	.word	0x40010000
 8003c48:	58024400 	.word	0x58024400
 8003c4c:	58021000 	.word	0x58021000
 8003c50:	58020400 	.word	0x58020400
 8003c54:	40000400 	.word	0x40000400
 8003c58:	58020000 	.word	0x58020000
 8003c5c:	40000800 	.word	0x40000800
 8003c60:	40014000 	.word	0x40014000

08003c64 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003c68:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <MX_UART4_Init+0x9c>)
 8003c6a:	4a26      	ldr	r2, [pc, #152]	; (8003d04 <MX_UART4_Init+0xa0>)
 8003c6c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8003c6e:	4b24      	ldr	r3, [pc, #144]	; (8003d00 <MX_UART4_Init+0x9c>)
 8003c70:	4a25      	ldr	r2, [pc, #148]	; (8003d08 <MX_UART4_Init+0xa4>)
 8003c72:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003c74:	4b22      	ldr	r3, [pc, #136]	; (8003d00 <MX_UART4_Init+0x9c>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003c7a:	4b21      	ldr	r3, [pc, #132]	; (8003d00 <MX_UART4_Init+0x9c>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003c80:	4b1f      	ldr	r3, [pc, #124]	; (8003d00 <MX_UART4_Init+0x9c>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003c86:	4b1e      	ldr	r3, [pc, #120]	; (8003d00 <MX_UART4_Init+0x9c>)
 8003c88:	220c      	movs	r2, #12
 8003c8a:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c8c:	4b1c      	ldr	r3, [pc, #112]	; (8003d00 <MX_UART4_Init+0x9c>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c92:	4b1b      	ldr	r3, [pc, #108]	; (8003d00 <MX_UART4_Init+0x9c>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c98:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <MX_UART4_Init+0x9c>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c9e:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <MX_UART4_Init+0x9c>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8003ca4:	4b16      	ldr	r3, [pc, #88]	; (8003d00 <MX_UART4_Init+0x9c>)
 8003ca6:	2208      	movs	r2, #8
 8003ca8:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003caa:	4b15      	ldr	r3, [pc, #84]	; (8003d00 <MX_UART4_Init+0x9c>)
 8003cac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003cb2:	4813      	ldr	r0, [pc, #76]	; (8003d00 <MX_UART4_Init+0x9c>)
 8003cb4:	f007 fe60 	bl	800b978 <HAL_UART_Init>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8003cbe:	f7fe fd83 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003cc2:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8003cc6:	480e      	ldr	r0, [pc, #56]	; (8003d00 <MX_UART4_Init+0x9c>)
 8003cc8:	f009 fd7d 	bl	800d7c6 <HAL_UARTEx_SetTxFifoThreshold>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8003cd2:	f7fe fd79 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003cd6:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8003cda:	4809      	ldr	r0, [pc, #36]	; (8003d00 <MX_UART4_Init+0x9c>)
 8003cdc:	f009 fdb1 	bl	800d842 <HAL_UARTEx_SetRxFifoThreshold>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8003ce6:	f7fe fd6f 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8003cea:	4805      	ldr	r0, [pc, #20]	; (8003d00 <MX_UART4_Init+0x9c>)
 8003cec:	f009 fcf7 	bl	800d6de <HAL_UARTEx_EnableFifoMode>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8003cf6:	f7fe fd67 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	24000bdc 	.word	0x24000bdc
 8003d04:	40004c00 	.word	0x40004c00
 8003d08:	001e8480 	.word	0x001e8480

08003d0c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8003d10:	4b23      	ldr	r3, [pc, #140]	; (8003da0 <MX_UART7_Init+0x94>)
 8003d12:	4a24      	ldr	r2, [pc, #144]	; (8003da4 <MX_UART7_Init+0x98>)
 8003d14:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8003d16:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <MX_UART7_Init+0x94>)
 8003d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d1c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003d1e:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <MX_UART7_Init+0x94>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003d24:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <MX_UART7_Init+0x94>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8003d2a:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <MX_UART7_Init+0x94>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003d30:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <MX_UART7_Init+0x94>)
 8003d32:	220c      	movs	r2, #12
 8003d34:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d36:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <MX_UART7_Init+0x94>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d3c:	4b18      	ldr	r3, [pc, #96]	; (8003da0 <MX_UART7_Init+0x94>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d42:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <MX_UART7_Init+0x94>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d48:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <MX_UART7_Init+0x94>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d4e:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <MX_UART7_Init+0x94>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003d54:	4812      	ldr	r0, [pc, #72]	; (8003da0 <MX_UART7_Init+0x94>)
 8003d56:	f007 fe0f 	bl	800b978 <HAL_UART_Init>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8003d60:	f7fe fd32 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003d64:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8003d68:	480d      	ldr	r0, [pc, #52]	; (8003da0 <MX_UART7_Init+0x94>)
 8003d6a:	f009 fd2c 	bl	800d7c6 <HAL_UARTEx_SetTxFifoThreshold>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8003d74:	f7fe fd28 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003d78:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8003d7c:	4808      	ldr	r0, [pc, #32]	; (8003da0 <MX_UART7_Init+0x94>)
 8003d7e:	f009 fd60 	bl	800d842 <HAL_UARTEx_SetRxFifoThreshold>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8003d88:	f7fe fd1e 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8003d8c:	4804      	ldr	r0, [pc, #16]	; (8003da0 <MX_UART7_Init+0x94>)
 8003d8e:	f009 fca6 	bl	800d6de <HAL_UARTEx_EnableFifoMode>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8003d98:	f7fe fd16 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8003d9c:	bf00      	nop
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	24000954 	.word	0x24000954
 8003da4:	40007800 	.word	0x40007800

08003da8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003dac:	4b22      	ldr	r3, [pc, #136]	; (8003e38 <MX_USART3_UART_Init+0x90>)
 8003dae:	4a23      	ldr	r2, [pc, #140]	; (8003e3c <MX_USART3_UART_Init+0x94>)
 8003db0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003db2:	4b21      	ldr	r3, [pc, #132]	; (8003e38 <MX_USART3_UART_Init+0x90>)
 8003db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003db8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003dba:	4b1f      	ldr	r3, [pc, #124]	; (8003e38 <MX_USART3_UART_Init+0x90>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003dc0:	4b1d      	ldr	r3, [pc, #116]	; (8003e38 <MX_USART3_UART_Init+0x90>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003dc6:	4b1c      	ldr	r3, [pc, #112]	; (8003e38 <MX_USART3_UART_Init+0x90>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003dcc:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <MX_USART3_UART_Init+0x90>)
 8003dce:	220c      	movs	r2, #12
 8003dd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dd2:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <MX_USART3_UART_Init+0x90>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dd8:	4b17      	ldr	r3, [pc, #92]	; (8003e38 <MX_USART3_UART_Init+0x90>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dde:	4b16      	ldr	r3, [pc, #88]	; (8003e38 <MX_USART3_UART_Init+0x90>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003de4:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <MX_USART3_UART_Init+0x90>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003dea:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <MX_USART3_UART_Init+0x90>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003df0:	4811      	ldr	r0, [pc, #68]	; (8003e38 <MX_USART3_UART_Init+0x90>)
 8003df2:	f007 fdc1 	bl	800b978 <HAL_UART_Init>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003dfc:	f7fe fce4 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e00:	2100      	movs	r1, #0
 8003e02:	480d      	ldr	r0, [pc, #52]	; (8003e38 <MX_USART3_UART_Init+0x90>)
 8003e04:	f009 fcdf 	bl	800d7c6 <HAL_UARTEx_SetTxFifoThreshold>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003e0e:	f7fe fcdb 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e12:	2100      	movs	r1, #0
 8003e14:	4808      	ldr	r0, [pc, #32]	; (8003e38 <MX_USART3_UART_Init+0x90>)
 8003e16:	f009 fd14 	bl	800d842 <HAL_UARTEx_SetRxFifoThreshold>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003e20:	f7fe fcd2 	bl	80027c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003e24:	4804      	ldr	r0, [pc, #16]	; (8003e38 <MX_USART3_UART_Init+0x90>)
 8003e26:	f009 fc95 	bl	800d754 <HAL_UARTEx_DisableFifoMode>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003e30:	f7fe fcca 	bl	80027c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003e34:	bf00      	nop
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	24000a5c 	.word	0x24000a5c
 8003e3c:	40004800 	.word	0x40004800

08003e40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b0bc      	sub	sp, #240	; 0xf0
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e48:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	605a      	str	r2, [r3, #4]
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	60da      	str	r2, [r3, #12]
 8003e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e58:	f107 0320 	add.w	r3, r7, #32
 8003e5c:	22bc      	movs	r2, #188	; 0xbc
 8003e5e:	2100      	movs	r1, #0
 8003e60:	4618      	mov	r0, r3
 8003e62:	f00a f979 	bl	800e158 <memset>
  if(uartHandle->Instance==UART4)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4aa1      	ldr	r2, [pc, #644]	; (80040f0 <HAL_UART_MspInit+0x2b0>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	f040 80b7 	bne.w	8003fe0 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003e72:	2302      	movs	r3, #2
 8003e74:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003e76:	2300      	movs	r3, #0
 8003e78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e7c:	f107 0320 	add.w	r3, r7, #32
 8003e80:	4618      	mov	r0, r3
 8003e82:	f004 fe05 	bl	8008a90 <HAL_RCCEx_PeriphCLKConfig>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003e8c:	f7fe fc9c 	bl	80027c8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003e90:	4b98      	ldr	r3, [pc, #608]	; (80040f4 <HAL_UART_MspInit+0x2b4>)
 8003e92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e96:	4a97      	ldr	r2, [pc, #604]	; (80040f4 <HAL_UART_MspInit+0x2b4>)
 8003e98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ea0:	4b94      	ldr	r3, [pc, #592]	; (80040f4 <HAL_UART_MspInit+0x2b4>)
 8003ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003eae:	4b91      	ldr	r3, [pc, #580]	; (80040f4 <HAL_UART_MspInit+0x2b4>)
 8003eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eb4:	4a8f      	ldr	r2, [pc, #572]	; (80040f4 <HAL_UART_MspInit+0x2b4>)
 8003eb6:	f043 0308 	orr.w	r3, r3, #8
 8003eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ebe:	4b8d      	ldr	r3, [pc, #564]	; (80040f4 <HAL_UART_MspInit+0x2b4>)
 8003ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	61bb      	str	r3, [r7, #24]
 8003eca:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003ee4:	2308      	movs	r3, #8
 8003ee6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003eea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4881      	ldr	r0, [pc, #516]	; (80040f8 <HAL_UART_MspInit+0x2b8>)
 8003ef2:	f003 fbf7 	bl	80076e4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8003ef6:	4b81      	ldr	r3, [pc, #516]	; (80040fc <HAL_UART_MspInit+0x2bc>)
 8003ef8:	4a81      	ldr	r2, [pc, #516]	; (8004100 <HAL_UART_MspInit+0x2c0>)
 8003efa:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8003efc:	4b7f      	ldr	r3, [pc, #508]	; (80040fc <HAL_UART_MspInit+0x2bc>)
 8003efe:	223f      	movs	r2, #63	; 0x3f
 8003f00:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f02:	4b7e      	ldr	r3, [pc, #504]	; (80040fc <HAL_UART_MspInit+0x2bc>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f08:	4b7c      	ldr	r3, [pc, #496]	; (80040fc <HAL_UART_MspInit+0x2bc>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f0e:	4b7b      	ldr	r3, [pc, #492]	; (80040fc <HAL_UART_MspInit+0x2bc>)
 8003f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f14:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f16:	4b79      	ldr	r3, [pc, #484]	; (80040fc <HAL_UART_MspInit+0x2bc>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f1c:	4b77      	ldr	r3, [pc, #476]	; (80040fc <HAL_UART_MspInit+0x2bc>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003f22:	4b76      	ldr	r3, [pc, #472]	; (80040fc <HAL_UART_MspInit+0x2bc>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f28:	4b74      	ldr	r3, [pc, #464]	; (80040fc <HAL_UART_MspInit+0x2bc>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003f2e:	4b73      	ldr	r3, [pc, #460]	; (80040fc <HAL_UART_MspInit+0x2bc>)
 8003f30:	2204      	movs	r2, #4
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003f34:	4b71      	ldr	r3, [pc, #452]	; (80040fc <HAL_UART_MspInit+0x2bc>)
 8003f36:	2203      	movs	r2, #3
 8003f38:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003f3a:	4b70      	ldr	r3, [pc, #448]	; (80040fc <HAL_UART_MspInit+0x2bc>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003f40:	4b6e      	ldr	r3, [pc, #440]	; (80040fc <HAL_UART_MspInit+0x2bc>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003f46:	486d      	ldr	r0, [pc, #436]	; (80040fc <HAL_UART_MspInit+0x2bc>)
 8003f48:	f000 fd92 	bl	8004a70 <HAL_DMA_Init>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8003f52:	f7fe fc39 	bl	80027c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a68      	ldr	r2, [pc, #416]	; (80040fc <HAL_UART_MspInit+0x2bc>)
 8003f5a:	67da      	str	r2, [r3, #124]	; 0x7c
 8003f5c:	4a67      	ldr	r2, [pc, #412]	; (80040fc <HAL_UART_MspInit+0x2bc>)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8003f62:	4b68      	ldr	r3, [pc, #416]	; (8004104 <HAL_UART_MspInit+0x2c4>)
 8003f64:	4a68      	ldr	r2, [pc, #416]	; (8004108 <HAL_UART_MspInit+0x2c8>)
 8003f66:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8003f68:	4b66      	ldr	r3, [pc, #408]	; (8004104 <HAL_UART_MspInit+0x2c4>)
 8003f6a:	2240      	movs	r2, #64	; 0x40
 8003f6c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f6e:	4b65      	ldr	r3, [pc, #404]	; (8004104 <HAL_UART_MspInit+0x2c4>)
 8003f70:	2240      	movs	r2, #64	; 0x40
 8003f72:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f74:	4b63      	ldr	r3, [pc, #396]	; (8004104 <HAL_UART_MspInit+0x2c4>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f7a:	4b62      	ldr	r3, [pc, #392]	; (8004104 <HAL_UART_MspInit+0x2c4>)
 8003f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f80:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f82:	4b60      	ldr	r3, [pc, #384]	; (8004104 <HAL_UART_MspInit+0x2c4>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f88:	4b5e      	ldr	r3, [pc, #376]	; (8004104 <HAL_UART_MspInit+0x2c4>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003f8e:	4b5d      	ldr	r3, [pc, #372]	; (8004104 <HAL_UART_MspInit+0x2c4>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f94:	4b5b      	ldr	r3, [pc, #364]	; (8004104 <HAL_UART_MspInit+0x2c4>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003f9a:	4b5a      	ldr	r3, [pc, #360]	; (8004104 <HAL_UART_MspInit+0x2c4>)
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003fa0:	4b58      	ldr	r3, [pc, #352]	; (8004104 <HAL_UART_MspInit+0x2c4>)
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003fa6:	4b57      	ldr	r3, [pc, #348]	; (8004104 <HAL_UART_MspInit+0x2c4>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003fac:	4b55      	ldr	r3, [pc, #340]	; (8004104 <HAL_UART_MspInit+0x2c4>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003fb2:	4854      	ldr	r0, [pc, #336]	; (8004104 <HAL_UART_MspInit+0x2c4>)
 8003fb4:	f000 fd5c 	bl	8004a70 <HAL_DMA_Init>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 8003fbe:	f7fe fc03 	bl	80027c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a4f      	ldr	r2, [pc, #316]	; (8004104 <HAL_UART_MspInit+0x2c4>)
 8003fc6:	679a      	str	r2, [r3, #120]	; 0x78
 8003fc8:	4a4e      	ldr	r2, [pc, #312]	; (8004104 <HAL_UART_MspInit+0x2c4>)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	2034      	movs	r0, #52	; 0x34
 8003fd4:	f000 fb0d 	bl	80045f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003fd8:	2034      	movs	r0, #52	; 0x34
 8003fda:	f000 fb24 	bl	8004626 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003fde:	e153      	b.n	8004288 <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==UART7)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a49      	ldr	r2, [pc, #292]	; (800410c <HAL_UART_MspInit+0x2cc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	f040 8098 	bne.w	800411c <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003fec:	2302      	movs	r3, #2
 8003fee:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ff6:	f107 0320 	add.w	r3, r7, #32
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f004 fd48 	bl	8008a90 <HAL_RCCEx_PeriphCLKConfig>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8004006:	f7fe fbdf 	bl	80027c8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800400a:	4b3a      	ldr	r3, [pc, #232]	; (80040f4 <HAL_UART_MspInit+0x2b4>)
 800400c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004010:	4a38      	ldr	r2, [pc, #224]	; (80040f4 <HAL_UART_MspInit+0x2b4>)
 8004012:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004016:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800401a:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <HAL_UART_MspInit+0x2b4>)
 800401c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004020:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004028:	4b32      	ldr	r3, [pc, #200]	; (80040f4 <HAL_UART_MspInit+0x2b4>)
 800402a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800402e:	4a31      	ldr	r2, [pc, #196]	; (80040f4 <HAL_UART_MspInit+0x2b4>)
 8004030:	f043 0310 	orr.w	r3, r3, #16
 8004034:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004038:	4b2e      	ldr	r3, [pc, #184]	; (80040f4 <HAL_UART_MspInit+0x2b4>)
 800403a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800403e:	f003 0310 	and.w	r3, r3, #16
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004046:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800404a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404e:	2302      	movs	r3, #2
 8004050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004054:	2300      	movs	r3, #0
 8004056:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800405a:	2300      	movs	r3, #0
 800405c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8004060:	2307      	movs	r3, #7
 8004062:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004066:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800406a:	4619      	mov	r1, r3
 800406c:	4828      	ldr	r0, [pc, #160]	; (8004110 <HAL_UART_MspInit+0x2d0>)
 800406e:	f003 fb39 	bl	80076e4 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 8004072:	4b28      	ldr	r3, [pc, #160]	; (8004114 <HAL_UART_MspInit+0x2d4>)
 8004074:	4a28      	ldr	r2, [pc, #160]	; (8004118 <HAL_UART_MspInit+0x2d8>)
 8004076:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8004078:	4b26      	ldr	r3, [pc, #152]	; (8004114 <HAL_UART_MspInit+0x2d4>)
 800407a:	2250      	movs	r2, #80	; 0x50
 800407c:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800407e:	4b25      	ldr	r3, [pc, #148]	; (8004114 <HAL_UART_MspInit+0x2d4>)
 8004080:	2240      	movs	r2, #64	; 0x40
 8004082:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004084:	4b23      	ldr	r3, [pc, #140]	; (8004114 <HAL_UART_MspInit+0x2d4>)
 8004086:	2200      	movs	r2, #0
 8004088:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 800408a:	4b22      	ldr	r3, [pc, #136]	; (8004114 <HAL_UART_MspInit+0x2d4>)
 800408c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004090:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004092:	4b20      	ldr	r3, [pc, #128]	; (8004114 <HAL_UART_MspInit+0x2d4>)
 8004094:	2200      	movs	r2, #0
 8004096:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004098:	4b1e      	ldr	r3, [pc, #120]	; (8004114 <HAL_UART_MspInit+0x2d4>)
 800409a:	2200      	movs	r2, #0
 800409c:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800409e:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <HAL_UART_MspInit+0x2d4>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 80040a4:	4b1b      	ldr	r3, [pc, #108]	; (8004114 <HAL_UART_MspInit+0x2d4>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80040aa:	4b1a      	ldr	r3, [pc, #104]	; (8004114 <HAL_UART_MspInit+0x2d4>)
 80040ac:	2204      	movs	r2, #4
 80040ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80040b0:	4b18      	ldr	r3, [pc, #96]	; (8004114 <HAL_UART_MspInit+0x2d4>)
 80040b2:	2203      	movs	r2, #3
 80040b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80040b6:	4b17      	ldr	r3, [pc, #92]	; (8004114 <HAL_UART_MspInit+0x2d4>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80040bc:	4b15      	ldr	r3, [pc, #84]	; (8004114 <HAL_UART_MspInit+0x2d4>)
 80040be:	2200      	movs	r2, #0
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 80040c2:	4814      	ldr	r0, [pc, #80]	; (8004114 <HAL_UART_MspInit+0x2d4>)
 80040c4:	f000 fcd4 	bl	8004a70 <HAL_DMA_Init>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <HAL_UART_MspInit+0x292>
      Error_Handler();
 80040ce:	f7fe fb7b 	bl	80027c8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a0f      	ldr	r2, [pc, #60]	; (8004114 <HAL_UART_MspInit+0x2d4>)
 80040d6:	679a      	str	r2, [r3, #120]	; 0x78
 80040d8:	4a0e      	ldr	r2, [pc, #56]	; (8004114 <HAL_UART_MspInit+0x2d4>)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80040de:	2200      	movs	r2, #0
 80040e0:	2100      	movs	r1, #0
 80040e2:	2052      	movs	r0, #82	; 0x52
 80040e4:	f000 fa85 	bl	80045f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80040e8:	2052      	movs	r0, #82	; 0x52
 80040ea:	f000 fa9c 	bl	8004626 <HAL_NVIC_EnableIRQ>
}
 80040ee:	e0cb      	b.n	8004288 <HAL_UART_MspInit+0x448>
 80040f0:	40004c00 	.word	0x40004c00
 80040f4:	58024400 	.word	0x58024400
 80040f8:	58020c00 	.word	0x58020c00
 80040fc:	240008dc 	.word	0x240008dc
 8004100:	40020058 	.word	0x40020058
 8004104:	24000c6c 	.word	0x24000c6c
 8004108:	40020070 	.word	0x40020070
 800410c:	40007800 	.word	0x40007800
 8004110:	58021000 	.word	0x58021000
 8004114:	24000b64 	.word	0x24000b64
 8004118:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a5b      	ldr	r2, [pc, #364]	; (8004290 <HAL_UART_MspInit+0x450>)
 8004122:	4293      	cmp	r3, r2
 8004124:	f040 80b0 	bne.w	8004288 <HAL_UART_MspInit+0x448>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004128:	2302      	movs	r3, #2
 800412a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800412c:	2300      	movs	r3, #0
 800412e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004132:	f107 0320 	add.w	r3, r7, #32
 8004136:	4618      	mov	r0, r3
 8004138:	f004 fcaa 	bl	8008a90 <HAL_RCCEx_PeriphCLKConfig>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <HAL_UART_MspInit+0x306>
      Error_Handler();
 8004142:	f7fe fb41 	bl	80027c8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004146:	4b53      	ldr	r3, [pc, #332]	; (8004294 <HAL_UART_MspInit+0x454>)
 8004148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800414c:	4a51      	ldr	r2, [pc, #324]	; (8004294 <HAL_UART_MspInit+0x454>)
 800414e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004152:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004156:	4b4f      	ldr	r3, [pc, #316]	; (8004294 <HAL_UART_MspInit+0x454>)
 8004158:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800415c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004164:	4b4b      	ldr	r3, [pc, #300]	; (8004294 <HAL_UART_MspInit+0x454>)
 8004166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800416a:	4a4a      	ldr	r2, [pc, #296]	; (8004294 <HAL_UART_MspInit+0x454>)
 800416c:	f043 0308 	orr.w	r3, r3, #8
 8004170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004174:	4b47      	ldr	r3, [pc, #284]	; (8004294 <HAL_UART_MspInit+0x454>)
 8004176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	60bb      	str	r3, [r7, #8]
 8004180:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004182:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004186:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800418a:	2302      	movs	r3, #2
 800418c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004190:	2300      	movs	r3, #0
 8004192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004196:	2300      	movs	r3, #0
 8004198:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800419c:	2307      	movs	r3, #7
 800419e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041a2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80041a6:	4619      	mov	r1, r3
 80041a8:	483b      	ldr	r0, [pc, #236]	; (8004298 <HAL_UART_MspInit+0x458>)
 80041aa:	f003 fa9b 	bl	80076e4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80041ae:	4b3b      	ldr	r3, [pc, #236]	; (800429c <HAL_UART_MspInit+0x45c>)
 80041b0:	4a3b      	ldr	r2, [pc, #236]	; (80042a0 <HAL_UART_MspInit+0x460>)
 80041b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80041b4:	4b39      	ldr	r3, [pc, #228]	; (800429c <HAL_UART_MspInit+0x45c>)
 80041b6:	222d      	movs	r2, #45	; 0x2d
 80041b8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041ba:	4b38      	ldr	r3, [pc, #224]	; (800429c <HAL_UART_MspInit+0x45c>)
 80041bc:	2200      	movs	r2, #0
 80041be:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041c0:	4b36      	ldr	r3, [pc, #216]	; (800429c <HAL_UART_MspInit+0x45c>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041c6:	4b35      	ldr	r3, [pc, #212]	; (800429c <HAL_UART_MspInit+0x45c>)
 80041c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041cc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041ce:	4b33      	ldr	r3, [pc, #204]	; (800429c <HAL_UART_MspInit+0x45c>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041d4:	4b31      	ldr	r3, [pc, #196]	; (800429c <HAL_UART_MspInit+0x45c>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80041da:	4b30      	ldr	r3, [pc, #192]	; (800429c <HAL_UART_MspInit+0x45c>)
 80041dc:	2200      	movs	r2, #0
 80041de:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80041e0:	4b2e      	ldr	r3, [pc, #184]	; (800429c <HAL_UART_MspInit+0x45c>)
 80041e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041e6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041e8:	4b2c      	ldr	r3, [pc, #176]	; (800429c <HAL_UART_MspInit+0x45c>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80041ee:	482b      	ldr	r0, [pc, #172]	; (800429c <HAL_UART_MspInit+0x45c>)
 80041f0:	f000 fc3e 	bl	8004a70 <HAL_DMA_Init>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_UART_MspInit+0x3be>
      Error_Handler();
 80041fa:	f7fe fae5 	bl	80027c8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a26      	ldr	r2, [pc, #152]	; (800429c <HAL_UART_MspInit+0x45c>)
 8004202:	67da      	str	r2, [r3, #124]	; 0x7c
 8004204:	4a25      	ldr	r2, [pc, #148]	; (800429c <HAL_UART_MspInit+0x45c>)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 800420a:	4b26      	ldr	r3, [pc, #152]	; (80042a4 <HAL_UART_MspInit+0x464>)
 800420c:	4a26      	ldr	r2, [pc, #152]	; (80042a8 <HAL_UART_MspInit+0x468>)
 800420e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004210:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <HAL_UART_MspInit+0x464>)
 8004212:	222e      	movs	r2, #46	; 0x2e
 8004214:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004216:	4b23      	ldr	r3, [pc, #140]	; (80042a4 <HAL_UART_MspInit+0x464>)
 8004218:	2240      	movs	r2, #64	; 0x40
 800421a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800421c:	4b21      	ldr	r3, [pc, #132]	; (80042a4 <HAL_UART_MspInit+0x464>)
 800421e:	2200      	movs	r2, #0
 8004220:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004222:	4b20      	ldr	r3, [pc, #128]	; (80042a4 <HAL_UART_MspInit+0x464>)
 8004224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004228:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800422a:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <HAL_UART_MspInit+0x464>)
 800422c:	2200      	movs	r2, #0
 800422e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004230:	4b1c      	ldr	r3, [pc, #112]	; (80042a4 <HAL_UART_MspInit+0x464>)
 8004232:	2200      	movs	r2, #0
 8004234:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004236:	4b1b      	ldr	r3, [pc, #108]	; (80042a4 <HAL_UART_MspInit+0x464>)
 8004238:	2200      	movs	r2, #0
 800423a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <HAL_UART_MspInit+0x464>)
 800423e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004242:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004244:	4b17      	ldr	r3, [pc, #92]	; (80042a4 <HAL_UART_MspInit+0x464>)
 8004246:	2204      	movs	r2, #4
 8004248:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800424a:	4b16      	ldr	r3, [pc, #88]	; (80042a4 <HAL_UART_MspInit+0x464>)
 800424c:	2203      	movs	r2, #3
 800424e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004250:	4b14      	ldr	r3, [pc, #80]	; (80042a4 <HAL_UART_MspInit+0x464>)
 8004252:	2200      	movs	r2, #0
 8004254:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004256:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <HAL_UART_MspInit+0x464>)
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800425c:	4811      	ldr	r0, [pc, #68]	; (80042a4 <HAL_UART_MspInit+0x464>)
 800425e:	f000 fc07 	bl	8004a70 <HAL_DMA_Init>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8004268:	f7fe faae 	bl	80027c8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a0d      	ldr	r2, [pc, #52]	; (80042a4 <HAL_UART_MspInit+0x464>)
 8004270:	679a      	str	r2, [r3, #120]	; 0x78
 8004272:	4a0c      	ldr	r2, [pc, #48]	; (80042a4 <HAL_UART_MspInit+0x464>)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004278:	2200      	movs	r2, #0
 800427a:	2100      	movs	r1, #0
 800427c:	2027      	movs	r0, #39	; 0x27
 800427e:	f000 f9b8 	bl	80045f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004282:	2027      	movs	r0, #39	; 0x27
 8004284:	f000 f9cf 	bl	8004626 <HAL_NVIC_EnableIRQ>
}
 8004288:	bf00      	nop
 800428a:	37f0      	adds	r7, #240	; 0xf0
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40004800 	.word	0x40004800
 8004294:	58024400 	.word	0x58024400
 8004298:	58020c00 	.word	0x58020c00
 800429c:	240009e4 	.word	0x240009e4
 80042a0:	40020028 	.word	0x40020028
 80042a4:	24000aec 	.word	0x24000aec
 80042a8:	40020040 	.word	0x40020040

080042ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
 ldr   sp, =_estack      /* set stack pointer */
 80042ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80042b0:	f7fe fe46 	bl	8002f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80042b4:	480c      	ldr	r0, [pc, #48]	; (80042e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80042b6:	490d      	ldr	r1, [pc, #52]	; (80042ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80042b8:	4a0d      	ldr	r2, [pc, #52]	; (80042f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80042ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042bc:	e002      	b.n	80042c4 <LoopCopyDataInit>

080042be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042c2:	3304      	adds	r3, #4

080042c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042c8:	d3f9      	bcc.n	80042be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ca:	4a0a      	ldr	r2, [pc, #40]	; (80042f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042cc:	4c0a      	ldr	r4, [pc, #40]	; (80042f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042d0:	e001      	b.n	80042d6 <LoopFillZerobss>

080042d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042d4:	3204      	adds	r2, #4

080042d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042d8:	d3fb      	bcc.n	80042d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042da:	f009 ff0b 	bl	800e0f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042de:	f7fe f873 	bl	80023c8 <main>
  bx  lr
 80042e2:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 80042e4:	240012f8 	.word	0x240012f8
  ldr r0, =_sdata
 80042e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80042ec:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 80042f0:	08012704 	.word	0x08012704
  ldr r2, =_sbss
 80042f4:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 80042f8:	24000cf8 	.word	0x24000cf8

080042fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042fc:	e7fe      	b.n	80042fc <ADC3_IRQHandler>
	...

08004300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004306:	2003      	movs	r0, #3
 8004308:	f000 f968 	bl	80045dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800430c:	f004 f9ea 	bl	80086e4 <HAL_RCC_GetSysClockFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b15      	ldr	r3, [pc, #84]	; (8004368 <HAL_Init+0x68>)
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	0a1b      	lsrs	r3, r3, #8
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	4913      	ldr	r1, [pc, #76]	; (800436c <HAL_Init+0x6c>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
 8004328:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800432a:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <HAL_Init+0x68>)
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	4a0e      	ldr	r2, [pc, #56]	; (800436c <HAL_Init+0x6c>)
 8004334:	5cd3      	ldrb	r3, [r2, r3]
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
 8004340:	4a0b      	ldr	r2, [pc, #44]	; (8004370 <HAL_Init+0x70>)
 8004342:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004344:	4a0b      	ldr	r2, [pc, #44]	; (8004374 <HAL_Init+0x74>)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800434a:	2000      	movs	r0, #0
 800434c:	f000 f814 	bl	8004378 <HAL_InitTick>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e002      	b.n	8004360 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800435a:	f7fe fc3b 	bl	8002bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	58024400 	.word	0x58024400
 800436c:	08010a10 	.word	0x08010a10
 8004370:	2400001c 	.word	0x2400001c
 8004374:	24000018 	.word	0x24000018

08004378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004380:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <HAL_InitTick+0x60>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e021      	b.n	80043d0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800438c:	4b13      	ldr	r3, [pc, #76]	; (80043dc <HAL_InitTick+0x64>)
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <HAL_InitTick+0x60>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	4619      	mov	r1, r3
 8004396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800439a:	fbb3 f3f1 	udiv	r3, r3, r1
 800439e:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 f94d 	bl	8004642 <HAL_SYSTICK_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e00e      	b.n	80043d0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b0f      	cmp	r3, #15
 80043b6:	d80a      	bhi.n	80043ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043b8:	2200      	movs	r2, #0
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	f04f 30ff 	mov.w	r0, #4294967295
 80043c0:	f000 f917 	bl	80045f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043c4:	4a06      	ldr	r2, [pc, #24]	; (80043e0 <HAL_InitTick+0x68>)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e000      	b.n	80043d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	24000024 	.word	0x24000024
 80043dc:	24000018 	.word	0x24000018
 80043e0:	24000020 	.word	0x24000020

080043e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043e8:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_IncTick+0x20>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_IncTick+0x24>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4413      	add	r3, r2
 80043f4:	4a04      	ldr	r2, [pc, #16]	; (8004408 <HAL_IncTick+0x24>)
 80043f6:	6013      	str	r3, [r2, #0]
}
 80043f8:	bf00      	nop
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	24000024 	.word	0x24000024
 8004408:	24000ce4 	.word	0x24000ce4

0800440c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return uwTick;
 8004410:	4b03      	ldr	r3, [pc, #12]	; (8004420 <HAL_GetTick+0x14>)
 8004412:	681b      	ldr	r3, [r3, #0]
}
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	24000ce4 	.word	0x24000ce4

08004424 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004428:	4b03      	ldr	r3, [pc, #12]	; (8004438 <HAL_GetREVID+0x14>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	0c1b      	lsrs	r3, r3, #16
}
 800442e:	4618      	mov	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	5c001000 	.word	0x5c001000

0800443c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <__NVIC_SetPriorityGrouping+0x40>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004458:	4013      	ands	r3, r2
 800445a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <__NVIC_SetPriorityGrouping+0x44>)
 8004466:	4313      	orrs	r3, r2
 8004468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800446a:	4a04      	ldr	r2, [pc, #16]	; (800447c <__NVIC_SetPriorityGrouping+0x40>)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	60d3      	str	r3, [r2, #12]
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	e000ed00 	.word	0xe000ed00
 8004480:	05fa0000 	.word	0x05fa0000

08004484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004488:	4b04      	ldr	r3, [pc, #16]	; (800449c <__NVIC_GetPriorityGrouping+0x18>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	0a1b      	lsrs	r3, r3, #8
 800448e:	f003 0307 	and.w	r3, r3, #7
}
 8004492:	4618      	mov	r0, r3
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	e000ed00 	.word	0xe000ed00

080044a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80044aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	db0b      	blt.n	80044ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	f003 021f 	and.w	r2, r3, #31
 80044b8:	4907      	ldr	r1, [pc, #28]	; (80044d8 <__NVIC_EnableIRQ+0x38>)
 80044ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044be:	095b      	lsrs	r3, r3, #5
 80044c0:	2001      	movs	r0, #1
 80044c2:	fa00 f202 	lsl.w	r2, r0, r2
 80044c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	e000e100 	.word	0xe000e100

080044dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	6039      	str	r1, [r7, #0]
 80044e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80044e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	db0a      	blt.n	8004506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	490c      	ldr	r1, [pc, #48]	; (8004528 <__NVIC_SetPriority+0x4c>)
 80044f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044fa:	0112      	lsls	r2, r2, #4
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	440b      	add	r3, r1
 8004500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004504:	e00a      	b.n	800451c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	b2da      	uxtb	r2, r3
 800450a:	4908      	ldr	r1, [pc, #32]	; (800452c <__NVIC_SetPriority+0x50>)
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	3b04      	subs	r3, #4
 8004514:	0112      	lsls	r2, r2, #4
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	440b      	add	r3, r1
 800451a:	761a      	strb	r2, [r3, #24]
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	e000e100 	.word	0xe000e100
 800452c:	e000ed00 	.word	0xe000ed00

08004530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004530:	b480      	push	{r7}
 8004532:	b089      	sub	sp, #36	; 0x24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f1c3 0307 	rsb	r3, r3, #7
 800454a:	2b04      	cmp	r3, #4
 800454c:	bf28      	it	cs
 800454e:	2304      	movcs	r3, #4
 8004550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	3304      	adds	r3, #4
 8004556:	2b06      	cmp	r3, #6
 8004558:	d902      	bls.n	8004560 <NVIC_EncodePriority+0x30>
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	3b03      	subs	r3, #3
 800455e:	e000      	b.n	8004562 <NVIC_EncodePriority+0x32>
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004564:	f04f 32ff 	mov.w	r2, #4294967295
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43da      	mvns	r2, r3
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	401a      	ands	r2, r3
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004578:	f04f 31ff 	mov.w	r1, #4294967295
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	fa01 f303 	lsl.w	r3, r1, r3
 8004582:	43d9      	mvns	r1, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004588:	4313      	orrs	r3, r2
         );
}
 800458a:	4618      	mov	r0, r3
 800458c:	3724      	adds	r7, #36	; 0x24
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
	...

08004598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045a8:	d301      	bcc.n	80045ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045aa:	2301      	movs	r3, #1
 80045ac:	e00f      	b.n	80045ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045ae:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <SysTick_Config+0x40>)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045b6:	210f      	movs	r1, #15
 80045b8:	f04f 30ff 	mov.w	r0, #4294967295
 80045bc:	f7ff ff8e 	bl	80044dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045c0:	4b05      	ldr	r3, [pc, #20]	; (80045d8 <SysTick_Config+0x40>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045c6:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <SysTick_Config+0x40>)
 80045c8:	2207      	movs	r2, #7
 80045ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	e000e010 	.word	0xe000e010

080045dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff ff29 	bl	800443c <__NVIC_SetPriorityGrouping>
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b086      	sub	sp, #24
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	4603      	mov	r3, r0
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004600:	f7ff ff40 	bl	8004484 <__NVIC_GetPriorityGrouping>
 8004604:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	6978      	ldr	r0, [r7, #20]
 800460c:	f7ff ff90 	bl	8004530 <NVIC_EncodePriority>
 8004610:	4602      	mov	r2, r0
 8004612:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004616:	4611      	mov	r1, r2
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff ff5f 	bl	80044dc <__NVIC_SetPriority>
}
 800461e:	bf00      	nop
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	4603      	mov	r3, r0
 800462e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004630:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff33 	bl	80044a0 <__NVIC_EnableIRQ>
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff ffa4 	bl	8004598 <SysTick_Config>
 8004650:	4603      	mov	r3, r0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800465e:	f000 f802 	bl	8004666 <HAL_SYSTICK_Callback>
}
 8004662:	bf00      	nop
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8004666:	b480      	push	{r7}
 8004668:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800466a:	bf00      	nop
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e054      	b.n	8004730 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	7f5b      	ldrb	r3, [r3, #29]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d105      	bne.n	800469c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fc fb94 	bl	8000dc4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	791b      	ldrb	r3, [r3, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10c      	bne.n	80046c4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a22      	ldr	r2, [pc, #136]	; (8004738 <HAL_CRC_Init+0xc4>)
 80046b0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0218 	bic.w	r2, r2, #24
 80046c0:	609a      	str	r2, [r3, #8]
 80046c2:	e00c      	b.n	80046de <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6899      	ldr	r1, [r3, #8]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	461a      	mov	r2, r3
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f948 	bl	8004964 <HAL_CRCEx_Polynomial_Set>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e028      	b.n	8004730 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	795b      	ldrb	r3, [r3, #5]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d105      	bne.n	80046f2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f04f 32ff 	mov.w	r2, #4294967295
 80046ee:	611a      	str	r2, [r3, #16]
 80046f0:	e004      	b.n	80046fc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6912      	ldr	r2, [r2, #16]
 80046fa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695a      	ldr	r2, [r3, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699a      	ldr	r2, [r3, #24]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	04c11db7 	.word	0x04c11db7

0800473c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2202      	movs	r2, #2
 8004750:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0201 	orr.w	r2, r2, #1
 8004760:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	2b03      	cmp	r3, #3
 8004768:	d006      	beq.n	8004778 <HAL_CRC_Calculate+0x3c>
 800476a:	2b03      	cmp	r3, #3
 800476c:	d829      	bhi.n	80047c2 <HAL_CRC_Calculate+0x86>
 800476e:	2b01      	cmp	r3, #1
 8004770:	d019      	beq.n	80047a6 <HAL_CRC_Calculate+0x6a>
 8004772:	2b02      	cmp	r3, #2
 8004774:	d01e      	beq.n	80047b4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8004776:	e024      	b.n	80047c2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e00a      	b.n	8004794 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	441a      	add	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	3301      	adds	r3, #1
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	429a      	cmp	r2, r3
 800479a:	d3f0      	bcc.n	800477e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	613b      	str	r3, [r7, #16]
      break;
 80047a4:	e00e      	b.n	80047c4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f812 	bl	80047d4 <CRC_Handle_8>
 80047b0:	6138      	str	r0, [r7, #16]
      break;
 80047b2:	e007      	b.n	80047c4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f899 	bl	80048f0 <CRC_Handle_16>
 80047be:	6138      	str	r0, [r7, #16]
      break;
 80047c0:	e000      	b.n	80047c4 <HAL_CRC_Calculate+0x88>
      break;
 80047c2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2201      	movs	r2, #1
 80047c8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80047ca:	693b      	ldr	r3, [r7, #16]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b089      	sub	sp, #36	; 0x24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80047e0:	2300      	movs	r3, #0
 80047e2:	61fb      	str	r3, [r7, #28]
 80047e4:	e023      	b.n	800482e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	4413      	add	r3, r2
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	3301      	adds	r3, #1
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	440b      	add	r3, r1
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004800:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	3302      	adds	r3, #2
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	440b      	add	r3, r1
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004810:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	3303      	adds	r3, #3
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	440b      	add	r3, r1
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004824:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004826:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	3301      	adds	r3, #1
 800482c:	61fb      	str	r3, [r7, #28]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	089b      	lsrs	r3, r3, #2
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	429a      	cmp	r2, r3
 8004836:	d3d6      	bcc.n	80047e6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d04d      	beq.n	80048de <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f003 0303 	and.w	r3, r3, #3
 8004848:	2b01      	cmp	r3, #1
 800484a:	d107      	bne.n	800485c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	4413      	add	r3, r2
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d116      	bne.n	8004894 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	4413      	add	r3, r2
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	b21a      	sxth	r2, r3
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	3301      	adds	r3, #1
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	440b      	add	r3, r1
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	b21b      	sxth	r3, r3
 8004882:	4313      	orrs	r3, r2
 8004884:	b21b      	sxth	r3, r3
 8004886:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	8b7a      	ldrh	r2, [r7, #26]
 8004892:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	2b03      	cmp	r3, #3
 800489c:	d11f      	bne.n	80048de <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	4413      	add	r3, r2
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	021b      	lsls	r3, r3, #8
 80048aa:	b21a      	sxth	r2, r3
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	3301      	adds	r3, #1
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	440b      	add	r3, r1
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	b21b      	sxth	r3, r3
 80048ba:	4313      	orrs	r3, r2
 80048bc:	b21b      	sxth	r3, r3
 80048be:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	8b7a      	ldrh	r2, [r7, #26]
 80048ca:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	3302      	adds	r3, #2
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4413      	add	r3, r2
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3724      	adds	r7, #36	; 0x24
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b087      	sub	sp, #28
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80048fc:	2300      	movs	r3, #0
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	e013      	b.n	800492a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	4413      	add	r3, r2
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	041a      	lsls	r2, r3, #16
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	3302      	adds	r3, #2
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	440b      	add	r3, r1
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	4619      	mov	r1, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	3301      	adds	r3, #1
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	085b      	lsrs	r3, r3, #1
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	429a      	cmp	r2, r3
 8004932:	d3e6      	bcc.n	8004902 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d009      	beq.n	8004952 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	4413      	add	r3, r2
 800494c:	881a      	ldrh	r2, [r3, #0]
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
}
 8004958:	4618      	mov	r0, r3
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004964:	b480      	push	{r7}
 8004966:	b087      	sub	sp, #28
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004974:	231f      	movs	r3, #31
 8004976:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004978:	bf00      	nop
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1e5a      	subs	r2, r3, #1
 800497e:	613a      	str	r2, [r7, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d009      	beq.n	8004998 <HAL_CRCEx_Polynomial_Set+0x34>
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f0      	beq.n	800497a <HAL_CRCEx_Polynomial_Set+0x16>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b18      	cmp	r3, #24
 800499c:	d846      	bhi.n	8004a2c <HAL_CRCEx_Polynomial_Set+0xc8>
 800499e:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80049a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a4:	08004a33 	.word	0x08004a33
 80049a8:	08004a2d 	.word	0x08004a2d
 80049ac:	08004a2d 	.word	0x08004a2d
 80049b0:	08004a2d 	.word	0x08004a2d
 80049b4:	08004a2d 	.word	0x08004a2d
 80049b8:	08004a2d 	.word	0x08004a2d
 80049bc:	08004a2d 	.word	0x08004a2d
 80049c0:	08004a2d 	.word	0x08004a2d
 80049c4:	08004a21 	.word	0x08004a21
 80049c8:	08004a2d 	.word	0x08004a2d
 80049cc:	08004a2d 	.word	0x08004a2d
 80049d0:	08004a2d 	.word	0x08004a2d
 80049d4:	08004a2d 	.word	0x08004a2d
 80049d8:	08004a2d 	.word	0x08004a2d
 80049dc:	08004a2d 	.word	0x08004a2d
 80049e0:	08004a2d 	.word	0x08004a2d
 80049e4:	08004a15 	.word	0x08004a15
 80049e8:	08004a2d 	.word	0x08004a2d
 80049ec:	08004a2d 	.word	0x08004a2d
 80049f0:	08004a2d 	.word	0x08004a2d
 80049f4:	08004a2d 	.word	0x08004a2d
 80049f8:	08004a2d 	.word	0x08004a2d
 80049fc:	08004a2d 	.word	0x08004a2d
 8004a00:	08004a2d 	.word	0x08004a2d
 8004a04:	08004a09 	.word	0x08004a09
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2b06      	cmp	r3, #6
 8004a0c:	d913      	bls.n	8004a36 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004a12:	e010      	b.n	8004a36 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	2b07      	cmp	r3, #7
 8004a18:	d90f      	bls.n	8004a3a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004a1e:	e00c      	b.n	8004a3a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2b0f      	cmp	r3, #15
 8004a24:	d90b      	bls.n	8004a3e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004a2a:	e008      	b.n	8004a3e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a30:	e006      	b.n	8004a40 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004a32:	bf00      	nop
 8004a34:	e004      	b.n	8004a40 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004a36:	bf00      	nop
 8004a38:	e002      	b.n	8004a40 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004a3a:	bf00      	nop
 8004a3c:	e000      	b.n	8004a40 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004a3e:	bf00      	nop
  }
  if (status == HAL_OK)
 8004a40:	7dfb      	ldrb	r3, [r7, #23]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10d      	bne.n	8004a62 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f023 0118 	bic.w	r1, r3, #24
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	371c      	adds	r7, #28
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004a78:	f7ff fcc8 	bl	800440c <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e316      	b.n	80050b6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a66      	ldr	r2, [pc, #408]	; (8004c28 <HAL_DMA_Init+0x1b8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d04a      	beq.n	8004b28 <HAL_DMA_Init+0xb8>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a65      	ldr	r2, [pc, #404]	; (8004c2c <HAL_DMA_Init+0x1bc>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d045      	beq.n	8004b28 <HAL_DMA_Init+0xb8>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a63      	ldr	r2, [pc, #396]	; (8004c30 <HAL_DMA_Init+0x1c0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d040      	beq.n	8004b28 <HAL_DMA_Init+0xb8>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a62      	ldr	r2, [pc, #392]	; (8004c34 <HAL_DMA_Init+0x1c4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d03b      	beq.n	8004b28 <HAL_DMA_Init+0xb8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a60      	ldr	r2, [pc, #384]	; (8004c38 <HAL_DMA_Init+0x1c8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d036      	beq.n	8004b28 <HAL_DMA_Init+0xb8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a5f      	ldr	r2, [pc, #380]	; (8004c3c <HAL_DMA_Init+0x1cc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d031      	beq.n	8004b28 <HAL_DMA_Init+0xb8>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a5d      	ldr	r2, [pc, #372]	; (8004c40 <HAL_DMA_Init+0x1d0>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d02c      	beq.n	8004b28 <HAL_DMA_Init+0xb8>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a5c      	ldr	r2, [pc, #368]	; (8004c44 <HAL_DMA_Init+0x1d4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d027      	beq.n	8004b28 <HAL_DMA_Init+0xb8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a5a      	ldr	r2, [pc, #360]	; (8004c48 <HAL_DMA_Init+0x1d8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d022      	beq.n	8004b28 <HAL_DMA_Init+0xb8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a59      	ldr	r2, [pc, #356]	; (8004c4c <HAL_DMA_Init+0x1dc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d01d      	beq.n	8004b28 <HAL_DMA_Init+0xb8>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a57      	ldr	r2, [pc, #348]	; (8004c50 <HAL_DMA_Init+0x1e0>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d018      	beq.n	8004b28 <HAL_DMA_Init+0xb8>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a56      	ldr	r2, [pc, #344]	; (8004c54 <HAL_DMA_Init+0x1e4>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d013      	beq.n	8004b28 <HAL_DMA_Init+0xb8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a54      	ldr	r2, [pc, #336]	; (8004c58 <HAL_DMA_Init+0x1e8>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00e      	beq.n	8004b28 <HAL_DMA_Init+0xb8>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a53      	ldr	r2, [pc, #332]	; (8004c5c <HAL_DMA_Init+0x1ec>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d009      	beq.n	8004b28 <HAL_DMA_Init+0xb8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a51      	ldr	r2, [pc, #324]	; (8004c60 <HAL_DMA_Init+0x1f0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <HAL_DMA_Init+0xb8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a50      	ldr	r2, [pc, #320]	; (8004c64 <HAL_DMA_Init+0x1f4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d101      	bne.n	8004b2c <HAL_DMA_Init+0xbc>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <HAL_DMA_Init+0xbe>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 813b 	beq.w	8004daa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2202      	movs	r2, #2
 8004b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a37      	ldr	r2, [pc, #220]	; (8004c28 <HAL_DMA_Init+0x1b8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d04a      	beq.n	8004be4 <HAL_DMA_Init+0x174>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a36      	ldr	r2, [pc, #216]	; (8004c2c <HAL_DMA_Init+0x1bc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d045      	beq.n	8004be4 <HAL_DMA_Init+0x174>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a34      	ldr	r2, [pc, #208]	; (8004c30 <HAL_DMA_Init+0x1c0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d040      	beq.n	8004be4 <HAL_DMA_Init+0x174>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a33      	ldr	r2, [pc, #204]	; (8004c34 <HAL_DMA_Init+0x1c4>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d03b      	beq.n	8004be4 <HAL_DMA_Init+0x174>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a31      	ldr	r2, [pc, #196]	; (8004c38 <HAL_DMA_Init+0x1c8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d036      	beq.n	8004be4 <HAL_DMA_Init+0x174>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a30      	ldr	r2, [pc, #192]	; (8004c3c <HAL_DMA_Init+0x1cc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d031      	beq.n	8004be4 <HAL_DMA_Init+0x174>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a2e      	ldr	r2, [pc, #184]	; (8004c40 <HAL_DMA_Init+0x1d0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d02c      	beq.n	8004be4 <HAL_DMA_Init+0x174>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a2d      	ldr	r2, [pc, #180]	; (8004c44 <HAL_DMA_Init+0x1d4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d027      	beq.n	8004be4 <HAL_DMA_Init+0x174>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a2b      	ldr	r2, [pc, #172]	; (8004c48 <HAL_DMA_Init+0x1d8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d022      	beq.n	8004be4 <HAL_DMA_Init+0x174>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a2a      	ldr	r2, [pc, #168]	; (8004c4c <HAL_DMA_Init+0x1dc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d01d      	beq.n	8004be4 <HAL_DMA_Init+0x174>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a28      	ldr	r2, [pc, #160]	; (8004c50 <HAL_DMA_Init+0x1e0>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d018      	beq.n	8004be4 <HAL_DMA_Init+0x174>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a27      	ldr	r2, [pc, #156]	; (8004c54 <HAL_DMA_Init+0x1e4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d013      	beq.n	8004be4 <HAL_DMA_Init+0x174>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a25      	ldr	r2, [pc, #148]	; (8004c58 <HAL_DMA_Init+0x1e8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00e      	beq.n	8004be4 <HAL_DMA_Init+0x174>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a24      	ldr	r2, [pc, #144]	; (8004c5c <HAL_DMA_Init+0x1ec>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d009      	beq.n	8004be4 <HAL_DMA_Init+0x174>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a22      	ldr	r2, [pc, #136]	; (8004c60 <HAL_DMA_Init+0x1f0>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d004      	beq.n	8004be4 <HAL_DMA_Init+0x174>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a21      	ldr	r2, [pc, #132]	; (8004c64 <HAL_DMA_Init+0x1f4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d108      	bne.n	8004bf6 <HAL_DMA_Init+0x186>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0201 	bic.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	e007      	b.n	8004c06 <HAL_DMA_Init+0x196>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0201 	bic.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c06:	e02f      	b.n	8004c68 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c08:	f7ff fc00 	bl	800440c <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b05      	cmp	r3, #5
 8004c14:	d928      	bls.n	8004c68 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2203      	movs	r2, #3
 8004c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e246      	b.n	80050b6 <HAL_DMA_Init+0x646>
 8004c28:	40020010 	.word	0x40020010
 8004c2c:	40020028 	.word	0x40020028
 8004c30:	40020040 	.word	0x40020040
 8004c34:	40020058 	.word	0x40020058
 8004c38:	40020070 	.word	0x40020070
 8004c3c:	40020088 	.word	0x40020088
 8004c40:	400200a0 	.word	0x400200a0
 8004c44:	400200b8 	.word	0x400200b8
 8004c48:	40020410 	.word	0x40020410
 8004c4c:	40020428 	.word	0x40020428
 8004c50:	40020440 	.word	0x40020440
 8004c54:	40020458 	.word	0x40020458
 8004c58:	40020470 	.word	0x40020470
 8004c5c:	40020488 	.word	0x40020488
 8004c60:	400204a0 	.word	0x400204a0
 8004c64:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1c8      	bne.n	8004c08 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4b83      	ldr	r3, [pc, #524]	; (8004e90 <HAL_DMA_Init+0x420>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004c8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ca6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d107      	bne.n	8004ccc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004ccc:	4b71      	ldr	r3, [pc, #452]	; (8004e94 <HAL_DMA_Init+0x424>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	4b71      	ldr	r3, [pc, #452]	; (8004e98 <HAL_DMA_Init+0x428>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cd8:	d328      	bcc.n	8004d2c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b28      	cmp	r3, #40	; 0x28
 8004ce0:	d903      	bls.n	8004cea <HAL_DMA_Init+0x27a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ce8:	d917      	bls.n	8004d1a <HAL_DMA_Init+0x2aa>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b3e      	cmp	r3, #62	; 0x3e
 8004cf0:	d903      	bls.n	8004cfa <HAL_DMA_Init+0x28a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b42      	cmp	r3, #66	; 0x42
 8004cf8:	d90f      	bls.n	8004d1a <HAL_DMA_Init+0x2aa>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b46      	cmp	r3, #70	; 0x46
 8004d00:	d903      	bls.n	8004d0a <HAL_DMA_Init+0x29a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	2b48      	cmp	r3, #72	; 0x48
 8004d08:	d907      	bls.n	8004d1a <HAL_DMA_Init+0x2aa>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b4e      	cmp	r3, #78	; 0x4e
 8004d10:	d905      	bls.n	8004d1e <HAL_DMA_Init+0x2ae>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b52      	cmp	r3, #82	; 0x52
 8004d18:	d801      	bhi.n	8004d1e <HAL_DMA_Init+0x2ae>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e000      	b.n	8004d20 <HAL_DMA_Init+0x2b0>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d2a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	697a      	ldr	r2, [r7, #20]
 8004d32:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f023 0307 	bic.w	r3, r3, #7
 8004d42:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d117      	bne.n	8004d86 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00e      	beq.n	8004d86 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f002 fb31 	bl	80073d0 <DMA_CheckFifoParam>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d008      	beq.n	8004d86 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2240      	movs	r2, #64	; 0x40
 8004d78:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e197      	b.n	80050b6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f002 fa6c 	bl	800726c <DMA_CalcBaseAndBitshift>
 8004d94:	4603      	mov	r3, r0
 8004d96:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	223f      	movs	r2, #63	; 0x3f
 8004da2:	409a      	lsls	r2, r3
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	609a      	str	r2, [r3, #8]
 8004da8:	e0cd      	b.n	8004f46 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a3b      	ldr	r2, [pc, #236]	; (8004e9c <HAL_DMA_Init+0x42c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d022      	beq.n	8004dfa <HAL_DMA_Init+0x38a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a39      	ldr	r2, [pc, #228]	; (8004ea0 <HAL_DMA_Init+0x430>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d01d      	beq.n	8004dfa <HAL_DMA_Init+0x38a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a38      	ldr	r2, [pc, #224]	; (8004ea4 <HAL_DMA_Init+0x434>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d018      	beq.n	8004dfa <HAL_DMA_Init+0x38a>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a36      	ldr	r2, [pc, #216]	; (8004ea8 <HAL_DMA_Init+0x438>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d013      	beq.n	8004dfa <HAL_DMA_Init+0x38a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a35      	ldr	r2, [pc, #212]	; (8004eac <HAL_DMA_Init+0x43c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00e      	beq.n	8004dfa <HAL_DMA_Init+0x38a>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a33      	ldr	r2, [pc, #204]	; (8004eb0 <HAL_DMA_Init+0x440>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d009      	beq.n	8004dfa <HAL_DMA_Init+0x38a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a32      	ldr	r2, [pc, #200]	; (8004eb4 <HAL_DMA_Init+0x444>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d004      	beq.n	8004dfa <HAL_DMA_Init+0x38a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a30      	ldr	r2, [pc, #192]	; (8004eb8 <HAL_DMA_Init+0x448>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d101      	bne.n	8004dfe <HAL_DMA_Init+0x38e>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e000      	b.n	8004e00 <HAL_DMA_Init+0x390>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8097 	beq.w	8004f34 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a24      	ldr	r2, [pc, #144]	; (8004e9c <HAL_DMA_Init+0x42c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d021      	beq.n	8004e54 <HAL_DMA_Init+0x3e4>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a22      	ldr	r2, [pc, #136]	; (8004ea0 <HAL_DMA_Init+0x430>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d01c      	beq.n	8004e54 <HAL_DMA_Init+0x3e4>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a21      	ldr	r2, [pc, #132]	; (8004ea4 <HAL_DMA_Init+0x434>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d017      	beq.n	8004e54 <HAL_DMA_Init+0x3e4>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1f      	ldr	r2, [pc, #124]	; (8004ea8 <HAL_DMA_Init+0x438>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d012      	beq.n	8004e54 <HAL_DMA_Init+0x3e4>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1e      	ldr	r2, [pc, #120]	; (8004eac <HAL_DMA_Init+0x43c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00d      	beq.n	8004e54 <HAL_DMA_Init+0x3e4>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1c      	ldr	r2, [pc, #112]	; (8004eb0 <HAL_DMA_Init+0x440>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d008      	beq.n	8004e54 <HAL_DMA_Init+0x3e4>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1b      	ldr	r2, [pc, #108]	; (8004eb4 <HAL_DMA_Init+0x444>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d003      	beq.n	8004e54 <HAL_DMA_Init+0x3e4>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a19      	ldr	r2, [pc, #100]	; (8004eb8 <HAL_DMA_Init+0x448>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <HAL_DMA_Init+0x44c>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	d020      	beq.n	8004ec0 <HAL_DMA_Init+0x450>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2b80      	cmp	r3, #128	; 0x80
 8004e84:	d102      	bne.n	8004e8c <HAL_DMA_Init+0x41c>
 8004e86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e8a:	e01a      	b.n	8004ec2 <HAL_DMA_Init+0x452>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e018      	b.n	8004ec2 <HAL_DMA_Init+0x452>
 8004e90:	fe10803f 	.word	0xfe10803f
 8004e94:	5c001000 	.word	0x5c001000
 8004e98:	ffff0000 	.word	0xffff0000
 8004e9c:	58025408 	.word	0x58025408
 8004ea0:	5802541c 	.word	0x5802541c
 8004ea4:	58025430 	.word	0x58025430
 8004ea8:	58025444 	.word	0x58025444
 8004eac:	58025458 	.word	0x58025458
 8004eb0:	5802546c 	.word	0x5802546c
 8004eb4:	58025480 	.word	0x58025480
 8004eb8:	58025494 	.word	0x58025494
 8004ebc:	fffe000f 	.word	0xfffe000f
 8004ec0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	68d2      	ldr	r2, [r2, #12]
 8004ec6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ec8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ed0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ed8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004ee0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004ee8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004ef0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	461a      	mov	r2, r3
 8004f06:	4b6e      	ldr	r3, [pc, #440]	; (80050c0 <HAL_DMA_Init+0x650>)
 8004f08:	4413      	add	r3, r2
 8004f0a:	4a6e      	ldr	r2, [pc, #440]	; (80050c4 <HAL_DMA_Init+0x654>)
 8004f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	009a      	lsls	r2, r3, #2
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f002 f9a7 	bl	800726c <DMA_CalcBaseAndBitshift>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f26:	f003 031f 	and.w	r3, r3, #31
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	409a      	lsls	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	605a      	str	r2, [r3, #4]
 8004f32:	e008      	b.n	8004f46 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2240      	movs	r2, #64	; 0x40
 8004f38:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e0b7      	b.n	80050b6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a5f      	ldr	r2, [pc, #380]	; (80050c8 <HAL_DMA_Init+0x658>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d072      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a5d      	ldr	r2, [pc, #372]	; (80050cc <HAL_DMA_Init+0x65c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d06d      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a5c      	ldr	r2, [pc, #368]	; (80050d0 <HAL_DMA_Init+0x660>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d068      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a5a      	ldr	r2, [pc, #360]	; (80050d4 <HAL_DMA_Init+0x664>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d063      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a59      	ldr	r2, [pc, #356]	; (80050d8 <HAL_DMA_Init+0x668>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d05e      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a57      	ldr	r2, [pc, #348]	; (80050dc <HAL_DMA_Init+0x66c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d059      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a56      	ldr	r2, [pc, #344]	; (80050e0 <HAL_DMA_Init+0x670>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d054      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a54      	ldr	r2, [pc, #336]	; (80050e4 <HAL_DMA_Init+0x674>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d04f      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a53      	ldr	r2, [pc, #332]	; (80050e8 <HAL_DMA_Init+0x678>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d04a      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a51      	ldr	r2, [pc, #324]	; (80050ec <HAL_DMA_Init+0x67c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d045      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a50      	ldr	r2, [pc, #320]	; (80050f0 <HAL_DMA_Init+0x680>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d040      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a4e      	ldr	r2, [pc, #312]	; (80050f4 <HAL_DMA_Init+0x684>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d03b      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a4d      	ldr	r2, [pc, #308]	; (80050f8 <HAL_DMA_Init+0x688>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d036      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a4b      	ldr	r2, [pc, #300]	; (80050fc <HAL_DMA_Init+0x68c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d031      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a4a      	ldr	r2, [pc, #296]	; (8005100 <HAL_DMA_Init+0x690>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d02c      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a48      	ldr	r2, [pc, #288]	; (8005104 <HAL_DMA_Init+0x694>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d027      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a47      	ldr	r2, [pc, #284]	; (8005108 <HAL_DMA_Init+0x698>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d022      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a45      	ldr	r2, [pc, #276]	; (800510c <HAL_DMA_Init+0x69c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d01d      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a44      	ldr	r2, [pc, #272]	; (8005110 <HAL_DMA_Init+0x6a0>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d018      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a42      	ldr	r2, [pc, #264]	; (8005114 <HAL_DMA_Init+0x6a4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d013      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a41      	ldr	r2, [pc, #260]	; (8005118 <HAL_DMA_Init+0x6a8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d00e      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a3f      	ldr	r2, [pc, #252]	; (800511c <HAL_DMA_Init+0x6ac>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d009      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a3e      	ldr	r2, [pc, #248]	; (8005120 <HAL_DMA_Init+0x6b0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d004      	beq.n	8005036 <HAL_DMA_Init+0x5c6>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a3c      	ldr	r2, [pc, #240]	; (8005124 <HAL_DMA_Init+0x6b4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d101      	bne.n	800503a <HAL_DMA_Init+0x5ca>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <HAL_DMA_Init+0x5cc>
 800503a:	2300      	movs	r3, #0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d032      	beq.n	80050a6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f002 fa41 	bl	80074c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	2b80      	cmp	r3, #128	; 0x80
 800504c:	d102      	bne.n	8005054 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005068:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d010      	beq.n	8005094 <HAL_DMA_Init+0x624>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b08      	cmp	r3, #8
 8005078:	d80c      	bhi.n	8005094 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f002 fabe 	bl	80075fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005090:	605a      	str	r2, [r3, #4]
 8005092:	e008      	b.n	80050a6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	a7fdabf8 	.word	0xa7fdabf8
 80050c4:	cccccccd 	.word	0xcccccccd
 80050c8:	40020010 	.word	0x40020010
 80050cc:	40020028 	.word	0x40020028
 80050d0:	40020040 	.word	0x40020040
 80050d4:	40020058 	.word	0x40020058
 80050d8:	40020070 	.word	0x40020070
 80050dc:	40020088 	.word	0x40020088
 80050e0:	400200a0 	.word	0x400200a0
 80050e4:	400200b8 	.word	0x400200b8
 80050e8:	40020410 	.word	0x40020410
 80050ec:	40020428 	.word	0x40020428
 80050f0:	40020440 	.word	0x40020440
 80050f4:	40020458 	.word	0x40020458
 80050f8:	40020470 	.word	0x40020470
 80050fc:	40020488 	.word	0x40020488
 8005100:	400204a0 	.word	0x400204a0
 8005104:	400204b8 	.word	0x400204b8
 8005108:	58025408 	.word	0x58025408
 800510c:	5802541c 	.word	0x5802541c
 8005110:	58025430 	.word	0x58025430
 8005114:	58025444 	.word	0x58025444
 8005118:	58025458 	.word	0x58025458
 800511c:	5802546c 	.word	0x5802546c
 8005120:	58025480 	.word	0x58025480
 8005124:	58025494 	.word	0x58025494

08005128 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e226      	b.n	8005592 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <HAL_DMA_Start_IT+0x2a>
 800514e:	2302      	movs	r3, #2
 8005150:	e21f      	b.n	8005592 <HAL_DMA_Start_IT+0x46a>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b01      	cmp	r3, #1
 8005164:	f040 820a 	bne.w	800557c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a68      	ldr	r2, [pc, #416]	; (800531c <HAL_DMA_Start_IT+0x1f4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d04a      	beq.n	8005216 <HAL_DMA_Start_IT+0xee>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a66      	ldr	r2, [pc, #408]	; (8005320 <HAL_DMA_Start_IT+0x1f8>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d045      	beq.n	8005216 <HAL_DMA_Start_IT+0xee>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a65      	ldr	r2, [pc, #404]	; (8005324 <HAL_DMA_Start_IT+0x1fc>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d040      	beq.n	8005216 <HAL_DMA_Start_IT+0xee>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a63      	ldr	r2, [pc, #396]	; (8005328 <HAL_DMA_Start_IT+0x200>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d03b      	beq.n	8005216 <HAL_DMA_Start_IT+0xee>
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a62      	ldr	r2, [pc, #392]	; (800532c <HAL_DMA_Start_IT+0x204>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d036      	beq.n	8005216 <HAL_DMA_Start_IT+0xee>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a60      	ldr	r2, [pc, #384]	; (8005330 <HAL_DMA_Start_IT+0x208>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d031      	beq.n	8005216 <HAL_DMA_Start_IT+0xee>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a5f      	ldr	r2, [pc, #380]	; (8005334 <HAL_DMA_Start_IT+0x20c>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d02c      	beq.n	8005216 <HAL_DMA_Start_IT+0xee>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a5d      	ldr	r2, [pc, #372]	; (8005338 <HAL_DMA_Start_IT+0x210>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d027      	beq.n	8005216 <HAL_DMA_Start_IT+0xee>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a5c      	ldr	r2, [pc, #368]	; (800533c <HAL_DMA_Start_IT+0x214>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d022      	beq.n	8005216 <HAL_DMA_Start_IT+0xee>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a5a      	ldr	r2, [pc, #360]	; (8005340 <HAL_DMA_Start_IT+0x218>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d01d      	beq.n	8005216 <HAL_DMA_Start_IT+0xee>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a59      	ldr	r2, [pc, #356]	; (8005344 <HAL_DMA_Start_IT+0x21c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d018      	beq.n	8005216 <HAL_DMA_Start_IT+0xee>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a57      	ldr	r2, [pc, #348]	; (8005348 <HAL_DMA_Start_IT+0x220>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d013      	beq.n	8005216 <HAL_DMA_Start_IT+0xee>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a56      	ldr	r2, [pc, #344]	; (800534c <HAL_DMA_Start_IT+0x224>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00e      	beq.n	8005216 <HAL_DMA_Start_IT+0xee>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a54      	ldr	r2, [pc, #336]	; (8005350 <HAL_DMA_Start_IT+0x228>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d009      	beq.n	8005216 <HAL_DMA_Start_IT+0xee>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a53      	ldr	r2, [pc, #332]	; (8005354 <HAL_DMA_Start_IT+0x22c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d004      	beq.n	8005216 <HAL_DMA_Start_IT+0xee>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a51      	ldr	r2, [pc, #324]	; (8005358 <HAL_DMA_Start_IT+0x230>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d108      	bne.n	8005228 <HAL_DMA_Start_IT+0x100>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0201 	bic.w	r2, r2, #1
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e007      	b.n	8005238 <HAL_DMA_Start_IT+0x110>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0201 	bic.w	r2, r2, #1
 8005236:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f001 fe68 	bl	8006f14 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a34      	ldr	r2, [pc, #208]	; (800531c <HAL_DMA_Start_IT+0x1f4>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d04a      	beq.n	80052e4 <HAL_DMA_Start_IT+0x1bc>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a33      	ldr	r2, [pc, #204]	; (8005320 <HAL_DMA_Start_IT+0x1f8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d045      	beq.n	80052e4 <HAL_DMA_Start_IT+0x1bc>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a31      	ldr	r2, [pc, #196]	; (8005324 <HAL_DMA_Start_IT+0x1fc>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d040      	beq.n	80052e4 <HAL_DMA_Start_IT+0x1bc>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a30      	ldr	r2, [pc, #192]	; (8005328 <HAL_DMA_Start_IT+0x200>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d03b      	beq.n	80052e4 <HAL_DMA_Start_IT+0x1bc>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a2e      	ldr	r2, [pc, #184]	; (800532c <HAL_DMA_Start_IT+0x204>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d036      	beq.n	80052e4 <HAL_DMA_Start_IT+0x1bc>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a2d      	ldr	r2, [pc, #180]	; (8005330 <HAL_DMA_Start_IT+0x208>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d031      	beq.n	80052e4 <HAL_DMA_Start_IT+0x1bc>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a2b      	ldr	r2, [pc, #172]	; (8005334 <HAL_DMA_Start_IT+0x20c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d02c      	beq.n	80052e4 <HAL_DMA_Start_IT+0x1bc>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a2a      	ldr	r2, [pc, #168]	; (8005338 <HAL_DMA_Start_IT+0x210>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d027      	beq.n	80052e4 <HAL_DMA_Start_IT+0x1bc>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a28      	ldr	r2, [pc, #160]	; (800533c <HAL_DMA_Start_IT+0x214>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d022      	beq.n	80052e4 <HAL_DMA_Start_IT+0x1bc>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a27      	ldr	r2, [pc, #156]	; (8005340 <HAL_DMA_Start_IT+0x218>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d01d      	beq.n	80052e4 <HAL_DMA_Start_IT+0x1bc>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a25      	ldr	r2, [pc, #148]	; (8005344 <HAL_DMA_Start_IT+0x21c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d018      	beq.n	80052e4 <HAL_DMA_Start_IT+0x1bc>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a24      	ldr	r2, [pc, #144]	; (8005348 <HAL_DMA_Start_IT+0x220>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d013      	beq.n	80052e4 <HAL_DMA_Start_IT+0x1bc>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a22      	ldr	r2, [pc, #136]	; (800534c <HAL_DMA_Start_IT+0x224>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00e      	beq.n	80052e4 <HAL_DMA_Start_IT+0x1bc>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a21      	ldr	r2, [pc, #132]	; (8005350 <HAL_DMA_Start_IT+0x228>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d009      	beq.n	80052e4 <HAL_DMA_Start_IT+0x1bc>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1f      	ldr	r2, [pc, #124]	; (8005354 <HAL_DMA_Start_IT+0x22c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d004      	beq.n	80052e4 <HAL_DMA_Start_IT+0x1bc>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1e      	ldr	r2, [pc, #120]	; (8005358 <HAL_DMA_Start_IT+0x230>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d101      	bne.n	80052e8 <HAL_DMA_Start_IT+0x1c0>
 80052e4:	2301      	movs	r3, #1
 80052e6:	e000      	b.n	80052ea <HAL_DMA_Start_IT+0x1c2>
 80052e8:	2300      	movs	r3, #0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d036      	beq.n	800535c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f023 021e 	bic.w	r2, r3, #30
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0216 	orr.w	r2, r2, #22
 8005300:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	2b00      	cmp	r3, #0
 8005308:	d03e      	beq.n	8005388 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0208 	orr.w	r2, r2, #8
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	e035      	b.n	8005388 <HAL_DMA_Start_IT+0x260>
 800531c:	40020010 	.word	0x40020010
 8005320:	40020028 	.word	0x40020028
 8005324:	40020040 	.word	0x40020040
 8005328:	40020058 	.word	0x40020058
 800532c:	40020070 	.word	0x40020070
 8005330:	40020088 	.word	0x40020088
 8005334:	400200a0 	.word	0x400200a0
 8005338:	400200b8 	.word	0x400200b8
 800533c:	40020410 	.word	0x40020410
 8005340:	40020428 	.word	0x40020428
 8005344:	40020440 	.word	0x40020440
 8005348:	40020458 	.word	0x40020458
 800534c:	40020470 	.word	0x40020470
 8005350:	40020488 	.word	0x40020488
 8005354:	400204a0 	.word	0x400204a0
 8005358:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f023 020e 	bic.w	r2, r3, #14
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 020a 	orr.w	r2, r2, #10
 800536e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d007      	beq.n	8005388 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f042 0204 	orr.w	r2, r2, #4
 8005386:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a83      	ldr	r2, [pc, #524]	; (800559c <HAL_DMA_Start_IT+0x474>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d072      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a82      	ldr	r2, [pc, #520]	; (80055a0 <HAL_DMA_Start_IT+0x478>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d06d      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a80      	ldr	r2, [pc, #512]	; (80055a4 <HAL_DMA_Start_IT+0x47c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d068      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a7f      	ldr	r2, [pc, #508]	; (80055a8 <HAL_DMA_Start_IT+0x480>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d063      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a7d      	ldr	r2, [pc, #500]	; (80055ac <HAL_DMA_Start_IT+0x484>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d05e      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a7c      	ldr	r2, [pc, #496]	; (80055b0 <HAL_DMA_Start_IT+0x488>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d059      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a7a      	ldr	r2, [pc, #488]	; (80055b4 <HAL_DMA_Start_IT+0x48c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d054      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a79      	ldr	r2, [pc, #484]	; (80055b8 <HAL_DMA_Start_IT+0x490>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d04f      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a77      	ldr	r2, [pc, #476]	; (80055bc <HAL_DMA_Start_IT+0x494>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d04a      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a76      	ldr	r2, [pc, #472]	; (80055c0 <HAL_DMA_Start_IT+0x498>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d045      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a74      	ldr	r2, [pc, #464]	; (80055c4 <HAL_DMA_Start_IT+0x49c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d040      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a73      	ldr	r2, [pc, #460]	; (80055c8 <HAL_DMA_Start_IT+0x4a0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d03b      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a71      	ldr	r2, [pc, #452]	; (80055cc <HAL_DMA_Start_IT+0x4a4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d036      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a70      	ldr	r2, [pc, #448]	; (80055d0 <HAL_DMA_Start_IT+0x4a8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d031      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a6e      	ldr	r2, [pc, #440]	; (80055d4 <HAL_DMA_Start_IT+0x4ac>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d02c      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a6d      	ldr	r2, [pc, #436]	; (80055d8 <HAL_DMA_Start_IT+0x4b0>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d027      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a6b      	ldr	r2, [pc, #428]	; (80055dc <HAL_DMA_Start_IT+0x4b4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d022      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a6a      	ldr	r2, [pc, #424]	; (80055e0 <HAL_DMA_Start_IT+0x4b8>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d01d      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a68      	ldr	r2, [pc, #416]	; (80055e4 <HAL_DMA_Start_IT+0x4bc>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d018      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a67      	ldr	r2, [pc, #412]	; (80055e8 <HAL_DMA_Start_IT+0x4c0>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a65      	ldr	r2, [pc, #404]	; (80055ec <HAL_DMA_Start_IT+0x4c4>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00e      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a64      	ldr	r2, [pc, #400]	; (80055f0 <HAL_DMA_Start_IT+0x4c8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d009      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a62      	ldr	r2, [pc, #392]	; (80055f4 <HAL_DMA_Start_IT+0x4cc>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d004      	beq.n	8005478 <HAL_DMA_Start_IT+0x350>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a61      	ldr	r2, [pc, #388]	; (80055f8 <HAL_DMA_Start_IT+0x4d0>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d101      	bne.n	800547c <HAL_DMA_Start_IT+0x354>
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <HAL_DMA_Start_IT+0x356>
 800547c:	2300      	movs	r3, #0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d01a      	beq.n	80054b8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800549a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800549e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d007      	beq.n	80054b8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a37      	ldr	r2, [pc, #220]	; (800559c <HAL_DMA_Start_IT+0x474>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d04a      	beq.n	8005558 <HAL_DMA_Start_IT+0x430>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a36      	ldr	r2, [pc, #216]	; (80055a0 <HAL_DMA_Start_IT+0x478>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d045      	beq.n	8005558 <HAL_DMA_Start_IT+0x430>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a34      	ldr	r2, [pc, #208]	; (80055a4 <HAL_DMA_Start_IT+0x47c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d040      	beq.n	8005558 <HAL_DMA_Start_IT+0x430>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a33      	ldr	r2, [pc, #204]	; (80055a8 <HAL_DMA_Start_IT+0x480>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d03b      	beq.n	8005558 <HAL_DMA_Start_IT+0x430>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a31      	ldr	r2, [pc, #196]	; (80055ac <HAL_DMA_Start_IT+0x484>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d036      	beq.n	8005558 <HAL_DMA_Start_IT+0x430>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a30      	ldr	r2, [pc, #192]	; (80055b0 <HAL_DMA_Start_IT+0x488>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d031      	beq.n	8005558 <HAL_DMA_Start_IT+0x430>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a2e      	ldr	r2, [pc, #184]	; (80055b4 <HAL_DMA_Start_IT+0x48c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d02c      	beq.n	8005558 <HAL_DMA_Start_IT+0x430>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a2d      	ldr	r2, [pc, #180]	; (80055b8 <HAL_DMA_Start_IT+0x490>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d027      	beq.n	8005558 <HAL_DMA_Start_IT+0x430>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a2b      	ldr	r2, [pc, #172]	; (80055bc <HAL_DMA_Start_IT+0x494>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d022      	beq.n	8005558 <HAL_DMA_Start_IT+0x430>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a2a      	ldr	r2, [pc, #168]	; (80055c0 <HAL_DMA_Start_IT+0x498>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d01d      	beq.n	8005558 <HAL_DMA_Start_IT+0x430>
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a28      	ldr	r2, [pc, #160]	; (80055c4 <HAL_DMA_Start_IT+0x49c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d018      	beq.n	8005558 <HAL_DMA_Start_IT+0x430>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a27      	ldr	r2, [pc, #156]	; (80055c8 <HAL_DMA_Start_IT+0x4a0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d013      	beq.n	8005558 <HAL_DMA_Start_IT+0x430>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a25      	ldr	r2, [pc, #148]	; (80055cc <HAL_DMA_Start_IT+0x4a4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d00e      	beq.n	8005558 <HAL_DMA_Start_IT+0x430>
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a24      	ldr	r2, [pc, #144]	; (80055d0 <HAL_DMA_Start_IT+0x4a8>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d009      	beq.n	8005558 <HAL_DMA_Start_IT+0x430>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a22      	ldr	r2, [pc, #136]	; (80055d4 <HAL_DMA_Start_IT+0x4ac>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d004      	beq.n	8005558 <HAL_DMA_Start_IT+0x430>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a21      	ldr	r2, [pc, #132]	; (80055d8 <HAL_DMA_Start_IT+0x4b0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d108      	bne.n	800556a <HAL_DMA_Start_IT+0x442>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0201 	orr.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	e012      	b.n	8005590 <HAL_DMA_Start_IT+0x468>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0201 	orr.w	r2, r2, #1
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	e009      	b.n	8005590 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005582:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005590:	7dfb      	ldrb	r3, [r7, #23]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	40020010 	.word	0x40020010
 80055a0:	40020028 	.word	0x40020028
 80055a4:	40020040 	.word	0x40020040
 80055a8:	40020058 	.word	0x40020058
 80055ac:	40020070 	.word	0x40020070
 80055b0:	40020088 	.word	0x40020088
 80055b4:	400200a0 	.word	0x400200a0
 80055b8:	400200b8 	.word	0x400200b8
 80055bc:	40020410 	.word	0x40020410
 80055c0:	40020428 	.word	0x40020428
 80055c4:	40020440 	.word	0x40020440
 80055c8:	40020458 	.word	0x40020458
 80055cc:	40020470 	.word	0x40020470
 80055d0:	40020488 	.word	0x40020488
 80055d4:	400204a0 	.word	0x400204a0
 80055d8:	400204b8 	.word	0x400204b8
 80055dc:	58025408 	.word	0x58025408
 80055e0:	5802541c 	.word	0x5802541c
 80055e4:	58025430 	.word	0x58025430
 80055e8:	58025444 	.word	0x58025444
 80055ec:	58025458 	.word	0x58025458
 80055f0:	5802546c 	.word	0x5802546c
 80055f4:	58025480 	.word	0x58025480
 80055f8:	58025494 	.word	0x58025494

080055fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005604:	f7fe ff02 	bl	800440c <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e2dc      	b.n	8005bce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d008      	beq.n	8005632 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2280      	movs	r2, #128	; 0x80
 8005624:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e2cd      	b.n	8005bce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a76      	ldr	r2, [pc, #472]	; (8005810 <HAL_DMA_Abort+0x214>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d04a      	beq.n	80056d2 <HAL_DMA_Abort+0xd6>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a74      	ldr	r2, [pc, #464]	; (8005814 <HAL_DMA_Abort+0x218>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d045      	beq.n	80056d2 <HAL_DMA_Abort+0xd6>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a73      	ldr	r2, [pc, #460]	; (8005818 <HAL_DMA_Abort+0x21c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d040      	beq.n	80056d2 <HAL_DMA_Abort+0xd6>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a71      	ldr	r2, [pc, #452]	; (800581c <HAL_DMA_Abort+0x220>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d03b      	beq.n	80056d2 <HAL_DMA_Abort+0xd6>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a70      	ldr	r2, [pc, #448]	; (8005820 <HAL_DMA_Abort+0x224>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d036      	beq.n	80056d2 <HAL_DMA_Abort+0xd6>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a6e      	ldr	r2, [pc, #440]	; (8005824 <HAL_DMA_Abort+0x228>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d031      	beq.n	80056d2 <HAL_DMA_Abort+0xd6>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a6d      	ldr	r2, [pc, #436]	; (8005828 <HAL_DMA_Abort+0x22c>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d02c      	beq.n	80056d2 <HAL_DMA_Abort+0xd6>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a6b      	ldr	r2, [pc, #428]	; (800582c <HAL_DMA_Abort+0x230>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d027      	beq.n	80056d2 <HAL_DMA_Abort+0xd6>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a6a      	ldr	r2, [pc, #424]	; (8005830 <HAL_DMA_Abort+0x234>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d022      	beq.n	80056d2 <HAL_DMA_Abort+0xd6>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a68      	ldr	r2, [pc, #416]	; (8005834 <HAL_DMA_Abort+0x238>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d01d      	beq.n	80056d2 <HAL_DMA_Abort+0xd6>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a67      	ldr	r2, [pc, #412]	; (8005838 <HAL_DMA_Abort+0x23c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d018      	beq.n	80056d2 <HAL_DMA_Abort+0xd6>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a65      	ldr	r2, [pc, #404]	; (800583c <HAL_DMA_Abort+0x240>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d013      	beq.n	80056d2 <HAL_DMA_Abort+0xd6>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a64      	ldr	r2, [pc, #400]	; (8005840 <HAL_DMA_Abort+0x244>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d00e      	beq.n	80056d2 <HAL_DMA_Abort+0xd6>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a62      	ldr	r2, [pc, #392]	; (8005844 <HAL_DMA_Abort+0x248>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d009      	beq.n	80056d2 <HAL_DMA_Abort+0xd6>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a61      	ldr	r2, [pc, #388]	; (8005848 <HAL_DMA_Abort+0x24c>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d004      	beq.n	80056d2 <HAL_DMA_Abort+0xd6>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a5f      	ldr	r2, [pc, #380]	; (800584c <HAL_DMA_Abort+0x250>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d101      	bne.n	80056d6 <HAL_DMA_Abort+0xda>
 80056d2:	2301      	movs	r3, #1
 80056d4:	e000      	b.n	80056d8 <HAL_DMA_Abort+0xdc>
 80056d6:	2300      	movs	r3, #0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d013      	beq.n	8005704 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 021e 	bic.w	r2, r2, #30
 80056ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695a      	ldr	r2, [r3, #20]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	617b      	str	r3, [r7, #20]
 8005702:	e00a      	b.n	800571a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 020e 	bic.w	r2, r2, #14
 8005712:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a3c      	ldr	r2, [pc, #240]	; (8005810 <HAL_DMA_Abort+0x214>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d072      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a3a      	ldr	r2, [pc, #232]	; (8005814 <HAL_DMA_Abort+0x218>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d06d      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a39      	ldr	r2, [pc, #228]	; (8005818 <HAL_DMA_Abort+0x21c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d068      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a37      	ldr	r2, [pc, #220]	; (800581c <HAL_DMA_Abort+0x220>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d063      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a36      	ldr	r2, [pc, #216]	; (8005820 <HAL_DMA_Abort+0x224>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d05e      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a34      	ldr	r2, [pc, #208]	; (8005824 <HAL_DMA_Abort+0x228>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d059      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a33      	ldr	r2, [pc, #204]	; (8005828 <HAL_DMA_Abort+0x22c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d054      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a31      	ldr	r2, [pc, #196]	; (800582c <HAL_DMA_Abort+0x230>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d04f      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a30      	ldr	r2, [pc, #192]	; (8005830 <HAL_DMA_Abort+0x234>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d04a      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a2e      	ldr	r2, [pc, #184]	; (8005834 <HAL_DMA_Abort+0x238>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d045      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a2d      	ldr	r2, [pc, #180]	; (8005838 <HAL_DMA_Abort+0x23c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d040      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a2b      	ldr	r2, [pc, #172]	; (800583c <HAL_DMA_Abort+0x240>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d03b      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a2a      	ldr	r2, [pc, #168]	; (8005840 <HAL_DMA_Abort+0x244>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d036      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a28      	ldr	r2, [pc, #160]	; (8005844 <HAL_DMA_Abort+0x248>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d031      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a27      	ldr	r2, [pc, #156]	; (8005848 <HAL_DMA_Abort+0x24c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d02c      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a25      	ldr	r2, [pc, #148]	; (800584c <HAL_DMA_Abort+0x250>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d027      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a24      	ldr	r2, [pc, #144]	; (8005850 <HAL_DMA_Abort+0x254>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d022      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a22      	ldr	r2, [pc, #136]	; (8005854 <HAL_DMA_Abort+0x258>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d01d      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a21      	ldr	r2, [pc, #132]	; (8005858 <HAL_DMA_Abort+0x25c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d018      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1f      	ldr	r2, [pc, #124]	; (800585c <HAL_DMA_Abort+0x260>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d013      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a1e      	ldr	r2, [pc, #120]	; (8005860 <HAL_DMA_Abort+0x264>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00e      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a1c      	ldr	r2, [pc, #112]	; (8005864 <HAL_DMA_Abort+0x268>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d009      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1b      	ldr	r2, [pc, #108]	; (8005868 <HAL_DMA_Abort+0x26c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d004      	beq.n	800580a <HAL_DMA_Abort+0x20e>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a19      	ldr	r2, [pc, #100]	; (800586c <HAL_DMA_Abort+0x270>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d132      	bne.n	8005870 <HAL_DMA_Abort+0x274>
 800580a:	2301      	movs	r3, #1
 800580c:	e031      	b.n	8005872 <HAL_DMA_Abort+0x276>
 800580e:	bf00      	nop
 8005810:	40020010 	.word	0x40020010
 8005814:	40020028 	.word	0x40020028
 8005818:	40020040 	.word	0x40020040
 800581c:	40020058 	.word	0x40020058
 8005820:	40020070 	.word	0x40020070
 8005824:	40020088 	.word	0x40020088
 8005828:	400200a0 	.word	0x400200a0
 800582c:	400200b8 	.word	0x400200b8
 8005830:	40020410 	.word	0x40020410
 8005834:	40020428 	.word	0x40020428
 8005838:	40020440 	.word	0x40020440
 800583c:	40020458 	.word	0x40020458
 8005840:	40020470 	.word	0x40020470
 8005844:	40020488 	.word	0x40020488
 8005848:	400204a0 	.word	0x400204a0
 800584c:	400204b8 	.word	0x400204b8
 8005850:	58025408 	.word	0x58025408
 8005854:	5802541c 	.word	0x5802541c
 8005858:	58025430 	.word	0x58025430
 800585c:	58025444 	.word	0x58025444
 8005860:	58025458 	.word	0x58025458
 8005864:	5802546c 	.word	0x5802546c
 8005868:	58025480 	.word	0x58025480
 800586c:	58025494 	.word	0x58025494
 8005870:	2300      	movs	r3, #0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d007      	beq.n	8005886 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005884:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a6d      	ldr	r2, [pc, #436]	; (8005a40 <HAL_DMA_Abort+0x444>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d04a      	beq.n	8005926 <HAL_DMA_Abort+0x32a>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a6b      	ldr	r2, [pc, #428]	; (8005a44 <HAL_DMA_Abort+0x448>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d045      	beq.n	8005926 <HAL_DMA_Abort+0x32a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a6a      	ldr	r2, [pc, #424]	; (8005a48 <HAL_DMA_Abort+0x44c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d040      	beq.n	8005926 <HAL_DMA_Abort+0x32a>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a68      	ldr	r2, [pc, #416]	; (8005a4c <HAL_DMA_Abort+0x450>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d03b      	beq.n	8005926 <HAL_DMA_Abort+0x32a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a67      	ldr	r2, [pc, #412]	; (8005a50 <HAL_DMA_Abort+0x454>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d036      	beq.n	8005926 <HAL_DMA_Abort+0x32a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a65      	ldr	r2, [pc, #404]	; (8005a54 <HAL_DMA_Abort+0x458>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d031      	beq.n	8005926 <HAL_DMA_Abort+0x32a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a64      	ldr	r2, [pc, #400]	; (8005a58 <HAL_DMA_Abort+0x45c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d02c      	beq.n	8005926 <HAL_DMA_Abort+0x32a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a62      	ldr	r2, [pc, #392]	; (8005a5c <HAL_DMA_Abort+0x460>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d027      	beq.n	8005926 <HAL_DMA_Abort+0x32a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a61      	ldr	r2, [pc, #388]	; (8005a60 <HAL_DMA_Abort+0x464>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d022      	beq.n	8005926 <HAL_DMA_Abort+0x32a>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a5f      	ldr	r2, [pc, #380]	; (8005a64 <HAL_DMA_Abort+0x468>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d01d      	beq.n	8005926 <HAL_DMA_Abort+0x32a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a5e      	ldr	r2, [pc, #376]	; (8005a68 <HAL_DMA_Abort+0x46c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d018      	beq.n	8005926 <HAL_DMA_Abort+0x32a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a5c      	ldr	r2, [pc, #368]	; (8005a6c <HAL_DMA_Abort+0x470>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d013      	beq.n	8005926 <HAL_DMA_Abort+0x32a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a5b      	ldr	r2, [pc, #364]	; (8005a70 <HAL_DMA_Abort+0x474>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00e      	beq.n	8005926 <HAL_DMA_Abort+0x32a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a59      	ldr	r2, [pc, #356]	; (8005a74 <HAL_DMA_Abort+0x478>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d009      	beq.n	8005926 <HAL_DMA_Abort+0x32a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a58      	ldr	r2, [pc, #352]	; (8005a78 <HAL_DMA_Abort+0x47c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_DMA_Abort+0x32a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a56      	ldr	r2, [pc, #344]	; (8005a7c <HAL_DMA_Abort+0x480>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d108      	bne.n	8005938 <HAL_DMA_Abort+0x33c>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0201 	bic.w	r2, r2, #1
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	e007      	b.n	8005948 <HAL_DMA_Abort+0x34c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0201 	bic.w	r2, r2, #1
 8005946:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005948:	e013      	b.n	8005972 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800594a:	f7fe fd5f 	bl	800440c <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b05      	cmp	r3, #5
 8005956:	d90c      	bls.n	8005972 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2220      	movs	r2, #32
 800595c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2203      	movs	r2, #3
 8005962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e12d      	b.n	8005bce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e5      	bne.n	800594a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a2f      	ldr	r2, [pc, #188]	; (8005a40 <HAL_DMA_Abort+0x444>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d04a      	beq.n	8005a1e <HAL_DMA_Abort+0x422>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a2d      	ldr	r2, [pc, #180]	; (8005a44 <HAL_DMA_Abort+0x448>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d045      	beq.n	8005a1e <HAL_DMA_Abort+0x422>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a2c      	ldr	r2, [pc, #176]	; (8005a48 <HAL_DMA_Abort+0x44c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d040      	beq.n	8005a1e <HAL_DMA_Abort+0x422>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <HAL_DMA_Abort+0x450>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d03b      	beq.n	8005a1e <HAL_DMA_Abort+0x422>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a29      	ldr	r2, [pc, #164]	; (8005a50 <HAL_DMA_Abort+0x454>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d036      	beq.n	8005a1e <HAL_DMA_Abort+0x422>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a27      	ldr	r2, [pc, #156]	; (8005a54 <HAL_DMA_Abort+0x458>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d031      	beq.n	8005a1e <HAL_DMA_Abort+0x422>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a26      	ldr	r2, [pc, #152]	; (8005a58 <HAL_DMA_Abort+0x45c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d02c      	beq.n	8005a1e <HAL_DMA_Abort+0x422>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a24      	ldr	r2, [pc, #144]	; (8005a5c <HAL_DMA_Abort+0x460>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d027      	beq.n	8005a1e <HAL_DMA_Abort+0x422>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a23      	ldr	r2, [pc, #140]	; (8005a60 <HAL_DMA_Abort+0x464>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d022      	beq.n	8005a1e <HAL_DMA_Abort+0x422>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a21      	ldr	r2, [pc, #132]	; (8005a64 <HAL_DMA_Abort+0x468>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d01d      	beq.n	8005a1e <HAL_DMA_Abort+0x422>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a20      	ldr	r2, [pc, #128]	; (8005a68 <HAL_DMA_Abort+0x46c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d018      	beq.n	8005a1e <HAL_DMA_Abort+0x422>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1e      	ldr	r2, [pc, #120]	; (8005a6c <HAL_DMA_Abort+0x470>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d013      	beq.n	8005a1e <HAL_DMA_Abort+0x422>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a1d      	ldr	r2, [pc, #116]	; (8005a70 <HAL_DMA_Abort+0x474>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d00e      	beq.n	8005a1e <HAL_DMA_Abort+0x422>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a1b      	ldr	r2, [pc, #108]	; (8005a74 <HAL_DMA_Abort+0x478>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d009      	beq.n	8005a1e <HAL_DMA_Abort+0x422>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a1a      	ldr	r2, [pc, #104]	; (8005a78 <HAL_DMA_Abort+0x47c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d004      	beq.n	8005a1e <HAL_DMA_Abort+0x422>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a18      	ldr	r2, [pc, #96]	; (8005a7c <HAL_DMA_Abort+0x480>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d101      	bne.n	8005a22 <HAL_DMA_Abort+0x426>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e000      	b.n	8005a24 <HAL_DMA_Abort+0x428>
 8005a22:	2300      	movs	r3, #0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d02b      	beq.n	8005a80 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a32:	f003 031f 	and.w	r3, r3, #31
 8005a36:	223f      	movs	r2, #63	; 0x3f
 8005a38:	409a      	lsls	r2, r3
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	609a      	str	r2, [r3, #8]
 8005a3e:	e02a      	b.n	8005a96 <HAL_DMA_Abort+0x49a>
 8005a40:	40020010 	.word	0x40020010
 8005a44:	40020028 	.word	0x40020028
 8005a48:	40020040 	.word	0x40020040
 8005a4c:	40020058 	.word	0x40020058
 8005a50:	40020070 	.word	0x40020070
 8005a54:	40020088 	.word	0x40020088
 8005a58:	400200a0 	.word	0x400200a0
 8005a5c:	400200b8 	.word	0x400200b8
 8005a60:	40020410 	.word	0x40020410
 8005a64:	40020428 	.word	0x40020428
 8005a68:	40020440 	.word	0x40020440
 8005a6c:	40020458 	.word	0x40020458
 8005a70:	40020470 	.word	0x40020470
 8005a74:	40020488 	.word	0x40020488
 8005a78:	400204a0 	.word	0x400204a0
 8005a7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a84:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a8a:	f003 031f 	and.w	r3, r3, #31
 8005a8e:	2201      	movs	r2, #1
 8005a90:	409a      	lsls	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a4f      	ldr	r2, [pc, #316]	; (8005bd8 <HAL_DMA_Abort+0x5dc>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d072      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a4d      	ldr	r2, [pc, #308]	; (8005bdc <HAL_DMA_Abort+0x5e0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d06d      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a4c      	ldr	r2, [pc, #304]	; (8005be0 <HAL_DMA_Abort+0x5e4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d068      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a4a      	ldr	r2, [pc, #296]	; (8005be4 <HAL_DMA_Abort+0x5e8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d063      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a49      	ldr	r2, [pc, #292]	; (8005be8 <HAL_DMA_Abort+0x5ec>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d05e      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a47      	ldr	r2, [pc, #284]	; (8005bec <HAL_DMA_Abort+0x5f0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d059      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a46      	ldr	r2, [pc, #280]	; (8005bf0 <HAL_DMA_Abort+0x5f4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d054      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a44      	ldr	r2, [pc, #272]	; (8005bf4 <HAL_DMA_Abort+0x5f8>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d04f      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a43      	ldr	r2, [pc, #268]	; (8005bf8 <HAL_DMA_Abort+0x5fc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d04a      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a41      	ldr	r2, [pc, #260]	; (8005bfc <HAL_DMA_Abort+0x600>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d045      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a40      	ldr	r2, [pc, #256]	; (8005c00 <HAL_DMA_Abort+0x604>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d040      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a3e      	ldr	r2, [pc, #248]	; (8005c04 <HAL_DMA_Abort+0x608>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d03b      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a3d      	ldr	r2, [pc, #244]	; (8005c08 <HAL_DMA_Abort+0x60c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d036      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a3b      	ldr	r2, [pc, #236]	; (8005c0c <HAL_DMA_Abort+0x610>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d031      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a3a      	ldr	r2, [pc, #232]	; (8005c10 <HAL_DMA_Abort+0x614>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d02c      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a38      	ldr	r2, [pc, #224]	; (8005c14 <HAL_DMA_Abort+0x618>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d027      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a37      	ldr	r2, [pc, #220]	; (8005c18 <HAL_DMA_Abort+0x61c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d022      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a35      	ldr	r2, [pc, #212]	; (8005c1c <HAL_DMA_Abort+0x620>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d01d      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a34      	ldr	r2, [pc, #208]	; (8005c20 <HAL_DMA_Abort+0x624>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d018      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a32      	ldr	r2, [pc, #200]	; (8005c24 <HAL_DMA_Abort+0x628>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d013      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a31      	ldr	r2, [pc, #196]	; (8005c28 <HAL_DMA_Abort+0x62c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00e      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a2f      	ldr	r2, [pc, #188]	; (8005c2c <HAL_DMA_Abort+0x630>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d009      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a2e      	ldr	r2, [pc, #184]	; (8005c30 <HAL_DMA_Abort+0x634>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d004      	beq.n	8005b86 <HAL_DMA_Abort+0x58a>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a2c      	ldr	r2, [pc, #176]	; (8005c34 <HAL_DMA_Abort+0x638>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d101      	bne.n	8005b8a <HAL_DMA_Abort+0x58e>
 8005b86:	2301      	movs	r3, #1
 8005b88:	e000      	b.n	8005b8c <HAL_DMA_Abort+0x590>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d015      	beq.n	8005bbc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005b98:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00c      	beq.n	8005bbc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bb0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005bba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	40020010 	.word	0x40020010
 8005bdc:	40020028 	.word	0x40020028
 8005be0:	40020040 	.word	0x40020040
 8005be4:	40020058 	.word	0x40020058
 8005be8:	40020070 	.word	0x40020070
 8005bec:	40020088 	.word	0x40020088
 8005bf0:	400200a0 	.word	0x400200a0
 8005bf4:	400200b8 	.word	0x400200b8
 8005bf8:	40020410 	.word	0x40020410
 8005bfc:	40020428 	.word	0x40020428
 8005c00:	40020440 	.word	0x40020440
 8005c04:	40020458 	.word	0x40020458
 8005c08:	40020470 	.word	0x40020470
 8005c0c:	40020488 	.word	0x40020488
 8005c10:	400204a0 	.word	0x400204a0
 8005c14:	400204b8 	.word	0x400204b8
 8005c18:	58025408 	.word	0x58025408
 8005c1c:	5802541c 	.word	0x5802541c
 8005c20:	58025430 	.word	0x58025430
 8005c24:	58025444 	.word	0x58025444
 8005c28:	58025458 	.word	0x58025458
 8005c2c:	5802546c 	.word	0x5802546c
 8005c30:	58025480 	.word	0x58025480
 8005c34:	58025494 	.word	0x58025494

08005c38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e205      	b.n	8006056 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d004      	beq.n	8005c60 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2280      	movs	r2, #128	; 0x80
 8005c5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e1fa      	b.n	8006056 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a8c      	ldr	r2, [pc, #560]	; (8005e98 <HAL_DMA_Abort_IT+0x260>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d04a      	beq.n	8005d00 <HAL_DMA_Abort_IT+0xc8>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a8b      	ldr	r2, [pc, #556]	; (8005e9c <HAL_DMA_Abort_IT+0x264>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d045      	beq.n	8005d00 <HAL_DMA_Abort_IT+0xc8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a89      	ldr	r2, [pc, #548]	; (8005ea0 <HAL_DMA_Abort_IT+0x268>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d040      	beq.n	8005d00 <HAL_DMA_Abort_IT+0xc8>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a88      	ldr	r2, [pc, #544]	; (8005ea4 <HAL_DMA_Abort_IT+0x26c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d03b      	beq.n	8005d00 <HAL_DMA_Abort_IT+0xc8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a86      	ldr	r2, [pc, #536]	; (8005ea8 <HAL_DMA_Abort_IT+0x270>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d036      	beq.n	8005d00 <HAL_DMA_Abort_IT+0xc8>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a85      	ldr	r2, [pc, #532]	; (8005eac <HAL_DMA_Abort_IT+0x274>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d031      	beq.n	8005d00 <HAL_DMA_Abort_IT+0xc8>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a83      	ldr	r2, [pc, #524]	; (8005eb0 <HAL_DMA_Abort_IT+0x278>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d02c      	beq.n	8005d00 <HAL_DMA_Abort_IT+0xc8>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a82      	ldr	r2, [pc, #520]	; (8005eb4 <HAL_DMA_Abort_IT+0x27c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d027      	beq.n	8005d00 <HAL_DMA_Abort_IT+0xc8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a80      	ldr	r2, [pc, #512]	; (8005eb8 <HAL_DMA_Abort_IT+0x280>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d022      	beq.n	8005d00 <HAL_DMA_Abort_IT+0xc8>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a7f      	ldr	r2, [pc, #508]	; (8005ebc <HAL_DMA_Abort_IT+0x284>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d01d      	beq.n	8005d00 <HAL_DMA_Abort_IT+0xc8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a7d      	ldr	r2, [pc, #500]	; (8005ec0 <HAL_DMA_Abort_IT+0x288>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d018      	beq.n	8005d00 <HAL_DMA_Abort_IT+0xc8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a7c      	ldr	r2, [pc, #496]	; (8005ec4 <HAL_DMA_Abort_IT+0x28c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d013      	beq.n	8005d00 <HAL_DMA_Abort_IT+0xc8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a7a      	ldr	r2, [pc, #488]	; (8005ec8 <HAL_DMA_Abort_IT+0x290>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00e      	beq.n	8005d00 <HAL_DMA_Abort_IT+0xc8>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a79      	ldr	r2, [pc, #484]	; (8005ecc <HAL_DMA_Abort_IT+0x294>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d009      	beq.n	8005d00 <HAL_DMA_Abort_IT+0xc8>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a77      	ldr	r2, [pc, #476]	; (8005ed0 <HAL_DMA_Abort_IT+0x298>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d004      	beq.n	8005d00 <HAL_DMA_Abort_IT+0xc8>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a76      	ldr	r2, [pc, #472]	; (8005ed4 <HAL_DMA_Abort_IT+0x29c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d101      	bne.n	8005d04 <HAL_DMA_Abort_IT+0xcc>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <HAL_DMA_Abort_IT+0xce>
 8005d04:	2300      	movs	r3, #0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d065      	beq.n	8005dd6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2204      	movs	r2, #4
 8005d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a60      	ldr	r2, [pc, #384]	; (8005e98 <HAL_DMA_Abort_IT+0x260>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d04a      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x17a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a5e      	ldr	r2, [pc, #376]	; (8005e9c <HAL_DMA_Abort_IT+0x264>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d045      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x17a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a5d      	ldr	r2, [pc, #372]	; (8005ea0 <HAL_DMA_Abort_IT+0x268>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d040      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x17a>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a5b      	ldr	r2, [pc, #364]	; (8005ea4 <HAL_DMA_Abort_IT+0x26c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d03b      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x17a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a5a      	ldr	r2, [pc, #360]	; (8005ea8 <HAL_DMA_Abort_IT+0x270>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d036      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x17a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a58      	ldr	r2, [pc, #352]	; (8005eac <HAL_DMA_Abort_IT+0x274>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d031      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x17a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a57      	ldr	r2, [pc, #348]	; (8005eb0 <HAL_DMA_Abort_IT+0x278>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d02c      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x17a>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a55      	ldr	r2, [pc, #340]	; (8005eb4 <HAL_DMA_Abort_IT+0x27c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d027      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x17a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a54      	ldr	r2, [pc, #336]	; (8005eb8 <HAL_DMA_Abort_IT+0x280>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d022      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x17a>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a52      	ldr	r2, [pc, #328]	; (8005ebc <HAL_DMA_Abort_IT+0x284>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d01d      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x17a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a51      	ldr	r2, [pc, #324]	; (8005ec0 <HAL_DMA_Abort_IT+0x288>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d018      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x17a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a4f      	ldr	r2, [pc, #316]	; (8005ec4 <HAL_DMA_Abort_IT+0x28c>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d013      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x17a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a4e      	ldr	r2, [pc, #312]	; (8005ec8 <HAL_DMA_Abort_IT+0x290>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00e      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x17a>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a4c      	ldr	r2, [pc, #304]	; (8005ecc <HAL_DMA_Abort_IT+0x294>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d009      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x17a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a4b      	ldr	r2, [pc, #300]	; (8005ed0 <HAL_DMA_Abort_IT+0x298>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d004      	beq.n	8005db2 <HAL_DMA_Abort_IT+0x17a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a49      	ldr	r2, [pc, #292]	; (8005ed4 <HAL_DMA_Abort_IT+0x29c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d108      	bne.n	8005dc4 <HAL_DMA_Abort_IT+0x18c>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0201 	bic.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e147      	b.n	8006054 <HAL_DMA_Abort_IT+0x41c>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]
 8005dd4:	e13e      	b.n	8006054 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 020e 	bic.w	r2, r2, #14
 8005de4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a2b      	ldr	r2, [pc, #172]	; (8005e98 <HAL_DMA_Abort_IT+0x260>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d04a      	beq.n	8005e86 <HAL_DMA_Abort_IT+0x24e>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a29      	ldr	r2, [pc, #164]	; (8005e9c <HAL_DMA_Abort_IT+0x264>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d045      	beq.n	8005e86 <HAL_DMA_Abort_IT+0x24e>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a28      	ldr	r2, [pc, #160]	; (8005ea0 <HAL_DMA_Abort_IT+0x268>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d040      	beq.n	8005e86 <HAL_DMA_Abort_IT+0x24e>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a26      	ldr	r2, [pc, #152]	; (8005ea4 <HAL_DMA_Abort_IT+0x26c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d03b      	beq.n	8005e86 <HAL_DMA_Abort_IT+0x24e>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a25      	ldr	r2, [pc, #148]	; (8005ea8 <HAL_DMA_Abort_IT+0x270>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d036      	beq.n	8005e86 <HAL_DMA_Abort_IT+0x24e>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a23      	ldr	r2, [pc, #140]	; (8005eac <HAL_DMA_Abort_IT+0x274>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d031      	beq.n	8005e86 <HAL_DMA_Abort_IT+0x24e>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a22      	ldr	r2, [pc, #136]	; (8005eb0 <HAL_DMA_Abort_IT+0x278>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d02c      	beq.n	8005e86 <HAL_DMA_Abort_IT+0x24e>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a20      	ldr	r2, [pc, #128]	; (8005eb4 <HAL_DMA_Abort_IT+0x27c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d027      	beq.n	8005e86 <HAL_DMA_Abort_IT+0x24e>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a1f      	ldr	r2, [pc, #124]	; (8005eb8 <HAL_DMA_Abort_IT+0x280>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d022      	beq.n	8005e86 <HAL_DMA_Abort_IT+0x24e>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a1d      	ldr	r2, [pc, #116]	; (8005ebc <HAL_DMA_Abort_IT+0x284>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d01d      	beq.n	8005e86 <HAL_DMA_Abort_IT+0x24e>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a1c      	ldr	r2, [pc, #112]	; (8005ec0 <HAL_DMA_Abort_IT+0x288>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d018      	beq.n	8005e86 <HAL_DMA_Abort_IT+0x24e>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a1a      	ldr	r2, [pc, #104]	; (8005ec4 <HAL_DMA_Abort_IT+0x28c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d013      	beq.n	8005e86 <HAL_DMA_Abort_IT+0x24e>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a19      	ldr	r2, [pc, #100]	; (8005ec8 <HAL_DMA_Abort_IT+0x290>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00e      	beq.n	8005e86 <HAL_DMA_Abort_IT+0x24e>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a17      	ldr	r2, [pc, #92]	; (8005ecc <HAL_DMA_Abort_IT+0x294>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d009      	beq.n	8005e86 <HAL_DMA_Abort_IT+0x24e>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a16      	ldr	r2, [pc, #88]	; (8005ed0 <HAL_DMA_Abort_IT+0x298>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d004      	beq.n	8005e86 <HAL_DMA_Abort_IT+0x24e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a14      	ldr	r2, [pc, #80]	; (8005ed4 <HAL_DMA_Abort_IT+0x29c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d128      	bne.n	8005ed8 <HAL_DMA_Abort_IT+0x2a0>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0201 	bic.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	e027      	b.n	8005ee8 <HAL_DMA_Abort_IT+0x2b0>
 8005e98:	40020010 	.word	0x40020010
 8005e9c:	40020028 	.word	0x40020028
 8005ea0:	40020040 	.word	0x40020040
 8005ea4:	40020058 	.word	0x40020058
 8005ea8:	40020070 	.word	0x40020070
 8005eac:	40020088 	.word	0x40020088
 8005eb0:	400200a0 	.word	0x400200a0
 8005eb4:	400200b8 	.word	0x400200b8
 8005eb8:	40020410 	.word	0x40020410
 8005ebc:	40020428 	.word	0x40020428
 8005ec0:	40020440 	.word	0x40020440
 8005ec4:	40020458 	.word	0x40020458
 8005ec8:	40020470 	.word	0x40020470
 8005ecc:	40020488 	.word	0x40020488
 8005ed0:	400204a0 	.word	0x400204a0
 8005ed4:	400204b8 	.word	0x400204b8
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0201 	bic.w	r2, r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a5c      	ldr	r2, [pc, #368]	; (8006060 <HAL_DMA_Abort_IT+0x428>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d072      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a5b      	ldr	r2, [pc, #364]	; (8006064 <HAL_DMA_Abort_IT+0x42c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d06d      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a59      	ldr	r2, [pc, #356]	; (8006068 <HAL_DMA_Abort_IT+0x430>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d068      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a58      	ldr	r2, [pc, #352]	; (800606c <HAL_DMA_Abort_IT+0x434>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d063      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a56      	ldr	r2, [pc, #344]	; (8006070 <HAL_DMA_Abort_IT+0x438>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d05e      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a55      	ldr	r2, [pc, #340]	; (8006074 <HAL_DMA_Abort_IT+0x43c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d059      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a53      	ldr	r2, [pc, #332]	; (8006078 <HAL_DMA_Abort_IT+0x440>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d054      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a52      	ldr	r2, [pc, #328]	; (800607c <HAL_DMA_Abort_IT+0x444>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d04f      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a50      	ldr	r2, [pc, #320]	; (8006080 <HAL_DMA_Abort_IT+0x448>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d04a      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a4f      	ldr	r2, [pc, #316]	; (8006084 <HAL_DMA_Abort_IT+0x44c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d045      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a4d      	ldr	r2, [pc, #308]	; (8006088 <HAL_DMA_Abort_IT+0x450>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d040      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a4c      	ldr	r2, [pc, #304]	; (800608c <HAL_DMA_Abort_IT+0x454>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d03b      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a4a      	ldr	r2, [pc, #296]	; (8006090 <HAL_DMA_Abort_IT+0x458>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d036      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a49      	ldr	r2, [pc, #292]	; (8006094 <HAL_DMA_Abort_IT+0x45c>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d031      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a47      	ldr	r2, [pc, #284]	; (8006098 <HAL_DMA_Abort_IT+0x460>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d02c      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a46      	ldr	r2, [pc, #280]	; (800609c <HAL_DMA_Abort_IT+0x464>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d027      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a44      	ldr	r2, [pc, #272]	; (80060a0 <HAL_DMA_Abort_IT+0x468>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d022      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a43      	ldr	r2, [pc, #268]	; (80060a4 <HAL_DMA_Abort_IT+0x46c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d01d      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a41      	ldr	r2, [pc, #260]	; (80060a8 <HAL_DMA_Abort_IT+0x470>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d018      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a40      	ldr	r2, [pc, #256]	; (80060ac <HAL_DMA_Abort_IT+0x474>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d013      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a3e      	ldr	r2, [pc, #248]	; (80060b0 <HAL_DMA_Abort_IT+0x478>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d00e      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a3d      	ldr	r2, [pc, #244]	; (80060b4 <HAL_DMA_Abort_IT+0x47c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d009      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a3b      	ldr	r2, [pc, #236]	; (80060b8 <HAL_DMA_Abort_IT+0x480>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d004      	beq.n	8005fd8 <HAL_DMA_Abort_IT+0x3a0>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a3a      	ldr	r2, [pc, #232]	; (80060bc <HAL_DMA_Abort_IT+0x484>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d101      	bne.n	8005fdc <HAL_DMA_Abort_IT+0x3a4>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e000      	b.n	8005fde <HAL_DMA_Abort_IT+0x3a6>
 8005fdc:	2300      	movs	r3, #0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d028      	beq.n	8006034 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ff0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ffc:	f003 031f 	and.w	r3, r3, #31
 8006000:	2201      	movs	r2, #1
 8006002:	409a      	lsls	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006010:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00c      	beq.n	8006034 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006028:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006032:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	40020010 	.word	0x40020010
 8006064:	40020028 	.word	0x40020028
 8006068:	40020040 	.word	0x40020040
 800606c:	40020058 	.word	0x40020058
 8006070:	40020070 	.word	0x40020070
 8006074:	40020088 	.word	0x40020088
 8006078:	400200a0 	.word	0x400200a0
 800607c:	400200b8 	.word	0x400200b8
 8006080:	40020410 	.word	0x40020410
 8006084:	40020428 	.word	0x40020428
 8006088:	40020440 	.word	0x40020440
 800608c:	40020458 	.word	0x40020458
 8006090:	40020470 	.word	0x40020470
 8006094:	40020488 	.word	0x40020488
 8006098:	400204a0 	.word	0x400204a0
 800609c:	400204b8 	.word	0x400204b8
 80060a0:	58025408 	.word	0x58025408
 80060a4:	5802541c 	.word	0x5802541c
 80060a8:	58025430 	.word	0x58025430
 80060ac:	58025444 	.word	0x58025444
 80060b0:	58025458 	.word	0x58025458
 80060b4:	5802546c 	.word	0x5802546c
 80060b8:	58025480 	.word	0x58025480
 80060bc:	58025494 	.word	0x58025494

080060c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08a      	sub	sp, #40	; 0x28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80060c8:	2300      	movs	r3, #0
 80060ca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060cc:	4b67      	ldr	r3, [pc, #412]	; (800626c <HAL_DMA_IRQHandler+0x1ac>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a67      	ldr	r2, [pc, #412]	; (8006270 <HAL_DMA_IRQHandler+0x1b0>)
 80060d2:	fba2 2303 	umull	r2, r3, r2, r3
 80060d6:	0a9b      	lsrs	r3, r3, #10
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060de:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a5f      	ldr	r2, [pc, #380]	; (8006274 <HAL_DMA_IRQHandler+0x1b4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d04a      	beq.n	8006192 <HAL_DMA_IRQHandler+0xd2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a5d      	ldr	r2, [pc, #372]	; (8006278 <HAL_DMA_IRQHandler+0x1b8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d045      	beq.n	8006192 <HAL_DMA_IRQHandler+0xd2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a5c      	ldr	r2, [pc, #368]	; (800627c <HAL_DMA_IRQHandler+0x1bc>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d040      	beq.n	8006192 <HAL_DMA_IRQHandler+0xd2>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a5a      	ldr	r2, [pc, #360]	; (8006280 <HAL_DMA_IRQHandler+0x1c0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d03b      	beq.n	8006192 <HAL_DMA_IRQHandler+0xd2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a59      	ldr	r2, [pc, #356]	; (8006284 <HAL_DMA_IRQHandler+0x1c4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d036      	beq.n	8006192 <HAL_DMA_IRQHandler+0xd2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a57      	ldr	r2, [pc, #348]	; (8006288 <HAL_DMA_IRQHandler+0x1c8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d031      	beq.n	8006192 <HAL_DMA_IRQHandler+0xd2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a56      	ldr	r2, [pc, #344]	; (800628c <HAL_DMA_IRQHandler+0x1cc>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d02c      	beq.n	8006192 <HAL_DMA_IRQHandler+0xd2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a54      	ldr	r2, [pc, #336]	; (8006290 <HAL_DMA_IRQHandler+0x1d0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d027      	beq.n	8006192 <HAL_DMA_IRQHandler+0xd2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a53      	ldr	r2, [pc, #332]	; (8006294 <HAL_DMA_IRQHandler+0x1d4>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d022      	beq.n	8006192 <HAL_DMA_IRQHandler+0xd2>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a51      	ldr	r2, [pc, #324]	; (8006298 <HAL_DMA_IRQHandler+0x1d8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d01d      	beq.n	8006192 <HAL_DMA_IRQHandler+0xd2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a50      	ldr	r2, [pc, #320]	; (800629c <HAL_DMA_IRQHandler+0x1dc>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d018      	beq.n	8006192 <HAL_DMA_IRQHandler+0xd2>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a4e      	ldr	r2, [pc, #312]	; (80062a0 <HAL_DMA_IRQHandler+0x1e0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d013      	beq.n	8006192 <HAL_DMA_IRQHandler+0xd2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a4d      	ldr	r2, [pc, #308]	; (80062a4 <HAL_DMA_IRQHandler+0x1e4>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00e      	beq.n	8006192 <HAL_DMA_IRQHandler+0xd2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a4b      	ldr	r2, [pc, #300]	; (80062a8 <HAL_DMA_IRQHandler+0x1e8>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d009      	beq.n	8006192 <HAL_DMA_IRQHandler+0xd2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a4a      	ldr	r2, [pc, #296]	; (80062ac <HAL_DMA_IRQHandler+0x1ec>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d004      	beq.n	8006192 <HAL_DMA_IRQHandler+0xd2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a48      	ldr	r2, [pc, #288]	; (80062b0 <HAL_DMA_IRQHandler+0x1f0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d101      	bne.n	8006196 <HAL_DMA_IRQHandler+0xd6>
 8006192:	2301      	movs	r3, #1
 8006194:	e000      	b.n	8006198 <HAL_DMA_IRQHandler+0xd8>
 8006196:	2300      	movs	r3, #0
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 842b 	beq.w	80069f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a2:	f003 031f 	and.w	r3, r3, #31
 80061a6:	2208      	movs	r2, #8
 80061a8:	409a      	lsls	r2, r3
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	4013      	ands	r3, r2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 80a2 	beq.w	80062f8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a2e      	ldr	r2, [pc, #184]	; (8006274 <HAL_DMA_IRQHandler+0x1b4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d04a      	beq.n	8006254 <HAL_DMA_IRQHandler+0x194>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a2d      	ldr	r2, [pc, #180]	; (8006278 <HAL_DMA_IRQHandler+0x1b8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d045      	beq.n	8006254 <HAL_DMA_IRQHandler+0x194>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a2b      	ldr	r2, [pc, #172]	; (800627c <HAL_DMA_IRQHandler+0x1bc>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d040      	beq.n	8006254 <HAL_DMA_IRQHandler+0x194>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a2a      	ldr	r2, [pc, #168]	; (8006280 <HAL_DMA_IRQHandler+0x1c0>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d03b      	beq.n	8006254 <HAL_DMA_IRQHandler+0x194>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a28      	ldr	r2, [pc, #160]	; (8006284 <HAL_DMA_IRQHandler+0x1c4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d036      	beq.n	8006254 <HAL_DMA_IRQHandler+0x194>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a27      	ldr	r2, [pc, #156]	; (8006288 <HAL_DMA_IRQHandler+0x1c8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d031      	beq.n	8006254 <HAL_DMA_IRQHandler+0x194>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a25      	ldr	r2, [pc, #148]	; (800628c <HAL_DMA_IRQHandler+0x1cc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d02c      	beq.n	8006254 <HAL_DMA_IRQHandler+0x194>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a24      	ldr	r2, [pc, #144]	; (8006290 <HAL_DMA_IRQHandler+0x1d0>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d027      	beq.n	8006254 <HAL_DMA_IRQHandler+0x194>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a22      	ldr	r2, [pc, #136]	; (8006294 <HAL_DMA_IRQHandler+0x1d4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d022      	beq.n	8006254 <HAL_DMA_IRQHandler+0x194>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a21      	ldr	r2, [pc, #132]	; (8006298 <HAL_DMA_IRQHandler+0x1d8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d01d      	beq.n	8006254 <HAL_DMA_IRQHandler+0x194>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a1f      	ldr	r2, [pc, #124]	; (800629c <HAL_DMA_IRQHandler+0x1dc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d018      	beq.n	8006254 <HAL_DMA_IRQHandler+0x194>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a1e      	ldr	r2, [pc, #120]	; (80062a0 <HAL_DMA_IRQHandler+0x1e0>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d013      	beq.n	8006254 <HAL_DMA_IRQHandler+0x194>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a1c      	ldr	r2, [pc, #112]	; (80062a4 <HAL_DMA_IRQHandler+0x1e4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d00e      	beq.n	8006254 <HAL_DMA_IRQHandler+0x194>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a1b      	ldr	r2, [pc, #108]	; (80062a8 <HAL_DMA_IRQHandler+0x1e8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d009      	beq.n	8006254 <HAL_DMA_IRQHandler+0x194>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a19      	ldr	r2, [pc, #100]	; (80062ac <HAL_DMA_IRQHandler+0x1ec>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d004      	beq.n	8006254 <HAL_DMA_IRQHandler+0x194>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a18      	ldr	r2, [pc, #96]	; (80062b0 <HAL_DMA_IRQHandler+0x1f0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d12f      	bne.n	80062b4 <HAL_DMA_IRQHandler+0x1f4>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0304 	and.w	r3, r3, #4
 800625e:	2b00      	cmp	r3, #0
 8006260:	bf14      	ite	ne
 8006262:	2301      	movne	r3, #1
 8006264:	2300      	moveq	r3, #0
 8006266:	b2db      	uxtb	r3, r3
 8006268:	e02e      	b.n	80062c8 <HAL_DMA_IRQHandler+0x208>
 800626a:	bf00      	nop
 800626c:	24000018 	.word	0x24000018
 8006270:	1b4e81b5 	.word	0x1b4e81b5
 8006274:	40020010 	.word	0x40020010
 8006278:	40020028 	.word	0x40020028
 800627c:	40020040 	.word	0x40020040
 8006280:	40020058 	.word	0x40020058
 8006284:	40020070 	.word	0x40020070
 8006288:	40020088 	.word	0x40020088
 800628c:	400200a0 	.word	0x400200a0
 8006290:	400200b8 	.word	0x400200b8
 8006294:	40020410 	.word	0x40020410
 8006298:	40020428 	.word	0x40020428
 800629c:	40020440 	.word	0x40020440
 80062a0:	40020458 	.word	0x40020458
 80062a4:	40020470 	.word	0x40020470
 80062a8:	40020488 	.word	0x40020488
 80062ac:	400204a0 	.word	0x400204a0
 80062b0:	400204b8 	.word	0x400204b8
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	bf14      	ite	ne
 80062c2:	2301      	movne	r3, #1
 80062c4:	2300      	moveq	r3, #0
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d015      	beq.n	80062f8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0204 	bic.w	r2, r2, #4
 80062da:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e0:	f003 031f 	and.w	r3, r3, #31
 80062e4:	2208      	movs	r2, #8
 80062e6:	409a      	lsls	r2, r3
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f0:	f043 0201 	orr.w	r2, r3, #1
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062fc:	f003 031f 	and.w	r3, r3, #31
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	fa22 f303 	lsr.w	r3, r2, r3
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	2b00      	cmp	r3, #0
 800630c:	d06e      	beq.n	80063ec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a69      	ldr	r2, [pc, #420]	; (80064b8 <HAL_DMA_IRQHandler+0x3f8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d04a      	beq.n	80063ae <HAL_DMA_IRQHandler+0x2ee>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a67      	ldr	r2, [pc, #412]	; (80064bc <HAL_DMA_IRQHandler+0x3fc>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d045      	beq.n	80063ae <HAL_DMA_IRQHandler+0x2ee>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a66      	ldr	r2, [pc, #408]	; (80064c0 <HAL_DMA_IRQHandler+0x400>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d040      	beq.n	80063ae <HAL_DMA_IRQHandler+0x2ee>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a64      	ldr	r2, [pc, #400]	; (80064c4 <HAL_DMA_IRQHandler+0x404>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d03b      	beq.n	80063ae <HAL_DMA_IRQHandler+0x2ee>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a63      	ldr	r2, [pc, #396]	; (80064c8 <HAL_DMA_IRQHandler+0x408>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d036      	beq.n	80063ae <HAL_DMA_IRQHandler+0x2ee>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a61      	ldr	r2, [pc, #388]	; (80064cc <HAL_DMA_IRQHandler+0x40c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d031      	beq.n	80063ae <HAL_DMA_IRQHandler+0x2ee>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a60      	ldr	r2, [pc, #384]	; (80064d0 <HAL_DMA_IRQHandler+0x410>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d02c      	beq.n	80063ae <HAL_DMA_IRQHandler+0x2ee>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a5e      	ldr	r2, [pc, #376]	; (80064d4 <HAL_DMA_IRQHandler+0x414>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d027      	beq.n	80063ae <HAL_DMA_IRQHandler+0x2ee>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a5d      	ldr	r2, [pc, #372]	; (80064d8 <HAL_DMA_IRQHandler+0x418>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d022      	beq.n	80063ae <HAL_DMA_IRQHandler+0x2ee>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a5b      	ldr	r2, [pc, #364]	; (80064dc <HAL_DMA_IRQHandler+0x41c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d01d      	beq.n	80063ae <HAL_DMA_IRQHandler+0x2ee>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a5a      	ldr	r2, [pc, #360]	; (80064e0 <HAL_DMA_IRQHandler+0x420>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d018      	beq.n	80063ae <HAL_DMA_IRQHandler+0x2ee>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a58      	ldr	r2, [pc, #352]	; (80064e4 <HAL_DMA_IRQHandler+0x424>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d013      	beq.n	80063ae <HAL_DMA_IRQHandler+0x2ee>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a57      	ldr	r2, [pc, #348]	; (80064e8 <HAL_DMA_IRQHandler+0x428>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d00e      	beq.n	80063ae <HAL_DMA_IRQHandler+0x2ee>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a55      	ldr	r2, [pc, #340]	; (80064ec <HAL_DMA_IRQHandler+0x42c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d009      	beq.n	80063ae <HAL_DMA_IRQHandler+0x2ee>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a54      	ldr	r2, [pc, #336]	; (80064f0 <HAL_DMA_IRQHandler+0x430>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d004      	beq.n	80063ae <HAL_DMA_IRQHandler+0x2ee>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a52      	ldr	r2, [pc, #328]	; (80064f4 <HAL_DMA_IRQHandler+0x434>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d10a      	bne.n	80063c4 <HAL_DMA_IRQHandler+0x304>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	bf14      	ite	ne
 80063bc:	2301      	movne	r3, #1
 80063be:	2300      	moveq	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	e003      	b.n	80063cc <HAL_DMA_IRQHandler+0x30c>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2300      	movs	r3, #0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00d      	beq.n	80063ec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d4:	f003 031f 	and.w	r3, r3, #31
 80063d8:	2201      	movs	r2, #1
 80063da:	409a      	lsls	r2, r3
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e4:	f043 0202 	orr.w	r2, r3, #2
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063f0:	f003 031f 	and.w	r3, r3, #31
 80063f4:	2204      	movs	r2, #4
 80063f6:	409a      	lsls	r2, r3
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	4013      	ands	r3, r2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 808f 	beq.w	8006520 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a2c      	ldr	r2, [pc, #176]	; (80064b8 <HAL_DMA_IRQHandler+0x3f8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d04a      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x3e2>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a2a      	ldr	r2, [pc, #168]	; (80064bc <HAL_DMA_IRQHandler+0x3fc>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d045      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x3e2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a29      	ldr	r2, [pc, #164]	; (80064c0 <HAL_DMA_IRQHandler+0x400>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d040      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x3e2>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a27      	ldr	r2, [pc, #156]	; (80064c4 <HAL_DMA_IRQHandler+0x404>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d03b      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x3e2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a26      	ldr	r2, [pc, #152]	; (80064c8 <HAL_DMA_IRQHandler+0x408>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d036      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x3e2>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a24      	ldr	r2, [pc, #144]	; (80064cc <HAL_DMA_IRQHandler+0x40c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d031      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x3e2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a23      	ldr	r2, [pc, #140]	; (80064d0 <HAL_DMA_IRQHandler+0x410>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d02c      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x3e2>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a21      	ldr	r2, [pc, #132]	; (80064d4 <HAL_DMA_IRQHandler+0x414>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d027      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x3e2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a20      	ldr	r2, [pc, #128]	; (80064d8 <HAL_DMA_IRQHandler+0x418>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d022      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x3e2>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a1e      	ldr	r2, [pc, #120]	; (80064dc <HAL_DMA_IRQHandler+0x41c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d01d      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x3e2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a1d      	ldr	r2, [pc, #116]	; (80064e0 <HAL_DMA_IRQHandler+0x420>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d018      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x3e2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1b      	ldr	r2, [pc, #108]	; (80064e4 <HAL_DMA_IRQHandler+0x424>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d013      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x3e2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1a      	ldr	r2, [pc, #104]	; (80064e8 <HAL_DMA_IRQHandler+0x428>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00e      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x3e2>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a18      	ldr	r2, [pc, #96]	; (80064ec <HAL_DMA_IRQHandler+0x42c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d009      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x3e2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a17      	ldr	r2, [pc, #92]	; (80064f0 <HAL_DMA_IRQHandler+0x430>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d004      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x3e2>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a15      	ldr	r2, [pc, #84]	; (80064f4 <HAL_DMA_IRQHandler+0x434>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d12a      	bne.n	80064f8 <HAL_DMA_IRQHandler+0x438>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	bf14      	ite	ne
 80064b0:	2301      	movne	r3, #1
 80064b2:	2300      	moveq	r3, #0
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	e023      	b.n	8006500 <HAL_DMA_IRQHandler+0x440>
 80064b8:	40020010 	.word	0x40020010
 80064bc:	40020028 	.word	0x40020028
 80064c0:	40020040 	.word	0x40020040
 80064c4:	40020058 	.word	0x40020058
 80064c8:	40020070 	.word	0x40020070
 80064cc:	40020088 	.word	0x40020088
 80064d0:	400200a0 	.word	0x400200a0
 80064d4:	400200b8 	.word	0x400200b8
 80064d8:	40020410 	.word	0x40020410
 80064dc:	40020428 	.word	0x40020428
 80064e0:	40020440 	.word	0x40020440
 80064e4:	40020458 	.word	0x40020458
 80064e8:	40020470 	.word	0x40020470
 80064ec:	40020488 	.word	0x40020488
 80064f0:	400204a0 	.word	0x400204a0
 80064f4:	400204b8 	.word	0x400204b8
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2300      	movs	r3, #0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d00d      	beq.n	8006520 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006508:	f003 031f 	and.w	r3, r3, #31
 800650c:	2204      	movs	r2, #4
 800650e:	409a      	lsls	r2, r3
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006518:	f043 0204 	orr.w	r2, r3, #4
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006524:	f003 031f 	and.w	r3, r3, #31
 8006528:	2210      	movs	r2, #16
 800652a:	409a      	lsls	r2, r3
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	4013      	ands	r3, r2
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 80a6 	beq.w	8006682 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a85      	ldr	r2, [pc, #532]	; (8006750 <HAL_DMA_IRQHandler+0x690>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d04a      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x516>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a83      	ldr	r2, [pc, #524]	; (8006754 <HAL_DMA_IRQHandler+0x694>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d045      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x516>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a82      	ldr	r2, [pc, #520]	; (8006758 <HAL_DMA_IRQHandler+0x698>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d040      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x516>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a80      	ldr	r2, [pc, #512]	; (800675c <HAL_DMA_IRQHandler+0x69c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d03b      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x516>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a7f      	ldr	r2, [pc, #508]	; (8006760 <HAL_DMA_IRQHandler+0x6a0>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d036      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x516>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a7d      	ldr	r2, [pc, #500]	; (8006764 <HAL_DMA_IRQHandler+0x6a4>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d031      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x516>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a7c      	ldr	r2, [pc, #496]	; (8006768 <HAL_DMA_IRQHandler+0x6a8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d02c      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x516>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a7a      	ldr	r2, [pc, #488]	; (800676c <HAL_DMA_IRQHandler+0x6ac>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d027      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x516>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a79      	ldr	r2, [pc, #484]	; (8006770 <HAL_DMA_IRQHandler+0x6b0>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d022      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x516>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a77      	ldr	r2, [pc, #476]	; (8006774 <HAL_DMA_IRQHandler+0x6b4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d01d      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x516>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a76      	ldr	r2, [pc, #472]	; (8006778 <HAL_DMA_IRQHandler+0x6b8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d018      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x516>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a74      	ldr	r2, [pc, #464]	; (800677c <HAL_DMA_IRQHandler+0x6bc>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d013      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x516>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a73      	ldr	r2, [pc, #460]	; (8006780 <HAL_DMA_IRQHandler+0x6c0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d00e      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x516>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a71      	ldr	r2, [pc, #452]	; (8006784 <HAL_DMA_IRQHandler+0x6c4>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d009      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x516>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a70      	ldr	r2, [pc, #448]	; (8006788 <HAL_DMA_IRQHandler+0x6c8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d004      	beq.n	80065d6 <HAL_DMA_IRQHandler+0x516>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a6e      	ldr	r2, [pc, #440]	; (800678c <HAL_DMA_IRQHandler+0x6cc>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d10a      	bne.n	80065ec <HAL_DMA_IRQHandler+0x52c>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0308 	and.w	r3, r3, #8
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bf14      	ite	ne
 80065e4:	2301      	movne	r3, #1
 80065e6:	2300      	moveq	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	e009      	b.n	8006600 <HAL_DMA_IRQHandler+0x540>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	bf14      	ite	ne
 80065fa:	2301      	movne	r3, #1
 80065fc:	2300      	moveq	r3, #0
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	d03e      	beq.n	8006682 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006608:	f003 031f 	and.w	r3, r3, #31
 800660c:	2210      	movs	r2, #16
 800660e:	409a      	lsls	r2, r3
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d018      	beq.n	8006654 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d108      	bne.n	8006642 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d024      	beq.n	8006682 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	4798      	blx	r3
 8006640:	e01f      	b.n	8006682 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006646:	2b00      	cmp	r3, #0
 8006648:	d01b      	beq.n	8006682 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	4798      	blx	r3
 8006652:	e016      	b.n	8006682 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665e:	2b00      	cmp	r3, #0
 8006660:	d107      	bne.n	8006672 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0208 	bic.w	r2, r2, #8
 8006670:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006686:	f003 031f 	and.w	r3, r3, #31
 800668a:	2220      	movs	r2, #32
 800668c:	409a      	lsls	r2, r3
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	4013      	ands	r3, r2
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 8110 	beq.w	80068b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a2c      	ldr	r2, [pc, #176]	; (8006750 <HAL_DMA_IRQHandler+0x690>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d04a      	beq.n	8006738 <HAL_DMA_IRQHandler+0x678>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a2b      	ldr	r2, [pc, #172]	; (8006754 <HAL_DMA_IRQHandler+0x694>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d045      	beq.n	8006738 <HAL_DMA_IRQHandler+0x678>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a29      	ldr	r2, [pc, #164]	; (8006758 <HAL_DMA_IRQHandler+0x698>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d040      	beq.n	8006738 <HAL_DMA_IRQHandler+0x678>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a28      	ldr	r2, [pc, #160]	; (800675c <HAL_DMA_IRQHandler+0x69c>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d03b      	beq.n	8006738 <HAL_DMA_IRQHandler+0x678>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a26      	ldr	r2, [pc, #152]	; (8006760 <HAL_DMA_IRQHandler+0x6a0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d036      	beq.n	8006738 <HAL_DMA_IRQHandler+0x678>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a25      	ldr	r2, [pc, #148]	; (8006764 <HAL_DMA_IRQHandler+0x6a4>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d031      	beq.n	8006738 <HAL_DMA_IRQHandler+0x678>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a23      	ldr	r2, [pc, #140]	; (8006768 <HAL_DMA_IRQHandler+0x6a8>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d02c      	beq.n	8006738 <HAL_DMA_IRQHandler+0x678>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a22      	ldr	r2, [pc, #136]	; (800676c <HAL_DMA_IRQHandler+0x6ac>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d027      	beq.n	8006738 <HAL_DMA_IRQHandler+0x678>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a20      	ldr	r2, [pc, #128]	; (8006770 <HAL_DMA_IRQHandler+0x6b0>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d022      	beq.n	8006738 <HAL_DMA_IRQHandler+0x678>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a1f      	ldr	r2, [pc, #124]	; (8006774 <HAL_DMA_IRQHandler+0x6b4>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d01d      	beq.n	8006738 <HAL_DMA_IRQHandler+0x678>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a1d      	ldr	r2, [pc, #116]	; (8006778 <HAL_DMA_IRQHandler+0x6b8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d018      	beq.n	8006738 <HAL_DMA_IRQHandler+0x678>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a1c      	ldr	r2, [pc, #112]	; (800677c <HAL_DMA_IRQHandler+0x6bc>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d013      	beq.n	8006738 <HAL_DMA_IRQHandler+0x678>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a1a      	ldr	r2, [pc, #104]	; (8006780 <HAL_DMA_IRQHandler+0x6c0>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d00e      	beq.n	8006738 <HAL_DMA_IRQHandler+0x678>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a19      	ldr	r2, [pc, #100]	; (8006784 <HAL_DMA_IRQHandler+0x6c4>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d009      	beq.n	8006738 <HAL_DMA_IRQHandler+0x678>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a17      	ldr	r2, [pc, #92]	; (8006788 <HAL_DMA_IRQHandler+0x6c8>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d004      	beq.n	8006738 <HAL_DMA_IRQHandler+0x678>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a16      	ldr	r2, [pc, #88]	; (800678c <HAL_DMA_IRQHandler+0x6cc>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d12b      	bne.n	8006790 <HAL_DMA_IRQHandler+0x6d0>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0310 	and.w	r3, r3, #16
 8006742:	2b00      	cmp	r3, #0
 8006744:	bf14      	ite	ne
 8006746:	2301      	movne	r3, #1
 8006748:	2300      	moveq	r3, #0
 800674a:	b2db      	uxtb	r3, r3
 800674c:	e02a      	b.n	80067a4 <HAL_DMA_IRQHandler+0x6e4>
 800674e:	bf00      	nop
 8006750:	40020010 	.word	0x40020010
 8006754:	40020028 	.word	0x40020028
 8006758:	40020040 	.word	0x40020040
 800675c:	40020058 	.word	0x40020058
 8006760:	40020070 	.word	0x40020070
 8006764:	40020088 	.word	0x40020088
 8006768:	400200a0 	.word	0x400200a0
 800676c:	400200b8 	.word	0x400200b8
 8006770:	40020410 	.word	0x40020410
 8006774:	40020428 	.word	0x40020428
 8006778:	40020440 	.word	0x40020440
 800677c:	40020458 	.word	0x40020458
 8006780:	40020470 	.word	0x40020470
 8006784:	40020488 	.word	0x40020488
 8006788:	400204a0 	.word	0x400204a0
 800678c:	400204b8 	.word	0x400204b8
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	bf14      	ite	ne
 800679e:	2301      	movne	r3, #1
 80067a0:	2300      	moveq	r3, #0
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 8087 	beq.w	80068b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ae:	f003 031f 	and.w	r3, r3, #31
 80067b2:	2220      	movs	r2, #32
 80067b4:	409a      	lsls	r2, r3
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b04      	cmp	r3, #4
 80067c4:	d139      	bne.n	800683a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0216 	bic.w	r2, r2, #22
 80067d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	695a      	ldr	r2, [r3, #20]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d103      	bne.n	80067f6 <HAL_DMA_IRQHandler+0x736>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d007      	beq.n	8006806 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0208 	bic.w	r2, r2, #8
 8006804:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800680a:	f003 031f 	and.w	r3, r3, #31
 800680e:	223f      	movs	r2, #63	; 0x3f
 8006810:	409a      	lsls	r2, r3
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 834a 	beq.w	8006ec4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	4798      	blx	r3
          }
          return;
 8006838:	e344      	b.n	8006ec4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d018      	beq.n	800687a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d108      	bne.n	8006868 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685a:	2b00      	cmp	r3, #0
 800685c:	d02c      	beq.n	80068b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	4798      	blx	r3
 8006866:	e027      	b.n	80068b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686c:	2b00      	cmp	r3, #0
 800686e:	d023      	beq.n	80068b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	4798      	blx	r3
 8006878:	e01e      	b.n	80068b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10f      	bne.n	80068a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0210 	bic.w	r2, r2, #16
 8006896:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d003      	beq.n	80068b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f000 8306 	beq.w	8006ece <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 8088 	beq.w	80069e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2204      	movs	r2, #4
 80068d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a7a      	ldr	r2, [pc, #488]	; (8006ac8 <HAL_DMA_IRQHandler+0xa08>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d04a      	beq.n	8006978 <HAL_DMA_IRQHandler+0x8b8>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a79      	ldr	r2, [pc, #484]	; (8006acc <HAL_DMA_IRQHandler+0xa0c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d045      	beq.n	8006978 <HAL_DMA_IRQHandler+0x8b8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a77      	ldr	r2, [pc, #476]	; (8006ad0 <HAL_DMA_IRQHandler+0xa10>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d040      	beq.n	8006978 <HAL_DMA_IRQHandler+0x8b8>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a76      	ldr	r2, [pc, #472]	; (8006ad4 <HAL_DMA_IRQHandler+0xa14>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d03b      	beq.n	8006978 <HAL_DMA_IRQHandler+0x8b8>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a74      	ldr	r2, [pc, #464]	; (8006ad8 <HAL_DMA_IRQHandler+0xa18>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d036      	beq.n	8006978 <HAL_DMA_IRQHandler+0x8b8>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a73      	ldr	r2, [pc, #460]	; (8006adc <HAL_DMA_IRQHandler+0xa1c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d031      	beq.n	8006978 <HAL_DMA_IRQHandler+0x8b8>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a71      	ldr	r2, [pc, #452]	; (8006ae0 <HAL_DMA_IRQHandler+0xa20>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d02c      	beq.n	8006978 <HAL_DMA_IRQHandler+0x8b8>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a70      	ldr	r2, [pc, #448]	; (8006ae4 <HAL_DMA_IRQHandler+0xa24>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d027      	beq.n	8006978 <HAL_DMA_IRQHandler+0x8b8>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a6e      	ldr	r2, [pc, #440]	; (8006ae8 <HAL_DMA_IRQHandler+0xa28>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d022      	beq.n	8006978 <HAL_DMA_IRQHandler+0x8b8>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a6d      	ldr	r2, [pc, #436]	; (8006aec <HAL_DMA_IRQHandler+0xa2c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d01d      	beq.n	8006978 <HAL_DMA_IRQHandler+0x8b8>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a6b      	ldr	r2, [pc, #428]	; (8006af0 <HAL_DMA_IRQHandler+0xa30>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d018      	beq.n	8006978 <HAL_DMA_IRQHandler+0x8b8>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a6a      	ldr	r2, [pc, #424]	; (8006af4 <HAL_DMA_IRQHandler+0xa34>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d013      	beq.n	8006978 <HAL_DMA_IRQHandler+0x8b8>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a68      	ldr	r2, [pc, #416]	; (8006af8 <HAL_DMA_IRQHandler+0xa38>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00e      	beq.n	8006978 <HAL_DMA_IRQHandler+0x8b8>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a67      	ldr	r2, [pc, #412]	; (8006afc <HAL_DMA_IRQHandler+0xa3c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d009      	beq.n	8006978 <HAL_DMA_IRQHandler+0x8b8>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a65      	ldr	r2, [pc, #404]	; (8006b00 <HAL_DMA_IRQHandler+0xa40>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d004      	beq.n	8006978 <HAL_DMA_IRQHandler+0x8b8>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a64      	ldr	r2, [pc, #400]	; (8006b04 <HAL_DMA_IRQHandler+0xa44>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d108      	bne.n	800698a <HAL_DMA_IRQHandler+0x8ca>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 0201 	bic.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	e007      	b.n	800699a <HAL_DMA_IRQHandler+0x8da>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0201 	bic.w	r2, r2, #1
 8006998:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3301      	adds	r3, #1
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d307      	bcc.n	80069b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1f2      	bne.n	800699a <HAL_DMA_IRQHandler+0x8da>
 80069b4:	e000      	b.n	80069b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80069b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d004      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2203      	movs	r2, #3
 80069ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80069ce:	e003      	b.n	80069d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 8272 	beq.w	8006ece <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4798      	blx	r3
 80069f2:	e26c      	b.n	8006ece <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a43      	ldr	r2, [pc, #268]	; (8006b08 <HAL_DMA_IRQHandler+0xa48>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d022      	beq.n	8006a44 <HAL_DMA_IRQHandler+0x984>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a42      	ldr	r2, [pc, #264]	; (8006b0c <HAL_DMA_IRQHandler+0xa4c>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d01d      	beq.n	8006a44 <HAL_DMA_IRQHandler+0x984>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a40      	ldr	r2, [pc, #256]	; (8006b10 <HAL_DMA_IRQHandler+0xa50>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d018      	beq.n	8006a44 <HAL_DMA_IRQHandler+0x984>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a3f      	ldr	r2, [pc, #252]	; (8006b14 <HAL_DMA_IRQHandler+0xa54>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d013      	beq.n	8006a44 <HAL_DMA_IRQHandler+0x984>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a3d      	ldr	r2, [pc, #244]	; (8006b18 <HAL_DMA_IRQHandler+0xa58>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00e      	beq.n	8006a44 <HAL_DMA_IRQHandler+0x984>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a3c      	ldr	r2, [pc, #240]	; (8006b1c <HAL_DMA_IRQHandler+0xa5c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d009      	beq.n	8006a44 <HAL_DMA_IRQHandler+0x984>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a3a      	ldr	r2, [pc, #232]	; (8006b20 <HAL_DMA_IRQHandler+0xa60>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d004      	beq.n	8006a44 <HAL_DMA_IRQHandler+0x984>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a39      	ldr	r2, [pc, #228]	; (8006b24 <HAL_DMA_IRQHandler+0xa64>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d101      	bne.n	8006a48 <HAL_DMA_IRQHandler+0x988>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <HAL_DMA_IRQHandler+0x98a>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 823f 	beq.w	8006ece <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a5c:	f003 031f 	and.w	r3, r3, #31
 8006a60:	2204      	movs	r2, #4
 8006a62:	409a      	lsls	r2, r3
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	4013      	ands	r3, r2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f000 80cd 	beq.w	8006c08 <HAL_DMA_IRQHandler+0xb48>
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f003 0304 	and.w	r3, r3, #4
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	f000 80c7 	beq.w	8006c08 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a7e:	f003 031f 	and.w	r3, r3, #31
 8006a82:	2204      	movs	r2, #4
 8006a84:	409a      	lsls	r2, r3
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d049      	beq.n	8006b28 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d109      	bne.n	8006ab2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 8210 	beq.w	8006ec8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ab0:	e20a      	b.n	8006ec8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 8206 	beq.w	8006ec8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ac4:	e200      	b.n	8006ec8 <HAL_DMA_IRQHandler+0xe08>
 8006ac6:	bf00      	nop
 8006ac8:	40020010 	.word	0x40020010
 8006acc:	40020028 	.word	0x40020028
 8006ad0:	40020040 	.word	0x40020040
 8006ad4:	40020058 	.word	0x40020058
 8006ad8:	40020070 	.word	0x40020070
 8006adc:	40020088 	.word	0x40020088
 8006ae0:	400200a0 	.word	0x400200a0
 8006ae4:	400200b8 	.word	0x400200b8
 8006ae8:	40020410 	.word	0x40020410
 8006aec:	40020428 	.word	0x40020428
 8006af0:	40020440 	.word	0x40020440
 8006af4:	40020458 	.word	0x40020458
 8006af8:	40020470 	.word	0x40020470
 8006afc:	40020488 	.word	0x40020488
 8006b00:	400204a0 	.word	0x400204a0
 8006b04:	400204b8 	.word	0x400204b8
 8006b08:	58025408 	.word	0x58025408
 8006b0c:	5802541c 	.word	0x5802541c
 8006b10:	58025430 	.word	0x58025430
 8006b14:	58025444 	.word	0x58025444
 8006b18:	58025458 	.word	0x58025458
 8006b1c:	5802546c 	.word	0x5802546c
 8006b20:	58025480 	.word	0x58025480
 8006b24:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f003 0320 	and.w	r3, r3, #32
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d160      	bne.n	8006bf4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a8c      	ldr	r2, [pc, #560]	; (8006d68 <HAL_DMA_IRQHandler+0xca8>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d04a      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xb12>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a8a      	ldr	r2, [pc, #552]	; (8006d6c <HAL_DMA_IRQHandler+0xcac>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d045      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xb12>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a89      	ldr	r2, [pc, #548]	; (8006d70 <HAL_DMA_IRQHandler+0xcb0>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d040      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xb12>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a87      	ldr	r2, [pc, #540]	; (8006d74 <HAL_DMA_IRQHandler+0xcb4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d03b      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xb12>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a86      	ldr	r2, [pc, #536]	; (8006d78 <HAL_DMA_IRQHandler+0xcb8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d036      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xb12>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a84      	ldr	r2, [pc, #528]	; (8006d7c <HAL_DMA_IRQHandler+0xcbc>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d031      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xb12>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a83      	ldr	r2, [pc, #524]	; (8006d80 <HAL_DMA_IRQHandler+0xcc0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d02c      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xb12>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a81      	ldr	r2, [pc, #516]	; (8006d84 <HAL_DMA_IRQHandler+0xcc4>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d027      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xb12>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a80      	ldr	r2, [pc, #512]	; (8006d88 <HAL_DMA_IRQHandler+0xcc8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d022      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xb12>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a7e      	ldr	r2, [pc, #504]	; (8006d8c <HAL_DMA_IRQHandler+0xccc>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d01d      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xb12>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a7d      	ldr	r2, [pc, #500]	; (8006d90 <HAL_DMA_IRQHandler+0xcd0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d018      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xb12>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a7b      	ldr	r2, [pc, #492]	; (8006d94 <HAL_DMA_IRQHandler+0xcd4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d013      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xb12>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a7a      	ldr	r2, [pc, #488]	; (8006d98 <HAL_DMA_IRQHandler+0xcd8>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00e      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xb12>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a78      	ldr	r2, [pc, #480]	; (8006d9c <HAL_DMA_IRQHandler+0xcdc>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d009      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xb12>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a77      	ldr	r2, [pc, #476]	; (8006da0 <HAL_DMA_IRQHandler+0xce0>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d004      	beq.n	8006bd2 <HAL_DMA_IRQHandler+0xb12>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a75      	ldr	r2, [pc, #468]	; (8006da4 <HAL_DMA_IRQHandler+0xce4>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d108      	bne.n	8006be4 <HAL_DMA_IRQHandler+0xb24>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0208 	bic.w	r2, r2, #8
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	e007      	b.n	8006bf4 <HAL_DMA_IRQHandler+0xb34>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0204 	bic.w	r2, r2, #4
 8006bf2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 8165 	beq.w	8006ec8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c06:	e15f      	b.n	8006ec8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c0c:	f003 031f 	and.w	r3, r3, #31
 8006c10:	2202      	movs	r2, #2
 8006c12:	409a      	lsls	r2, r3
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	4013      	ands	r3, r2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 80c5 	beq.w	8006da8 <HAL_DMA_IRQHandler+0xce8>
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 80bf 	beq.w	8006da8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c2e:	f003 031f 	and.w	r3, r3, #31
 8006c32:	2202      	movs	r2, #2
 8006c34:	409a      	lsls	r2, r3
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d018      	beq.n	8006c76 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d109      	bne.n	8006c62 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f000 813a 	beq.w	8006ecc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c60:	e134      	b.n	8006ecc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 8130 	beq.w	8006ecc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c74:	e12a      	b.n	8006ecc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f003 0320 	and.w	r3, r3, #32
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d168      	bne.n	8006d52 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a38      	ldr	r2, [pc, #224]	; (8006d68 <HAL_DMA_IRQHandler+0xca8>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d04a      	beq.n	8006d20 <HAL_DMA_IRQHandler+0xc60>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a37      	ldr	r2, [pc, #220]	; (8006d6c <HAL_DMA_IRQHandler+0xcac>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d045      	beq.n	8006d20 <HAL_DMA_IRQHandler+0xc60>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a35      	ldr	r2, [pc, #212]	; (8006d70 <HAL_DMA_IRQHandler+0xcb0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d040      	beq.n	8006d20 <HAL_DMA_IRQHandler+0xc60>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a34      	ldr	r2, [pc, #208]	; (8006d74 <HAL_DMA_IRQHandler+0xcb4>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d03b      	beq.n	8006d20 <HAL_DMA_IRQHandler+0xc60>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a32      	ldr	r2, [pc, #200]	; (8006d78 <HAL_DMA_IRQHandler+0xcb8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d036      	beq.n	8006d20 <HAL_DMA_IRQHandler+0xc60>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a31      	ldr	r2, [pc, #196]	; (8006d7c <HAL_DMA_IRQHandler+0xcbc>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d031      	beq.n	8006d20 <HAL_DMA_IRQHandler+0xc60>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a2f      	ldr	r2, [pc, #188]	; (8006d80 <HAL_DMA_IRQHandler+0xcc0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d02c      	beq.n	8006d20 <HAL_DMA_IRQHandler+0xc60>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a2e      	ldr	r2, [pc, #184]	; (8006d84 <HAL_DMA_IRQHandler+0xcc4>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d027      	beq.n	8006d20 <HAL_DMA_IRQHandler+0xc60>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a2c      	ldr	r2, [pc, #176]	; (8006d88 <HAL_DMA_IRQHandler+0xcc8>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d022      	beq.n	8006d20 <HAL_DMA_IRQHandler+0xc60>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a2b      	ldr	r2, [pc, #172]	; (8006d8c <HAL_DMA_IRQHandler+0xccc>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d01d      	beq.n	8006d20 <HAL_DMA_IRQHandler+0xc60>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a29      	ldr	r2, [pc, #164]	; (8006d90 <HAL_DMA_IRQHandler+0xcd0>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d018      	beq.n	8006d20 <HAL_DMA_IRQHandler+0xc60>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a28      	ldr	r2, [pc, #160]	; (8006d94 <HAL_DMA_IRQHandler+0xcd4>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d013      	beq.n	8006d20 <HAL_DMA_IRQHandler+0xc60>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a26      	ldr	r2, [pc, #152]	; (8006d98 <HAL_DMA_IRQHandler+0xcd8>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00e      	beq.n	8006d20 <HAL_DMA_IRQHandler+0xc60>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a25      	ldr	r2, [pc, #148]	; (8006d9c <HAL_DMA_IRQHandler+0xcdc>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d009      	beq.n	8006d20 <HAL_DMA_IRQHandler+0xc60>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a23      	ldr	r2, [pc, #140]	; (8006da0 <HAL_DMA_IRQHandler+0xce0>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d004      	beq.n	8006d20 <HAL_DMA_IRQHandler+0xc60>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a22      	ldr	r2, [pc, #136]	; (8006da4 <HAL_DMA_IRQHandler+0xce4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d108      	bne.n	8006d32 <HAL_DMA_IRQHandler+0xc72>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 0214 	bic.w	r2, r2, #20
 8006d2e:	601a      	str	r2, [r3, #0]
 8006d30:	e007      	b.n	8006d42 <HAL_DMA_IRQHandler+0xc82>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 020a 	bic.w	r2, r2, #10
 8006d40:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f000 80b8 	beq.w	8006ecc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d64:	e0b2      	b.n	8006ecc <HAL_DMA_IRQHandler+0xe0c>
 8006d66:	bf00      	nop
 8006d68:	40020010 	.word	0x40020010
 8006d6c:	40020028 	.word	0x40020028
 8006d70:	40020040 	.word	0x40020040
 8006d74:	40020058 	.word	0x40020058
 8006d78:	40020070 	.word	0x40020070
 8006d7c:	40020088 	.word	0x40020088
 8006d80:	400200a0 	.word	0x400200a0
 8006d84:	400200b8 	.word	0x400200b8
 8006d88:	40020410 	.word	0x40020410
 8006d8c:	40020428 	.word	0x40020428
 8006d90:	40020440 	.word	0x40020440
 8006d94:	40020458 	.word	0x40020458
 8006d98:	40020470 	.word	0x40020470
 8006d9c:	40020488 	.word	0x40020488
 8006da0:	400204a0 	.word	0x400204a0
 8006da4:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dac:	f003 031f 	and.w	r3, r3, #31
 8006db0:	2208      	movs	r2, #8
 8006db2:	409a      	lsls	r2, r3
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	4013      	ands	r3, r2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 8088 	beq.w	8006ece <HAL_DMA_IRQHandler+0xe0e>
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f003 0308 	and.w	r3, r3, #8
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f000 8082 	beq.w	8006ece <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a41      	ldr	r2, [pc, #260]	; (8006ed4 <HAL_DMA_IRQHandler+0xe14>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d04a      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xdaa>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a3f      	ldr	r2, [pc, #252]	; (8006ed8 <HAL_DMA_IRQHandler+0xe18>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d045      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xdaa>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a3e      	ldr	r2, [pc, #248]	; (8006edc <HAL_DMA_IRQHandler+0xe1c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d040      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xdaa>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a3c      	ldr	r2, [pc, #240]	; (8006ee0 <HAL_DMA_IRQHandler+0xe20>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d03b      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xdaa>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a3b      	ldr	r2, [pc, #236]	; (8006ee4 <HAL_DMA_IRQHandler+0xe24>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d036      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xdaa>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a39      	ldr	r2, [pc, #228]	; (8006ee8 <HAL_DMA_IRQHandler+0xe28>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d031      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xdaa>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a38      	ldr	r2, [pc, #224]	; (8006eec <HAL_DMA_IRQHandler+0xe2c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d02c      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xdaa>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a36      	ldr	r2, [pc, #216]	; (8006ef0 <HAL_DMA_IRQHandler+0xe30>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d027      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xdaa>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a35      	ldr	r2, [pc, #212]	; (8006ef4 <HAL_DMA_IRQHandler+0xe34>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d022      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xdaa>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a33      	ldr	r2, [pc, #204]	; (8006ef8 <HAL_DMA_IRQHandler+0xe38>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d01d      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xdaa>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a32      	ldr	r2, [pc, #200]	; (8006efc <HAL_DMA_IRQHandler+0xe3c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d018      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xdaa>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a30      	ldr	r2, [pc, #192]	; (8006f00 <HAL_DMA_IRQHandler+0xe40>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d013      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xdaa>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a2f      	ldr	r2, [pc, #188]	; (8006f04 <HAL_DMA_IRQHandler+0xe44>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d00e      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xdaa>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a2d      	ldr	r2, [pc, #180]	; (8006f08 <HAL_DMA_IRQHandler+0xe48>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d009      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xdaa>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a2c      	ldr	r2, [pc, #176]	; (8006f0c <HAL_DMA_IRQHandler+0xe4c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d004      	beq.n	8006e6a <HAL_DMA_IRQHandler+0xdaa>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a2a      	ldr	r2, [pc, #168]	; (8006f10 <HAL_DMA_IRQHandler+0xe50>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d108      	bne.n	8006e7c <HAL_DMA_IRQHandler+0xdbc>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 021c 	bic.w	r2, r2, #28
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	e007      	b.n	8006e8c <HAL_DMA_IRQHandler+0xdcc>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 020e 	bic.w	r2, r2, #14
 8006e8a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e90:	f003 031f 	and.w	r3, r3, #31
 8006e94:	2201      	movs	r2, #1
 8006e96:	409a      	lsls	r2, r3
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d009      	beq.n	8006ece <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4798      	blx	r3
 8006ec2:	e004      	b.n	8006ece <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006ec4:	bf00      	nop
 8006ec6:	e002      	b.n	8006ece <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ec8:	bf00      	nop
 8006eca:	e000      	b.n	8006ece <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ecc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006ece:	3728      	adds	r7, #40	; 0x28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	40020010 	.word	0x40020010
 8006ed8:	40020028 	.word	0x40020028
 8006edc:	40020040 	.word	0x40020040
 8006ee0:	40020058 	.word	0x40020058
 8006ee4:	40020070 	.word	0x40020070
 8006ee8:	40020088 	.word	0x40020088
 8006eec:	400200a0 	.word	0x400200a0
 8006ef0:	400200b8 	.word	0x400200b8
 8006ef4:	40020410 	.word	0x40020410
 8006ef8:	40020428 	.word	0x40020428
 8006efc:	40020440 	.word	0x40020440
 8006f00:	40020458 	.word	0x40020458
 8006f04:	40020470 	.word	0x40020470
 8006f08:	40020488 	.word	0x40020488
 8006f0c:	400204a0 	.word	0x400204a0
 8006f10:	400204b8 	.word	0x400204b8

08006f14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	60b9      	str	r1, [r7, #8]
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f26:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a84      	ldr	r2, [pc, #528]	; (8007144 <DMA_SetConfig+0x230>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d072      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a82      	ldr	r2, [pc, #520]	; (8007148 <DMA_SetConfig+0x234>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d06d      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a81      	ldr	r2, [pc, #516]	; (800714c <DMA_SetConfig+0x238>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d068      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a7f      	ldr	r2, [pc, #508]	; (8007150 <DMA_SetConfig+0x23c>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d063      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a7e      	ldr	r2, [pc, #504]	; (8007154 <DMA_SetConfig+0x240>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d05e      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a7c      	ldr	r2, [pc, #496]	; (8007158 <DMA_SetConfig+0x244>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d059      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a7b      	ldr	r2, [pc, #492]	; (800715c <DMA_SetConfig+0x248>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d054      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a79      	ldr	r2, [pc, #484]	; (8007160 <DMA_SetConfig+0x24c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d04f      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a78      	ldr	r2, [pc, #480]	; (8007164 <DMA_SetConfig+0x250>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d04a      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a76      	ldr	r2, [pc, #472]	; (8007168 <DMA_SetConfig+0x254>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d045      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a75      	ldr	r2, [pc, #468]	; (800716c <DMA_SetConfig+0x258>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d040      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a73      	ldr	r2, [pc, #460]	; (8007170 <DMA_SetConfig+0x25c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d03b      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a72      	ldr	r2, [pc, #456]	; (8007174 <DMA_SetConfig+0x260>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d036      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a70      	ldr	r2, [pc, #448]	; (8007178 <DMA_SetConfig+0x264>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d031      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a6f      	ldr	r2, [pc, #444]	; (800717c <DMA_SetConfig+0x268>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d02c      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a6d      	ldr	r2, [pc, #436]	; (8007180 <DMA_SetConfig+0x26c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d027      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a6c      	ldr	r2, [pc, #432]	; (8007184 <DMA_SetConfig+0x270>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d022      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a6a      	ldr	r2, [pc, #424]	; (8007188 <DMA_SetConfig+0x274>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d01d      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a69      	ldr	r2, [pc, #420]	; (800718c <DMA_SetConfig+0x278>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d018      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a67      	ldr	r2, [pc, #412]	; (8007190 <DMA_SetConfig+0x27c>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d013      	beq.n	800701e <DMA_SetConfig+0x10a>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a66      	ldr	r2, [pc, #408]	; (8007194 <DMA_SetConfig+0x280>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00e      	beq.n	800701e <DMA_SetConfig+0x10a>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a64      	ldr	r2, [pc, #400]	; (8007198 <DMA_SetConfig+0x284>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d009      	beq.n	800701e <DMA_SetConfig+0x10a>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a63      	ldr	r2, [pc, #396]	; (800719c <DMA_SetConfig+0x288>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d004      	beq.n	800701e <DMA_SetConfig+0x10a>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a61      	ldr	r2, [pc, #388]	; (80071a0 <DMA_SetConfig+0x28c>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d101      	bne.n	8007022 <DMA_SetConfig+0x10e>
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <DMA_SetConfig+0x110>
 8007022:	2300      	movs	r3, #0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00d      	beq.n	8007044 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007030:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007042:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a3e      	ldr	r2, [pc, #248]	; (8007144 <DMA_SetConfig+0x230>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d04a      	beq.n	80070e4 <DMA_SetConfig+0x1d0>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a3d      	ldr	r2, [pc, #244]	; (8007148 <DMA_SetConfig+0x234>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d045      	beq.n	80070e4 <DMA_SetConfig+0x1d0>
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a3b      	ldr	r2, [pc, #236]	; (800714c <DMA_SetConfig+0x238>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d040      	beq.n	80070e4 <DMA_SetConfig+0x1d0>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a3a      	ldr	r2, [pc, #232]	; (8007150 <DMA_SetConfig+0x23c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d03b      	beq.n	80070e4 <DMA_SetConfig+0x1d0>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a38      	ldr	r2, [pc, #224]	; (8007154 <DMA_SetConfig+0x240>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d036      	beq.n	80070e4 <DMA_SetConfig+0x1d0>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a37      	ldr	r2, [pc, #220]	; (8007158 <DMA_SetConfig+0x244>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d031      	beq.n	80070e4 <DMA_SetConfig+0x1d0>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a35      	ldr	r2, [pc, #212]	; (800715c <DMA_SetConfig+0x248>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d02c      	beq.n	80070e4 <DMA_SetConfig+0x1d0>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a34      	ldr	r2, [pc, #208]	; (8007160 <DMA_SetConfig+0x24c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d027      	beq.n	80070e4 <DMA_SetConfig+0x1d0>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a32      	ldr	r2, [pc, #200]	; (8007164 <DMA_SetConfig+0x250>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d022      	beq.n	80070e4 <DMA_SetConfig+0x1d0>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a31      	ldr	r2, [pc, #196]	; (8007168 <DMA_SetConfig+0x254>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d01d      	beq.n	80070e4 <DMA_SetConfig+0x1d0>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a2f      	ldr	r2, [pc, #188]	; (800716c <DMA_SetConfig+0x258>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d018      	beq.n	80070e4 <DMA_SetConfig+0x1d0>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a2e      	ldr	r2, [pc, #184]	; (8007170 <DMA_SetConfig+0x25c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d013      	beq.n	80070e4 <DMA_SetConfig+0x1d0>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a2c      	ldr	r2, [pc, #176]	; (8007174 <DMA_SetConfig+0x260>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00e      	beq.n	80070e4 <DMA_SetConfig+0x1d0>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a2b      	ldr	r2, [pc, #172]	; (8007178 <DMA_SetConfig+0x264>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d009      	beq.n	80070e4 <DMA_SetConfig+0x1d0>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a29      	ldr	r2, [pc, #164]	; (800717c <DMA_SetConfig+0x268>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d004      	beq.n	80070e4 <DMA_SetConfig+0x1d0>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a28      	ldr	r2, [pc, #160]	; (8007180 <DMA_SetConfig+0x26c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d101      	bne.n	80070e8 <DMA_SetConfig+0x1d4>
 80070e4:	2301      	movs	r3, #1
 80070e6:	e000      	b.n	80070ea <DMA_SetConfig+0x1d6>
 80070e8:	2300      	movs	r3, #0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d05a      	beq.n	80071a4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f2:	f003 031f 	and.w	r3, r3, #31
 80070f6:	223f      	movs	r2, #63	; 0x3f
 80070f8:	409a      	lsls	r2, r3
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800710c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	2b40      	cmp	r3, #64	; 0x40
 800711c:	d108      	bne.n	8007130 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800712e:	e087      	b.n	8007240 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	60da      	str	r2, [r3, #12]
}
 8007140:	e07e      	b.n	8007240 <DMA_SetConfig+0x32c>
 8007142:	bf00      	nop
 8007144:	40020010 	.word	0x40020010
 8007148:	40020028 	.word	0x40020028
 800714c:	40020040 	.word	0x40020040
 8007150:	40020058 	.word	0x40020058
 8007154:	40020070 	.word	0x40020070
 8007158:	40020088 	.word	0x40020088
 800715c:	400200a0 	.word	0x400200a0
 8007160:	400200b8 	.word	0x400200b8
 8007164:	40020410 	.word	0x40020410
 8007168:	40020428 	.word	0x40020428
 800716c:	40020440 	.word	0x40020440
 8007170:	40020458 	.word	0x40020458
 8007174:	40020470 	.word	0x40020470
 8007178:	40020488 	.word	0x40020488
 800717c:	400204a0 	.word	0x400204a0
 8007180:	400204b8 	.word	0x400204b8
 8007184:	58025408 	.word	0x58025408
 8007188:	5802541c 	.word	0x5802541c
 800718c:	58025430 	.word	0x58025430
 8007190:	58025444 	.word	0x58025444
 8007194:	58025458 	.word	0x58025458
 8007198:	5802546c 	.word	0x5802546c
 800719c:	58025480 	.word	0x58025480
 80071a0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a28      	ldr	r2, [pc, #160]	; (800724c <DMA_SetConfig+0x338>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d022      	beq.n	80071f4 <DMA_SetConfig+0x2e0>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a27      	ldr	r2, [pc, #156]	; (8007250 <DMA_SetConfig+0x33c>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d01d      	beq.n	80071f4 <DMA_SetConfig+0x2e0>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a25      	ldr	r2, [pc, #148]	; (8007254 <DMA_SetConfig+0x340>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d018      	beq.n	80071f4 <DMA_SetConfig+0x2e0>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a24      	ldr	r2, [pc, #144]	; (8007258 <DMA_SetConfig+0x344>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d013      	beq.n	80071f4 <DMA_SetConfig+0x2e0>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a22      	ldr	r2, [pc, #136]	; (800725c <DMA_SetConfig+0x348>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d00e      	beq.n	80071f4 <DMA_SetConfig+0x2e0>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a21      	ldr	r2, [pc, #132]	; (8007260 <DMA_SetConfig+0x34c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d009      	beq.n	80071f4 <DMA_SetConfig+0x2e0>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a1f      	ldr	r2, [pc, #124]	; (8007264 <DMA_SetConfig+0x350>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d004      	beq.n	80071f4 <DMA_SetConfig+0x2e0>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a1e      	ldr	r2, [pc, #120]	; (8007268 <DMA_SetConfig+0x354>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d101      	bne.n	80071f8 <DMA_SetConfig+0x2e4>
 80071f4:	2301      	movs	r3, #1
 80071f6:	e000      	b.n	80071fa <DMA_SetConfig+0x2e6>
 80071f8:	2300      	movs	r3, #0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d020      	beq.n	8007240 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007202:	f003 031f 	and.w	r3, r3, #31
 8007206:	2201      	movs	r2, #1
 8007208:	409a      	lsls	r2, r3
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b40      	cmp	r3, #64	; 0x40
 800721c:	d108      	bne.n	8007230 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	60da      	str	r2, [r3, #12]
}
 800722e:	e007      	b.n	8007240 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	60da      	str	r2, [r3, #12]
}
 8007240:	bf00      	nop
 8007242:	371c      	adds	r7, #28
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	58025408 	.word	0x58025408
 8007250:	5802541c 	.word	0x5802541c
 8007254:	58025430 	.word	0x58025430
 8007258:	58025444 	.word	0x58025444
 800725c:	58025458 	.word	0x58025458
 8007260:	5802546c 	.word	0x5802546c
 8007264:	58025480 	.word	0x58025480
 8007268:	58025494 	.word	0x58025494

0800726c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a42      	ldr	r2, [pc, #264]	; (8007384 <DMA_CalcBaseAndBitshift+0x118>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d04a      	beq.n	8007314 <DMA_CalcBaseAndBitshift+0xa8>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a41      	ldr	r2, [pc, #260]	; (8007388 <DMA_CalcBaseAndBitshift+0x11c>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d045      	beq.n	8007314 <DMA_CalcBaseAndBitshift+0xa8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a3f      	ldr	r2, [pc, #252]	; (800738c <DMA_CalcBaseAndBitshift+0x120>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d040      	beq.n	8007314 <DMA_CalcBaseAndBitshift+0xa8>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a3e      	ldr	r2, [pc, #248]	; (8007390 <DMA_CalcBaseAndBitshift+0x124>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d03b      	beq.n	8007314 <DMA_CalcBaseAndBitshift+0xa8>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a3c      	ldr	r2, [pc, #240]	; (8007394 <DMA_CalcBaseAndBitshift+0x128>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d036      	beq.n	8007314 <DMA_CalcBaseAndBitshift+0xa8>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a3b      	ldr	r2, [pc, #236]	; (8007398 <DMA_CalcBaseAndBitshift+0x12c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d031      	beq.n	8007314 <DMA_CalcBaseAndBitshift+0xa8>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a39      	ldr	r2, [pc, #228]	; (800739c <DMA_CalcBaseAndBitshift+0x130>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d02c      	beq.n	8007314 <DMA_CalcBaseAndBitshift+0xa8>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a38      	ldr	r2, [pc, #224]	; (80073a0 <DMA_CalcBaseAndBitshift+0x134>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d027      	beq.n	8007314 <DMA_CalcBaseAndBitshift+0xa8>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a36      	ldr	r2, [pc, #216]	; (80073a4 <DMA_CalcBaseAndBitshift+0x138>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d022      	beq.n	8007314 <DMA_CalcBaseAndBitshift+0xa8>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a35      	ldr	r2, [pc, #212]	; (80073a8 <DMA_CalcBaseAndBitshift+0x13c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d01d      	beq.n	8007314 <DMA_CalcBaseAndBitshift+0xa8>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a33      	ldr	r2, [pc, #204]	; (80073ac <DMA_CalcBaseAndBitshift+0x140>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d018      	beq.n	8007314 <DMA_CalcBaseAndBitshift+0xa8>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a32      	ldr	r2, [pc, #200]	; (80073b0 <DMA_CalcBaseAndBitshift+0x144>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d013      	beq.n	8007314 <DMA_CalcBaseAndBitshift+0xa8>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a30      	ldr	r2, [pc, #192]	; (80073b4 <DMA_CalcBaseAndBitshift+0x148>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d00e      	beq.n	8007314 <DMA_CalcBaseAndBitshift+0xa8>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a2f      	ldr	r2, [pc, #188]	; (80073b8 <DMA_CalcBaseAndBitshift+0x14c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d009      	beq.n	8007314 <DMA_CalcBaseAndBitshift+0xa8>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a2d      	ldr	r2, [pc, #180]	; (80073bc <DMA_CalcBaseAndBitshift+0x150>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d004      	beq.n	8007314 <DMA_CalcBaseAndBitshift+0xa8>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a2c      	ldr	r2, [pc, #176]	; (80073c0 <DMA_CalcBaseAndBitshift+0x154>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d101      	bne.n	8007318 <DMA_CalcBaseAndBitshift+0xac>
 8007314:	2301      	movs	r3, #1
 8007316:	e000      	b.n	800731a <DMA_CalcBaseAndBitshift+0xae>
 8007318:	2300      	movs	r3, #0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d024      	beq.n	8007368 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	b2db      	uxtb	r3, r3
 8007324:	3b10      	subs	r3, #16
 8007326:	4a27      	ldr	r2, [pc, #156]	; (80073c4 <DMA_CalcBaseAndBitshift+0x158>)
 8007328:	fba2 2303 	umull	r2, r3, r2, r3
 800732c:	091b      	lsrs	r3, r3, #4
 800732e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 0307 	and.w	r3, r3, #7
 8007336:	4a24      	ldr	r2, [pc, #144]	; (80073c8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007338:	5cd3      	ldrb	r3, [r2, r3]
 800733a:	461a      	mov	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b03      	cmp	r3, #3
 8007344:	d908      	bls.n	8007358 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	4b1f      	ldr	r3, [pc, #124]	; (80073cc <DMA_CalcBaseAndBitshift+0x160>)
 800734e:	4013      	ands	r3, r2
 8007350:	1d1a      	adds	r2, r3, #4
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	659a      	str	r2, [r3, #88]	; 0x58
 8007356:	e00d      	b.n	8007374 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	4b1b      	ldr	r3, [pc, #108]	; (80073cc <DMA_CalcBaseAndBitshift+0x160>)
 8007360:	4013      	ands	r3, r2
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	6593      	str	r3, [r2, #88]	; 0x58
 8007366:	e005      	b.n	8007374 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007378:	4618      	mov	r0, r3
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr
 8007384:	40020010 	.word	0x40020010
 8007388:	40020028 	.word	0x40020028
 800738c:	40020040 	.word	0x40020040
 8007390:	40020058 	.word	0x40020058
 8007394:	40020070 	.word	0x40020070
 8007398:	40020088 	.word	0x40020088
 800739c:	400200a0 	.word	0x400200a0
 80073a0:	400200b8 	.word	0x400200b8
 80073a4:	40020410 	.word	0x40020410
 80073a8:	40020428 	.word	0x40020428
 80073ac:	40020440 	.word	0x40020440
 80073b0:	40020458 	.word	0x40020458
 80073b4:	40020470 	.word	0x40020470
 80073b8:	40020488 	.word	0x40020488
 80073bc:	400204a0 	.word	0x400204a0
 80073c0:	400204b8 	.word	0x400204b8
 80073c4:	aaaaaaab 	.word	0xaaaaaaab
 80073c8:	08010a20 	.word	0x08010a20
 80073cc:	fffffc00 	.word	0xfffffc00

080073d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d120      	bne.n	8007426 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d858      	bhi.n	800749e <DMA_CheckFifoParam+0xce>
 80073ec:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <DMA_CheckFifoParam+0x24>)
 80073ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f2:	bf00      	nop
 80073f4:	08007405 	.word	0x08007405
 80073f8:	08007417 	.word	0x08007417
 80073fc:	08007405 	.word	0x08007405
 8007400:	0800749f 	.word	0x0800749f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d048      	beq.n	80074a2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007414:	e045      	b.n	80074a2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800741e:	d142      	bne.n	80074a6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007424:	e03f      	b.n	80074a6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800742e:	d123      	bne.n	8007478 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007434:	2b03      	cmp	r3, #3
 8007436:	d838      	bhi.n	80074aa <DMA_CheckFifoParam+0xda>
 8007438:	a201      	add	r2, pc, #4	; (adr r2, 8007440 <DMA_CheckFifoParam+0x70>)
 800743a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743e:	bf00      	nop
 8007440:	08007451 	.word	0x08007451
 8007444:	08007457 	.word	0x08007457
 8007448:	08007451 	.word	0x08007451
 800744c:	08007469 	.word	0x08007469
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	73fb      	strb	r3, [r7, #15]
        break;
 8007454:	e030      	b.n	80074b8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d025      	beq.n	80074ae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007466:	e022      	b.n	80074ae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007470:	d11f      	bne.n	80074b2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007476:	e01c      	b.n	80074b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747c:	2b02      	cmp	r3, #2
 800747e:	d902      	bls.n	8007486 <DMA_CheckFifoParam+0xb6>
 8007480:	2b03      	cmp	r3, #3
 8007482:	d003      	beq.n	800748c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007484:	e018      	b.n	80074b8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	73fb      	strb	r3, [r7, #15]
        break;
 800748a:	e015      	b.n	80074b8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00e      	beq.n	80074b6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	73fb      	strb	r3, [r7, #15]
    break;
 800749c:	e00b      	b.n	80074b6 <DMA_CheckFifoParam+0xe6>
        break;
 800749e:	bf00      	nop
 80074a0:	e00a      	b.n	80074b8 <DMA_CheckFifoParam+0xe8>
        break;
 80074a2:	bf00      	nop
 80074a4:	e008      	b.n	80074b8 <DMA_CheckFifoParam+0xe8>
        break;
 80074a6:	bf00      	nop
 80074a8:	e006      	b.n	80074b8 <DMA_CheckFifoParam+0xe8>
        break;
 80074aa:	bf00      	nop
 80074ac:	e004      	b.n	80074b8 <DMA_CheckFifoParam+0xe8>
        break;
 80074ae:	bf00      	nop
 80074b0:	e002      	b.n	80074b8 <DMA_CheckFifoParam+0xe8>
        break;
 80074b2:	bf00      	nop
 80074b4:	e000      	b.n	80074b8 <DMA_CheckFifoParam+0xe8>
    break;
 80074b6:	bf00      	nop
    }
  }

  return status;
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop

080074c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a38      	ldr	r2, [pc, #224]	; (80075bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d022      	beq.n	8007526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a36      	ldr	r2, [pc, #216]	; (80075c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d01d      	beq.n	8007526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a35      	ldr	r2, [pc, #212]	; (80075c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d018      	beq.n	8007526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a33      	ldr	r2, [pc, #204]	; (80075c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d013      	beq.n	8007526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a32      	ldr	r2, [pc, #200]	; (80075cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d00e      	beq.n	8007526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a30      	ldr	r2, [pc, #192]	; (80075d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d009      	beq.n	8007526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a2f      	ldr	r2, [pc, #188]	; (80075d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d004      	beq.n	8007526 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a2d      	ldr	r2, [pc, #180]	; (80075d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d101      	bne.n	800752a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007526:	2301      	movs	r3, #1
 8007528:	e000      	b.n	800752c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800752a:	2300      	movs	r3, #0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d01a      	beq.n	8007566 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	3b08      	subs	r3, #8
 8007538:	4a28      	ldr	r2, [pc, #160]	; (80075dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800753a:	fba2 2303 	umull	r2, r3, r2, r3
 800753e:	091b      	lsrs	r3, r3, #4
 8007540:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4b26      	ldr	r3, [pc, #152]	; (80075e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	461a      	mov	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a24      	ldr	r2, [pc, #144]	; (80075e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007554:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f003 031f 	and.w	r3, r3, #31
 800755c:	2201      	movs	r2, #1
 800755e:	409a      	lsls	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007564:	e024      	b.n	80075b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	3b10      	subs	r3, #16
 800756e:	4a1e      	ldr	r2, [pc, #120]	; (80075e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007570:	fba2 2303 	umull	r2, r3, r2, r3
 8007574:	091b      	lsrs	r3, r3, #4
 8007576:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	4a1c      	ldr	r2, [pc, #112]	; (80075ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d806      	bhi.n	800758e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	4a1b      	ldr	r2, [pc, #108]	; (80075f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d902      	bls.n	800758e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	3308      	adds	r3, #8
 800758c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	4b18      	ldr	r3, [pc, #96]	; (80075f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007592:	4413      	add	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	461a      	mov	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a16      	ldr	r2, [pc, #88]	; (80075f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80075a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f003 031f 	and.w	r3, r3, #31
 80075a8:	2201      	movs	r2, #1
 80075aa:	409a      	lsls	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80075b0:	bf00      	nop
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	58025408 	.word	0x58025408
 80075c0:	5802541c 	.word	0x5802541c
 80075c4:	58025430 	.word	0x58025430
 80075c8:	58025444 	.word	0x58025444
 80075cc:	58025458 	.word	0x58025458
 80075d0:	5802546c 	.word	0x5802546c
 80075d4:	58025480 	.word	0x58025480
 80075d8:	58025494 	.word	0x58025494
 80075dc:	cccccccd 	.word	0xcccccccd
 80075e0:	16009600 	.word	0x16009600
 80075e4:	58025880 	.word	0x58025880
 80075e8:	aaaaaaab 	.word	0xaaaaaaab
 80075ec:	400204b8 	.word	0x400204b8
 80075f0:	4002040f 	.word	0x4002040f
 80075f4:	10008200 	.word	0x10008200
 80075f8:	40020880 	.word	0x40020880

080075fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	b2db      	uxtb	r3, r3
 800760a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d04a      	beq.n	80076a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b08      	cmp	r3, #8
 8007616:	d847      	bhi.n	80076a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a25      	ldr	r2, [pc, #148]	; (80076b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d022      	beq.n	8007668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a24      	ldr	r2, [pc, #144]	; (80076b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d01d      	beq.n	8007668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a22      	ldr	r2, [pc, #136]	; (80076bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d018      	beq.n	8007668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a21      	ldr	r2, [pc, #132]	; (80076c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d013      	beq.n	8007668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a1f      	ldr	r2, [pc, #124]	; (80076c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d00e      	beq.n	8007668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a1e      	ldr	r2, [pc, #120]	; (80076c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d009      	beq.n	8007668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a1c      	ldr	r2, [pc, #112]	; (80076cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d004      	beq.n	8007668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a1b      	ldr	r2, [pc, #108]	; (80076d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d101      	bne.n	800766c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007668:	2301      	movs	r3, #1
 800766a:	e000      	b.n	800766e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800766c:	2300      	movs	r3, #0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	4b17      	ldr	r3, [pc, #92]	; (80076d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007676:	4413      	add	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	461a      	mov	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a15      	ldr	r2, [pc, #84]	; (80076d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007684:	671a      	str	r2, [r3, #112]	; 0x70
 8007686:	e009      	b.n	800769c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4b14      	ldr	r3, [pc, #80]	; (80076dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800768c:	4413      	add	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	461a      	mov	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a11      	ldr	r2, [pc, #68]	; (80076e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800769a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3b01      	subs	r3, #1
 80076a0:	2201      	movs	r2, #1
 80076a2:	409a      	lsls	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80076a8:	bf00      	nop
 80076aa:	3714      	adds	r7, #20
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr
 80076b4:	58025408 	.word	0x58025408
 80076b8:	5802541c 	.word	0x5802541c
 80076bc:	58025430 	.word	0x58025430
 80076c0:	58025444 	.word	0x58025444
 80076c4:	58025458 	.word	0x58025458
 80076c8:	5802546c 	.word	0x5802546c
 80076cc:	58025480 	.word	0x58025480
 80076d0:	58025494 	.word	0x58025494
 80076d4:	1600963f 	.word	0x1600963f
 80076d8:	58025940 	.word	0x58025940
 80076dc:	1000823f 	.word	0x1000823f
 80076e0:	40020940 	.word	0x40020940

080076e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b089      	sub	sp, #36	; 0x24
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80076f2:	4b89      	ldr	r3, [pc, #548]	; (8007918 <HAL_GPIO_Init+0x234>)
 80076f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80076f6:	e194      	b.n	8007a22 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	2101      	movs	r1, #1
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	fa01 f303 	lsl.w	r3, r1, r3
 8007704:	4013      	ands	r3, r2
 8007706:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	f000 8186 	beq.w	8007a1c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f003 0303 	and.w	r3, r3, #3
 8007718:	2b01      	cmp	r3, #1
 800771a:	d005      	beq.n	8007728 <HAL_GPIO_Init+0x44>
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f003 0303 	and.w	r3, r3, #3
 8007724:	2b02      	cmp	r3, #2
 8007726:	d130      	bne.n	800778a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	2203      	movs	r2, #3
 8007734:	fa02 f303 	lsl.w	r3, r2, r3
 8007738:	43db      	mvns	r3, r3
 800773a:	69ba      	ldr	r2, [r7, #24]
 800773c:	4013      	ands	r3, r2
 800773e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	fa02 f303 	lsl.w	r3, r2, r3
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	4313      	orrs	r3, r2
 8007750:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800775e:	2201      	movs	r2, #1
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	fa02 f303 	lsl.w	r3, r2, r3
 8007766:	43db      	mvns	r3, r3
 8007768:	69ba      	ldr	r2, [r7, #24]
 800776a:	4013      	ands	r3, r2
 800776c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	091b      	lsrs	r3, r3, #4
 8007774:	f003 0201 	and.w	r2, r3, #1
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	fa02 f303 	lsl.w	r3, r2, r3
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	4313      	orrs	r3, r2
 8007782:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	2b03      	cmp	r3, #3
 8007794:	d017      	beq.n	80077c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	2203      	movs	r2, #3
 80077a2:	fa02 f303 	lsl.w	r3, r2, r3
 80077a6:	43db      	mvns	r3, r3
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	4013      	ands	r3, r2
 80077ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	4313      	orrs	r3, r2
 80077be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f003 0303 	and.w	r3, r3, #3
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d123      	bne.n	800781a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	08da      	lsrs	r2, r3, #3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	3208      	adds	r2, #8
 80077da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	f003 0307 	and.w	r3, r3, #7
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	220f      	movs	r2, #15
 80077ea:	fa02 f303 	lsl.w	r3, r2, r3
 80077ee:	43db      	mvns	r3, r3
 80077f0:	69ba      	ldr	r2, [r7, #24]
 80077f2:	4013      	ands	r3, r2
 80077f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	691a      	ldr	r2, [r3, #16]
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	f003 0307 	and.w	r3, r3, #7
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	fa02 f303 	lsl.w	r3, r2, r3
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	4313      	orrs	r3, r2
 800780a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	08da      	lsrs	r2, r3, #3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	3208      	adds	r2, #8
 8007814:	69b9      	ldr	r1, [r7, #24]
 8007816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	2203      	movs	r2, #3
 8007826:	fa02 f303 	lsl.w	r3, r2, r3
 800782a:	43db      	mvns	r3, r3
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	4013      	ands	r3, r2
 8007830:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f003 0203 	and.w	r2, r3, #3
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	fa02 f303 	lsl.w	r3, r2, r3
 8007842:	69ba      	ldr	r2, [r7, #24]
 8007844:	4313      	orrs	r3, r2
 8007846:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	69ba      	ldr	r2, [r7, #24]
 800784c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007856:	2b00      	cmp	r3, #0
 8007858:	f000 80e0 	beq.w	8007a1c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800785c:	4b2f      	ldr	r3, [pc, #188]	; (800791c <HAL_GPIO_Init+0x238>)
 800785e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007862:	4a2e      	ldr	r2, [pc, #184]	; (800791c <HAL_GPIO_Init+0x238>)
 8007864:	f043 0302 	orr.w	r3, r3, #2
 8007868:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800786c:	4b2b      	ldr	r3, [pc, #172]	; (800791c <HAL_GPIO_Init+0x238>)
 800786e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800787a:	4a29      	ldr	r2, [pc, #164]	; (8007920 <HAL_GPIO_Init+0x23c>)
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	089b      	lsrs	r3, r3, #2
 8007880:	3302      	adds	r3, #2
 8007882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	f003 0303 	and.w	r3, r3, #3
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	220f      	movs	r2, #15
 8007892:	fa02 f303 	lsl.w	r3, r2, r3
 8007896:	43db      	mvns	r3, r3
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	4013      	ands	r3, r2
 800789c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a20      	ldr	r2, [pc, #128]	; (8007924 <HAL_GPIO_Init+0x240>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d052      	beq.n	800794c <HAL_GPIO_Init+0x268>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a1f      	ldr	r2, [pc, #124]	; (8007928 <HAL_GPIO_Init+0x244>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d031      	beq.n	8007912 <HAL_GPIO_Init+0x22e>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a1e      	ldr	r2, [pc, #120]	; (800792c <HAL_GPIO_Init+0x248>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d02b      	beq.n	800790e <HAL_GPIO_Init+0x22a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a1d      	ldr	r2, [pc, #116]	; (8007930 <HAL_GPIO_Init+0x24c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d025      	beq.n	800790a <HAL_GPIO_Init+0x226>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a1c      	ldr	r2, [pc, #112]	; (8007934 <HAL_GPIO_Init+0x250>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d01f      	beq.n	8007906 <HAL_GPIO_Init+0x222>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a1b      	ldr	r2, [pc, #108]	; (8007938 <HAL_GPIO_Init+0x254>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d019      	beq.n	8007902 <HAL_GPIO_Init+0x21e>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a1a      	ldr	r2, [pc, #104]	; (800793c <HAL_GPIO_Init+0x258>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d013      	beq.n	80078fe <HAL_GPIO_Init+0x21a>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a19      	ldr	r2, [pc, #100]	; (8007940 <HAL_GPIO_Init+0x25c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d00d      	beq.n	80078fa <HAL_GPIO_Init+0x216>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a18      	ldr	r2, [pc, #96]	; (8007944 <HAL_GPIO_Init+0x260>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d007      	beq.n	80078f6 <HAL_GPIO_Init+0x212>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a17      	ldr	r2, [pc, #92]	; (8007948 <HAL_GPIO_Init+0x264>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d101      	bne.n	80078f2 <HAL_GPIO_Init+0x20e>
 80078ee:	2309      	movs	r3, #9
 80078f0:	e02d      	b.n	800794e <HAL_GPIO_Init+0x26a>
 80078f2:	230a      	movs	r3, #10
 80078f4:	e02b      	b.n	800794e <HAL_GPIO_Init+0x26a>
 80078f6:	2308      	movs	r3, #8
 80078f8:	e029      	b.n	800794e <HAL_GPIO_Init+0x26a>
 80078fa:	2307      	movs	r3, #7
 80078fc:	e027      	b.n	800794e <HAL_GPIO_Init+0x26a>
 80078fe:	2306      	movs	r3, #6
 8007900:	e025      	b.n	800794e <HAL_GPIO_Init+0x26a>
 8007902:	2305      	movs	r3, #5
 8007904:	e023      	b.n	800794e <HAL_GPIO_Init+0x26a>
 8007906:	2304      	movs	r3, #4
 8007908:	e021      	b.n	800794e <HAL_GPIO_Init+0x26a>
 800790a:	2303      	movs	r3, #3
 800790c:	e01f      	b.n	800794e <HAL_GPIO_Init+0x26a>
 800790e:	2302      	movs	r3, #2
 8007910:	e01d      	b.n	800794e <HAL_GPIO_Init+0x26a>
 8007912:	2301      	movs	r3, #1
 8007914:	e01b      	b.n	800794e <HAL_GPIO_Init+0x26a>
 8007916:	bf00      	nop
 8007918:	58000080 	.word	0x58000080
 800791c:	58024400 	.word	0x58024400
 8007920:	58000400 	.word	0x58000400
 8007924:	58020000 	.word	0x58020000
 8007928:	58020400 	.word	0x58020400
 800792c:	58020800 	.word	0x58020800
 8007930:	58020c00 	.word	0x58020c00
 8007934:	58021000 	.word	0x58021000
 8007938:	58021400 	.word	0x58021400
 800793c:	58021800 	.word	0x58021800
 8007940:	58021c00 	.word	0x58021c00
 8007944:	58022000 	.word	0x58022000
 8007948:	58022400 	.word	0x58022400
 800794c:	2300      	movs	r3, #0
 800794e:	69fa      	ldr	r2, [r7, #28]
 8007950:	f002 0203 	and.w	r2, r2, #3
 8007954:	0092      	lsls	r2, r2, #2
 8007956:	4093      	lsls	r3, r2
 8007958:	69ba      	ldr	r2, [r7, #24]
 800795a:	4313      	orrs	r3, r2
 800795c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800795e:	4938      	ldr	r1, [pc, #224]	; (8007a40 <HAL_GPIO_Init+0x35c>)
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	089b      	lsrs	r3, r3, #2
 8007964:	3302      	adds	r3, #2
 8007966:	69ba      	ldr	r2, [r7, #24]
 8007968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800796c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	43db      	mvns	r3, r3
 8007978:	69ba      	ldr	r2, [r7, #24]
 800797a:	4013      	ands	r3, r2
 800797c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800798a:	69ba      	ldr	r2, [r7, #24]
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	4313      	orrs	r3, r2
 8007990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007992:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800799a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	43db      	mvns	r3, r3
 80079a6:	69ba      	ldr	r2, [r7, #24]
 80079a8:	4013      	ands	r3, r2
 80079aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d003      	beq.n	80079c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80079b8:	69ba      	ldr	r2, [r7, #24]
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	4313      	orrs	r3, r2
 80079be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80079c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	43db      	mvns	r3, r3
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	4013      	ands	r3, r2
 80079d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d003      	beq.n	80079ec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	43db      	mvns	r3, r3
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	4013      	ands	r3, r2
 8007a00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	fa22 f303 	lsr.w	r3, r2, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f47f ae63 	bne.w	80076f8 <HAL_GPIO_Init+0x14>
  }
}
 8007a32:	bf00      	nop
 8007a34:	bf00      	nop
 8007a36:	3724      	adds	r7, #36	; 0x24
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	58000400 	.word	0x58000400

08007a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	807b      	strh	r3, [r7, #2]
 8007a50:	4613      	mov	r3, r2
 8007a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a54:	787b      	ldrb	r3, [r7, #1]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a5a:	887a      	ldrh	r2, [r7, #2]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007a60:	e003      	b.n	8007a6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007a62:	887b      	ldrh	r3, [r7, #2]
 8007a64:	041a      	lsls	r2, r3, #16
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	619a      	str	r2, [r3, #24]
}
 8007a6a:	bf00      	nop
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007a88:	88fb      	ldrh	r3, [r7, #6]
 8007a8a:	4013      	ands	r3, r2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d008      	beq.n	8007aa2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a94:	88fb      	ldrh	r3, [r7, #6]
 8007a96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007a9a:	88fb      	ldrh	r3, [r7, #6]
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fa fe87 	bl	80027b0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
	...

08007aac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007ab4:	4b19      	ldr	r3, [pc, #100]	; (8007b1c <HAL_PWREx_ConfigSupply+0x70>)
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d00a      	beq.n	8007ad6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007ac0:	4b16      	ldr	r3, [pc, #88]	; (8007b1c <HAL_PWREx_ConfigSupply+0x70>)
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	f003 0307 	and.w	r3, r3, #7
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d001      	beq.n	8007ad2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e01f      	b.n	8007b12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	e01d      	b.n	8007b12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007ad6:	4b11      	ldr	r3, [pc, #68]	; (8007b1c <HAL_PWREx_ConfigSupply+0x70>)
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	f023 0207 	bic.w	r2, r3, #7
 8007ade:	490f      	ldr	r1, [pc, #60]	; (8007b1c <HAL_PWREx_ConfigSupply+0x70>)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007ae6:	f7fc fc91 	bl	800440c <HAL_GetTick>
 8007aea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007aec:	e009      	b.n	8007b02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007aee:	f7fc fc8d 	bl	800440c <HAL_GetTick>
 8007af2:	4602      	mov	r2, r0
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	1ad3      	subs	r3, r2, r3
 8007af8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007afc:	d901      	bls.n	8007b02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e007      	b.n	8007b12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007b02:	4b06      	ldr	r3, [pc, #24]	; (8007b1c <HAL_PWREx_ConfigSupply+0x70>)
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b0e:	d1ee      	bne.n	8007aee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	58024800 	.word	0x58024800

08007b20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08c      	sub	sp, #48	; 0x30
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d102      	bne.n	8007b34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	f000 bc1c 	b.w	800836c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	f000 8087 	beq.w	8007c50 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b42:	4b9e      	ldr	r3, [pc, #632]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b4c:	4b9b      	ldr	r3, [pc, #620]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b50:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b54:	2b10      	cmp	r3, #16
 8007b56:	d007      	beq.n	8007b68 <HAL_RCC_OscConfig+0x48>
 8007b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5a:	2b18      	cmp	r3, #24
 8007b5c:	d110      	bne.n	8007b80 <HAL_RCC_OscConfig+0x60>
 8007b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b60:	f003 0303 	and.w	r3, r3, #3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d10b      	bne.n	8007b80 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b68:	4b94      	ldr	r3, [pc, #592]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d06c      	beq.n	8007c4e <HAL_RCC_OscConfig+0x12e>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d168      	bne.n	8007c4e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e3f5      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b88:	d106      	bne.n	8007b98 <HAL_RCC_OscConfig+0x78>
 8007b8a:	4b8c      	ldr	r3, [pc, #560]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a8b      	ldr	r2, [pc, #556]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b94:	6013      	str	r3, [r2, #0]
 8007b96:	e02e      	b.n	8007bf6 <HAL_RCC_OscConfig+0xd6>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10c      	bne.n	8007bba <HAL_RCC_OscConfig+0x9a>
 8007ba0:	4b86      	ldr	r3, [pc, #536]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a85      	ldr	r2, [pc, #532]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007baa:	6013      	str	r3, [r2, #0]
 8007bac:	4b83      	ldr	r3, [pc, #524]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a82      	ldr	r2, [pc, #520]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	e01d      	b.n	8007bf6 <HAL_RCC_OscConfig+0xd6>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007bc2:	d10c      	bne.n	8007bde <HAL_RCC_OscConfig+0xbe>
 8007bc4:	4b7d      	ldr	r3, [pc, #500]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a7c      	ldr	r2, [pc, #496]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007bca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007bce:	6013      	str	r3, [r2, #0]
 8007bd0:	4b7a      	ldr	r3, [pc, #488]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a79      	ldr	r2, [pc, #484]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bda:	6013      	str	r3, [r2, #0]
 8007bdc:	e00b      	b.n	8007bf6 <HAL_RCC_OscConfig+0xd6>
 8007bde:	4b77      	ldr	r3, [pc, #476]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a76      	ldr	r2, [pc, #472]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007be8:	6013      	str	r3, [r2, #0]
 8007bea:	4b74      	ldr	r3, [pc, #464]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a73      	ldr	r2, [pc, #460]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bf4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d013      	beq.n	8007c26 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bfe:	f7fc fc05 	bl	800440c <HAL_GetTick>
 8007c02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c04:	e008      	b.n	8007c18 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c06:	f7fc fc01 	bl	800440c <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	2b64      	cmp	r3, #100	; 0x64
 8007c12:	d901      	bls.n	8007c18 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e3a9      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007c18:	4b68      	ldr	r3, [pc, #416]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d0f0      	beq.n	8007c06 <HAL_RCC_OscConfig+0xe6>
 8007c24:	e014      	b.n	8007c50 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c26:	f7fc fbf1 	bl	800440c <HAL_GetTick>
 8007c2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c2c:	e008      	b.n	8007c40 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c2e:	f7fc fbed 	bl	800440c <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	2b64      	cmp	r3, #100	; 0x64
 8007c3a:	d901      	bls.n	8007c40 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e395      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007c40:	4b5e      	ldr	r3, [pc, #376]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1f0      	bne.n	8007c2e <HAL_RCC_OscConfig+0x10e>
 8007c4c:	e000      	b.n	8007c50 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c4e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0302 	and.w	r3, r3, #2
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 80ca 	beq.w	8007df2 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c5e:	4b57      	ldr	r3, [pc, #348]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c66:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c68:	4b54      	ldr	r3, [pc, #336]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d007      	beq.n	8007c84 <HAL_RCC_OscConfig+0x164>
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	2b18      	cmp	r3, #24
 8007c78:	d156      	bne.n	8007d28 <HAL_RCC_OscConfig+0x208>
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	f003 0303 	and.w	r3, r3, #3
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d151      	bne.n	8007d28 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c84:	4b4d      	ldr	r3, [pc, #308]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0304 	and.w	r3, r3, #4
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d005      	beq.n	8007c9c <HAL_RCC_OscConfig+0x17c>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e367      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c9c:	4b47      	ldr	r3, [pc, #284]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f023 0219 	bic.w	r2, r3, #25
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	4944      	ldr	r1, [pc, #272]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007caa:	4313      	orrs	r3, r2
 8007cac:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007cae:	f7fc fbad 	bl	800440c <HAL_GetTick>
 8007cb2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cb4:	e008      	b.n	8007cc8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cb6:	f7fc fba9 	bl	800440c <HAL_GetTick>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d901      	bls.n	8007cc8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e351      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cc8:	4b3c      	ldr	r3, [pc, #240]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d0f0      	beq.n	8007cb6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cd4:	f7fc fba6 	bl	8004424 <HAL_GetREVID>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f241 0203 	movw	r2, #4099	; 0x1003
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d817      	bhi.n	8007d12 <HAL_RCC_OscConfig+0x1f2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	2b40      	cmp	r3, #64	; 0x40
 8007ce8:	d108      	bne.n	8007cfc <HAL_RCC_OscConfig+0x1dc>
 8007cea:	4b34      	ldr	r3, [pc, #208]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007cf2:	4a32      	ldr	r2, [pc, #200]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cf8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cfa:	e07a      	b.n	8007df2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cfc:	4b2f      	ldr	r3, [pc, #188]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	691b      	ldr	r3, [r3, #16]
 8007d08:	031b      	lsls	r3, r3, #12
 8007d0a:	492c      	ldr	r1, [pc, #176]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d10:	e06f      	b.n	8007df2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d12:	4b2a      	ldr	r3, [pc, #168]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	061b      	lsls	r3, r3, #24
 8007d20:	4926      	ldr	r1, [pc, #152]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d26:	e064      	b.n	8007df2 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d047      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007d30:	4b22      	ldr	r3, [pc, #136]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f023 0219 	bic.w	r2, r3, #25
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	491f      	ldr	r1, [pc, #124]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d42:	f7fc fb63 	bl	800440c <HAL_GetTick>
 8007d46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d48:	e008      	b.n	8007d5c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d4a:	f7fc fb5f 	bl	800440c <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d901      	bls.n	8007d5c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e307      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d5c:	4b17      	ldr	r3, [pc, #92]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0304 	and.w	r3, r3, #4
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d0f0      	beq.n	8007d4a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d68:	f7fc fb5c 	bl	8004424 <HAL_GetREVID>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d817      	bhi.n	8007da6 <HAL_RCC_OscConfig+0x286>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	2b40      	cmp	r3, #64	; 0x40
 8007d7c:	d108      	bne.n	8007d90 <HAL_RCC_OscConfig+0x270>
 8007d7e:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007d86:	4a0d      	ldr	r2, [pc, #52]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d8c:	6053      	str	r3, [r2, #4]
 8007d8e:	e030      	b.n	8007df2 <HAL_RCC_OscConfig+0x2d2>
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	031b      	lsls	r3, r3, #12
 8007d9e:	4907      	ldr	r1, [pc, #28]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	604b      	str	r3, [r1, #4]
 8007da4:	e025      	b.n	8007df2 <HAL_RCC_OscConfig+0x2d2>
 8007da6:	4b05      	ldr	r3, [pc, #20]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	061b      	lsls	r3, r3, #24
 8007db4:	4901      	ldr	r1, [pc, #4]	; (8007dbc <HAL_RCC_OscConfig+0x29c>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	604b      	str	r3, [r1, #4]
 8007dba:	e01a      	b.n	8007df2 <HAL_RCC_OscConfig+0x2d2>
 8007dbc:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dc0:	4b9e      	ldr	r3, [pc, #632]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a9d      	ldr	r2, [pc, #628]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007dc6:	f023 0301 	bic.w	r3, r3, #1
 8007dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dcc:	f7fc fb1e 	bl	800440c <HAL_GetTick>
 8007dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007dd2:	e008      	b.n	8007de6 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007dd4:	f7fc fb1a 	bl	800440c <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d901      	bls.n	8007de6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e2c2      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007de6:	4b95      	ldr	r3, [pc, #596]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 0304 	and.w	r3, r3, #4
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1f0      	bne.n	8007dd4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0310 	and.w	r3, r3, #16
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 80a9 	beq.w	8007f52 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e00:	4b8e      	ldr	r3, [pc, #568]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e08:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e0a:	4b8c      	ldr	r3, [pc, #560]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	2b08      	cmp	r3, #8
 8007e14:	d007      	beq.n	8007e26 <HAL_RCC_OscConfig+0x306>
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	2b18      	cmp	r3, #24
 8007e1a:	d13a      	bne.n	8007e92 <HAL_RCC_OscConfig+0x372>
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	f003 0303 	and.w	r3, r3, #3
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d135      	bne.n	8007e92 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e26:	4b85      	ldr	r3, [pc, #532]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d005      	beq.n	8007e3e <HAL_RCC_OscConfig+0x31e>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	69db      	ldr	r3, [r3, #28]
 8007e36:	2b80      	cmp	r3, #128	; 0x80
 8007e38:	d001      	beq.n	8007e3e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e296      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e3e:	f7fc faf1 	bl	8004424 <HAL_GetREVID>
 8007e42:	4603      	mov	r3, r0
 8007e44:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d817      	bhi.n	8007e7c <HAL_RCC_OscConfig+0x35c>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	2b20      	cmp	r3, #32
 8007e52:	d108      	bne.n	8007e66 <HAL_RCC_OscConfig+0x346>
 8007e54:	4b79      	ldr	r3, [pc, #484]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007e5c:	4a77      	ldr	r2, [pc, #476]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007e5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e62:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e64:	e075      	b.n	8007f52 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e66:	4b75      	ldr	r3, [pc, #468]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	069b      	lsls	r3, r3, #26
 8007e74:	4971      	ldr	r1, [pc, #452]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e7a:	e06a      	b.n	8007f52 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e7c:	4b6f      	ldr	r3, [pc, #444]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	061b      	lsls	r3, r3, #24
 8007e8a:	496c      	ldr	r1, [pc, #432]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e90:	e05f      	b.n	8007f52 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d042      	beq.n	8007f20 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007e9a:	4b68      	ldr	r3, [pc, #416]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a67      	ldr	r2, [pc, #412]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea6:	f7fc fab1 	bl	800440c <HAL_GetTick>
 8007eaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007eac:	e008      	b.n	8007ec0 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007eae:	f7fc faad 	bl	800440c <HAL_GetTick>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d901      	bls.n	8007ec0 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e255      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ec0:	4b5e      	ldr	r3, [pc, #376]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d0f0      	beq.n	8007eae <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ecc:	f7fc faaa 	bl	8004424 <HAL_GetREVID>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	f241 0203 	movw	r2, #4099	; 0x1003
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d817      	bhi.n	8007f0a <HAL_RCC_OscConfig+0x3ea>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	2b20      	cmp	r3, #32
 8007ee0:	d108      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x3d4>
 8007ee2:	4b56      	ldr	r3, [pc, #344]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007eea:	4a54      	ldr	r2, [pc, #336]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007eec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ef0:	6053      	str	r3, [r2, #4]
 8007ef2:	e02e      	b.n	8007f52 <HAL_RCC_OscConfig+0x432>
 8007ef4:	4b51      	ldr	r3, [pc, #324]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	069b      	lsls	r3, r3, #26
 8007f02:	494e      	ldr	r1, [pc, #312]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	604b      	str	r3, [r1, #4]
 8007f08:	e023      	b.n	8007f52 <HAL_RCC_OscConfig+0x432>
 8007f0a:	4b4c      	ldr	r3, [pc, #304]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	061b      	lsls	r3, r3, #24
 8007f18:	4948      	ldr	r1, [pc, #288]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	60cb      	str	r3, [r1, #12]
 8007f1e:	e018      	b.n	8007f52 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007f20:	4b46      	ldr	r3, [pc, #280]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a45      	ldr	r2, [pc, #276]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f2c:	f7fc fa6e 	bl	800440c <HAL_GetTick>
 8007f30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f32:	e008      	b.n	8007f46 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007f34:	f7fc fa6a 	bl	800440c <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e212      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f46:	4b3d      	ldr	r3, [pc, #244]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1f0      	bne.n	8007f34 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0308 	and.w	r3, r3, #8
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d036      	beq.n	8007fcc <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d019      	beq.n	8007f9a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f66:	4b35      	ldr	r3, [pc, #212]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f6a:	4a34      	ldr	r2, [pc, #208]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007f6c:	f043 0301 	orr.w	r3, r3, #1
 8007f70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f72:	f7fc fa4b 	bl	800440c <HAL_GetTick>
 8007f76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f78:	e008      	b.n	8007f8c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007f7a:	f7fc fa47 	bl	800440c <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d901      	bls.n	8007f8c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007f88:	2303      	movs	r3, #3
 8007f8a:	e1ef      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f8c:	4b2b      	ldr	r3, [pc, #172]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f90:	f003 0302 	and.w	r3, r3, #2
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d0f0      	beq.n	8007f7a <HAL_RCC_OscConfig+0x45a>
 8007f98:	e018      	b.n	8007fcc <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f9a:	4b28      	ldr	r3, [pc, #160]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007f9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f9e:	4a27      	ldr	r2, [pc, #156]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007fa0:	f023 0301 	bic.w	r3, r3, #1
 8007fa4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fa6:	f7fc fa31 	bl	800440c <HAL_GetTick>
 8007faa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007fac:	e008      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007fae:	f7fc fa2d 	bl	800440c <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d901      	bls.n	8007fc0 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e1d5      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007fc0:	4b1e      	ldr	r3, [pc, #120]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fc4:	f003 0302 	and.w	r3, r3, #2
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1f0      	bne.n	8007fae <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0320 	and.w	r3, r3, #32
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d039      	beq.n	800804c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d019      	beq.n	8008014 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007fe0:	4b16      	ldr	r3, [pc, #88]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a15      	ldr	r2, [pc, #84]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8007fe6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007fec:	f7fc fa0e 	bl	800440c <HAL_GetTick>
 8007ff0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ff2:	e008      	b.n	8008006 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007ff4:	f7fc fa0a 	bl	800440c <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d901      	bls.n	8008006 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e1b2      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008006:	4b0d      	ldr	r3, [pc, #52]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d0f0      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x4d4>
 8008012:	e01b      	b.n	800804c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008014:	4b09      	ldr	r3, [pc, #36]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a08      	ldr	r2, [pc, #32]	; (800803c <HAL_RCC_OscConfig+0x51c>)
 800801a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800801e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008020:	f7fc f9f4 	bl	800440c <HAL_GetTick>
 8008024:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008026:	e00b      	b.n	8008040 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008028:	f7fc f9f0 	bl	800440c <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	2b02      	cmp	r3, #2
 8008034:	d904      	bls.n	8008040 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e198      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
 800803a:	bf00      	nop
 800803c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008040:	4ba3      	ldr	r3, [pc, #652]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1ed      	bne.n	8008028 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0304 	and.w	r3, r3, #4
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 8081 	beq.w	800815c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800805a:	4b9e      	ldr	r3, [pc, #632]	; (80082d4 <HAL_RCC_OscConfig+0x7b4>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a9d      	ldr	r2, [pc, #628]	; (80082d4 <HAL_RCC_OscConfig+0x7b4>)
 8008060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008064:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008066:	f7fc f9d1 	bl	800440c <HAL_GetTick>
 800806a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800806c:	e008      	b.n	8008080 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800806e:	f7fc f9cd 	bl	800440c <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	2b64      	cmp	r3, #100	; 0x64
 800807a:	d901      	bls.n	8008080 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e175      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008080:	4b94      	ldr	r3, [pc, #592]	; (80082d4 <HAL_RCC_OscConfig+0x7b4>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008088:	2b00      	cmp	r3, #0
 800808a:	d0f0      	beq.n	800806e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d106      	bne.n	80080a2 <HAL_RCC_OscConfig+0x582>
 8008094:	4b8e      	ldr	r3, [pc, #568]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 8008096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008098:	4a8d      	ldr	r2, [pc, #564]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 800809a:	f043 0301 	orr.w	r3, r3, #1
 800809e:	6713      	str	r3, [r2, #112]	; 0x70
 80080a0:	e02d      	b.n	80080fe <HAL_RCC_OscConfig+0x5de>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10c      	bne.n	80080c4 <HAL_RCC_OscConfig+0x5a4>
 80080aa:	4b89      	ldr	r3, [pc, #548]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80080ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ae:	4a88      	ldr	r2, [pc, #544]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80080b0:	f023 0301 	bic.w	r3, r3, #1
 80080b4:	6713      	str	r3, [r2, #112]	; 0x70
 80080b6:	4b86      	ldr	r3, [pc, #536]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80080b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ba:	4a85      	ldr	r2, [pc, #532]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80080bc:	f023 0304 	bic.w	r3, r3, #4
 80080c0:	6713      	str	r3, [r2, #112]	; 0x70
 80080c2:	e01c      	b.n	80080fe <HAL_RCC_OscConfig+0x5de>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	2b05      	cmp	r3, #5
 80080ca:	d10c      	bne.n	80080e6 <HAL_RCC_OscConfig+0x5c6>
 80080cc:	4b80      	ldr	r3, [pc, #512]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80080ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d0:	4a7f      	ldr	r2, [pc, #508]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80080d2:	f043 0304 	orr.w	r3, r3, #4
 80080d6:	6713      	str	r3, [r2, #112]	; 0x70
 80080d8:	4b7d      	ldr	r3, [pc, #500]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80080da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080dc:	4a7c      	ldr	r2, [pc, #496]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80080de:	f043 0301 	orr.w	r3, r3, #1
 80080e2:	6713      	str	r3, [r2, #112]	; 0x70
 80080e4:	e00b      	b.n	80080fe <HAL_RCC_OscConfig+0x5de>
 80080e6:	4b7a      	ldr	r3, [pc, #488]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80080e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ea:	4a79      	ldr	r2, [pc, #484]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80080ec:	f023 0301 	bic.w	r3, r3, #1
 80080f0:	6713      	str	r3, [r2, #112]	; 0x70
 80080f2:	4b77      	ldr	r3, [pc, #476]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80080f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f6:	4a76      	ldr	r2, [pc, #472]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80080f8:	f023 0304 	bic.w	r3, r3, #4
 80080fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d015      	beq.n	8008132 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008106:	f7fc f981 	bl	800440c <HAL_GetTick>
 800810a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800810c:	e00a      	b.n	8008124 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800810e:	f7fc f97d 	bl	800440c <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	f241 3288 	movw	r2, #5000	; 0x1388
 800811c:	4293      	cmp	r3, r2
 800811e:	d901      	bls.n	8008124 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e123      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008124:	4b6a      	ldr	r3, [pc, #424]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 8008126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008128:	f003 0302 	and.w	r3, r3, #2
 800812c:	2b00      	cmp	r3, #0
 800812e:	d0ee      	beq.n	800810e <HAL_RCC_OscConfig+0x5ee>
 8008130:	e014      	b.n	800815c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008132:	f7fc f96b 	bl	800440c <HAL_GetTick>
 8008136:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008138:	e00a      	b.n	8008150 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800813a:	f7fc f967 	bl	800440c <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	f241 3288 	movw	r2, #5000	; 0x1388
 8008148:	4293      	cmp	r3, r2
 800814a:	d901      	bls.n	8008150 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e10d      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008150:	4b5f      	ldr	r3, [pc, #380]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 8008152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1ee      	bne.n	800813a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 8102 	beq.w	800836a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008166:	4b5a      	ldr	r3, [pc, #360]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800816e:	2b18      	cmp	r3, #24
 8008170:	f000 80bd 	beq.w	80082ee <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	2b02      	cmp	r3, #2
 800817a:	f040 8095 	bne.w	80082a8 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800817e:	4b54      	ldr	r3, [pc, #336]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a53      	ldr	r2, [pc, #332]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 8008184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800818a:	f7fc f93f 	bl	800440c <HAL_GetTick>
 800818e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008190:	e008      	b.n	80081a4 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008192:	f7fc f93b 	bl	800440c <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d901      	bls.n	80081a4 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e0e3      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081a4:	4b4a      	ldr	r3, [pc, #296]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1f0      	bne.n	8008192 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081b0:	4b47      	ldr	r3, [pc, #284]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80081b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081b4:	4b48      	ldr	r3, [pc, #288]	; (80082d8 <HAL_RCC_OscConfig+0x7b8>)
 80081b6:	4013      	ands	r3, r2
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80081c0:	0112      	lsls	r2, r2, #4
 80081c2:	430a      	orrs	r2, r1
 80081c4:	4942      	ldr	r1, [pc, #264]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	628b      	str	r3, [r1, #40]	; 0x28
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ce:	3b01      	subs	r3, #1
 80081d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d8:	3b01      	subs	r3, #1
 80081da:	025b      	lsls	r3, r3, #9
 80081dc:	b29b      	uxth	r3, r3
 80081de:	431a      	orrs	r2, r3
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e4:	3b01      	subs	r3, #1
 80081e6:	041b      	lsls	r3, r3, #16
 80081e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80081ec:	431a      	orrs	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f2:	3b01      	subs	r3, #1
 80081f4:	061b      	lsls	r3, r3, #24
 80081f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80081fa:	4935      	ldr	r1, [pc, #212]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80081fc:	4313      	orrs	r3, r2
 80081fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008200:	4b33      	ldr	r3, [pc, #204]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 8008202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008204:	4a32      	ldr	r2, [pc, #200]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 8008206:	f023 0301 	bic.w	r3, r3, #1
 800820a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800820c:	4b30      	ldr	r3, [pc, #192]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 800820e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008210:	4b32      	ldr	r3, [pc, #200]	; (80082dc <HAL_RCC_OscConfig+0x7bc>)
 8008212:	4013      	ands	r3, r2
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008218:	00d2      	lsls	r2, r2, #3
 800821a:	492d      	ldr	r1, [pc, #180]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 800821c:	4313      	orrs	r3, r2
 800821e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008220:	4b2b      	ldr	r3, [pc, #172]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	f023 020c 	bic.w	r2, r3, #12
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	4928      	ldr	r1, [pc, #160]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 800822e:	4313      	orrs	r3, r2
 8008230:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008232:	4b27      	ldr	r3, [pc, #156]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 8008234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008236:	f023 0202 	bic.w	r2, r3, #2
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800823e:	4924      	ldr	r1, [pc, #144]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 8008240:	4313      	orrs	r3, r2
 8008242:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008244:	4b22      	ldr	r3, [pc, #136]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 8008246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008248:	4a21      	ldr	r2, [pc, #132]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 800824a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800824e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008250:	4b1f      	ldr	r3, [pc, #124]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 8008252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008254:	4a1e      	ldr	r2, [pc, #120]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 8008256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800825a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800825c:	4b1c      	ldr	r3, [pc, #112]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	4a1b      	ldr	r2, [pc, #108]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 8008262:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008268:	4b19      	ldr	r3, [pc, #100]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 800826a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800826c:	4a18      	ldr	r2, [pc, #96]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 800826e:	f043 0301 	orr.w	r3, r3, #1
 8008272:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008274:	4b16      	ldr	r3, [pc, #88]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a15      	ldr	r2, [pc, #84]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 800827a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800827e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008280:	f7fc f8c4 	bl	800440c <HAL_GetTick>
 8008284:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008286:	e008      	b.n	800829a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008288:	f7fc f8c0 	bl	800440c <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	2b02      	cmp	r3, #2
 8008294:	d901      	bls.n	800829a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e068      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800829a:	4b0d      	ldr	r3, [pc, #52]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0f0      	beq.n	8008288 <HAL_RCC_OscConfig+0x768>
 80082a6:	e060      	b.n	800836a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082a8:	4b09      	ldr	r3, [pc, #36]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a08      	ldr	r2, [pc, #32]	; (80082d0 <HAL_RCC_OscConfig+0x7b0>)
 80082ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082b4:	f7fc f8aa 	bl	800440c <HAL_GetTick>
 80082b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082ba:	e011      	b.n	80082e0 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082bc:	f7fc f8a6 	bl	800440c <HAL_GetTick>
 80082c0:	4602      	mov	r2, r0
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	1ad3      	subs	r3, r2, r3
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d90a      	bls.n	80082e0 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e04e      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
 80082ce:	bf00      	nop
 80082d0:	58024400 	.word	0x58024400
 80082d4:	58024800 	.word	0x58024800
 80082d8:	fffffc0c 	.word	0xfffffc0c
 80082dc:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082e0:	4b24      	ldr	r3, [pc, #144]	; (8008374 <HAL_RCC_OscConfig+0x854>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1e7      	bne.n	80082bc <HAL_RCC_OscConfig+0x79c>
 80082ec:	e03d      	b.n	800836a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80082ee:	4b21      	ldr	r3, [pc, #132]	; (8008374 <HAL_RCC_OscConfig+0x854>)
 80082f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80082f4:	4b1f      	ldr	r3, [pc, #124]	; (8008374 <HAL_RCC_OscConfig+0x854>)
 80082f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d031      	beq.n	8008366 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	f003 0203 	and.w	r2, r3, #3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800830c:	429a      	cmp	r2, r3
 800830e:	d12a      	bne.n	8008366 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	091b      	lsrs	r3, r3, #4
 8008314:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800831c:	429a      	cmp	r2, r3
 800831e:	d122      	bne.n	8008366 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800832c:	429a      	cmp	r2, r3
 800832e:	d11a      	bne.n	8008366 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	0a5b      	lsrs	r3, r3, #9
 8008334:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800833c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800833e:	429a      	cmp	r2, r3
 8008340:	d111      	bne.n	8008366 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	0c1b      	lsrs	r3, r3, #16
 8008346:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008350:	429a      	cmp	r2, r3
 8008352:	d108      	bne.n	8008366 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	0e1b      	lsrs	r3, r3, #24
 8008358:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008360:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008362:	429a      	cmp	r2, r3
 8008364:	d001      	beq.n	800836a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e000      	b.n	800836c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3730      	adds	r7, #48	; 0x30
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	58024400 	.word	0x58024400

08008378 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d101      	bne.n	800838c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e19c      	b.n	80086c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800838c:	4b8a      	ldr	r3, [pc, #552]	; (80085b8 <HAL_RCC_ClockConfig+0x240>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 030f 	and.w	r3, r3, #15
 8008394:	683a      	ldr	r2, [r7, #0]
 8008396:	429a      	cmp	r2, r3
 8008398:	d910      	bls.n	80083bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800839a:	4b87      	ldr	r3, [pc, #540]	; (80085b8 <HAL_RCC_ClockConfig+0x240>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f023 020f 	bic.w	r2, r3, #15
 80083a2:	4985      	ldr	r1, [pc, #532]	; (80085b8 <HAL_RCC_ClockConfig+0x240>)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083aa:	4b83      	ldr	r3, [pc, #524]	; (80085b8 <HAL_RCC_ClockConfig+0x240>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 030f 	and.w	r3, r3, #15
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d001      	beq.n	80083bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e184      	b.n	80086c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0304 	and.w	r3, r3, #4
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d010      	beq.n	80083ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	691a      	ldr	r2, [r3, #16]
 80083cc:	4b7b      	ldr	r3, [pc, #492]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d908      	bls.n	80083ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083d8:	4b78      	ldr	r3, [pc, #480]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	691b      	ldr	r3, [r3, #16]
 80083e4:	4975      	ldr	r1, [pc, #468]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0308 	and.w	r3, r3, #8
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d010      	beq.n	8008418 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	695a      	ldr	r2, [r3, #20]
 80083fa:	4b70      	ldr	r3, [pc, #448]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80083fc:	69db      	ldr	r3, [r3, #28]
 80083fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008402:	429a      	cmp	r2, r3
 8008404:	d908      	bls.n	8008418 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008406:	4b6d      	ldr	r3, [pc, #436]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008408:	69db      	ldr	r3, [r3, #28]
 800840a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	496a      	ldr	r1, [pc, #424]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008414:	4313      	orrs	r3, r2
 8008416:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0310 	and.w	r3, r3, #16
 8008420:	2b00      	cmp	r3, #0
 8008422:	d010      	beq.n	8008446 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	699a      	ldr	r2, [r3, #24]
 8008428:	4b64      	ldr	r3, [pc, #400]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008430:	429a      	cmp	r2, r3
 8008432:	d908      	bls.n	8008446 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008434:	4b61      	ldr	r3, [pc, #388]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	495e      	ldr	r1, [pc, #376]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008442:	4313      	orrs	r3, r2
 8008444:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0320 	and.w	r3, r3, #32
 800844e:	2b00      	cmp	r3, #0
 8008450:	d010      	beq.n	8008474 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	69da      	ldr	r2, [r3, #28]
 8008456:	4b59      	ldr	r3, [pc, #356]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800845e:	429a      	cmp	r2, r3
 8008460:	d908      	bls.n	8008474 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008462:	4b56      	ldr	r3, [pc, #344]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	4953      	ldr	r1, [pc, #332]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008470:	4313      	orrs	r3, r2
 8008472:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0302 	and.w	r3, r3, #2
 800847c:	2b00      	cmp	r3, #0
 800847e:	d010      	beq.n	80084a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68da      	ldr	r2, [r3, #12]
 8008484:	4b4d      	ldr	r3, [pc, #308]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	f003 030f 	and.w	r3, r3, #15
 800848c:	429a      	cmp	r2, r3
 800848e:	d908      	bls.n	80084a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008490:	4b4a      	ldr	r3, [pc, #296]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	f023 020f 	bic.w	r2, r3, #15
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	4947      	ldr	r1, [pc, #284]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d055      	beq.n	800855a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80084ae:	4b43      	ldr	r3, [pc, #268]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	4940      	ldr	r1, [pc, #256]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d107      	bne.n	80084d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084c8:	4b3c      	ldr	r3, [pc, #240]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d121      	bne.n	8008518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e0f6      	b.n	80086c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	2b03      	cmp	r3, #3
 80084de:	d107      	bne.n	80084f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084e0:	4b36      	ldr	r3, [pc, #216]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d115      	bne.n	8008518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	e0ea      	b.n	80086c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d107      	bne.n	8008508 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084f8:	4b30      	ldr	r3, [pc, #192]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008500:	2b00      	cmp	r3, #0
 8008502:	d109      	bne.n	8008518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e0de      	b.n	80086c6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008508:	4b2c      	ldr	r3, [pc, #176]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e0d6      	b.n	80086c6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008518:	4b28      	ldr	r3, [pc, #160]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	f023 0207 	bic.w	r2, r3, #7
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	4925      	ldr	r1, [pc, #148]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008526:	4313      	orrs	r3, r2
 8008528:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800852a:	f7fb ff6f 	bl	800440c <HAL_GetTick>
 800852e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008530:	e00a      	b.n	8008548 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008532:	f7fb ff6b 	bl	800440c <HAL_GetTick>
 8008536:	4602      	mov	r2, r0
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	1ad3      	subs	r3, r2, r3
 800853c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008540:	4293      	cmp	r3, r2
 8008542:	d901      	bls.n	8008548 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e0be      	b.n	80086c6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008548:	4b1c      	ldr	r3, [pc, #112]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	00db      	lsls	r3, r3, #3
 8008556:	429a      	cmp	r2, r3
 8008558:	d1eb      	bne.n	8008532 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0302 	and.w	r3, r3, #2
 8008562:	2b00      	cmp	r3, #0
 8008564:	d010      	beq.n	8008588 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	68da      	ldr	r2, [r3, #12]
 800856a:	4b14      	ldr	r3, [pc, #80]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	f003 030f 	and.w	r3, r3, #15
 8008572:	429a      	cmp	r2, r3
 8008574:	d208      	bcs.n	8008588 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008576:	4b11      	ldr	r3, [pc, #68]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	f023 020f 	bic.w	r2, r3, #15
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	490e      	ldr	r1, [pc, #56]	; (80085bc <HAL_RCC_ClockConfig+0x244>)
 8008584:	4313      	orrs	r3, r2
 8008586:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008588:	4b0b      	ldr	r3, [pc, #44]	; (80085b8 <HAL_RCC_ClockConfig+0x240>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 030f 	and.w	r3, r3, #15
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	429a      	cmp	r2, r3
 8008594:	d214      	bcs.n	80085c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008596:	4b08      	ldr	r3, [pc, #32]	; (80085b8 <HAL_RCC_ClockConfig+0x240>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f023 020f 	bic.w	r2, r3, #15
 800859e:	4906      	ldr	r1, [pc, #24]	; (80085b8 <HAL_RCC_ClockConfig+0x240>)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085a6:	4b04      	ldr	r3, [pc, #16]	; (80085b8 <HAL_RCC_ClockConfig+0x240>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 030f 	and.w	r3, r3, #15
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d005      	beq.n	80085c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e086      	b.n	80086c6 <HAL_RCC_ClockConfig+0x34e>
 80085b8:	52002000 	.word	0x52002000
 80085bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d010      	beq.n	80085ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	691a      	ldr	r2, [r3, #16]
 80085d0:	4b3f      	ldr	r3, [pc, #252]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085d8:	429a      	cmp	r2, r3
 80085da:	d208      	bcs.n	80085ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085dc:	4b3c      	ldr	r3, [pc, #240]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	4939      	ldr	r1, [pc, #228]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0308 	and.w	r3, r3, #8
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d010      	beq.n	800861c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	695a      	ldr	r2, [r3, #20]
 80085fe:	4b34      	ldr	r3, [pc, #208]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 8008600:	69db      	ldr	r3, [r3, #28]
 8008602:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008606:	429a      	cmp	r2, r3
 8008608:	d208      	bcs.n	800861c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800860a:	4b31      	ldr	r3, [pc, #196]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	492e      	ldr	r1, [pc, #184]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 8008618:	4313      	orrs	r3, r2
 800861a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0310 	and.w	r3, r3, #16
 8008624:	2b00      	cmp	r3, #0
 8008626:	d010      	beq.n	800864a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	699a      	ldr	r2, [r3, #24]
 800862c:	4b28      	ldr	r3, [pc, #160]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008634:	429a      	cmp	r2, r3
 8008636:	d208      	bcs.n	800864a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008638:	4b25      	ldr	r3, [pc, #148]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	4922      	ldr	r1, [pc, #136]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 8008646:	4313      	orrs	r3, r2
 8008648:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0320 	and.w	r3, r3, #32
 8008652:	2b00      	cmp	r3, #0
 8008654:	d010      	beq.n	8008678 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	69da      	ldr	r2, [r3, #28]
 800865a:	4b1d      	ldr	r3, [pc, #116]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008662:	429a      	cmp	r2, r3
 8008664:	d208      	bcs.n	8008678 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008666:	4b1a      	ldr	r3, [pc, #104]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 8008668:	6a1b      	ldr	r3, [r3, #32]
 800866a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	4917      	ldr	r1, [pc, #92]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 8008674:	4313      	orrs	r3, r2
 8008676:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008678:	f000 f834 	bl	80086e4 <HAL_RCC_GetSysClockFreq>
 800867c:	4602      	mov	r2, r0
 800867e:	4b14      	ldr	r3, [pc, #80]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	0a1b      	lsrs	r3, r3, #8
 8008684:	f003 030f 	and.w	r3, r3, #15
 8008688:	4912      	ldr	r1, [pc, #72]	; (80086d4 <HAL_RCC_ClockConfig+0x35c>)
 800868a:	5ccb      	ldrb	r3, [r1, r3]
 800868c:	f003 031f 	and.w	r3, r3, #31
 8008690:	fa22 f303 	lsr.w	r3, r2, r3
 8008694:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008696:	4b0e      	ldr	r3, [pc, #56]	; (80086d0 <HAL_RCC_ClockConfig+0x358>)
 8008698:	699b      	ldr	r3, [r3, #24]
 800869a:	f003 030f 	and.w	r3, r3, #15
 800869e:	4a0d      	ldr	r2, [pc, #52]	; (80086d4 <HAL_RCC_ClockConfig+0x35c>)
 80086a0:	5cd3      	ldrb	r3, [r2, r3]
 80086a2:	f003 031f 	and.w	r3, r3, #31
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	fa22 f303 	lsr.w	r3, r2, r3
 80086ac:	4a0a      	ldr	r2, [pc, #40]	; (80086d8 <HAL_RCC_ClockConfig+0x360>)
 80086ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086b0:	4a0a      	ldr	r2, [pc, #40]	; (80086dc <HAL_RCC_ClockConfig+0x364>)
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80086b6:	4b0a      	ldr	r3, [pc, #40]	; (80086e0 <HAL_RCC_ClockConfig+0x368>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fb fe5c 	bl	8004378 <HAL_InitTick>
 80086c0:	4603      	mov	r3, r0
 80086c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	58024400 	.word	0x58024400
 80086d4:	08010a10 	.word	0x08010a10
 80086d8:	2400001c 	.word	0x2400001c
 80086dc:	24000018 	.word	0x24000018
 80086e0:	24000020 	.word	0x24000020

080086e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b089      	sub	sp, #36	; 0x24
 80086e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086ea:	4bb3      	ldr	r3, [pc, #716]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086f2:	2b18      	cmp	r3, #24
 80086f4:	f200 8155 	bhi.w	80089a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80086f8:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <HAL_RCC_GetSysClockFreq+0x1c>)
 80086fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fe:	bf00      	nop
 8008700:	08008765 	.word	0x08008765
 8008704:	080089a3 	.word	0x080089a3
 8008708:	080089a3 	.word	0x080089a3
 800870c:	080089a3 	.word	0x080089a3
 8008710:	080089a3 	.word	0x080089a3
 8008714:	080089a3 	.word	0x080089a3
 8008718:	080089a3 	.word	0x080089a3
 800871c:	080089a3 	.word	0x080089a3
 8008720:	0800878b 	.word	0x0800878b
 8008724:	080089a3 	.word	0x080089a3
 8008728:	080089a3 	.word	0x080089a3
 800872c:	080089a3 	.word	0x080089a3
 8008730:	080089a3 	.word	0x080089a3
 8008734:	080089a3 	.word	0x080089a3
 8008738:	080089a3 	.word	0x080089a3
 800873c:	080089a3 	.word	0x080089a3
 8008740:	08008791 	.word	0x08008791
 8008744:	080089a3 	.word	0x080089a3
 8008748:	080089a3 	.word	0x080089a3
 800874c:	080089a3 	.word	0x080089a3
 8008750:	080089a3 	.word	0x080089a3
 8008754:	080089a3 	.word	0x080089a3
 8008758:	080089a3 	.word	0x080089a3
 800875c:	080089a3 	.word	0x080089a3
 8008760:	08008797 	.word	0x08008797
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008764:	4b94      	ldr	r3, [pc, #592]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b00      	cmp	r3, #0
 800876e:	d009      	beq.n	8008784 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008770:	4b91      	ldr	r3, [pc, #580]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	08db      	lsrs	r3, r3, #3
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	4a90      	ldr	r2, [pc, #576]	; (80089bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800877c:	fa22 f303 	lsr.w	r3, r2, r3
 8008780:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008782:	e111      	b.n	80089a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008784:	4b8d      	ldr	r3, [pc, #564]	; (80089bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008786:	61bb      	str	r3, [r7, #24]
    break;
 8008788:	e10e      	b.n	80089a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800878a:	4b8d      	ldr	r3, [pc, #564]	; (80089c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800878c:	61bb      	str	r3, [r7, #24]
    break;
 800878e:	e10b      	b.n	80089a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008790:	4b8c      	ldr	r3, [pc, #560]	; (80089c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008792:	61bb      	str	r3, [r7, #24]
    break;
 8008794:	e108      	b.n	80089a8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008796:	4b88      	ldr	r3, [pc, #544]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879a:	f003 0303 	and.w	r3, r3, #3
 800879e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80087a0:	4b85      	ldr	r3, [pc, #532]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	091b      	lsrs	r3, r3, #4
 80087a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80087ac:	4b82      	ldr	r3, [pc, #520]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b0:	f003 0301 	and.w	r3, r3, #1
 80087b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80087b6:	4b80      	ldr	r3, [pc, #512]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ba:	08db      	lsrs	r3, r3, #3
 80087bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	fb02 f303 	mul.w	r3, r2, r3
 80087c6:	ee07 3a90 	vmov	s15, r3
 80087ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f000 80e1 	beq.w	800899c <HAL_RCC_GetSysClockFreq+0x2b8>
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	2b02      	cmp	r3, #2
 80087de:	f000 8083 	beq.w	80088e8 <HAL_RCC_GetSysClockFreq+0x204>
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	f200 80a1 	bhi.w	800892c <HAL_RCC_GetSysClockFreq+0x248>
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d003      	beq.n	80087f8 <HAL_RCC_GetSysClockFreq+0x114>
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d056      	beq.n	80088a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80087f6:	e099      	b.n	800892c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087f8:	4b6f      	ldr	r3, [pc, #444]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f003 0320 	and.w	r3, r3, #32
 8008800:	2b00      	cmp	r3, #0
 8008802:	d02d      	beq.n	8008860 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008804:	4b6c      	ldr	r3, [pc, #432]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	08db      	lsrs	r3, r3, #3
 800880a:	f003 0303 	and.w	r3, r3, #3
 800880e:	4a6b      	ldr	r2, [pc, #428]	; (80089bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008810:	fa22 f303 	lsr.w	r3, r2, r3
 8008814:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	ee07 3a90 	vmov	s15, r3
 800881c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800882a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800882e:	4b62      	ldr	r3, [pc, #392]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008836:	ee07 3a90 	vmov	s15, r3
 800883a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800883e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008842:	eddf 5a61 	vldr	s11, [pc, #388]	; 80089c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800884a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800884e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800885a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800885e:	e087      	b.n	8008970 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	ee07 3a90 	vmov	s15, r3
 8008866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800886a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80089cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800886e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008872:	4b51      	ldr	r3, [pc, #324]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800887a:	ee07 3a90 	vmov	s15, r3
 800887e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008882:	ed97 6a02 	vldr	s12, [r7, #8]
 8008886:	eddf 5a50 	vldr	s11, [pc, #320]	; 80089c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800888a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800888e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800889a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800889e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088a2:	e065      	b.n	8008970 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	ee07 3a90 	vmov	s15, r3
 80088aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ae:	eddf 6a48 	vldr	s13, [pc, #288]	; 80089d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80088b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088b6:	4b40      	ldr	r3, [pc, #256]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088be:	ee07 3a90 	vmov	s15, r3
 80088c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80088ca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80089c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088e6:	e043      	b.n	8008970 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	ee07 3a90 	vmov	s15, r3
 80088ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088f2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80089d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80088f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088fa:	4b2f      	ldr	r3, [pc, #188]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008902:	ee07 3a90 	vmov	s15, r3
 8008906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800890a:	ed97 6a02 	vldr	s12, [r7, #8]
 800890e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80089c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800891a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800891e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800892a:	e021      	b.n	8008970 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	ee07 3a90 	vmov	s15, r3
 8008932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008936:	eddf 6a26 	vldr	s13, [pc, #152]	; 80089d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800893a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800893e:	4b1e      	ldr	r3, [pc, #120]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008946:	ee07 3a90 	vmov	s15, r3
 800894a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800894e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008952:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80089c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800895a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800895e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800896a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800896e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008970:	4b11      	ldr	r3, [pc, #68]	; (80089b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008974:	0a5b      	lsrs	r3, r3, #9
 8008976:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800897a:	3301      	adds	r3, #1
 800897c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	ee07 3a90 	vmov	s15, r3
 8008984:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008988:	edd7 6a07 	vldr	s13, [r7, #28]
 800898c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008994:	ee17 3a90 	vmov	r3, s15
 8008998:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800899a:	e005      	b.n	80089a8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800899c:	2300      	movs	r3, #0
 800899e:	61bb      	str	r3, [r7, #24]
    break;
 80089a0:	e002      	b.n	80089a8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80089a2:	4b07      	ldr	r3, [pc, #28]	; (80089c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089a4:	61bb      	str	r3, [r7, #24]
    break;
 80089a6:	bf00      	nop
  }

  return sysclockfreq;
 80089a8:	69bb      	ldr	r3, [r7, #24]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3724      	adds	r7, #36	; 0x24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	58024400 	.word	0x58024400
 80089bc:	03d09000 	.word	0x03d09000
 80089c0:	003d0900 	.word	0x003d0900
 80089c4:	02dc6c00 	.word	0x02dc6c00
 80089c8:	46000000 	.word	0x46000000
 80089cc:	4c742400 	.word	0x4c742400
 80089d0:	4a742400 	.word	0x4a742400
 80089d4:	4c371b00 	.word	0x4c371b00

080089d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089de:	f7ff fe81 	bl	80086e4 <HAL_RCC_GetSysClockFreq>
 80089e2:	4602      	mov	r2, r0
 80089e4:	4b10      	ldr	r3, [pc, #64]	; (8008a28 <HAL_RCC_GetHCLKFreq+0x50>)
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	0a1b      	lsrs	r3, r3, #8
 80089ea:	f003 030f 	and.w	r3, r3, #15
 80089ee:	490f      	ldr	r1, [pc, #60]	; (8008a2c <HAL_RCC_GetHCLKFreq+0x54>)
 80089f0:	5ccb      	ldrb	r3, [r1, r3]
 80089f2:	f003 031f 	and.w	r3, r3, #31
 80089f6:	fa22 f303 	lsr.w	r3, r2, r3
 80089fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089fc:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <HAL_RCC_GetHCLKFreq+0x50>)
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	f003 030f 	and.w	r3, r3, #15
 8008a04:	4a09      	ldr	r2, [pc, #36]	; (8008a2c <HAL_RCC_GetHCLKFreq+0x54>)
 8008a06:	5cd3      	ldrb	r3, [r2, r3]
 8008a08:	f003 031f 	and.w	r3, r3, #31
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a12:	4a07      	ldr	r2, [pc, #28]	; (8008a30 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a16:	4a07      	ldr	r2, [pc, #28]	; (8008a34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008a1c:	4b04      	ldr	r3, [pc, #16]	; (8008a30 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	58024400 	.word	0x58024400
 8008a2c:	08010a10 	.word	0x08010a10
 8008a30:	2400001c 	.word	0x2400001c
 8008a34:	24000018 	.word	0x24000018

08008a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008a3c:	f7ff ffcc 	bl	80089d8 <HAL_RCC_GetHCLKFreq>
 8008a40:	4602      	mov	r2, r0
 8008a42:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a44:	69db      	ldr	r3, [r3, #28]
 8008a46:	091b      	lsrs	r3, r3, #4
 8008a48:	f003 0307 	and.w	r3, r3, #7
 8008a4c:	4904      	ldr	r1, [pc, #16]	; (8008a60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a4e:	5ccb      	ldrb	r3, [r1, r3]
 8008a50:	f003 031f 	and.w	r3, r3, #31
 8008a54:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	58024400 	.word	0x58024400
 8008a60:	08010a10 	.word	0x08010a10

08008a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a68:	f7ff ffb6 	bl	80089d8 <HAL_RCC_GetHCLKFreq>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	4b06      	ldr	r3, [pc, #24]	; (8008a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	0a1b      	lsrs	r3, r3, #8
 8008a74:	f003 0307 	and.w	r3, r3, #7
 8008a78:	4904      	ldr	r1, [pc, #16]	; (8008a8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a7a:	5ccb      	ldrb	r3, [r1, r3]
 8008a7c:	f003 031f 	and.w	r3, r3, #31
 8008a80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	58024400 	.word	0x58024400
 8008a8c:	08010a10 	.word	0x08010a10

08008a90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008a98:	2300      	movs	r3, #0
 8008a9a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d03f      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ab0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ab4:	d02a      	beq.n	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008ab6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aba:	d824      	bhi.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008abc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ac0:	d018      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008ac2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ac6:	d81e      	bhi.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d003      	beq.n	8008ad4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008acc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ad0:	d007      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008ad2:	e018      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ad4:	4bab      	ldr	r3, [pc, #684]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad8:	4aaa      	ldr	r2, [pc, #680]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ade:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008ae0:	e015      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	2102      	movs	r1, #2
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f001 f9cf 	bl	8009e8c <RCCEx_PLL2_Config>
 8008aee:	4603      	mov	r3, r0
 8008af0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008af2:	e00c      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3324      	adds	r3, #36	; 0x24
 8008af8:	2102      	movs	r1, #2
 8008afa:	4618      	mov	r0, r3
 8008afc:	f001 fa78 	bl	8009ff0 <RCCEx_PLL3_Config>
 8008b00:	4603      	mov	r3, r0
 8008b02:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008b04:	e003      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	75fb      	strb	r3, [r7, #23]
      break;
 8008b0a:	e000      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b0e:	7dfb      	ldrb	r3, [r7, #23]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d109      	bne.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b14:	4b9b      	ldr	r3, [pc, #620]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b20:	4998      	ldr	r1, [pc, #608]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b22:	4313      	orrs	r3, r2
 8008b24:	650b      	str	r3, [r1, #80]	; 0x50
 8008b26:	e001      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b28:	7dfb      	ldrb	r3, [r7, #23]
 8008b2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d03d      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b3c:	2b04      	cmp	r3, #4
 8008b3e:	d826      	bhi.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008b40:	a201      	add	r2, pc, #4	; (adr r2, 8008b48 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b46:	bf00      	nop
 8008b48:	08008b5d 	.word	0x08008b5d
 8008b4c:	08008b6b 	.word	0x08008b6b
 8008b50:	08008b7d 	.word	0x08008b7d
 8008b54:	08008b95 	.word	0x08008b95
 8008b58:	08008b95 	.word	0x08008b95
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b5c:	4b89      	ldr	r3, [pc, #548]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b60:	4a88      	ldr	r2, [pc, #544]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b68:	e015      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	2100      	movs	r1, #0
 8008b70:	4618      	mov	r0, r3
 8008b72:	f001 f98b 	bl	8009e8c <RCCEx_PLL2_Config>
 8008b76:	4603      	mov	r3, r0
 8008b78:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b7a:	e00c      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3324      	adds	r3, #36	; 0x24
 8008b80:	2100      	movs	r1, #0
 8008b82:	4618      	mov	r0, r3
 8008b84:	f001 fa34 	bl	8009ff0 <RCCEx_PLL3_Config>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008b8c:	e003      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	75fb      	strb	r3, [r7, #23]
      break;
 8008b92:	e000      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d109      	bne.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b9c:	4b79      	ldr	r3, [pc, #484]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba0:	f023 0207 	bic.w	r2, r3, #7
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba8:	4976      	ldr	r1, [pc, #472]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008baa:	4313      	orrs	r3, r2
 8008bac:	650b      	str	r3, [r1, #80]	; 0x50
 8008bae:	e001      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bb0:	7dfb      	ldrb	r3, [r7, #23]
 8008bb2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d042      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bc8:	d02b      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bce:	d825      	bhi.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008bd0:	2bc0      	cmp	r3, #192	; 0xc0
 8008bd2:	d028      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008bd4:	2bc0      	cmp	r3, #192	; 0xc0
 8008bd6:	d821      	bhi.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008bd8:	2b80      	cmp	r3, #128	; 0x80
 8008bda:	d016      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008bdc:	2b80      	cmp	r3, #128	; 0x80
 8008bde:	d81d      	bhi.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d002      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008be4:	2b40      	cmp	r3, #64	; 0x40
 8008be6:	d007      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008be8:	e018      	b.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bea:	4b66      	ldr	r3, [pc, #408]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bee:	4a65      	ldr	r2, [pc, #404]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008bf6:	e017      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3304      	adds	r3, #4
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f001 f944 	bl	8009e8c <RCCEx_PLL2_Config>
 8008c04:	4603      	mov	r3, r0
 8008c06:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008c08:	e00e      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	3324      	adds	r3, #36	; 0x24
 8008c0e:	2100      	movs	r1, #0
 8008c10:	4618      	mov	r0, r3
 8008c12:	f001 f9ed 	bl	8009ff0 <RCCEx_PLL3_Config>
 8008c16:	4603      	mov	r3, r0
 8008c18:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008c1a:	e005      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c20:	e002      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008c22:	bf00      	nop
 8008c24:	e000      	b.n	8008c28 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c28:	7dfb      	ldrb	r3, [r7, #23]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d109      	bne.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008c2e:	4b55      	ldr	r3, [pc, #340]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c32:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c3a:	4952      	ldr	r1, [pc, #328]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	650b      	str	r3, [r1, #80]	; 0x50
 8008c40:	e001      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c42:	7dfb      	ldrb	r3, [r7, #23]
 8008c44:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d049      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c5c:	d030      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008c5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008c62:	d82a      	bhi.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008c64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008c68:	d02c      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008c6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008c6e:	d824      	bhi.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008c70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c74:	d018      	beq.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c7a:	d81e      	bhi.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d003      	beq.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008c80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c84:	d007      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008c86:	e018      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c88:	4b3e      	ldr	r3, [pc, #248]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8c:	4a3d      	ldr	r2, [pc, #244]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008c94:	e017      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3304      	adds	r3, #4
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f001 f8f5 	bl	8009e8c <RCCEx_PLL2_Config>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008ca6:	e00e      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3324      	adds	r3, #36	; 0x24
 8008cac:	2100      	movs	r1, #0
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f001 f99e 	bl	8009ff0 <RCCEx_PLL3_Config>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008cb8:	e005      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	75fb      	strb	r3, [r7, #23]
      break;
 8008cbe:	e002      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008cc0:	bf00      	nop
 8008cc2:	e000      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008cc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10a      	bne.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008ccc:	4b2d      	ldr	r3, [pc, #180]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008cda:	492a      	ldr	r1, [pc, #168]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	658b      	str	r3, [r1, #88]	; 0x58
 8008ce0:	e001      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ce2:	7dfb      	ldrb	r3, [r7, #23]
 8008ce4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d04c      	beq.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008cf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008cfc:	d030      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008cfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d02:	d82a      	bhi.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d08:	d02c      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008d0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d0e:	d824      	bhi.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d14:	d018      	beq.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008d16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d1a:	d81e      	bhi.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008d20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d24:	d007      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008d26:	e018      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d28:	4b16      	ldr	r3, [pc, #88]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2c:	4a15      	ldr	r2, [pc, #84]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d34:	e017      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f001 f8a5 	bl	8009e8c <RCCEx_PLL2_Config>
 8008d42:	4603      	mov	r3, r0
 8008d44:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008d46:	e00e      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3324      	adds	r3, #36	; 0x24
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f001 f94e 	bl	8009ff0 <RCCEx_PLL3_Config>
 8008d54:	4603      	mov	r3, r0
 8008d56:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d58:	e005      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d5e:	e002      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008d60:	bf00      	nop
 8008d62:	e000      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d66:	7dfb      	ldrb	r3, [r7, #23]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10d      	bne.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008d6c:	4b05      	ldr	r3, [pc, #20]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d70:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d7a:	4902      	ldr	r1, [pc, #8]	; (8008d84 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	658b      	str	r3, [r1, #88]	; 0x58
 8008d80:	e004      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008d82:	bf00      	nop
 8008d84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d032      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d9c:	2b30      	cmp	r3, #48	; 0x30
 8008d9e:	d01c      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008da0:	2b30      	cmp	r3, #48	; 0x30
 8008da2:	d817      	bhi.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008da4:	2b20      	cmp	r3, #32
 8008da6:	d00c      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008da8:	2b20      	cmp	r3, #32
 8008daa:	d813      	bhi.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d016      	beq.n	8008dde <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008db0:	2b10      	cmp	r3, #16
 8008db2:	d10f      	bne.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008db4:	4baf      	ldr	r3, [pc, #700]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db8:	4aae      	ldr	r2, [pc, #696]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008dc0:	e00e      	b.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	2102      	movs	r1, #2
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f001 f85f 	bl	8009e8c <RCCEx_PLL2_Config>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008dd2:	e005      	b.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8008dd8:	e002      	b.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008dda:	bf00      	nop
 8008ddc:	e000      	b.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008de0:	7dfb      	ldrb	r3, [r7, #23]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d109      	bne.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008de6:	4ba3      	ldr	r3, [pc, #652]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008df2:	49a0      	ldr	r1, [pc, #640]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008df4:	4313      	orrs	r3, r2
 8008df6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008df8:	e001      	b.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dfa:	7dfb      	ldrb	r3, [r7, #23]
 8008dfc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d047      	beq.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e12:	d030      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8008e14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e18:	d82a      	bhi.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008e1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e1e:	d02c      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8008e20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e24:	d824      	bhi.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e2a:	d018      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8008e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e30:	d81e      	bhi.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d003      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8008e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e3a:	d007      	beq.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8008e3c:	e018      	b.n	8008e70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e3e:	4b8d      	ldr	r3, [pc, #564]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e42:	4a8c      	ldr	r2, [pc, #560]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008e4a:	e017      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	3304      	adds	r3, #4
 8008e50:	2100      	movs	r1, #0
 8008e52:	4618      	mov	r0, r3
 8008e54:	f001 f81a 	bl	8009e8c <RCCEx_PLL2_Config>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008e5c:	e00e      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	3324      	adds	r3, #36	; 0x24
 8008e62:	2100      	movs	r1, #0
 8008e64:	4618      	mov	r0, r3
 8008e66:	f001 f8c3 	bl	8009ff0 <RCCEx_PLL3_Config>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008e6e:	e005      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	75fb      	strb	r3, [r7, #23]
      break;
 8008e74:	e002      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008e76:	bf00      	nop
 8008e78:	e000      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e7c:	7dfb      	ldrb	r3, [r7, #23]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d109      	bne.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008e82:	4b7c      	ldr	r3, [pc, #496]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e86:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e8e:	4979      	ldr	r1, [pc, #484]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	650b      	str	r3, [r1, #80]	; 0x50
 8008e94:	e001      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e96:	7dfb      	ldrb	r3, [r7, #23]
 8008e98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d049      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008eaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008eae:	d02e      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008eb4:	d828      	bhi.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008eb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008eba:	d02a      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008ebc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ec0:	d822      	bhi.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008ec2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ec6:	d026      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008ec8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ecc:	d81c      	bhi.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008ece:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ed2:	d010      	beq.n	8008ef6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8008ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ed8:	d816      	bhi.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d01d      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ee2:	d111      	bne.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	3304      	adds	r3, #4
 8008ee8:	2101      	movs	r1, #1
 8008eea:	4618      	mov	r0, r3
 8008eec:	f000 ffce 	bl	8009e8c <RCCEx_PLL2_Config>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008ef4:	e012      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	3324      	adds	r3, #36	; 0x24
 8008efa:	2101      	movs	r1, #1
 8008efc:	4618      	mov	r0, r3
 8008efe:	f001 f877 	bl	8009ff0 <RCCEx_PLL3_Config>
 8008f02:	4603      	mov	r3, r0
 8008f04:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008f06:	e009      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f0c:	e006      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f0e:	bf00      	nop
 8008f10:	e004      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f12:	bf00      	nop
 8008f14:	e002      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f16:	bf00      	nop
 8008f18:	e000      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d109      	bne.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008f22:	4b54      	ldr	r3, [pc, #336]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f26:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f2e:	4951      	ldr	r1, [pc, #324]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008f30:	4313      	orrs	r3, r2
 8008f32:	650b      	str	r3, [r1, #80]	; 0x50
 8008f34:	e001      	b.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f36:	7dfb      	ldrb	r3, [r7, #23]
 8008f38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d04b      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f50:	d02e      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8008f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f56:	d828      	bhi.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f5c:	d02a      	beq.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f62:	d822      	bhi.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008f64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f68:	d026      	beq.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8008f6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f6e:	d81c      	bhi.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008f70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f74:	d010      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f7a:	d816      	bhi.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d01d      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008f80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f84:	d111      	bne.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	3304      	adds	r3, #4
 8008f8a:	2101      	movs	r1, #1
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 ff7d 	bl	8009e8c <RCCEx_PLL2_Config>
 8008f92:	4603      	mov	r3, r0
 8008f94:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008f96:	e012      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	3324      	adds	r3, #36	; 0x24
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f001 f826 	bl	8009ff0 <RCCEx_PLL3_Config>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008fa8:	e009      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	75fb      	strb	r3, [r7, #23]
      break;
 8008fae:	e006      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008fb0:	bf00      	nop
 8008fb2:	e004      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008fb4:	bf00      	nop
 8008fb6:	e002      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008fb8:	bf00      	nop
 8008fba:	e000      	b.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fbe:	7dfb      	ldrb	r3, [r7, #23]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d10a      	bne.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008fc4:	4b2b      	ldr	r3, [pc, #172]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008fd2:	4928      	ldr	r1, [pc, #160]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	658b      	str	r3, [r1, #88]	; 0x58
 8008fd8:	e001      	b.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fda:	7dfb      	ldrb	r3, [r7, #23]
 8008fdc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d02f      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ff2:	d00e      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8008ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ff8:	d814      	bhi.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d015      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008ffe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009002:	d10f      	bne.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009004:	4b1b      	ldr	r3, [pc, #108]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009008:	4a1a      	ldr	r2, [pc, #104]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800900a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800900e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009010:	e00c      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	3304      	adds	r3, #4
 8009016:	2101      	movs	r1, #1
 8009018:	4618      	mov	r0, r3
 800901a:	f000 ff37 	bl	8009e8c <RCCEx_PLL2_Config>
 800901e:	4603      	mov	r3, r0
 8009020:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009022:	e003      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	75fb      	strb	r3, [r7, #23]
      break;
 8009028:	e000      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800902a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800902c:	7dfb      	ldrb	r3, [r7, #23]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d109      	bne.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009032:	4b10      	ldr	r3, [pc, #64]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009036:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800903e:	490d      	ldr	r1, [pc, #52]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009040:	4313      	orrs	r3, r2
 8009042:	650b      	str	r3, [r1, #80]	; 0x50
 8009044:	e001      	b.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009046:	7dfb      	ldrb	r3, [r7, #23]
 8009048:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d033      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905a:	2b03      	cmp	r3, #3
 800905c:	d81c      	bhi.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800905e:	a201      	add	r2, pc, #4	; (adr r2, 8009064 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8009060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009064:	0800909f 	.word	0x0800909f
 8009068:	08009079 	.word	0x08009079
 800906c:	08009087 	.word	0x08009087
 8009070:	0800909f 	.word	0x0800909f
 8009074:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009078:	4bb8      	ldr	r3, [pc, #736]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	4ab7      	ldr	r2, [pc, #732]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800907e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009082:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009084:	e00c      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	3304      	adds	r3, #4
 800908a:	2102      	movs	r1, #2
 800908c:	4618      	mov	r0, r3
 800908e:	f000 fefd 	bl	8009e8c <RCCEx_PLL2_Config>
 8009092:	4603      	mov	r3, r0
 8009094:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009096:	e003      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	75fb      	strb	r3, [r7, #23]
      break;
 800909c:	e000      	b.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800909e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d109      	bne.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80090a6:	4bad      	ldr	r3, [pc, #692]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80090a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090aa:	f023 0203 	bic.w	r2, r3, #3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b2:	49aa      	ldr	r1, [pc, #680]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80090b4:	4313      	orrs	r3, r2
 80090b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80090b8:	e001      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
 80090bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 8086 	beq.w	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80090cc:	4ba4      	ldr	r3, [pc, #656]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4aa3      	ldr	r2, [pc, #652]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80090d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090d8:	f7fb f998 	bl	800440c <HAL_GetTick>
 80090dc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090de:	e009      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090e0:	f7fb f994 	bl	800440c <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	2b64      	cmp	r3, #100	; 0x64
 80090ec:	d902      	bls.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	75fb      	strb	r3, [r7, #23]
        break;
 80090f2:	e005      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090f4:	4b9a      	ldr	r3, [pc, #616]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d0ef      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009100:	7dfb      	ldrb	r3, [r7, #23]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d166      	bne.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009106:	4b95      	ldr	r3, [pc, #596]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009108:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009110:	4053      	eors	r3, r2
 8009112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009116:	2b00      	cmp	r3, #0
 8009118:	d013      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800911a:	4b90      	ldr	r3, [pc, #576]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800911c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009122:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009124:	4b8d      	ldr	r3, [pc, #564]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009128:	4a8c      	ldr	r2, [pc, #560]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800912a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800912e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009130:	4b8a      	ldr	r3, [pc, #552]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009134:	4a89      	ldr	r2, [pc, #548]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800913a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800913c:	4a87      	ldr	r2, [pc, #540]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800914c:	d115      	bne.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800914e:	f7fb f95d 	bl	800440c <HAL_GetTick>
 8009152:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009154:	e00b      	b.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009156:	f7fb f959 	bl	800440c <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	f241 3288 	movw	r2, #5000	; 0x1388
 8009164:	4293      	cmp	r3, r2
 8009166:	d902      	bls.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009168:	2303      	movs	r3, #3
 800916a:	75fb      	strb	r3, [r7, #23]
            break;
 800916c:	e005      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800916e:	4b7b      	ldr	r3, [pc, #492]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009172:	f003 0302 	and.w	r3, r3, #2
 8009176:	2b00      	cmp	r3, #0
 8009178:	d0ed      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d126      	bne.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800918a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800918e:	d10d      	bne.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009190:	4b72      	ldr	r3, [pc, #456]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800919e:	0919      	lsrs	r1, r3, #4
 80091a0:	4b70      	ldr	r3, [pc, #448]	; (8009364 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80091a2:	400b      	ands	r3, r1
 80091a4:	496d      	ldr	r1, [pc, #436]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091a6:	4313      	orrs	r3, r2
 80091a8:	610b      	str	r3, [r1, #16]
 80091aa:	e005      	b.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80091ac:	4b6b      	ldr	r3, [pc, #428]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091ae:	691b      	ldr	r3, [r3, #16]
 80091b0:	4a6a      	ldr	r2, [pc, #424]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80091b6:	6113      	str	r3, [r2, #16]
 80091b8:	4b68      	ldr	r3, [pc, #416]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80091c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091c6:	4965      	ldr	r1, [pc, #404]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80091c8:	4313      	orrs	r3, r2
 80091ca:	670b      	str	r3, [r1, #112]	; 0x70
 80091cc:	e004      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
 80091d0:	75bb      	strb	r3, [r7, #22]
 80091d2:	e001      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d07e      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091e8:	2b28      	cmp	r3, #40	; 0x28
 80091ea:	d867      	bhi.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80091ec:	a201      	add	r2, pc, #4	; (adr r2, 80091f4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80091ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f2:	bf00      	nop
 80091f4:	080092c3 	.word	0x080092c3
 80091f8:	080092bd 	.word	0x080092bd
 80091fc:	080092bd 	.word	0x080092bd
 8009200:	080092bd 	.word	0x080092bd
 8009204:	080092bd 	.word	0x080092bd
 8009208:	080092bd 	.word	0x080092bd
 800920c:	080092bd 	.word	0x080092bd
 8009210:	080092bd 	.word	0x080092bd
 8009214:	08009299 	.word	0x08009299
 8009218:	080092bd 	.word	0x080092bd
 800921c:	080092bd 	.word	0x080092bd
 8009220:	080092bd 	.word	0x080092bd
 8009224:	080092bd 	.word	0x080092bd
 8009228:	080092bd 	.word	0x080092bd
 800922c:	080092bd 	.word	0x080092bd
 8009230:	080092bd 	.word	0x080092bd
 8009234:	080092ab 	.word	0x080092ab
 8009238:	080092bd 	.word	0x080092bd
 800923c:	080092bd 	.word	0x080092bd
 8009240:	080092bd 	.word	0x080092bd
 8009244:	080092bd 	.word	0x080092bd
 8009248:	080092bd 	.word	0x080092bd
 800924c:	080092bd 	.word	0x080092bd
 8009250:	080092bd 	.word	0x080092bd
 8009254:	080092c3 	.word	0x080092c3
 8009258:	080092bd 	.word	0x080092bd
 800925c:	080092bd 	.word	0x080092bd
 8009260:	080092bd 	.word	0x080092bd
 8009264:	080092bd 	.word	0x080092bd
 8009268:	080092bd 	.word	0x080092bd
 800926c:	080092bd 	.word	0x080092bd
 8009270:	080092bd 	.word	0x080092bd
 8009274:	080092c3 	.word	0x080092c3
 8009278:	080092bd 	.word	0x080092bd
 800927c:	080092bd 	.word	0x080092bd
 8009280:	080092bd 	.word	0x080092bd
 8009284:	080092bd 	.word	0x080092bd
 8009288:	080092bd 	.word	0x080092bd
 800928c:	080092bd 	.word	0x080092bd
 8009290:	080092bd 	.word	0x080092bd
 8009294:	080092c3 	.word	0x080092c3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	3304      	adds	r3, #4
 800929c:	2101      	movs	r1, #1
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 fdf4 	bl	8009e8c <RCCEx_PLL2_Config>
 80092a4:	4603      	mov	r3, r0
 80092a6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80092a8:	e00c      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	3324      	adds	r3, #36	; 0x24
 80092ae:	2101      	movs	r1, #1
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 fe9d 	bl	8009ff0 <RCCEx_PLL3_Config>
 80092b6:	4603      	mov	r3, r0
 80092b8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80092ba:	e003      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	75fb      	strb	r3, [r7, #23]
      break;
 80092c0:	e000      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80092c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092c4:	7dfb      	ldrb	r3, [r7, #23]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d109      	bne.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80092ca:	4b24      	ldr	r3, [pc, #144]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80092cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092d6:	4921      	ldr	r1, [pc, #132]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80092d8:	4313      	orrs	r3, r2
 80092da:	654b      	str	r3, [r1, #84]	; 0x54
 80092dc:	e001      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092de:	7dfb      	ldrb	r3, [r7, #23]
 80092e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 0302 	and.w	r3, r3, #2
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d03e      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092f2:	2b05      	cmp	r3, #5
 80092f4:	d820      	bhi.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80092f6:	a201      	add	r2, pc, #4	; (adr r2, 80092fc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80092f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092fc:	0800933f 	.word	0x0800933f
 8009300:	08009315 	.word	0x08009315
 8009304:	08009327 	.word	0x08009327
 8009308:	0800933f 	.word	0x0800933f
 800930c:	0800933f 	.word	0x0800933f
 8009310:	0800933f 	.word	0x0800933f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	3304      	adds	r3, #4
 8009318:	2101      	movs	r1, #1
 800931a:	4618      	mov	r0, r3
 800931c:	f000 fdb6 	bl	8009e8c <RCCEx_PLL2_Config>
 8009320:	4603      	mov	r3, r0
 8009322:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009324:	e00c      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	3324      	adds	r3, #36	; 0x24
 800932a:	2101      	movs	r1, #1
 800932c:	4618      	mov	r0, r3
 800932e:	f000 fe5f 	bl	8009ff0 <RCCEx_PLL3_Config>
 8009332:	4603      	mov	r3, r0
 8009334:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009336:	e003      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009338:	2301      	movs	r3, #1
 800933a:	75fb      	strb	r3, [r7, #23]
      break;
 800933c:	e000      	b.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800933e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009340:	7dfb      	ldrb	r3, [r7, #23]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d110      	bne.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009346:	4b05      	ldr	r3, [pc, #20]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800934a:	f023 0207 	bic.w	r2, r3, #7
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009352:	4902      	ldr	r1, [pc, #8]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009354:	4313      	orrs	r3, r2
 8009356:	654b      	str	r3, [r1, #84]	; 0x54
 8009358:	e008      	b.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800935a:	bf00      	nop
 800935c:	58024400 	.word	0x58024400
 8009360:	58024800 	.word	0x58024800
 8009364:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009368:	7dfb      	ldrb	r3, [r7, #23]
 800936a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 0304 	and.w	r3, r3, #4
 8009374:	2b00      	cmp	r3, #0
 8009376:	d039      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800937e:	2b05      	cmp	r3, #5
 8009380:	d820      	bhi.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8009382:	a201      	add	r2, pc, #4	; (adr r2, 8009388 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8009384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009388:	080093cb 	.word	0x080093cb
 800938c:	080093a1 	.word	0x080093a1
 8009390:	080093b3 	.word	0x080093b3
 8009394:	080093cb 	.word	0x080093cb
 8009398:	080093cb 	.word	0x080093cb
 800939c:	080093cb 	.word	0x080093cb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3304      	adds	r3, #4
 80093a4:	2101      	movs	r1, #1
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 fd70 	bl	8009e8c <RCCEx_PLL2_Config>
 80093ac:	4603      	mov	r3, r0
 80093ae:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80093b0:	e00c      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	3324      	adds	r3, #36	; 0x24
 80093b6:	2101      	movs	r1, #1
 80093b8:	4618      	mov	r0, r3
 80093ba:	f000 fe19 	bl	8009ff0 <RCCEx_PLL3_Config>
 80093be:	4603      	mov	r3, r0
 80093c0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80093c2:	e003      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	75fb      	strb	r3, [r7, #23]
      break;
 80093c8:	e000      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80093ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093cc:	7dfb      	ldrb	r3, [r7, #23]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d10a      	bne.n	80093e8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80093d2:	4bb7      	ldr	r3, [pc, #732]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80093d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093d6:	f023 0207 	bic.w	r2, r3, #7
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093e0:	49b3      	ldr	r1, [pc, #716]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80093e2:	4313      	orrs	r3, r2
 80093e4:	658b      	str	r3, [r1, #88]	; 0x58
 80093e6:	e001      	b.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093e8:	7dfb      	ldrb	r3, [r7, #23]
 80093ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 0320 	and.w	r3, r3, #32
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d04b      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009402:	d02e      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009404:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009408:	d828      	bhi.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800940a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800940e:	d02a      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009414:	d822      	bhi.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009416:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800941a:	d026      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800941c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009420:	d81c      	bhi.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009422:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009426:	d010      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8009428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800942c:	d816      	bhi.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800942e:	2b00      	cmp	r3, #0
 8009430:	d01d      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009436:	d111      	bne.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	3304      	adds	r3, #4
 800943c:	2100      	movs	r1, #0
 800943e:	4618      	mov	r0, r3
 8009440:	f000 fd24 	bl	8009e8c <RCCEx_PLL2_Config>
 8009444:	4603      	mov	r3, r0
 8009446:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009448:	e012      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	3324      	adds	r3, #36	; 0x24
 800944e:	2102      	movs	r1, #2
 8009450:	4618      	mov	r0, r3
 8009452:	f000 fdcd 	bl	8009ff0 <RCCEx_PLL3_Config>
 8009456:	4603      	mov	r3, r0
 8009458:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800945a:	e009      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	75fb      	strb	r3, [r7, #23]
      break;
 8009460:	e006      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009462:	bf00      	nop
 8009464:	e004      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009466:	bf00      	nop
 8009468:	e002      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800946a:	bf00      	nop
 800946c:	e000      	b.n	8009470 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800946e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009470:	7dfb      	ldrb	r3, [r7, #23]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10a      	bne.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009476:	4b8e      	ldr	r3, [pc, #568]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800947a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009484:	498a      	ldr	r1, [pc, #552]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009486:	4313      	orrs	r3, r2
 8009488:	654b      	str	r3, [r1, #84]	; 0x54
 800948a:	e001      	b.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800948c:	7dfb      	ldrb	r3, [r7, #23]
 800948e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009498:	2b00      	cmp	r3, #0
 800949a:	d04b      	beq.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80094a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80094a6:	d02e      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80094a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80094ac:	d828      	bhi.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80094ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094b2:	d02a      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80094b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094b8:	d822      	bhi.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80094ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094be:	d026      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80094c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094c4:	d81c      	bhi.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80094c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094ca:	d010      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80094cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094d0:	d816      	bhi.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d01d      	beq.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80094d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094da:	d111      	bne.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	3304      	adds	r3, #4
 80094e0:	2100      	movs	r1, #0
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 fcd2 	bl	8009e8c <RCCEx_PLL2_Config>
 80094e8:	4603      	mov	r3, r0
 80094ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80094ec:	e012      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3324      	adds	r3, #36	; 0x24
 80094f2:	2102      	movs	r1, #2
 80094f4:	4618      	mov	r0, r3
 80094f6:	f000 fd7b 	bl	8009ff0 <RCCEx_PLL3_Config>
 80094fa:	4603      	mov	r3, r0
 80094fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80094fe:	e009      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	75fb      	strb	r3, [r7, #23]
      break;
 8009504:	e006      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009506:	bf00      	nop
 8009508:	e004      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800950a:	bf00      	nop
 800950c:	e002      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800950e:	bf00      	nop
 8009510:	e000      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009514:	7dfb      	ldrb	r3, [r7, #23]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d10a      	bne.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800951a:	4b65      	ldr	r3, [pc, #404]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800951c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800951e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009528:	4961      	ldr	r1, [pc, #388]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800952a:	4313      	orrs	r3, r2
 800952c:	658b      	str	r3, [r1, #88]	; 0x58
 800952e:	e001      	b.n	8009534 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800953c:	2b00      	cmp	r3, #0
 800953e:	d04b      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009546:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800954a:	d02e      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800954c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009550:	d828      	bhi.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009556:	d02a      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8009558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800955c:	d822      	bhi.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800955e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009562:	d026      	beq.n	80095b2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009564:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009568:	d81c      	bhi.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800956a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800956e:	d010      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8009570:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009574:	d816      	bhi.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009576:	2b00      	cmp	r3, #0
 8009578:	d01d      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800957a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800957e:	d111      	bne.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	3304      	adds	r3, #4
 8009584:	2100      	movs	r1, #0
 8009586:	4618      	mov	r0, r3
 8009588:	f000 fc80 	bl	8009e8c <RCCEx_PLL2_Config>
 800958c:	4603      	mov	r3, r0
 800958e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009590:	e012      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	3324      	adds	r3, #36	; 0x24
 8009596:	2102      	movs	r1, #2
 8009598:	4618      	mov	r0, r3
 800959a:	f000 fd29 	bl	8009ff0 <RCCEx_PLL3_Config>
 800959e:	4603      	mov	r3, r0
 80095a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80095a2:	e009      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	75fb      	strb	r3, [r7, #23]
      break;
 80095a8:	e006      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80095aa:	bf00      	nop
 80095ac:	e004      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80095ae:	bf00      	nop
 80095b0:	e002      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80095b2:	bf00      	nop
 80095b4:	e000      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80095b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095b8:	7dfb      	ldrb	r3, [r7, #23]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d10a      	bne.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80095be:	4b3c      	ldr	r3, [pc, #240]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80095c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80095cc:	4938      	ldr	r1, [pc, #224]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80095ce:	4313      	orrs	r3, r2
 80095d0:	658b      	str	r3, [r1, #88]	; 0x58
 80095d2:	e001      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0308 	and.w	r3, r3, #8
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d01a      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095ee:	d10a      	bne.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	3324      	adds	r3, #36	; 0x24
 80095f4:	2102      	movs	r1, #2
 80095f6:	4618      	mov	r0, r3
 80095f8:	f000 fcfa 	bl	8009ff0 <RCCEx_PLL3_Config>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009606:	4b2a      	ldr	r3, [pc, #168]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800960a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009614:	4926      	ldr	r1, [pc, #152]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009616:	4313      	orrs	r3, r2
 8009618:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0310 	and.w	r3, r3, #16
 8009622:	2b00      	cmp	r3, #0
 8009624:	d01a      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800962c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009630:	d10a      	bne.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	3324      	adds	r3, #36	; 0x24
 8009636:	2102      	movs	r1, #2
 8009638:	4618      	mov	r0, r3
 800963a:	f000 fcd9 	bl	8009ff0 <RCCEx_PLL3_Config>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8009644:	2301      	movs	r3, #1
 8009646:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009648:	4b19      	ldr	r3, [pc, #100]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800964a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800964c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009656:	4916      	ldr	r1, [pc, #88]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009658:	4313      	orrs	r3, r2
 800965a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009664:	2b00      	cmp	r3, #0
 8009666:	d036      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800966e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009672:	d01f      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009674:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009678:	d817      	bhi.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800967e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009682:	d009      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8009684:	e011      	b.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	3304      	adds	r3, #4
 800968a:	2100      	movs	r1, #0
 800968c:	4618      	mov	r0, r3
 800968e:	f000 fbfd 	bl	8009e8c <RCCEx_PLL2_Config>
 8009692:	4603      	mov	r3, r0
 8009694:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009696:	e00e      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	3324      	adds	r3, #36	; 0x24
 800969c:	2102      	movs	r1, #2
 800969e:	4618      	mov	r0, r3
 80096a0:	f000 fca6 	bl	8009ff0 <RCCEx_PLL3_Config>
 80096a4:	4603      	mov	r3, r0
 80096a6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80096a8:	e005      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	75fb      	strb	r3, [r7, #23]
      break;
 80096ae:	e002      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80096b0:	58024400 	.word	0x58024400
      break;
 80096b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096b6:	7dfb      	ldrb	r3, [r7, #23]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10a      	bne.n	80096d2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80096bc:	4b93      	ldr	r3, [pc, #588]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80096be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80096ca:	4990      	ldr	r1, [pc, #576]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80096cc:	4313      	orrs	r3, r2
 80096ce:	658b      	str	r3, [r1, #88]	; 0x58
 80096d0:	e001      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096d2:	7dfb      	ldrb	r3, [r7, #23]
 80096d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d033      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096ec:	d01c      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80096ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096f2:	d816      	bhi.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80096f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096f8:	d003      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80096fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096fe:	d007      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009700:	e00f      	b.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009702:	4b82      	ldr	r3, [pc, #520]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009706:	4a81      	ldr	r2, [pc, #516]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800970c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800970e:	e00c      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3324      	adds	r3, #36	; 0x24
 8009714:	2101      	movs	r1, #1
 8009716:	4618      	mov	r0, r3
 8009718:	f000 fc6a 	bl	8009ff0 <RCCEx_PLL3_Config>
 800971c:	4603      	mov	r3, r0
 800971e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009720:	e003      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	75fb      	strb	r3, [r7, #23]
      break;
 8009726:	e000      	b.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8009728:	bf00      	nop
    }

    if(ret == HAL_OK)
 800972a:	7dfb      	ldrb	r3, [r7, #23]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10a      	bne.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009730:	4b76      	ldr	r3, [pc, #472]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009734:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800973e:	4973      	ldr	r1, [pc, #460]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009740:	4313      	orrs	r3, r2
 8009742:	654b      	str	r3, [r1, #84]	; 0x54
 8009744:	e001      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009752:	2b00      	cmp	r3, #0
 8009754:	d029      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800975a:	2b00      	cmp	r3, #0
 800975c:	d003      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800975e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009762:	d007      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8009764:	e00f      	b.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009766:	4b69      	ldr	r3, [pc, #420]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976a:	4a68      	ldr	r2, [pc, #416]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800976c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009770:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009772:	e00b      	b.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	3304      	adds	r3, #4
 8009778:	2102      	movs	r1, #2
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fb86 	bl	8009e8c <RCCEx_PLL2_Config>
 8009780:	4603      	mov	r3, r0
 8009782:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009784:	e002      	b.n	800978c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	75fb      	strb	r3, [r7, #23]
      break;
 800978a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800978c:	7dfb      	ldrb	r3, [r7, #23]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d109      	bne.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009792:	4b5e      	ldr	r3, [pc, #376]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009796:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800979e:	495b      	ldr	r1, [pc, #364]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80097a0:	4313      	orrs	r3, r2
 80097a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80097a4:	e001      	b.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097a6:	7dfb      	ldrb	r3, [r7, #23]
 80097a8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00a      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	3324      	adds	r3, #36	; 0x24
 80097ba:	2102      	movs	r1, #2
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 fc17 	bl	8009ff0 <RCCEx_PLL3_Config>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d030      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097e0:	d017      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80097e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097e6:	d811      	bhi.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80097e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097ec:	d013      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80097ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097f2:	d80b      	bhi.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d010      	beq.n	800981a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80097f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097fc:	d106      	bne.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097fe:	4b43      	ldr	r3, [pc, #268]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009802:	4a42      	ldr	r2, [pc, #264]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009808:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800980a:	e007      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	75fb      	strb	r3, [r7, #23]
      break;
 8009810:	e004      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009812:	bf00      	nop
 8009814:	e002      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009816:	bf00      	nop
 8009818:	e000      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800981a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800981c:	7dfb      	ldrb	r3, [r7, #23]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d109      	bne.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009822:	4b3a      	ldr	r3, [pc, #232]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009826:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800982e:	4937      	ldr	r1, [pc, #220]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009830:	4313      	orrs	r3, r2
 8009832:	654b      	str	r3, [r1, #84]	; 0x54
 8009834:	e001      	b.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009836:	7dfb      	ldrb	r3, [r7, #23]
 8009838:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009842:	2b00      	cmp	r3, #0
 8009844:	d008      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009846:	4b31      	ldr	r3, [pc, #196]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800984a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009852:	492e      	ldr	r1, [pc, #184]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009854:	4313      	orrs	r3, r2
 8009856:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d009      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009864:	4b29      	ldr	r3, [pc, #164]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009872:	4926      	ldr	r1, [pc, #152]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009874:	4313      	orrs	r3, r2
 8009876:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d008      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009884:	4b21      	ldr	r3, [pc, #132]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009888:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009890:	491e      	ldr	r1, [pc, #120]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009892:	4313      	orrs	r3, r2
 8009894:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00d      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80098a2:	4b1a      	ldr	r3, [pc, #104]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	4a19      	ldr	r2, [pc, #100]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80098ac:	6113      	str	r3, [r2, #16]
 80098ae:	4b17      	ldr	r3, [pc, #92]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098b0:	691a      	ldr	r2, [r3, #16]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80098b8:	4914      	ldr	r1, [pc, #80]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	da08      	bge.n	80098d8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80098c6:	4b11      	ldr	r3, [pc, #68]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098d2:	490e      	ldr	r1, [pc, #56]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098d4:	4313      	orrs	r3, r2
 80098d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d009      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80098e4:	4b09      	ldr	r3, [pc, #36]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098f2:	4906      	ldr	r1, [pc, #24]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098f4:	4313      	orrs	r3, r2
 80098f6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80098f8:	7dbb      	ldrb	r3, [r7, #22]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d101      	bne.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80098fe:	2300      	movs	r3, #0
 8009900:	e000      	b.n	8009904 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
}
 8009904:	4618      	mov	r0, r3
 8009906:	3718      	adds	r7, #24
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	58024400 	.word	0x58024400

08009910 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009914:	f7ff f860 	bl	80089d8 <HAL_RCC_GetHCLKFreq>
 8009918:	4602      	mov	r2, r0
 800991a:	4b06      	ldr	r3, [pc, #24]	; (8009934 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	091b      	lsrs	r3, r3, #4
 8009920:	f003 0307 	and.w	r3, r3, #7
 8009924:	4904      	ldr	r1, [pc, #16]	; (8009938 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009926:	5ccb      	ldrb	r3, [r1, r3]
 8009928:	f003 031f 	and.w	r3, r3, #31
 800992c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009930:	4618      	mov	r0, r3
 8009932:	bd80      	pop	{r7, pc}
 8009934:	58024400 	.word	0x58024400
 8009938:	08010a10 	.word	0x08010a10

0800993c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800993c:	b480      	push	{r7}
 800993e:	b089      	sub	sp, #36	; 0x24
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009944:	4ba1      	ldr	r3, [pc, #644]	; (8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009948:	f003 0303 	and.w	r3, r3, #3
 800994c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800994e:	4b9f      	ldr	r3, [pc, #636]	; (8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009952:	0b1b      	lsrs	r3, r3, #12
 8009954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009958:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800995a:	4b9c      	ldr	r3, [pc, #624]	; (8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800995c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995e:	091b      	lsrs	r3, r3, #4
 8009960:	f003 0301 	and.w	r3, r3, #1
 8009964:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009966:	4b99      	ldr	r3, [pc, #612]	; (8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800996a:	08db      	lsrs	r3, r3, #3
 800996c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	fb02 f303 	mul.w	r3, r2, r3
 8009976:	ee07 3a90 	vmov	s15, r3
 800997a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	2b00      	cmp	r3, #0
 8009986:	f000 8111 	beq.w	8009bac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	2b02      	cmp	r3, #2
 800998e:	f000 8083 	beq.w	8009a98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	2b02      	cmp	r3, #2
 8009996:	f200 80a1 	bhi.w	8009adc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d003      	beq.n	80099a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d056      	beq.n	8009a54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80099a6:	e099      	b.n	8009adc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099a8:	4b88      	ldr	r3, [pc, #544]	; (8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 0320 	and.w	r3, r3, #32
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d02d      	beq.n	8009a10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099b4:	4b85      	ldr	r3, [pc, #532]	; (8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	08db      	lsrs	r3, r3, #3
 80099ba:	f003 0303 	and.w	r3, r3, #3
 80099be:	4a84      	ldr	r2, [pc, #528]	; (8009bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80099c0:	fa22 f303 	lsr.w	r3, r2, r3
 80099c4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	ee07 3a90 	vmov	s15, r3
 80099cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	ee07 3a90 	vmov	s15, r3
 80099d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099de:	4b7b      	ldr	r3, [pc, #492]	; (8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80099e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099e6:	ee07 3a90 	vmov	s15, r3
 80099ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80099f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80099f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009a0e:	e087      	b.n	8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	ee07 3a90 	vmov	s15, r3
 8009a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a22:	4b6a      	ldr	r3, [pc, #424]	; (8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a2a:	ee07 3a90 	vmov	s15, r3
 8009a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a52:	e065      	b.n	8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	ee07 3a90 	vmov	s15, r3
 8009a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a66:	4b59      	ldr	r3, [pc, #356]	; (8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a6e:	ee07 3a90 	vmov	s15, r3
 8009a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a96:	e043      	b.n	8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	ee07 3a90 	vmov	s15, r3
 8009a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009be0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aaa:	4b48      	ldr	r3, [pc, #288]	; (8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab2:	ee07 3a90 	vmov	s15, r3
 8009ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8009abe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ad6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ada:	e021      	b.n	8009b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	ee07 3a90 	vmov	s15, r3
 8009ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aee:	4b37      	ldr	r3, [pc, #220]	; (8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af6:	ee07 3a90 	vmov	s15, r3
 8009afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009b1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009b20:	4b2a      	ldr	r3, [pc, #168]	; (8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b24:	0a5b      	lsrs	r3, r3, #9
 8009b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b2a:	ee07 3a90 	vmov	s15, r3
 8009b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b46:	ee17 2a90 	vmov	r2, s15
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009b4e:	4b1f      	ldr	r3, [pc, #124]	; (8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b52:	0c1b      	lsrs	r3, r3, #16
 8009b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b58:	ee07 3a90 	vmov	s15, r3
 8009b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b74:	ee17 2a90 	vmov	r2, s15
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009b7c:	4b13      	ldr	r3, [pc, #76]	; (8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b80:	0e1b      	lsrs	r3, r3, #24
 8009b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b86:	ee07 3a90 	vmov	s15, r3
 8009b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ba2:	ee17 2a90 	vmov	r2, s15
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009baa:	e008      	b.n	8009bbe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	609a      	str	r2, [r3, #8]
}
 8009bbe:	bf00      	nop
 8009bc0:	3724      	adds	r7, #36	; 0x24
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	58024400 	.word	0x58024400
 8009bd0:	03d09000 	.word	0x03d09000
 8009bd4:	46000000 	.word	0x46000000
 8009bd8:	4c742400 	.word	0x4c742400
 8009bdc:	4a742400 	.word	0x4a742400
 8009be0:	4c371b00 	.word	0x4c371b00

08009be4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b089      	sub	sp, #36	; 0x24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009bec:	4ba1      	ldr	r3, [pc, #644]	; (8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf0:	f003 0303 	and.w	r3, r3, #3
 8009bf4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009bf6:	4b9f      	ldr	r3, [pc, #636]	; (8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bfa:	0d1b      	lsrs	r3, r3, #20
 8009bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009c02:	4b9c      	ldr	r3, [pc, #624]	; (8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c06:	0a1b      	lsrs	r3, r3, #8
 8009c08:	f003 0301 	and.w	r3, r3, #1
 8009c0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009c0e:	4b99      	ldr	r3, [pc, #612]	; (8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c12:	08db      	lsrs	r3, r3, #3
 8009c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c18:	693a      	ldr	r2, [r7, #16]
 8009c1a:	fb02 f303 	mul.w	r3, r2, r3
 8009c1e:	ee07 3a90 	vmov	s15, r3
 8009c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f000 8111 	beq.w	8009e54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	f000 8083 	beq.w	8009d40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	2b02      	cmp	r3, #2
 8009c3e:	f200 80a1 	bhi.w	8009d84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d003      	beq.n	8009c50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d056      	beq.n	8009cfc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009c4e:	e099      	b.n	8009d84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c50:	4b88      	ldr	r3, [pc, #544]	; (8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0320 	and.w	r3, r3, #32
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d02d      	beq.n	8009cb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c5c:	4b85      	ldr	r3, [pc, #532]	; (8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	08db      	lsrs	r3, r3, #3
 8009c62:	f003 0303 	and.w	r3, r3, #3
 8009c66:	4a84      	ldr	r2, [pc, #528]	; (8009e78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009c68:	fa22 f303 	lsr.w	r3, r2, r3
 8009c6c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	ee07 3a90 	vmov	s15, r3
 8009c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	ee07 3a90 	vmov	s15, r3
 8009c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c86:	4b7b      	ldr	r3, [pc, #492]	; (8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c8e:	ee07 3a90 	vmov	s15, r3
 8009c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cb2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009cb6:	e087      	b.n	8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	ee07 3a90 	vmov	s15, r3
 8009cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009e80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cca:	4b6a      	ldr	r3, [pc, #424]	; (8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd2:	ee07 3a90 	vmov	s15, r3
 8009cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cde:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cfa:	e065      	b.n	8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	ee07 3a90 	vmov	s15, r3
 8009d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d0e:	4b59      	ldr	r3, [pc, #356]	; (8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d16:	ee07 3a90 	vmov	s15, r3
 8009d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d22:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d3e:	e043      	b.n	8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	ee07 3a90 	vmov	s15, r3
 8009d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009e88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d52:	4b48      	ldr	r3, [pc, #288]	; (8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d5a:	ee07 3a90 	vmov	s15, r3
 8009d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d66:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d82:	e021      	b.n	8009dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	ee07 3a90 	vmov	s15, r3
 8009d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d96:	4b37      	ldr	r3, [pc, #220]	; (8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9e:	ee07 3a90 	vmov	s15, r3
 8009da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009daa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009dc8:	4b2a      	ldr	r3, [pc, #168]	; (8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dcc:	0a5b      	lsrs	r3, r3, #9
 8009dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dd2:	ee07 3a90 	vmov	s15, r3
 8009dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dee:	ee17 2a90 	vmov	r2, s15
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009df6:	4b1f      	ldr	r3, [pc, #124]	; (8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfa:	0c1b      	lsrs	r3, r3, #16
 8009dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e00:	ee07 3a90 	vmov	s15, r3
 8009e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e1c:	ee17 2a90 	vmov	r2, s15
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009e24:	4b13      	ldr	r3, [pc, #76]	; (8009e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e28:	0e1b      	lsrs	r3, r3, #24
 8009e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e2e:	ee07 3a90 	vmov	s15, r3
 8009e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e4a:	ee17 2a90 	vmov	r2, s15
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009e52:	e008      	b.n	8009e66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	609a      	str	r2, [r3, #8]
}
 8009e66:	bf00      	nop
 8009e68:	3724      	adds	r7, #36	; 0x24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	58024400 	.word	0x58024400
 8009e78:	03d09000 	.word	0x03d09000
 8009e7c:	46000000 	.word	0x46000000
 8009e80:	4c742400 	.word	0x4c742400
 8009e84:	4a742400 	.word	0x4a742400
 8009e88:	4c371b00 	.word	0x4c371b00

08009e8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e9a:	4b53      	ldr	r3, [pc, #332]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9e:	f003 0303 	and.w	r3, r3, #3
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	d101      	bne.n	8009eaa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e099      	b.n	8009fde <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009eaa:	4b4f      	ldr	r3, [pc, #316]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a4e      	ldr	r2, [pc, #312]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009eb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009eb6:	f7fa faa9 	bl	800440c <HAL_GetTick>
 8009eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ebc:	e008      	b.n	8009ed0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009ebe:	f7fa faa5 	bl	800440c <HAL_GetTick>
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d901      	bls.n	8009ed0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e086      	b.n	8009fde <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ed0:	4b45      	ldr	r3, [pc, #276]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1f0      	bne.n	8009ebe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009edc:	4b42      	ldr	r3, [pc, #264]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	031b      	lsls	r3, r3, #12
 8009eea:	493f      	ldr	r1, [pc, #252]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009eec:	4313      	orrs	r3, r2
 8009eee:	628b      	str	r3, [r1, #40]	; 0x28
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	3b01      	subs	r3, #1
 8009ef6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	3b01      	subs	r3, #1
 8009f00:	025b      	lsls	r3, r3, #9
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	431a      	orrs	r2, r3
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	041b      	lsls	r3, r3, #16
 8009f0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f12:	431a      	orrs	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	3b01      	subs	r3, #1
 8009f1a:	061b      	lsls	r3, r3, #24
 8009f1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f20:	4931      	ldr	r1, [pc, #196]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009f22:	4313      	orrs	r3, r2
 8009f24:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009f26:	4b30      	ldr	r3, [pc, #192]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	492d      	ldr	r1, [pc, #180]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009f34:	4313      	orrs	r3, r2
 8009f36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009f38:	4b2b      	ldr	r3, [pc, #172]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3c:	f023 0220 	bic.w	r2, r3, #32
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	4928      	ldr	r1, [pc, #160]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009f46:	4313      	orrs	r3, r2
 8009f48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009f4a:	4b27      	ldr	r3, [pc, #156]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4e:	4a26      	ldr	r2, [pc, #152]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009f50:	f023 0310 	bic.w	r3, r3, #16
 8009f54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009f56:	4b24      	ldr	r3, [pc, #144]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f5a:	4b24      	ldr	r3, [pc, #144]	; (8009fec <RCCEx_PLL2_Config+0x160>)
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	69d2      	ldr	r2, [r2, #28]
 8009f62:	00d2      	lsls	r2, r2, #3
 8009f64:	4920      	ldr	r1, [pc, #128]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009f66:	4313      	orrs	r3, r2
 8009f68:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009f6a:	4b1f      	ldr	r3, [pc, #124]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6e:	4a1e      	ldr	r2, [pc, #120]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009f70:	f043 0310 	orr.w	r3, r3, #16
 8009f74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d106      	bne.n	8009f8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009f7c:	4b1a      	ldr	r3, [pc, #104]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f80:	4a19      	ldr	r2, [pc, #100]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009f82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f88:	e00f      	b.n	8009faa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d106      	bne.n	8009f9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009f90:	4b15      	ldr	r3, [pc, #84]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f94:	4a14      	ldr	r2, [pc, #80]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f9c:	e005      	b.n	8009faa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009f9e:	4b12      	ldr	r3, [pc, #72]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa2:	4a11      	ldr	r2, [pc, #68]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009fa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009fa8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009faa:	4b0f      	ldr	r3, [pc, #60]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a0e      	ldr	r2, [pc, #56]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009fb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fb6:	f7fa fa29 	bl	800440c <HAL_GetTick>
 8009fba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009fbc:	e008      	b.n	8009fd0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009fbe:	f7fa fa25 	bl	800440c <HAL_GetTick>
 8009fc2:	4602      	mov	r2, r0
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d901      	bls.n	8009fd0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e006      	b.n	8009fde <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009fd0:	4b05      	ldr	r3, [pc, #20]	; (8009fe8 <RCCEx_PLL2_Config+0x15c>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d0f0      	beq.n	8009fbe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	58024400 	.word	0x58024400
 8009fec:	ffff0007 	.word	0xffff0007

08009ff0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ffe:	4b53      	ldr	r3, [pc, #332]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a002:	f003 0303 	and.w	r3, r3, #3
 800a006:	2b03      	cmp	r3, #3
 800a008:	d101      	bne.n	800a00e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e099      	b.n	800a142 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a00e:	4b4f      	ldr	r3, [pc, #316]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a4e      	ldr	r2, [pc, #312]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a014:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a01a:	f7fa f9f7 	bl	800440c <HAL_GetTick>
 800a01e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a020:	e008      	b.n	800a034 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a022:	f7fa f9f3 	bl	800440c <HAL_GetTick>
 800a026:	4602      	mov	r2, r0
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d901      	bls.n	800a034 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a030:	2303      	movs	r3, #3
 800a032:	e086      	b.n	800a142 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a034:	4b45      	ldr	r3, [pc, #276]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d1f0      	bne.n	800a022 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a040:	4b42      	ldr	r3, [pc, #264]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a044:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	051b      	lsls	r3, r3, #20
 800a04e:	493f      	ldr	r1, [pc, #252]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a050:	4313      	orrs	r3, r2
 800a052:	628b      	str	r3, [r1, #40]	; 0x28
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	685b      	ldr	r3, [r3, #4]
 800a058:	3b01      	subs	r3, #1
 800a05a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	3b01      	subs	r3, #1
 800a064:	025b      	lsls	r3, r3, #9
 800a066:	b29b      	uxth	r3, r3
 800a068:	431a      	orrs	r2, r3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	3b01      	subs	r3, #1
 800a070:	041b      	lsls	r3, r3, #16
 800a072:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a076:	431a      	orrs	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	3b01      	subs	r3, #1
 800a07e:	061b      	lsls	r3, r3, #24
 800a080:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a084:	4931      	ldr	r1, [pc, #196]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a086:	4313      	orrs	r3, r2
 800a088:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a08a:	4b30      	ldr	r3, [pc, #192]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	695b      	ldr	r3, [r3, #20]
 800a096:	492d      	ldr	r1, [pc, #180]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a098:	4313      	orrs	r3, r2
 800a09a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a09c:	4b2b      	ldr	r3, [pc, #172]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	4928      	ldr	r1, [pc, #160]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a0ae:	4b27      	ldr	r3, [pc, #156]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b2:	4a26      	ldr	r2, [pc, #152]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a0b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a0ba:	4b24      	ldr	r3, [pc, #144]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a0bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0be:	4b24      	ldr	r3, [pc, #144]	; (800a150 <RCCEx_PLL3_Config+0x160>)
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	69d2      	ldr	r2, [r2, #28]
 800a0c6:	00d2      	lsls	r2, r2, #3
 800a0c8:	4920      	ldr	r1, [pc, #128]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a0ce:	4b1f      	ldr	r3, [pc, #124]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d2:	4a1e      	ldr	r2, [pc, #120]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a0d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d106      	bne.n	800a0ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a0e0:	4b1a      	ldr	r3, [pc, #104]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e4:	4a19      	ldr	r2, [pc, #100]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a0e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a0ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0ec:	e00f      	b.n	800a10e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d106      	bne.n	800a102 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a0f4:	4b15      	ldr	r3, [pc, #84]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f8:	4a14      	ldr	r2, [pc, #80]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a0fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a0fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a100:	e005      	b.n	800a10e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a102:	4b12      	ldr	r3, [pc, #72]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a106:	4a11      	ldr	r2, [pc, #68]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a108:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a10c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a10e:	4b0f      	ldr	r3, [pc, #60]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a0e      	ldr	r2, [pc, #56]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a11a:	f7fa f977 	bl	800440c <HAL_GetTick>
 800a11e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a120:	e008      	b.n	800a134 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a122:	f7fa f973 	bl	800440c <HAL_GetTick>
 800a126:	4602      	mov	r2, r0
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d901      	bls.n	800a134 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a130:	2303      	movs	r3, #3
 800a132:	e006      	b.n	800a142 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a134:	4b05      	ldr	r3, [pc, #20]	; (800a14c <RCCEx_PLL3_Config+0x15c>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d0f0      	beq.n	800a122 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a140:	7bfb      	ldrb	r3, [r7, #15]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}
 800a14a:	bf00      	nop
 800a14c:	58024400 	.word	0x58024400
 800a150:	ffff0007 	.word	0xffff0007

0800a154 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d101      	bne.n	800a166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e0f1      	b.n	800a34a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a78      	ldr	r2, [pc, #480]	; (800a354 <HAL_SPI_Init+0x200>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d00f      	beq.n	800a196 <HAL_SPI_Init+0x42>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a77      	ldr	r2, [pc, #476]	; (800a358 <HAL_SPI_Init+0x204>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d00a      	beq.n	800a196 <HAL_SPI_Init+0x42>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a75      	ldr	r2, [pc, #468]	; (800a35c <HAL_SPI_Init+0x208>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d005      	beq.n	800a196 <HAL_SPI_Init+0x42>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	2b0f      	cmp	r3, #15
 800a190:	d901      	bls.n	800a196 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	e0d9      	b.n	800a34a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f8e2 	bl	800a360 <SPI_GetPacketSize>
 800a19c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a6c      	ldr	r2, [pc, #432]	; (800a354 <HAL_SPI_Init+0x200>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d00c      	beq.n	800a1c2 <HAL_SPI_Init+0x6e>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a6a      	ldr	r2, [pc, #424]	; (800a358 <HAL_SPI_Init+0x204>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d007      	beq.n	800a1c2 <HAL_SPI_Init+0x6e>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a69      	ldr	r2, [pc, #420]	; (800a35c <HAL_SPI_Init+0x208>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d002      	beq.n	800a1c2 <HAL_SPI_Init+0x6e>
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2b08      	cmp	r3, #8
 800a1c0:	d811      	bhi.n	800a1e6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a1c6:	4a63      	ldr	r2, [pc, #396]	; (800a354 <HAL_SPI_Init+0x200>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d009      	beq.n	800a1e0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a61      	ldr	r2, [pc, #388]	; (800a358 <HAL_SPI_Init+0x204>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d004      	beq.n	800a1e0 <HAL_SPI_Init+0x8c>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a60      	ldr	r2, [pc, #384]	; (800a35c <HAL_SPI_Init+0x208>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d104      	bne.n	800a1ea <HAL_SPI_Init+0x96>
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2b10      	cmp	r3, #16
 800a1e4:	d901      	bls.n	800a1ea <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e0af      	b.n	800a34a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d106      	bne.n	800a204 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f7f8 fc82 	bl	8002b08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2202      	movs	r2, #2
 800a208:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f022 0201 	bic.w	r2, r2, #1
 800a21a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a226:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	699b      	ldr	r3, [r3, #24]
 800a22c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a230:	d119      	bne.n	800a266 <HAL_SPI_Init+0x112>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a23a:	d103      	bne.n	800a244 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a240:	2b00      	cmp	r3, #0
 800a242:	d008      	beq.n	800a256 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d10c      	bne.n	800a266 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a250:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a254:	d107      	bne.n	800a266 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a264:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	69da      	ldr	r2, [r3, #28]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26e:	431a      	orrs	r2, r3
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	431a      	orrs	r2, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a278:	ea42 0103 	orr.w	r1, r2, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	68da      	ldr	r2, [r3, #12]
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	430a      	orrs	r2, r1
 800a286:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a290:	431a      	orrs	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a296:	431a      	orrs	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	431a      	orrs	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	431a      	orrs	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	695b      	ldr	r3, [r3, #20]
 800a2a8:	431a      	orrs	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	431a      	orrs	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	431a      	orrs	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2ba:	431a      	orrs	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	431a      	orrs	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2c6:	ea42 0103 	orr.w	r1, r2, r3
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	430a      	orrs	r2, r1
 800a2d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d113      	bne.n	800a306 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a304:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f022 0201 	bic.w	r2, r2, #1
 800a314:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00a      	beq.n	800a338 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	430a      	orrs	r2, r1
 800a336:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	40013000 	.word	0x40013000
 800a358:	40003800 	.word	0x40003800
 800a35c:	40003c00 	.word	0x40003c00

0800a360 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a36c:	095b      	lsrs	r3, r3, #5
 800a36e:	3301      	adds	r3, #1
 800a370:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	3301      	adds	r3, #1
 800a378:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	3307      	adds	r3, #7
 800a37e:	08db      	lsrs	r3, r3, #3
 800a380:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	68fa      	ldr	r2, [r7, #12]
 800a386:	fb02 f303 	mul.w	r3, r2, r3
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d101      	bne.n	800a3a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e049      	b.n	800a43c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d106      	bne.n	800a3c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7f9 fa41 	bl	8003844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2202      	movs	r2, #2
 800a3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	3304      	adds	r3, #4
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	f000 fd71 	bl	800aebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2201      	movs	r2, #1
 800a3de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2201      	movs	r2, #1
 800a406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2201      	movs	r2, #1
 800a40e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2201      	movs	r2, #1
 800a416:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2201      	movs	r2, #1
 800a41e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2201      	movs	r2, #1
 800a436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b01      	cmp	r3, #1
 800a456:	d001      	beq.n	800a45c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e054      	b.n	800a506 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2202      	movs	r2, #2
 800a460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	68da      	ldr	r2, [r3, #12]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f042 0201 	orr.w	r2, r2, #1
 800a472:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a26      	ldr	r2, [pc, #152]	; (800a514 <HAL_TIM_Base_Start_IT+0xd0>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d022      	beq.n	800a4c4 <HAL_TIM_Base_Start_IT+0x80>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a486:	d01d      	beq.n	800a4c4 <HAL_TIM_Base_Start_IT+0x80>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a22      	ldr	r2, [pc, #136]	; (800a518 <HAL_TIM_Base_Start_IT+0xd4>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d018      	beq.n	800a4c4 <HAL_TIM_Base_Start_IT+0x80>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a21      	ldr	r2, [pc, #132]	; (800a51c <HAL_TIM_Base_Start_IT+0xd8>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d013      	beq.n	800a4c4 <HAL_TIM_Base_Start_IT+0x80>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a1f      	ldr	r2, [pc, #124]	; (800a520 <HAL_TIM_Base_Start_IT+0xdc>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d00e      	beq.n	800a4c4 <HAL_TIM_Base_Start_IT+0x80>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a1e      	ldr	r2, [pc, #120]	; (800a524 <HAL_TIM_Base_Start_IT+0xe0>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d009      	beq.n	800a4c4 <HAL_TIM_Base_Start_IT+0x80>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a1c      	ldr	r2, [pc, #112]	; (800a528 <HAL_TIM_Base_Start_IT+0xe4>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d004      	beq.n	800a4c4 <HAL_TIM_Base_Start_IT+0x80>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a1b      	ldr	r2, [pc, #108]	; (800a52c <HAL_TIM_Base_Start_IT+0xe8>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d115      	bne.n	800a4f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	689a      	ldr	r2, [r3, #8]
 800a4ca:	4b19      	ldr	r3, [pc, #100]	; (800a530 <HAL_TIM_Base_Start_IT+0xec>)
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2b06      	cmp	r3, #6
 800a4d4:	d015      	beq.n	800a502 <HAL_TIM_Base_Start_IT+0xbe>
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4dc:	d011      	beq.n	800a502 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f042 0201 	orr.w	r2, r2, #1
 800a4ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4ee:	e008      	b.n	800a502 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0201 	orr.w	r2, r2, #1
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	e000      	b.n	800a504 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a502:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3714      	adds	r7, #20
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr
 800a512:	bf00      	nop
 800a514:	40010000 	.word	0x40010000
 800a518:	40000400 	.word	0x40000400
 800a51c:	40000800 	.word	0x40000800
 800a520:	40000c00 	.word	0x40000c00
 800a524:	40010400 	.word	0x40010400
 800a528:	40001800 	.word	0x40001800
 800a52c:	40014000 	.word	0x40014000
 800a530:	00010007 	.word	0x00010007

0800a534 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d101      	bne.n	800a546 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	e049      	b.n	800a5da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d106      	bne.n	800a560 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 f841 	bl	800a5e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2202      	movs	r2, #2
 800a564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	3304      	adds	r3, #4
 800a570:	4619      	mov	r1, r3
 800a572:	4610      	mov	r0, r2
 800a574:	f000 fca2 	bl	800aebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2201      	movs	r2, #1
 800a57c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2201      	movs	r2, #1
 800a584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2201      	movs	r2, #1
 800a594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2201      	movs	r2, #1
 800a59c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3708      	adds	r7, #8
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	b083      	sub	sp, #12
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a5ea:	bf00      	nop
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
	...

0800a5f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d109      	bne.n	800a61c <HAL_TIM_PWM_Start+0x24>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b01      	cmp	r3, #1
 800a612:	bf14      	ite	ne
 800a614:	2301      	movne	r3, #1
 800a616:	2300      	moveq	r3, #0
 800a618:	b2db      	uxtb	r3, r3
 800a61a:	e03c      	b.n	800a696 <HAL_TIM_PWM_Start+0x9e>
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	2b04      	cmp	r3, #4
 800a620:	d109      	bne.n	800a636 <HAL_TIM_PWM_Start+0x3e>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a628:	b2db      	uxtb	r3, r3
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	bf14      	ite	ne
 800a62e:	2301      	movne	r3, #1
 800a630:	2300      	moveq	r3, #0
 800a632:	b2db      	uxtb	r3, r3
 800a634:	e02f      	b.n	800a696 <HAL_TIM_PWM_Start+0x9e>
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	2b08      	cmp	r3, #8
 800a63a:	d109      	bne.n	800a650 <HAL_TIM_PWM_Start+0x58>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b01      	cmp	r3, #1
 800a646:	bf14      	ite	ne
 800a648:	2301      	movne	r3, #1
 800a64a:	2300      	moveq	r3, #0
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	e022      	b.n	800a696 <HAL_TIM_PWM_Start+0x9e>
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	2b0c      	cmp	r3, #12
 800a654:	d109      	bne.n	800a66a <HAL_TIM_PWM_Start+0x72>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a65c:	b2db      	uxtb	r3, r3
 800a65e:	2b01      	cmp	r3, #1
 800a660:	bf14      	ite	ne
 800a662:	2301      	movne	r3, #1
 800a664:	2300      	moveq	r3, #0
 800a666:	b2db      	uxtb	r3, r3
 800a668:	e015      	b.n	800a696 <HAL_TIM_PWM_Start+0x9e>
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	2b10      	cmp	r3, #16
 800a66e:	d109      	bne.n	800a684 <HAL_TIM_PWM_Start+0x8c>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a676:	b2db      	uxtb	r3, r3
 800a678:	2b01      	cmp	r3, #1
 800a67a:	bf14      	ite	ne
 800a67c:	2301      	movne	r3, #1
 800a67e:	2300      	moveq	r3, #0
 800a680:	b2db      	uxtb	r3, r3
 800a682:	e008      	b.n	800a696 <HAL_TIM_PWM_Start+0x9e>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	bf14      	ite	ne
 800a690:	2301      	movne	r3, #1
 800a692:	2300      	moveq	r3, #0
 800a694:	b2db      	uxtb	r3, r3
 800a696:	2b00      	cmp	r3, #0
 800a698:	d001      	beq.n	800a69e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	e0a1      	b.n	800a7e2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d104      	bne.n	800a6ae <HAL_TIM_PWM_Start+0xb6>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2202      	movs	r2, #2
 800a6a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a6ac:	e023      	b.n	800a6f6 <HAL_TIM_PWM_Start+0xfe>
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	2b04      	cmp	r3, #4
 800a6b2:	d104      	bne.n	800a6be <HAL_TIM_PWM_Start+0xc6>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6bc:	e01b      	b.n	800a6f6 <HAL_TIM_PWM_Start+0xfe>
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	2b08      	cmp	r3, #8
 800a6c2:	d104      	bne.n	800a6ce <HAL_TIM_PWM_Start+0xd6>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a6cc:	e013      	b.n	800a6f6 <HAL_TIM_PWM_Start+0xfe>
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	2b0c      	cmp	r3, #12
 800a6d2:	d104      	bne.n	800a6de <HAL_TIM_PWM_Start+0xe6>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6dc:	e00b      	b.n	800a6f6 <HAL_TIM_PWM_Start+0xfe>
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	2b10      	cmp	r3, #16
 800a6e2:	d104      	bne.n	800a6ee <HAL_TIM_PWM_Start+0xf6>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2202      	movs	r2, #2
 800a6e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6ec:	e003      	b.n	800a6f6 <HAL_TIM_PWM_Start+0xfe>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2202      	movs	r2, #2
 800a6f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	6839      	ldr	r1, [r7, #0]
 800a6fe:	4618      	mov	r0, r3
 800a700:	f000 ffea 	bl	800b6d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a38      	ldr	r2, [pc, #224]	; (800a7ec <HAL_TIM_PWM_Start+0x1f4>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d013      	beq.n	800a736 <HAL_TIM_PWM_Start+0x13e>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4a37      	ldr	r2, [pc, #220]	; (800a7f0 <HAL_TIM_PWM_Start+0x1f8>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d00e      	beq.n	800a736 <HAL_TIM_PWM_Start+0x13e>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a35      	ldr	r2, [pc, #212]	; (800a7f4 <HAL_TIM_PWM_Start+0x1fc>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d009      	beq.n	800a736 <HAL_TIM_PWM_Start+0x13e>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a34      	ldr	r2, [pc, #208]	; (800a7f8 <HAL_TIM_PWM_Start+0x200>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d004      	beq.n	800a736 <HAL_TIM_PWM_Start+0x13e>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a32      	ldr	r2, [pc, #200]	; (800a7fc <HAL_TIM_PWM_Start+0x204>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d101      	bne.n	800a73a <HAL_TIM_PWM_Start+0x142>
 800a736:	2301      	movs	r3, #1
 800a738:	e000      	b.n	800a73c <HAL_TIM_PWM_Start+0x144>
 800a73a:	2300      	movs	r3, #0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d007      	beq.n	800a750 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a74e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a25      	ldr	r2, [pc, #148]	; (800a7ec <HAL_TIM_PWM_Start+0x1f4>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d022      	beq.n	800a7a0 <HAL_TIM_PWM_Start+0x1a8>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a762:	d01d      	beq.n	800a7a0 <HAL_TIM_PWM_Start+0x1a8>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a25      	ldr	r2, [pc, #148]	; (800a800 <HAL_TIM_PWM_Start+0x208>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d018      	beq.n	800a7a0 <HAL_TIM_PWM_Start+0x1a8>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a24      	ldr	r2, [pc, #144]	; (800a804 <HAL_TIM_PWM_Start+0x20c>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d013      	beq.n	800a7a0 <HAL_TIM_PWM_Start+0x1a8>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a22      	ldr	r2, [pc, #136]	; (800a808 <HAL_TIM_PWM_Start+0x210>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d00e      	beq.n	800a7a0 <HAL_TIM_PWM_Start+0x1a8>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a1a      	ldr	r2, [pc, #104]	; (800a7f0 <HAL_TIM_PWM_Start+0x1f8>)
 800a788:	4293      	cmp	r3, r2
 800a78a:	d009      	beq.n	800a7a0 <HAL_TIM_PWM_Start+0x1a8>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4a1e      	ldr	r2, [pc, #120]	; (800a80c <HAL_TIM_PWM_Start+0x214>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d004      	beq.n	800a7a0 <HAL_TIM_PWM_Start+0x1a8>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a16      	ldr	r2, [pc, #88]	; (800a7f4 <HAL_TIM_PWM_Start+0x1fc>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d115      	bne.n	800a7cc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	689a      	ldr	r2, [r3, #8]
 800a7a6:	4b1a      	ldr	r3, [pc, #104]	; (800a810 <HAL_TIM_PWM_Start+0x218>)
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2b06      	cmp	r3, #6
 800a7b0:	d015      	beq.n	800a7de <HAL_TIM_PWM_Start+0x1e6>
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7b8:	d011      	beq.n	800a7de <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f042 0201 	orr.w	r2, r2, #1
 800a7c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7ca:	e008      	b.n	800a7de <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f042 0201 	orr.w	r2, r2, #1
 800a7da:	601a      	str	r2, [r3, #0]
 800a7dc:	e000      	b.n	800a7e0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	40010000 	.word	0x40010000
 800a7f0:	40010400 	.word	0x40010400
 800a7f4:	40014000 	.word	0x40014000
 800a7f8:	40014400 	.word	0x40014400
 800a7fc:	40014800 	.word	0x40014800
 800a800:	40000400 	.word	0x40000400
 800a804:	40000800 	.word	0x40000800
 800a808:	40000c00 	.word	0x40000c00
 800a80c:	40001800 	.word	0x40001800
 800a810:	00010007 	.word	0x00010007

0800a814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	691b      	ldr	r3, [r3, #16]
 800a822:	f003 0302 	and.w	r3, r3, #2
 800a826:	2b02      	cmp	r3, #2
 800a828:	d122      	bne.n	800a870 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	68db      	ldr	r3, [r3, #12]
 800a830:	f003 0302 	and.w	r3, r3, #2
 800a834:	2b02      	cmp	r3, #2
 800a836:	d11b      	bne.n	800a870 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f06f 0202 	mvn.w	r2, #2
 800a840:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2201      	movs	r2, #1
 800a846:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	699b      	ldr	r3, [r3, #24]
 800a84e:	f003 0303 	and.w	r3, r3, #3
 800a852:	2b00      	cmp	r3, #0
 800a854:	d003      	beq.n	800a85e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fb12 	bl	800ae80 <HAL_TIM_IC_CaptureCallback>
 800a85c:	e005      	b.n	800a86a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 fb04 	bl	800ae6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fb15 	bl	800ae94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2200      	movs	r2, #0
 800a86e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	f003 0304 	and.w	r3, r3, #4
 800a87a:	2b04      	cmp	r3, #4
 800a87c:	d122      	bne.n	800a8c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	f003 0304 	and.w	r3, r3, #4
 800a888:	2b04      	cmp	r3, #4
 800a88a:	d11b      	bne.n	800a8c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f06f 0204 	mvn.w	r2, #4
 800a894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2202      	movs	r2, #2
 800a89a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fae8 	bl	800ae80 <HAL_TIM_IC_CaptureCallback>
 800a8b0:	e005      	b.n	800a8be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fada 	bl	800ae6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 faeb 	bl	800ae94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	f003 0308 	and.w	r3, r3, #8
 800a8ce:	2b08      	cmp	r3, #8
 800a8d0:	d122      	bne.n	800a918 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	f003 0308 	and.w	r3, r3, #8
 800a8dc:	2b08      	cmp	r3, #8
 800a8de:	d11b      	bne.n	800a918 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f06f 0208 	mvn.w	r2, #8
 800a8e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2204      	movs	r2, #4
 800a8ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	69db      	ldr	r3, [r3, #28]
 800a8f6:	f003 0303 	and.w	r3, r3, #3
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d003      	beq.n	800a906 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 fabe 	bl	800ae80 <HAL_TIM_IC_CaptureCallback>
 800a904:	e005      	b.n	800a912 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fab0 	bl	800ae6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fac1 	bl	800ae94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	f003 0310 	and.w	r3, r3, #16
 800a922:	2b10      	cmp	r3, #16
 800a924:	d122      	bne.n	800a96c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	f003 0310 	and.w	r3, r3, #16
 800a930:	2b10      	cmp	r3, #16
 800a932:	d11b      	bne.n	800a96c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f06f 0210 	mvn.w	r2, #16
 800a93c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2208      	movs	r2, #8
 800a942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	69db      	ldr	r3, [r3, #28]
 800a94a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d003      	beq.n	800a95a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fa94 	bl	800ae80 <HAL_TIM_IC_CaptureCallback>
 800a958:	e005      	b.n	800a966 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 fa86 	bl	800ae6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 fa97 	bl	800ae94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	f003 0301 	and.w	r3, r3, #1
 800a976:	2b01      	cmp	r3, #1
 800a978:	d10e      	bne.n	800a998 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	2b01      	cmp	r3, #1
 800a986:	d107      	bne.n	800a998 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f06f 0201 	mvn.w	r2, #1
 800a990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f7f7 fa6c 	bl	8001e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9a2:	2b80      	cmp	r3, #128	; 0x80
 800a9a4:	d10e      	bne.n	800a9c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9b0:	2b80      	cmp	r3, #128	; 0x80
 800a9b2:	d107      	bne.n	800a9c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a9bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 ffc6 	bl	800b950 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	691b      	ldr	r3, [r3, #16]
 800a9ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9d2:	d10e      	bne.n	800a9f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9de:	2b80      	cmp	r3, #128	; 0x80
 800a9e0:	d107      	bne.n	800a9f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a9ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 ffb9 	bl	800b964 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9fc:	2b40      	cmp	r3, #64	; 0x40
 800a9fe:	d10e      	bne.n	800aa1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa0a:	2b40      	cmp	r3, #64	; 0x40
 800aa0c:	d107      	bne.n	800aa1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aa16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fa45 	bl	800aea8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	691b      	ldr	r3, [r3, #16]
 800aa24:	f003 0320 	and.w	r3, r3, #32
 800aa28:	2b20      	cmp	r3, #32
 800aa2a:	d10e      	bne.n	800aa4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	f003 0320 	and.w	r3, r3, #32
 800aa36:	2b20      	cmp	r3, #32
 800aa38:	d107      	bne.n	800aa4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f06f 0220 	mvn.w	r2, #32
 800aa42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 ff79 	bl	800b93c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa4a:	bf00      	nop
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
	...

0800aa54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d101      	bne.n	800aa72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aa6e:	2302      	movs	r3, #2
 800aa70:	e0ff      	b.n	800ac72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2201      	movs	r2, #1
 800aa76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2b14      	cmp	r3, #20
 800aa7e:	f200 80f0 	bhi.w	800ac62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aa82:	a201      	add	r2, pc, #4	; (adr r2, 800aa88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aa84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa88:	0800aadd 	.word	0x0800aadd
 800aa8c:	0800ac63 	.word	0x0800ac63
 800aa90:	0800ac63 	.word	0x0800ac63
 800aa94:	0800ac63 	.word	0x0800ac63
 800aa98:	0800ab1d 	.word	0x0800ab1d
 800aa9c:	0800ac63 	.word	0x0800ac63
 800aaa0:	0800ac63 	.word	0x0800ac63
 800aaa4:	0800ac63 	.word	0x0800ac63
 800aaa8:	0800ab5f 	.word	0x0800ab5f
 800aaac:	0800ac63 	.word	0x0800ac63
 800aab0:	0800ac63 	.word	0x0800ac63
 800aab4:	0800ac63 	.word	0x0800ac63
 800aab8:	0800ab9f 	.word	0x0800ab9f
 800aabc:	0800ac63 	.word	0x0800ac63
 800aac0:	0800ac63 	.word	0x0800ac63
 800aac4:	0800ac63 	.word	0x0800ac63
 800aac8:	0800abe1 	.word	0x0800abe1
 800aacc:	0800ac63 	.word	0x0800ac63
 800aad0:	0800ac63 	.word	0x0800ac63
 800aad4:	0800ac63 	.word	0x0800ac63
 800aad8:	0800ac21 	.word	0x0800ac21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68b9      	ldr	r1, [r7, #8]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 fa84 	bl	800aff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	699a      	ldr	r2, [r3, #24]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	f042 0208 	orr.w	r2, r2, #8
 800aaf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	699a      	ldr	r2, [r3, #24]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f022 0204 	bic.w	r2, r2, #4
 800ab06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	6999      	ldr	r1, [r3, #24]
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	691a      	ldr	r2, [r3, #16]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	430a      	orrs	r2, r1
 800ab18:	619a      	str	r2, [r3, #24]
      break;
 800ab1a:	e0a5      	b.n	800ac68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68b9      	ldr	r1, [r7, #8]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f000 faf4 	bl	800b110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	699a      	ldr	r2, [r3, #24]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	699a      	ldr	r2, [r3, #24]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	6999      	ldr	r1, [r3, #24]
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	021a      	lsls	r2, r3, #8
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	430a      	orrs	r2, r1
 800ab5a:	619a      	str	r2, [r3, #24]
      break;
 800ab5c:	e084      	b.n	800ac68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	68b9      	ldr	r1, [r7, #8]
 800ab64:	4618      	mov	r0, r3
 800ab66:	f000 fb5d 	bl	800b224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	69da      	ldr	r2, [r3, #28]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f042 0208 	orr.w	r2, r2, #8
 800ab78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	69da      	ldr	r2, [r3, #28]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f022 0204 	bic.w	r2, r2, #4
 800ab88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	69d9      	ldr	r1, [r3, #28]
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	691a      	ldr	r2, [r3, #16]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	430a      	orrs	r2, r1
 800ab9a:	61da      	str	r2, [r3, #28]
      break;
 800ab9c:	e064      	b.n	800ac68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	68b9      	ldr	r1, [r7, #8]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f000 fbc5 	bl	800b334 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	69da      	ldr	r2, [r3, #28]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	69da      	ldr	r2, [r3, #28]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	69d9      	ldr	r1, [r3, #28]
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	021a      	lsls	r2, r3, #8
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	430a      	orrs	r2, r1
 800abdc:	61da      	str	r2, [r3, #28]
      break;
 800abde:	e043      	b.n	800ac68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68b9      	ldr	r1, [r7, #8]
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 fc0e 	bl	800b408 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f042 0208 	orr.w	r2, r2, #8
 800abfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f022 0204 	bic.w	r2, r2, #4
 800ac0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	691a      	ldr	r2, [r3, #16]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	430a      	orrs	r2, r1
 800ac1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ac1e:	e023      	b.n	800ac68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	68b9      	ldr	r1, [r7, #8]
 800ac26:	4618      	mov	r0, r3
 800ac28:	f000 fc52 	bl	800b4d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	021a      	lsls	r2, r3, #8
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	430a      	orrs	r2, r1
 800ac5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ac60:	e002      	b.n	800ac68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	75fb      	strb	r3, [r7, #23]
      break;
 800ac66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac70:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3718      	adds	r7, #24
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop

0800ac7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac86:	2300      	movs	r3, #0
 800ac88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d101      	bne.n	800ac98 <HAL_TIM_ConfigClockSource+0x1c>
 800ac94:	2302      	movs	r3, #2
 800ac96:	e0dc      	b.n	800ae52 <HAL_TIM_ConfigClockSource+0x1d6>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2202      	movs	r2, #2
 800aca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	4b6a      	ldr	r3, [pc, #424]	; (800ae5c <HAL_TIM_ConfigClockSource+0x1e0>)
 800acb4:	4013      	ands	r3, r2
 800acb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	68ba      	ldr	r2, [r7, #8]
 800acc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a64      	ldr	r2, [pc, #400]	; (800ae60 <HAL_TIM_ConfigClockSource+0x1e4>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	f000 80a9 	beq.w	800ae26 <HAL_TIM_ConfigClockSource+0x1aa>
 800acd4:	4a62      	ldr	r2, [pc, #392]	; (800ae60 <HAL_TIM_ConfigClockSource+0x1e4>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	f200 80ae 	bhi.w	800ae38 <HAL_TIM_ConfigClockSource+0x1bc>
 800acdc:	4a61      	ldr	r2, [pc, #388]	; (800ae64 <HAL_TIM_ConfigClockSource+0x1e8>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	f000 80a1 	beq.w	800ae26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ace4:	4a5f      	ldr	r2, [pc, #380]	; (800ae64 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	f200 80a6 	bhi.w	800ae38 <HAL_TIM_ConfigClockSource+0x1bc>
 800acec:	4a5e      	ldr	r2, [pc, #376]	; (800ae68 <HAL_TIM_ConfigClockSource+0x1ec>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	f000 8099 	beq.w	800ae26 <HAL_TIM_ConfigClockSource+0x1aa>
 800acf4:	4a5c      	ldr	r2, [pc, #368]	; (800ae68 <HAL_TIM_ConfigClockSource+0x1ec>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	f200 809e 	bhi.w	800ae38 <HAL_TIM_ConfigClockSource+0x1bc>
 800acfc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ad00:	f000 8091 	beq.w	800ae26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ad04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ad08:	f200 8096 	bhi.w	800ae38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad10:	f000 8089 	beq.w	800ae26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ad14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad18:	f200 808e 	bhi.w	800ae38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad20:	d03e      	beq.n	800ada0 <HAL_TIM_ConfigClockSource+0x124>
 800ad22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad26:	f200 8087 	bhi.w	800ae38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad2e:	f000 8086 	beq.w	800ae3e <HAL_TIM_ConfigClockSource+0x1c2>
 800ad32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad36:	d87f      	bhi.n	800ae38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad38:	2b70      	cmp	r3, #112	; 0x70
 800ad3a:	d01a      	beq.n	800ad72 <HAL_TIM_ConfigClockSource+0xf6>
 800ad3c:	2b70      	cmp	r3, #112	; 0x70
 800ad3e:	d87b      	bhi.n	800ae38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad40:	2b60      	cmp	r3, #96	; 0x60
 800ad42:	d050      	beq.n	800ade6 <HAL_TIM_ConfigClockSource+0x16a>
 800ad44:	2b60      	cmp	r3, #96	; 0x60
 800ad46:	d877      	bhi.n	800ae38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad48:	2b50      	cmp	r3, #80	; 0x50
 800ad4a:	d03c      	beq.n	800adc6 <HAL_TIM_ConfigClockSource+0x14a>
 800ad4c:	2b50      	cmp	r3, #80	; 0x50
 800ad4e:	d873      	bhi.n	800ae38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad50:	2b40      	cmp	r3, #64	; 0x40
 800ad52:	d058      	beq.n	800ae06 <HAL_TIM_ConfigClockSource+0x18a>
 800ad54:	2b40      	cmp	r3, #64	; 0x40
 800ad56:	d86f      	bhi.n	800ae38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad58:	2b30      	cmp	r3, #48	; 0x30
 800ad5a:	d064      	beq.n	800ae26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ad5c:	2b30      	cmp	r3, #48	; 0x30
 800ad5e:	d86b      	bhi.n	800ae38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad60:	2b20      	cmp	r3, #32
 800ad62:	d060      	beq.n	800ae26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ad64:	2b20      	cmp	r3, #32
 800ad66:	d867      	bhi.n	800ae38 <HAL_TIM_ConfigClockSource+0x1bc>
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d05c      	beq.n	800ae26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ad6c:	2b10      	cmp	r3, #16
 800ad6e:	d05a      	beq.n	800ae26 <HAL_TIM_ConfigClockSource+0x1aa>
 800ad70:	e062      	b.n	800ae38 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6818      	ldr	r0, [r3, #0]
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	6899      	ldr	r1, [r3, #8]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	685a      	ldr	r2, [r3, #4]
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	f000 fc89 	bl	800b698 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	68ba      	ldr	r2, [r7, #8]
 800ad9c:	609a      	str	r2, [r3, #8]
      break;
 800ad9e:	e04f      	b.n	800ae40 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6818      	ldr	r0, [r3, #0]
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	6899      	ldr	r1, [r3, #8]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	f000 fc72 	bl	800b698 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	689a      	ldr	r2, [r3, #8]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800adc2:	609a      	str	r2, [r3, #8]
      break;
 800adc4:	e03c      	b.n	800ae40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6818      	ldr	r0, [r3, #0]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	6859      	ldr	r1, [r3, #4]
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	461a      	mov	r2, r3
 800add4:	f000 fbe2 	bl	800b59c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2150      	movs	r1, #80	; 0x50
 800adde:	4618      	mov	r0, r3
 800ade0:	f000 fc3c 	bl	800b65c <TIM_ITRx_SetConfig>
      break;
 800ade4:	e02c      	b.n	800ae40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6818      	ldr	r0, [r3, #0]
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	6859      	ldr	r1, [r3, #4]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	68db      	ldr	r3, [r3, #12]
 800adf2:	461a      	mov	r2, r3
 800adf4:	f000 fc01 	bl	800b5fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2160      	movs	r1, #96	; 0x60
 800adfe:	4618      	mov	r0, r3
 800ae00:	f000 fc2c 	bl	800b65c <TIM_ITRx_SetConfig>
      break;
 800ae04:	e01c      	b.n	800ae40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6818      	ldr	r0, [r3, #0]
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	6859      	ldr	r1, [r3, #4]
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	461a      	mov	r2, r3
 800ae14:	f000 fbc2 	bl	800b59c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2140      	movs	r1, #64	; 0x40
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f000 fc1c 	bl	800b65c <TIM_ITRx_SetConfig>
      break;
 800ae24:	e00c      	b.n	800ae40 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4619      	mov	r1, r3
 800ae30:	4610      	mov	r0, r2
 800ae32:	f000 fc13 	bl	800b65c <TIM_ITRx_SetConfig>
      break;
 800ae36:	e003      	b.n	800ae40 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae3c:	e000      	b.n	800ae40 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ae3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	ffceff88 	.word	0xffceff88
 800ae60:	00100040 	.word	0x00100040
 800ae64:	00100030 	.word	0x00100030
 800ae68:	00100020 	.word	0x00100020

0800ae6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae74:	bf00      	nop
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae88:	bf00      	nop
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae9c:	bf00      	nop
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b083      	sub	sp, #12
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aeb0:	bf00      	nop
 800aeb2:	370c      	adds	r7, #12
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a40      	ldr	r2, [pc, #256]	; (800afd0 <TIM_Base_SetConfig+0x114>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d013      	beq.n	800aefc <TIM_Base_SetConfig+0x40>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aeda:	d00f      	beq.n	800aefc <TIM_Base_SetConfig+0x40>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a3d      	ldr	r2, [pc, #244]	; (800afd4 <TIM_Base_SetConfig+0x118>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d00b      	beq.n	800aefc <TIM_Base_SetConfig+0x40>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a3c      	ldr	r2, [pc, #240]	; (800afd8 <TIM_Base_SetConfig+0x11c>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d007      	beq.n	800aefc <TIM_Base_SetConfig+0x40>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	4a3b      	ldr	r2, [pc, #236]	; (800afdc <TIM_Base_SetConfig+0x120>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d003      	beq.n	800aefc <TIM_Base_SetConfig+0x40>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a3a      	ldr	r2, [pc, #232]	; (800afe0 <TIM_Base_SetConfig+0x124>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d108      	bne.n	800af0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	4313      	orrs	r3, r2
 800af0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a2f      	ldr	r2, [pc, #188]	; (800afd0 <TIM_Base_SetConfig+0x114>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d01f      	beq.n	800af56 <TIM_Base_SetConfig+0x9a>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af1c:	d01b      	beq.n	800af56 <TIM_Base_SetConfig+0x9a>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4a2c      	ldr	r2, [pc, #176]	; (800afd4 <TIM_Base_SetConfig+0x118>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d017      	beq.n	800af56 <TIM_Base_SetConfig+0x9a>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a2b      	ldr	r2, [pc, #172]	; (800afd8 <TIM_Base_SetConfig+0x11c>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d013      	beq.n	800af56 <TIM_Base_SetConfig+0x9a>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a2a      	ldr	r2, [pc, #168]	; (800afdc <TIM_Base_SetConfig+0x120>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d00f      	beq.n	800af56 <TIM_Base_SetConfig+0x9a>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a29      	ldr	r2, [pc, #164]	; (800afe0 <TIM_Base_SetConfig+0x124>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d00b      	beq.n	800af56 <TIM_Base_SetConfig+0x9a>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a28      	ldr	r2, [pc, #160]	; (800afe4 <TIM_Base_SetConfig+0x128>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d007      	beq.n	800af56 <TIM_Base_SetConfig+0x9a>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a27      	ldr	r2, [pc, #156]	; (800afe8 <TIM_Base_SetConfig+0x12c>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d003      	beq.n	800af56 <TIM_Base_SetConfig+0x9a>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a26      	ldr	r2, [pc, #152]	; (800afec <TIM_Base_SetConfig+0x130>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d108      	bne.n	800af68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	4313      	orrs	r3, r2
 800af66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	695b      	ldr	r3, [r3, #20]
 800af72:	4313      	orrs	r3, r2
 800af74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	689a      	ldr	r2, [r3, #8]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a10      	ldr	r2, [pc, #64]	; (800afd0 <TIM_Base_SetConfig+0x114>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d00f      	beq.n	800afb4 <TIM_Base_SetConfig+0xf8>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a12      	ldr	r2, [pc, #72]	; (800afe0 <TIM_Base_SetConfig+0x124>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d00b      	beq.n	800afb4 <TIM_Base_SetConfig+0xf8>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4a11      	ldr	r2, [pc, #68]	; (800afe4 <TIM_Base_SetConfig+0x128>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d007      	beq.n	800afb4 <TIM_Base_SetConfig+0xf8>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	4a10      	ldr	r2, [pc, #64]	; (800afe8 <TIM_Base_SetConfig+0x12c>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d003      	beq.n	800afb4 <TIM_Base_SetConfig+0xf8>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a0f      	ldr	r2, [pc, #60]	; (800afec <TIM_Base_SetConfig+0x130>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d103      	bne.n	800afbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	691a      	ldr	r2, [r3, #16]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	615a      	str	r2, [r3, #20]
}
 800afc2:	bf00      	nop
 800afc4:	3714      	adds	r7, #20
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	40010000 	.word	0x40010000
 800afd4:	40000400 	.word	0x40000400
 800afd8:	40000800 	.word	0x40000800
 800afdc:	40000c00 	.word	0x40000c00
 800afe0:	40010400 	.word	0x40010400
 800afe4:	40014000 	.word	0x40014000
 800afe8:	40014400 	.word	0x40014400
 800afec:	40014800 	.word	0x40014800

0800aff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b087      	sub	sp, #28
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	f023 0201 	bic.w	r2, r3, #1
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6a1b      	ldr	r3, [r3, #32]
 800b00a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	699b      	ldr	r3, [r3, #24]
 800b016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	4b37      	ldr	r3, [pc, #220]	; (800b0f8 <TIM_OC1_SetConfig+0x108>)
 800b01c:	4013      	ands	r3, r2
 800b01e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f023 0303 	bic.w	r3, r3, #3
 800b026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	4313      	orrs	r3, r2
 800b030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	f023 0302 	bic.w	r3, r3, #2
 800b038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	697a      	ldr	r2, [r7, #20]
 800b040:	4313      	orrs	r3, r2
 800b042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	4a2d      	ldr	r2, [pc, #180]	; (800b0fc <TIM_OC1_SetConfig+0x10c>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d00f      	beq.n	800b06c <TIM_OC1_SetConfig+0x7c>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	4a2c      	ldr	r2, [pc, #176]	; (800b100 <TIM_OC1_SetConfig+0x110>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d00b      	beq.n	800b06c <TIM_OC1_SetConfig+0x7c>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	4a2b      	ldr	r2, [pc, #172]	; (800b104 <TIM_OC1_SetConfig+0x114>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d007      	beq.n	800b06c <TIM_OC1_SetConfig+0x7c>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a2a      	ldr	r2, [pc, #168]	; (800b108 <TIM_OC1_SetConfig+0x118>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d003      	beq.n	800b06c <TIM_OC1_SetConfig+0x7c>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4a29      	ldr	r2, [pc, #164]	; (800b10c <TIM_OC1_SetConfig+0x11c>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d10c      	bne.n	800b086 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	f023 0308 	bic.w	r3, r3, #8
 800b072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	697a      	ldr	r2, [r7, #20]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	f023 0304 	bic.w	r3, r3, #4
 800b084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a1c      	ldr	r2, [pc, #112]	; (800b0fc <TIM_OC1_SetConfig+0x10c>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d00f      	beq.n	800b0ae <TIM_OC1_SetConfig+0xbe>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a1b      	ldr	r2, [pc, #108]	; (800b100 <TIM_OC1_SetConfig+0x110>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d00b      	beq.n	800b0ae <TIM_OC1_SetConfig+0xbe>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a1a      	ldr	r2, [pc, #104]	; (800b104 <TIM_OC1_SetConfig+0x114>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d007      	beq.n	800b0ae <TIM_OC1_SetConfig+0xbe>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4a19      	ldr	r2, [pc, #100]	; (800b108 <TIM_OC1_SetConfig+0x118>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d003      	beq.n	800b0ae <TIM_OC1_SetConfig+0xbe>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	4a18      	ldr	r2, [pc, #96]	; (800b10c <TIM_OC1_SetConfig+0x11c>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d111      	bne.n	800b0d2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	695b      	ldr	r3, [r3, #20]
 800b0c2:	693a      	ldr	r2, [r7, #16]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	693a      	ldr	r2, [r7, #16]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	693a      	ldr	r2, [r7, #16]
 800b0d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	685a      	ldr	r2, [r3, #4]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	697a      	ldr	r2, [r7, #20]
 800b0ea:	621a      	str	r2, [r3, #32]
}
 800b0ec:	bf00      	nop
 800b0ee:	371c      	adds	r7, #28
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr
 800b0f8:	fffeff8f 	.word	0xfffeff8f
 800b0fc:	40010000 	.word	0x40010000
 800b100:	40010400 	.word	0x40010400
 800b104:	40014000 	.word	0x40014000
 800b108:	40014400 	.word	0x40014400
 800b10c:	40014800 	.word	0x40014800

0800b110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b110:	b480      	push	{r7}
 800b112:	b087      	sub	sp, #28
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a1b      	ldr	r3, [r3, #32]
 800b11e:	f023 0210 	bic.w	r2, r3, #16
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a1b      	ldr	r3, [r3, #32]
 800b12a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	699b      	ldr	r3, [r3, #24]
 800b136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b138:	68fa      	ldr	r2, [r7, #12]
 800b13a:	4b34      	ldr	r3, [pc, #208]	; (800b20c <TIM_OC2_SetConfig+0xfc>)
 800b13c:	4013      	ands	r3, r2
 800b13e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	021b      	lsls	r3, r3, #8
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	4313      	orrs	r3, r2
 800b152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	f023 0320 	bic.w	r3, r3, #32
 800b15a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	011b      	lsls	r3, r3, #4
 800b162:	697a      	ldr	r2, [r7, #20]
 800b164:	4313      	orrs	r3, r2
 800b166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a29      	ldr	r2, [pc, #164]	; (800b210 <TIM_OC2_SetConfig+0x100>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d003      	beq.n	800b178 <TIM_OC2_SetConfig+0x68>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4a28      	ldr	r2, [pc, #160]	; (800b214 <TIM_OC2_SetConfig+0x104>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d10d      	bne.n	800b194 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b17e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	011b      	lsls	r3, r3, #4
 800b186:	697a      	ldr	r2, [r7, #20]
 800b188:	4313      	orrs	r3, r2
 800b18a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b192:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	4a1e      	ldr	r2, [pc, #120]	; (800b210 <TIM_OC2_SetConfig+0x100>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d00f      	beq.n	800b1bc <TIM_OC2_SetConfig+0xac>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a1d      	ldr	r2, [pc, #116]	; (800b214 <TIM_OC2_SetConfig+0x104>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d00b      	beq.n	800b1bc <TIM_OC2_SetConfig+0xac>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a1c      	ldr	r2, [pc, #112]	; (800b218 <TIM_OC2_SetConfig+0x108>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d007      	beq.n	800b1bc <TIM_OC2_SetConfig+0xac>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a1b      	ldr	r2, [pc, #108]	; (800b21c <TIM_OC2_SetConfig+0x10c>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d003      	beq.n	800b1bc <TIM_OC2_SetConfig+0xac>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a1a      	ldr	r2, [pc, #104]	; (800b220 <TIM_OC2_SetConfig+0x110>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d113      	bne.n	800b1e4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	695b      	ldr	r3, [r3, #20]
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	699b      	ldr	r3, [r3, #24]
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	693a      	ldr	r2, [r7, #16]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	697a      	ldr	r2, [r7, #20]
 800b1fc:	621a      	str	r2, [r3, #32]
}
 800b1fe:	bf00      	nop
 800b200:	371c      	adds	r7, #28
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	feff8fff 	.word	0xfeff8fff
 800b210:	40010000 	.word	0x40010000
 800b214:	40010400 	.word	0x40010400
 800b218:	40014000 	.word	0x40014000
 800b21c:	40014400 	.word	0x40014400
 800b220:	40014800 	.word	0x40014800

0800b224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b224:	b480      	push	{r7}
 800b226:	b087      	sub	sp, #28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a1b      	ldr	r3, [r3, #32]
 800b232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a1b      	ldr	r3, [r3, #32]
 800b23e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	69db      	ldr	r3, [r3, #28]
 800b24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	4b33      	ldr	r3, [pc, #204]	; (800b31c <TIM_OC3_SetConfig+0xf8>)
 800b250:	4013      	ands	r3, r2
 800b252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f023 0303 	bic.w	r3, r3, #3
 800b25a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	4313      	orrs	r3, r2
 800b264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b26c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	021b      	lsls	r3, r3, #8
 800b274:	697a      	ldr	r2, [r7, #20]
 800b276:	4313      	orrs	r3, r2
 800b278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4a28      	ldr	r2, [pc, #160]	; (800b320 <TIM_OC3_SetConfig+0xfc>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d003      	beq.n	800b28a <TIM_OC3_SetConfig+0x66>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a27      	ldr	r2, [pc, #156]	; (800b324 <TIM_OC3_SetConfig+0x100>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d10d      	bne.n	800b2a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	021b      	lsls	r3, r3, #8
 800b298:	697a      	ldr	r2, [r7, #20]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b2a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a1d      	ldr	r2, [pc, #116]	; (800b320 <TIM_OC3_SetConfig+0xfc>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d00f      	beq.n	800b2ce <TIM_OC3_SetConfig+0xaa>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a1c      	ldr	r2, [pc, #112]	; (800b324 <TIM_OC3_SetConfig+0x100>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d00b      	beq.n	800b2ce <TIM_OC3_SetConfig+0xaa>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a1b      	ldr	r2, [pc, #108]	; (800b328 <TIM_OC3_SetConfig+0x104>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d007      	beq.n	800b2ce <TIM_OC3_SetConfig+0xaa>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a1a      	ldr	r2, [pc, #104]	; (800b32c <TIM_OC3_SetConfig+0x108>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d003      	beq.n	800b2ce <TIM_OC3_SetConfig+0xaa>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a19      	ldr	r2, [pc, #100]	; (800b330 <TIM_OC3_SetConfig+0x10c>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d113      	bne.n	800b2f6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	011b      	lsls	r3, r3, #4
 800b2e4:	693a      	ldr	r2, [r7, #16]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	699b      	ldr	r3, [r3, #24]
 800b2ee:	011b      	lsls	r3, r3, #4
 800b2f0:	693a      	ldr	r2, [r7, #16]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	693a      	ldr	r2, [r7, #16]
 800b2fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	685a      	ldr	r2, [r3, #4]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	697a      	ldr	r2, [r7, #20]
 800b30e:	621a      	str	r2, [r3, #32]
}
 800b310:	bf00      	nop
 800b312:	371c      	adds	r7, #28
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr
 800b31c:	fffeff8f 	.word	0xfffeff8f
 800b320:	40010000 	.word	0x40010000
 800b324:	40010400 	.word	0x40010400
 800b328:	40014000 	.word	0x40014000
 800b32c:	40014400 	.word	0x40014400
 800b330:	40014800 	.word	0x40014800

0800b334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b334:	b480      	push	{r7}
 800b336:	b087      	sub	sp, #28
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6a1b      	ldr	r3, [r3, #32]
 800b342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a1b      	ldr	r3, [r3, #32]
 800b34e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	69db      	ldr	r3, [r3, #28]
 800b35a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	4b24      	ldr	r3, [pc, #144]	; (800b3f0 <TIM_OC4_SetConfig+0xbc>)
 800b360:	4013      	ands	r3, r2
 800b362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b36a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	021b      	lsls	r3, r3, #8
 800b372:	68fa      	ldr	r2, [r7, #12]
 800b374:	4313      	orrs	r3, r2
 800b376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b37e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	031b      	lsls	r3, r3, #12
 800b386:	693a      	ldr	r2, [r7, #16]
 800b388:	4313      	orrs	r3, r2
 800b38a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a19      	ldr	r2, [pc, #100]	; (800b3f4 <TIM_OC4_SetConfig+0xc0>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d00f      	beq.n	800b3b4 <TIM_OC4_SetConfig+0x80>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4a18      	ldr	r2, [pc, #96]	; (800b3f8 <TIM_OC4_SetConfig+0xc4>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d00b      	beq.n	800b3b4 <TIM_OC4_SetConfig+0x80>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a17      	ldr	r2, [pc, #92]	; (800b3fc <TIM_OC4_SetConfig+0xc8>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d007      	beq.n	800b3b4 <TIM_OC4_SetConfig+0x80>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a16      	ldr	r2, [pc, #88]	; (800b400 <TIM_OC4_SetConfig+0xcc>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d003      	beq.n	800b3b4 <TIM_OC4_SetConfig+0x80>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4a15      	ldr	r2, [pc, #84]	; (800b404 <TIM_OC4_SetConfig+0xd0>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d109      	bne.n	800b3c8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	695b      	ldr	r3, [r3, #20]
 800b3c0:	019b      	lsls	r3, r3, #6
 800b3c2:	697a      	ldr	r2, [r7, #20]
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	697a      	ldr	r2, [r7, #20]
 800b3cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	685a      	ldr	r2, [r3, #4]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	693a      	ldr	r2, [r7, #16]
 800b3e0:	621a      	str	r2, [r3, #32]
}
 800b3e2:	bf00      	nop
 800b3e4:	371c      	adds	r7, #28
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	feff8fff 	.word	0xfeff8fff
 800b3f4:	40010000 	.word	0x40010000
 800b3f8:	40010400 	.word	0x40010400
 800b3fc:	40014000 	.word	0x40014000
 800b400:	40014400 	.word	0x40014400
 800b404:	40014800 	.word	0x40014800

0800b408 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6a1b      	ldr	r3, [r3, #32]
 800b416:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a1b      	ldr	r3, [r3, #32]
 800b422:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b430:	68fa      	ldr	r2, [r7, #12]
 800b432:	4b21      	ldr	r3, [pc, #132]	; (800b4b8 <TIM_OC5_SetConfig+0xb0>)
 800b434:	4013      	ands	r3, r2
 800b436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	4313      	orrs	r3, r2
 800b440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b448:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	041b      	lsls	r3, r3, #16
 800b450:	693a      	ldr	r2, [r7, #16]
 800b452:	4313      	orrs	r3, r2
 800b454:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a18      	ldr	r2, [pc, #96]	; (800b4bc <TIM_OC5_SetConfig+0xb4>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d00f      	beq.n	800b47e <TIM_OC5_SetConfig+0x76>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a17      	ldr	r2, [pc, #92]	; (800b4c0 <TIM_OC5_SetConfig+0xb8>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d00b      	beq.n	800b47e <TIM_OC5_SetConfig+0x76>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a16      	ldr	r2, [pc, #88]	; (800b4c4 <TIM_OC5_SetConfig+0xbc>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d007      	beq.n	800b47e <TIM_OC5_SetConfig+0x76>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a15      	ldr	r2, [pc, #84]	; (800b4c8 <TIM_OC5_SetConfig+0xc0>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d003      	beq.n	800b47e <TIM_OC5_SetConfig+0x76>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a14      	ldr	r2, [pc, #80]	; (800b4cc <TIM_OC5_SetConfig+0xc4>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d109      	bne.n	800b492 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b484:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	021b      	lsls	r3, r3, #8
 800b48c:	697a      	ldr	r2, [r7, #20]
 800b48e:	4313      	orrs	r3, r2
 800b490:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	697a      	ldr	r2, [r7, #20]
 800b496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	685a      	ldr	r2, [r3, #4]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	621a      	str	r2, [r3, #32]
}
 800b4ac:	bf00      	nop
 800b4ae:	371c      	adds	r7, #28
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr
 800b4b8:	fffeff8f 	.word	0xfffeff8f
 800b4bc:	40010000 	.word	0x40010000
 800b4c0:	40010400 	.word	0x40010400
 800b4c4:	40014000 	.word	0x40014000
 800b4c8:	40014400 	.word	0x40014400
 800b4cc:	40014800 	.word	0x40014800

0800b4d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b087      	sub	sp, #28
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6a1b      	ldr	r3, [r3, #32]
 800b4de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6a1b      	ldr	r3, [r3, #32]
 800b4ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	4b22      	ldr	r3, [pc, #136]	; (800b584 <TIM_OC6_SetConfig+0xb4>)
 800b4fc:	4013      	ands	r3, r2
 800b4fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	021b      	lsls	r3, r3, #8
 800b506:	68fa      	ldr	r2, [r7, #12]
 800b508:	4313      	orrs	r3, r2
 800b50a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	051b      	lsls	r3, r3, #20
 800b51a:	693a      	ldr	r2, [r7, #16]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4a19      	ldr	r2, [pc, #100]	; (800b588 <TIM_OC6_SetConfig+0xb8>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d00f      	beq.n	800b548 <TIM_OC6_SetConfig+0x78>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a18      	ldr	r2, [pc, #96]	; (800b58c <TIM_OC6_SetConfig+0xbc>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d00b      	beq.n	800b548 <TIM_OC6_SetConfig+0x78>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a17      	ldr	r2, [pc, #92]	; (800b590 <TIM_OC6_SetConfig+0xc0>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d007      	beq.n	800b548 <TIM_OC6_SetConfig+0x78>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a16      	ldr	r2, [pc, #88]	; (800b594 <TIM_OC6_SetConfig+0xc4>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d003      	beq.n	800b548 <TIM_OC6_SetConfig+0x78>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a15      	ldr	r2, [pc, #84]	; (800b598 <TIM_OC6_SetConfig+0xc8>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d109      	bne.n	800b55c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b54e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	695b      	ldr	r3, [r3, #20]
 800b554:	029b      	lsls	r3, r3, #10
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	4313      	orrs	r3, r2
 800b55a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	697a      	ldr	r2, [r7, #20]
 800b560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	685a      	ldr	r2, [r3, #4]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	693a      	ldr	r2, [r7, #16]
 800b574:	621a      	str	r2, [r3, #32]
}
 800b576:	bf00      	nop
 800b578:	371c      	adds	r7, #28
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
 800b582:	bf00      	nop
 800b584:	feff8fff 	.word	0xfeff8fff
 800b588:	40010000 	.word	0x40010000
 800b58c:	40010400 	.word	0x40010400
 800b590:	40014000 	.word	0x40014000
 800b594:	40014400 	.word	0x40014400
 800b598:	40014800 	.word	0x40014800

0800b59c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b087      	sub	sp, #28
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6a1b      	ldr	r3, [r3, #32]
 800b5ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6a1b      	ldr	r3, [r3, #32]
 800b5b2:	f023 0201 	bic.w	r2, r3, #1
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	699b      	ldr	r3, [r3, #24]
 800b5be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b5c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	011b      	lsls	r3, r3, #4
 800b5cc:	693a      	ldr	r2, [r7, #16]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	f023 030a 	bic.w	r3, r3, #10
 800b5d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b5da:	697a      	ldr	r2, [r7, #20]
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	693a      	ldr	r2, [r7, #16]
 800b5e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	697a      	ldr	r2, [r7, #20]
 800b5ec:	621a      	str	r2, [r3, #32]
}
 800b5ee:	bf00      	nop
 800b5f0:	371c      	adds	r7, #28
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f8:	4770      	bx	lr

0800b5fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5fa:	b480      	push	{r7}
 800b5fc:	b087      	sub	sp, #28
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	60f8      	str	r0, [r7, #12]
 800b602:	60b9      	str	r1, [r7, #8]
 800b604:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	6a1b      	ldr	r3, [r3, #32]
 800b60a:	f023 0210 	bic.w	r2, r3, #16
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	699b      	ldr	r3, [r3, #24]
 800b616:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6a1b      	ldr	r3, [r3, #32]
 800b61c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b624:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	031b      	lsls	r3, r3, #12
 800b62a:	697a      	ldr	r2, [r7, #20]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b636:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	011b      	lsls	r3, r3, #4
 800b63c:	693a      	ldr	r2, [r7, #16]
 800b63e:	4313      	orrs	r3, r2
 800b640:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	697a      	ldr	r2, [r7, #20]
 800b646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	693a      	ldr	r2, [r7, #16]
 800b64c:	621a      	str	r2, [r3, #32]
}
 800b64e:	bf00      	nop
 800b650:	371c      	adds	r7, #28
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
	...

0800b65c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b085      	sub	sp, #20
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b66c:	68fa      	ldr	r2, [r7, #12]
 800b66e:	4b09      	ldr	r3, [pc, #36]	; (800b694 <TIM_ITRx_SetConfig+0x38>)
 800b670:	4013      	ands	r3, r2
 800b672:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b674:	683a      	ldr	r2, [r7, #0]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	4313      	orrs	r3, r2
 800b67a:	f043 0307 	orr.w	r3, r3, #7
 800b67e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	609a      	str	r2, [r3, #8]
}
 800b686:	bf00      	nop
 800b688:	3714      	adds	r7, #20
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	ffcfff8f 	.word	0xffcfff8f

0800b698 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b698:	b480      	push	{r7}
 800b69a:	b087      	sub	sp, #28
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
 800b6a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	021a      	lsls	r2, r3, #8
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	431a      	orrs	r2, r3
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	697a      	ldr	r2, [r7, #20]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	697a      	ldr	r2, [r7, #20]
 800b6ca:	609a      	str	r2, [r3, #8]
}
 800b6cc:	bf00      	nop
 800b6ce:	371c      	adds	r7, #28
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b087      	sub	sp, #28
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	f003 031f 	and.w	r3, r3, #31
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b6f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6a1a      	ldr	r2, [r3, #32]
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	43db      	mvns	r3, r3
 800b6fa:	401a      	ands	r2, r3
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6a1a      	ldr	r2, [r3, #32]
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	f003 031f 	and.w	r3, r3, #31
 800b70a:	6879      	ldr	r1, [r7, #4]
 800b70c:	fa01 f303 	lsl.w	r3, r1, r3
 800b710:	431a      	orrs	r2, r3
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	621a      	str	r2, [r3, #32]
}
 800b716:	bf00      	nop
 800b718:	371c      	adds	r7, #28
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
	...

0800b724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b734:	2b01      	cmp	r3, #1
 800b736:	d101      	bne.n	800b73c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b738:	2302      	movs	r3, #2
 800b73a:	e06d      	b.n	800b818 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2201      	movs	r2, #1
 800b740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2202      	movs	r2, #2
 800b748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a30      	ldr	r2, [pc, #192]	; (800b824 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d004      	beq.n	800b770 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a2f      	ldr	r2, [pc, #188]	; (800b828 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d108      	bne.n	800b782 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b776:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	4313      	orrs	r3, r2
 800b780:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b788:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	4313      	orrs	r3, r2
 800b792:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a20      	ldr	r2, [pc, #128]	; (800b824 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d022      	beq.n	800b7ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7ae:	d01d      	beq.n	800b7ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a1d      	ldr	r2, [pc, #116]	; (800b82c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d018      	beq.n	800b7ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a1c      	ldr	r2, [pc, #112]	; (800b830 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d013      	beq.n	800b7ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a1a      	ldr	r2, [pc, #104]	; (800b834 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	d00e      	beq.n	800b7ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4a15      	ldr	r2, [pc, #84]	; (800b828 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d009      	beq.n	800b7ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a16      	ldr	r2, [pc, #88]	; (800b838 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d004      	beq.n	800b7ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a15      	ldr	r2, [pc, #84]	; (800b83c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d10c      	bne.n	800b806 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	689b      	ldr	r3, [r3, #8]
 800b7f8:	68ba      	ldr	r2, [r7, #8]
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2201      	movs	r2, #1
 800b80a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2200      	movs	r2, #0
 800b812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3714      	adds	r7, #20
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr
 800b824:	40010000 	.word	0x40010000
 800b828:	40010400 	.word	0x40010400
 800b82c:	40000400 	.word	0x40000400
 800b830:	40000800 	.word	0x40000800
 800b834:	40000c00 	.word	0x40000c00
 800b838:	40001800 	.word	0x40001800
 800b83c:	40014000 	.word	0x40014000

0800b840 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b840:	b480      	push	{r7}
 800b842:	b085      	sub	sp, #20
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b84a:	2300      	movs	r3, #0
 800b84c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b854:	2b01      	cmp	r3, #1
 800b856:	d101      	bne.n	800b85c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b858:	2302      	movs	r3, #2
 800b85a:	e065      	b.n	800b928 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2201      	movs	r2, #1
 800b860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	68db      	ldr	r3, [r3, #12]
 800b86e:	4313      	orrs	r3, r2
 800b870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	4313      	orrs	r3, r2
 800b87e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	4313      	orrs	r3, r2
 800b88c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4313      	orrs	r3, r2
 800b89a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	691b      	ldr	r3, [r3, #16]
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	695b      	ldr	r3, [r3, #20]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	699b      	ldr	r3, [r3, #24]
 800b8d0:	041b      	lsls	r3, r3, #16
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	4a16      	ldr	r2, [pc, #88]	; (800b934 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d004      	beq.n	800b8ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a14      	ldr	r2, [pc, #80]	; (800b938 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d115      	bne.n	800b916 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f4:	051b      	lsls	r3, r3, #20
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	69db      	ldr	r3, [r3, #28]
 800b904:	4313      	orrs	r3, r2
 800b906:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	6a1b      	ldr	r3, [r3, #32]
 800b912:	4313      	orrs	r3, r2
 800b914:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr
 800b934:	40010000 	.word	0x40010000
 800b938:	40010400 	.word	0x40010400

0800b93c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b944:	bf00      	nop
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b958:	bf00      	nop
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b96c:	bf00      	nop
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d101      	bne.n	800b98a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b986:	2301      	movs	r3, #1
 800b988:	e042      	b.n	800ba10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b990:	2b00      	cmp	r3, #0
 800b992:	d106      	bne.n	800b9a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f7f8 fa4f 	bl	8003e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2224      	movs	r2, #36	; 0x24
 800b9a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f022 0201 	bic.w	r2, r2, #1
 800b9b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fc84 	bl	800c2c8 <UART_SetConfig>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d101      	bne.n	800b9ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e022      	b.n	800ba10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d002      	beq.n	800b9d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f001 f9d8 	bl	800cd88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	685a      	ldr	r2, [r3, #4]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	689a      	ldr	r2, [r3, #8]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b9f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f042 0201 	orr.w	r2, r2, #1
 800ba06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f001 fa5f 	bl	800cecc <UART_CheckIdleState>
 800ba0e:	4603      	mov	r3, r0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b08a      	sub	sp, #40	; 0x28
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	4613      	mov	r3, r2
 800ba24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba2c:	2b20      	cmp	r3, #32
 800ba2e:	d17a      	bne.n	800bb26 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d002      	beq.n	800ba3c <HAL_UART_Transmit_DMA+0x24>
 800ba36:	88fb      	ldrh	r3, [r7, #6]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d101      	bne.n	800ba40 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e073      	b.n	800bb28 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d101      	bne.n	800ba4e <HAL_UART_Transmit_DMA+0x36>
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	e06c      	b.n	800bb28 <HAL_UART_Transmit_DMA+0x110>
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	88fa      	ldrh	r2, [r7, #6]
 800ba60:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	88fa      	ldrh	r2, [r7, #6]
 800ba68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2221      	movs	r2, #33	; 0x21
 800ba78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d02c      	beq.n	800bade <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba88:	4a29      	ldr	r2, [pc, #164]	; (800bb30 <HAL_UART_Transmit_DMA+0x118>)
 800ba8a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba90:	4a28      	ldr	r2, [pc, #160]	; (800bb34 <HAL_UART_Transmit_DMA+0x11c>)
 800ba92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba98:	4a27      	ldr	r2, [pc, #156]	; (800bb38 <HAL_UART_Transmit_DMA+0x120>)
 800ba9a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800baa0:	2200      	movs	r2, #0
 800baa2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baac:	4619      	mov	r1, r3
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	3328      	adds	r3, #40	; 0x28
 800bab4:	461a      	mov	r2, r3
 800bab6:	88fb      	ldrh	r3, [r7, #6]
 800bab8:	f7f9 fb36 	bl	8005128 <HAL_DMA_Start_IT>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00d      	beq.n	800bade <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2210      	movs	r2, #16
 800bac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2200      	movs	r2, #0
 800bace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2220      	movs	r2, #32
 800bad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	e024      	b.n	800bb28 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	2240      	movs	r2, #64	; 0x40
 800bae4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2200      	movs	r2, #0
 800baea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	3308      	adds	r3, #8
 800baf4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	e853 3f00 	ldrex	r3, [r3]
 800bafc:	613b      	str	r3, [r7, #16]
   return(result);
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb04:	627b      	str	r3, [r7, #36]	; 0x24
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	3308      	adds	r3, #8
 800bb0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb0e:	623a      	str	r2, [r7, #32]
 800bb10:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb12:	69f9      	ldr	r1, [r7, #28]
 800bb14:	6a3a      	ldr	r2, [r7, #32]
 800bb16:	e841 2300 	strex	r3, r2, [r1]
 800bb1a:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1e5      	bne.n	800baee <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800bb22:	2300      	movs	r3, #0
 800bb24:	e000      	b.n	800bb28 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800bb26:	2302      	movs	r3, #2
  }
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3728      	adds	r7, #40	; 0x28
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	0800d395 	.word	0x0800d395
 800bb34:	0800d42b 	.word	0x0800d42b
 800bb38:	0800d5a1 	.word	0x0800d5a1

0800bb3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b0ba      	sub	sp, #232	; 0xe8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	69db      	ldr	r3, [r3, #28]
 800bb4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800bb62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800bb66:	f640 030f 	movw	r3, #2063	; 0x80f
 800bb6a:	4013      	ands	r3, r2
 800bb6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800bb70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d11b      	bne.n	800bbb0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bb78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb7c:	f003 0320 	and.w	r3, r3, #32
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d015      	beq.n	800bbb0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bb84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb88:	f003 0320 	and.w	r3, r3, #32
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d105      	bne.n	800bb9c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bb90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d009      	beq.n	800bbb0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f000 835a 	beq.w	800c25a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	4798      	blx	r3
      }
      return;
 800bbae:	e354      	b.n	800c25a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bbb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f000 811f 	beq.w	800bdf8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bbba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bbbe:	4b8b      	ldr	r3, [pc, #556]	; (800bdec <HAL_UART_IRQHandler+0x2b0>)
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d106      	bne.n	800bbd4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bbc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800bbca:	4b89      	ldr	r3, [pc, #548]	; (800bdf0 <HAL_UART_IRQHandler+0x2b4>)
 800bbcc:	4013      	ands	r3, r2
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 8112 	beq.w	800bdf8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bbd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbd8:	f003 0301 	and.w	r3, r3, #1
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d011      	beq.n	800bc04 <HAL_UART_IRQHandler+0xc8>
 800bbe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00b      	beq.n	800bc04 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbfa:	f043 0201 	orr.w	r2, r3, #1
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc08:	f003 0302 	and.w	r3, r3, #2
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d011      	beq.n	800bc34 <HAL_UART_IRQHandler+0xf8>
 800bc10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc14:	f003 0301 	and.w	r3, r3, #1
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00b      	beq.n	800bc34 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	2202      	movs	r2, #2
 800bc22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc2a:	f043 0204 	orr.w	r2, r3, #4
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc38:	f003 0304 	and.w	r3, r3, #4
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d011      	beq.n	800bc64 <HAL_UART_IRQHandler+0x128>
 800bc40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc44:	f003 0301 	and.w	r3, r3, #1
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d00b      	beq.n	800bc64 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2204      	movs	r2, #4
 800bc52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc5a:	f043 0202 	orr.w	r2, r3, #2
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bc64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc68:	f003 0308 	and.w	r3, r3, #8
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d017      	beq.n	800bca0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc74:	f003 0320 	and.w	r3, r3, #32
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d105      	bne.n	800bc88 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bc7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800bc80:	4b5a      	ldr	r3, [pc, #360]	; (800bdec <HAL_UART_IRQHandler+0x2b0>)
 800bc82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00b      	beq.n	800bca0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2208      	movs	r2, #8
 800bc8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc96:	f043 0208 	orr.w	r2, r3, #8
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d012      	beq.n	800bcd2 <HAL_UART_IRQHandler+0x196>
 800bcac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00c      	beq.n	800bcd2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bcc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcc8:	f043 0220 	orr.w	r2, r3, #32
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f000 82c0 	beq.w	800c25e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bcde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bce2:	f003 0320 	and.w	r3, r3, #32
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d013      	beq.n	800bd12 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bcea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcee:	f003 0320 	and.w	r3, r3, #32
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d105      	bne.n	800bd02 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bcf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bcfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d007      	beq.n	800bd12 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d003      	beq.n	800bd12 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd26:	2b40      	cmp	r3, #64	; 0x40
 800bd28:	d005      	beq.n	800bd36 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bd2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bd2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d04f      	beq.n	800bdd6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f001 fac6 	bl	800d2c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd46:	2b40      	cmp	r3, #64	; 0x40
 800bd48:	d141      	bne.n	800bdce <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	3308      	adds	r3, #8
 800bd50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bd58:	e853 3f00 	ldrex	r3, [r3]
 800bd5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bd60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	3308      	adds	r3, #8
 800bd72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bd76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bd7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bd82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bd86:	e841 2300 	strex	r3, r2, [r1]
 800bd8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bd8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1d9      	bne.n	800bd4a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d013      	beq.n	800bdc6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bda2:	4a14      	ldr	r2, [pc, #80]	; (800bdf4 <HAL_UART_IRQHandler+0x2b8>)
 800bda4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7f9 ff44 	bl	8005c38 <HAL_DMA_Abort_IT>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d017      	beq.n	800bde6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bdba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bdc0:	4610      	mov	r0, r2
 800bdc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdc4:	e00f      	b.n	800bde6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fa74 	bl	800c2b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdcc:	e00b      	b.n	800bde6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 fa70 	bl	800c2b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bdd4:	e007      	b.n	800bde6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 fa6c 	bl	800c2b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bde4:	e23b      	b.n	800c25e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bde6:	bf00      	nop
    return;
 800bde8:	e239      	b.n	800c25e <HAL_UART_IRQHandler+0x722>
 800bdea:	bf00      	nop
 800bdec:	10000001 	.word	0x10000001
 800bdf0:	04000120 	.word	0x04000120
 800bdf4:	0800d621 	.word	0x0800d621

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	f040 81ce 	bne.w	800c19e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800be02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be06:	f003 0310 	and.w	r3, r3, #16
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f000 81c7 	beq.w	800c19e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800be10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be14:	f003 0310 	and.w	r3, r3, #16
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f000 81c0 	beq.w	800c19e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2210      	movs	r2, #16
 800be24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be30:	2b40      	cmp	r3, #64	; 0x40
 800be32:	f040 813b 	bne.w	800c0ac <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a8b      	ldr	r2, [pc, #556]	; (800c06c <HAL_UART_IRQHandler+0x530>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d059      	beq.n	800bef6 <HAL_UART_IRQHandler+0x3ba>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a89      	ldr	r2, [pc, #548]	; (800c070 <HAL_UART_IRQHandler+0x534>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d053      	beq.n	800bef6 <HAL_UART_IRQHandler+0x3ba>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a87      	ldr	r2, [pc, #540]	; (800c074 <HAL_UART_IRQHandler+0x538>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d04d      	beq.n	800bef6 <HAL_UART_IRQHandler+0x3ba>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a85      	ldr	r2, [pc, #532]	; (800c078 <HAL_UART_IRQHandler+0x53c>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d047      	beq.n	800bef6 <HAL_UART_IRQHandler+0x3ba>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a83      	ldr	r2, [pc, #524]	; (800c07c <HAL_UART_IRQHandler+0x540>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d041      	beq.n	800bef6 <HAL_UART_IRQHandler+0x3ba>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	4a81      	ldr	r2, [pc, #516]	; (800c080 <HAL_UART_IRQHandler+0x544>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d03b      	beq.n	800bef6 <HAL_UART_IRQHandler+0x3ba>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a7f      	ldr	r2, [pc, #508]	; (800c084 <HAL_UART_IRQHandler+0x548>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d035      	beq.n	800bef6 <HAL_UART_IRQHandler+0x3ba>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a7d      	ldr	r2, [pc, #500]	; (800c088 <HAL_UART_IRQHandler+0x54c>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d02f      	beq.n	800bef6 <HAL_UART_IRQHandler+0x3ba>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	4a7b      	ldr	r2, [pc, #492]	; (800c08c <HAL_UART_IRQHandler+0x550>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d029      	beq.n	800bef6 <HAL_UART_IRQHandler+0x3ba>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	4a79      	ldr	r2, [pc, #484]	; (800c090 <HAL_UART_IRQHandler+0x554>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d023      	beq.n	800bef6 <HAL_UART_IRQHandler+0x3ba>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4a77      	ldr	r2, [pc, #476]	; (800c094 <HAL_UART_IRQHandler+0x558>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d01d      	beq.n	800bef6 <HAL_UART_IRQHandler+0x3ba>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a75      	ldr	r2, [pc, #468]	; (800c098 <HAL_UART_IRQHandler+0x55c>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d017      	beq.n	800bef6 <HAL_UART_IRQHandler+0x3ba>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a73      	ldr	r2, [pc, #460]	; (800c09c <HAL_UART_IRQHandler+0x560>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d011      	beq.n	800bef6 <HAL_UART_IRQHandler+0x3ba>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4a71      	ldr	r2, [pc, #452]	; (800c0a0 <HAL_UART_IRQHandler+0x564>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d00b      	beq.n	800bef6 <HAL_UART_IRQHandler+0x3ba>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	4a6f      	ldr	r2, [pc, #444]	; (800c0a4 <HAL_UART_IRQHandler+0x568>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d005      	beq.n	800bef6 <HAL_UART_IRQHandler+0x3ba>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a6d      	ldr	r2, [pc, #436]	; (800c0a8 <HAL_UART_IRQHandler+0x56c>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d105      	bne.n	800bf02 <HAL_UART_IRQHandler+0x3c6>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	b29b      	uxth	r3, r3
 800bf00:	e004      	b.n	800bf0c <HAL_UART_IRQHandler+0x3d0>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bf10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f000 81a4 	beq.w	800c262 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf24:	429a      	cmp	r2, r3
 800bf26:	f080 819c 	bcs.w	800c262 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bf30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf38:	69db      	ldr	r3, [r3, #28]
 800bf3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf3e:	f000 8086 	beq.w	800c04e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bf4e:	e853 3f00 	ldrex	r3, [r3]
 800bf52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bf56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bf5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	461a      	mov	r2, r3
 800bf68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bf6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf70:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf74:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bf78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bf7c:	e841 2300 	strex	r3, r2, [r1]
 800bf80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bf84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1da      	bne.n	800bf42 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	3308      	adds	r3, #8
 800bf92:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf96:	e853 3f00 	ldrex	r3, [r3]
 800bf9a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bf9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf9e:	f023 0301 	bic.w	r3, r3, #1
 800bfa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	3308      	adds	r3, #8
 800bfac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bfb0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bfb4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bfb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bfbc:	e841 2300 	strex	r3, r2, [r1]
 800bfc0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bfc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d1e1      	bne.n	800bf8c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	3308      	adds	r3, #8
 800bfce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfd2:	e853 3f00 	ldrex	r3, [r3]
 800bfd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bfd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bfde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	3308      	adds	r3, #8
 800bfe8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bfec:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bfee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bff2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bff4:	e841 2300 	strex	r3, r2, [r1]
 800bff8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d1e3      	bne.n	800bfc8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2220      	movs	r2, #32
 800c004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c016:	e853 3f00 	ldrex	r3, [r3]
 800c01a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c01c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c01e:	f023 0310 	bic.w	r3, r3, #16
 800c022:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	461a      	mov	r2, r3
 800c02c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c030:	65bb      	str	r3, [r7, #88]	; 0x58
 800c032:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c034:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c036:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c038:	e841 2300 	strex	r3, r2, [r1]
 800c03c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c03e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c040:	2b00      	cmp	r3, #0
 800c042:	d1e4      	bne.n	800c00e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c048:	4618      	mov	r0, r3
 800c04a:	f7f9 fad7 	bl	80055fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	1ad3      	subs	r3, r2, r3
 800c05e:	b29b      	uxth	r3, r3
 800c060:	4619      	mov	r1, r3
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f7f5 f846 	bl	80010f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c068:	e0fb      	b.n	800c262 <HAL_UART_IRQHandler+0x726>
 800c06a:	bf00      	nop
 800c06c:	40020010 	.word	0x40020010
 800c070:	40020028 	.word	0x40020028
 800c074:	40020040 	.word	0x40020040
 800c078:	40020058 	.word	0x40020058
 800c07c:	40020070 	.word	0x40020070
 800c080:	40020088 	.word	0x40020088
 800c084:	400200a0 	.word	0x400200a0
 800c088:	400200b8 	.word	0x400200b8
 800c08c:	40020410 	.word	0x40020410
 800c090:	40020428 	.word	0x40020428
 800c094:	40020440 	.word	0x40020440
 800c098:	40020458 	.word	0x40020458
 800c09c:	40020470 	.word	0x40020470
 800c0a0:	40020488 	.word	0x40020488
 800c0a4:	400204a0 	.word	0x400204a0
 800c0a8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	1ad3      	subs	r3, r2, r3
 800c0bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f000 80cc 	beq.w	800c266 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c0ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	f000 80c7 	beq.w	800c266 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e0:	e853 3f00 	ldrex	r3, [r3]
 800c0e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c0e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c0ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	461a      	mov	r2, r3
 800c0f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c0fa:	647b      	str	r3, [r7, #68]	; 0x44
 800c0fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c100:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c102:	e841 2300 	strex	r3, r2, [r1]
 800c106:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1e4      	bne.n	800c0d8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	3308      	adds	r3, #8
 800c114:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c118:	e853 3f00 	ldrex	r3, [r3]
 800c11c:	623b      	str	r3, [r7, #32]
   return(result);
 800c11e:	6a3a      	ldr	r2, [r7, #32]
 800c120:	4b54      	ldr	r3, [pc, #336]	; (800c274 <HAL_UART_IRQHandler+0x738>)
 800c122:	4013      	ands	r3, r2
 800c124:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	3308      	adds	r3, #8
 800c12e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c132:	633a      	str	r2, [r7, #48]	; 0x30
 800c134:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c13a:	e841 2300 	strex	r3, r2, [r1]
 800c13e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1e3      	bne.n	800c10e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2220      	movs	r2, #32
 800c14a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2200      	movs	r2, #0
 800c152:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	e853 3f00 	ldrex	r3, [r3]
 800c166:	60fb      	str	r3, [r7, #12]
   return(result);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f023 0310 	bic.w	r3, r3, #16
 800c16e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	461a      	mov	r2, r3
 800c178:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c17c:	61fb      	str	r3, [r7, #28]
 800c17e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c180:	69b9      	ldr	r1, [r7, #24]
 800c182:	69fa      	ldr	r2, [r7, #28]
 800c184:	e841 2300 	strex	r3, r2, [r1]
 800c188:	617b      	str	r3, [r7, #20]
   return(result);
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d1e4      	bne.n	800c15a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c190:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c194:	4619      	mov	r1, r3
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7f4 ffac 	bl	80010f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c19c:	e063      	b.n	800c266 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c19e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00e      	beq.n	800c1c8 <HAL_UART_IRQHandler+0x68c>
 800c1aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d008      	beq.n	800c1c8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c1be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f001 fa6e 	bl	800d6a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c1c6:	e051      	b.n	800c26c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c1c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d014      	beq.n	800c1fe <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c1d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d105      	bne.n	800c1ec <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c1e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d008      	beq.n	800c1fe <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d03a      	beq.n	800c26a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	4798      	blx	r3
    }
    return;
 800c1fc:	e035      	b.n	800c26a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c1fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c206:	2b00      	cmp	r3, #0
 800c208:	d009      	beq.n	800c21e <HAL_UART_IRQHandler+0x6e2>
 800c20a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c20e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c212:	2b00      	cmp	r3, #0
 800c214:	d003      	beq.n	800c21e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f001 fa18 	bl	800d64c <UART_EndTransmit_IT>
    return;
 800c21c:	e026      	b.n	800c26c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c21e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c222:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c226:	2b00      	cmp	r3, #0
 800c228:	d009      	beq.n	800c23e <HAL_UART_IRQHandler+0x702>
 800c22a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c22e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c232:	2b00      	cmp	r3, #0
 800c234:	d003      	beq.n	800c23e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f001 fa47 	bl	800d6ca <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c23c:	e016      	b.n	800c26c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c23e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c246:	2b00      	cmp	r3, #0
 800c248:	d010      	beq.n	800c26c <HAL_UART_IRQHandler+0x730>
 800c24a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c24e:	2b00      	cmp	r3, #0
 800c250:	da0c      	bge.n	800c26c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f001 fa2f 	bl	800d6b6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c258:	e008      	b.n	800c26c <HAL_UART_IRQHandler+0x730>
      return;
 800c25a:	bf00      	nop
 800c25c:	e006      	b.n	800c26c <HAL_UART_IRQHandler+0x730>
    return;
 800c25e:	bf00      	nop
 800c260:	e004      	b.n	800c26c <HAL_UART_IRQHandler+0x730>
      return;
 800c262:	bf00      	nop
 800c264:	e002      	b.n	800c26c <HAL_UART_IRQHandler+0x730>
      return;
 800c266:	bf00      	nop
 800c268:	e000      	b.n	800c26c <HAL_UART_IRQHandler+0x730>
    return;
 800c26a:	bf00      	nop
  }
}
 800c26c:	37e8      	adds	r7, #232	; 0xe8
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	effffffe 	.word	0xeffffffe

0800c278 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c280:	bf00      	nop
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c294:	bf00      	nop
 800c296:	370c      	adds	r7, #12
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b083      	sub	sp, #12
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c2a8:	bf00      	nop
 800c2aa:	370c      	adds	r7, #12
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b2:	4770      	bx	lr

0800c2b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c2bc:	bf00      	nop
 800c2be:	370c      	adds	r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c2c8:	b5b0      	push	{r4, r5, r7, lr}
 800c2ca:	b08e      	sub	sp, #56	; 0x38
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	689a      	ldr	r2, [r3, #8]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	691b      	ldr	r3, [r3, #16]
 800c2de:	431a      	orrs	r2, r3
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	695b      	ldr	r3, [r3, #20]
 800c2e4:	431a      	orrs	r2, r3
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	69db      	ldr	r3, [r3, #28]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	4bbf      	ldr	r3, [pc, #764]	; (800c5f4 <UART_SetConfig+0x32c>)
 800c2f6:	4013      	ands	r3, r2
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	6812      	ldr	r2, [r2, #0]
 800c2fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c2fe:	430b      	orrs	r3, r1
 800c300:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	68da      	ldr	r2, [r3, #12]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	430a      	orrs	r2, r1
 800c316:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	699b      	ldr	r3, [r3, #24]
 800c31c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4ab5      	ldr	r2, [pc, #724]	; (800c5f8 <UART_SetConfig+0x330>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d004      	beq.n	800c332 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6a1b      	ldr	r3, [r3, #32]
 800c32c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c32e:	4313      	orrs	r3, r2
 800c330:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	689a      	ldr	r2, [r3, #8]
 800c338:	4bb0      	ldr	r3, [pc, #704]	; (800c5fc <UART_SetConfig+0x334>)
 800c33a:	4013      	ands	r3, r2
 800c33c:	687a      	ldr	r2, [r7, #4]
 800c33e:	6812      	ldr	r2, [r2, #0]
 800c340:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c342:	430b      	orrs	r3, r1
 800c344:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c34c:	f023 010f 	bic.w	r1, r3, #15
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	430a      	orrs	r2, r1
 800c35a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4aa7      	ldr	r2, [pc, #668]	; (800c600 <UART_SetConfig+0x338>)
 800c362:	4293      	cmp	r3, r2
 800c364:	d176      	bne.n	800c454 <UART_SetConfig+0x18c>
 800c366:	4ba7      	ldr	r3, [pc, #668]	; (800c604 <UART_SetConfig+0x33c>)
 800c368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c36a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c36e:	2b28      	cmp	r3, #40	; 0x28
 800c370:	d86c      	bhi.n	800c44c <UART_SetConfig+0x184>
 800c372:	a201      	add	r2, pc, #4	; (adr r2, 800c378 <UART_SetConfig+0xb0>)
 800c374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c378:	0800c41d 	.word	0x0800c41d
 800c37c:	0800c44d 	.word	0x0800c44d
 800c380:	0800c44d 	.word	0x0800c44d
 800c384:	0800c44d 	.word	0x0800c44d
 800c388:	0800c44d 	.word	0x0800c44d
 800c38c:	0800c44d 	.word	0x0800c44d
 800c390:	0800c44d 	.word	0x0800c44d
 800c394:	0800c44d 	.word	0x0800c44d
 800c398:	0800c425 	.word	0x0800c425
 800c39c:	0800c44d 	.word	0x0800c44d
 800c3a0:	0800c44d 	.word	0x0800c44d
 800c3a4:	0800c44d 	.word	0x0800c44d
 800c3a8:	0800c44d 	.word	0x0800c44d
 800c3ac:	0800c44d 	.word	0x0800c44d
 800c3b0:	0800c44d 	.word	0x0800c44d
 800c3b4:	0800c44d 	.word	0x0800c44d
 800c3b8:	0800c42d 	.word	0x0800c42d
 800c3bc:	0800c44d 	.word	0x0800c44d
 800c3c0:	0800c44d 	.word	0x0800c44d
 800c3c4:	0800c44d 	.word	0x0800c44d
 800c3c8:	0800c44d 	.word	0x0800c44d
 800c3cc:	0800c44d 	.word	0x0800c44d
 800c3d0:	0800c44d 	.word	0x0800c44d
 800c3d4:	0800c44d 	.word	0x0800c44d
 800c3d8:	0800c435 	.word	0x0800c435
 800c3dc:	0800c44d 	.word	0x0800c44d
 800c3e0:	0800c44d 	.word	0x0800c44d
 800c3e4:	0800c44d 	.word	0x0800c44d
 800c3e8:	0800c44d 	.word	0x0800c44d
 800c3ec:	0800c44d 	.word	0x0800c44d
 800c3f0:	0800c44d 	.word	0x0800c44d
 800c3f4:	0800c44d 	.word	0x0800c44d
 800c3f8:	0800c43d 	.word	0x0800c43d
 800c3fc:	0800c44d 	.word	0x0800c44d
 800c400:	0800c44d 	.word	0x0800c44d
 800c404:	0800c44d 	.word	0x0800c44d
 800c408:	0800c44d 	.word	0x0800c44d
 800c40c:	0800c44d 	.word	0x0800c44d
 800c410:	0800c44d 	.word	0x0800c44d
 800c414:	0800c44d 	.word	0x0800c44d
 800c418:	0800c445 	.word	0x0800c445
 800c41c:	2301      	movs	r3, #1
 800c41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c422:	e222      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c424:	2304      	movs	r3, #4
 800c426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c42a:	e21e      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c42c:	2308      	movs	r3, #8
 800c42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c432:	e21a      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c434:	2310      	movs	r3, #16
 800c436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c43a:	e216      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c43c:	2320      	movs	r3, #32
 800c43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c442:	e212      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c444:	2340      	movs	r3, #64	; 0x40
 800c446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c44a:	e20e      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c44c:	2380      	movs	r3, #128	; 0x80
 800c44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c452:	e20a      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a6b      	ldr	r2, [pc, #428]	; (800c608 <UART_SetConfig+0x340>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d130      	bne.n	800c4c0 <UART_SetConfig+0x1f8>
 800c45e:	4b69      	ldr	r3, [pc, #420]	; (800c604 <UART_SetConfig+0x33c>)
 800c460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c462:	f003 0307 	and.w	r3, r3, #7
 800c466:	2b05      	cmp	r3, #5
 800c468:	d826      	bhi.n	800c4b8 <UART_SetConfig+0x1f0>
 800c46a:	a201      	add	r2, pc, #4	; (adr r2, 800c470 <UART_SetConfig+0x1a8>)
 800c46c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c470:	0800c489 	.word	0x0800c489
 800c474:	0800c491 	.word	0x0800c491
 800c478:	0800c499 	.word	0x0800c499
 800c47c:	0800c4a1 	.word	0x0800c4a1
 800c480:	0800c4a9 	.word	0x0800c4a9
 800c484:	0800c4b1 	.word	0x0800c4b1
 800c488:	2300      	movs	r3, #0
 800c48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c48e:	e1ec      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c490:	2304      	movs	r3, #4
 800c492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c496:	e1e8      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c498:	2308      	movs	r3, #8
 800c49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c49e:	e1e4      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c4a0:	2310      	movs	r3, #16
 800c4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4a6:	e1e0      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c4a8:	2320      	movs	r3, #32
 800c4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ae:	e1dc      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c4b0:	2340      	movs	r3, #64	; 0x40
 800c4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4b6:	e1d8      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c4b8:	2380      	movs	r3, #128	; 0x80
 800c4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4be:	e1d4      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	4a51      	ldr	r2, [pc, #324]	; (800c60c <UART_SetConfig+0x344>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d130      	bne.n	800c52c <UART_SetConfig+0x264>
 800c4ca:	4b4e      	ldr	r3, [pc, #312]	; (800c604 <UART_SetConfig+0x33c>)
 800c4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ce:	f003 0307 	and.w	r3, r3, #7
 800c4d2:	2b05      	cmp	r3, #5
 800c4d4:	d826      	bhi.n	800c524 <UART_SetConfig+0x25c>
 800c4d6:	a201      	add	r2, pc, #4	; (adr r2, 800c4dc <UART_SetConfig+0x214>)
 800c4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4dc:	0800c4f5 	.word	0x0800c4f5
 800c4e0:	0800c4fd 	.word	0x0800c4fd
 800c4e4:	0800c505 	.word	0x0800c505
 800c4e8:	0800c50d 	.word	0x0800c50d
 800c4ec:	0800c515 	.word	0x0800c515
 800c4f0:	0800c51d 	.word	0x0800c51d
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4fa:	e1b6      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c4fc:	2304      	movs	r3, #4
 800c4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c502:	e1b2      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c504:	2308      	movs	r3, #8
 800c506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c50a:	e1ae      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c50c:	2310      	movs	r3, #16
 800c50e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c512:	e1aa      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c514:	2320      	movs	r3, #32
 800c516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c51a:	e1a6      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c51c:	2340      	movs	r3, #64	; 0x40
 800c51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c522:	e1a2      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c524:	2380      	movs	r3, #128	; 0x80
 800c526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c52a:	e19e      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a37      	ldr	r2, [pc, #220]	; (800c610 <UART_SetConfig+0x348>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d130      	bne.n	800c598 <UART_SetConfig+0x2d0>
 800c536:	4b33      	ldr	r3, [pc, #204]	; (800c604 <UART_SetConfig+0x33c>)
 800c538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c53a:	f003 0307 	and.w	r3, r3, #7
 800c53e:	2b05      	cmp	r3, #5
 800c540:	d826      	bhi.n	800c590 <UART_SetConfig+0x2c8>
 800c542:	a201      	add	r2, pc, #4	; (adr r2, 800c548 <UART_SetConfig+0x280>)
 800c544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c548:	0800c561 	.word	0x0800c561
 800c54c:	0800c569 	.word	0x0800c569
 800c550:	0800c571 	.word	0x0800c571
 800c554:	0800c579 	.word	0x0800c579
 800c558:	0800c581 	.word	0x0800c581
 800c55c:	0800c589 	.word	0x0800c589
 800c560:	2300      	movs	r3, #0
 800c562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c566:	e180      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c568:	2304      	movs	r3, #4
 800c56a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c56e:	e17c      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c570:	2308      	movs	r3, #8
 800c572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c576:	e178      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c578:	2310      	movs	r3, #16
 800c57a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c57e:	e174      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c580:	2320      	movs	r3, #32
 800c582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c586:	e170      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c588:	2340      	movs	r3, #64	; 0x40
 800c58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c58e:	e16c      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c590:	2380      	movs	r3, #128	; 0x80
 800c592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c596:	e168      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a1d      	ldr	r2, [pc, #116]	; (800c614 <UART_SetConfig+0x34c>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d142      	bne.n	800c628 <UART_SetConfig+0x360>
 800c5a2:	4b18      	ldr	r3, [pc, #96]	; (800c604 <UART_SetConfig+0x33c>)
 800c5a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5a6:	f003 0307 	and.w	r3, r3, #7
 800c5aa:	2b05      	cmp	r3, #5
 800c5ac:	d838      	bhi.n	800c620 <UART_SetConfig+0x358>
 800c5ae:	a201      	add	r2, pc, #4	; (adr r2, 800c5b4 <UART_SetConfig+0x2ec>)
 800c5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5b4:	0800c5cd 	.word	0x0800c5cd
 800c5b8:	0800c5d5 	.word	0x0800c5d5
 800c5bc:	0800c5dd 	.word	0x0800c5dd
 800c5c0:	0800c5e5 	.word	0x0800c5e5
 800c5c4:	0800c5ed 	.word	0x0800c5ed
 800c5c8:	0800c619 	.word	0x0800c619
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5d2:	e14a      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c5d4:	2304      	movs	r3, #4
 800c5d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5da:	e146      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c5dc:	2308      	movs	r3, #8
 800c5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5e2:	e142      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c5e4:	2310      	movs	r3, #16
 800c5e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5ea:	e13e      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c5ec:	2320      	movs	r3, #32
 800c5ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5f2:	e13a      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c5f4:	cfff69f3 	.word	0xcfff69f3
 800c5f8:	58000c00 	.word	0x58000c00
 800c5fc:	11fff4ff 	.word	0x11fff4ff
 800c600:	40011000 	.word	0x40011000
 800c604:	58024400 	.word	0x58024400
 800c608:	40004400 	.word	0x40004400
 800c60c:	40004800 	.word	0x40004800
 800c610:	40004c00 	.word	0x40004c00
 800c614:	40005000 	.word	0x40005000
 800c618:	2340      	movs	r3, #64	; 0x40
 800c61a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c61e:	e124      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c620:	2380      	movs	r3, #128	; 0x80
 800c622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c626:	e120      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4acc      	ldr	r2, [pc, #816]	; (800c960 <UART_SetConfig+0x698>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d176      	bne.n	800c720 <UART_SetConfig+0x458>
 800c632:	4bcc      	ldr	r3, [pc, #816]	; (800c964 <UART_SetConfig+0x69c>)
 800c634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c636:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c63a:	2b28      	cmp	r3, #40	; 0x28
 800c63c:	d86c      	bhi.n	800c718 <UART_SetConfig+0x450>
 800c63e:	a201      	add	r2, pc, #4	; (adr r2, 800c644 <UART_SetConfig+0x37c>)
 800c640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c644:	0800c6e9 	.word	0x0800c6e9
 800c648:	0800c719 	.word	0x0800c719
 800c64c:	0800c719 	.word	0x0800c719
 800c650:	0800c719 	.word	0x0800c719
 800c654:	0800c719 	.word	0x0800c719
 800c658:	0800c719 	.word	0x0800c719
 800c65c:	0800c719 	.word	0x0800c719
 800c660:	0800c719 	.word	0x0800c719
 800c664:	0800c6f1 	.word	0x0800c6f1
 800c668:	0800c719 	.word	0x0800c719
 800c66c:	0800c719 	.word	0x0800c719
 800c670:	0800c719 	.word	0x0800c719
 800c674:	0800c719 	.word	0x0800c719
 800c678:	0800c719 	.word	0x0800c719
 800c67c:	0800c719 	.word	0x0800c719
 800c680:	0800c719 	.word	0x0800c719
 800c684:	0800c6f9 	.word	0x0800c6f9
 800c688:	0800c719 	.word	0x0800c719
 800c68c:	0800c719 	.word	0x0800c719
 800c690:	0800c719 	.word	0x0800c719
 800c694:	0800c719 	.word	0x0800c719
 800c698:	0800c719 	.word	0x0800c719
 800c69c:	0800c719 	.word	0x0800c719
 800c6a0:	0800c719 	.word	0x0800c719
 800c6a4:	0800c701 	.word	0x0800c701
 800c6a8:	0800c719 	.word	0x0800c719
 800c6ac:	0800c719 	.word	0x0800c719
 800c6b0:	0800c719 	.word	0x0800c719
 800c6b4:	0800c719 	.word	0x0800c719
 800c6b8:	0800c719 	.word	0x0800c719
 800c6bc:	0800c719 	.word	0x0800c719
 800c6c0:	0800c719 	.word	0x0800c719
 800c6c4:	0800c709 	.word	0x0800c709
 800c6c8:	0800c719 	.word	0x0800c719
 800c6cc:	0800c719 	.word	0x0800c719
 800c6d0:	0800c719 	.word	0x0800c719
 800c6d4:	0800c719 	.word	0x0800c719
 800c6d8:	0800c719 	.word	0x0800c719
 800c6dc:	0800c719 	.word	0x0800c719
 800c6e0:	0800c719 	.word	0x0800c719
 800c6e4:	0800c711 	.word	0x0800c711
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ee:	e0bc      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c6f0:	2304      	movs	r3, #4
 800c6f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6f6:	e0b8      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c6f8:	2308      	movs	r3, #8
 800c6fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6fe:	e0b4      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c700:	2310      	movs	r3, #16
 800c702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c706:	e0b0      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c708:	2320      	movs	r3, #32
 800c70a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c70e:	e0ac      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c710:	2340      	movs	r3, #64	; 0x40
 800c712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c716:	e0a8      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c718:	2380      	movs	r3, #128	; 0x80
 800c71a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c71e:	e0a4      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a90      	ldr	r2, [pc, #576]	; (800c968 <UART_SetConfig+0x6a0>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d130      	bne.n	800c78c <UART_SetConfig+0x4c4>
 800c72a:	4b8e      	ldr	r3, [pc, #568]	; (800c964 <UART_SetConfig+0x69c>)
 800c72c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c72e:	f003 0307 	and.w	r3, r3, #7
 800c732:	2b05      	cmp	r3, #5
 800c734:	d826      	bhi.n	800c784 <UART_SetConfig+0x4bc>
 800c736:	a201      	add	r2, pc, #4	; (adr r2, 800c73c <UART_SetConfig+0x474>)
 800c738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c73c:	0800c755 	.word	0x0800c755
 800c740:	0800c75d 	.word	0x0800c75d
 800c744:	0800c765 	.word	0x0800c765
 800c748:	0800c76d 	.word	0x0800c76d
 800c74c:	0800c775 	.word	0x0800c775
 800c750:	0800c77d 	.word	0x0800c77d
 800c754:	2300      	movs	r3, #0
 800c756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c75a:	e086      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c75c:	2304      	movs	r3, #4
 800c75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c762:	e082      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c764:	2308      	movs	r3, #8
 800c766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c76a:	e07e      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c76c:	2310      	movs	r3, #16
 800c76e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c772:	e07a      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c774:	2320      	movs	r3, #32
 800c776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c77a:	e076      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c77c:	2340      	movs	r3, #64	; 0x40
 800c77e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c782:	e072      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c784:	2380      	movs	r3, #128	; 0x80
 800c786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c78a:	e06e      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a76      	ldr	r2, [pc, #472]	; (800c96c <UART_SetConfig+0x6a4>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d130      	bne.n	800c7f8 <UART_SetConfig+0x530>
 800c796:	4b73      	ldr	r3, [pc, #460]	; (800c964 <UART_SetConfig+0x69c>)
 800c798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c79a:	f003 0307 	and.w	r3, r3, #7
 800c79e:	2b05      	cmp	r3, #5
 800c7a0:	d826      	bhi.n	800c7f0 <UART_SetConfig+0x528>
 800c7a2:	a201      	add	r2, pc, #4	; (adr r2, 800c7a8 <UART_SetConfig+0x4e0>)
 800c7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a8:	0800c7c1 	.word	0x0800c7c1
 800c7ac:	0800c7c9 	.word	0x0800c7c9
 800c7b0:	0800c7d1 	.word	0x0800c7d1
 800c7b4:	0800c7d9 	.word	0x0800c7d9
 800c7b8:	0800c7e1 	.word	0x0800c7e1
 800c7bc:	0800c7e9 	.word	0x0800c7e9
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7c6:	e050      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c7c8:	2304      	movs	r3, #4
 800c7ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ce:	e04c      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c7d0:	2308      	movs	r3, #8
 800c7d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7d6:	e048      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c7d8:	2310      	movs	r3, #16
 800c7da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7de:	e044      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c7e0:	2320      	movs	r3, #32
 800c7e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7e6:	e040      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c7e8:	2340      	movs	r3, #64	; 0x40
 800c7ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ee:	e03c      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c7f0:	2380      	movs	r3, #128	; 0x80
 800c7f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7f6:	e038      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a5c      	ldr	r2, [pc, #368]	; (800c970 <UART_SetConfig+0x6a8>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d130      	bne.n	800c864 <UART_SetConfig+0x59c>
 800c802:	4b58      	ldr	r3, [pc, #352]	; (800c964 <UART_SetConfig+0x69c>)
 800c804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c806:	f003 0307 	and.w	r3, r3, #7
 800c80a:	2b05      	cmp	r3, #5
 800c80c:	d826      	bhi.n	800c85c <UART_SetConfig+0x594>
 800c80e:	a201      	add	r2, pc, #4	; (adr r2, 800c814 <UART_SetConfig+0x54c>)
 800c810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c814:	0800c82d 	.word	0x0800c82d
 800c818:	0800c835 	.word	0x0800c835
 800c81c:	0800c83d 	.word	0x0800c83d
 800c820:	0800c845 	.word	0x0800c845
 800c824:	0800c84d 	.word	0x0800c84d
 800c828:	0800c855 	.word	0x0800c855
 800c82c:	2302      	movs	r3, #2
 800c82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c832:	e01a      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c834:	2304      	movs	r3, #4
 800c836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c83a:	e016      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c83c:	2308      	movs	r3, #8
 800c83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c842:	e012      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c844:	2310      	movs	r3, #16
 800c846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c84a:	e00e      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c84c:	2320      	movs	r3, #32
 800c84e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c852:	e00a      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c854:	2340      	movs	r3, #64	; 0x40
 800c856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c85a:	e006      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c85c:	2380      	movs	r3, #128	; 0x80
 800c85e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c862:	e002      	b.n	800c86a <UART_SetConfig+0x5a2>
 800c864:	2380      	movs	r3, #128	; 0x80
 800c866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a40      	ldr	r2, [pc, #256]	; (800c970 <UART_SetConfig+0x6a8>)
 800c870:	4293      	cmp	r3, r2
 800c872:	f040 80ef 	bne.w	800ca54 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c876:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c87a:	2b20      	cmp	r3, #32
 800c87c:	dc46      	bgt.n	800c90c <UART_SetConfig+0x644>
 800c87e:	2b02      	cmp	r3, #2
 800c880:	f2c0 8081 	blt.w	800c986 <UART_SetConfig+0x6be>
 800c884:	3b02      	subs	r3, #2
 800c886:	2b1e      	cmp	r3, #30
 800c888:	d87d      	bhi.n	800c986 <UART_SetConfig+0x6be>
 800c88a:	a201      	add	r2, pc, #4	; (adr r2, 800c890 <UART_SetConfig+0x5c8>)
 800c88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c890:	0800c913 	.word	0x0800c913
 800c894:	0800c987 	.word	0x0800c987
 800c898:	0800c91b 	.word	0x0800c91b
 800c89c:	0800c987 	.word	0x0800c987
 800c8a0:	0800c987 	.word	0x0800c987
 800c8a4:	0800c987 	.word	0x0800c987
 800c8a8:	0800c92b 	.word	0x0800c92b
 800c8ac:	0800c987 	.word	0x0800c987
 800c8b0:	0800c987 	.word	0x0800c987
 800c8b4:	0800c987 	.word	0x0800c987
 800c8b8:	0800c987 	.word	0x0800c987
 800c8bc:	0800c987 	.word	0x0800c987
 800c8c0:	0800c987 	.word	0x0800c987
 800c8c4:	0800c987 	.word	0x0800c987
 800c8c8:	0800c93b 	.word	0x0800c93b
 800c8cc:	0800c987 	.word	0x0800c987
 800c8d0:	0800c987 	.word	0x0800c987
 800c8d4:	0800c987 	.word	0x0800c987
 800c8d8:	0800c987 	.word	0x0800c987
 800c8dc:	0800c987 	.word	0x0800c987
 800c8e0:	0800c987 	.word	0x0800c987
 800c8e4:	0800c987 	.word	0x0800c987
 800c8e8:	0800c987 	.word	0x0800c987
 800c8ec:	0800c987 	.word	0x0800c987
 800c8f0:	0800c987 	.word	0x0800c987
 800c8f4:	0800c987 	.word	0x0800c987
 800c8f8:	0800c987 	.word	0x0800c987
 800c8fc:	0800c987 	.word	0x0800c987
 800c900:	0800c987 	.word	0x0800c987
 800c904:	0800c987 	.word	0x0800c987
 800c908:	0800c979 	.word	0x0800c979
 800c90c:	2b40      	cmp	r3, #64	; 0x40
 800c90e:	d036      	beq.n	800c97e <UART_SetConfig+0x6b6>
 800c910:	e039      	b.n	800c986 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c912:	f7fc fffd 	bl	8009910 <HAL_RCCEx_GetD3PCLK1Freq>
 800c916:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c918:	e03b      	b.n	800c992 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c91a:	f107 0314 	add.w	r3, r7, #20
 800c91e:	4618      	mov	r0, r3
 800c920:	f7fd f80c 	bl	800993c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c928:	e033      	b.n	800c992 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c92a:	f107 0308 	add.w	r3, r7, #8
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fd f958 	bl	8009be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c938:	e02b      	b.n	800c992 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c93a:	4b0a      	ldr	r3, [pc, #40]	; (800c964 <UART_SetConfig+0x69c>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	f003 0320 	and.w	r3, r3, #32
 800c942:	2b00      	cmp	r3, #0
 800c944:	d009      	beq.n	800c95a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c946:	4b07      	ldr	r3, [pc, #28]	; (800c964 <UART_SetConfig+0x69c>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	08db      	lsrs	r3, r3, #3
 800c94c:	f003 0303 	and.w	r3, r3, #3
 800c950:	4a08      	ldr	r2, [pc, #32]	; (800c974 <UART_SetConfig+0x6ac>)
 800c952:	fa22 f303 	lsr.w	r3, r2, r3
 800c956:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c958:	e01b      	b.n	800c992 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800c95a:	4b06      	ldr	r3, [pc, #24]	; (800c974 <UART_SetConfig+0x6ac>)
 800c95c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c95e:	e018      	b.n	800c992 <UART_SetConfig+0x6ca>
 800c960:	40011400 	.word	0x40011400
 800c964:	58024400 	.word	0x58024400
 800c968:	40007800 	.word	0x40007800
 800c96c:	40007c00 	.word	0x40007c00
 800c970:	58000c00 	.word	0x58000c00
 800c974:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c978:	4bc4      	ldr	r3, [pc, #784]	; (800cc8c <UART_SetConfig+0x9c4>)
 800c97a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c97c:	e009      	b.n	800c992 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c97e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c982:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c984:	e005      	b.n	800c992 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800c986:	2300      	movs	r3, #0
 800c988:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c98a:	2301      	movs	r3, #1
 800c98c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c990:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c994:	2b00      	cmp	r3, #0
 800c996:	f000 81da 	beq.w	800cd4e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c99e:	4abc      	ldr	r2, [pc, #752]	; (800cc90 <UART_SetConfig+0x9c8>)
 800c9a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c9ac:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	005b      	lsls	r3, r3, #1
 800c9b6:	4413      	add	r3, r2
 800c9b8:	6a3a      	ldr	r2, [r7, #32]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d305      	bcc.n	800c9ca <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c9c4:	6a3a      	ldr	r2, [r7, #32]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d903      	bls.n	800c9d2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c9d0:	e1bd      	b.n	800cd4e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f04f 0100 	mov.w	r1, #0
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9de:	4aac      	ldr	r2, [pc, #688]	; (800cc90 <UART_SetConfig+0x9c8>)
 800c9e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	f04f 0300 	mov.w	r3, #0
 800c9ea:	f7f3 fcd1 	bl	8000390 <__aeabi_uldivmod>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	4610      	mov	r0, r2
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	f04f 0200 	mov.w	r2, #0
 800c9fa:	f04f 0300 	mov.w	r3, #0
 800c9fe:	020b      	lsls	r3, r1, #8
 800ca00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ca04:	0202      	lsls	r2, r0, #8
 800ca06:	6879      	ldr	r1, [r7, #4]
 800ca08:	6849      	ldr	r1, [r1, #4]
 800ca0a:	0849      	lsrs	r1, r1, #1
 800ca0c:	4608      	mov	r0, r1
 800ca0e:	f04f 0100 	mov.w	r1, #0
 800ca12:	1814      	adds	r4, r2, r0
 800ca14:	eb43 0501 	adc.w	r5, r3, r1
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	f04f 0300 	mov.w	r3, #0
 800ca22:	4620      	mov	r0, r4
 800ca24:	4629      	mov	r1, r5
 800ca26:	f7f3 fcb3 	bl	8000390 <__aeabi_uldivmod>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	4613      	mov	r3, r2
 800ca30:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ca32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca38:	d308      	bcc.n	800ca4c <UART_SetConfig+0x784>
 800ca3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca40:	d204      	bcs.n	800ca4c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca48:	60da      	str	r2, [r3, #12]
 800ca4a:	e180      	b.n	800cd4e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ca52:	e17c      	b.n	800cd4e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	69db      	ldr	r3, [r3, #28]
 800ca58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca5c:	f040 80be 	bne.w	800cbdc <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800ca60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ca64:	2b20      	cmp	r3, #32
 800ca66:	dc49      	bgt.n	800cafc <UART_SetConfig+0x834>
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	db7c      	blt.n	800cb66 <UART_SetConfig+0x89e>
 800ca6c:	2b20      	cmp	r3, #32
 800ca6e:	d87a      	bhi.n	800cb66 <UART_SetConfig+0x89e>
 800ca70:	a201      	add	r2, pc, #4	; (adr r2, 800ca78 <UART_SetConfig+0x7b0>)
 800ca72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca76:	bf00      	nop
 800ca78:	0800cb03 	.word	0x0800cb03
 800ca7c:	0800cb0b 	.word	0x0800cb0b
 800ca80:	0800cb67 	.word	0x0800cb67
 800ca84:	0800cb67 	.word	0x0800cb67
 800ca88:	0800cb13 	.word	0x0800cb13
 800ca8c:	0800cb67 	.word	0x0800cb67
 800ca90:	0800cb67 	.word	0x0800cb67
 800ca94:	0800cb67 	.word	0x0800cb67
 800ca98:	0800cb23 	.word	0x0800cb23
 800ca9c:	0800cb67 	.word	0x0800cb67
 800caa0:	0800cb67 	.word	0x0800cb67
 800caa4:	0800cb67 	.word	0x0800cb67
 800caa8:	0800cb67 	.word	0x0800cb67
 800caac:	0800cb67 	.word	0x0800cb67
 800cab0:	0800cb67 	.word	0x0800cb67
 800cab4:	0800cb67 	.word	0x0800cb67
 800cab8:	0800cb33 	.word	0x0800cb33
 800cabc:	0800cb67 	.word	0x0800cb67
 800cac0:	0800cb67 	.word	0x0800cb67
 800cac4:	0800cb67 	.word	0x0800cb67
 800cac8:	0800cb67 	.word	0x0800cb67
 800cacc:	0800cb67 	.word	0x0800cb67
 800cad0:	0800cb67 	.word	0x0800cb67
 800cad4:	0800cb67 	.word	0x0800cb67
 800cad8:	0800cb67 	.word	0x0800cb67
 800cadc:	0800cb67 	.word	0x0800cb67
 800cae0:	0800cb67 	.word	0x0800cb67
 800cae4:	0800cb67 	.word	0x0800cb67
 800cae8:	0800cb67 	.word	0x0800cb67
 800caec:	0800cb67 	.word	0x0800cb67
 800caf0:	0800cb67 	.word	0x0800cb67
 800caf4:	0800cb67 	.word	0x0800cb67
 800caf8:	0800cb59 	.word	0x0800cb59
 800cafc:	2b40      	cmp	r3, #64	; 0x40
 800cafe:	d02e      	beq.n	800cb5e <UART_SetConfig+0x896>
 800cb00:	e031      	b.n	800cb66 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb02:	f7fb ff99 	bl	8008a38 <HAL_RCC_GetPCLK1Freq>
 800cb06:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cb08:	e033      	b.n	800cb72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb0a:	f7fb ffab 	bl	8008a64 <HAL_RCC_GetPCLK2Freq>
 800cb0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cb10:	e02f      	b.n	800cb72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb12:	f107 0314 	add.w	r3, r7, #20
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7fc ff10 	bl	800993c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb1c:	69bb      	ldr	r3, [r7, #24]
 800cb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb20:	e027      	b.n	800cb72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb22:	f107 0308 	add.w	r3, r7, #8
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7fd f85c 	bl	8009be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb30:	e01f      	b.n	800cb72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb32:	4b58      	ldr	r3, [pc, #352]	; (800cc94 <UART_SetConfig+0x9cc>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f003 0320 	and.w	r3, r3, #32
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d009      	beq.n	800cb52 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb3e:	4b55      	ldr	r3, [pc, #340]	; (800cc94 <UART_SetConfig+0x9cc>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	08db      	lsrs	r3, r3, #3
 800cb44:	f003 0303 	and.w	r3, r3, #3
 800cb48:	4a53      	ldr	r2, [pc, #332]	; (800cc98 <UART_SetConfig+0x9d0>)
 800cb4a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cb50:	e00f      	b.n	800cb72 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800cb52:	4b51      	ldr	r3, [pc, #324]	; (800cc98 <UART_SetConfig+0x9d0>)
 800cb54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb56:	e00c      	b.n	800cb72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cb58:	4b4c      	ldr	r3, [pc, #304]	; (800cc8c <UART_SetConfig+0x9c4>)
 800cb5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb5c:	e009      	b.n	800cb72 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cb64:	e005      	b.n	800cb72 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800cb66:	2300      	movs	r3, #0
 800cb68:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cb70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	f000 80ea 	beq.w	800cd4e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb7e:	4a44      	ldr	r2, [pc, #272]	; (800cc90 <UART_SetConfig+0x9c8>)
 800cb80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb84:	461a      	mov	r2, r3
 800cb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb88:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb8c:	005a      	lsls	r2, r3, #1
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	085b      	lsrs	r3, r3, #1
 800cb94:	441a      	add	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb9e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba2:	2b0f      	cmp	r3, #15
 800cba4:	d916      	bls.n	800cbd4 <UART_SetConfig+0x90c>
 800cba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbac:	d212      	bcs.n	800cbd4 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	f023 030f 	bic.w	r3, r3, #15
 800cbb6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbba:	085b      	lsrs	r3, r3, #1
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	f003 0307 	and.w	r3, r3, #7
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cbd0:	60da      	str	r2, [r3, #12]
 800cbd2:	e0bc      	b.n	800cd4e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cbda:	e0b8      	b.n	800cd4e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cbdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cbe0:	2b20      	cmp	r3, #32
 800cbe2:	dc4b      	bgt.n	800cc7c <UART_SetConfig+0x9b4>
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f2c0 8087 	blt.w	800ccf8 <UART_SetConfig+0xa30>
 800cbea:	2b20      	cmp	r3, #32
 800cbec:	f200 8084 	bhi.w	800ccf8 <UART_SetConfig+0xa30>
 800cbf0:	a201      	add	r2, pc, #4	; (adr r2, 800cbf8 <UART_SetConfig+0x930>)
 800cbf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbf6:	bf00      	nop
 800cbf8:	0800cc83 	.word	0x0800cc83
 800cbfc:	0800cc9d 	.word	0x0800cc9d
 800cc00:	0800ccf9 	.word	0x0800ccf9
 800cc04:	0800ccf9 	.word	0x0800ccf9
 800cc08:	0800cca5 	.word	0x0800cca5
 800cc0c:	0800ccf9 	.word	0x0800ccf9
 800cc10:	0800ccf9 	.word	0x0800ccf9
 800cc14:	0800ccf9 	.word	0x0800ccf9
 800cc18:	0800ccb5 	.word	0x0800ccb5
 800cc1c:	0800ccf9 	.word	0x0800ccf9
 800cc20:	0800ccf9 	.word	0x0800ccf9
 800cc24:	0800ccf9 	.word	0x0800ccf9
 800cc28:	0800ccf9 	.word	0x0800ccf9
 800cc2c:	0800ccf9 	.word	0x0800ccf9
 800cc30:	0800ccf9 	.word	0x0800ccf9
 800cc34:	0800ccf9 	.word	0x0800ccf9
 800cc38:	0800ccc5 	.word	0x0800ccc5
 800cc3c:	0800ccf9 	.word	0x0800ccf9
 800cc40:	0800ccf9 	.word	0x0800ccf9
 800cc44:	0800ccf9 	.word	0x0800ccf9
 800cc48:	0800ccf9 	.word	0x0800ccf9
 800cc4c:	0800ccf9 	.word	0x0800ccf9
 800cc50:	0800ccf9 	.word	0x0800ccf9
 800cc54:	0800ccf9 	.word	0x0800ccf9
 800cc58:	0800ccf9 	.word	0x0800ccf9
 800cc5c:	0800ccf9 	.word	0x0800ccf9
 800cc60:	0800ccf9 	.word	0x0800ccf9
 800cc64:	0800ccf9 	.word	0x0800ccf9
 800cc68:	0800ccf9 	.word	0x0800ccf9
 800cc6c:	0800ccf9 	.word	0x0800ccf9
 800cc70:	0800ccf9 	.word	0x0800ccf9
 800cc74:	0800ccf9 	.word	0x0800ccf9
 800cc78:	0800cceb 	.word	0x0800cceb
 800cc7c:	2b40      	cmp	r3, #64	; 0x40
 800cc7e:	d037      	beq.n	800ccf0 <UART_SetConfig+0xa28>
 800cc80:	e03a      	b.n	800ccf8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc82:	f7fb fed9 	bl	8008a38 <HAL_RCC_GetPCLK1Freq>
 800cc86:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cc88:	e03c      	b.n	800cd04 <UART_SetConfig+0xa3c>
 800cc8a:	bf00      	nop
 800cc8c:	003d0900 	.word	0x003d0900
 800cc90:	08010a28 	.word	0x08010a28
 800cc94:	58024400 	.word	0x58024400
 800cc98:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc9c:	f7fb fee2 	bl	8008a64 <HAL_RCC_GetPCLK2Freq>
 800cca0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cca2:	e02f      	b.n	800cd04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cca4:	f107 0314 	add.w	r3, r7, #20
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7fc fe47 	bl	800993c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ccb2:	e027      	b.n	800cd04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccb4:	f107 0308 	add.w	r3, r7, #8
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7fc ff93 	bl	8009be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ccc2:	e01f      	b.n	800cd04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccc4:	4b2c      	ldr	r3, [pc, #176]	; (800cd78 <UART_SetConfig+0xab0>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f003 0320 	and.w	r3, r3, #32
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d009      	beq.n	800cce4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ccd0:	4b29      	ldr	r3, [pc, #164]	; (800cd78 <UART_SetConfig+0xab0>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	08db      	lsrs	r3, r3, #3
 800ccd6:	f003 0303 	and.w	r3, r3, #3
 800ccda:	4a28      	ldr	r2, [pc, #160]	; (800cd7c <UART_SetConfig+0xab4>)
 800ccdc:	fa22 f303 	lsr.w	r3, r2, r3
 800cce0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cce2:	e00f      	b.n	800cd04 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800cce4:	4b25      	ldr	r3, [pc, #148]	; (800cd7c <UART_SetConfig+0xab4>)
 800cce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cce8:	e00c      	b.n	800cd04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ccea:	4b25      	ldr	r3, [pc, #148]	; (800cd80 <UART_SetConfig+0xab8>)
 800ccec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ccee:	e009      	b.n	800cd04 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ccf6:	e005      	b.n	800cd04 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cd02:	bf00      	nop
    }

    if (pclk != 0U)
 800cd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d021      	beq.n	800cd4e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd0e:	4a1d      	ldr	r2, [pc, #116]	; (800cd84 <UART_SetConfig+0xabc>)
 800cd10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd14:	461a      	mov	r2, r3
 800cd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd18:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	085b      	lsrs	r3, r3, #1
 800cd22:	441a      	add	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd2c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd30:	2b0f      	cmp	r3, #15
 800cd32:	d909      	bls.n	800cd48 <UART_SetConfig+0xa80>
 800cd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd3a:	d205      	bcs.n	800cd48 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd3e:	b29a      	uxth	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	60da      	str	r2, [r3, #12]
 800cd46:	e002      	b.n	800cd4e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2201      	movs	r2, #1
 800cd52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2201      	movs	r2, #1
 800cd5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2200      	movs	r2, #0
 800cd62:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2200      	movs	r2, #0
 800cd68:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cd6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3738      	adds	r7, #56	; 0x38
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bdb0      	pop	{r4, r5, r7, pc}
 800cd76:	bf00      	nop
 800cd78:	58024400 	.word	0x58024400
 800cd7c:	03d09000 	.word	0x03d09000
 800cd80:	003d0900 	.word	0x003d0900
 800cd84:	08010a28 	.word	0x08010a28

0800cd88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b083      	sub	sp, #12
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd94:	f003 0301 	and.w	r3, r3, #1
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00a      	beq.n	800cdb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	430a      	orrs	r2, r1
 800cdb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb6:	f003 0302 	and.w	r3, r3, #2
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d00a      	beq.n	800cdd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	430a      	orrs	r2, r1
 800cdd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd8:	f003 0304 	and.w	r3, r3, #4
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d00a      	beq.n	800cdf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	430a      	orrs	r2, r1
 800cdf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdfa:	f003 0308 	and.w	r3, r3, #8
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d00a      	beq.n	800ce18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	430a      	orrs	r2, r1
 800ce16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce1c:	f003 0310 	and.w	r3, r3, #16
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d00a      	beq.n	800ce3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	689b      	ldr	r3, [r3, #8]
 800ce2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	430a      	orrs	r2, r1
 800ce38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce3e:	f003 0320 	and.w	r3, r3, #32
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00a      	beq.n	800ce5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	430a      	orrs	r2, r1
 800ce5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d01a      	beq.n	800ce9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	430a      	orrs	r2, r1
 800ce7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce86:	d10a      	bne.n	800ce9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	430a      	orrs	r2, r1
 800ce9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00a      	beq.n	800cec0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	430a      	orrs	r2, r1
 800cebe:	605a      	str	r2, [r3, #4]
  }
}
 800cec0:	bf00      	nop
 800cec2:	370c      	adds	r7, #12
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b086      	sub	sp, #24
 800ced0:	af02      	add	r7, sp, #8
 800ced2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cedc:	f7f7 fa96 	bl	800440c <HAL_GetTick>
 800cee0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f003 0308 	and.w	r3, r3, #8
 800ceec:	2b08      	cmp	r3, #8
 800ceee:	d10e      	bne.n	800cf0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cef0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2200      	movs	r2, #0
 800cefa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 f82f 	bl	800cf62 <UART_WaitOnFlagUntilTimeout>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf0a:	2303      	movs	r3, #3
 800cf0c:	e025      	b.n	800cf5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f003 0304 	and.w	r3, r3, #4
 800cf18:	2b04      	cmp	r3, #4
 800cf1a:	d10e      	bne.n	800cf3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf20:	9300      	str	r3, [sp, #0]
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2200      	movs	r2, #0
 800cf26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f000 f819 	bl	800cf62 <UART_WaitOnFlagUntilTimeout>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d001      	beq.n	800cf3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf36:	2303      	movs	r3, #3
 800cf38:	e00f      	b.n	800cf5a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2220      	movs	r2, #32
 800cf3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2220      	movs	r2, #32
 800cf46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3710      	adds	r7, #16
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b09c      	sub	sp, #112	; 0x70
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	60f8      	str	r0, [r7, #12]
 800cf6a:	60b9      	str	r1, [r7, #8]
 800cf6c:	603b      	str	r3, [r7, #0]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf72:	e0a9      	b.n	800d0c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7a:	f000 80a5 	beq.w	800d0c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf7e:	f7f7 fa45 	bl	800440c <HAL_GetTick>
 800cf82:	4602      	mov	r2, r0
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	1ad3      	subs	r3, r2, r3
 800cf88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d302      	bcc.n	800cf94 <UART_WaitOnFlagUntilTimeout+0x32>
 800cf8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d140      	bne.n	800d016 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf9c:	e853 3f00 	ldrex	r3, [r3]
 800cfa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cfa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfa4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cfa8:	667b      	str	r3, [r7, #100]	; 0x64
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfb4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cfb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cfba:	e841 2300 	strex	r3, r2, [r1]
 800cfbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cfc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d1e6      	bne.n	800cf94 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	3308      	adds	r3, #8
 800cfcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfd0:	e853 3f00 	ldrex	r3, [r3]
 800cfd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd8:	f023 0301 	bic.w	r3, r3, #1
 800cfdc:	663b      	str	r3, [r7, #96]	; 0x60
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	3308      	adds	r3, #8
 800cfe4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cfe6:	64ba      	str	r2, [r7, #72]	; 0x48
 800cfe8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cfec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfee:	e841 2300 	strex	r3, r2, [r1]
 800cff2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d1e5      	bne.n	800cfc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2220      	movs	r2, #32
 800cffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2220      	movs	r2, #32
 800d006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2200      	movs	r2, #0
 800d00e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d012:	2303      	movs	r3, #3
 800d014:	e069      	b.n	800d0ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f003 0304 	and.w	r3, r3, #4
 800d020:	2b00      	cmp	r3, #0
 800d022:	d051      	beq.n	800d0c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	69db      	ldr	r3, [r3, #28]
 800d02a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d02e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d032:	d149      	bne.n	800d0c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d03c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d046:	e853 3f00 	ldrex	r3, [r3]
 800d04a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d052:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	461a      	mov	r2, r3
 800d05a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d05c:	637b      	str	r3, [r7, #52]	; 0x34
 800d05e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d060:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d064:	e841 2300 	strex	r3, r2, [r1]
 800d068:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1e6      	bne.n	800d03e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	3308      	adds	r3, #8
 800d076:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	e853 3f00 	ldrex	r3, [r3]
 800d07e:	613b      	str	r3, [r7, #16]
   return(result);
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	f023 0301 	bic.w	r3, r3, #1
 800d086:	66bb      	str	r3, [r7, #104]	; 0x68
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	3308      	adds	r3, #8
 800d08e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d090:	623a      	str	r2, [r7, #32]
 800d092:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d094:	69f9      	ldr	r1, [r7, #28]
 800d096:	6a3a      	ldr	r2, [r7, #32]
 800d098:	e841 2300 	strex	r3, r2, [r1]
 800d09c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d1e5      	bne.n	800d070 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2220      	movs	r2, #32
 800d0a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2220      	movs	r2, #32
 800d0b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2220      	movs	r2, #32
 800d0b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d0c4:	2303      	movs	r3, #3
 800d0c6:	e010      	b.n	800d0ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	69da      	ldr	r2, [r3, #28]
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	4013      	ands	r3, r2
 800d0d2:	68ba      	ldr	r2, [r7, #8]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	bf0c      	ite	eq
 800d0d8:	2301      	moveq	r3, #1
 800d0da:	2300      	movne	r3, #0
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	461a      	mov	r2, r3
 800d0e0:	79fb      	ldrb	r3, [r7, #7]
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	f43f af46 	beq.w	800cf74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d0e8:	2300      	movs	r3, #0
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3770      	adds	r7, #112	; 0x70
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
	...

0800d0f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b096      	sub	sp, #88	; 0x58
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	4613      	mov	r3, r2
 800d100:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	68ba      	ldr	r2, [r7, #8]
 800d106:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	88fa      	ldrh	r2, [r7, #6]
 800d10c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2200      	movs	r2, #0
 800d114:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2222      	movs	r2, #34	; 0x22
 800d11c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d124:	2b00      	cmp	r3, #0
 800d126:	d02c      	beq.n	800d182 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d12c:	4a42      	ldr	r2, [pc, #264]	; (800d238 <UART_Start_Receive_DMA+0x144>)
 800d12e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d134:	4a41      	ldr	r2, [pc, #260]	; (800d23c <UART_Start_Receive_DMA+0x148>)
 800d136:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d13c:	4a40      	ldr	r2, [pc, #256]	; (800d240 <UART_Start_Receive_DMA+0x14c>)
 800d13e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d144:	2200      	movs	r2, #0
 800d146:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	3324      	adds	r3, #36	; 0x24
 800d152:	4619      	mov	r1, r3
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d158:	461a      	mov	r2, r3
 800d15a:	88fb      	ldrh	r3, [r7, #6]
 800d15c:	f7f7 ffe4 	bl	8005128 <HAL_DMA_Start_IT>
 800d160:	4603      	mov	r3, r0
 800d162:	2b00      	cmp	r3, #0
 800d164:	d00d      	beq.n	800d182 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2210      	movs	r2, #16
 800d16a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2200      	movs	r2, #0
 800d172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2220      	movs	r2, #32
 800d17a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	e055      	b.n	800d22e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2200      	movs	r2, #0
 800d186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d018      	beq.n	800d1c4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d19a:	e853 3f00 	ldrex	r3, [r3]
 800d19e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1a6:	657b      	str	r3, [r7, #84]	; 0x54
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1b2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d1b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1b8:	e841 2300 	strex	r3, r2, [r1]
 800d1bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1e6      	bne.n	800d192 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	3308      	adds	r3, #8
 800d1ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ce:	e853 3f00 	ldrex	r3, [r3]
 800d1d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d6:	f043 0301 	orr.w	r3, r3, #1
 800d1da:	653b      	str	r3, [r7, #80]	; 0x50
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	3308      	adds	r3, #8
 800d1e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1e4:	637a      	str	r2, [r7, #52]	; 0x34
 800d1e6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d1ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1ec:	e841 2300 	strex	r3, r2, [r1]
 800d1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d1e5      	bne.n	800d1c4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	3308      	adds	r3, #8
 800d1fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	e853 3f00 	ldrex	r3, [r3]
 800d206:	613b      	str	r3, [r7, #16]
   return(result);
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d20e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	3308      	adds	r3, #8
 800d216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d218:	623a      	str	r2, [r7, #32]
 800d21a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d21c:	69f9      	ldr	r1, [r7, #28]
 800d21e:	6a3a      	ldr	r2, [r7, #32]
 800d220:	e841 2300 	strex	r3, r2, [r1]
 800d224:	61bb      	str	r3, [r7, #24]
   return(result);
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1e5      	bne.n	800d1f8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d22c:	2300      	movs	r3, #0
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3758      	adds	r7, #88	; 0x58
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	0800d447 	.word	0x0800d447
 800d23c:	0800d569 	.word	0x0800d569
 800d240:	0800d5a1 	.word	0x0800d5a1

0800d244 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d244:	b480      	push	{r7}
 800d246:	b08f      	sub	sp, #60	; 0x3c
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d252:	6a3b      	ldr	r3, [r7, #32]
 800d254:	e853 3f00 	ldrex	r3, [r3]
 800d258:	61fb      	str	r3, [r7, #28]
   return(result);
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d260:	637b      	str	r3, [r7, #52]	; 0x34
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	461a      	mov	r2, r3
 800d268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d26a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d26c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d26e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d272:	e841 2300 	strex	r3, r2, [r1]
 800d276:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d1e6      	bne.n	800d24c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	3308      	adds	r3, #8
 800d284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	e853 3f00 	ldrex	r3, [r3]
 800d28c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d294:	633b      	str	r3, [r7, #48]	; 0x30
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	3308      	adds	r3, #8
 800d29c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d29e:	61ba      	str	r2, [r7, #24]
 800d2a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a2:	6979      	ldr	r1, [r7, #20]
 800d2a4:	69ba      	ldr	r2, [r7, #24]
 800d2a6:	e841 2300 	strex	r3, r2, [r1]
 800d2aa:	613b      	str	r3, [r7, #16]
   return(result);
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d1e5      	bne.n	800d27e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2220      	movs	r2, #32
 800d2b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d2ba:	bf00      	nop
 800d2bc:	373c      	adds	r7, #60	; 0x3c
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c4:	4770      	bx	lr
	...

0800d2c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b095      	sub	sp, #84	; 0x54
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2d8:	e853 3f00 	ldrex	r3, [r3]
 800d2dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d2e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2ee:	643b      	str	r3, [r7, #64]	; 0x40
 800d2f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d2f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d2f6:	e841 2300 	strex	r3, r2, [r1]
 800d2fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d1e6      	bne.n	800d2d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	3308      	adds	r3, #8
 800d308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d30a:	6a3b      	ldr	r3, [r7, #32]
 800d30c:	e853 3f00 	ldrex	r3, [r3]
 800d310:	61fb      	str	r3, [r7, #28]
   return(result);
 800d312:	69fa      	ldr	r2, [r7, #28]
 800d314:	4b1e      	ldr	r3, [pc, #120]	; (800d390 <UART_EndRxTransfer+0xc8>)
 800d316:	4013      	ands	r3, r2
 800d318:	64bb      	str	r3, [r7, #72]	; 0x48
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	3308      	adds	r3, #8
 800d320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d322:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d324:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d326:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d32a:	e841 2300 	strex	r3, r2, [r1]
 800d32e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d332:	2b00      	cmp	r3, #0
 800d334:	d1e5      	bne.n	800d302 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	d118      	bne.n	800d370 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	e853 3f00 	ldrex	r3, [r3]
 800d34a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	f023 0310 	bic.w	r3, r3, #16
 800d352:	647b      	str	r3, [r7, #68]	; 0x44
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	461a      	mov	r2, r3
 800d35a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d35c:	61bb      	str	r3, [r7, #24]
 800d35e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d360:	6979      	ldr	r1, [r7, #20]
 800d362:	69ba      	ldr	r2, [r7, #24]
 800d364:	e841 2300 	strex	r3, r2, [r1]
 800d368:	613b      	str	r3, [r7, #16]
   return(result);
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d1e6      	bne.n	800d33e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2220      	movs	r2, #32
 800d374:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2200      	movs	r2, #0
 800d37c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d384:	bf00      	nop
 800d386:	3754      	adds	r7, #84	; 0x54
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr
 800d390:	effffffe 	.word	0xeffffffe

0800d394 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b090      	sub	sp, #64	; 0x40
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	69db      	ldr	r3, [r3, #28]
 800d3a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3aa:	d037      	beq.n	800d41c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d3b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	3308      	adds	r3, #8
 800d3ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3be:	e853 3f00 	ldrex	r3, [r3]
 800d3c2:	623b      	str	r3, [r7, #32]
   return(result);
 800d3c4:	6a3b      	ldr	r3, [r7, #32]
 800d3c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d3ca:	63bb      	str	r3, [r7, #56]	; 0x38
 800d3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	3308      	adds	r3, #8
 800d3d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3d4:	633a      	str	r2, [r7, #48]	; 0x30
 800d3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3dc:	e841 2300 	strex	r3, r2, [r1]
 800d3e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1e5      	bne.n	800d3b4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	e853 3f00 	ldrex	r3, [r3]
 800d3f4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3fc:	637b      	str	r3, [r7, #52]	; 0x34
 800d3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	461a      	mov	r2, r3
 800d404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d406:	61fb      	str	r3, [r7, #28]
 800d408:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d40a:	69b9      	ldr	r1, [r7, #24]
 800d40c:	69fa      	ldr	r2, [r7, #28]
 800d40e:	e841 2300 	strex	r3, r2, [r1]
 800d412:	617b      	str	r3, [r7, #20]
   return(result);
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d1e6      	bne.n	800d3e8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d41a:	e002      	b.n	800d422 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d41c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d41e:	f7fe ff2b 	bl	800c278 <HAL_UART_TxCpltCallback>
}
 800d422:	bf00      	nop
 800d424:	3740      	adds	r7, #64	; 0x40
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b084      	sub	sp, #16
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d436:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d438:	68f8      	ldr	r0, [r7, #12]
 800d43a:	f7fe ff27 	bl	800c28c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d43e:	bf00      	nop
 800d440:	3710      	adds	r7, #16
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d446:	b580      	push	{r7, lr}
 800d448:	b09c      	sub	sp, #112	; 0x70
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d452:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	69db      	ldr	r3, [r3, #28]
 800d458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d45c:	d071      	beq.n	800d542 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d45e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d460:	2200      	movs	r2, #0
 800d462:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d46c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d46e:	e853 3f00 	ldrex	r3, [r3]
 800d472:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d476:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d47a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d47c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	461a      	mov	r2, r3
 800d482:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d484:	65bb      	str	r3, [r7, #88]	; 0x58
 800d486:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d488:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d48a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d48c:	e841 2300 	strex	r3, r2, [r1]
 800d490:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d494:	2b00      	cmp	r3, #0
 800d496:	d1e6      	bne.n	800d466 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	3308      	adds	r3, #8
 800d49e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a2:	e853 3f00 	ldrex	r3, [r3]
 800d4a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4aa:	f023 0301 	bic.w	r3, r3, #1
 800d4ae:	667b      	str	r3, [r7, #100]	; 0x64
 800d4b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	3308      	adds	r3, #8
 800d4b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d4b8:	647a      	str	r2, [r7, #68]	; 0x44
 800d4ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d4be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4c0:	e841 2300 	strex	r3, r2, [r1]
 800d4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d1e5      	bne.n	800d498 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d4cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	3308      	adds	r3, #8
 800d4d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d6:	e853 3f00 	ldrex	r3, [r3]
 800d4da:	623b      	str	r3, [r7, #32]
   return(result);
 800d4dc:	6a3b      	ldr	r3, [r7, #32]
 800d4de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4e2:	663b      	str	r3, [r7, #96]	; 0x60
 800d4e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	3308      	adds	r3, #8
 800d4ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d4ec:	633a      	str	r2, [r7, #48]	; 0x30
 800d4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4f4:	e841 2300 	strex	r3, r2, [r1]
 800d4f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d1e5      	bne.n	800d4cc <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d502:	2220      	movs	r2, #32
 800d504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d50a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d50c:	2b01      	cmp	r3, #1
 800d50e:	d118      	bne.n	800d542 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	e853 3f00 	ldrex	r3, [r3]
 800d51c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f023 0310 	bic.w	r3, r3, #16
 800d524:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	461a      	mov	r2, r3
 800d52c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d52e:	61fb      	str	r3, [r7, #28]
 800d530:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d532:	69b9      	ldr	r1, [r7, #24]
 800d534:	69fa      	ldr	r2, [r7, #28]
 800d536:	e841 2300 	strex	r3, r2, [r1]
 800d53a:	617b      	str	r3, [r7, #20]
   return(result);
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d1e6      	bne.n	800d510 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d544:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d546:	2b01      	cmp	r3, #1
 800d548:	d107      	bne.n	800d55a <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d54c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d550:	4619      	mov	r1, r3
 800d552:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d554:	f7f3 fdce 	bl	80010f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d558:	e002      	b.n	800d560 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800d55a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d55c:	f7f5 f91e 	bl	800279c <HAL_UART_RxCpltCallback>
}
 800d560:	bf00      	nop
 800d562:	3770      	adds	r7, #112	; 0x70
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b084      	sub	sp, #16
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d574:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d109      	bne.n	800d592 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d584:	085b      	lsrs	r3, r3, #1
 800d586:	b29b      	uxth	r3, r3
 800d588:	4619      	mov	r1, r3
 800d58a:	68f8      	ldr	r0, [r7, #12]
 800d58c:	f7f3 fdb2 	bl	80010f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d590:	e002      	b.n	800d598 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f7fe fe84 	bl	800c2a0 <HAL_UART_RxHalfCpltCallback>
}
 800d598:	bf00      	nop
 800d59a:	3710      	adds	r7, #16
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b086      	sub	sp, #24
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5b4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5bc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	689b      	ldr	r3, [r3, #8]
 800d5c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5c8:	2b80      	cmp	r3, #128	; 0x80
 800d5ca:	d109      	bne.n	800d5e0 <UART_DMAError+0x40>
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	2b21      	cmp	r3, #33	; 0x21
 800d5d0:	d106      	bne.n	800d5e0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800d5da:	6978      	ldr	r0, [r7, #20]
 800d5dc:	f7ff fe32 	bl	800d244 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	689b      	ldr	r3, [r3, #8]
 800d5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ea:	2b40      	cmp	r3, #64	; 0x40
 800d5ec:	d109      	bne.n	800d602 <UART_DMAError+0x62>
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2b22      	cmp	r3, #34	; 0x22
 800d5f2:	d106      	bne.n	800d602 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800d5fc:	6978      	ldr	r0, [r7, #20]
 800d5fe:	f7ff fe63 	bl	800d2c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d608:	f043 0210 	orr.w	r2, r3, #16
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d612:	6978      	ldr	r0, [r7, #20]
 800d614:	f7fe fe4e 	bl	800c2b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d618:	bf00      	nop
 800d61a:	3718      	adds	r7, #24
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d62c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2200      	movs	r2, #0
 800d632:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2200      	movs	r2, #0
 800d63a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	f7fe fe38 	bl	800c2b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d644:	bf00      	nop
 800d646:	3710      	adds	r7, #16
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b088      	sub	sp, #32
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	e853 3f00 	ldrex	r3, [r3]
 800d660:	60bb      	str	r3, [r7, #8]
   return(result);
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d668:	61fb      	str	r3, [r7, #28]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	461a      	mov	r2, r3
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	61bb      	str	r3, [r7, #24]
 800d674:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d676:	6979      	ldr	r1, [r7, #20]
 800d678:	69ba      	ldr	r2, [r7, #24]
 800d67a:	e841 2300 	strex	r3, r2, [r1]
 800d67e:	613b      	str	r3, [r7, #16]
   return(result);
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d1e6      	bne.n	800d654 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	2220      	movs	r2, #32
 800d68a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2200      	movs	r2, #0
 800d692:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7fe fdef 	bl	800c278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d69a:	bf00      	nop
 800d69c:	3720      	adds	r7, #32
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d6a2:	b480      	push	{r7}
 800d6a4:	b083      	sub	sp, #12
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d6aa:	bf00      	nop
 800d6ac:	370c      	adds	r7, #12
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr

0800d6b6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d6b6:	b480      	push	{r7}
 800d6b8:	b083      	sub	sp, #12
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d6be:	bf00      	nop
 800d6c0:	370c      	adds	r7, #12
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr

0800d6ca <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d6ca:	b480      	push	{r7}
 800d6cc:	b083      	sub	sp, #12
 800d6ce:	af00      	add	r7, sp, #0
 800d6d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d6d2:	bf00      	nop
 800d6d4:	370c      	adds	r7, #12
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr

0800d6de <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800d6de:	b580      	push	{r7, lr}
 800d6e0:	b084      	sub	sp, #16
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	d101      	bne.n	800d6f4 <HAL_UARTEx_EnableFifoMode+0x16>
 800d6f0:	2302      	movs	r3, #2
 800d6f2:	e02b      	b.n	800d74c <HAL_UARTEx_EnableFifoMode+0x6e>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2224      	movs	r2, #36	; 0x24
 800d700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f022 0201 	bic.w	r2, r2, #1
 800d71a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d722:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800d72a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	68fa      	ldr	r2, [r7, #12]
 800d732:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f000 f91f 	bl	800d978 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2220      	movs	r2, #32
 800d73e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2200      	movs	r2, #0
 800d746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d74a:	2300      	movs	r3, #0
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3710      	adds	r7, #16
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d762:	2b01      	cmp	r3, #1
 800d764:	d101      	bne.n	800d76a <HAL_UARTEx_DisableFifoMode+0x16>
 800d766:	2302      	movs	r3, #2
 800d768:	e027      	b.n	800d7ba <HAL_UARTEx_DisableFifoMode+0x66>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2201      	movs	r2, #1
 800d76e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2224      	movs	r2, #36	; 0x24
 800d776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	681a      	ldr	r2, [r3, #0]
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f022 0201 	bic.w	r2, r2, #1
 800d790:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d798:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	68fa      	ldr	r2, [r7, #12]
 800d7a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2220      	movs	r2, #32
 800d7ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d7b8:	2300      	movs	r3, #0
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3714      	adds	r7, #20
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr

0800d7c6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7c6:	b580      	push	{r7, lr}
 800d7c8:	b084      	sub	sp, #16
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
 800d7ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d101      	bne.n	800d7de <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d7da:	2302      	movs	r3, #2
 800d7dc:	e02d      	b.n	800d83a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2224      	movs	r2, #36	; 0x24
 800d7ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	681a      	ldr	r2, [r3, #0]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f022 0201 	bic.w	r2, r2, #1
 800d804:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	689b      	ldr	r3, [r3, #8]
 800d80c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	683a      	ldr	r2, [r7, #0]
 800d816:	430a      	orrs	r2, r1
 800d818:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f000 f8ac 	bl	800d978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2220      	movs	r2, #32
 800d82c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2200      	movs	r2, #0
 800d834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d838:	2300      	movs	r3, #0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3710      	adds	r7, #16
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}

0800d842 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d842:	b580      	push	{r7, lr}
 800d844:	b084      	sub	sp, #16
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
 800d84a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d852:	2b01      	cmp	r3, #1
 800d854:	d101      	bne.n	800d85a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d856:	2302      	movs	r3, #2
 800d858:	e02d      	b.n	800d8b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2201      	movs	r2, #1
 800d85e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2224      	movs	r2, #36	; 0x24
 800d866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f022 0201 	bic.w	r2, r2, #1
 800d880:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	683a      	ldr	r2, [r7, #0]
 800d892:	430a      	orrs	r2, r1
 800d894:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 f86e 	bl	800d978 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	68fa      	ldr	r2, [r7, #12]
 800d8a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2220      	movs	r2, #32
 800d8a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d8b4:	2300      	movs	r3, #0
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3710      	adds	r7, #16
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}

0800d8be <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d8be:	b580      	push	{r7, lr}
 800d8c0:	b08c      	sub	sp, #48	; 0x30
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	60f8      	str	r0, [r7, #12]
 800d8c6:	60b9      	str	r1, [r7, #8]
 800d8c8:	4613      	mov	r3, r2
 800d8ca:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8d2:	2b20      	cmp	r3, #32
 800d8d4:	d14a      	bne.n	800d96c <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d002      	beq.n	800d8e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800d8dc:	88fb      	ldrh	r3, [r7, #6]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d101      	bne.n	800d8e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	e043      	b.n	800d96e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d101      	bne.n	800d8f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800d8f0:	2302      	movs	r3, #2
 800d8f2:	e03c      	b.n	800d96e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2201      	movs	r2, #1
 800d900:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800d902:	88fb      	ldrh	r3, [r7, #6]
 800d904:	461a      	mov	r2, r3
 800d906:	68b9      	ldr	r1, [r7, #8]
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	f7ff fbf3 	bl	800d0f4 <UART_Start_Receive_DMA>
 800d90e:	4603      	mov	r3, r0
 800d910:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800d914:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d124      	bne.n	800d966 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d920:	2b01      	cmp	r3, #1
 800d922:	d11d      	bne.n	800d960 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2210      	movs	r2, #16
 800d92a:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	e853 3f00 	ldrex	r3, [r3]
 800d938:	617b      	str	r3, [r7, #20]
   return(result);
 800d93a:	697b      	ldr	r3, [r7, #20]
 800d93c:	f043 0310 	orr.w	r3, r3, #16
 800d940:	62bb      	str	r3, [r7, #40]	; 0x28
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	461a      	mov	r2, r3
 800d948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d94a:	627b      	str	r3, [r7, #36]	; 0x24
 800d94c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d94e:	6a39      	ldr	r1, [r7, #32]
 800d950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d952:	e841 2300 	strex	r3, r2, [r1]
 800d956:	61fb      	str	r3, [r7, #28]
   return(result);
 800d958:	69fb      	ldr	r3, [r7, #28]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d1e6      	bne.n	800d92c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800d95e:	e002      	b.n	800d966 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800d960:	2301      	movs	r3, #1
 800d962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800d966:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d96a:	e000      	b.n	800d96e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800d96c:	2302      	movs	r3, #2
  }
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3730      	adds	r7, #48	; 0x30
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
	...

0800d978 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d978:	b480      	push	{r7}
 800d97a:	b085      	sub	sp, #20
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d984:	2b00      	cmp	r3, #0
 800d986:	d108      	bne.n	800d99a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2201      	movs	r2, #1
 800d98c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2201      	movs	r2, #1
 800d994:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d998:	e031      	b.n	800d9fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d99a:	2310      	movs	r3, #16
 800d99c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d99e:	2310      	movs	r3, #16
 800d9a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	0e5b      	lsrs	r3, r3, #25
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	f003 0307 	and.w	r3, r3, #7
 800d9b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	0f5b      	lsrs	r3, r3, #29
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	f003 0307 	and.w	r3, r3, #7
 800d9c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d9c2:	7bbb      	ldrb	r3, [r7, #14]
 800d9c4:	7b3a      	ldrb	r2, [r7, #12]
 800d9c6:	4911      	ldr	r1, [pc, #68]	; (800da0c <UARTEx_SetNbDataToProcess+0x94>)
 800d9c8:	5c8a      	ldrb	r2, [r1, r2]
 800d9ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d9ce:	7b3a      	ldrb	r2, [r7, #12]
 800d9d0:	490f      	ldr	r1, [pc, #60]	; (800da10 <UARTEx_SetNbDataToProcess+0x98>)
 800d9d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d9d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9d8:	b29a      	uxth	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d9e0:	7bfb      	ldrb	r3, [r7, #15]
 800d9e2:	7b7a      	ldrb	r2, [r7, #13]
 800d9e4:	4909      	ldr	r1, [pc, #36]	; (800da0c <UARTEx_SetNbDataToProcess+0x94>)
 800d9e6:	5c8a      	ldrb	r2, [r1, r2]
 800d9e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d9ec:	7b7a      	ldrb	r2, [r7, #13]
 800d9ee:	4908      	ldr	r1, [pc, #32]	; (800da10 <UARTEx_SetNbDataToProcess+0x98>)
 800d9f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d9f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800d9f6:	b29a      	uxth	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d9fe:	bf00      	nop
 800da00:	3714      	adds	r7, #20
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr
 800da0a:	bf00      	nop
 800da0c:	08010a40 	.word	0x08010a40
 800da10:	08010a48 	.word	0x08010a48

0800da14 <checkint>:
 800da14:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800da18:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800da1c:	429a      	cmp	r2, r3
 800da1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da20:	dd2b      	ble.n	800da7a <checkint+0x66>
 800da22:	f240 4333 	movw	r3, #1075	; 0x433
 800da26:	429a      	cmp	r2, r3
 800da28:	dc25      	bgt.n	800da76 <checkint+0x62>
 800da2a:	1a9b      	subs	r3, r3, r2
 800da2c:	f1a3 0620 	sub.w	r6, r3, #32
 800da30:	f04f 32ff 	mov.w	r2, #4294967295
 800da34:	fa02 f606 	lsl.w	r6, r2, r6
 800da38:	fa02 f403 	lsl.w	r4, r2, r3
 800da3c:	f1c3 0520 	rsb	r5, r3, #32
 800da40:	4334      	orrs	r4, r6
 800da42:	fa22 f505 	lsr.w	r5, r2, r5
 800da46:	432c      	orrs	r4, r5
 800da48:	409a      	lsls	r2, r3
 800da4a:	ea20 0602 	bic.w	r6, r0, r2
 800da4e:	ea21 0704 	bic.w	r7, r1, r4
 800da52:	ea56 0207 	orrs.w	r2, r6, r7
 800da56:	f1a3 0420 	sub.w	r4, r3, #32
 800da5a:	f1c3 0220 	rsb	r2, r3, #32
 800da5e:	d10c      	bne.n	800da7a <checkint+0x66>
 800da60:	40d8      	lsrs	r0, r3
 800da62:	fa01 f302 	lsl.w	r3, r1, r2
 800da66:	4318      	orrs	r0, r3
 800da68:	40e1      	lsrs	r1, r4
 800da6a:	4308      	orrs	r0, r1
 800da6c:	f000 0301 	and.w	r3, r0, #1
 800da70:	f1c3 0002 	rsb	r0, r3, #2
 800da74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da76:	2002      	movs	r0, #2
 800da78:	e7fc      	b.n	800da74 <checkint+0x60>
 800da7a:	2000      	movs	r0, #0
 800da7c:	e7fa      	b.n	800da74 <checkint+0x60>
	...

0800da80 <pow>:
 800da80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da84:	ed2d 8b0a 	vpush	{d8-d12}
 800da88:	b09b      	sub	sp, #108	; 0x6c
 800da8a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800da8e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800da92:	ed8d 1b00 	vstr	d1, [sp]
 800da96:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800da9a:	e9dd 6700 	ldrd	r6, r7, [sp]
 800da9e:	f109 30ff 	add.w	r0, r9, #4294967295
 800daa2:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800daa6:	4288      	cmp	r0, r1
 800daa8:	46cc      	mov	ip, r9
 800daaa:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800daae:	d806      	bhi.n	800dabe <pow+0x3e>
 800dab0:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800dab4:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800dab8:	297f      	cmp	r1, #127	; 0x7f
 800daba:	f240 81ab 	bls.w	800de14 <pow+0x394>
 800dabe:	19b1      	adds	r1, r6, r6
 800dac0:	9104      	str	r1, [sp, #16]
 800dac2:	eb47 0107 	adc.w	r1, r7, r7
 800dac6:	9105      	str	r1, [sp, #20]
 800dac8:	9904      	ldr	r1, [sp, #16]
 800daca:	f111 31ff 	adds.w	r1, r1, #4294967295
 800dace:	460a      	mov	r2, r1
 800dad0:	9905      	ldr	r1, [sp, #20]
 800dad2:	f141 31ff 	adc.w	r1, r1, #4294967295
 800dad6:	460b      	mov	r3, r1
 800dad8:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800dadc:	f06f 0001 	mvn.w	r0, #1
 800dae0:	4299      	cmp	r1, r3
 800dae2:	bf08      	it	eq
 800dae4:	4290      	cmpeq	r0, r2
 800dae6:	d260      	bcs.n	800dbaa <pow+0x12a>
 800dae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800daec:	4313      	orrs	r3, r2
 800daee:	d11a      	bne.n	800db26 <pow+0xa6>
 800daf0:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800daf4:	1923      	adds	r3, r4, r4
 800daf6:	930c      	str	r3, [sp, #48]	; 0x30
 800daf8:	eb42 0302 	adc.w	r3, r2, r2
 800dafc:	930d      	str	r3, [sp, #52]	; 0x34
 800dafe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db02:	4bcf      	ldr	r3, [pc, #828]	; (800de40 <pow+0x3c0>)
 800db04:	2200      	movs	r2, #0
 800db06:	428b      	cmp	r3, r1
 800db08:	bf08      	it	eq
 800db0a:	4282      	cmpeq	r2, r0
 800db0c:	f080 8265 	bcs.w	800dfda <pow+0x55a>
 800db10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db14:	ed9d 6b00 	vldr	d6, [sp]
 800db18:	ee37 0b06 	vadd.f64	d0, d7, d6
 800db1c:	b01b      	add	sp, #108	; 0x6c
 800db1e:	ecbd 8b0a 	vpop	{d8-d12}
 800db22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db26:	49c7      	ldr	r1, [pc, #796]	; (800de44 <pow+0x3c4>)
 800db28:	2000      	movs	r0, #0
 800db2a:	428d      	cmp	r5, r1
 800db2c:	bf08      	it	eq
 800db2e:	4284      	cmpeq	r4, r0
 800db30:	d10b      	bne.n	800db4a <pow+0xca>
 800db32:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800db36:	19b3      	adds	r3, r6, r6
 800db38:	930e      	str	r3, [sp, #56]	; 0x38
 800db3a:	eb42 0302 	adc.w	r3, r2, r2
 800db3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800db40:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800db44:	4bbe      	ldr	r3, [pc, #760]	; (800de40 <pow+0x3c0>)
 800db46:	2200      	movs	r2, #0
 800db48:	e7dd      	b.n	800db06 <pow+0x86>
 800db4a:	1921      	adds	r1, r4, r4
 800db4c:	9106      	str	r1, [sp, #24]
 800db4e:	eb45 0105 	adc.w	r1, r5, r5
 800db52:	9107      	str	r1, [sp, #28]
 800db54:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800db58:	49bb      	ldr	r1, [pc, #748]	; (800de48 <pow+0x3c8>)
 800db5a:	2000      	movs	r0, #0
 800db5c:	42a1      	cmp	r1, r4
 800db5e:	bf08      	it	eq
 800db60:	4298      	cmpeq	r0, r3
 800db62:	d3d5      	bcc.n	800db10 <pow+0x90>
 800db64:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800db68:	428c      	cmp	r4, r1
 800db6a:	bf08      	it	eq
 800db6c:	4283      	cmpeq	r3, r0
 800db6e:	d1cf      	bne.n	800db10 <pow+0x90>
 800db70:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800db74:	49b5      	ldr	r1, [pc, #724]	; (800de4c <pow+0x3cc>)
 800db76:	2000      	movs	r0, #0
 800db78:	428c      	cmp	r4, r1
 800db7a:	bf08      	it	eq
 800db7c:	4283      	cmpeq	r3, r0
 800db7e:	f000 822c 	beq.w	800dfda <pow+0x55a>
 800db82:	49b3      	ldr	r1, [pc, #716]	; (800de50 <pow+0x3d0>)
 800db84:	f04f 30ff 	mov.w	r0, #4294967295
 800db88:	42a1      	cmp	r1, r4
 800db8a:	bf08      	it	eq
 800db8c:	4298      	cmpeq	r0, r3
 800db8e:	ea6f 0307 	mvn.w	r3, r7
 800db92:	bf34      	ite	cc
 800db94:	2201      	movcc	r2, #1
 800db96:	2200      	movcs	r2, #0
 800db98:	0fdb      	lsrs	r3, r3, #31
 800db9a:	429a      	cmp	r2, r3
 800db9c:	f040 821a 	bne.w	800dfd4 <pow+0x554>
 800dba0:	ed9d 7b00 	vldr	d7, [sp]
 800dba4:	ee27 0b07 	vmul.f64	d0, d7, d7
 800dba8:	e7b8      	b.n	800db1c <pow+0x9c>
 800dbaa:	1923      	adds	r3, r4, r4
 800dbac:	9308      	str	r3, [sp, #32]
 800dbae:	eb45 0305 	adc.w	r3, r5, r5
 800dbb2:	9309      	str	r3, [sp, #36]	; 0x24
 800dbb4:	9b08      	ldr	r3, [sp, #32]
 800dbb6:	f113 33ff 	adds.w	r3, r3, #4294967295
 800dbba:	9310      	str	r3, [sp, #64]	; 0x40
 800dbbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbbe:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dbc2:	9311      	str	r3, [sp, #68]	; 0x44
 800dbc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dbc8:	4299      	cmp	r1, r3
 800dbca:	bf08      	it	eq
 800dbcc:	4290      	cmpeq	r0, r2
 800dbce:	d22d      	bcs.n	800dc2c <pow+0x1ac>
 800dbd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dbd4:	2c00      	cmp	r4, #0
 800dbd6:	f175 0300 	sbcs.w	r3, r5, #0
 800dbda:	ee27 0b07 	vmul.f64	d0, d7, d7
 800dbde:	da16      	bge.n	800dc0e <pow+0x18e>
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	4639      	mov	r1, r7
 800dbe4:	f7ff ff16 	bl	800da14 <checkint>
 800dbe8:	2801      	cmp	r0, #1
 800dbea:	d110      	bne.n	800dc0e <pow+0x18e>
 800dbec:	eeb1 0b40 	vneg.f64	d0, d0
 800dbf0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800dbf4:	4323      	orrs	r3, r4
 800dbf6:	d10c      	bne.n	800dc12 <pow+0x192>
 800dbf8:	2e00      	cmp	r6, #0
 800dbfa:	f177 0300 	sbcs.w	r3, r7, #0
 800dbfe:	da8d      	bge.n	800db1c <pow+0x9c>
 800dc00:	b01b      	add	sp, #108	; 0x6c
 800dc02:	ecbd 8b0a 	vpop	{d8-d12}
 800dc06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc0a:	f000 ba29 	b.w	800e060 <__math_divzero>
 800dc0e:	2000      	movs	r0, #0
 800dc10:	e7ee      	b.n	800dbf0 <pow+0x170>
 800dc12:	2e00      	cmp	r6, #0
 800dc14:	f177 0300 	sbcs.w	r3, r7, #0
 800dc18:	da80      	bge.n	800db1c <pow+0x9c>
 800dc1a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800dc1e:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800dc22:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800dc26:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800dc2a:	e777      	b.n	800db1c <pow+0x9c>
 800dc2c:	2c00      	cmp	r4, #0
 800dc2e:	f175 0300 	sbcs.w	r3, r5, #0
 800dc32:	da35      	bge.n	800dca0 <pow+0x220>
 800dc34:	4630      	mov	r0, r6
 800dc36:	4639      	mov	r1, r7
 800dc38:	f7ff feec 	bl	800da14 <checkint>
 800dc3c:	b940      	cbnz	r0, 800dc50 <pow+0x1d0>
 800dc3e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800dc42:	b01b      	add	sp, #108	; 0x6c
 800dc44:	ecbd 8b0a 	vpop	{d8-d12}
 800dc48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc4c:	f000 ba20 	b.w	800e090 <__math_invalid>
 800dc50:	2801      	cmp	r0, #1
 800dc52:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dc56:	bf14      	ite	ne
 800dc58:	2000      	movne	r0, #0
 800dc5a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800dc5e:	461d      	mov	r5, r3
 800dc60:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800dc64:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800dc68:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800dc6c:	2a7f      	cmp	r2, #127	; 0x7f
 800dc6e:	d933      	bls.n	800dcd8 <pow+0x258>
 800dc70:	4974      	ldr	r1, [pc, #464]	; (800de44 <pow+0x3c4>)
 800dc72:	2000      	movs	r0, #0
 800dc74:	428d      	cmp	r5, r1
 800dc76:	bf08      	it	eq
 800dc78:	4284      	cmpeq	r4, r0
 800dc7a:	f000 81ae 	beq.w	800dfda <pow+0x55a>
 800dc7e:	f240 32bd 	movw	r2, #957	; 0x3bd
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d80e      	bhi.n	800dca4 <pow+0x224>
 800dc86:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800dc8a:	ed9d 7b00 	vldr	d7, [sp]
 800dc8e:	42a9      	cmp	r1, r5
 800dc90:	bf08      	it	eq
 800dc92:	42a0      	cmpeq	r0, r4
 800dc94:	bf34      	ite	cc
 800dc96:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800dc9a:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800dc9e:	e73d      	b.n	800db1c <pow+0x9c>
 800dca0:	2000      	movs	r0, #0
 800dca2:	e7df      	b.n	800dc64 <pow+0x1e4>
 800dca4:	42a9      	cmp	r1, r5
 800dca6:	bf08      	it	eq
 800dca8:	42a0      	cmpeq	r0, r4
 800dcaa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800dcae:	bf2c      	ite	cs
 800dcb0:	2301      	movcs	r3, #1
 800dcb2:	2300      	movcc	r3, #0
 800dcb4:	4590      	cmp	r8, r2
 800dcb6:	bf8c      	ite	hi
 800dcb8:	f04f 0800 	movhi.w	r8, #0
 800dcbc:	f04f 0801 	movls.w	r8, #1
 800dcc0:	4543      	cmp	r3, r8
 800dcc2:	f04f 0000 	mov.w	r0, #0
 800dcc6:	f000 80af 	beq.w	800de28 <pow+0x3a8>
 800dcca:	b01b      	add	sp, #108	; 0x6c
 800dccc:	ecbd 8b0a 	vpop	{d8-d12}
 800dcd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcd4:	f000 b9bc 	b.w	800e050 <__math_oflow>
 800dcd8:	f1bc 0f00 	cmp.w	ip, #0
 800dcdc:	d10e      	bne.n	800dcfc <pow+0x27c>
 800dcde:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800de38 <pow+0x3b8>
 800dce2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800dce6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dcea:	ec57 6b17 	vmov	r6, r7, d7
 800dcee:	4b59      	ldr	r3, [pc, #356]	; (800de54 <pow+0x3d4>)
 800dcf0:	2100      	movs	r1, #0
 800dcf2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800dcf6:	1874      	adds	r4, r6, r1
 800dcf8:	eb42 0503 	adc.w	r5, r2, r3
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	18e3      	adds	r3, r4, r3
 800dd00:	4b55      	ldr	r3, [pc, #340]	; (800de58 <pow+0x3d8>)
 800dd02:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800dd06:	eb45 0303 	adc.w	r3, r5, r3
 800dd0a:	1519      	asrs	r1, r3, #20
 800dd0c:	ee03 1a10 	vmov	s6, r1
 800dd10:	0d1e      	lsrs	r6, r3, #20
 800dd12:	2100      	movs	r1, #0
 800dd14:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800dd18:	0536      	lsls	r6, r6, #20
 800dd1a:	1a63      	subs	r3, r4, r1
 800dd1c:	9312      	str	r3, [sp, #72]	; 0x48
 800dd1e:	eb65 0306 	sbc.w	r3, r5, r6
 800dd22:	9313      	str	r3, [sp, #76]	; 0x4c
 800dd24:	4b4d      	ldr	r3, [pc, #308]	; (800de5c <pow+0x3dc>)
 800dd26:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800dd2a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800dd2e:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800dd32:	eea5 6b07 	vfma.f64	d6, d5, d7
 800dd36:	ed93 7b00 	vldr	d7, [r3]
 800dd3a:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800dd3e:	ed93 4b02 	vldr	d4, [r3, #8]
 800dd42:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800dd46:	eea3 5b07 	vfma.f64	d5, d3, d7
 800dd4a:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800dd4e:	ee36 9b05 	vadd.f64	d9, d6, d5
 800dd52:	ee35 5b49 	vsub.f64	d5, d5, d9
 800dd56:	eea3 7b04 	vfma.f64	d7, d3, d4
 800dd5a:	ed93 4b04 	vldr	d4, [r3, #16]
 800dd5e:	ee35 5b06 	vadd.f64	d5, d5, d6
 800dd62:	ee37 7b05 	vadd.f64	d7, d7, d5
 800dd66:	ee26 4b04 	vmul.f64	d4, d6, d4
 800dd6a:	ed93 3b08 	vldr	d3, [r3, #32]
 800dd6e:	ee26 0b04 	vmul.f64	d0, d6, d4
 800dd72:	eeb0 8b40 	vmov.f64	d8, d0
 800dd76:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800dd7a:	ed93 4b06 	vldr	d4, [r3, #24]
 800dd7e:	ee26 ab00 	vmul.f64	d10, d6, d0
 800dd82:	ee39 1b00 	vadd.f64	d1, d9, d0
 800dd86:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800dd8a:	eea6 4b03 	vfma.f64	d4, d6, d3
 800dd8e:	ee39 9b41 	vsub.f64	d9, d9, d1
 800dd92:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800dd96:	ee37 8b08 	vadd.f64	d8, d7, d8
 800dd9a:	ee39 9b00 	vadd.f64	d9, d9, d0
 800dd9e:	eea6 3b02 	vfma.f64	d3, d6, d2
 800dda2:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800dda6:	ee38 9b09 	vadd.f64	d9, d8, d9
 800ddaa:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800ddae:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800ddb2:	ed9d 6b00 	vldr	d6, [sp]
 800ddb6:	eea0 3b02 	vfma.f64	d3, d0, d2
 800ddba:	eea0 4b03 	vfma.f64	d4, d0, d3
 800ddbe:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800ddc2:	ee31 7b09 	vadd.f64	d7, d1, d9
 800ddc6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ddca:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ddce:	eeb0 3b46 	vmov.f64	d3, d6
 800ddd2:	ee31 1b47 	vsub.f64	d1, d1, d7
 800ddd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ddda:	ee31 9b09 	vadd.f64	d9, d1, d9
 800ddde:	ed9d 6b00 	vldr	d6, [sp]
 800dde2:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800dde6:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800ddea:	193c      	adds	r4, r7, r4
 800ddec:	2c3e      	cmp	r4, #62	; 0x3e
 800ddee:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800ddf2:	eea6 3b09 	vfma.f64	d3, d6, d9
 800ddf6:	d934      	bls.n	800de62 <pow+0x3e2>
 800ddf8:	428c      	cmp	r4, r1
 800ddfa:	da0d      	bge.n	800de18 <pow+0x398>
 800ddfc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800de00:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de04:	ee37 0b00 	vadd.f64	d0, d7, d0
 800de08:	2800      	cmp	r0, #0
 800de0a:	f43f ae87 	beq.w	800db1c <pow+0x9c>
 800de0e:	eeb1 0b40 	vneg.f64	d0, d0
 800de12:	e683      	b.n	800db1c <pow+0x9c>
 800de14:	2000      	movs	r0, #0
 800de16:	e771      	b.n	800dcfc <pow+0x27c>
 800de18:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800de1c:	d920      	bls.n	800de60 <pow+0x3e0>
 800de1e:	2a00      	cmp	r2, #0
 800de20:	f173 0300 	sbcs.w	r3, r3, #0
 800de24:	f6bf af51 	bge.w	800dcca <pow+0x24a>
 800de28:	b01b      	add	sp, #108	; 0x6c
 800de2a:	ecbd 8b0a 	vpop	{d8-d12}
 800de2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de32:	f000 b905 	b.w	800e040 <__math_uflow>
 800de36:	bf00      	nop
 800de38:	00000000 	.word	0x00000000
 800de3c:	43300000 	.word	0x43300000
 800de40:	fff00000 	.word	0xfff00000
 800de44:	3ff00000 	.word	0x3ff00000
 800de48:	ffe00000 	.word	0xffe00000
 800de4c:	7fe00000 	.word	0x7fe00000
 800de50:	7fdfffff 	.word	0x7fdfffff
 800de54:	fcc00000 	.word	0xfcc00000
 800de58:	c0196aab 	.word	0xc0196aab
 800de5c:	08010a50 	.word	0x08010a50
 800de60:	460f      	mov	r7, r1
 800de62:	4e65      	ldr	r6, [pc, #404]	; (800dff8 <pow+0x578>)
 800de64:	ed9d 4b02 	vldr	d4, [sp, #8]
 800de68:	ed96 6b02 	vldr	d6, [r6, #8]
 800de6c:	ed96 7b00 	vldr	d7, [r6]
 800de70:	eeb0 5b46 	vmov.f64	d5, d6
 800de74:	eea4 5b07 	vfma.f64	d5, d4, d7
 800de78:	ed8d 5b00 	vstr	d5, [sp]
 800de7c:	ee35 6b46 	vsub.f64	d6, d5, d6
 800de80:	eeb0 5b44 	vmov.f64	d5, d4
 800de84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de88:	ed96 7b04 	vldr	d7, [r6, #16]
 800de8c:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800de90:	eea6 5b07 	vfma.f64	d5, d6, d7
 800de94:	eeb0 7b45 	vmov.f64	d7, d5
 800de98:	ed96 5b06 	vldr	d5, [r6, #24]
 800de9c:	1849      	adds	r1, r1, r1
 800de9e:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800dea2:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800dea6:	eea6 7b05 	vfma.f64	d7, d6, d5
 800deaa:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800deae:	ee33 3b07 	vadd.f64	d3, d3, d7
 800deb2:	ee23 6b03 	vmul.f64	d6, d3, d3
 800deb6:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800deba:	ed96 5b08 	vldr	d5, [r6, #32]
 800debe:	ee33 7b07 	vadd.f64	d7, d3, d7
 800dec2:	1814      	adds	r4, r2, r0
 800dec4:	0365      	lsls	r5, r4, #13
 800dec6:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800deca:	eea3 5b04 	vfma.f64	d5, d3, d4
 800dece:	eea6 7b05 	vfma.f64	d7, d6, d5
 800ded2:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800ded6:	ee26 6b06 	vmul.f64	d6, d6, d6
 800deda:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800dede:	2000      	movs	r0, #0
 800dee0:	eb10 0a04 	adds.w	sl, r0, r4
 800dee4:	eea3 5b04 	vfma.f64	d5, d3, d4
 800dee8:	eb45 0b0c 	adc.w	fp, r5, ip
 800deec:	eea6 7b05 	vfma.f64	d7, d6, d5
 800def0:	2f00      	cmp	r7, #0
 800def2:	d16a      	bne.n	800dfca <pow+0x54a>
 800def4:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800def8:	4639      	mov	r1, r7
 800defa:	ea50 0301 	orrs.w	r3, r0, r1
 800defe:	f04f 0300 	mov.w	r3, #0
 800df02:	d115      	bne.n	800df30 <pow+0x4b0>
 800df04:	eb1a 0303 	adds.w	r3, sl, r3
 800df08:	ee0b 3a10 	vmov	s22, r3
 800df0c:	4b3b      	ldr	r3, [pc, #236]	; (800dffc <pow+0x57c>)
 800df0e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800dfe0 <pow+0x560>
 800df12:	eb4b 0303 	adc.w	r3, fp, r3
 800df16:	ee0b 3a90 	vmov	s23, r3
 800df1a:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800df1e:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800df22:	b01b      	add	sp, #108	; 0x6c
 800df24:	ecbd 8b0a 	vpop	{d8-d12}
 800df28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df2c:	f000 b8c8 	b.w	800e0c0 <__math_check_oflow>
 800df30:	eb1a 0303 	adds.w	r3, sl, r3
 800df34:	930a      	str	r3, [sp, #40]	; 0x28
 800df36:	4b32      	ldr	r3, [pc, #200]	; (800e000 <pow+0x580>)
 800df38:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800df3c:	eb4b 0303 	adc.w	r3, fp, r3
 800df40:	930b      	str	r3, [sp, #44]	; 0x2c
 800df42:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800df46:	ee27 6b05 	vmul.f64	d6, d7, d5
 800df4a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800df4e:	eeb0 3bc7 	vabs.f64	d3, d7
 800df52:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800df56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df5a:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800dfe8 <pow+0x568>
 800df5e:	d52b      	bpl.n	800dfb8 <pow+0x538>
 800df60:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800df64:	ee35 5b47 	vsub.f64	d5, d5, d7
 800df68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df6c:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800df70:	ee35 6b06 	vadd.f64	d6, d5, d6
 800df74:	bf48      	it	mi
 800df76:	eeb0 4b43 	vmovmi.f64	d4, d3
 800df7a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800df7e:	ee34 5b43 	vsub.f64	d5, d4, d3
 800df82:	ee35 7b07 	vadd.f64	d7, d5, d7
 800df86:	ee37 7b06 	vadd.f64	d7, d7, d6
 800df8a:	ee37 7b03 	vadd.f64	d7, d7, d3
 800df8e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800df92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800df96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df9a:	d105      	bne.n	800dfa8 <pow+0x528>
 800df9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800df9e:	463a      	mov	r2, r7
 800dfa0:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800dfa4:	ec43 2b17 	vmov	d7, r2, r3
 800dfa8:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800dfac:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800dfb0:	ee26 6b00 	vmul.f64	d6, d6, d0
 800dfb4:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800dfb8:	ee27 0b00 	vmul.f64	d0, d7, d0
 800dfbc:	b01b      	add	sp, #108	; 0x6c
 800dfbe:	ecbd 8b0a 	vpop	{d8-d12}
 800dfc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc6:	f000 b872 	b.w	800e0ae <__math_check_uflow>
 800dfca:	ec4b ab10 	vmov	d0, sl, fp
 800dfce:	eea7 0b00 	vfma.f64	d0, d7, d0
 800dfd2:	e5a3      	b.n	800db1c <pow+0x9c>
 800dfd4:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800dff0 <pow+0x570>
 800dfd8:	e5a0      	b.n	800db1c <pow+0x9c>
 800dfda:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800dfde:	e59d      	b.n	800db1c <pow+0x9c>
 800dfe0:	00000000 	.word	0x00000000
 800dfe4:	7f000000 	.word	0x7f000000
 800dfe8:	00000000 	.word	0x00000000
 800dfec:	00100000 	.word	0x00100000
	...
 800dff8:	08011a98 	.word	0x08011a98
 800dffc:	c0f00000 	.word	0xc0f00000
 800e000:	3fe00000 	.word	0x3fe00000

0800e004 <with_errno>:
 800e004:	b513      	push	{r0, r1, r4, lr}
 800e006:	4604      	mov	r4, r0
 800e008:	ed8d 0b00 	vstr	d0, [sp]
 800e00c:	f000 f86c 	bl	800e0e8 <__errno>
 800e010:	ed9d 0b00 	vldr	d0, [sp]
 800e014:	6004      	str	r4, [r0, #0]
 800e016:	b002      	add	sp, #8
 800e018:	bd10      	pop	{r4, pc}

0800e01a <xflow>:
 800e01a:	b082      	sub	sp, #8
 800e01c:	b158      	cbz	r0, 800e036 <xflow+0x1c>
 800e01e:	eeb1 7b40 	vneg.f64	d7, d0
 800e022:	ed8d 7b00 	vstr	d7, [sp]
 800e026:	ed9d 7b00 	vldr	d7, [sp]
 800e02a:	2022      	movs	r0, #34	; 0x22
 800e02c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e030:	b002      	add	sp, #8
 800e032:	f7ff bfe7 	b.w	800e004 <with_errno>
 800e036:	eeb0 7b40 	vmov.f64	d7, d0
 800e03a:	e7f2      	b.n	800e022 <xflow+0x8>
 800e03c:	0000      	movs	r0, r0
	...

0800e040 <__math_uflow>:
 800e040:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e048 <__math_uflow+0x8>
 800e044:	f7ff bfe9 	b.w	800e01a <xflow>
 800e048:	00000000 	.word	0x00000000
 800e04c:	10000000 	.word	0x10000000

0800e050 <__math_oflow>:
 800e050:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e058 <__math_oflow+0x8>
 800e054:	f7ff bfe1 	b.w	800e01a <xflow>
 800e058:	00000000 	.word	0x00000000
 800e05c:	70000000 	.word	0x70000000

0800e060 <__math_divzero>:
 800e060:	b082      	sub	sp, #8
 800e062:	2800      	cmp	r0, #0
 800e064:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e068:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800e06c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800e070:	ed8d 7b00 	vstr	d7, [sp]
 800e074:	ed9d 0b00 	vldr	d0, [sp]
 800e078:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800e088 <__math_divzero+0x28>
 800e07c:	2022      	movs	r0, #34	; 0x22
 800e07e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800e082:	b002      	add	sp, #8
 800e084:	f7ff bfbe 	b.w	800e004 <with_errno>
	...

0800e090 <__math_invalid>:
 800e090:	eeb0 7b40 	vmov.f64	d7, d0
 800e094:	eeb4 7b47 	vcmp.f64	d7, d7
 800e098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e09c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800e0a0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800e0a4:	d602      	bvs.n	800e0ac <__math_invalid+0x1c>
 800e0a6:	2021      	movs	r0, #33	; 0x21
 800e0a8:	f7ff bfac 	b.w	800e004 <with_errno>
 800e0ac:	4770      	bx	lr

0800e0ae <__math_check_uflow>:
 800e0ae:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0b6:	d102      	bne.n	800e0be <__math_check_uflow+0x10>
 800e0b8:	2022      	movs	r0, #34	; 0x22
 800e0ba:	f7ff bfa3 	b.w	800e004 <with_errno>
 800e0be:	4770      	bx	lr

0800e0c0 <__math_check_oflow>:
 800e0c0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800e0e0 <__math_check_oflow+0x20>
 800e0c4:	eeb0 7bc0 	vabs.f64	d7, d0
 800e0c8:	eeb4 7b46 	vcmp.f64	d7, d6
 800e0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0d0:	dd02      	ble.n	800e0d8 <__math_check_oflow+0x18>
 800e0d2:	2022      	movs	r0, #34	; 0x22
 800e0d4:	f7ff bf96 	b.w	800e004 <with_errno>
 800e0d8:	4770      	bx	lr
 800e0da:	bf00      	nop
 800e0dc:	f3af 8000 	nop.w
 800e0e0:	ffffffff 	.word	0xffffffff
 800e0e4:	7fefffff 	.word	0x7fefffff

0800e0e8 <__errno>:
 800e0e8:	4b01      	ldr	r3, [pc, #4]	; (800e0f0 <__errno+0x8>)
 800e0ea:	6818      	ldr	r0, [r3, #0]
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	24000028 	.word	0x24000028

0800e0f4 <__libc_init_array>:
 800e0f4:	b570      	push	{r4, r5, r6, lr}
 800e0f6:	4d0d      	ldr	r5, [pc, #52]	; (800e12c <__libc_init_array+0x38>)
 800e0f8:	4c0d      	ldr	r4, [pc, #52]	; (800e130 <__libc_init_array+0x3c>)
 800e0fa:	1b64      	subs	r4, r4, r5
 800e0fc:	10a4      	asrs	r4, r4, #2
 800e0fe:	2600      	movs	r6, #0
 800e100:	42a6      	cmp	r6, r4
 800e102:	d109      	bne.n	800e118 <__libc_init_array+0x24>
 800e104:	4d0b      	ldr	r5, [pc, #44]	; (800e134 <__libc_init_array+0x40>)
 800e106:	4c0c      	ldr	r4, [pc, #48]	; (800e138 <__libc_init_array+0x44>)
 800e108:	f002 fc60 	bl	80109cc <_init>
 800e10c:	1b64      	subs	r4, r4, r5
 800e10e:	10a4      	asrs	r4, r4, #2
 800e110:	2600      	movs	r6, #0
 800e112:	42a6      	cmp	r6, r4
 800e114:	d105      	bne.n	800e122 <__libc_init_array+0x2e>
 800e116:	bd70      	pop	{r4, r5, r6, pc}
 800e118:	f855 3b04 	ldr.w	r3, [r5], #4
 800e11c:	4798      	blx	r3
 800e11e:	3601      	adds	r6, #1
 800e120:	e7ee      	b.n	800e100 <__libc_init_array+0xc>
 800e122:	f855 3b04 	ldr.w	r3, [r5], #4
 800e126:	4798      	blx	r3
 800e128:	3601      	adds	r6, #1
 800e12a:	e7f2      	b.n	800e112 <__libc_init_array+0x1e>
 800e12c:	080126f4 	.word	0x080126f4
 800e130:	080126f4 	.word	0x080126f4
 800e134:	080126f4 	.word	0x080126f4
 800e138:	080126fc 	.word	0x080126fc

0800e13c <memcpy>:
 800e13c:	440a      	add	r2, r1
 800e13e:	4291      	cmp	r1, r2
 800e140:	f100 33ff 	add.w	r3, r0, #4294967295
 800e144:	d100      	bne.n	800e148 <memcpy+0xc>
 800e146:	4770      	bx	lr
 800e148:	b510      	push	{r4, lr}
 800e14a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e14e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e152:	4291      	cmp	r1, r2
 800e154:	d1f9      	bne.n	800e14a <memcpy+0xe>
 800e156:	bd10      	pop	{r4, pc}

0800e158 <memset>:
 800e158:	4402      	add	r2, r0
 800e15a:	4603      	mov	r3, r0
 800e15c:	4293      	cmp	r3, r2
 800e15e:	d100      	bne.n	800e162 <memset+0xa>
 800e160:	4770      	bx	lr
 800e162:	f803 1b01 	strb.w	r1, [r3], #1
 800e166:	e7f9      	b.n	800e15c <memset+0x4>

0800e168 <__cvt>:
 800e168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e16a:	ed2d 8b02 	vpush	{d8}
 800e16e:	eeb0 8b40 	vmov.f64	d8, d0
 800e172:	b085      	sub	sp, #20
 800e174:	4617      	mov	r7, r2
 800e176:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e178:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e17a:	ee18 2a90 	vmov	r2, s17
 800e17e:	f025 0520 	bic.w	r5, r5, #32
 800e182:	2a00      	cmp	r2, #0
 800e184:	bfb6      	itet	lt
 800e186:	222d      	movlt	r2, #45	; 0x2d
 800e188:	2200      	movge	r2, #0
 800e18a:	eeb1 8b40 	vneglt.f64	d8, d0
 800e18e:	2d46      	cmp	r5, #70	; 0x46
 800e190:	460c      	mov	r4, r1
 800e192:	701a      	strb	r2, [r3, #0]
 800e194:	d004      	beq.n	800e1a0 <__cvt+0x38>
 800e196:	2d45      	cmp	r5, #69	; 0x45
 800e198:	d100      	bne.n	800e19c <__cvt+0x34>
 800e19a:	3401      	adds	r4, #1
 800e19c:	2102      	movs	r1, #2
 800e19e:	e000      	b.n	800e1a2 <__cvt+0x3a>
 800e1a0:	2103      	movs	r1, #3
 800e1a2:	ab03      	add	r3, sp, #12
 800e1a4:	9301      	str	r3, [sp, #4]
 800e1a6:	ab02      	add	r3, sp, #8
 800e1a8:	9300      	str	r3, [sp, #0]
 800e1aa:	4622      	mov	r2, r4
 800e1ac:	4633      	mov	r3, r6
 800e1ae:	eeb0 0b48 	vmov.f64	d0, d8
 800e1b2:	f000 fca9 	bl	800eb08 <_dtoa_r>
 800e1b6:	2d47      	cmp	r5, #71	; 0x47
 800e1b8:	d109      	bne.n	800e1ce <__cvt+0x66>
 800e1ba:	07fb      	lsls	r3, r7, #31
 800e1bc:	d407      	bmi.n	800e1ce <__cvt+0x66>
 800e1be:	9b03      	ldr	r3, [sp, #12]
 800e1c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e1c2:	1a1b      	subs	r3, r3, r0
 800e1c4:	6013      	str	r3, [r2, #0]
 800e1c6:	b005      	add	sp, #20
 800e1c8:	ecbd 8b02 	vpop	{d8}
 800e1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1ce:	2d46      	cmp	r5, #70	; 0x46
 800e1d0:	eb00 0204 	add.w	r2, r0, r4
 800e1d4:	d10c      	bne.n	800e1f0 <__cvt+0x88>
 800e1d6:	7803      	ldrb	r3, [r0, #0]
 800e1d8:	2b30      	cmp	r3, #48	; 0x30
 800e1da:	d107      	bne.n	800e1ec <__cvt+0x84>
 800e1dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e4:	bf1c      	itt	ne
 800e1e6:	f1c4 0401 	rsbne	r4, r4, #1
 800e1ea:	6034      	strne	r4, [r6, #0]
 800e1ec:	6833      	ldr	r3, [r6, #0]
 800e1ee:	441a      	add	r2, r3
 800e1f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1f8:	bf08      	it	eq
 800e1fa:	9203      	streq	r2, [sp, #12]
 800e1fc:	2130      	movs	r1, #48	; 0x30
 800e1fe:	9b03      	ldr	r3, [sp, #12]
 800e200:	4293      	cmp	r3, r2
 800e202:	d2dc      	bcs.n	800e1be <__cvt+0x56>
 800e204:	1c5c      	adds	r4, r3, #1
 800e206:	9403      	str	r4, [sp, #12]
 800e208:	7019      	strb	r1, [r3, #0]
 800e20a:	e7f8      	b.n	800e1fe <__cvt+0x96>

0800e20c <__exponent>:
 800e20c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e20e:	4603      	mov	r3, r0
 800e210:	2900      	cmp	r1, #0
 800e212:	bfb8      	it	lt
 800e214:	4249      	neglt	r1, r1
 800e216:	f803 2b02 	strb.w	r2, [r3], #2
 800e21a:	bfb4      	ite	lt
 800e21c:	222d      	movlt	r2, #45	; 0x2d
 800e21e:	222b      	movge	r2, #43	; 0x2b
 800e220:	2909      	cmp	r1, #9
 800e222:	7042      	strb	r2, [r0, #1]
 800e224:	dd2a      	ble.n	800e27c <__exponent+0x70>
 800e226:	f10d 0407 	add.w	r4, sp, #7
 800e22a:	46a4      	mov	ip, r4
 800e22c:	270a      	movs	r7, #10
 800e22e:	46a6      	mov	lr, r4
 800e230:	460a      	mov	r2, r1
 800e232:	fb91 f6f7 	sdiv	r6, r1, r7
 800e236:	fb07 1516 	mls	r5, r7, r6, r1
 800e23a:	3530      	adds	r5, #48	; 0x30
 800e23c:	2a63      	cmp	r2, #99	; 0x63
 800e23e:	f104 34ff 	add.w	r4, r4, #4294967295
 800e242:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e246:	4631      	mov	r1, r6
 800e248:	dcf1      	bgt.n	800e22e <__exponent+0x22>
 800e24a:	3130      	adds	r1, #48	; 0x30
 800e24c:	f1ae 0502 	sub.w	r5, lr, #2
 800e250:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e254:	1c44      	adds	r4, r0, #1
 800e256:	4629      	mov	r1, r5
 800e258:	4561      	cmp	r1, ip
 800e25a:	d30a      	bcc.n	800e272 <__exponent+0x66>
 800e25c:	f10d 0209 	add.w	r2, sp, #9
 800e260:	eba2 020e 	sub.w	r2, r2, lr
 800e264:	4565      	cmp	r5, ip
 800e266:	bf88      	it	hi
 800e268:	2200      	movhi	r2, #0
 800e26a:	4413      	add	r3, r2
 800e26c:	1a18      	subs	r0, r3, r0
 800e26e:	b003      	add	sp, #12
 800e270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e272:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e276:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e27a:	e7ed      	b.n	800e258 <__exponent+0x4c>
 800e27c:	2330      	movs	r3, #48	; 0x30
 800e27e:	3130      	adds	r1, #48	; 0x30
 800e280:	7083      	strb	r3, [r0, #2]
 800e282:	70c1      	strb	r1, [r0, #3]
 800e284:	1d03      	adds	r3, r0, #4
 800e286:	e7f1      	b.n	800e26c <__exponent+0x60>

0800e288 <_printf_float>:
 800e288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e28c:	b08b      	sub	sp, #44	; 0x2c
 800e28e:	460c      	mov	r4, r1
 800e290:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e294:	4616      	mov	r6, r2
 800e296:	461f      	mov	r7, r3
 800e298:	4605      	mov	r5, r0
 800e29a:	f001 f9b7 	bl	800f60c <_localeconv_r>
 800e29e:	f8d0 b000 	ldr.w	fp, [r0]
 800e2a2:	4658      	mov	r0, fp
 800e2a4:	f7f2 f81c 	bl	80002e0 <strlen>
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	9308      	str	r3, [sp, #32]
 800e2ac:	f8d8 3000 	ldr.w	r3, [r8]
 800e2b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e2b4:	6822      	ldr	r2, [r4, #0]
 800e2b6:	3307      	adds	r3, #7
 800e2b8:	f023 0307 	bic.w	r3, r3, #7
 800e2bc:	f103 0108 	add.w	r1, r3, #8
 800e2c0:	f8c8 1000 	str.w	r1, [r8]
 800e2c4:	4682      	mov	sl, r0
 800e2c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e2ca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e2ce:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800e530 <_printf_float+0x2a8>
 800e2d2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e2d6:	eeb0 6bc0 	vabs.f64	d6, d0
 800e2da:	eeb4 6b47 	vcmp.f64	d6, d7
 800e2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2e2:	dd24      	ble.n	800e32e <_printf_float+0xa6>
 800e2e4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ec:	d502      	bpl.n	800e2f4 <_printf_float+0x6c>
 800e2ee:	232d      	movs	r3, #45	; 0x2d
 800e2f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2f4:	4b90      	ldr	r3, [pc, #576]	; (800e538 <_printf_float+0x2b0>)
 800e2f6:	4891      	ldr	r0, [pc, #580]	; (800e53c <_printf_float+0x2b4>)
 800e2f8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e2fc:	bf94      	ite	ls
 800e2fe:	4698      	movls	r8, r3
 800e300:	4680      	movhi	r8, r0
 800e302:	2303      	movs	r3, #3
 800e304:	6123      	str	r3, [r4, #16]
 800e306:	f022 0204 	bic.w	r2, r2, #4
 800e30a:	2300      	movs	r3, #0
 800e30c:	6022      	str	r2, [r4, #0]
 800e30e:	9304      	str	r3, [sp, #16]
 800e310:	9700      	str	r7, [sp, #0]
 800e312:	4633      	mov	r3, r6
 800e314:	aa09      	add	r2, sp, #36	; 0x24
 800e316:	4621      	mov	r1, r4
 800e318:	4628      	mov	r0, r5
 800e31a:	f000 f9d3 	bl	800e6c4 <_printf_common>
 800e31e:	3001      	adds	r0, #1
 800e320:	f040 808a 	bne.w	800e438 <_printf_float+0x1b0>
 800e324:	f04f 30ff 	mov.w	r0, #4294967295
 800e328:	b00b      	add	sp, #44	; 0x2c
 800e32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e32e:	eeb4 0b40 	vcmp.f64	d0, d0
 800e332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e336:	d709      	bvc.n	800e34c <_printf_float+0xc4>
 800e338:	ee10 3a90 	vmov	r3, s1
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	bfbc      	itt	lt
 800e340:	232d      	movlt	r3, #45	; 0x2d
 800e342:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e346:	487e      	ldr	r0, [pc, #504]	; (800e540 <_printf_float+0x2b8>)
 800e348:	4b7e      	ldr	r3, [pc, #504]	; (800e544 <_printf_float+0x2bc>)
 800e34a:	e7d5      	b.n	800e2f8 <_printf_float+0x70>
 800e34c:	6863      	ldr	r3, [r4, #4]
 800e34e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e352:	9104      	str	r1, [sp, #16]
 800e354:	1c59      	adds	r1, r3, #1
 800e356:	d13c      	bne.n	800e3d2 <_printf_float+0x14a>
 800e358:	2306      	movs	r3, #6
 800e35a:	6063      	str	r3, [r4, #4]
 800e35c:	2300      	movs	r3, #0
 800e35e:	9303      	str	r3, [sp, #12]
 800e360:	ab08      	add	r3, sp, #32
 800e362:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e366:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e36a:	ab07      	add	r3, sp, #28
 800e36c:	6861      	ldr	r1, [r4, #4]
 800e36e:	9300      	str	r3, [sp, #0]
 800e370:	6022      	str	r2, [r4, #0]
 800e372:	f10d 031b 	add.w	r3, sp, #27
 800e376:	4628      	mov	r0, r5
 800e378:	f7ff fef6 	bl	800e168 <__cvt>
 800e37c:	9b04      	ldr	r3, [sp, #16]
 800e37e:	9907      	ldr	r1, [sp, #28]
 800e380:	2b47      	cmp	r3, #71	; 0x47
 800e382:	4680      	mov	r8, r0
 800e384:	d108      	bne.n	800e398 <_printf_float+0x110>
 800e386:	1cc8      	adds	r0, r1, #3
 800e388:	db02      	blt.n	800e390 <_printf_float+0x108>
 800e38a:	6863      	ldr	r3, [r4, #4]
 800e38c:	4299      	cmp	r1, r3
 800e38e:	dd41      	ble.n	800e414 <_printf_float+0x18c>
 800e390:	f1a9 0902 	sub.w	r9, r9, #2
 800e394:	fa5f f989 	uxtb.w	r9, r9
 800e398:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e39c:	d820      	bhi.n	800e3e0 <_printf_float+0x158>
 800e39e:	3901      	subs	r1, #1
 800e3a0:	464a      	mov	r2, r9
 800e3a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e3a6:	9107      	str	r1, [sp, #28]
 800e3a8:	f7ff ff30 	bl	800e20c <__exponent>
 800e3ac:	9a08      	ldr	r2, [sp, #32]
 800e3ae:	9004      	str	r0, [sp, #16]
 800e3b0:	1813      	adds	r3, r2, r0
 800e3b2:	2a01      	cmp	r2, #1
 800e3b4:	6123      	str	r3, [r4, #16]
 800e3b6:	dc02      	bgt.n	800e3be <_printf_float+0x136>
 800e3b8:	6822      	ldr	r2, [r4, #0]
 800e3ba:	07d2      	lsls	r2, r2, #31
 800e3bc:	d501      	bpl.n	800e3c2 <_printf_float+0x13a>
 800e3be:	3301      	adds	r3, #1
 800e3c0:	6123      	str	r3, [r4, #16]
 800e3c2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d0a2      	beq.n	800e310 <_printf_float+0x88>
 800e3ca:	232d      	movs	r3, #45	; 0x2d
 800e3cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3d0:	e79e      	b.n	800e310 <_printf_float+0x88>
 800e3d2:	9904      	ldr	r1, [sp, #16]
 800e3d4:	2947      	cmp	r1, #71	; 0x47
 800e3d6:	d1c1      	bne.n	800e35c <_printf_float+0xd4>
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d1bf      	bne.n	800e35c <_printf_float+0xd4>
 800e3dc:	2301      	movs	r3, #1
 800e3de:	e7bc      	b.n	800e35a <_printf_float+0xd2>
 800e3e0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e3e4:	d118      	bne.n	800e418 <_printf_float+0x190>
 800e3e6:	2900      	cmp	r1, #0
 800e3e8:	6863      	ldr	r3, [r4, #4]
 800e3ea:	dd0b      	ble.n	800e404 <_printf_float+0x17c>
 800e3ec:	6121      	str	r1, [r4, #16]
 800e3ee:	b913      	cbnz	r3, 800e3f6 <_printf_float+0x16e>
 800e3f0:	6822      	ldr	r2, [r4, #0]
 800e3f2:	07d0      	lsls	r0, r2, #31
 800e3f4:	d502      	bpl.n	800e3fc <_printf_float+0x174>
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	440b      	add	r3, r1
 800e3fa:	6123      	str	r3, [r4, #16]
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800e400:	9304      	str	r3, [sp, #16]
 800e402:	e7de      	b.n	800e3c2 <_printf_float+0x13a>
 800e404:	b913      	cbnz	r3, 800e40c <_printf_float+0x184>
 800e406:	6822      	ldr	r2, [r4, #0]
 800e408:	07d2      	lsls	r2, r2, #31
 800e40a:	d501      	bpl.n	800e410 <_printf_float+0x188>
 800e40c:	3302      	adds	r3, #2
 800e40e:	e7f4      	b.n	800e3fa <_printf_float+0x172>
 800e410:	2301      	movs	r3, #1
 800e412:	e7f2      	b.n	800e3fa <_printf_float+0x172>
 800e414:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e418:	9b08      	ldr	r3, [sp, #32]
 800e41a:	4299      	cmp	r1, r3
 800e41c:	db05      	blt.n	800e42a <_printf_float+0x1a2>
 800e41e:	6823      	ldr	r3, [r4, #0]
 800e420:	6121      	str	r1, [r4, #16]
 800e422:	07d8      	lsls	r0, r3, #31
 800e424:	d5ea      	bpl.n	800e3fc <_printf_float+0x174>
 800e426:	1c4b      	adds	r3, r1, #1
 800e428:	e7e7      	b.n	800e3fa <_printf_float+0x172>
 800e42a:	2900      	cmp	r1, #0
 800e42c:	bfd4      	ite	le
 800e42e:	f1c1 0202 	rsble	r2, r1, #2
 800e432:	2201      	movgt	r2, #1
 800e434:	4413      	add	r3, r2
 800e436:	e7e0      	b.n	800e3fa <_printf_float+0x172>
 800e438:	6823      	ldr	r3, [r4, #0]
 800e43a:	055a      	lsls	r2, r3, #21
 800e43c:	d407      	bmi.n	800e44e <_printf_float+0x1c6>
 800e43e:	6923      	ldr	r3, [r4, #16]
 800e440:	4642      	mov	r2, r8
 800e442:	4631      	mov	r1, r6
 800e444:	4628      	mov	r0, r5
 800e446:	47b8      	blx	r7
 800e448:	3001      	adds	r0, #1
 800e44a:	d12a      	bne.n	800e4a2 <_printf_float+0x21a>
 800e44c:	e76a      	b.n	800e324 <_printf_float+0x9c>
 800e44e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e452:	f240 80e2 	bls.w	800e61a <_printf_float+0x392>
 800e456:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e45a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e462:	d133      	bne.n	800e4cc <_printf_float+0x244>
 800e464:	4a38      	ldr	r2, [pc, #224]	; (800e548 <_printf_float+0x2c0>)
 800e466:	2301      	movs	r3, #1
 800e468:	4631      	mov	r1, r6
 800e46a:	4628      	mov	r0, r5
 800e46c:	47b8      	blx	r7
 800e46e:	3001      	adds	r0, #1
 800e470:	f43f af58 	beq.w	800e324 <_printf_float+0x9c>
 800e474:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e478:	429a      	cmp	r2, r3
 800e47a:	db02      	blt.n	800e482 <_printf_float+0x1fa>
 800e47c:	6823      	ldr	r3, [r4, #0]
 800e47e:	07d8      	lsls	r0, r3, #31
 800e480:	d50f      	bpl.n	800e4a2 <_printf_float+0x21a>
 800e482:	4653      	mov	r3, sl
 800e484:	465a      	mov	r2, fp
 800e486:	4631      	mov	r1, r6
 800e488:	4628      	mov	r0, r5
 800e48a:	47b8      	blx	r7
 800e48c:	3001      	adds	r0, #1
 800e48e:	f43f af49 	beq.w	800e324 <_printf_float+0x9c>
 800e492:	f04f 0800 	mov.w	r8, #0
 800e496:	f104 091a 	add.w	r9, r4, #26
 800e49a:	9b08      	ldr	r3, [sp, #32]
 800e49c:	3b01      	subs	r3, #1
 800e49e:	4543      	cmp	r3, r8
 800e4a0:	dc09      	bgt.n	800e4b6 <_printf_float+0x22e>
 800e4a2:	6823      	ldr	r3, [r4, #0]
 800e4a4:	079b      	lsls	r3, r3, #30
 800e4a6:	f100 8108 	bmi.w	800e6ba <_printf_float+0x432>
 800e4aa:	68e0      	ldr	r0, [r4, #12]
 800e4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4ae:	4298      	cmp	r0, r3
 800e4b0:	bfb8      	it	lt
 800e4b2:	4618      	movlt	r0, r3
 800e4b4:	e738      	b.n	800e328 <_printf_float+0xa0>
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	464a      	mov	r2, r9
 800e4ba:	4631      	mov	r1, r6
 800e4bc:	4628      	mov	r0, r5
 800e4be:	47b8      	blx	r7
 800e4c0:	3001      	adds	r0, #1
 800e4c2:	f43f af2f 	beq.w	800e324 <_printf_float+0x9c>
 800e4c6:	f108 0801 	add.w	r8, r8, #1
 800e4ca:	e7e6      	b.n	800e49a <_printf_float+0x212>
 800e4cc:	9b07      	ldr	r3, [sp, #28]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	dc3c      	bgt.n	800e54c <_printf_float+0x2c4>
 800e4d2:	4a1d      	ldr	r2, [pc, #116]	; (800e548 <_printf_float+0x2c0>)
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	4631      	mov	r1, r6
 800e4d8:	4628      	mov	r0, r5
 800e4da:	47b8      	blx	r7
 800e4dc:	3001      	adds	r0, #1
 800e4de:	f43f af21 	beq.w	800e324 <_printf_float+0x9c>
 800e4e2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e4e6:	4313      	orrs	r3, r2
 800e4e8:	d102      	bne.n	800e4f0 <_printf_float+0x268>
 800e4ea:	6823      	ldr	r3, [r4, #0]
 800e4ec:	07d9      	lsls	r1, r3, #31
 800e4ee:	d5d8      	bpl.n	800e4a2 <_printf_float+0x21a>
 800e4f0:	4653      	mov	r3, sl
 800e4f2:	465a      	mov	r2, fp
 800e4f4:	4631      	mov	r1, r6
 800e4f6:	4628      	mov	r0, r5
 800e4f8:	47b8      	blx	r7
 800e4fa:	3001      	adds	r0, #1
 800e4fc:	f43f af12 	beq.w	800e324 <_printf_float+0x9c>
 800e500:	f04f 0900 	mov.w	r9, #0
 800e504:	f104 0a1a 	add.w	sl, r4, #26
 800e508:	9b07      	ldr	r3, [sp, #28]
 800e50a:	425b      	negs	r3, r3
 800e50c:	454b      	cmp	r3, r9
 800e50e:	dc01      	bgt.n	800e514 <_printf_float+0x28c>
 800e510:	9b08      	ldr	r3, [sp, #32]
 800e512:	e795      	b.n	800e440 <_printf_float+0x1b8>
 800e514:	2301      	movs	r3, #1
 800e516:	4652      	mov	r2, sl
 800e518:	4631      	mov	r1, r6
 800e51a:	4628      	mov	r0, r5
 800e51c:	47b8      	blx	r7
 800e51e:	3001      	adds	r0, #1
 800e520:	f43f af00 	beq.w	800e324 <_printf_float+0x9c>
 800e524:	f109 0901 	add.w	r9, r9, #1
 800e528:	e7ee      	b.n	800e508 <_printf_float+0x280>
 800e52a:	bf00      	nop
 800e52c:	f3af 8000 	nop.w
 800e530:	ffffffff 	.word	0xffffffff
 800e534:	7fefffff 	.word	0x7fefffff
 800e538:	0801230c 	.word	0x0801230c
 800e53c:	08012310 	.word	0x08012310
 800e540:	08012318 	.word	0x08012318
 800e544:	08012314 	.word	0x08012314
 800e548:	0801231c 	.word	0x0801231c
 800e54c:	9a08      	ldr	r2, [sp, #32]
 800e54e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e550:	429a      	cmp	r2, r3
 800e552:	bfa8      	it	ge
 800e554:	461a      	movge	r2, r3
 800e556:	2a00      	cmp	r2, #0
 800e558:	4691      	mov	r9, r2
 800e55a:	dc38      	bgt.n	800e5ce <_printf_float+0x346>
 800e55c:	2300      	movs	r3, #0
 800e55e:	9305      	str	r3, [sp, #20]
 800e560:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e564:	f104 021a 	add.w	r2, r4, #26
 800e568:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e56a:	9905      	ldr	r1, [sp, #20]
 800e56c:	9304      	str	r3, [sp, #16]
 800e56e:	eba3 0309 	sub.w	r3, r3, r9
 800e572:	428b      	cmp	r3, r1
 800e574:	dc33      	bgt.n	800e5de <_printf_float+0x356>
 800e576:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	db3c      	blt.n	800e5f8 <_printf_float+0x370>
 800e57e:	6823      	ldr	r3, [r4, #0]
 800e580:	07da      	lsls	r2, r3, #31
 800e582:	d439      	bmi.n	800e5f8 <_printf_float+0x370>
 800e584:	9a08      	ldr	r2, [sp, #32]
 800e586:	9b04      	ldr	r3, [sp, #16]
 800e588:	9907      	ldr	r1, [sp, #28]
 800e58a:	1ad3      	subs	r3, r2, r3
 800e58c:	eba2 0901 	sub.w	r9, r2, r1
 800e590:	4599      	cmp	r9, r3
 800e592:	bfa8      	it	ge
 800e594:	4699      	movge	r9, r3
 800e596:	f1b9 0f00 	cmp.w	r9, #0
 800e59a:	dc35      	bgt.n	800e608 <_printf_float+0x380>
 800e59c:	f04f 0800 	mov.w	r8, #0
 800e5a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e5a4:	f104 0a1a 	add.w	sl, r4, #26
 800e5a8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e5ac:	1a9b      	subs	r3, r3, r2
 800e5ae:	eba3 0309 	sub.w	r3, r3, r9
 800e5b2:	4543      	cmp	r3, r8
 800e5b4:	f77f af75 	ble.w	800e4a2 <_printf_float+0x21a>
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	4652      	mov	r2, sl
 800e5bc:	4631      	mov	r1, r6
 800e5be:	4628      	mov	r0, r5
 800e5c0:	47b8      	blx	r7
 800e5c2:	3001      	adds	r0, #1
 800e5c4:	f43f aeae 	beq.w	800e324 <_printf_float+0x9c>
 800e5c8:	f108 0801 	add.w	r8, r8, #1
 800e5cc:	e7ec      	b.n	800e5a8 <_printf_float+0x320>
 800e5ce:	4613      	mov	r3, r2
 800e5d0:	4631      	mov	r1, r6
 800e5d2:	4642      	mov	r2, r8
 800e5d4:	4628      	mov	r0, r5
 800e5d6:	47b8      	blx	r7
 800e5d8:	3001      	adds	r0, #1
 800e5da:	d1bf      	bne.n	800e55c <_printf_float+0x2d4>
 800e5dc:	e6a2      	b.n	800e324 <_printf_float+0x9c>
 800e5de:	2301      	movs	r3, #1
 800e5e0:	4631      	mov	r1, r6
 800e5e2:	4628      	mov	r0, r5
 800e5e4:	9204      	str	r2, [sp, #16]
 800e5e6:	47b8      	blx	r7
 800e5e8:	3001      	adds	r0, #1
 800e5ea:	f43f ae9b 	beq.w	800e324 <_printf_float+0x9c>
 800e5ee:	9b05      	ldr	r3, [sp, #20]
 800e5f0:	9a04      	ldr	r2, [sp, #16]
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	9305      	str	r3, [sp, #20]
 800e5f6:	e7b7      	b.n	800e568 <_printf_float+0x2e0>
 800e5f8:	4653      	mov	r3, sl
 800e5fa:	465a      	mov	r2, fp
 800e5fc:	4631      	mov	r1, r6
 800e5fe:	4628      	mov	r0, r5
 800e600:	47b8      	blx	r7
 800e602:	3001      	adds	r0, #1
 800e604:	d1be      	bne.n	800e584 <_printf_float+0x2fc>
 800e606:	e68d      	b.n	800e324 <_printf_float+0x9c>
 800e608:	9a04      	ldr	r2, [sp, #16]
 800e60a:	464b      	mov	r3, r9
 800e60c:	4442      	add	r2, r8
 800e60e:	4631      	mov	r1, r6
 800e610:	4628      	mov	r0, r5
 800e612:	47b8      	blx	r7
 800e614:	3001      	adds	r0, #1
 800e616:	d1c1      	bne.n	800e59c <_printf_float+0x314>
 800e618:	e684      	b.n	800e324 <_printf_float+0x9c>
 800e61a:	9a08      	ldr	r2, [sp, #32]
 800e61c:	2a01      	cmp	r2, #1
 800e61e:	dc01      	bgt.n	800e624 <_printf_float+0x39c>
 800e620:	07db      	lsls	r3, r3, #31
 800e622:	d537      	bpl.n	800e694 <_printf_float+0x40c>
 800e624:	2301      	movs	r3, #1
 800e626:	4642      	mov	r2, r8
 800e628:	4631      	mov	r1, r6
 800e62a:	4628      	mov	r0, r5
 800e62c:	47b8      	blx	r7
 800e62e:	3001      	adds	r0, #1
 800e630:	f43f ae78 	beq.w	800e324 <_printf_float+0x9c>
 800e634:	4653      	mov	r3, sl
 800e636:	465a      	mov	r2, fp
 800e638:	4631      	mov	r1, r6
 800e63a:	4628      	mov	r0, r5
 800e63c:	47b8      	blx	r7
 800e63e:	3001      	adds	r0, #1
 800e640:	f43f ae70 	beq.w	800e324 <_printf_float+0x9c>
 800e644:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e648:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e650:	d01b      	beq.n	800e68a <_printf_float+0x402>
 800e652:	9b08      	ldr	r3, [sp, #32]
 800e654:	f108 0201 	add.w	r2, r8, #1
 800e658:	3b01      	subs	r3, #1
 800e65a:	4631      	mov	r1, r6
 800e65c:	4628      	mov	r0, r5
 800e65e:	47b8      	blx	r7
 800e660:	3001      	adds	r0, #1
 800e662:	d10e      	bne.n	800e682 <_printf_float+0x3fa>
 800e664:	e65e      	b.n	800e324 <_printf_float+0x9c>
 800e666:	2301      	movs	r3, #1
 800e668:	464a      	mov	r2, r9
 800e66a:	4631      	mov	r1, r6
 800e66c:	4628      	mov	r0, r5
 800e66e:	47b8      	blx	r7
 800e670:	3001      	adds	r0, #1
 800e672:	f43f ae57 	beq.w	800e324 <_printf_float+0x9c>
 800e676:	f108 0801 	add.w	r8, r8, #1
 800e67a:	9b08      	ldr	r3, [sp, #32]
 800e67c:	3b01      	subs	r3, #1
 800e67e:	4543      	cmp	r3, r8
 800e680:	dcf1      	bgt.n	800e666 <_printf_float+0x3de>
 800e682:	9b04      	ldr	r3, [sp, #16]
 800e684:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e688:	e6db      	b.n	800e442 <_printf_float+0x1ba>
 800e68a:	f04f 0800 	mov.w	r8, #0
 800e68e:	f104 091a 	add.w	r9, r4, #26
 800e692:	e7f2      	b.n	800e67a <_printf_float+0x3f2>
 800e694:	2301      	movs	r3, #1
 800e696:	4642      	mov	r2, r8
 800e698:	e7df      	b.n	800e65a <_printf_float+0x3d2>
 800e69a:	2301      	movs	r3, #1
 800e69c:	464a      	mov	r2, r9
 800e69e:	4631      	mov	r1, r6
 800e6a0:	4628      	mov	r0, r5
 800e6a2:	47b8      	blx	r7
 800e6a4:	3001      	adds	r0, #1
 800e6a6:	f43f ae3d 	beq.w	800e324 <_printf_float+0x9c>
 800e6aa:	f108 0801 	add.w	r8, r8, #1
 800e6ae:	68e3      	ldr	r3, [r4, #12]
 800e6b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6b2:	1a5b      	subs	r3, r3, r1
 800e6b4:	4543      	cmp	r3, r8
 800e6b6:	dcf0      	bgt.n	800e69a <_printf_float+0x412>
 800e6b8:	e6f7      	b.n	800e4aa <_printf_float+0x222>
 800e6ba:	f04f 0800 	mov.w	r8, #0
 800e6be:	f104 0919 	add.w	r9, r4, #25
 800e6c2:	e7f4      	b.n	800e6ae <_printf_float+0x426>

0800e6c4 <_printf_common>:
 800e6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6c8:	4616      	mov	r6, r2
 800e6ca:	4699      	mov	r9, r3
 800e6cc:	688a      	ldr	r2, [r1, #8]
 800e6ce:	690b      	ldr	r3, [r1, #16]
 800e6d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	bfb8      	it	lt
 800e6d8:	4613      	movlt	r3, r2
 800e6da:	6033      	str	r3, [r6, #0]
 800e6dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e6e0:	4607      	mov	r7, r0
 800e6e2:	460c      	mov	r4, r1
 800e6e4:	b10a      	cbz	r2, 800e6ea <_printf_common+0x26>
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	6033      	str	r3, [r6, #0]
 800e6ea:	6823      	ldr	r3, [r4, #0]
 800e6ec:	0699      	lsls	r1, r3, #26
 800e6ee:	bf42      	ittt	mi
 800e6f0:	6833      	ldrmi	r3, [r6, #0]
 800e6f2:	3302      	addmi	r3, #2
 800e6f4:	6033      	strmi	r3, [r6, #0]
 800e6f6:	6825      	ldr	r5, [r4, #0]
 800e6f8:	f015 0506 	ands.w	r5, r5, #6
 800e6fc:	d106      	bne.n	800e70c <_printf_common+0x48>
 800e6fe:	f104 0a19 	add.w	sl, r4, #25
 800e702:	68e3      	ldr	r3, [r4, #12]
 800e704:	6832      	ldr	r2, [r6, #0]
 800e706:	1a9b      	subs	r3, r3, r2
 800e708:	42ab      	cmp	r3, r5
 800e70a:	dc26      	bgt.n	800e75a <_printf_common+0x96>
 800e70c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e710:	1e13      	subs	r3, r2, #0
 800e712:	6822      	ldr	r2, [r4, #0]
 800e714:	bf18      	it	ne
 800e716:	2301      	movne	r3, #1
 800e718:	0692      	lsls	r2, r2, #26
 800e71a:	d42b      	bmi.n	800e774 <_printf_common+0xb0>
 800e71c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e720:	4649      	mov	r1, r9
 800e722:	4638      	mov	r0, r7
 800e724:	47c0      	blx	r8
 800e726:	3001      	adds	r0, #1
 800e728:	d01e      	beq.n	800e768 <_printf_common+0xa4>
 800e72a:	6823      	ldr	r3, [r4, #0]
 800e72c:	68e5      	ldr	r5, [r4, #12]
 800e72e:	6832      	ldr	r2, [r6, #0]
 800e730:	f003 0306 	and.w	r3, r3, #6
 800e734:	2b04      	cmp	r3, #4
 800e736:	bf08      	it	eq
 800e738:	1aad      	subeq	r5, r5, r2
 800e73a:	68a3      	ldr	r3, [r4, #8]
 800e73c:	6922      	ldr	r2, [r4, #16]
 800e73e:	bf0c      	ite	eq
 800e740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e744:	2500      	movne	r5, #0
 800e746:	4293      	cmp	r3, r2
 800e748:	bfc4      	itt	gt
 800e74a:	1a9b      	subgt	r3, r3, r2
 800e74c:	18ed      	addgt	r5, r5, r3
 800e74e:	2600      	movs	r6, #0
 800e750:	341a      	adds	r4, #26
 800e752:	42b5      	cmp	r5, r6
 800e754:	d11a      	bne.n	800e78c <_printf_common+0xc8>
 800e756:	2000      	movs	r0, #0
 800e758:	e008      	b.n	800e76c <_printf_common+0xa8>
 800e75a:	2301      	movs	r3, #1
 800e75c:	4652      	mov	r2, sl
 800e75e:	4649      	mov	r1, r9
 800e760:	4638      	mov	r0, r7
 800e762:	47c0      	blx	r8
 800e764:	3001      	adds	r0, #1
 800e766:	d103      	bne.n	800e770 <_printf_common+0xac>
 800e768:	f04f 30ff 	mov.w	r0, #4294967295
 800e76c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e770:	3501      	adds	r5, #1
 800e772:	e7c6      	b.n	800e702 <_printf_common+0x3e>
 800e774:	18e1      	adds	r1, r4, r3
 800e776:	1c5a      	adds	r2, r3, #1
 800e778:	2030      	movs	r0, #48	; 0x30
 800e77a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e77e:	4422      	add	r2, r4
 800e780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e788:	3302      	adds	r3, #2
 800e78a:	e7c7      	b.n	800e71c <_printf_common+0x58>
 800e78c:	2301      	movs	r3, #1
 800e78e:	4622      	mov	r2, r4
 800e790:	4649      	mov	r1, r9
 800e792:	4638      	mov	r0, r7
 800e794:	47c0      	blx	r8
 800e796:	3001      	adds	r0, #1
 800e798:	d0e6      	beq.n	800e768 <_printf_common+0xa4>
 800e79a:	3601      	adds	r6, #1
 800e79c:	e7d9      	b.n	800e752 <_printf_common+0x8e>
	...

0800e7a0 <_printf_i>:
 800e7a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7a4:	460c      	mov	r4, r1
 800e7a6:	4691      	mov	r9, r2
 800e7a8:	7e27      	ldrb	r7, [r4, #24]
 800e7aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e7ac:	2f78      	cmp	r7, #120	; 0x78
 800e7ae:	4680      	mov	r8, r0
 800e7b0:	469a      	mov	sl, r3
 800e7b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e7b6:	d807      	bhi.n	800e7c8 <_printf_i+0x28>
 800e7b8:	2f62      	cmp	r7, #98	; 0x62
 800e7ba:	d80a      	bhi.n	800e7d2 <_printf_i+0x32>
 800e7bc:	2f00      	cmp	r7, #0
 800e7be:	f000 80d8 	beq.w	800e972 <_printf_i+0x1d2>
 800e7c2:	2f58      	cmp	r7, #88	; 0x58
 800e7c4:	f000 80a3 	beq.w	800e90e <_printf_i+0x16e>
 800e7c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e7cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e7d0:	e03a      	b.n	800e848 <_printf_i+0xa8>
 800e7d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e7d6:	2b15      	cmp	r3, #21
 800e7d8:	d8f6      	bhi.n	800e7c8 <_printf_i+0x28>
 800e7da:	a001      	add	r0, pc, #4	; (adr r0, 800e7e0 <_printf_i+0x40>)
 800e7dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e7e0:	0800e839 	.word	0x0800e839
 800e7e4:	0800e84d 	.word	0x0800e84d
 800e7e8:	0800e7c9 	.word	0x0800e7c9
 800e7ec:	0800e7c9 	.word	0x0800e7c9
 800e7f0:	0800e7c9 	.word	0x0800e7c9
 800e7f4:	0800e7c9 	.word	0x0800e7c9
 800e7f8:	0800e84d 	.word	0x0800e84d
 800e7fc:	0800e7c9 	.word	0x0800e7c9
 800e800:	0800e7c9 	.word	0x0800e7c9
 800e804:	0800e7c9 	.word	0x0800e7c9
 800e808:	0800e7c9 	.word	0x0800e7c9
 800e80c:	0800e959 	.word	0x0800e959
 800e810:	0800e87d 	.word	0x0800e87d
 800e814:	0800e93b 	.word	0x0800e93b
 800e818:	0800e7c9 	.word	0x0800e7c9
 800e81c:	0800e7c9 	.word	0x0800e7c9
 800e820:	0800e97b 	.word	0x0800e97b
 800e824:	0800e7c9 	.word	0x0800e7c9
 800e828:	0800e87d 	.word	0x0800e87d
 800e82c:	0800e7c9 	.word	0x0800e7c9
 800e830:	0800e7c9 	.word	0x0800e7c9
 800e834:	0800e943 	.word	0x0800e943
 800e838:	680b      	ldr	r3, [r1, #0]
 800e83a:	1d1a      	adds	r2, r3, #4
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	600a      	str	r2, [r1, #0]
 800e840:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e848:	2301      	movs	r3, #1
 800e84a:	e0a3      	b.n	800e994 <_printf_i+0x1f4>
 800e84c:	6825      	ldr	r5, [r4, #0]
 800e84e:	6808      	ldr	r0, [r1, #0]
 800e850:	062e      	lsls	r6, r5, #24
 800e852:	f100 0304 	add.w	r3, r0, #4
 800e856:	d50a      	bpl.n	800e86e <_printf_i+0xce>
 800e858:	6805      	ldr	r5, [r0, #0]
 800e85a:	600b      	str	r3, [r1, #0]
 800e85c:	2d00      	cmp	r5, #0
 800e85e:	da03      	bge.n	800e868 <_printf_i+0xc8>
 800e860:	232d      	movs	r3, #45	; 0x2d
 800e862:	426d      	negs	r5, r5
 800e864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e868:	485e      	ldr	r0, [pc, #376]	; (800e9e4 <_printf_i+0x244>)
 800e86a:	230a      	movs	r3, #10
 800e86c:	e019      	b.n	800e8a2 <_printf_i+0x102>
 800e86e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e872:	6805      	ldr	r5, [r0, #0]
 800e874:	600b      	str	r3, [r1, #0]
 800e876:	bf18      	it	ne
 800e878:	b22d      	sxthne	r5, r5
 800e87a:	e7ef      	b.n	800e85c <_printf_i+0xbc>
 800e87c:	680b      	ldr	r3, [r1, #0]
 800e87e:	6825      	ldr	r5, [r4, #0]
 800e880:	1d18      	adds	r0, r3, #4
 800e882:	6008      	str	r0, [r1, #0]
 800e884:	0628      	lsls	r0, r5, #24
 800e886:	d501      	bpl.n	800e88c <_printf_i+0xec>
 800e888:	681d      	ldr	r5, [r3, #0]
 800e88a:	e002      	b.n	800e892 <_printf_i+0xf2>
 800e88c:	0669      	lsls	r1, r5, #25
 800e88e:	d5fb      	bpl.n	800e888 <_printf_i+0xe8>
 800e890:	881d      	ldrh	r5, [r3, #0]
 800e892:	4854      	ldr	r0, [pc, #336]	; (800e9e4 <_printf_i+0x244>)
 800e894:	2f6f      	cmp	r7, #111	; 0x6f
 800e896:	bf0c      	ite	eq
 800e898:	2308      	moveq	r3, #8
 800e89a:	230a      	movne	r3, #10
 800e89c:	2100      	movs	r1, #0
 800e89e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e8a2:	6866      	ldr	r6, [r4, #4]
 800e8a4:	60a6      	str	r6, [r4, #8]
 800e8a6:	2e00      	cmp	r6, #0
 800e8a8:	bfa2      	ittt	ge
 800e8aa:	6821      	ldrge	r1, [r4, #0]
 800e8ac:	f021 0104 	bicge.w	r1, r1, #4
 800e8b0:	6021      	strge	r1, [r4, #0]
 800e8b2:	b90d      	cbnz	r5, 800e8b8 <_printf_i+0x118>
 800e8b4:	2e00      	cmp	r6, #0
 800e8b6:	d04d      	beq.n	800e954 <_printf_i+0x1b4>
 800e8b8:	4616      	mov	r6, r2
 800e8ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800e8be:	fb03 5711 	mls	r7, r3, r1, r5
 800e8c2:	5dc7      	ldrb	r7, [r0, r7]
 800e8c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e8c8:	462f      	mov	r7, r5
 800e8ca:	42bb      	cmp	r3, r7
 800e8cc:	460d      	mov	r5, r1
 800e8ce:	d9f4      	bls.n	800e8ba <_printf_i+0x11a>
 800e8d0:	2b08      	cmp	r3, #8
 800e8d2:	d10b      	bne.n	800e8ec <_printf_i+0x14c>
 800e8d4:	6823      	ldr	r3, [r4, #0]
 800e8d6:	07df      	lsls	r7, r3, #31
 800e8d8:	d508      	bpl.n	800e8ec <_printf_i+0x14c>
 800e8da:	6923      	ldr	r3, [r4, #16]
 800e8dc:	6861      	ldr	r1, [r4, #4]
 800e8de:	4299      	cmp	r1, r3
 800e8e0:	bfde      	ittt	le
 800e8e2:	2330      	movle	r3, #48	; 0x30
 800e8e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e8e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e8ec:	1b92      	subs	r2, r2, r6
 800e8ee:	6122      	str	r2, [r4, #16]
 800e8f0:	f8cd a000 	str.w	sl, [sp]
 800e8f4:	464b      	mov	r3, r9
 800e8f6:	aa03      	add	r2, sp, #12
 800e8f8:	4621      	mov	r1, r4
 800e8fa:	4640      	mov	r0, r8
 800e8fc:	f7ff fee2 	bl	800e6c4 <_printf_common>
 800e900:	3001      	adds	r0, #1
 800e902:	d14c      	bne.n	800e99e <_printf_i+0x1fe>
 800e904:	f04f 30ff 	mov.w	r0, #4294967295
 800e908:	b004      	add	sp, #16
 800e90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e90e:	4835      	ldr	r0, [pc, #212]	; (800e9e4 <_printf_i+0x244>)
 800e910:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e914:	6823      	ldr	r3, [r4, #0]
 800e916:	680e      	ldr	r6, [r1, #0]
 800e918:	061f      	lsls	r7, r3, #24
 800e91a:	f856 5b04 	ldr.w	r5, [r6], #4
 800e91e:	600e      	str	r6, [r1, #0]
 800e920:	d514      	bpl.n	800e94c <_printf_i+0x1ac>
 800e922:	07d9      	lsls	r1, r3, #31
 800e924:	bf44      	itt	mi
 800e926:	f043 0320 	orrmi.w	r3, r3, #32
 800e92a:	6023      	strmi	r3, [r4, #0]
 800e92c:	b91d      	cbnz	r5, 800e936 <_printf_i+0x196>
 800e92e:	6823      	ldr	r3, [r4, #0]
 800e930:	f023 0320 	bic.w	r3, r3, #32
 800e934:	6023      	str	r3, [r4, #0]
 800e936:	2310      	movs	r3, #16
 800e938:	e7b0      	b.n	800e89c <_printf_i+0xfc>
 800e93a:	6823      	ldr	r3, [r4, #0]
 800e93c:	f043 0320 	orr.w	r3, r3, #32
 800e940:	6023      	str	r3, [r4, #0]
 800e942:	2378      	movs	r3, #120	; 0x78
 800e944:	4828      	ldr	r0, [pc, #160]	; (800e9e8 <_printf_i+0x248>)
 800e946:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e94a:	e7e3      	b.n	800e914 <_printf_i+0x174>
 800e94c:	065e      	lsls	r6, r3, #25
 800e94e:	bf48      	it	mi
 800e950:	b2ad      	uxthmi	r5, r5
 800e952:	e7e6      	b.n	800e922 <_printf_i+0x182>
 800e954:	4616      	mov	r6, r2
 800e956:	e7bb      	b.n	800e8d0 <_printf_i+0x130>
 800e958:	680b      	ldr	r3, [r1, #0]
 800e95a:	6826      	ldr	r6, [r4, #0]
 800e95c:	6960      	ldr	r0, [r4, #20]
 800e95e:	1d1d      	adds	r5, r3, #4
 800e960:	600d      	str	r5, [r1, #0]
 800e962:	0635      	lsls	r5, r6, #24
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	d501      	bpl.n	800e96c <_printf_i+0x1cc>
 800e968:	6018      	str	r0, [r3, #0]
 800e96a:	e002      	b.n	800e972 <_printf_i+0x1d2>
 800e96c:	0671      	lsls	r1, r6, #25
 800e96e:	d5fb      	bpl.n	800e968 <_printf_i+0x1c8>
 800e970:	8018      	strh	r0, [r3, #0]
 800e972:	2300      	movs	r3, #0
 800e974:	6123      	str	r3, [r4, #16]
 800e976:	4616      	mov	r6, r2
 800e978:	e7ba      	b.n	800e8f0 <_printf_i+0x150>
 800e97a:	680b      	ldr	r3, [r1, #0]
 800e97c:	1d1a      	adds	r2, r3, #4
 800e97e:	600a      	str	r2, [r1, #0]
 800e980:	681e      	ldr	r6, [r3, #0]
 800e982:	6862      	ldr	r2, [r4, #4]
 800e984:	2100      	movs	r1, #0
 800e986:	4630      	mov	r0, r6
 800e988:	f7f1 fcb2 	bl	80002f0 <memchr>
 800e98c:	b108      	cbz	r0, 800e992 <_printf_i+0x1f2>
 800e98e:	1b80      	subs	r0, r0, r6
 800e990:	6060      	str	r0, [r4, #4]
 800e992:	6863      	ldr	r3, [r4, #4]
 800e994:	6123      	str	r3, [r4, #16]
 800e996:	2300      	movs	r3, #0
 800e998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e99c:	e7a8      	b.n	800e8f0 <_printf_i+0x150>
 800e99e:	6923      	ldr	r3, [r4, #16]
 800e9a0:	4632      	mov	r2, r6
 800e9a2:	4649      	mov	r1, r9
 800e9a4:	4640      	mov	r0, r8
 800e9a6:	47d0      	blx	sl
 800e9a8:	3001      	adds	r0, #1
 800e9aa:	d0ab      	beq.n	800e904 <_printf_i+0x164>
 800e9ac:	6823      	ldr	r3, [r4, #0]
 800e9ae:	079b      	lsls	r3, r3, #30
 800e9b0:	d413      	bmi.n	800e9da <_printf_i+0x23a>
 800e9b2:	68e0      	ldr	r0, [r4, #12]
 800e9b4:	9b03      	ldr	r3, [sp, #12]
 800e9b6:	4298      	cmp	r0, r3
 800e9b8:	bfb8      	it	lt
 800e9ba:	4618      	movlt	r0, r3
 800e9bc:	e7a4      	b.n	800e908 <_printf_i+0x168>
 800e9be:	2301      	movs	r3, #1
 800e9c0:	4632      	mov	r2, r6
 800e9c2:	4649      	mov	r1, r9
 800e9c4:	4640      	mov	r0, r8
 800e9c6:	47d0      	blx	sl
 800e9c8:	3001      	adds	r0, #1
 800e9ca:	d09b      	beq.n	800e904 <_printf_i+0x164>
 800e9cc:	3501      	adds	r5, #1
 800e9ce:	68e3      	ldr	r3, [r4, #12]
 800e9d0:	9903      	ldr	r1, [sp, #12]
 800e9d2:	1a5b      	subs	r3, r3, r1
 800e9d4:	42ab      	cmp	r3, r5
 800e9d6:	dcf2      	bgt.n	800e9be <_printf_i+0x21e>
 800e9d8:	e7eb      	b.n	800e9b2 <_printf_i+0x212>
 800e9da:	2500      	movs	r5, #0
 800e9dc:	f104 0619 	add.w	r6, r4, #25
 800e9e0:	e7f5      	b.n	800e9ce <_printf_i+0x22e>
 800e9e2:	bf00      	nop
 800e9e4:	0801231e 	.word	0x0801231e
 800e9e8:	0801232f 	.word	0x0801232f

0800e9ec <quorem>:
 800e9ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f0:	6903      	ldr	r3, [r0, #16]
 800e9f2:	690c      	ldr	r4, [r1, #16]
 800e9f4:	42a3      	cmp	r3, r4
 800e9f6:	4607      	mov	r7, r0
 800e9f8:	f2c0 8081 	blt.w	800eafe <quorem+0x112>
 800e9fc:	3c01      	subs	r4, #1
 800e9fe:	f101 0814 	add.w	r8, r1, #20
 800ea02:	f100 0514 	add.w	r5, r0, #20
 800ea06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea0a:	9301      	str	r3, [sp, #4]
 800ea0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ea10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea14:	3301      	adds	r3, #1
 800ea16:	429a      	cmp	r2, r3
 800ea18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ea1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ea20:	fbb2 f6f3 	udiv	r6, r2, r3
 800ea24:	d331      	bcc.n	800ea8a <quorem+0x9e>
 800ea26:	f04f 0e00 	mov.w	lr, #0
 800ea2a:	4640      	mov	r0, r8
 800ea2c:	46ac      	mov	ip, r5
 800ea2e:	46f2      	mov	sl, lr
 800ea30:	f850 2b04 	ldr.w	r2, [r0], #4
 800ea34:	b293      	uxth	r3, r2
 800ea36:	fb06 e303 	mla	r3, r6, r3, lr
 800ea3a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ea3e:	b29b      	uxth	r3, r3
 800ea40:	ebaa 0303 	sub.w	r3, sl, r3
 800ea44:	0c12      	lsrs	r2, r2, #16
 800ea46:	f8dc a000 	ldr.w	sl, [ip]
 800ea4a:	fb06 e202 	mla	r2, r6, r2, lr
 800ea4e:	fa13 f38a 	uxtah	r3, r3, sl
 800ea52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ea56:	fa1f fa82 	uxth.w	sl, r2
 800ea5a:	f8dc 2000 	ldr.w	r2, [ip]
 800ea5e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ea62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea6c:	4581      	cmp	r9, r0
 800ea6e:	f84c 3b04 	str.w	r3, [ip], #4
 800ea72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ea76:	d2db      	bcs.n	800ea30 <quorem+0x44>
 800ea78:	f855 300b 	ldr.w	r3, [r5, fp]
 800ea7c:	b92b      	cbnz	r3, 800ea8a <quorem+0x9e>
 800ea7e:	9b01      	ldr	r3, [sp, #4]
 800ea80:	3b04      	subs	r3, #4
 800ea82:	429d      	cmp	r5, r3
 800ea84:	461a      	mov	r2, r3
 800ea86:	d32e      	bcc.n	800eae6 <quorem+0xfa>
 800ea88:	613c      	str	r4, [r7, #16]
 800ea8a:	4638      	mov	r0, r7
 800ea8c:	f001 f848 	bl	800fb20 <__mcmp>
 800ea90:	2800      	cmp	r0, #0
 800ea92:	db24      	blt.n	800eade <quorem+0xf2>
 800ea94:	3601      	adds	r6, #1
 800ea96:	4628      	mov	r0, r5
 800ea98:	f04f 0c00 	mov.w	ip, #0
 800ea9c:	f858 2b04 	ldr.w	r2, [r8], #4
 800eaa0:	f8d0 e000 	ldr.w	lr, [r0]
 800eaa4:	b293      	uxth	r3, r2
 800eaa6:	ebac 0303 	sub.w	r3, ip, r3
 800eaaa:	0c12      	lsrs	r2, r2, #16
 800eaac:	fa13 f38e 	uxtah	r3, r3, lr
 800eab0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eab4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eabe:	45c1      	cmp	r9, r8
 800eac0:	f840 3b04 	str.w	r3, [r0], #4
 800eac4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eac8:	d2e8      	bcs.n	800ea9c <quorem+0xb0>
 800eaca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eace:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ead2:	b922      	cbnz	r2, 800eade <quorem+0xf2>
 800ead4:	3b04      	subs	r3, #4
 800ead6:	429d      	cmp	r5, r3
 800ead8:	461a      	mov	r2, r3
 800eada:	d30a      	bcc.n	800eaf2 <quorem+0x106>
 800eadc:	613c      	str	r4, [r7, #16]
 800eade:	4630      	mov	r0, r6
 800eae0:	b003      	add	sp, #12
 800eae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eae6:	6812      	ldr	r2, [r2, #0]
 800eae8:	3b04      	subs	r3, #4
 800eaea:	2a00      	cmp	r2, #0
 800eaec:	d1cc      	bne.n	800ea88 <quorem+0x9c>
 800eaee:	3c01      	subs	r4, #1
 800eaf0:	e7c7      	b.n	800ea82 <quorem+0x96>
 800eaf2:	6812      	ldr	r2, [r2, #0]
 800eaf4:	3b04      	subs	r3, #4
 800eaf6:	2a00      	cmp	r2, #0
 800eaf8:	d1f0      	bne.n	800eadc <quorem+0xf0>
 800eafa:	3c01      	subs	r4, #1
 800eafc:	e7eb      	b.n	800ead6 <quorem+0xea>
 800eafe:	2000      	movs	r0, #0
 800eb00:	e7ee      	b.n	800eae0 <quorem+0xf4>
 800eb02:	0000      	movs	r0, r0
 800eb04:	0000      	movs	r0, r0
	...

0800eb08 <_dtoa_r>:
 800eb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb0c:	ec59 8b10 	vmov	r8, r9, d0
 800eb10:	b095      	sub	sp, #84	; 0x54
 800eb12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eb14:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800eb16:	9107      	str	r1, [sp, #28]
 800eb18:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800eb1c:	4606      	mov	r6, r0
 800eb1e:	9209      	str	r2, [sp, #36]	; 0x24
 800eb20:	9310      	str	r3, [sp, #64]	; 0x40
 800eb22:	b975      	cbnz	r5, 800eb42 <_dtoa_r+0x3a>
 800eb24:	2010      	movs	r0, #16
 800eb26:	f000 fd75 	bl	800f614 <malloc>
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	6270      	str	r0, [r6, #36]	; 0x24
 800eb2e:	b920      	cbnz	r0, 800eb3a <_dtoa_r+0x32>
 800eb30:	4bab      	ldr	r3, [pc, #684]	; (800ede0 <_dtoa_r+0x2d8>)
 800eb32:	21ea      	movs	r1, #234	; 0xea
 800eb34:	48ab      	ldr	r0, [pc, #684]	; (800ede4 <_dtoa_r+0x2dc>)
 800eb36:	f001 f9bd 	bl	800feb4 <__assert_func>
 800eb3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eb3e:	6005      	str	r5, [r0, #0]
 800eb40:	60c5      	str	r5, [r0, #12]
 800eb42:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800eb44:	6819      	ldr	r1, [r3, #0]
 800eb46:	b151      	cbz	r1, 800eb5e <_dtoa_r+0x56>
 800eb48:	685a      	ldr	r2, [r3, #4]
 800eb4a:	604a      	str	r2, [r1, #4]
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	4093      	lsls	r3, r2
 800eb50:	608b      	str	r3, [r1, #8]
 800eb52:	4630      	mov	r0, r6
 800eb54:	f000 fda6 	bl	800f6a4 <_Bfree>
 800eb58:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	601a      	str	r2, [r3, #0]
 800eb5e:	f1b9 0300 	subs.w	r3, r9, #0
 800eb62:	bfbb      	ittet	lt
 800eb64:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eb68:	9303      	strlt	r3, [sp, #12]
 800eb6a:	2300      	movge	r3, #0
 800eb6c:	2201      	movlt	r2, #1
 800eb6e:	bfac      	ite	ge
 800eb70:	6023      	strge	r3, [r4, #0]
 800eb72:	6022      	strlt	r2, [r4, #0]
 800eb74:	4b9c      	ldr	r3, [pc, #624]	; (800ede8 <_dtoa_r+0x2e0>)
 800eb76:	9c03      	ldr	r4, [sp, #12]
 800eb78:	43a3      	bics	r3, r4
 800eb7a:	d11a      	bne.n	800ebb2 <_dtoa_r+0xaa>
 800eb7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eb7e:	f242 730f 	movw	r3, #9999	; 0x270f
 800eb82:	6013      	str	r3, [r2, #0]
 800eb84:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800eb88:	ea53 0308 	orrs.w	r3, r3, r8
 800eb8c:	f000 8512 	beq.w	800f5b4 <_dtoa_r+0xaac>
 800eb90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eb92:	b953      	cbnz	r3, 800ebaa <_dtoa_r+0xa2>
 800eb94:	4b95      	ldr	r3, [pc, #596]	; (800edec <_dtoa_r+0x2e4>)
 800eb96:	e01f      	b.n	800ebd8 <_dtoa_r+0xd0>
 800eb98:	4b95      	ldr	r3, [pc, #596]	; (800edf0 <_dtoa_r+0x2e8>)
 800eb9a:	9300      	str	r3, [sp, #0]
 800eb9c:	3308      	adds	r3, #8
 800eb9e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800eba0:	6013      	str	r3, [r2, #0]
 800eba2:	9800      	ldr	r0, [sp, #0]
 800eba4:	b015      	add	sp, #84	; 0x54
 800eba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebaa:	4b90      	ldr	r3, [pc, #576]	; (800edec <_dtoa_r+0x2e4>)
 800ebac:	9300      	str	r3, [sp, #0]
 800ebae:	3303      	adds	r3, #3
 800ebb0:	e7f5      	b.n	800eb9e <_dtoa_r+0x96>
 800ebb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ebb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ebba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebbe:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ebc2:	d10b      	bne.n	800ebdc <_dtoa_r+0xd4>
 800ebc4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	6013      	str	r3, [r2, #0]
 800ebca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	f000 84ee 	beq.w	800f5ae <_dtoa_r+0xaa6>
 800ebd2:	4888      	ldr	r0, [pc, #544]	; (800edf4 <_dtoa_r+0x2ec>)
 800ebd4:	6018      	str	r0, [r3, #0]
 800ebd6:	1e43      	subs	r3, r0, #1
 800ebd8:	9300      	str	r3, [sp, #0]
 800ebda:	e7e2      	b.n	800eba2 <_dtoa_r+0x9a>
 800ebdc:	a913      	add	r1, sp, #76	; 0x4c
 800ebde:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ebe2:	aa12      	add	r2, sp, #72	; 0x48
 800ebe4:	4630      	mov	r0, r6
 800ebe6:	f001 f83f 	bl	800fc68 <__d2b>
 800ebea:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800ebee:	4605      	mov	r5, r0
 800ebf0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ebf2:	2900      	cmp	r1, #0
 800ebf4:	d047      	beq.n	800ec86 <_dtoa_r+0x17e>
 800ebf6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ebf8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ebfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ec00:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800ec04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ec08:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ec0c:	2400      	movs	r4, #0
 800ec0e:	ec43 2b16 	vmov	d6, r2, r3
 800ec12:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800ec16:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800edc8 <_dtoa_r+0x2c0>
 800ec1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ec1e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800edd0 <_dtoa_r+0x2c8>
 800ec22:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ec26:	eeb0 7b46 	vmov.f64	d7, d6
 800ec2a:	ee06 1a90 	vmov	s13, r1
 800ec2e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800ec32:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800edd8 <_dtoa_r+0x2d0>
 800ec36:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ec3a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ec3e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ec42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec46:	ee16 ba90 	vmov	fp, s13
 800ec4a:	9411      	str	r4, [sp, #68]	; 0x44
 800ec4c:	d508      	bpl.n	800ec60 <_dtoa_r+0x158>
 800ec4e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ec52:	eeb4 6b47 	vcmp.f64	d6, d7
 800ec56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec5a:	bf18      	it	ne
 800ec5c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ec60:	f1bb 0f16 	cmp.w	fp, #22
 800ec64:	d832      	bhi.n	800eccc <_dtoa_r+0x1c4>
 800ec66:	4b64      	ldr	r3, [pc, #400]	; (800edf8 <_dtoa_r+0x2f0>)
 800ec68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ec6c:	ed93 7b00 	vldr	d7, [r3]
 800ec70:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800ec74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ec78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec7c:	d501      	bpl.n	800ec82 <_dtoa_r+0x17a>
 800ec7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ec82:	2300      	movs	r3, #0
 800ec84:	e023      	b.n	800ecce <_dtoa_r+0x1c6>
 800ec86:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ec88:	4401      	add	r1, r0
 800ec8a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800ec8e:	2b20      	cmp	r3, #32
 800ec90:	bfc3      	ittte	gt
 800ec92:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ec96:	fa04 f303 	lslgt.w	r3, r4, r3
 800ec9a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800ec9e:	f1c3 0320 	rsble	r3, r3, #32
 800eca2:	bfc6      	itte	gt
 800eca4:	fa28 f804 	lsrgt.w	r8, r8, r4
 800eca8:	ea43 0308 	orrgt.w	r3, r3, r8
 800ecac:	fa08 f303 	lslle.w	r3, r8, r3
 800ecb0:	ee07 3a90 	vmov	s15, r3
 800ecb4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ecb8:	3901      	subs	r1, #1
 800ecba:	ed8d 7b00 	vstr	d7, [sp]
 800ecbe:	9c01      	ldr	r4, [sp, #4]
 800ecc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecc4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800ecc8:	2401      	movs	r4, #1
 800ecca:	e7a0      	b.n	800ec0e <_dtoa_r+0x106>
 800eccc:	2301      	movs	r3, #1
 800ecce:	930f      	str	r3, [sp, #60]	; 0x3c
 800ecd0:	1a43      	subs	r3, r0, r1
 800ecd2:	1e5a      	subs	r2, r3, #1
 800ecd4:	bf45      	ittet	mi
 800ecd6:	f1c3 0301 	rsbmi	r3, r3, #1
 800ecda:	9305      	strmi	r3, [sp, #20]
 800ecdc:	2300      	movpl	r3, #0
 800ecde:	2300      	movmi	r3, #0
 800ece0:	9206      	str	r2, [sp, #24]
 800ece2:	bf54      	ite	pl
 800ece4:	9305      	strpl	r3, [sp, #20]
 800ece6:	9306      	strmi	r3, [sp, #24]
 800ece8:	f1bb 0f00 	cmp.w	fp, #0
 800ecec:	db18      	blt.n	800ed20 <_dtoa_r+0x218>
 800ecee:	9b06      	ldr	r3, [sp, #24]
 800ecf0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800ecf4:	445b      	add	r3, fp
 800ecf6:	9306      	str	r3, [sp, #24]
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	9a07      	ldr	r2, [sp, #28]
 800ecfc:	2a09      	cmp	r2, #9
 800ecfe:	d849      	bhi.n	800ed94 <_dtoa_r+0x28c>
 800ed00:	2a05      	cmp	r2, #5
 800ed02:	bfc4      	itt	gt
 800ed04:	3a04      	subgt	r2, #4
 800ed06:	9207      	strgt	r2, [sp, #28]
 800ed08:	9a07      	ldr	r2, [sp, #28]
 800ed0a:	f1a2 0202 	sub.w	r2, r2, #2
 800ed0e:	bfcc      	ite	gt
 800ed10:	2400      	movgt	r4, #0
 800ed12:	2401      	movle	r4, #1
 800ed14:	2a03      	cmp	r2, #3
 800ed16:	d848      	bhi.n	800edaa <_dtoa_r+0x2a2>
 800ed18:	e8df f002 	tbb	[pc, r2]
 800ed1c:	3a2c2e0b 	.word	0x3a2c2e0b
 800ed20:	9b05      	ldr	r3, [sp, #20]
 800ed22:	2200      	movs	r2, #0
 800ed24:	eba3 030b 	sub.w	r3, r3, fp
 800ed28:	9305      	str	r3, [sp, #20]
 800ed2a:	920e      	str	r2, [sp, #56]	; 0x38
 800ed2c:	f1cb 0300 	rsb	r3, fp, #0
 800ed30:	e7e3      	b.n	800ecfa <_dtoa_r+0x1f2>
 800ed32:	2200      	movs	r2, #0
 800ed34:	9208      	str	r2, [sp, #32]
 800ed36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed38:	2a00      	cmp	r2, #0
 800ed3a:	dc39      	bgt.n	800edb0 <_dtoa_r+0x2a8>
 800ed3c:	f04f 0a01 	mov.w	sl, #1
 800ed40:	46d1      	mov	r9, sl
 800ed42:	4652      	mov	r2, sl
 800ed44:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ed48:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800ed4a:	2100      	movs	r1, #0
 800ed4c:	6079      	str	r1, [r7, #4]
 800ed4e:	2004      	movs	r0, #4
 800ed50:	f100 0c14 	add.w	ip, r0, #20
 800ed54:	4594      	cmp	ip, r2
 800ed56:	6879      	ldr	r1, [r7, #4]
 800ed58:	d92f      	bls.n	800edba <_dtoa_r+0x2b2>
 800ed5a:	4630      	mov	r0, r6
 800ed5c:	930c      	str	r3, [sp, #48]	; 0x30
 800ed5e:	f000 fc61 	bl	800f624 <_Balloc>
 800ed62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed64:	9000      	str	r0, [sp, #0]
 800ed66:	4602      	mov	r2, r0
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	d149      	bne.n	800ee00 <_dtoa_r+0x2f8>
 800ed6c:	4b23      	ldr	r3, [pc, #140]	; (800edfc <_dtoa_r+0x2f4>)
 800ed6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ed72:	e6df      	b.n	800eb34 <_dtoa_r+0x2c>
 800ed74:	2201      	movs	r2, #1
 800ed76:	e7dd      	b.n	800ed34 <_dtoa_r+0x22c>
 800ed78:	2200      	movs	r2, #0
 800ed7a:	9208      	str	r2, [sp, #32]
 800ed7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed7e:	eb0b 0a02 	add.w	sl, fp, r2
 800ed82:	f10a 0901 	add.w	r9, sl, #1
 800ed86:	464a      	mov	r2, r9
 800ed88:	2a01      	cmp	r2, #1
 800ed8a:	bfb8      	it	lt
 800ed8c:	2201      	movlt	r2, #1
 800ed8e:	e7db      	b.n	800ed48 <_dtoa_r+0x240>
 800ed90:	2201      	movs	r2, #1
 800ed92:	e7f2      	b.n	800ed7a <_dtoa_r+0x272>
 800ed94:	2401      	movs	r4, #1
 800ed96:	2200      	movs	r2, #0
 800ed98:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ed9c:	f04f 3aff 	mov.w	sl, #4294967295
 800eda0:	2100      	movs	r1, #0
 800eda2:	46d1      	mov	r9, sl
 800eda4:	2212      	movs	r2, #18
 800eda6:	9109      	str	r1, [sp, #36]	; 0x24
 800eda8:	e7ce      	b.n	800ed48 <_dtoa_r+0x240>
 800edaa:	2201      	movs	r2, #1
 800edac:	9208      	str	r2, [sp, #32]
 800edae:	e7f5      	b.n	800ed9c <_dtoa_r+0x294>
 800edb0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800edb4:	46d1      	mov	r9, sl
 800edb6:	4652      	mov	r2, sl
 800edb8:	e7c6      	b.n	800ed48 <_dtoa_r+0x240>
 800edba:	3101      	adds	r1, #1
 800edbc:	6079      	str	r1, [r7, #4]
 800edbe:	0040      	lsls	r0, r0, #1
 800edc0:	e7c6      	b.n	800ed50 <_dtoa_r+0x248>
 800edc2:	bf00      	nop
 800edc4:	f3af 8000 	nop.w
 800edc8:	636f4361 	.word	0x636f4361
 800edcc:	3fd287a7 	.word	0x3fd287a7
 800edd0:	8b60c8b3 	.word	0x8b60c8b3
 800edd4:	3fc68a28 	.word	0x3fc68a28
 800edd8:	509f79fb 	.word	0x509f79fb
 800eddc:	3fd34413 	.word	0x3fd34413
 800ede0:	0801234d 	.word	0x0801234d
 800ede4:	08012364 	.word	0x08012364
 800ede8:	7ff00000 	.word	0x7ff00000
 800edec:	08012349 	.word	0x08012349
 800edf0:	08012340 	.word	0x08012340
 800edf4:	0801231d 	.word	0x0801231d
 800edf8:	08012460 	.word	0x08012460
 800edfc:	080123c3 	.word	0x080123c3
 800ee00:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800ee02:	9900      	ldr	r1, [sp, #0]
 800ee04:	6011      	str	r1, [r2, #0]
 800ee06:	f1b9 0f0e 	cmp.w	r9, #14
 800ee0a:	d872      	bhi.n	800eef2 <_dtoa_r+0x3ea>
 800ee0c:	2c00      	cmp	r4, #0
 800ee0e:	d070      	beq.n	800eef2 <_dtoa_r+0x3ea>
 800ee10:	f1bb 0f00 	cmp.w	fp, #0
 800ee14:	f340 80a6 	ble.w	800ef64 <_dtoa_r+0x45c>
 800ee18:	49ca      	ldr	r1, [pc, #808]	; (800f144 <_dtoa_r+0x63c>)
 800ee1a:	f00b 020f 	and.w	r2, fp, #15
 800ee1e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ee22:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ee26:	ed92 7b00 	vldr	d7, [r2]
 800ee2a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800ee2e:	f000 808d 	beq.w	800ef4c <_dtoa_r+0x444>
 800ee32:	4ac5      	ldr	r2, [pc, #788]	; (800f148 <_dtoa_r+0x640>)
 800ee34:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800ee38:	ed92 6b08 	vldr	d6, [r2, #32]
 800ee3c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800ee40:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ee44:	f001 010f 	and.w	r1, r1, #15
 800ee48:	2203      	movs	r2, #3
 800ee4a:	48bf      	ldr	r0, [pc, #764]	; (800f148 <_dtoa_r+0x640>)
 800ee4c:	2900      	cmp	r1, #0
 800ee4e:	d17f      	bne.n	800ef50 <_dtoa_r+0x448>
 800ee50:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ee54:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ee58:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ee5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ee5e:	2900      	cmp	r1, #0
 800ee60:	f000 80b2 	beq.w	800efc8 <_dtoa_r+0x4c0>
 800ee64:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ee68:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ee6c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ee70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee74:	f140 80a8 	bpl.w	800efc8 <_dtoa_r+0x4c0>
 800ee78:	f1b9 0f00 	cmp.w	r9, #0
 800ee7c:	f000 80a4 	beq.w	800efc8 <_dtoa_r+0x4c0>
 800ee80:	f1ba 0f00 	cmp.w	sl, #0
 800ee84:	dd31      	ble.n	800eeea <_dtoa_r+0x3e2>
 800ee86:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ee8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ee8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ee92:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ee96:	3201      	adds	r2, #1
 800ee98:	4650      	mov	r0, sl
 800ee9a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ee9e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800eea2:	ee07 2a90 	vmov	s15, r2
 800eea6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800eeaa:	eea7 5b06 	vfma.f64	d5, d7, d6
 800eeae:	ed8d 5b02 	vstr	d5, [sp, #8]
 800eeb2:	9c03      	ldr	r4, [sp, #12]
 800eeb4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800eeb8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800eebc:	2800      	cmp	r0, #0
 800eebe:	f040 8086 	bne.w	800efce <_dtoa_r+0x4c6>
 800eec2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800eec6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800eeca:	ec42 1b17 	vmov	d7, r1, r2
 800eece:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800eed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eed6:	f300 8272 	bgt.w	800f3be <_dtoa_r+0x8b6>
 800eeda:	eeb1 7b47 	vneg.f64	d7, d7
 800eede:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800eee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eee6:	f100 8267 	bmi.w	800f3b8 <_dtoa_r+0x8b0>
 800eeea:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800eeee:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800eef2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800eef4:	2a00      	cmp	r2, #0
 800eef6:	f2c0 8129 	blt.w	800f14c <_dtoa_r+0x644>
 800eefa:	f1bb 0f0e 	cmp.w	fp, #14
 800eefe:	f300 8125 	bgt.w	800f14c <_dtoa_r+0x644>
 800ef02:	4b90      	ldr	r3, [pc, #576]	; (800f144 <_dtoa_r+0x63c>)
 800ef04:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ef08:	ed93 6b00 	vldr	d6, [r3]
 800ef0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	f280 80c3 	bge.w	800f09a <_dtoa_r+0x592>
 800ef14:	f1b9 0f00 	cmp.w	r9, #0
 800ef18:	f300 80bf 	bgt.w	800f09a <_dtoa_r+0x592>
 800ef1c:	f040 824c 	bne.w	800f3b8 <_dtoa_r+0x8b0>
 800ef20:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ef24:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ef28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ef30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef34:	464c      	mov	r4, r9
 800ef36:	464f      	mov	r7, r9
 800ef38:	f280 8222 	bge.w	800f380 <_dtoa_r+0x878>
 800ef3c:	f8dd 8000 	ldr.w	r8, [sp]
 800ef40:	2331      	movs	r3, #49	; 0x31
 800ef42:	f808 3b01 	strb.w	r3, [r8], #1
 800ef46:	f10b 0b01 	add.w	fp, fp, #1
 800ef4a:	e21e      	b.n	800f38a <_dtoa_r+0x882>
 800ef4c:	2202      	movs	r2, #2
 800ef4e:	e77c      	b.n	800ee4a <_dtoa_r+0x342>
 800ef50:	07cc      	lsls	r4, r1, #31
 800ef52:	d504      	bpl.n	800ef5e <_dtoa_r+0x456>
 800ef54:	ed90 6b00 	vldr	d6, [r0]
 800ef58:	3201      	adds	r2, #1
 800ef5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ef5e:	1049      	asrs	r1, r1, #1
 800ef60:	3008      	adds	r0, #8
 800ef62:	e773      	b.n	800ee4c <_dtoa_r+0x344>
 800ef64:	d02e      	beq.n	800efc4 <_dtoa_r+0x4bc>
 800ef66:	f1cb 0100 	rsb	r1, fp, #0
 800ef6a:	4a76      	ldr	r2, [pc, #472]	; (800f144 <_dtoa_r+0x63c>)
 800ef6c:	f001 000f 	and.w	r0, r1, #15
 800ef70:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ef74:	ed92 7b00 	vldr	d7, [r2]
 800ef78:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800ef7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ef80:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ef84:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800ef88:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800ef8c:	486e      	ldr	r0, [pc, #440]	; (800f148 <_dtoa_r+0x640>)
 800ef8e:	1109      	asrs	r1, r1, #4
 800ef90:	2400      	movs	r4, #0
 800ef92:	2202      	movs	r2, #2
 800ef94:	b939      	cbnz	r1, 800efa6 <_dtoa_r+0x49e>
 800ef96:	2c00      	cmp	r4, #0
 800ef98:	f43f af60 	beq.w	800ee5c <_dtoa_r+0x354>
 800ef9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800efa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efa4:	e75a      	b.n	800ee5c <_dtoa_r+0x354>
 800efa6:	07cf      	lsls	r7, r1, #31
 800efa8:	d509      	bpl.n	800efbe <_dtoa_r+0x4b6>
 800efaa:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800efae:	ed90 7b00 	vldr	d7, [r0]
 800efb2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800efb6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800efba:	3201      	adds	r2, #1
 800efbc:	2401      	movs	r4, #1
 800efbe:	1049      	asrs	r1, r1, #1
 800efc0:	3008      	adds	r0, #8
 800efc2:	e7e7      	b.n	800ef94 <_dtoa_r+0x48c>
 800efc4:	2202      	movs	r2, #2
 800efc6:	e749      	b.n	800ee5c <_dtoa_r+0x354>
 800efc8:	465f      	mov	r7, fp
 800efca:	4648      	mov	r0, r9
 800efcc:	e765      	b.n	800ee9a <_dtoa_r+0x392>
 800efce:	ec42 1b17 	vmov	d7, r1, r2
 800efd2:	4a5c      	ldr	r2, [pc, #368]	; (800f144 <_dtoa_r+0x63c>)
 800efd4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800efd8:	ed12 4b02 	vldr	d4, [r2, #-8]
 800efdc:	9a00      	ldr	r2, [sp, #0]
 800efde:	1814      	adds	r4, r2, r0
 800efe0:	9a08      	ldr	r2, [sp, #32]
 800efe2:	b352      	cbz	r2, 800f03a <_dtoa_r+0x532>
 800efe4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800efe8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800efec:	f8dd 8000 	ldr.w	r8, [sp]
 800eff0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800eff4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800eff8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800effc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f000:	ee14 2a90 	vmov	r2, s9
 800f004:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f008:	3230      	adds	r2, #48	; 0x30
 800f00a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f00e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f016:	f808 2b01 	strb.w	r2, [r8], #1
 800f01a:	d439      	bmi.n	800f090 <_dtoa_r+0x588>
 800f01c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f020:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f028:	d472      	bmi.n	800f110 <_dtoa_r+0x608>
 800f02a:	45a0      	cmp	r8, r4
 800f02c:	f43f af5d 	beq.w	800eeea <_dtoa_r+0x3e2>
 800f030:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f034:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f038:	e7e0      	b.n	800effc <_dtoa_r+0x4f4>
 800f03a:	f8dd 8000 	ldr.w	r8, [sp]
 800f03e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f042:	4621      	mov	r1, r4
 800f044:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f048:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f04c:	ee14 2a90 	vmov	r2, s9
 800f050:	3230      	adds	r2, #48	; 0x30
 800f052:	f808 2b01 	strb.w	r2, [r8], #1
 800f056:	45a0      	cmp	r8, r4
 800f058:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f05c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f060:	d118      	bne.n	800f094 <_dtoa_r+0x58c>
 800f062:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f066:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f06a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f072:	dc4d      	bgt.n	800f110 <_dtoa_r+0x608>
 800f074:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f078:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f07c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f080:	f57f af33 	bpl.w	800eeea <_dtoa_r+0x3e2>
 800f084:	4688      	mov	r8, r1
 800f086:	3901      	subs	r1, #1
 800f088:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f08c:	2b30      	cmp	r3, #48	; 0x30
 800f08e:	d0f9      	beq.n	800f084 <_dtoa_r+0x57c>
 800f090:	46bb      	mov	fp, r7
 800f092:	e02a      	b.n	800f0ea <_dtoa_r+0x5e2>
 800f094:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f098:	e7d6      	b.n	800f048 <_dtoa_r+0x540>
 800f09a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f09e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f0a2:	f8dd 8000 	ldr.w	r8, [sp]
 800f0a6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f0aa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f0ae:	ee15 3a10 	vmov	r3, s10
 800f0b2:	3330      	adds	r3, #48	; 0x30
 800f0b4:	f808 3b01 	strb.w	r3, [r8], #1
 800f0b8:	9b00      	ldr	r3, [sp, #0]
 800f0ba:	eba8 0303 	sub.w	r3, r8, r3
 800f0be:	4599      	cmp	r9, r3
 800f0c0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f0c4:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f0c8:	d133      	bne.n	800f132 <_dtoa_r+0x62a>
 800f0ca:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f0ce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0d6:	dc1a      	bgt.n	800f10e <_dtoa_r+0x606>
 800f0d8:	eeb4 7b46 	vcmp.f64	d7, d6
 800f0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0e0:	d103      	bne.n	800f0ea <_dtoa_r+0x5e2>
 800f0e2:	ee15 3a10 	vmov	r3, s10
 800f0e6:	07d9      	lsls	r1, r3, #31
 800f0e8:	d411      	bmi.n	800f10e <_dtoa_r+0x606>
 800f0ea:	4629      	mov	r1, r5
 800f0ec:	4630      	mov	r0, r6
 800f0ee:	f000 fad9 	bl	800f6a4 <_Bfree>
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f0f6:	f888 3000 	strb.w	r3, [r8]
 800f0fa:	f10b 0301 	add.w	r3, fp, #1
 800f0fe:	6013      	str	r3, [r2, #0]
 800f100:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f102:	2b00      	cmp	r3, #0
 800f104:	f43f ad4d 	beq.w	800eba2 <_dtoa_r+0x9a>
 800f108:	f8c3 8000 	str.w	r8, [r3]
 800f10c:	e549      	b.n	800eba2 <_dtoa_r+0x9a>
 800f10e:	465f      	mov	r7, fp
 800f110:	4643      	mov	r3, r8
 800f112:	4698      	mov	r8, r3
 800f114:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f118:	2a39      	cmp	r2, #57	; 0x39
 800f11a:	d106      	bne.n	800f12a <_dtoa_r+0x622>
 800f11c:	9a00      	ldr	r2, [sp, #0]
 800f11e:	429a      	cmp	r2, r3
 800f120:	d1f7      	bne.n	800f112 <_dtoa_r+0x60a>
 800f122:	9900      	ldr	r1, [sp, #0]
 800f124:	2230      	movs	r2, #48	; 0x30
 800f126:	3701      	adds	r7, #1
 800f128:	700a      	strb	r2, [r1, #0]
 800f12a:	781a      	ldrb	r2, [r3, #0]
 800f12c:	3201      	adds	r2, #1
 800f12e:	701a      	strb	r2, [r3, #0]
 800f130:	e7ae      	b.n	800f090 <_dtoa_r+0x588>
 800f132:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f136:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f13e:	d1b2      	bne.n	800f0a6 <_dtoa_r+0x59e>
 800f140:	e7d3      	b.n	800f0ea <_dtoa_r+0x5e2>
 800f142:	bf00      	nop
 800f144:	08012460 	.word	0x08012460
 800f148:	08012438 	.word	0x08012438
 800f14c:	9908      	ldr	r1, [sp, #32]
 800f14e:	2900      	cmp	r1, #0
 800f150:	f000 80d1 	beq.w	800f2f6 <_dtoa_r+0x7ee>
 800f154:	9907      	ldr	r1, [sp, #28]
 800f156:	2901      	cmp	r1, #1
 800f158:	f300 80b4 	bgt.w	800f2c4 <_dtoa_r+0x7bc>
 800f15c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f15e:	2900      	cmp	r1, #0
 800f160:	f000 80ac 	beq.w	800f2bc <_dtoa_r+0x7b4>
 800f164:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f168:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f16c:	461c      	mov	r4, r3
 800f16e:	930a      	str	r3, [sp, #40]	; 0x28
 800f170:	9b05      	ldr	r3, [sp, #20]
 800f172:	4413      	add	r3, r2
 800f174:	9305      	str	r3, [sp, #20]
 800f176:	9b06      	ldr	r3, [sp, #24]
 800f178:	2101      	movs	r1, #1
 800f17a:	4413      	add	r3, r2
 800f17c:	4630      	mov	r0, r6
 800f17e:	9306      	str	r3, [sp, #24]
 800f180:	f000 fb4c 	bl	800f81c <__i2b>
 800f184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f186:	4607      	mov	r7, r0
 800f188:	f1b8 0f00 	cmp.w	r8, #0
 800f18c:	dd0d      	ble.n	800f1aa <_dtoa_r+0x6a2>
 800f18e:	9a06      	ldr	r2, [sp, #24]
 800f190:	2a00      	cmp	r2, #0
 800f192:	dd0a      	ble.n	800f1aa <_dtoa_r+0x6a2>
 800f194:	4542      	cmp	r2, r8
 800f196:	9905      	ldr	r1, [sp, #20]
 800f198:	bfa8      	it	ge
 800f19a:	4642      	movge	r2, r8
 800f19c:	1a89      	subs	r1, r1, r2
 800f19e:	9105      	str	r1, [sp, #20]
 800f1a0:	9906      	ldr	r1, [sp, #24]
 800f1a2:	eba8 0802 	sub.w	r8, r8, r2
 800f1a6:	1a8a      	subs	r2, r1, r2
 800f1a8:	9206      	str	r2, [sp, #24]
 800f1aa:	b303      	cbz	r3, 800f1ee <_dtoa_r+0x6e6>
 800f1ac:	9a08      	ldr	r2, [sp, #32]
 800f1ae:	2a00      	cmp	r2, #0
 800f1b0:	f000 80a6 	beq.w	800f300 <_dtoa_r+0x7f8>
 800f1b4:	2c00      	cmp	r4, #0
 800f1b6:	dd13      	ble.n	800f1e0 <_dtoa_r+0x6d8>
 800f1b8:	4639      	mov	r1, r7
 800f1ba:	4622      	mov	r2, r4
 800f1bc:	4630      	mov	r0, r6
 800f1be:	930c      	str	r3, [sp, #48]	; 0x30
 800f1c0:	f000 fbe8 	bl	800f994 <__pow5mult>
 800f1c4:	462a      	mov	r2, r5
 800f1c6:	4601      	mov	r1, r0
 800f1c8:	4607      	mov	r7, r0
 800f1ca:	4630      	mov	r0, r6
 800f1cc:	f000 fb3c 	bl	800f848 <__multiply>
 800f1d0:	4629      	mov	r1, r5
 800f1d2:	900a      	str	r0, [sp, #40]	; 0x28
 800f1d4:	4630      	mov	r0, r6
 800f1d6:	f000 fa65 	bl	800f6a4 <_Bfree>
 800f1da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1de:	4615      	mov	r5, r2
 800f1e0:	1b1a      	subs	r2, r3, r4
 800f1e2:	d004      	beq.n	800f1ee <_dtoa_r+0x6e6>
 800f1e4:	4629      	mov	r1, r5
 800f1e6:	4630      	mov	r0, r6
 800f1e8:	f000 fbd4 	bl	800f994 <__pow5mult>
 800f1ec:	4605      	mov	r5, r0
 800f1ee:	2101      	movs	r1, #1
 800f1f0:	4630      	mov	r0, r6
 800f1f2:	f000 fb13 	bl	800f81c <__i2b>
 800f1f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	4604      	mov	r4, r0
 800f1fc:	f340 8082 	ble.w	800f304 <_dtoa_r+0x7fc>
 800f200:	461a      	mov	r2, r3
 800f202:	4601      	mov	r1, r0
 800f204:	4630      	mov	r0, r6
 800f206:	f000 fbc5 	bl	800f994 <__pow5mult>
 800f20a:	9b07      	ldr	r3, [sp, #28]
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	4604      	mov	r4, r0
 800f210:	dd7b      	ble.n	800f30a <_dtoa_r+0x802>
 800f212:	2300      	movs	r3, #0
 800f214:	930a      	str	r3, [sp, #40]	; 0x28
 800f216:	6922      	ldr	r2, [r4, #16]
 800f218:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f21c:	6910      	ldr	r0, [r2, #16]
 800f21e:	f000 faad 	bl	800f77c <__hi0bits>
 800f222:	f1c0 0020 	rsb	r0, r0, #32
 800f226:	9b06      	ldr	r3, [sp, #24]
 800f228:	4418      	add	r0, r3
 800f22a:	f010 001f 	ands.w	r0, r0, #31
 800f22e:	f000 808d 	beq.w	800f34c <_dtoa_r+0x844>
 800f232:	f1c0 0220 	rsb	r2, r0, #32
 800f236:	2a04      	cmp	r2, #4
 800f238:	f340 8086 	ble.w	800f348 <_dtoa_r+0x840>
 800f23c:	f1c0 001c 	rsb	r0, r0, #28
 800f240:	9b05      	ldr	r3, [sp, #20]
 800f242:	4403      	add	r3, r0
 800f244:	9305      	str	r3, [sp, #20]
 800f246:	9b06      	ldr	r3, [sp, #24]
 800f248:	4403      	add	r3, r0
 800f24a:	4480      	add	r8, r0
 800f24c:	9306      	str	r3, [sp, #24]
 800f24e:	9b05      	ldr	r3, [sp, #20]
 800f250:	2b00      	cmp	r3, #0
 800f252:	dd05      	ble.n	800f260 <_dtoa_r+0x758>
 800f254:	4629      	mov	r1, r5
 800f256:	461a      	mov	r2, r3
 800f258:	4630      	mov	r0, r6
 800f25a:	f000 fbf5 	bl	800fa48 <__lshift>
 800f25e:	4605      	mov	r5, r0
 800f260:	9b06      	ldr	r3, [sp, #24]
 800f262:	2b00      	cmp	r3, #0
 800f264:	dd05      	ble.n	800f272 <_dtoa_r+0x76a>
 800f266:	4621      	mov	r1, r4
 800f268:	461a      	mov	r2, r3
 800f26a:	4630      	mov	r0, r6
 800f26c:	f000 fbec 	bl	800fa48 <__lshift>
 800f270:	4604      	mov	r4, r0
 800f272:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f274:	2b00      	cmp	r3, #0
 800f276:	d06b      	beq.n	800f350 <_dtoa_r+0x848>
 800f278:	4621      	mov	r1, r4
 800f27a:	4628      	mov	r0, r5
 800f27c:	f000 fc50 	bl	800fb20 <__mcmp>
 800f280:	2800      	cmp	r0, #0
 800f282:	da65      	bge.n	800f350 <_dtoa_r+0x848>
 800f284:	2300      	movs	r3, #0
 800f286:	4629      	mov	r1, r5
 800f288:	220a      	movs	r2, #10
 800f28a:	4630      	mov	r0, r6
 800f28c:	f000 fa2c 	bl	800f6e8 <__multadd>
 800f290:	9b08      	ldr	r3, [sp, #32]
 800f292:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f296:	4605      	mov	r5, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	f000 8192 	beq.w	800f5c2 <_dtoa_r+0xaba>
 800f29e:	4639      	mov	r1, r7
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	220a      	movs	r2, #10
 800f2a4:	4630      	mov	r0, r6
 800f2a6:	f000 fa1f 	bl	800f6e8 <__multadd>
 800f2aa:	f1ba 0f00 	cmp.w	sl, #0
 800f2ae:	4607      	mov	r7, r0
 800f2b0:	f300 808e 	bgt.w	800f3d0 <_dtoa_r+0x8c8>
 800f2b4:	9b07      	ldr	r3, [sp, #28]
 800f2b6:	2b02      	cmp	r3, #2
 800f2b8:	dc51      	bgt.n	800f35e <_dtoa_r+0x856>
 800f2ba:	e089      	b.n	800f3d0 <_dtoa_r+0x8c8>
 800f2bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f2be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f2c2:	e751      	b.n	800f168 <_dtoa_r+0x660>
 800f2c4:	f109 34ff 	add.w	r4, r9, #4294967295
 800f2c8:	42a3      	cmp	r3, r4
 800f2ca:	bfbf      	itttt	lt
 800f2cc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800f2ce:	1ae3      	sublt	r3, r4, r3
 800f2d0:	18d2      	addlt	r2, r2, r3
 800f2d2:	4613      	movlt	r3, r2
 800f2d4:	bfb7      	itett	lt
 800f2d6:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f2d8:	1b1c      	subge	r4, r3, r4
 800f2da:	4623      	movlt	r3, r4
 800f2dc:	2400      	movlt	r4, #0
 800f2de:	f1b9 0f00 	cmp.w	r9, #0
 800f2e2:	bfb5      	itete	lt
 800f2e4:	9a05      	ldrlt	r2, [sp, #20]
 800f2e6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800f2ea:	eba2 0809 	sublt.w	r8, r2, r9
 800f2ee:	464a      	movge	r2, r9
 800f2f0:	bfb8      	it	lt
 800f2f2:	2200      	movlt	r2, #0
 800f2f4:	e73b      	b.n	800f16e <_dtoa_r+0x666>
 800f2f6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f2fa:	9f08      	ldr	r7, [sp, #32]
 800f2fc:	461c      	mov	r4, r3
 800f2fe:	e743      	b.n	800f188 <_dtoa_r+0x680>
 800f300:	461a      	mov	r2, r3
 800f302:	e76f      	b.n	800f1e4 <_dtoa_r+0x6dc>
 800f304:	9b07      	ldr	r3, [sp, #28]
 800f306:	2b01      	cmp	r3, #1
 800f308:	dc18      	bgt.n	800f33c <_dtoa_r+0x834>
 800f30a:	9b02      	ldr	r3, [sp, #8]
 800f30c:	b9b3      	cbnz	r3, 800f33c <_dtoa_r+0x834>
 800f30e:	9b03      	ldr	r3, [sp, #12]
 800f310:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f314:	b9a2      	cbnz	r2, 800f340 <_dtoa_r+0x838>
 800f316:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f31a:	0d12      	lsrs	r2, r2, #20
 800f31c:	0512      	lsls	r2, r2, #20
 800f31e:	b18a      	cbz	r2, 800f344 <_dtoa_r+0x83c>
 800f320:	9b05      	ldr	r3, [sp, #20]
 800f322:	3301      	adds	r3, #1
 800f324:	9305      	str	r3, [sp, #20]
 800f326:	9b06      	ldr	r3, [sp, #24]
 800f328:	3301      	adds	r3, #1
 800f32a:	9306      	str	r3, [sp, #24]
 800f32c:	2301      	movs	r3, #1
 800f32e:	930a      	str	r3, [sp, #40]	; 0x28
 800f330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f332:	2b00      	cmp	r3, #0
 800f334:	f47f af6f 	bne.w	800f216 <_dtoa_r+0x70e>
 800f338:	2001      	movs	r0, #1
 800f33a:	e774      	b.n	800f226 <_dtoa_r+0x71e>
 800f33c:	2300      	movs	r3, #0
 800f33e:	e7f6      	b.n	800f32e <_dtoa_r+0x826>
 800f340:	9b02      	ldr	r3, [sp, #8]
 800f342:	e7f4      	b.n	800f32e <_dtoa_r+0x826>
 800f344:	920a      	str	r2, [sp, #40]	; 0x28
 800f346:	e7f3      	b.n	800f330 <_dtoa_r+0x828>
 800f348:	d081      	beq.n	800f24e <_dtoa_r+0x746>
 800f34a:	4610      	mov	r0, r2
 800f34c:	301c      	adds	r0, #28
 800f34e:	e777      	b.n	800f240 <_dtoa_r+0x738>
 800f350:	f1b9 0f00 	cmp.w	r9, #0
 800f354:	dc37      	bgt.n	800f3c6 <_dtoa_r+0x8be>
 800f356:	9b07      	ldr	r3, [sp, #28]
 800f358:	2b02      	cmp	r3, #2
 800f35a:	dd34      	ble.n	800f3c6 <_dtoa_r+0x8be>
 800f35c:	46ca      	mov	sl, r9
 800f35e:	f1ba 0f00 	cmp.w	sl, #0
 800f362:	d10d      	bne.n	800f380 <_dtoa_r+0x878>
 800f364:	4621      	mov	r1, r4
 800f366:	4653      	mov	r3, sl
 800f368:	2205      	movs	r2, #5
 800f36a:	4630      	mov	r0, r6
 800f36c:	f000 f9bc 	bl	800f6e8 <__multadd>
 800f370:	4601      	mov	r1, r0
 800f372:	4604      	mov	r4, r0
 800f374:	4628      	mov	r0, r5
 800f376:	f000 fbd3 	bl	800fb20 <__mcmp>
 800f37a:	2800      	cmp	r0, #0
 800f37c:	f73f adde 	bgt.w	800ef3c <_dtoa_r+0x434>
 800f380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f382:	f8dd 8000 	ldr.w	r8, [sp]
 800f386:	ea6f 0b03 	mvn.w	fp, r3
 800f38a:	f04f 0900 	mov.w	r9, #0
 800f38e:	4621      	mov	r1, r4
 800f390:	4630      	mov	r0, r6
 800f392:	f000 f987 	bl	800f6a4 <_Bfree>
 800f396:	2f00      	cmp	r7, #0
 800f398:	f43f aea7 	beq.w	800f0ea <_dtoa_r+0x5e2>
 800f39c:	f1b9 0f00 	cmp.w	r9, #0
 800f3a0:	d005      	beq.n	800f3ae <_dtoa_r+0x8a6>
 800f3a2:	45b9      	cmp	r9, r7
 800f3a4:	d003      	beq.n	800f3ae <_dtoa_r+0x8a6>
 800f3a6:	4649      	mov	r1, r9
 800f3a8:	4630      	mov	r0, r6
 800f3aa:	f000 f97b 	bl	800f6a4 <_Bfree>
 800f3ae:	4639      	mov	r1, r7
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	f000 f977 	bl	800f6a4 <_Bfree>
 800f3b6:	e698      	b.n	800f0ea <_dtoa_r+0x5e2>
 800f3b8:	2400      	movs	r4, #0
 800f3ba:	4627      	mov	r7, r4
 800f3bc:	e7e0      	b.n	800f380 <_dtoa_r+0x878>
 800f3be:	46bb      	mov	fp, r7
 800f3c0:	4604      	mov	r4, r0
 800f3c2:	4607      	mov	r7, r0
 800f3c4:	e5ba      	b.n	800ef3c <_dtoa_r+0x434>
 800f3c6:	9b08      	ldr	r3, [sp, #32]
 800f3c8:	46ca      	mov	sl, r9
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	f000 8100 	beq.w	800f5d0 <_dtoa_r+0xac8>
 800f3d0:	f1b8 0f00 	cmp.w	r8, #0
 800f3d4:	dd05      	ble.n	800f3e2 <_dtoa_r+0x8da>
 800f3d6:	4639      	mov	r1, r7
 800f3d8:	4642      	mov	r2, r8
 800f3da:	4630      	mov	r0, r6
 800f3dc:	f000 fb34 	bl	800fa48 <__lshift>
 800f3e0:	4607      	mov	r7, r0
 800f3e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d05d      	beq.n	800f4a4 <_dtoa_r+0x99c>
 800f3e8:	6879      	ldr	r1, [r7, #4]
 800f3ea:	4630      	mov	r0, r6
 800f3ec:	f000 f91a 	bl	800f624 <_Balloc>
 800f3f0:	4680      	mov	r8, r0
 800f3f2:	b928      	cbnz	r0, 800f400 <_dtoa_r+0x8f8>
 800f3f4:	4b82      	ldr	r3, [pc, #520]	; (800f600 <_dtoa_r+0xaf8>)
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f3fc:	f7ff bb9a 	b.w	800eb34 <_dtoa_r+0x2c>
 800f400:	693a      	ldr	r2, [r7, #16]
 800f402:	3202      	adds	r2, #2
 800f404:	0092      	lsls	r2, r2, #2
 800f406:	f107 010c 	add.w	r1, r7, #12
 800f40a:	300c      	adds	r0, #12
 800f40c:	f7fe fe96 	bl	800e13c <memcpy>
 800f410:	2201      	movs	r2, #1
 800f412:	4641      	mov	r1, r8
 800f414:	4630      	mov	r0, r6
 800f416:	f000 fb17 	bl	800fa48 <__lshift>
 800f41a:	9b00      	ldr	r3, [sp, #0]
 800f41c:	3301      	adds	r3, #1
 800f41e:	9305      	str	r3, [sp, #20]
 800f420:	9b00      	ldr	r3, [sp, #0]
 800f422:	4453      	add	r3, sl
 800f424:	9309      	str	r3, [sp, #36]	; 0x24
 800f426:	9b02      	ldr	r3, [sp, #8]
 800f428:	f003 0301 	and.w	r3, r3, #1
 800f42c:	46b9      	mov	r9, r7
 800f42e:	9308      	str	r3, [sp, #32]
 800f430:	4607      	mov	r7, r0
 800f432:	9b05      	ldr	r3, [sp, #20]
 800f434:	4621      	mov	r1, r4
 800f436:	3b01      	subs	r3, #1
 800f438:	4628      	mov	r0, r5
 800f43a:	9302      	str	r3, [sp, #8]
 800f43c:	f7ff fad6 	bl	800e9ec <quorem>
 800f440:	4603      	mov	r3, r0
 800f442:	3330      	adds	r3, #48	; 0x30
 800f444:	9006      	str	r0, [sp, #24]
 800f446:	4649      	mov	r1, r9
 800f448:	4628      	mov	r0, r5
 800f44a:	930a      	str	r3, [sp, #40]	; 0x28
 800f44c:	f000 fb68 	bl	800fb20 <__mcmp>
 800f450:	463a      	mov	r2, r7
 800f452:	4682      	mov	sl, r0
 800f454:	4621      	mov	r1, r4
 800f456:	4630      	mov	r0, r6
 800f458:	f000 fb7e 	bl	800fb58 <__mdiff>
 800f45c:	68c2      	ldr	r2, [r0, #12]
 800f45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f460:	4680      	mov	r8, r0
 800f462:	bb0a      	cbnz	r2, 800f4a8 <_dtoa_r+0x9a0>
 800f464:	4601      	mov	r1, r0
 800f466:	4628      	mov	r0, r5
 800f468:	f000 fb5a 	bl	800fb20 <__mcmp>
 800f46c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f46e:	4602      	mov	r2, r0
 800f470:	4641      	mov	r1, r8
 800f472:	4630      	mov	r0, r6
 800f474:	920e      	str	r2, [sp, #56]	; 0x38
 800f476:	930a      	str	r3, [sp, #40]	; 0x28
 800f478:	f000 f914 	bl	800f6a4 <_Bfree>
 800f47c:	9b07      	ldr	r3, [sp, #28]
 800f47e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f480:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f484:	ea43 0102 	orr.w	r1, r3, r2
 800f488:	9b08      	ldr	r3, [sp, #32]
 800f48a:	430b      	orrs	r3, r1
 800f48c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f48e:	d10d      	bne.n	800f4ac <_dtoa_r+0x9a4>
 800f490:	2b39      	cmp	r3, #57	; 0x39
 800f492:	d029      	beq.n	800f4e8 <_dtoa_r+0x9e0>
 800f494:	f1ba 0f00 	cmp.w	sl, #0
 800f498:	dd01      	ble.n	800f49e <_dtoa_r+0x996>
 800f49a:	9b06      	ldr	r3, [sp, #24]
 800f49c:	3331      	adds	r3, #49	; 0x31
 800f49e:	9a02      	ldr	r2, [sp, #8]
 800f4a0:	7013      	strb	r3, [r2, #0]
 800f4a2:	e774      	b.n	800f38e <_dtoa_r+0x886>
 800f4a4:	4638      	mov	r0, r7
 800f4a6:	e7b8      	b.n	800f41a <_dtoa_r+0x912>
 800f4a8:	2201      	movs	r2, #1
 800f4aa:	e7e1      	b.n	800f470 <_dtoa_r+0x968>
 800f4ac:	f1ba 0f00 	cmp.w	sl, #0
 800f4b0:	db06      	blt.n	800f4c0 <_dtoa_r+0x9b8>
 800f4b2:	9907      	ldr	r1, [sp, #28]
 800f4b4:	ea41 0a0a 	orr.w	sl, r1, sl
 800f4b8:	9908      	ldr	r1, [sp, #32]
 800f4ba:	ea5a 0101 	orrs.w	r1, sl, r1
 800f4be:	d120      	bne.n	800f502 <_dtoa_r+0x9fa>
 800f4c0:	2a00      	cmp	r2, #0
 800f4c2:	ddec      	ble.n	800f49e <_dtoa_r+0x996>
 800f4c4:	4629      	mov	r1, r5
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	9305      	str	r3, [sp, #20]
 800f4cc:	f000 fabc 	bl	800fa48 <__lshift>
 800f4d0:	4621      	mov	r1, r4
 800f4d2:	4605      	mov	r5, r0
 800f4d4:	f000 fb24 	bl	800fb20 <__mcmp>
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	9b05      	ldr	r3, [sp, #20]
 800f4dc:	dc02      	bgt.n	800f4e4 <_dtoa_r+0x9dc>
 800f4de:	d1de      	bne.n	800f49e <_dtoa_r+0x996>
 800f4e0:	07da      	lsls	r2, r3, #31
 800f4e2:	d5dc      	bpl.n	800f49e <_dtoa_r+0x996>
 800f4e4:	2b39      	cmp	r3, #57	; 0x39
 800f4e6:	d1d8      	bne.n	800f49a <_dtoa_r+0x992>
 800f4e8:	9a02      	ldr	r2, [sp, #8]
 800f4ea:	2339      	movs	r3, #57	; 0x39
 800f4ec:	7013      	strb	r3, [r2, #0]
 800f4ee:	4643      	mov	r3, r8
 800f4f0:	4698      	mov	r8, r3
 800f4f2:	3b01      	subs	r3, #1
 800f4f4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800f4f8:	2a39      	cmp	r2, #57	; 0x39
 800f4fa:	d051      	beq.n	800f5a0 <_dtoa_r+0xa98>
 800f4fc:	3201      	adds	r2, #1
 800f4fe:	701a      	strb	r2, [r3, #0]
 800f500:	e745      	b.n	800f38e <_dtoa_r+0x886>
 800f502:	2a00      	cmp	r2, #0
 800f504:	dd03      	ble.n	800f50e <_dtoa_r+0xa06>
 800f506:	2b39      	cmp	r3, #57	; 0x39
 800f508:	d0ee      	beq.n	800f4e8 <_dtoa_r+0x9e0>
 800f50a:	3301      	adds	r3, #1
 800f50c:	e7c7      	b.n	800f49e <_dtoa_r+0x996>
 800f50e:	9a05      	ldr	r2, [sp, #20]
 800f510:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f512:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f516:	428a      	cmp	r2, r1
 800f518:	d02b      	beq.n	800f572 <_dtoa_r+0xa6a>
 800f51a:	4629      	mov	r1, r5
 800f51c:	2300      	movs	r3, #0
 800f51e:	220a      	movs	r2, #10
 800f520:	4630      	mov	r0, r6
 800f522:	f000 f8e1 	bl	800f6e8 <__multadd>
 800f526:	45b9      	cmp	r9, r7
 800f528:	4605      	mov	r5, r0
 800f52a:	f04f 0300 	mov.w	r3, #0
 800f52e:	f04f 020a 	mov.w	r2, #10
 800f532:	4649      	mov	r1, r9
 800f534:	4630      	mov	r0, r6
 800f536:	d107      	bne.n	800f548 <_dtoa_r+0xa40>
 800f538:	f000 f8d6 	bl	800f6e8 <__multadd>
 800f53c:	4681      	mov	r9, r0
 800f53e:	4607      	mov	r7, r0
 800f540:	9b05      	ldr	r3, [sp, #20]
 800f542:	3301      	adds	r3, #1
 800f544:	9305      	str	r3, [sp, #20]
 800f546:	e774      	b.n	800f432 <_dtoa_r+0x92a>
 800f548:	f000 f8ce 	bl	800f6e8 <__multadd>
 800f54c:	4639      	mov	r1, r7
 800f54e:	4681      	mov	r9, r0
 800f550:	2300      	movs	r3, #0
 800f552:	220a      	movs	r2, #10
 800f554:	4630      	mov	r0, r6
 800f556:	f000 f8c7 	bl	800f6e8 <__multadd>
 800f55a:	4607      	mov	r7, r0
 800f55c:	e7f0      	b.n	800f540 <_dtoa_r+0xa38>
 800f55e:	f1ba 0f00 	cmp.w	sl, #0
 800f562:	9a00      	ldr	r2, [sp, #0]
 800f564:	bfcc      	ite	gt
 800f566:	46d0      	movgt	r8, sl
 800f568:	f04f 0801 	movle.w	r8, #1
 800f56c:	4490      	add	r8, r2
 800f56e:	f04f 0900 	mov.w	r9, #0
 800f572:	4629      	mov	r1, r5
 800f574:	2201      	movs	r2, #1
 800f576:	4630      	mov	r0, r6
 800f578:	9302      	str	r3, [sp, #8]
 800f57a:	f000 fa65 	bl	800fa48 <__lshift>
 800f57e:	4621      	mov	r1, r4
 800f580:	4605      	mov	r5, r0
 800f582:	f000 facd 	bl	800fb20 <__mcmp>
 800f586:	2800      	cmp	r0, #0
 800f588:	dcb1      	bgt.n	800f4ee <_dtoa_r+0x9e6>
 800f58a:	d102      	bne.n	800f592 <_dtoa_r+0xa8a>
 800f58c:	9b02      	ldr	r3, [sp, #8]
 800f58e:	07db      	lsls	r3, r3, #31
 800f590:	d4ad      	bmi.n	800f4ee <_dtoa_r+0x9e6>
 800f592:	4643      	mov	r3, r8
 800f594:	4698      	mov	r8, r3
 800f596:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f59a:	2a30      	cmp	r2, #48	; 0x30
 800f59c:	d0fa      	beq.n	800f594 <_dtoa_r+0xa8c>
 800f59e:	e6f6      	b.n	800f38e <_dtoa_r+0x886>
 800f5a0:	9a00      	ldr	r2, [sp, #0]
 800f5a2:	429a      	cmp	r2, r3
 800f5a4:	d1a4      	bne.n	800f4f0 <_dtoa_r+0x9e8>
 800f5a6:	f10b 0b01 	add.w	fp, fp, #1
 800f5aa:	2331      	movs	r3, #49	; 0x31
 800f5ac:	e778      	b.n	800f4a0 <_dtoa_r+0x998>
 800f5ae:	4b15      	ldr	r3, [pc, #84]	; (800f604 <_dtoa_r+0xafc>)
 800f5b0:	f7ff bb12 	b.w	800ebd8 <_dtoa_r+0xd0>
 800f5b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	f47f aaee 	bne.w	800eb98 <_dtoa_r+0x90>
 800f5bc:	4b12      	ldr	r3, [pc, #72]	; (800f608 <_dtoa_r+0xb00>)
 800f5be:	f7ff bb0b 	b.w	800ebd8 <_dtoa_r+0xd0>
 800f5c2:	f1ba 0f00 	cmp.w	sl, #0
 800f5c6:	dc03      	bgt.n	800f5d0 <_dtoa_r+0xac8>
 800f5c8:	9b07      	ldr	r3, [sp, #28]
 800f5ca:	2b02      	cmp	r3, #2
 800f5cc:	f73f aec7 	bgt.w	800f35e <_dtoa_r+0x856>
 800f5d0:	f8dd 8000 	ldr.w	r8, [sp]
 800f5d4:	4621      	mov	r1, r4
 800f5d6:	4628      	mov	r0, r5
 800f5d8:	f7ff fa08 	bl	800e9ec <quorem>
 800f5dc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f5e0:	f808 3b01 	strb.w	r3, [r8], #1
 800f5e4:	9a00      	ldr	r2, [sp, #0]
 800f5e6:	eba8 0202 	sub.w	r2, r8, r2
 800f5ea:	4592      	cmp	sl, r2
 800f5ec:	ddb7      	ble.n	800f55e <_dtoa_r+0xa56>
 800f5ee:	4629      	mov	r1, r5
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	220a      	movs	r2, #10
 800f5f4:	4630      	mov	r0, r6
 800f5f6:	f000 f877 	bl	800f6e8 <__multadd>
 800f5fa:	4605      	mov	r5, r0
 800f5fc:	e7ea      	b.n	800f5d4 <_dtoa_r+0xacc>
 800f5fe:	bf00      	nop
 800f600:	080123c3 	.word	0x080123c3
 800f604:	0801231c 	.word	0x0801231c
 800f608:	08012340 	.word	0x08012340

0800f60c <_localeconv_r>:
 800f60c:	4800      	ldr	r0, [pc, #0]	; (800f610 <_localeconv_r+0x4>)
 800f60e:	4770      	bx	lr
 800f610:	2400017c 	.word	0x2400017c

0800f614 <malloc>:
 800f614:	4b02      	ldr	r3, [pc, #8]	; (800f620 <malloc+0xc>)
 800f616:	4601      	mov	r1, r0
 800f618:	6818      	ldr	r0, [r3, #0]
 800f61a:	f000 bbe1 	b.w	800fde0 <_malloc_r>
 800f61e:	bf00      	nop
 800f620:	24000028 	.word	0x24000028

0800f624 <_Balloc>:
 800f624:	b570      	push	{r4, r5, r6, lr}
 800f626:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f628:	4604      	mov	r4, r0
 800f62a:	460d      	mov	r5, r1
 800f62c:	b976      	cbnz	r6, 800f64c <_Balloc+0x28>
 800f62e:	2010      	movs	r0, #16
 800f630:	f7ff fff0 	bl	800f614 <malloc>
 800f634:	4602      	mov	r2, r0
 800f636:	6260      	str	r0, [r4, #36]	; 0x24
 800f638:	b920      	cbnz	r0, 800f644 <_Balloc+0x20>
 800f63a:	4b18      	ldr	r3, [pc, #96]	; (800f69c <_Balloc+0x78>)
 800f63c:	4818      	ldr	r0, [pc, #96]	; (800f6a0 <_Balloc+0x7c>)
 800f63e:	2166      	movs	r1, #102	; 0x66
 800f640:	f000 fc38 	bl	800feb4 <__assert_func>
 800f644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f648:	6006      	str	r6, [r0, #0]
 800f64a:	60c6      	str	r6, [r0, #12]
 800f64c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f64e:	68f3      	ldr	r3, [r6, #12]
 800f650:	b183      	cbz	r3, 800f674 <_Balloc+0x50>
 800f652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f65a:	b9b8      	cbnz	r0, 800f68c <_Balloc+0x68>
 800f65c:	2101      	movs	r1, #1
 800f65e:	fa01 f605 	lsl.w	r6, r1, r5
 800f662:	1d72      	adds	r2, r6, #5
 800f664:	0092      	lsls	r2, r2, #2
 800f666:	4620      	mov	r0, r4
 800f668:	f000 fb5a 	bl	800fd20 <_calloc_r>
 800f66c:	b160      	cbz	r0, 800f688 <_Balloc+0x64>
 800f66e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f672:	e00e      	b.n	800f692 <_Balloc+0x6e>
 800f674:	2221      	movs	r2, #33	; 0x21
 800f676:	2104      	movs	r1, #4
 800f678:	4620      	mov	r0, r4
 800f67a:	f000 fb51 	bl	800fd20 <_calloc_r>
 800f67e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f680:	60f0      	str	r0, [r6, #12]
 800f682:	68db      	ldr	r3, [r3, #12]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d1e4      	bne.n	800f652 <_Balloc+0x2e>
 800f688:	2000      	movs	r0, #0
 800f68a:	bd70      	pop	{r4, r5, r6, pc}
 800f68c:	6802      	ldr	r2, [r0, #0]
 800f68e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f692:	2300      	movs	r3, #0
 800f694:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f698:	e7f7      	b.n	800f68a <_Balloc+0x66>
 800f69a:	bf00      	nop
 800f69c:	0801234d 	.word	0x0801234d
 800f6a0:	080123d4 	.word	0x080123d4

0800f6a4 <_Bfree>:
 800f6a4:	b570      	push	{r4, r5, r6, lr}
 800f6a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f6a8:	4605      	mov	r5, r0
 800f6aa:	460c      	mov	r4, r1
 800f6ac:	b976      	cbnz	r6, 800f6cc <_Bfree+0x28>
 800f6ae:	2010      	movs	r0, #16
 800f6b0:	f7ff ffb0 	bl	800f614 <malloc>
 800f6b4:	4602      	mov	r2, r0
 800f6b6:	6268      	str	r0, [r5, #36]	; 0x24
 800f6b8:	b920      	cbnz	r0, 800f6c4 <_Bfree+0x20>
 800f6ba:	4b09      	ldr	r3, [pc, #36]	; (800f6e0 <_Bfree+0x3c>)
 800f6bc:	4809      	ldr	r0, [pc, #36]	; (800f6e4 <_Bfree+0x40>)
 800f6be:	218a      	movs	r1, #138	; 0x8a
 800f6c0:	f000 fbf8 	bl	800feb4 <__assert_func>
 800f6c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f6c8:	6006      	str	r6, [r0, #0]
 800f6ca:	60c6      	str	r6, [r0, #12]
 800f6cc:	b13c      	cbz	r4, 800f6de <_Bfree+0x3a>
 800f6ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f6d0:	6862      	ldr	r2, [r4, #4]
 800f6d2:	68db      	ldr	r3, [r3, #12]
 800f6d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f6d8:	6021      	str	r1, [r4, #0]
 800f6da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f6de:	bd70      	pop	{r4, r5, r6, pc}
 800f6e0:	0801234d 	.word	0x0801234d
 800f6e4:	080123d4 	.word	0x080123d4

0800f6e8 <__multadd>:
 800f6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ec:	690e      	ldr	r6, [r1, #16]
 800f6ee:	4607      	mov	r7, r0
 800f6f0:	4698      	mov	r8, r3
 800f6f2:	460c      	mov	r4, r1
 800f6f4:	f101 0014 	add.w	r0, r1, #20
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	6805      	ldr	r5, [r0, #0]
 800f6fc:	b2a9      	uxth	r1, r5
 800f6fe:	fb02 8101 	mla	r1, r2, r1, r8
 800f702:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f706:	0c2d      	lsrs	r5, r5, #16
 800f708:	fb02 c505 	mla	r5, r2, r5, ip
 800f70c:	b289      	uxth	r1, r1
 800f70e:	3301      	adds	r3, #1
 800f710:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f714:	429e      	cmp	r6, r3
 800f716:	f840 1b04 	str.w	r1, [r0], #4
 800f71a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f71e:	dcec      	bgt.n	800f6fa <__multadd+0x12>
 800f720:	f1b8 0f00 	cmp.w	r8, #0
 800f724:	d022      	beq.n	800f76c <__multadd+0x84>
 800f726:	68a3      	ldr	r3, [r4, #8]
 800f728:	42b3      	cmp	r3, r6
 800f72a:	dc19      	bgt.n	800f760 <__multadd+0x78>
 800f72c:	6861      	ldr	r1, [r4, #4]
 800f72e:	4638      	mov	r0, r7
 800f730:	3101      	adds	r1, #1
 800f732:	f7ff ff77 	bl	800f624 <_Balloc>
 800f736:	4605      	mov	r5, r0
 800f738:	b928      	cbnz	r0, 800f746 <__multadd+0x5e>
 800f73a:	4602      	mov	r2, r0
 800f73c:	4b0d      	ldr	r3, [pc, #52]	; (800f774 <__multadd+0x8c>)
 800f73e:	480e      	ldr	r0, [pc, #56]	; (800f778 <__multadd+0x90>)
 800f740:	21b5      	movs	r1, #181	; 0xb5
 800f742:	f000 fbb7 	bl	800feb4 <__assert_func>
 800f746:	6922      	ldr	r2, [r4, #16]
 800f748:	3202      	adds	r2, #2
 800f74a:	f104 010c 	add.w	r1, r4, #12
 800f74e:	0092      	lsls	r2, r2, #2
 800f750:	300c      	adds	r0, #12
 800f752:	f7fe fcf3 	bl	800e13c <memcpy>
 800f756:	4621      	mov	r1, r4
 800f758:	4638      	mov	r0, r7
 800f75a:	f7ff ffa3 	bl	800f6a4 <_Bfree>
 800f75e:	462c      	mov	r4, r5
 800f760:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f764:	3601      	adds	r6, #1
 800f766:	f8c3 8014 	str.w	r8, [r3, #20]
 800f76a:	6126      	str	r6, [r4, #16]
 800f76c:	4620      	mov	r0, r4
 800f76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f772:	bf00      	nop
 800f774:	080123c3 	.word	0x080123c3
 800f778:	080123d4 	.word	0x080123d4

0800f77c <__hi0bits>:
 800f77c:	0c03      	lsrs	r3, r0, #16
 800f77e:	041b      	lsls	r3, r3, #16
 800f780:	b9d3      	cbnz	r3, 800f7b8 <__hi0bits+0x3c>
 800f782:	0400      	lsls	r0, r0, #16
 800f784:	2310      	movs	r3, #16
 800f786:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f78a:	bf04      	itt	eq
 800f78c:	0200      	lsleq	r0, r0, #8
 800f78e:	3308      	addeq	r3, #8
 800f790:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f794:	bf04      	itt	eq
 800f796:	0100      	lsleq	r0, r0, #4
 800f798:	3304      	addeq	r3, #4
 800f79a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f79e:	bf04      	itt	eq
 800f7a0:	0080      	lsleq	r0, r0, #2
 800f7a2:	3302      	addeq	r3, #2
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	db05      	blt.n	800f7b4 <__hi0bits+0x38>
 800f7a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f7ac:	f103 0301 	add.w	r3, r3, #1
 800f7b0:	bf08      	it	eq
 800f7b2:	2320      	moveq	r3, #32
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	4770      	bx	lr
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	e7e4      	b.n	800f786 <__hi0bits+0xa>

0800f7bc <__lo0bits>:
 800f7bc:	6803      	ldr	r3, [r0, #0]
 800f7be:	f013 0207 	ands.w	r2, r3, #7
 800f7c2:	4601      	mov	r1, r0
 800f7c4:	d00b      	beq.n	800f7de <__lo0bits+0x22>
 800f7c6:	07da      	lsls	r2, r3, #31
 800f7c8:	d424      	bmi.n	800f814 <__lo0bits+0x58>
 800f7ca:	0798      	lsls	r0, r3, #30
 800f7cc:	bf49      	itett	mi
 800f7ce:	085b      	lsrmi	r3, r3, #1
 800f7d0:	089b      	lsrpl	r3, r3, #2
 800f7d2:	2001      	movmi	r0, #1
 800f7d4:	600b      	strmi	r3, [r1, #0]
 800f7d6:	bf5c      	itt	pl
 800f7d8:	600b      	strpl	r3, [r1, #0]
 800f7da:	2002      	movpl	r0, #2
 800f7dc:	4770      	bx	lr
 800f7de:	b298      	uxth	r0, r3
 800f7e0:	b9b0      	cbnz	r0, 800f810 <__lo0bits+0x54>
 800f7e2:	0c1b      	lsrs	r3, r3, #16
 800f7e4:	2010      	movs	r0, #16
 800f7e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f7ea:	bf04      	itt	eq
 800f7ec:	0a1b      	lsreq	r3, r3, #8
 800f7ee:	3008      	addeq	r0, #8
 800f7f0:	071a      	lsls	r2, r3, #28
 800f7f2:	bf04      	itt	eq
 800f7f4:	091b      	lsreq	r3, r3, #4
 800f7f6:	3004      	addeq	r0, #4
 800f7f8:	079a      	lsls	r2, r3, #30
 800f7fa:	bf04      	itt	eq
 800f7fc:	089b      	lsreq	r3, r3, #2
 800f7fe:	3002      	addeq	r0, #2
 800f800:	07da      	lsls	r2, r3, #31
 800f802:	d403      	bmi.n	800f80c <__lo0bits+0x50>
 800f804:	085b      	lsrs	r3, r3, #1
 800f806:	f100 0001 	add.w	r0, r0, #1
 800f80a:	d005      	beq.n	800f818 <__lo0bits+0x5c>
 800f80c:	600b      	str	r3, [r1, #0]
 800f80e:	4770      	bx	lr
 800f810:	4610      	mov	r0, r2
 800f812:	e7e8      	b.n	800f7e6 <__lo0bits+0x2a>
 800f814:	2000      	movs	r0, #0
 800f816:	4770      	bx	lr
 800f818:	2020      	movs	r0, #32
 800f81a:	4770      	bx	lr

0800f81c <__i2b>:
 800f81c:	b510      	push	{r4, lr}
 800f81e:	460c      	mov	r4, r1
 800f820:	2101      	movs	r1, #1
 800f822:	f7ff feff 	bl	800f624 <_Balloc>
 800f826:	4602      	mov	r2, r0
 800f828:	b928      	cbnz	r0, 800f836 <__i2b+0x1a>
 800f82a:	4b05      	ldr	r3, [pc, #20]	; (800f840 <__i2b+0x24>)
 800f82c:	4805      	ldr	r0, [pc, #20]	; (800f844 <__i2b+0x28>)
 800f82e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f832:	f000 fb3f 	bl	800feb4 <__assert_func>
 800f836:	2301      	movs	r3, #1
 800f838:	6144      	str	r4, [r0, #20]
 800f83a:	6103      	str	r3, [r0, #16]
 800f83c:	bd10      	pop	{r4, pc}
 800f83e:	bf00      	nop
 800f840:	080123c3 	.word	0x080123c3
 800f844:	080123d4 	.word	0x080123d4

0800f848 <__multiply>:
 800f848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f84c:	4614      	mov	r4, r2
 800f84e:	690a      	ldr	r2, [r1, #16]
 800f850:	6923      	ldr	r3, [r4, #16]
 800f852:	429a      	cmp	r2, r3
 800f854:	bfb8      	it	lt
 800f856:	460b      	movlt	r3, r1
 800f858:	460d      	mov	r5, r1
 800f85a:	bfbc      	itt	lt
 800f85c:	4625      	movlt	r5, r4
 800f85e:	461c      	movlt	r4, r3
 800f860:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f864:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f868:	68ab      	ldr	r3, [r5, #8]
 800f86a:	6869      	ldr	r1, [r5, #4]
 800f86c:	eb0a 0709 	add.w	r7, sl, r9
 800f870:	42bb      	cmp	r3, r7
 800f872:	b085      	sub	sp, #20
 800f874:	bfb8      	it	lt
 800f876:	3101      	addlt	r1, #1
 800f878:	f7ff fed4 	bl	800f624 <_Balloc>
 800f87c:	b930      	cbnz	r0, 800f88c <__multiply+0x44>
 800f87e:	4602      	mov	r2, r0
 800f880:	4b42      	ldr	r3, [pc, #264]	; (800f98c <__multiply+0x144>)
 800f882:	4843      	ldr	r0, [pc, #268]	; (800f990 <__multiply+0x148>)
 800f884:	f240 115d 	movw	r1, #349	; 0x15d
 800f888:	f000 fb14 	bl	800feb4 <__assert_func>
 800f88c:	f100 0614 	add.w	r6, r0, #20
 800f890:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f894:	4633      	mov	r3, r6
 800f896:	2200      	movs	r2, #0
 800f898:	4543      	cmp	r3, r8
 800f89a:	d31e      	bcc.n	800f8da <__multiply+0x92>
 800f89c:	f105 0c14 	add.w	ip, r5, #20
 800f8a0:	f104 0314 	add.w	r3, r4, #20
 800f8a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f8a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f8ac:	9202      	str	r2, [sp, #8]
 800f8ae:	ebac 0205 	sub.w	r2, ip, r5
 800f8b2:	3a15      	subs	r2, #21
 800f8b4:	f022 0203 	bic.w	r2, r2, #3
 800f8b8:	3204      	adds	r2, #4
 800f8ba:	f105 0115 	add.w	r1, r5, #21
 800f8be:	458c      	cmp	ip, r1
 800f8c0:	bf38      	it	cc
 800f8c2:	2204      	movcc	r2, #4
 800f8c4:	9201      	str	r2, [sp, #4]
 800f8c6:	9a02      	ldr	r2, [sp, #8]
 800f8c8:	9303      	str	r3, [sp, #12]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d808      	bhi.n	800f8e0 <__multiply+0x98>
 800f8ce:	2f00      	cmp	r7, #0
 800f8d0:	dc55      	bgt.n	800f97e <__multiply+0x136>
 800f8d2:	6107      	str	r7, [r0, #16]
 800f8d4:	b005      	add	sp, #20
 800f8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8da:	f843 2b04 	str.w	r2, [r3], #4
 800f8de:	e7db      	b.n	800f898 <__multiply+0x50>
 800f8e0:	f8b3 a000 	ldrh.w	sl, [r3]
 800f8e4:	f1ba 0f00 	cmp.w	sl, #0
 800f8e8:	d020      	beq.n	800f92c <__multiply+0xe4>
 800f8ea:	f105 0e14 	add.w	lr, r5, #20
 800f8ee:	46b1      	mov	r9, r6
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f8f6:	f8d9 b000 	ldr.w	fp, [r9]
 800f8fa:	b2a1      	uxth	r1, r4
 800f8fc:	fa1f fb8b 	uxth.w	fp, fp
 800f900:	fb0a b101 	mla	r1, sl, r1, fp
 800f904:	4411      	add	r1, r2
 800f906:	f8d9 2000 	ldr.w	r2, [r9]
 800f90a:	0c24      	lsrs	r4, r4, #16
 800f90c:	0c12      	lsrs	r2, r2, #16
 800f90e:	fb0a 2404 	mla	r4, sl, r4, r2
 800f912:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f916:	b289      	uxth	r1, r1
 800f918:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f91c:	45f4      	cmp	ip, lr
 800f91e:	f849 1b04 	str.w	r1, [r9], #4
 800f922:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f926:	d8e4      	bhi.n	800f8f2 <__multiply+0xaa>
 800f928:	9901      	ldr	r1, [sp, #4]
 800f92a:	5072      	str	r2, [r6, r1]
 800f92c:	9a03      	ldr	r2, [sp, #12]
 800f92e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f932:	3304      	adds	r3, #4
 800f934:	f1b9 0f00 	cmp.w	r9, #0
 800f938:	d01f      	beq.n	800f97a <__multiply+0x132>
 800f93a:	6834      	ldr	r4, [r6, #0]
 800f93c:	f105 0114 	add.w	r1, r5, #20
 800f940:	46b6      	mov	lr, r6
 800f942:	f04f 0a00 	mov.w	sl, #0
 800f946:	880a      	ldrh	r2, [r1, #0]
 800f948:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f94c:	fb09 b202 	mla	r2, r9, r2, fp
 800f950:	4492      	add	sl, r2
 800f952:	b2a4      	uxth	r4, r4
 800f954:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f958:	f84e 4b04 	str.w	r4, [lr], #4
 800f95c:	f851 4b04 	ldr.w	r4, [r1], #4
 800f960:	f8be 2000 	ldrh.w	r2, [lr]
 800f964:	0c24      	lsrs	r4, r4, #16
 800f966:	fb09 2404 	mla	r4, r9, r4, r2
 800f96a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f96e:	458c      	cmp	ip, r1
 800f970:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f974:	d8e7      	bhi.n	800f946 <__multiply+0xfe>
 800f976:	9a01      	ldr	r2, [sp, #4]
 800f978:	50b4      	str	r4, [r6, r2]
 800f97a:	3604      	adds	r6, #4
 800f97c:	e7a3      	b.n	800f8c6 <__multiply+0x7e>
 800f97e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f982:	2b00      	cmp	r3, #0
 800f984:	d1a5      	bne.n	800f8d2 <__multiply+0x8a>
 800f986:	3f01      	subs	r7, #1
 800f988:	e7a1      	b.n	800f8ce <__multiply+0x86>
 800f98a:	bf00      	nop
 800f98c:	080123c3 	.word	0x080123c3
 800f990:	080123d4 	.word	0x080123d4

0800f994 <__pow5mult>:
 800f994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f998:	4615      	mov	r5, r2
 800f99a:	f012 0203 	ands.w	r2, r2, #3
 800f99e:	4606      	mov	r6, r0
 800f9a0:	460f      	mov	r7, r1
 800f9a2:	d007      	beq.n	800f9b4 <__pow5mult+0x20>
 800f9a4:	4c25      	ldr	r4, [pc, #148]	; (800fa3c <__pow5mult+0xa8>)
 800f9a6:	3a01      	subs	r2, #1
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f9ae:	f7ff fe9b 	bl	800f6e8 <__multadd>
 800f9b2:	4607      	mov	r7, r0
 800f9b4:	10ad      	asrs	r5, r5, #2
 800f9b6:	d03d      	beq.n	800fa34 <__pow5mult+0xa0>
 800f9b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f9ba:	b97c      	cbnz	r4, 800f9dc <__pow5mult+0x48>
 800f9bc:	2010      	movs	r0, #16
 800f9be:	f7ff fe29 	bl	800f614 <malloc>
 800f9c2:	4602      	mov	r2, r0
 800f9c4:	6270      	str	r0, [r6, #36]	; 0x24
 800f9c6:	b928      	cbnz	r0, 800f9d4 <__pow5mult+0x40>
 800f9c8:	4b1d      	ldr	r3, [pc, #116]	; (800fa40 <__pow5mult+0xac>)
 800f9ca:	481e      	ldr	r0, [pc, #120]	; (800fa44 <__pow5mult+0xb0>)
 800f9cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f9d0:	f000 fa70 	bl	800feb4 <__assert_func>
 800f9d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f9d8:	6004      	str	r4, [r0, #0]
 800f9da:	60c4      	str	r4, [r0, #12]
 800f9dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f9e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f9e4:	b94c      	cbnz	r4, 800f9fa <__pow5mult+0x66>
 800f9e6:	f240 2171 	movw	r1, #625	; 0x271
 800f9ea:	4630      	mov	r0, r6
 800f9ec:	f7ff ff16 	bl	800f81c <__i2b>
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f9f6:	4604      	mov	r4, r0
 800f9f8:	6003      	str	r3, [r0, #0]
 800f9fa:	f04f 0900 	mov.w	r9, #0
 800f9fe:	07eb      	lsls	r3, r5, #31
 800fa00:	d50a      	bpl.n	800fa18 <__pow5mult+0x84>
 800fa02:	4639      	mov	r1, r7
 800fa04:	4622      	mov	r2, r4
 800fa06:	4630      	mov	r0, r6
 800fa08:	f7ff ff1e 	bl	800f848 <__multiply>
 800fa0c:	4639      	mov	r1, r7
 800fa0e:	4680      	mov	r8, r0
 800fa10:	4630      	mov	r0, r6
 800fa12:	f7ff fe47 	bl	800f6a4 <_Bfree>
 800fa16:	4647      	mov	r7, r8
 800fa18:	106d      	asrs	r5, r5, #1
 800fa1a:	d00b      	beq.n	800fa34 <__pow5mult+0xa0>
 800fa1c:	6820      	ldr	r0, [r4, #0]
 800fa1e:	b938      	cbnz	r0, 800fa30 <__pow5mult+0x9c>
 800fa20:	4622      	mov	r2, r4
 800fa22:	4621      	mov	r1, r4
 800fa24:	4630      	mov	r0, r6
 800fa26:	f7ff ff0f 	bl	800f848 <__multiply>
 800fa2a:	6020      	str	r0, [r4, #0]
 800fa2c:	f8c0 9000 	str.w	r9, [r0]
 800fa30:	4604      	mov	r4, r0
 800fa32:	e7e4      	b.n	800f9fe <__pow5mult+0x6a>
 800fa34:	4638      	mov	r0, r7
 800fa36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa3a:	bf00      	nop
 800fa3c:	08012528 	.word	0x08012528
 800fa40:	0801234d 	.word	0x0801234d
 800fa44:	080123d4 	.word	0x080123d4

0800fa48 <__lshift>:
 800fa48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa4c:	460c      	mov	r4, r1
 800fa4e:	6849      	ldr	r1, [r1, #4]
 800fa50:	6923      	ldr	r3, [r4, #16]
 800fa52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fa56:	68a3      	ldr	r3, [r4, #8]
 800fa58:	4607      	mov	r7, r0
 800fa5a:	4691      	mov	r9, r2
 800fa5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa60:	f108 0601 	add.w	r6, r8, #1
 800fa64:	42b3      	cmp	r3, r6
 800fa66:	db0b      	blt.n	800fa80 <__lshift+0x38>
 800fa68:	4638      	mov	r0, r7
 800fa6a:	f7ff fddb 	bl	800f624 <_Balloc>
 800fa6e:	4605      	mov	r5, r0
 800fa70:	b948      	cbnz	r0, 800fa86 <__lshift+0x3e>
 800fa72:	4602      	mov	r2, r0
 800fa74:	4b28      	ldr	r3, [pc, #160]	; (800fb18 <__lshift+0xd0>)
 800fa76:	4829      	ldr	r0, [pc, #164]	; (800fb1c <__lshift+0xd4>)
 800fa78:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fa7c:	f000 fa1a 	bl	800feb4 <__assert_func>
 800fa80:	3101      	adds	r1, #1
 800fa82:	005b      	lsls	r3, r3, #1
 800fa84:	e7ee      	b.n	800fa64 <__lshift+0x1c>
 800fa86:	2300      	movs	r3, #0
 800fa88:	f100 0114 	add.w	r1, r0, #20
 800fa8c:	f100 0210 	add.w	r2, r0, #16
 800fa90:	4618      	mov	r0, r3
 800fa92:	4553      	cmp	r3, sl
 800fa94:	db33      	blt.n	800fafe <__lshift+0xb6>
 800fa96:	6920      	ldr	r0, [r4, #16]
 800fa98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa9c:	f104 0314 	add.w	r3, r4, #20
 800faa0:	f019 091f 	ands.w	r9, r9, #31
 800faa4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800faa8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800faac:	d02b      	beq.n	800fb06 <__lshift+0xbe>
 800faae:	f1c9 0e20 	rsb	lr, r9, #32
 800fab2:	468a      	mov	sl, r1
 800fab4:	2200      	movs	r2, #0
 800fab6:	6818      	ldr	r0, [r3, #0]
 800fab8:	fa00 f009 	lsl.w	r0, r0, r9
 800fabc:	4302      	orrs	r2, r0
 800fabe:	f84a 2b04 	str.w	r2, [sl], #4
 800fac2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fac6:	459c      	cmp	ip, r3
 800fac8:	fa22 f20e 	lsr.w	r2, r2, lr
 800facc:	d8f3      	bhi.n	800fab6 <__lshift+0x6e>
 800face:	ebac 0304 	sub.w	r3, ip, r4
 800fad2:	3b15      	subs	r3, #21
 800fad4:	f023 0303 	bic.w	r3, r3, #3
 800fad8:	3304      	adds	r3, #4
 800fada:	f104 0015 	add.w	r0, r4, #21
 800fade:	4584      	cmp	ip, r0
 800fae0:	bf38      	it	cc
 800fae2:	2304      	movcc	r3, #4
 800fae4:	50ca      	str	r2, [r1, r3]
 800fae6:	b10a      	cbz	r2, 800faec <__lshift+0xa4>
 800fae8:	f108 0602 	add.w	r6, r8, #2
 800faec:	3e01      	subs	r6, #1
 800faee:	4638      	mov	r0, r7
 800faf0:	612e      	str	r6, [r5, #16]
 800faf2:	4621      	mov	r1, r4
 800faf4:	f7ff fdd6 	bl	800f6a4 <_Bfree>
 800faf8:	4628      	mov	r0, r5
 800fafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fafe:	f842 0f04 	str.w	r0, [r2, #4]!
 800fb02:	3301      	adds	r3, #1
 800fb04:	e7c5      	b.n	800fa92 <__lshift+0x4a>
 800fb06:	3904      	subs	r1, #4
 800fb08:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb10:	459c      	cmp	ip, r3
 800fb12:	d8f9      	bhi.n	800fb08 <__lshift+0xc0>
 800fb14:	e7ea      	b.n	800faec <__lshift+0xa4>
 800fb16:	bf00      	nop
 800fb18:	080123c3 	.word	0x080123c3
 800fb1c:	080123d4 	.word	0x080123d4

0800fb20 <__mcmp>:
 800fb20:	b530      	push	{r4, r5, lr}
 800fb22:	6902      	ldr	r2, [r0, #16]
 800fb24:	690c      	ldr	r4, [r1, #16]
 800fb26:	1b12      	subs	r2, r2, r4
 800fb28:	d10e      	bne.n	800fb48 <__mcmp+0x28>
 800fb2a:	f100 0314 	add.w	r3, r0, #20
 800fb2e:	3114      	adds	r1, #20
 800fb30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fb34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fb38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fb3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fb40:	42a5      	cmp	r5, r4
 800fb42:	d003      	beq.n	800fb4c <__mcmp+0x2c>
 800fb44:	d305      	bcc.n	800fb52 <__mcmp+0x32>
 800fb46:	2201      	movs	r2, #1
 800fb48:	4610      	mov	r0, r2
 800fb4a:	bd30      	pop	{r4, r5, pc}
 800fb4c:	4283      	cmp	r3, r0
 800fb4e:	d3f3      	bcc.n	800fb38 <__mcmp+0x18>
 800fb50:	e7fa      	b.n	800fb48 <__mcmp+0x28>
 800fb52:	f04f 32ff 	mov.w	r2, #4294967295
 800fb56:	e7f7      	b.n	800fb48 <__mcmp+0x28>

0800fb58 <__mdiff>:
 800fb58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb5c:	460c      	mov	r4, r1
 800fb5e:	4606      	mov	r6, r0
 800fb60:	4611      	mov	r1, r2
 800fb62:	4620      	mov	r0, r4
 800fb64:	4617      	mov	r7, r2
 800fb66:	f7ff ffdb 	bl	800fb20 <__mcmp>
 800fb6a:	1e05      	subs	r5, r0, #0
 800fb6c:	d110      	bne.n	800fb90 <__mdiff+0x38>
 800fb6e:	4629      	mov	r1, r5
 800fb70:	4630      	mov	r0, r6
 800fb72:	f7ff fd57 	bl	800f624 <_Balloc>
 800fb76:	b930      	cbnz	r0, 800fb86 <__mdiff+0x2e>
 800fb78:	4b39      	ldr	r3, [pc, #228]	; (800fc60 <__mdiff+0x108>)
 800fb7a:	4602      	mov	r2, r0
 800fb7c:	f240 2132 	movw	r1, #562	; 0x232
 800fb80:	4838      	ldr	r0, [pc, #224]	; (800fc64 <__mdiff+0x10c>)
 800fb82:	f000 f997 	bl	800feb4 <__assert_func>
 800fb86:	2301      	movs	r3, #1
 800fb88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fb8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb90:	bfa4      	itt	ge
 800fb92:	463b      	movge	r3, r7
 800fb94:	4627      	movge	r7, r4
 800fb96:	4630      	mov	r0, r6
 800fb98:	6879      	ldr	r1, [r7, #4]
 800fb9a:	bfa6      	itte	ge
 800fb9c:	461c      	movge	r4, r3
 800fb9e:	2500      	movge	r5, #0
 800fba0:	2501      	movlt	r5, #1
 800fba2:	f7ff fd3f 	bl	800f624 <_Balloc>
 800fba6:	b920      	cbnz	r0, 800fbb2 <__mdiff+0x5a>
 800fba8:	4b2d      	ldr	r3, [pc, #180]	; (800fc60 <__mdiff+0x108>)
 800fbaa:	4602      	mov	r2, r0
 800fbac:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fbb0:	e7e6      	b.n	800fb80 <__mdiff+0x28>
 800fbb2:	693e      	ldr	r6, [r7, #16]
 800fbb4:	60c5      	str	r5, [r0, #12]
 800fbb6:	6925      	ldr	r5, [r4, #16]
 800fbb8:	f107 0114 	add.w	r1, r7, #20
 800fbbc:	f104 0914 	add.w	r9, r4, #20
 800fbc0:	f100 0e14 	add.w	lr, r0, #20
 800fbc4:	f107 0210 	add.w	r2, r7, #16
 800fbc8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fbcc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fbd0:	46f2      	mov	sl, lr
 800fbd2:	2700      	movs	r7, #0
 800fbd4:	f859 3b04 	ldr.w	r3, [r9], #4
 800fbd8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fbdc:	fa1f f883 	uxth.w	r8, r3
 800fbe0:	fa17 f78b 	uxtah	r7, r7, fp
 800fbe4:	0c1b      	lsrs	r3, r3, #16
 800fbe6:	eba7 0808 	sub.w	r8, r7, r8
 800fbea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fbee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fbf2:	fa1f f888 	uxth.w	r8, r8
 800fbf6:	141f      	asrs	r7, r3, #16
 800fbf8:	454d      	cmp	r5, r9
 800fbfa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fbfe:	f84a 3b04 	str.w	r3, [sl], #4
 800fc02:	d8e7      	bhi.n	800fbd4 <__mdiff+0x7c>
 800fc04:	1b2b      	subs	r3, r5, r4
 800fc06:	3b15      	subs	r3, #21
 800fc08:	f023 0303 	bic.w	r3, r3, #3
 800fc0c:	3304      	adds	r3, #4
 800fc0e:	3415      	adds	r4, #21
 800fc10:	42a5      	cmp	r5, r4
 800fc12:	bf38      	it	cc
 800fc14:	2304      	movcc	r3, #4
 800fc16:	4419      	add	r1, r3
 800fc18:	4473      	add	r3, lr
 800fc1a:	469e      	mov	lr, r3
 800fc1c:	460d      	mov	r5, r1
 800fc1e:	4565      	cmp	r5, ip
 800fc20:	d30e      	bcc.n	800fc40 <__mdiff+0xe8>
 800fc22:	f10c 0203 	add.w	r2, ip, #3
 800fc26:	1a52      	subs	r2, r2, r1
 800fc28:	f022 0203 	bic.w	r2, r2, #3
 800fc2c:	3903      	subs	r1, #3
 800fc2e:	458c      	cmp	ip, r1
 800fc30:	bf38      	it	cc
 800fc32:	2200      	movcc	r2, #0
 800fc34:	441a      	add	r2, r3
 800fc36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fc3a:	b17b      	cbz	r3, 800fc5c <__mdiff+0x104>
 800fc3c:	6106      	str	r6, [r0, #16]
 800fc3e:	e7a5      	b.n	800fb8c <__mdiff+0x34>
 800fc40:	f855 8b04 	ldr.w	r8, [r5], #4
 800fc44:	fa17 f488 	uxtah	r4, r7, r8
 800fc48:	1422      	asrs	r2, r4, #16
 800fc4a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800fc4e:	b2a4      	uxth	r4, r4
 800fc50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800fc54:	f84e 4b04 	str.w	r4, [lr], #4
 800fc58:	1417      	asrs	r7, r2, #16
 800fc5a:	e7e0      	b.n	800fc1e <__mdiff+0xc6>
 800fc5c:	3e01      	subs	r6, #1
 800fc5e:	e7ea      	b.n	800fc36 <__mdiff+0xde>
 800fc60:	080123c3 	.word	0x080123c3
 800fc64:	080123d4 	.word	0x080123d4

0800fc68 <__d2b>:
 800fc68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc6c:	4689      	mov	r9, r1
 800fc6e:	2101      	movs	r1, #1
 800fc70:	ec57 6b10 	vmov	r6, r7, d0
 800fc74:	4690      	mov	r8, r2
 800fc76:	f7ff fcd5 	bl	800f624 <_Balloc>
 800fc7a:	4604      	mov	r4, r0
 800fc7c:	b930      	cbnz	r0, 800fc8c <__d2b+0x24>
 800fc7e:	4602      	mov	r2, r0
 800fc80:	4b25      	ldr	r3, [pc, #148]	; (800fd18 <__d2b+0xb0>)
 800fc82:	4826      	ldr	r0, [pc, #152]	; (800fd1c <__d2b+0xb4>)
 800fc84:	f240 310a 	movw	r1, #778	; 0x30a
 800fc88:	f000 f914 	bl	800feb4 <__assert_func>
 800fc8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fc90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fc94:	bb35      	cbnz	r5, 800fce4 <__d2b+0x7c>
 800fc96:	2e00      	cmp	r6, #0
 800fc98:	9301      	str	r3, [sp, #4]
 800fc9a:	d028      	beq.n	800fcee <__d2b+0x86>
 800fc9c:	4668      	mov	r0, sp
 800fc9e:	9600      	str	r6, [sp, #0]
 800fca0:	f7ff fd8c 	bl	800f7bc <__lo0bits>
 800fca4:	9900      	ldr	r1, [sp, #0]
 800fca6:	b300      	cbz	r0, 800fcea <__d2b+0x82>
 800fca8:	9a01      	ldr	r2, [sp, #4]
 800fcaa:	f1c0 0320 	rsb	r3, r0, #32
 800fcae:	fa02 f303 	lsl.w	r3, r2, r3
 800fcb2:	430b      	orrs	r3, r1
 800fcb4:	40c2      	lsrs	r2, r0
 800fcb6:	6163      	str	r3, [r4, #20]
 800fcb8:	9201      	str	r2, [sp, #4]
 800fcba:	9b01      	ldr	r3, [sp, #4]
 800fcbc:	61a3      	str	r3, [r4, #24]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	bf14      	ite	ne
 800fcc2:	2202      	movne	r2, #2
 800fcc4:	2201      	moveq	r2, #1
 800fcc6:	6122      	str	r2, [r4, #16]
 800fcc8:	b1d5      	cbz	r5, 800fd00 <__d2b+0x98>
 800fcca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fcce:	4405      	add	r5, r0
 800fcd0:	f8c9 5000 	str.w	r5, [r9]
 800fcd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fcd8:	f8c8 0000 	str.w	r0, [r8]
 800fcdc:	4620      	mov	r0, r4
 800fcde:	b003      	add	sp, #12
 800fce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fce8:	e7d5      	b.n	800fc96 <__d2b+0x2e>
 800fcea:	6161      	str	r1, [r4, #20]
 800fcec:	e7e5      	b.n	800fcba <__d2b+0x52>
 800fcee:	a801      	add	r0, sp, #4
 800fcf0:	f7ff fd64 	bl	800f7bc <__lo0bits>
 800fcf4:	9b01      	ldr	r3, [sp, #4]
 800fcf6:	6163      	str	r3, [r4, #20]
 800fcf8:	2201      	movs	r2, #1
 800fcfa:	6122      	str	r2, [r4, #16]
 800fcfc:	3020      	adds	r0, #32
 800fcfe:	e7e3      	b.n	800fcc8 <__d2b+0x60>
 800fd00:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fd04:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd08:	f8c9 0000 	str.w	r0, [r9]
 800fd0c:	6918      	ldr	r0, [r3, #16]
 800fd0e:	f7ff fd35 	bl	800f77c <__hi0bits>
 800fd12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fd16:	e7df      	b.n	800fcd8 <__d2b+0x70>
 800fd18:	080123c3 	.word	0x080123c3
 800fd1c:	080123d4 	.word	0x080123d4

0800fd20 <_calloc_r>:
 800fd20:	b513      	push	{r0, r1, r4, lr}
 800fd22:	434a      	muls	r2, r1
 800fd24:	4611      	mov	r1, r2
 800fd26:	9201      	str	r2, [sp, #4]
 800fd28:	f000 f85a 	bl	800fde0 <_malloc_r>
 800fd2c:	4604      	mov	r4, r0
 800fd2e:	b118      	cbz	r0, 800fd38 <_calloc_r+0x18>
 800fd30:	9a01      	ldr	r2, [sp, #4]
 800fd32:	2100      	movs	r1, #0
 800fd34:	f7fe fa10 	bl	800e158 <memset>
 800fd38:	4620      	mov	r0, r4
 800fd3a:	b002      	add	sp, #8
 800fd3c:	bd10      	pop	{r4, pc}
	...

0800fd40 <_free_r>:
 800fd40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd42:	2900      	cmp	r1, #0
 800fd44:	d048      	beq.n	800fdd8 <_free_r+0x98>
 800fd46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd4a:	9001      	str	r0, [sp, #4]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	f1a1 0404 	sub.w	r4, r1, #4
 800fd52:	bfb8      	it	lt
 800fd54:	18e4      	addlt	r4, r4, r3
 800fd56:	f000 f8ef 	bl	800ff38 <__malloc_lock>
 800fd5a:	4a20      	ldr	r2, [pc, #128]	; (800fddc <_free_r+0x9c>)
 800fd5c:	9801      	ldr	r0, [sp, #4]
 800fd5e:	6813      	ldr	r3, [r2, #0]
 800fd60:	4615      	mov	r5, r2
 800fd62:	b933      	cbnz	r3, 800fd72 <_free_r+0x32>
 800fd64:	6063      	str	r3, [r4, #4]
 800fd66:	6014      	str	r4, [r2, #0]
 800fd68:	b003      	add	sp, #12
 800fd6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd6e:	f000 b8e9 	b.w	800ff44 <__malloc_unlock>
 800fd72:	42a3      	cmp	r3, r4
 800fd74:	d90b      	bls.n	800fd8e <_free_r+0x4e>
 800fd76:	6821      	ldr	r1, [r4, #0]
 800fd78:	1862      	adds	r2, r4, r1
 800fd7a:	4293      	cmp	r3, r2
 800fd7c:	bf04      	itt	eq
 800fd7e:	681a      	ldreq	r2, [r3, #0]
 800fd80:	685b      	ldreq	r3, [r3, #4]
 800fd82:	6063      	str	r3, [r4, #4]
 800fd84:	bf04      	itt	eq
 800fd86:	1852      	addeq	r2, r2, r1
 800fd88:	6022      	streq	r2, [r4, #0]
 800fd8a:	602c      	str	r4, [r5, #0]
 800fd8c:	e7ec      	b.n	800fd68 <_free_r+0x28>
 800fd8e:	461a      	mov	r2, r3
 800fd90:	685b      	ldr	r3, [r3, #4]
 800fd92:	b10b      	cbz	r3, 800fd98 <_free_r+0x58>
 800fd94:	42a3      	cmp	r3, r4
 800fd96:	d9fa      	bls.n	800fd8e <_free_r+0x4e>
 800fd98:	6811      	ldr	r1, [r2, #0]
 800fd9a:	1855      	adds	r5, r2, r1
 800fd9c:	42a5      	cmp	r5, r4
 800fd9e:	d10b      	bne.n	800fdb8 <_free_r+0x78>
 800fda0:	6824      	ldr	r4, [r4, #0]
 800fda2:	4421      	add	r1, r4
 800fda4:	1854      	adds	r4, r2, r1
 800fda6:	42a3      	cmp	r3, r4
 800fda8:	6011      	str	r1, [r2, #0]
 800fdaa:	d1dd      	bne.n	800fd68 <_free_r+0x28>
 800fdac:	681c      	ldr	r4, [r3, #0]
 800fdae:	685b      	ldr	r3, [r3, #4]
 800fdb0:	6053      	str	r3, [r2, #4]
 800fdb2:	4421      	add	r1, r4
 800fdb4:	6011      	str	r1, [r2, #0]
 800fdb6:	e7d7      	b.n	800fd68 <_free_r+0x28>
 800fdb8:	d902      	bls.n	800fdc0 <_free_r+0x80>
 800fdba:	230c      	movs	r3, #12
 800fdbc:	6003      	str	r3, [r0, #0]
 800fdbe:	e7d3      	b.n	800fd68 <_free_r+0x28>
 800fdc0:	6825      	ldr	r5, [r4, #0]
 800fdc2:	1961      	adds	r1, r4, r5
 800fdc4:	428b      	cmp	r3, r1
 800fdc6:	bf04      	itt	eq
 800fdc8:	6819      	ldreq	r1, [r3, #0]
 800fdca:	685b      	ldreq	r3, [r3, #4]
 800fdcc:	6063      	str	r3, [r4, #4]
 800fdce:	bf04      	itt	eq
 800fdd0:	1949      	addeq	r1, r1, r5
 800fdd2:	6021      	streq	r1, [r4, #0]
 800fdd4:	6054      	str	r4, [r2, #4]
 800fdd6:	e7c7      	b.n	800fd68 <_free_r+0x28>
 800fdd8:	b003      	add	sp, #12
 800fdda:	bd30      	pop	{r4, r5, pc}
 800fddc:	240004e4 	.word	0x240004e4

0800fde0 <_malloc_r>:
 800fde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fde2:	1ccd      	adds	r5, r1, #3
 800fde4:	f025 0503 	bic.w	r5, r5, #3
 800fde8:	3508      	adds	r5, #8
 800fdea:	2d0c      	cmp	r5, #12
 800fdec:	bf38      	it	cc
 800fdee:	250c      	movcc	r5, #12
 800fdf0:	2d00      	cmp	r5, #0
 800fdf2:	4606      	mov	r6, r0
 800fdf4:	db01      	blt.n	800fdfa <_malloc_r+0x1a>
 800fdf6:	42a9      	cmp	r1, r5
 800fdf8:	d903      	bls.n	800fe02 <_malloc_r+0x22>
 800fdfa:	230c      	movs	r3, #12
 800fdfc:	6033      	str	r3, [r6, #0]
 800fdfe:	2000      	movs	r0, #0
 800fe00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe02:	f000 f899 	bl	800ff38 <__malloc_lock>
 800fe06:	4921      	ldr	r1, [pc, #132]	; (800fe8c <_malloc_r+0xac>)
 800fe08:	680a      	ldr	r2, [r1, #0]
 800fe0a:	4614      	mov	r4, r2
 800fe0c:	b99c      	cbnz	r4, 800fe36 <_malloc_r+0x56>
 800fe0e:	4f20      	ldr	r7, [pc, #128]	; (800fe90 <_malloc_r+0xb0>)
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	b923      	cbnz	r3, 800fe1e <_malloc_r+0x3e>
 800fe14:	4621      	mov	r1, r4
 800fe16:	4630      	mov	r0, r6
 800fe18:	f000 f83c 	bl	800fe94 <_sbrk_r>
 800fe1c:	6038      	str	r0, [r7, #0]
 800fe1e:	4629      	mov	r1, r5
 800fe20:	4630      	mov	r0, r6
 800fe22:	f000 f837 	bl	800fe94 <_sbrk_r>
 800fe26:	1c43      	adds	r3, r0, #1
 800fe28:	d123      	bne.n	800fe72 <_malloc_r+0x92>
 800fe2a:	230c      	movs	r3, #12
 800fe2c:	6033      	str	r3, [r6, #0]
 800fe2e:	4630      	mov	r0, r6
 800fe30:	f000 f888 	bl	800ff44 <__malloc_unlock>
 800fe34:	e7e3      	b.n	800fdfe <_malloc_r+0x1e>
 800fe36:	6823      	ldr	r3, [r4, #0]
 800fe38:	1b5b      	subs	r3, r3, r5
 800fe3a:	d417      	bmi.n	800fe6c <_malloc_r+0x8c>
 800fe3c:	2b0b      	cmp	r3, #11
 800fe3e:	d903      	bls.n	800fe48 <_malloc_r+0x68>
 800fe40:	6023      	str	r3, [r4, #0]
 800fe42:	441c      	add	r4, r3
 800fe44:	6025      	str	r5, [r4, #0]
 800fe46:	e004      	b.n	800fe52 <_malloc_r+0x72>
 800fe48:	6863      	ldr	r3, [r4, #4]
 800fe4a:	42a2      	cmp	r2, r4
 800fe4c:	bf0c      	ite	eq
 800fe4e:	600b      	streq	r3, [r1, #0]
 800fe50:	6053      	strne	r3, [r2, #4]
 800fe52:	4630      	mov	r0, r6
 800fe54:	f000 f876 	bl	800ff44 <__malloc_unlock>
 800fe58:	f104 000b 	add.w	r0, r4, #11
 800fe5c:	1d23      	adds	r3, r4, #4
 800fe5e:	f020 0007 	bic.w	r0, r0, #7
 800fe62:	1ac2      	subs	r2, r0, r3
 800fe64:	d0cc      	beq.n	800fe00 <_malloc_r+0x20>
 800fe66:	1a1b      	subs	r3, r3, r0
 800fe68:	50a3      	str	r3, [r4, r2]
 800fe6a:	e7c9      	b.n	800fe00 <_malloc_r+0x20>
 800fe6c:	4622      	mov	r2, r4
 800fe6e:	6864      	ldr	r4, [r4, #4]
 800fe70:	e7cc      	b.n	800fe0c <_malloc_r+0x2c>
 800fe72:	1cc4      	adds	r4, r0, #3
 800fe74:	f024 0403 	bic.w	r4, r4, #3
 800fe78:	42a0      	cmp	r0, r4
 800fe7a:	d0e3      	beq.n	800fe44 <_malloc_r+0x64>
 800fe7c:	1a21      	subs	r1, r4, r0
 800fe7e:	4630      	mov	r0, r6
 800fe80:	f000 f808 	bl	800fe94 <_sbrk_r>
 800fe84:	3001      	adds	r0, #1
 800fe86:	d1dd      	bne.n	800fe44 <_malloc_r+0x64>
 800fe88:	e7cf      	b.n	800fe2a <_malloc_r+0x4a>
 800fe8a:	bf00      	nop
 800fe8c:	240004e4 	.word	0x240004e4
 800fe90:	240004e8 	.word	0x240004e8

0800fe94 <_sbrk_r>:
 800fe94:	b538      	push	{r3, r4, r5, lr}
 800fe96:	4d06      	ldr	r5, [pc, #24]	; (800feb0 <_sbrk_r+0x1c>)
 800fe98:	2300      	movs	r3, #0
 800fe9a:	4604      	mov	r4, r0
 800fe9c:	4608      	mov	r0, r1
 800fe9e:	602b      	str	r3, [r5, #0]
 800fea0:	f7f3 f818 	bl	8002ed4 <_sbrk>
 800fea4:	1c43      	adds	r3, r0, #1
 800fea6:	d102      	bne.n	800feae <_sbrk_r+0x1a>
 800fea8:	682b      	ldr	r3, [r5, #0]
 800feaa:	b103      	cbz	r3, 800feae <_sbrk_r+0x1a>
 800feac:	6023      	str	r3, [r4, #0]
 800feae:	bd38      	pop	{r3, r4, r5, pc}
 800feb0:	24000ce8 	.word	0x24000ce8

0800feb4 <__assert_func>:
 800feb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800feb6:	4614      	mov	r4, r2
 800feb8:	461a      	mov	r2, r3
 800feba:	4b09      	ldr	r3, [pc, #36]	; (800fee0 <__assert_func+0x2c>)
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	4605      	mov	r5, r0
 800fec0:	68d8      	ldr	r0, [r3, #12]
 800fec2:	b14c      	cbz	r4, 800fed8 <__assert_func+0x24>
 800fec4:	4b07      	ldr	r3, [pc, #28]	; (800fee4 <__assert_func+0x30>)
 800fec6:	9100      	str	r1, [sp, #0]
 800fec8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fecc:	4906      	ldr	r1, [pc, #24]	; (800fee8 <__assert_func+0x34>)
 800fece:	462b      	mov	r3, r5
 800fed0:	f000 f80e 	bl	800fef0 <fiprintf>
 800fed4:	f000 fa64 	bl	80103a0 <abort>
 800fed8:	4b04      	ldr	r3, [pc, #16]	; (800feec <__assert_func+0x38>)
 800feda:	461c      	mov	r4, r3
 800fedc:	e7f3      	b.n	800fec6 <__assert_func+0x12>
 800fede:	bf00      	nop
 800fee0:	24000028 	.word	0x24000028
 800fee4:	08012534 	.word	0x08012534
 800fee8:	08012541 	.word	0x08012541
 800feec:	0801256f 	.word	0x0801256f

0800fef0 <fiprintf>:
 800fef0:	b40e      	push	{r1, r2, r3}
 800fef2:	b503      	push	{r0, r1, lr}
 800fef4:	4601      	mov	r1, r0
 800fef6:	ab03      	add	r3, sp, #12
 800fef8:	4805      	ldr	r0, [pc, #20]	; (800ff10 <fiprintf+0x20>)
 800fefa:	f853 2b04 	ldr.w	r2, [r3], #4
 800fefe:	6800      	ldr	r0, [r0, #0]
 800ff00:	9301      	str	r3, [sp, #4]
 800ff02:	f000 f84f 	bl	800ffa4 <_vfiprintf_r>
 800ff06:	b002      	add	sp, #8
 800ff08:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff0c:	b003      	add	sp, #12
 800ff0e:	4770      	bx	lr
 800ff10:	24000028 	.word	0x24000028

0800ff14 <__ascii_mbtowc>:
 800ff14:	b082      	sub	sp, #8
 800ff16:	b901      	cbnz	r1, 800ff1a <__ascii_mbtowc+0x6>
 800ff18:	a901      	add	r1, sp, #4
 800ff1a:	b142      	cbz	r2, 800ff2e <__ascii_mbtowc+0x1a>
 800ff1c:	b14b      	cbz	r3, 800ff32 <__ascii_mbtowc+0x1e>
 800ff1e:	7813      	ldrb	r3, [r2, #0]
 800ff20:	600b      	str	r3, [r1, #0]
 800ff22:	7812      	ldrb	r2, [r2, #0]
 800ff24:	1e10      	subs	r0, r2, #0
 800ff26:	bf18      	it	ne
 800ff28:	2001      	movne	r0, #1
 800ff2a:	b002      	add	sp, #8
 800ff2c:	4770      	bx	lr
 800ff2e:	4610      	mov	r0, r2
 800ff30:	e7fb      	b.n	800ff2a <__ascii_mbtowc+0x16>
 800ff32:	f06f 0001 	mvn.w	r0, #1
 800ff36:	e7f8      	b.n	800ff2a <__ascii_mbtowc+0x16>

0800ff38 <__malloc_lock>:
 800ff38:	4801      	ldr	r0, [pc, #4]	; (800ff40 <__malloc_lock+0x8>)
 800ff3a:	f000 bbf1 	b.w	8010720 <__retarget_lock_acquire_recursive>
 800ff3e:	bf00      	nop
 800ff40:	24000cf0 	.word	0x24000cf0

0800ff44 <__malloc_unlock>:
 800ff44:	4801      	ldr	r0, [pc, #4]	; (800ff4c <__malloc_unlock+0x8>)
 800ff46:	f000 bbec 	b.w	8010722 <__retarget_lock_release_recursive>
 800ff4a:	bf00      	nop
 800ff4c:	24000cf0 	.word	0x24000cf0

0800ff50 <__sfputc_r>:
 800ff50:	6893      	ldr	r3, [r2, #8]
 800ff52:	3b01      	subs	r3, #1
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	b410      	push	{r4}
 800ff58:	6093      	str	r3, [r2, #8]
 800ff5a:	da08      	bge.n	800ff6e <__sfputc_r+0x1e>
 800ff5c:	6994      	ldr	r4, [r2, #24]
 800ff5e:	42a3      	cmp	r3, r4
 800ff60:	db01      	blt.n	800ff66 <__sfputc_r+0x16>
 800ff62:	290a      	cmp	r1, #10
 800ff64:	d103      	bne.n	800ff6e <__sfputc_r+0x1e>
 800ff66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff6a:	f000 b94b 	b.w	8010204 <__swbuf_r>
 800ff6e:	6813      	ldr	r3, [r2, #0]
 800ff70:	1c58      	adds	r0, r3, #1
 800ff72:	6010      	str	r0, [r2, #0]
 800ff74:	7019      	strb	r1, [r3, #0]
 800ff76:	4608      	mov	r0, r1
 800ff78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff7c:	4770      	bx	lr

0800ff7e <__sfputs_r>:
 800ff7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff80:	4606      	mov	r6, r0
 800ff82:	460f      	mov	r7, r1
 800ff84:	4614      	mov	r4, r2
 800ff86:	18d5      	adds	r5, r2, r3
 800ff88:	42ac      	cmp	r4, r5
 800ff8a:	d101      	bne.n	800ff90 <__sfputs_r+0x12>
 800ff8c:	2000      	movs	r0, #0
 800ff8e:	e007      	b.n	800ffa0 <__sfputs_r+0x22>
 800ff90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff94:	463a      	mov	r2, r7
 800ff96:	4630      	mov	r0, r6
 800ff98:	f7ff ffda 	bl	800ff50 <__sfputc_r>
 800ff9c:	1c43      	adds	r3, r0, #1
 800ff9e:	d1f3      	bne.n	800ff88 <__sfputs_r+0xa>
 800ffa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ffa4 <_vfiprintf_r>:
 800ffa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa8:	460d      	mov	r5, r1
 800ffaa:	b09d      	sub	sp, #116	; 0x74
 800ffac:	4614      	mov	r4, r2
 800ffae:	4698      	mov	r8, r3
 800ffb0:	4606      	mov	r6, r0
 800ffb2:	b118      	cbz	r0, 800ffbc <_vfiprintf_r+0x18>
 800ffb4:	6983      	ldr	r3, [r0, #24]
 800ffb6:	b90b      	cbnz	r3, 800ffbc <_vfiprintf_r+0x18>
 800ffb8:	f000 fb14 	bl	80105e4 <__sinit>
 800ffbc:	4b89      	ldr	r3, [pc, #548]	; (80101e4 <_vfiprintf_r+0x240>)
 800ffbe:	429d      	cmp	r5, r3
 800ffc0:	d11b      	bne.n	800fffa <_vfiprintf_r+0x56>
 800ffc2:	6875      	ldr	r5, [r6, #4]
 800ffc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffc6:	07d9      	lsls	r1, r3, #31
 800ffc8:	d405      	bmi.n	800ffd6 <_vfiprintf_r+0x32>
 800ffca:	89ab      	ldrh	r3, [r5, #12]
 800ffcc:	059a      	lsls	r2, r3, #22
 800ffce:	d402      	bmi.n	800ffd6 <_vfiprintf_r+0x32>
 800ffd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ffd2:	f000 fba5 	bl	8010720 <__retarget_lock_acquire_recursive>
 800ffd6:	89ab      	ldrh	r3, [r5, #12]
 800ffd8:	071b      	lsls	r3, r3, #28
 800ffda:	d501      	bpl.n	800ffe0 <_vfiprintf_r+0x3c>
 800ffdc:	692b      	ldr	r3, [r5, #16]
 800ffde:	b9eb      	cbnz	r3, 801001c <_vfiprintf_r+0x78>
 800ffe0:	4629      	mov	r1, r5
 800ffe2:	4630      	mov	r0, r6
 800ffe4:	f000 f96e 	bl	80102c4 <__swsetup_r>
 800ffe8:	b1c0      	cbz	r0, 801001c <_vfiprintf_r+0x78>
 800ffea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ffec:	07dc      	lsls	r4, r3, #31
 800ffee:	d50e      	bpl.n	801000e <_vfiprintf_r+0x6a>
 800fff0:	f04f 30ff 	mov.w	r0, #4294967295
 800fff4:	b01d      	add	sp, #116	; 0x74
 800fff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fffa:	4b7b      	ldr	r3, [pc, #492]	; (80101e8 <_vfiprintf_r+0x244>)
 800fffc:	429d      	cmp	r5, r3
 800fffe:	d101      	bne.n	8010004 <_vfiprintf_r+0x60>
 8010000:	68b5      	ldr	r5, [r6, #8]
 8010002:	e7df      	b.n	800ffc4 <_vfiprintf_r+0x20>
 8010004:	4b79      	ldr	r3, [pc, #484]	; (80101ec <_vfiprintf_r+0x248>)
 8010006:	429d      	cmp	r5, r3
 8010008:	bf08      	it	eq
 801000a:	68f5      	ldreq	r5, [r6, #12]
 801000c:	e7da      	b.n	800ffc4 <_vfiprintf_r+0x20>
 801000e:	89ab      	ldrh	r3, [r5, #12]
 8010010:	0598      	lsls	r0, r3, #22
 8010012:	d4ed      	bmi.n	800fff0 <_vfiprintf_r+0x4c>
 8010014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010016:	f000 fb84 	bl	8010722 <__retarget_lock_release_recursive>
 801001a:	e7e9      	b.n	800fff0 <_vfiprintf_r+0x4c>
 801001c:	2300      	movs	r3, #0
 801001e:	9309      	str	r3, [sp, #36]	; 0x24
 8010020:	2320      	movs	r3, #32
 8010022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010026:	f8cd 800c 	str.w	r8, [sp, #12]
 801002a:	2330      	movs	r3, #48	; 0x30
 801002c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80101f0 <_vfiprintf_r+0x24c>
 8010030:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010034:	f04f 0901 	mov.w	r9, #1
 8010038:	4623      	mov	r3, r4
 801003a:	469a      	mov	sl, r3
 801003c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010040:	b10a      	cbz	r2, 8010046 <_vfiprintf_r+0xa2>
 8010042:	2a25      	cmp	r2, #37	; 0x25
 8010044:	d1f9      	bne.n	801003a <_vfiprintf_r+0x96>
 8010046:	ebba 0b04 	subs.w	fp, sl, r4
 801004a:	d00b      	beq.n	8010064 <_vfiprintf_r+0xc0>
 801004c:	465b      	mov	r3, fp
 801004e:	4622      	mov	r2, r4
 8010050:	4629      	mov	r1, r5
 8010052:	4630      	mov	r0, r6
 8010054:	f7ff ff93 	bl	800ff7e <__sfputs_r>
 8010058:	3001      	adds	r0, #1
 801005a:	f000 80aa 	beq.w	80101b2 <_vfiprintf_r+0x20e>
 801005e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010060:	445a      	add	r2, fp
 8010062:	9209      	str	r2, [sp, #36]	; 0x24
 8010064:	f89a 3000 	ldrb.w	r3, [sl]
 8010068:	2b00      	cmp	r3, #0
 801006a:	f000 80a2 	beq.w	80101b2 <_vfiprintf_r+0x20e>
 801006e:	2300      	movs	r3, #0
 8010070:	f04f 32ff 	mov.w	r2, #4294967295
 8010074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010078:	f10a 0a01 	add.w	sl, sl, #1
 801007c:	9304      	str	r3, [sp, #16]
 801007e:	9307      	str	r3, [sp, #28]
 8010080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010084:	931a      	str	r3, [sp, #104]	; 0x68
 8010086:	4654      	mov	r4, sl
 8010088:	2205      	movs	r2, #5
 801008a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801008e:	4858      	ldr	r0, [pc, #352]	; (80101f0 <_vfiprintf_r+0x24c>)
 8010090:	f7f0 f92e 	bl	80002f0 <memchr>
 8010094:	9a04      	ldr	r2, [sp, #16]
 8010096:	b9d8      	cbnz	r0, 80100d0 <_vfiprintf_r+0x12c>
 8010098:	06d1      	lsls	r1, r2, #27
 801009a:	bf44      	itt	mi
 801009c:	2320      	movmi	r3, #32
 801009e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100a2:	0713      	lsls	r3, r2, #28
 80100a4:	bf44      	itt	mi
 80100a6:	232b      	movmi	r3, #43	; 0x2b
 80100a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100ac:	f89a 3000 	ldrb.w	r3, [sl]
 80100b0:	2b2a      	cmp	r3, #42	; 0x2a
 80100b2:	d015      	beq.n	80100e0 <_vfiprintf_r+0x13c>
 80100b4:	9a07      	ldr	r2, [sp, #28]
 80100b6:	4654      	mov	r4, sl
 80100b8:	2000      	movs	r0, #0
 80100ba:	f04f 0c0a 	mov.w	ip, #10
 80100be:	4621      	mov	r1, r4
 80100c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80100c4:	3b30      	subs	r3, #48	; 0x30
 80100c6:	2b09      	cmp	r3, #9
 80100c8:	d94e      	bls.n	8010168 <_vfiprintf_r+0x1c4>
 80100ca:	b1b0      	cbz	r0, 80100fa <_vfiprintf_r+0x156>
 80100cc:	9207      	str	r2, [sp, #28]
 80100ce:	e014      	b.n	80100fa <_vfiprintf_r+0x156>
 80100d0:	eba0 0308 	sub.w	r3, r0, r8
 80100d4:	fa09 f303 	lsl.w	r3, r9, r3
 80100d8:	4313      	orrs	r3, r2
 80100da:	9304      	str	r3, [sp, #16]
 80100dc:	46a2      	mov	sl, r4
 80100de:	e7d2      	b.n	8010086 <_vfiprintf_r+0xe2>
 80100e0:	9b03      	ldr	r3, [sp, #12]
 80100e2:	1d19      	adds	r1, r3, #4
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	9103      	str	r1, [sp, #12]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	bfbb      	ittet	lt
 80100ec:	425b      	neglt	r3, r3
 80100ee:	f042 0202 	orrlt.w	r2, r2, #2
 80100f2:	9307      	strge	r3, [sp, #28]
 80100f4:	9307      	strlt	r3, [sp, #28]
 80100f6:	bfb8      	it	lt
 80100f8:	9204      	strlt	r2, [sp, #16]
 80100fa:	7823      	ldrb	r3, [r4, #0]
 80100fc:	2b2e      	cmp	r3, #46	; 0x2e
 80100fe:	d10c      	bne.n	801011a <_vfiprintf_r+0x176>
 8010100:	7863      	ldrb	r3, [r4, #1]
 8010102:	2b2a      	cmp	r3, #42	; 0x2a
 8010104:	d135      	bne.n	8010172 <_vfiprintf_r+0x1ce>
 8010106:	9b03      	ldr	r3, [sp, #12]
 8010108:	1d1a      	adds	r2, r3, #4
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	9203      	str	r2, [sp, #12]
 801010e:	2b00      	cmp	r3, #0
 8010110:	bfb8      	it	lt
 8010112:	f04f 33ff 	movlt.w	r3, #4294967295
 8010116:	3402      	adds	r4, #2
 8010118:	9305      	str	r3, [sp, #20]
 801011a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010200 <_vfiprintf_r+0x25c>
 801011e:	7821      	ldrb	r1, [r4, #0]
 8010120:	2203      	movs	r2, #3
 8010122:	4650      	mov	r0, sl
 8010124:	f7f0 f8e4 	bl	80002f0 <memchr>
 8010128:	b140      	cbz	r0, 801013c <_vfiprintf_r+0x198>
 801012a:	2340      	movs	r3, #64	; 0x40
 801012c:	eba0 000a 	sub.w	r0, r0, sl
 8010130:	fa03 f000 	lsl.w	r0, r3, r0
 8010134:	9b04      	ldr	r3, [sp, #16]
 8010136:	4303      	orrs	r3, r0
 8010138:	3401      	adds	r4, #1
 801013a:	9304      	str	r3, [sp, #16]
 801013c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010140:	482c      	ldr	r0, [pc, #176]	; (80101f4 <_vfiprintf_r+0x250>)
 8010142:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010146:	2206      	movs	r2, #6
 8010148:	f7f0 f8d2 	bl	80002f0 <memchr>
 801014c:	2800      	cmp	r0, #0
 801014e:	d03f      	beq.n	80101d0 <_vfiprintf_r+0x22c>
 8010150:	4b29      	ldr	r3, [pc, #164]	; (80101f8 <_vfiprintf_r+0x254>)
 8010152:	bb1b      	cbnz	r3, 801019c <_vfiprintf_r+0x1f8>
 8010154:	9b03      	ldr	r3, [sp, #12]
 8010156:	3307      	adds	r3, #7
 8010158:	f023 0307 	bic.w	r3, r3, #7
 801015c:	3308      	adds	r3, #8
 801015e:	9303      	str	r3, [sp, #12]
 8010160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010162:	443b      	add	r3, r7
 8010164:	9309      	str	r3, [sp, #36]	; 0x24
 8010166:	e767      	b.n	8010038 <_vfiprintf_r+0x94>
 8010168:	fb0c 3202 	mla	r2, ip, r2, r3
 801016c:	460c      	mov	r4, r1
 801016e:	2001      	movs	r0, #1
 8010170:	e7a5      	b.n	80100be <_vfiprintf_r+0x11a>
 8010172:	2300      	movs	r3, #0
 8010174:	3401      	adds	r4, #1
 8010176:	9305      	str	r3, [sp, #20]
 8010178:	4619      	mov	r1, r3
 801017a:	f04f 0c0a 	mov.w	ip, #10
 801017e:	4620      	mov	r0, r4
 8010180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010184:	3a30      	subs	r2, #48	; 0x30
 8010186:	2a09      	cmp	r2, #9
 8010188:	d903      	bls.n	8010192 <_vfiprintf_r+0x1ee>
 801018a:	2b00      	cmp	r3, #0
 801018c:	d0c5      	beq.n	801011a <_vfiprintf_r+0x176>
 801018e:	9105      	str	r1, [sp, #20]
 8010190:	e7c3      	b.n	801011a <_vfiprintf_r+0x176>
 8010192:	fb0c 2101 	mla	r1, ip, r1, r2
 8010196:	4604      	mov	r4, r0
 8010198:	2301      	movs	r3, #1
 801019a:	e7f0      	b.n	801017e <_vfiprintf_r+0x1da>
 801019c:	ab03      	add	r3, sp, #12
 801019e:	9300      	str	r3, [sp, #0]
 80101a0:	462a      	mov	r2, r5
 80101a2:	4b16      	ldr	r3, [pc, #88]	; (80101fc <_vfiprintf_r+0x258>)
 80101a4:	a904      	add	r1, sp, #16
 80101a6:	4630      	mov	r0, r6
 80101a8:	f7fe f86e 	bl	800e288 <_printf_float>
 80101ac:	4607      	mov	r7, r0
 80101ae:	1c78      	adds	r0, r7, #1
 80101b0:	d1d6      	bne.n	8010160 <_vfiprintf_r+0x1bc>
 80101b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80101b4:	07d9      	lsls	r1, r3, #31
 80101b6:	d405      	bmi.n	80101c4 <_vfiprintf_r+0x220>
 80101b8:	89ab      	ldrh	r3, [r5, #12]
 80101ba:	059a      	lsls	r2, r3, #22
 80101bc:	d402      	bmi.n	80101c4 <_vfiprintf_r+0x220>
 80101be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101c0:	f000 faaf 	bl	8010722 <__retarget_lock_release_recursive>
 80101c4:	89ab      	ldrh	r3, [r5, #12]
 80101c6:	065b      	lsls	r3, r3, #25
 80101c8:	f53f af12 	bmi.w	800fff0 <_vfiprintf_r+0x4c>
 80101cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80101ce:	e711      	b.n	800fff4 <_vfiprintf_r+0x50>
 80101d0:	ab03      	add	r3, sp, #12
 80101d2:	9300      	str	r3, [sp, #0]
 80101d4:	462a      	mov	r2, r5
 80101d6:	4b09      	ldr	r3, [pc, #36]	; (80101fc <_vfiprintf_r+0x258>)
 80101d8:	a904      	add	r1, sp, #16
 80101da:	4630      	mov	r0, r6
 80101dc:	f7fe fae0 	bl	800e7a0 <_printf_i>
 80101e0:	e7e4      	b.n	80101ac <_vfiprintf_r+0x208>
 80101e2:	bf00      	nop
 80101e4:	080126ac 	.word	0x080126ac
 80101e8:	080126cc 	.word	0x080126cc
 80101ec:	0801268c 	.word	0x0801268c
 80101f0:	0801257a 	.word	0x0801257a
 80101f4:	08012584 	.word	0x08012584
 80101f8:	0800e289 	.word	0x0800e289
 80101fc:	0800ff7f 	.word	0x0800ff7f
 8010200:	08012580 	.word	0x08012580

08010204 <__swbuf_r>:
 8010204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010206:	460e      	mov	r6, r1
 8010208:	4614      	mov	r4, r2
 801020a:	4605      	mov	r5, r0
 801020c:	b118      	cbz	r0, 8010216 <__swbuf_r+0x12>
 801020e:	6983      	ldr	r3, [r0, #24]
 8010210:	b90b      	cbnz	r3, 8010216 <__swbuf_r+0x12>
 8010212:	f000 f9e7 	bl	80105e4 <__sinit>
 8010216:	4b21      	ldr	r3, [pc, #132]	; (801029c <__swbuf_r+0x98>)
 8010218:	429c      	cmp	r4, r3
 801021a:	d12b      	bne.n	8010274 <__swbuf_r+0x70>
 801021c:	686c      	ldr	r4, [r5, #4]
 801021e:	69a3      	ldr	r3, [r4, #24]
 8010220:	60a3      	str	r3, [r4, #8]
 8010222:	89a3      	ldrh	r3, [r4, #12]
 8010224:	071a      	lsls	r2, r3, #28
 8010226:	d52f      	bpl.n	8010288 <__swbuf_r+0x84>
 8010228:	6923      	ldr	r3, [r4, #16]
 801022a:	b36b      	cbz	r3, 8010288 <__swbuf_r+0x84>
 801022c:	6923      	ldr	r3, [r4, #16]
 801022e:	6820      	ldr	r0, [r4, #0]
 8010230:	1ac0      	subs	r0, r0, r3
 8010232:	6963      	ldr	r3, [r4, #20]
 8010234:	b2f6      	uxtb	r6, r6
 8010236:	4283      	cmp	r3, r0
 8010238:	4637      	mov	r7, r6
 801023a:	dc04      	bgt.n	8010246 <__swbuf_r+0x42>
 801023c:	4621      	mov	r1, r4
 801023e:	4628      	mov	r0, r5
 8010240:	f000 f93c 	bl	80104bc <_fflush_r>
 8010244:	bb30      	cbnz	r0, 8010294 <__swbuf_r+0x90>
 8010246:	68a3      	ldr	r3, [r4, #8]
 8010248:	3b01      	subs	r3, #1
 801024a:	60a3      	str	r3, [r4, #8]
 801024c:	6823      	ldr	r3, [r4, #0]
 801024e:	1c5a      	adds	r2, r3, #1
 8010250:	6022      	str	r2, [r4, #0]
 8010252:	701e      	strb	r6, [r3, #0]
 8010254:	6963      	ldr	r3, [r4, #20]
 8010256:	3001      	adds	r0, #1
 8010258:	4283      	cmp	r3, r0
 801025a:	d004      	beq.n	8010266 <__swbuf_r+0x62>
 801025c:	89a3      	ldrh	r3, [r4, #12]
 801025e:	07db      	lsls	r3, r3, #31
 8010260:	d506      	bpl.n	8010270 <__swbuf_r+0x6c>
 8010262:	2e0a      	cmp	r6, #10
 8010264:	d104      	bne.n	8010270 <__swbuf_r+0x6c>
 8010266:	4621      	mov	r1, r4
 8010268:	4628      	mov	r0, r5
 801026a:	f000 f927 	bl	80104bc <_fflush_r>
 801026e:	b988      	cbnz	r0, 8010294 <__swbuf_r+0x90>
 8010270:	4638      	mov	r0, r7
 8010272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010274:	4b0a      	ldr	r3, [pc, #40]	; (80102a0 <__swbuf_r+0x9c>)
 8010276:	429c      	cmp	r4, r3
 8010278:	d101      	bne.n	801027e <__swbuf_r+0x7a>
 801027a:	68ac      	ldr	r4, [r5, #8]
 801027c:	e7cf      	b.n	801021e <__swbuf_r+0x1a>
 801027e:	4b09      	ldr	r3, [pc, #36]	; (80102a4 <__swbuf_r+0xa0>)
 8010280:	429c      	cmp	r4, r3
 8010282:	bf08      	it	eq
 8010284:	68ec      	ldreq	r4, [r5, #12]
 8010286:	e7ca      	b.n	801021e <__swbuf_r+0x1a>
 8010288:	4621      	mov	r1, r4
 801028a:	4628      	mov	r0, r5
 801028c:	f000 f81a 	bl	80102c4 <__swsetup_r>
 8010290:	2800      	cmp	r0, #0
 8010292:	d0cb      	beq.n	801022c <__swbuf_r+0x28>
 8010294:	f04f 37ff 	mov.w	r7, #4294967295
 8010298:	e7ea      	b.n	8010270 <__swbuf_r+0x6c>
 801029a:	bf00      	nop
 801029c:	080126ac 	.word	0x080126ac
 80102a0:	080126cc 	.word	0x080126cc
 80102a4:	0801268c 	.word	0x0801268c

080102a8 <__ascii_wctomb>:
 80102a8:	b149      	cbz	r1, 80102be <__ascii_wctomb+0x16>
 80102aa:	2aff      	cmp	r2, #255	; 0xff
 80102ac:	bf85      	ittet	hi
 80102ae:	238a      	movhi	r3, #138	; 0x8a
 80102b0:	6003      	strhi	r3, [r0, #0]
 80102b2:	700a      	strbls	r2, [r1, #0]
 80102b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80102b8:	bf98      	it	ls
 80102ba:	2001      	movls	r0, #1
 80102bc:	4770      	bx	lr
 80102be:	4608      	mov	r0, r1
 80102c0:	4770      	bx	lr
	...

080102c4 <__swsetup_r>:
 80102c4:	4b32      	ldr	r3, [pc, #200]	; (8010390 <__swsetup_r+0xcc>)
 80102c6:	b570      	push	{r4, r5, r6, lr}
 80102c8:	681d      	ldr	r5, [r3, #0]
 80102ca:	4606      	mov	r6, r0
 80102cc:	460c      	mov	r4, r1
 80102ce:	b125      	cbz	r5, 80102da <__swsetup_r+0x16>
 80102d0:	69ab      	ldr	r3, [r5, #24]
 80102d2:	b913      	cbnz	r3, 80102da <__swsetup_r+0x16>
 80102d4:	4628      	mov	r0, r5
 80102d6:	f000 f985 	bl	80105e4 <__sinit>
 80102da:	4b2e      	ldr	r3, [pc, #184]	; (8010394 <__swsetup_r+0xd0>)
 80102dc:	429c      	cmp	r4, r3
 80102de:	d10f      	bne.n	8010300 <__swsetup_r+0x3c>
 80102e0:	686c      	ldr	r4, [r5, #4]
 80102e2:	89a3      	ldrh	r3, [r4, #12]
 80102e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102e8:	0719      	lsls	r1, r3, #28
 80102ea:	d42c      	bmi.n	8010346 <__swsetup_r+0x82>
 80102ec:	06dd      	lsls	r5, r3, #27
 80102ee:	d411      	bmi.n	8010314 <__swsetup_r+0x50>
 80102f0:	2309      	movs	r3, #9
 80102f2:	6033      	str	r3, [r6, #0]
 80102f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80102f8:	81a3      	strh	r3, [r4, #12]
 80102fa:	f04f 30ff 	mov.w	r0, #4294967295
 80102fe:	e03e      	b.n	801037e <__swsetup_r+0xba>
 8010300:	4b25      	ldr	r3, [pc, #148]	; (8010398 <__swsetup_r+0xd4>)
 8010302:	429c      	cmp	r4, r3
 8010304:	d101      	bne.n	801030a <__swsetup_r+0x46>
 8010306:	68ac      	ldr	r4, [r5, #8]
 8010308:	e7eb      	b.n	80102e2 <__swsetup_r+0x1e>
 801030a:	4b24      	ldr	r3, [pc, #144]	; (801039c <__swsetup_r+0xd8>)
 801030c:	429c      	cmp	r4, r3
 801030e:	bf08      	it	eq
 8010310:	68ec      	ldreq	r4, [r5, #12]
 8010312:	e7e6      	b.n	80102e2 <__swsetup_r+0x1e>
 8010314:	0758      	lsls	r0, r3, #29
 8010316:	d512      	bpl.n	801033e <__swsetup_r+0x7a>
 8010318:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801031a:	b141      	cbz	r1, 801032e <__swsetup_r+0x6a>
 801031c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010320:	4299      	cmp	r1, r3
 8010322:	d002      	beq.n	801032a <__swsetup_r+0x66>
 8010324:	4630      	mov	r0, r6
 8010326:	f7ff fd0b 	bl	800fd40 <_free_r>
 801032a:	2300      	movs	r3, #0
 801032c:	6363      	str	r3, [r4, #52]	; 0x34
 801032e:	89a3      	ldrh	r3, [r4, #12]
 8010330:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010334:	81a3      	strh	r3, [r4, #12]
 8010336:	2300      	movs	r3, #0
 8010338:	6063      	str	r3, [r4, #4]
 801033a:	6923      	ldr	r3, [r4, #16]
 801033c:	6023      	str	r3, [r4, #0]
 801033e:	89a3      	ldrh	r3, [r4, #12]
 8010340:	f043 0308 	orr.w	r3, r3, #8
 8010344:	81a3      	strh	r3, [r4, #12]
 8010346:	6923      	ldr	r3, [r4, #16]
 8010348:	b94b      	cbnz	r3, 801035e <__swsetup_r+0x9a>
 801034a:	89a3      	ldrh	r3, [r4, #12]
 801034c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010354:	d003      	beq.n	801035e <__swsetup_r+0x9a>
 8010356:	4621      	mov	r1, r4
 8010358:	4630      	mov	r0, r6
 801035a:	f000 fa07 	bl	801076c <__smakebuf_r>
 801035e:	89a0      	ldrh	r0, [r4, #12]
 8010360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010364:	f010 0301 	ands.w	r3, r0, #1
 8010368:	d00a      	beq.n	8010380 <__swsetup_r+0xbc>
 801036a:	2300      	movs	r3, #0
 801036c:	60a3      	str	r3, [r4, #8]
 801036e:	6963      	ldr	r3, [r4, #20]
 8010370:	425b      	negs	r3, r3
 8010372:	61a3      	str	r3, [r4, #24]
 8010374:	6923      	ldr	r3, [r4, #16]
 8010376:	b943      	cbnz	r3, 801038a <__swsetup_r+0xc6>
 8010378:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801037c:	d1ba      	bne.n	80102f4 <__swsetup_r+0x30>
 801037e:	bd70      	pop	{r4, r5, r6, pc}
 8010380:	0781      	lsls	r1, r0, #30
 8010382:	bf58      	it	pl
 8010384:	6963      	ldrpl	r3, [r4, #20]
 8010386:	60a3      	str	r3, [r4, #8]
 8010388:	e7f4      	b.n	8010374 <__swsetup_r+0xb0>
 801038a:	2000      	movs	r0, #0
 801038c:	e7f7      	b.n	801037e <__swsetup_r+0xba>
 801038e:	bf00      	nop
 8010390:	24000028 	.word	0x24000028
 8010394:	080126ac 	.word	0x080126ac
 8010398:	080126cc 	.word	0x080126cc
 801039c:	0801268c 	.word	0x0801268c

080103a0 <abort>:
 80103a0:	b508      	push	{r3, lr}
 80103a2:	2006      	movs	r0, #6
 80103a4:	f000 fa4a 	bl	801083c <raise>
 80103a8:	2001      	movs	r0, #1
 80103aa:	f7f2 fd1b 	bl	8002de4 <_exit>
	...

080103b0 <__sflush_r>:
 80103b0:	898a      	ldrh	r2, [r1, #12]
 80103b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103b6:	4605      	mov	r5, r0
 80103b8:	0710      	lsls	r0, r2, #28
 80103ba:	460c      	mov	r4, r1
 80103bc:	d458      	bmi.n	8010470 <__sflush_r+0xc0>
 80103be:	684b      	ldr	r3, [r1, #4]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	dc05      	bgt.n	80103d0 <__sflush_r+0x20>
 80103c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	dc02      	bgt.n	80103d0 <__sflush_r+0x20>
 80103ca:	2000      	movs	r0, #0
 80103cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80103d2:	2e00      	cmp	r6, #0
 80103d4:	d0f9      	beq.n	80103ca <__sflush_r+0x1a>
 80103d6:	2300      	movs	r3, #0
 80103d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80103dc:	682f      	ldr	r7, [r5, #0]
 80103de:	602b      	str	r3, [r5, #0]
 80103e0:	d032      	beq.n	8010448 <__sflush_r+0x98>
 80103e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80103e4:	89a3      	ldrh	r3, [r4, #12]
 80103e6:	075a      	lsls	r2, r3, #29
 80103e8:	d505      	bpl.n	80103f6 <__sflush_r+0x46>
 80103ea:	6863      	ldr	r3, [r4, #4]
 80103ec:	1ac0      	subs	r0, r0, r3
 80103ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80103f0:	b10b      	cbz	r3, 80103f6 <__sflush_r+0x46>
 80103f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80103f4:	1ac0      	subs	r0, r0, r3
 80103f6:	2300      	movs	r3, #0
 80103f8:	4602      	mov	r2, r0
 80103fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80103fc:	6a21      	ldr	r1, [r4, #32]
 80103fe:	4628      	mov	r0, r5
 8010400:	47b0      	blx	r6
 8010402:	1c43      	adds	r3, r0, #1
 8010404:	89a3      	ldrh	r3, [r4, #12]
 8010406:	d106      	bne.n	8010416 <__sflush_r+0x66>
 8010408:	6829      	ldr	r1, [r5, #0]
 801040a:	291d      	cmp	r1, #29
 801040c:	d82c      	bhi.n	8010468 <__sflush_r+0xb8>
 801040e:	4a2a      	ldr	r2, [pc, #168]	; (80104b8 <__sflush_r+0x108>)
 8010410:	40ca      	lsrs	r2, r1
 8010412:	07d6      	lsls	r6, r2, #31
 8010414:	d528      	bpl.n	8010468 <__sflush_r+0xb8>
 8010416:	2200      	movs	r2, #0
 8010418:	6062      	str	r2, [r4, #4]
 801041a:	04d9      	lsls	r1, r3, #19
 801041c:	6922      	ldr	r2, [r4, #16]
 801041e:	6022      	str	r2, [r4, #0]
 8010420:	d504      	bpl.n	801042c <__sflush_r+0x7c>
 8010422:	1c42      	adds	r2, r0, #1
 8010424:	d101      	bne.n	801042a <__sflush_r+0x7a>
 8010426:	682b      	ldr	r3, [r5, #0]
 8010428:	b903      	cbnz	r3, 801042c <__sflush_r+0x7c>
 801042a:	6560      	str	r0, [r4, #84]	; 0x54
 801042c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801042e:	602f      	str	r7, [r5, #0]
 8010430:	2900      	cmp	r1, #0
 8010432:	d0ca      	beq.n	80103ca <__sflush_r+0x1a>
 8010434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010438:	4299      	cmp	r1, r3
 801043a:	d002      	beq.n	8010442 <__sflush_r+0x92>
 801043c:	4628      	mov	r0, r5
 801043e:	f7ff fc7f 	bl	800fd40 <_free_r>
 8010442:	2000      	movs	r0, #0
 8010444:	6360      	str	r0, [r4, #52]	; 0x34
 8010446:	e7c1      	b.n	80103cc <__sflush_r+0x1c>
 8010448:	6a21      	ldr	r1, [r4, #32]
 801044a:	2301      	movs	r3, #1
 801044c:	4628      	mov	r0, r5
 801044e:	47b0      	blx	r6
 8010450:	1c41      	adds	r1, r0, #1
 8010452:	d1c7      	bne.n	80103e4 <__sflush_r+0x34>
 8010454:	682b      	ldr	r3, [r5, #0]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d0c4      	beq.n	80103e4 <__sflush_r+0x34>
 801045a:	2b1d      	cmp	r3, #29
 801045c:	d001      	beq.n	8010462 <__sflush_r+0xb2>
 801045e:	2b16      	cmp	r3, #22
 8010460:	d101      	bne.n	8010466 <__sflush_r+0xb6>
 8010462:	602f      	str	r7, [r5, #0]
 8010464:	e7b1      	b.n	80103ca <__sflush_r+0x1a>
 8010466:	89a3      	ldrh	r3, [r4, #12]
 8010468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801046c:	81a3      	strh	r3, [r4, #12]
 801046e:	e7ad      	b.n	80103cc <__sflush_r+0x1c>
 8010470:	690f      	ldr	r7, [r1, #16]
 8010472:	2f00      	cmp	r7, #0
 8010474:	d0a9      	beq.n	80103ca <__sflush_r+0x1a>
 8010476:	0793      	lsls	r3, r2, #30
 8010478:	680e      	ldr	r6, [r1, #0]
 801047a:	bf08      	it	eq
 801047c:	694b      	ldreq	r3, [r1, #20]
 801047e:	600f      	str	r7, [r1, #0]
 8010480:	bf18      	it	ne
 8010482:	2300      	movne	r3, #0
 8010484:	eba6 0807 	sub.w	r8, r6, r7
 8010488:	608b      	str	r3, [r1, #8]
 801048a:	f1b8 0f00 	cmp.w	r8, #0
 801048e:	dd9c      	ble.n	80103ca <__sflush_r+0x1a>
 8010490:	6a21      	ldr	r1, [r4, #32]
 8010492:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010494:	4643      	mov	r3, r8
 8010496:	463a      	mov	r2, r7
 8010498:	4628      	mov	r0, r5
 801049a:	47b0      	blx	r6
 801049c:	2800      	cmp	r0, #0
 801049e:	dc06      	bgt.n	80104ae <__sflush_r+0xfe>
 80104a0:	89a3      	ldrh	r3, [r4, #12]
 80104a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104a6:	81a3      	strh	r3, [r4, #12]
 80104a8:	f04f 30ff 	mov.w	r0, #4294967295
 80104ac:	e78e      	b.n	80103cc <__sflush_r+0x1c>
 80104ae:	4407      	add	r7, r0
 80104b0:	eba8 0800 	sub.w	r8, r8, r0
 80104b4:	e7e9      	b.n	801048a <__sflush_r+0xda>
 80104b6:	bf00      	nop
 80104b8:	20400001 	.word	0x20400001

080104bc <_fflush_r>:
 80104bc:	b538      	push	{r3, r4, r5, lr}
 80104be:	690b      	ldr	r3, [r1, #16]
 80104c0:	4605      	mov	r5, r0
 80104c2:	460c      	mov	r4, r1
 80104c4:	b913      	cbnz	r3, 80104cc <_fflush_r+0x10>
 80104c6:	2500      	movs	r5, #0
 80104c8:	4628      	mov	r0, r5
 80104ca:	bd38      	pop	{r3, r4, r5, pc}
 80104cc:	b118      	cbz	r0, 80104d6 <_fflush_r+0x1a>
 80104ce:	6983      	ldr	r3, [r0, #24]
 80104d0:	b90b      	cbnz	r3, 80104d6 <_fflush_r+0x1a>
 80104d2:	f000 f887 	bl	80105e4 <__sinit>
 80104d6:	4b14      	ldr	r3, [pc, #80]	; (8010528 <_fflush_r+0x6c>)
 80104d8:	429c      	cmp	r4, r3
 80104da:	d11b      	bne.n	8010514 <_fflush_r+0x58>
 80104dc:	686c      	ldr	r4, [r5, #4]
 80104de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d0ef      	beq.n	80104c6 <_fflush_r+0xa>
 80104e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80104e8:	07d0      	lsls	r0, r2, #31
 80104ea:	d404      	bmi.n	80104f6 <_fflush_r+0x3a>
 80104ec:	0599      	lsls	r1, r3, #22
 80104ee:	d402      	bmi.n	80104f6 <_fflush_r+0x3a>
 80104f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104f2:	f000 f915 	bl	8010720 <__retarget_lock_acquire_recursive>
 80104f6:	4628      	mov	r0, r5
 80104f8:	4621      	mov	r1, r4
 80104fa:	f7ff ff59 	bl	80103b0 <__sflush_r>
 80104fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010500:	07da      	lsls	r2, r3, #31
 8010502:	4605      	mov	r5, r0
 8010504:	d4e0      	bmi.n	80104c8 <_fflush_r+0xc>
 8010506:	89a3      	ldrh	r3, [r4, #12]
 8010508:	059b      	lsls	r3, r3, #22
 801050a:	d4dd      	bmi.n	80104c8 <_fflush_r+0xc>
 801050c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801050e:	f000 f908 	bl	8010722 <__retarget_lock_release_recursive>
 8010512:	e7d9      	b.n	80104c8 <_fflush_r+0xc>
 8010514:	4b05      	ldr	r3, [pc, #20]	; (801052c <_fflush_r+0x70>)
 8010516:	429c      	cmp	r4, r3
 8010518:	d101      	bne.n	801051e <_fflush_r+0x62>
 801051a:	68ac      	ldr	r4, [r5, #8]
 801051c:	e7df      	b.n	80104de <_fflush_r+0x22>
 801051e:	4b04      	ldr	r3, [pc, #16]	; (8010530 <_fflush_r+0x74>)
 8010520:	429c      	cmp	r4, r3
 8010522:	bf08      	it	eq
 8010524:	68ec      	ldreq	r4, [r5, #12]
 8010526:	e7da      	b.n	80104de <_fflush_r+0x22>
 8010528:	080126ac 	.word	0x080126ac
 801052c:	080126cc 	.word	0x080126cc
 8010530:	0801268c 	.word	0x0801268c

08010534 <std>:
 8010534:	2300      	movs	r3, #0
 8010536:	b510      	push	{r4, lr}
 8010538:	4604      	mov	r4, r0
 801053a:	e9c0 3300 	strd	r3, r3, [r0]
 801053e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010542:	6083      	str	r3, [r0, #8]
 8010544:	8181      	strh	r1, [r0, #12]
 8010546:	6643      	str	r3, [r0, #100]	; 0x64
 8010548:	81c2      	strh	r2, [r0, #14]
 801054a:	6183      	str	r3, [r0, #24]
 801054c:	4619      	mov	r1, r3
 801054e:	2208      	movs	r2, #8
 8010550:	305c      	adds	r0, #92	; 0x5c
 8010552:	f7fd fe01 	bl	800e158 <memset>
 8010556:	4b05      	ldr	r3, [pc, #20]	; (801056c <std+0x38>)
 8010558:	6263      	str	r3, [r4, #36]	; 0x24
 801055a:	4b05      	ldr	r3, [pc, #20]	; (8010570 <std+0x3c>)
 801055c:	62a3      	str	r3, [r4, #40]	; 0x28
 801055e:	4b05      	ldr	r3, [pc, #20]	; (8010574 <std+0x40>)
 8010560:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010562:	4b05      	ldr	r3, [pc, #20]	; (8010578 <std+0x44>)
 8010564:	6224      	str	r4, [r4, #32]
 8010566:	6323      	str	r3, [r4, #48]	; 0x30
 8010568:	bd10      	pop	{r4, pc}
 801056a:	bf00      	nop
 801056c:	08010875 	.word	0x08010875
 8010570:	08010897 	.word	0x08010897
 8010574:	080108cf 	.word	0x080108cf
 8010578:	080108f3 	.word	0x080108f3

0801057c <_cleanup_r>:
 801057c:	4901      	ldr	r1, [pc, #4]	; (8010584 <_cleanup_r+0x8>)
 801057e:	f000 b8af 	b.w	80106e0 <_fwalk_reent>
 8010582:	bf00      	nop
 8010584:	080104bd 	.word	0x080104bd

08010588 <__sfmoreglue>:
 8010588:	b570      	push	{r4, r5, r6, lr}
 801058a:	1e4a      	subs	r2, r1, #1
 801058c:	2568      	movs	r5, #104	; 0x68
 801058e:	4355      	muls	r5, r2
 8010590:	460e      	mov	r6, r1
 8010592:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010596:	f7ff fc23 	bl	800fde0 <_malloc_r>
 801059a:	4604      	mov	r4, r0
 801059c:	b140      	cbz	r0, 80105b0 <__sfmoreglue+0x28>
 801059e:	2100      	movs	r1, #0
 80105a0:	e9c0 1600 	strd	r1, r6, [r0]
 80105a4:	300c      	adds	r0, #12
 80105a6:	60a0      	str	r0, [r4, #8]
 80105a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80105ac:	f7fd fdd4 	bl	800e158 <memset>
 80105b0:	4620      	mov	r0, r4
 80105b2:	bd70      	pop	{r4, r5, r6, pc}

080105b4 <__sfp_lock_acquire>:
 80105b4:	4801      	ldr	r0, [pc, #4]	; (80105bc <__sfp_lock_acquire+0x8>)
 80105b6:	f000 b8b3 	b.w	8010720 <__retarget_lock_acquire_recursive>
 80105ba:	bf00      	nop
 80105bc:	24000cf4 	.word	0x24000cf4

080105c0 <__sfp_lock_release>:
 80105c0:	4801      	ldr	r0, [pc, #4]	; (80105c8 <__sfp_lock_release+0x8>)
 80105c2:	f000 b8ae 	b.w	8010722 <__retarget_lock_release_recursive>
 80105c6:	bf00      	nop
 80105c8:	24000cf4 	.word	0x24000cf4

080105cc <__sinit_lock_acquire>:
 80105cc:	4801      	ldr	r0, [pc, #4]	; (80105d4 <__sinit_lock_acquire+0x8>)
 80105ce:	f000 b8a7 	b.w	8010720 <__retarget_lock_acquire_recursive>
 80105d2:	bf00      	nop
 80105d4:	24000cef 	.word	0x24000cef

080105d8 <__sinit_lock_release>:
 80105d8:	4801      	ldr	r0, [pc, #4]	; (80105e0 <__sinit_lock_release+0x8>)
 80105da:	f000 b8a2 	b.w	8010722 <__retarget_lock_release_recursive>
 80105de:	bf00      	nop
 80105e0:	24000cef 	.word	0x24000cef

080105e4 <__sinit>:
 80105e4:	b510      	push	{r4, lr}
 80105e6:	4604      	mov	r4, r0
 80105e8:	f7ff fff0 	bl	80105cc <__sinit_lock_acquire>
 80105ec:	69a3      	ldr	r3, [r4, #24]
 80105ee:	b11b      	cbz	r3, 80105f8 <__sinit+0x14>
 80105f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105f4:	f7ff bff0 	b.w	80105d8 <__sinit_lock_release>
 80105f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80105fc:	6523      	str	r3, [r4, #80]	; 0x50
 80105fe:	4b13      	ldr	r3, [pc, #76]	; (801064c <__sinit+0x68>)
 8010600:	4a13      	ldr	r2, [pc, #76]	; (8010650 <__sinit+0x6c>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	62a2      	str	r2, [r4, #40]	; 0x28
 8010606:	42a3      	cmp	r3, r4
 8010608:	bf04      	itt	eq
 801060a:	2301      	moveq	r3, #1
 801060c:	61a3      	streq	r3, [r4, #24]
 801060e:	4620      	mov	r0, r4
 8010610:	f000 f820 	bl	8010654 <__sfp>
 8010614:	6060      	str	r0, [r4, #4]
 8010616:	4620      	mov	r0, r4
 8010618:	f000 f81c 	bl	8010654 <__sfp>
 801061c:	60a0      	str	r0, [r4, #8]
 801061e:	4620      	mov	r0, r4
 8010620:	f000 f818 	bl	8010654 <__sfp>
 8010624:	2200      	movs	r2, #0
 8010626:	60e0      	str	r0, [r4, #12]
 8010628:	2104      	movs	r1, #4
 801062a:	6860      	ldr	r0, [r4, #4]
 801062c:	f7ff ff82 	bl	8010534 <std>
 8010630:	68a0      	ldr	r0, [r4, #8]
 8010632:	2201      	movs	r2, #1
 8010634:	2109      	movs	r1, #9
 8010636:	f7ff ff7d 	bl	8010534 <std>
 801063a:	68e0      	ldr	r0, [r4, #12]
 801063c:	2202      	movs	r2, #2
 801063e:	2112      	movs	r1, #18
 8010640:	f7ff ff78 	bl	8010534 <std>
 8010644:	2301      	movs	r3, #1
 8010646:	61a3      	str	r3, [r4, #24]
 8010648:	e7d2      	b.n	80105f0 <__sinit+0xc>
 801064a:	bf00      	nop
 801064c:	08012308 	.word	0x08012308
 8010650:	0801057d 	.word	0x0801057d

08010654 <__sfp>:
 8010654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010656:	4607      	mov	r7, r0
 8010658:	f7ff ffac 	bl	80105b4 <__sfp_lock_acquire>
 801065c:	4b1e      	ldr	r3, [pc, #120]	; (80106d8 <__sfp+0x84>)
 801065e:	681e      	ldr	r6, [r3, #0]
 8010660:	69b3      	ldr	r3, [r6, #24]
 8010662:	b913      	cbnz	r3, 801066a <__sfp+0x16>
 8010664:	4630      	mov	r0, r6
 8010666:	f7ff ffbd 	bl	80105e4 <__sinit>
 801066a:	3648      	adds	r6, #72	; 0x48
 801066c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010670:	3b01      	subs	r3, #1
 8010672:	d503      	bpl.n	801067c <__sfp+0x28>
 8010674:	6833      	ldr	r3, [r6, #0]
 8010676:	b30b      	cbz	r3, 80106bc <__sfp+0x68>
 8010678:	6836      	ldr	r6, [r6, #0]
 801067a:	e7f7      	b.n	801066c <__sfp+0x18>
 801067c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010680:	b9d5      	cbnz	r5, 80106b8 <__sfp+0x64>
 8010682:	4b16      	ldr	r3, [pc, #88]	; (80106dc <__sfp+0x88>)
 8010684:	60e3      	str	r3, [r4, #12]
 8010686:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801068a:	6665      	str	r5, [r4, #100]	; 0x64
 801068c:	f000 f847 	bl	801071e <__retarget_lock_init_recursive>
 8010690:	f7ff ff96 	bl	80105c0 <__sfp_lock_release>
 8010694:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010698:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801069c:	6025      	str	r5, [r4, #0]
 801069e:	61a5      	str	r5, [r4, #24]
 80106a0:	2208      	movs	r2, #8
 80106a2:	4629      	mov	r1, r5
 80106a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80106a8:	f7fd fd56 	bl	800e158 <memset>
 80106ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80106b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80106b4:	4620      	mov	r0, r4
 80106b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106b8:	3468      	adds	r4, #104	; 0x68
 80106ba:	e7d9      	b.n	8010670 <__sfp+0x1c>
 80106bc:	2104      	movs	r1, #4
 80106be:	4638      	mov	r0, r7
 80106c0:	f7ff ff62 	bl	8010588 <__sfmoreglue>
 80106c4:	4604      	mov	r4, r0
 80106c6:	6030      	str	r0, [r6, #0]
 80106c8:	2800      	cmp	r0, #0
 80106ca:	d1d5      	bne.n	8010678 <__sfp+0x24>
 80106cc:	f7ff ff78 	bl	80105c0 <__sfp_lock_release>
 80106d0:	230c      	movs	r3, #12
 80106d2:	603b      	str	r3, [r7, #0]
 80106d4:	e7ee      	b.n	80106b4 <__sfp+0x60>
 80106d6:	bf00      	nop
 80106d8:	08012308 	.word	0x08012308
 80106dc:	ffff0001 	.word	0xffff0001

080106e0 <_fwalk_reent>:
 80106e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80106e4:	4606      	mov	r6, r0
 80106e6:	4688      	mov	r8, r1
 80106e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80106ec:	2700      	movs	r7, #0
 80106ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80106f2:	f1b9 0901 	subs.w	r9, r9, #1
 80106f6:	d505      	bpl.n	8010704 <_fwalk_reent+0x24>
 80106f8:	6824      	ldr	r4, [r4, #0]
 80106fa:	2c00      	cmp	r4, #0
 80106fc:	d1f7      	bne.n	80106ee <_fwalk_reent+0xe>
 80106fe:	4638      	mov	r0, r7
 8010700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010704:	89ab      	ldrh	r3, [r5, #12]
 8010706:	2b01      	cmp	r3, #1
 8010708:	d907      	bls.n	801071a <_fwalk_reent+0x3a>
 801070a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801070e:	3301      	adds	r3, #1
 8010710:	d003      	beq.n	801071a <_fwalk_reent+0x3a>
 8010712:	4629      	mov	r1, r5
 8010714:	4630      	mov	r0, r6
 8010716:	47c0      	blx	r8
 8010718:	4307      	orrs	r7, r0
 801071a:	3568      	adds	r5, #104	; 0x68
 801071c:	e7e9      	b.n	80106f2 <_fwalk_reent+0x12>

0801071e <__retarget_lock_init_recursive>:
 801071e:	4770      	bx	lr

08010720 <__retarget_lock_acquire_recursive>:
 8010720:	4770      	bx	lr

08010722 <__retarget_lock_release_recursive>:
 8010722:	4770      	bx	lr

08010724 <__swhatbuf_r>:
 8010724:	b570      	push	{r4, r5, r6, lr}
 8010726:	460e      	mov	r6, r1
 8010728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801072c:	2900      	cmp	r1, #0
 801072e:	b096      	sub	sp, #88	; 0x58
 8010730:	4614      	mov	r4, r2
 8010732:	461d      	mov	r5, r3
 8010734:	da07      	bge.n	8010746 <__swhatbuf_r+0x22>
 8010736:	2300      	movs	r3, #0
 8010738:	602b      	str	r3, [r5, #0]
 801073a:	89b3      	ldrh	r3, [r6, #12]
 801073c:	061a      	lsls	r2, r3, #24
 801073e:	d410      	bmi.n	8010762 <__swhatbuf_r+0x3e>
 8010740:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010744:	e00e      	b.n	8010764 <__swhatbuf_r+0x40>
 8010746:	466a      	mov	r2, sp
 8010748:	f000 f8fa 	bl	8010940 <_fstat_r>
 801074c:	2800      	cmp	r0, #0
 801074e:	dbf2      	blt.n	8010736 <__swhatbuf_r+0x12>
 8010750:	9a01      	ldr	r2, [sp, #4]
 8010752:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010756:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801075a:	425a      	negs	r2, r3
 801075c:	415a      	adcs	r2, r3
 801075e:	602a      	str	r2, [r5, #0]
 8010760:	e7ee      	b.n	8010740 <__swhatbuf_r+0x1c>
 8010762:	2340      	movs	r3, #64	; 0x40
 8010764:	2000      	movs	r0, #0
 8010766:	6023      	str	r3, [r4, #0]
 8010768:	b016      	add	sp, #88	; 0x58
 801076a:	bd70      	pop	{r4, r5, r6, pc}

0801076c <__smakebuf_r>:
 801076c:	898b      	ldrh	r3, [r1, #12]
 801076e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010770:	079d      	lsls	r5, r3, #30
 8010772:	4606      	mov	r6, r0
 8010774:	460c      	mov	r4, r1
 8010776:	d507      	bpl.n	8010788 <__smakebuf_r+0x1c>
 8010778:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801077c:	6023      	str	r3, [r4, #0]
 801077e:	6123      	str	r3, [r4, #16]
 8010780:	2301      	movs	r3, #1
 8010782:	6163      	str	r3, [r4, #20]
 8010784:	b002      	add	sp, #8
 8010786:	bd70      	pop	{r4, r5, r6, pc}
 8010788:	ab01      	add	r3, sp, #4
 801078a:	466a      	mov	r2, sp
 801078c:	f7ff ffca 	bl	8010724 <__swhatbuf_r>
 8010790:	9900      	ldr	r1, [sp, #0]
 8010792:	4605      	mov	r5, r0
 8010794:	4630      	mov	r0, r6
 8010796:	f7ff fb23 	bl	800fde0 <_malloc_r>
 801079a:	b948      	cbnz	r0, 80107b0 <__smakebuf_r+0x44>
 801079c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107a0:	059a      	lsls	r2, r3, #22
 80107a2:	d4ef      	bmi.n	8010784 <__smakebuf_r+0x18>
 80107a4:	f023 0303 	bic.w	r3, r3, #3
 80107a8:	f043 0302 	orr.w	r3, r3, #2
 80107ac:	81a3      	strh	r3, [r4, #12]
 80107ae:	e7e3      	b.n	8010778 <__smakebuf_r+0xc>
 80107b0:	4b0d      	ldr	r3, [pc, #52]	; (80107e8 <__smakebuf_r+0x7c>)
 80107b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80107b4:	89a3      	ldrh	r3, [r4, #12]
 80107b6:	6020      	str	r0, [r4, #0]
 80107b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107bc:	81a3      	strh	r3, [r4, #12]
 80107be:	9b00      	ldr	r3, [sp, #0]
 80107c0:	6163      	str	r3, [r4, #20]
 80107c2:	9b01      	ldr	r3, [sp, #4]
 80107c4:	6120      	str	r0, [r4, #16]
 80107c6:	b15b      	cbz	r3, 80107e0 <__smakebuf_r+0x74>
 80107c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107cc:	4630      	mov	r0, r6
 80107ce:	f000 f8c9 	bl	8010964 <_isatty_r>
 80107d2:	b128      	cbz	r0, 80107e0 <__smakebuf_r+0x74>
 80107d4:	89a3      	ldrh	r3, [r4, #12]
 80107d6:	f023 0303 	bic.w	r3, r3, #3
 80107da:	f043 0301 	orr.w	r3, r3, #1
 80107de:	81a3      	strh	r3, [r4, #12]
 80107e0:	89a0      	ldrh	r0, [r4, #12]
 80107e2:	4305      	orrs	r5, r0
 80107e4:	81a5      	strh	r5, [r4, #12]
 80107e6:	e7cd      	b.n	8010784 <__smakebuf_r+0x18>
 80107e8:	0801057d 	.word	0x0801057d

080107ec <_raise_r>:
 80107ec:	291f      	cmp	r1, #31
 80107ee:	b538      	push	{r3, r4, r5, lr}
 80107f0:	4604      	mov	r4, r0
 80107f2:	460d      	mov	r5, r1
 80107f4:	d904      	bls.n	8010800 <_raise_r+0x14>
 80107f6:	2316      	movs	r3, #22
 80107f8:	6003      	str	r3, [r0, #0]
 80107fa:	f04f 30ff 	mov.w	r0, #4294967295
 80107fe:	bd38      	pop	{r3, r4, r5, pc}
 8010800:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010802:	b112      	cbz	r2, 801080a <_raise_r+0x1e>
 8010804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010808:	b94b      	cbnz	r3, 801081e <_raise_r+0x32>
 801080a:	4620      	mov	r0, r4
 801080c:	f000 f830 	bl	8010870 <_getpid_r>
 8010810:	462a      	mov	r2, r5
 8010812:	4601      	mov	r1, r0
 8010814:	4620      	mov	r0, r4
 8010816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801081a:	f000 b817 	b.w	801084c <_kill_r>
 801081e:	2b01      	cmp	r3, #1
 8010820:	d00a      	beq.n	8010838 <_raise_r+0x4c>
 8010822:	1c59      	adds	r1, r3, #1
 8010824:	d103      	bne.n	801082e <_raise_r+0x42>
 8010826:	2316      	movs	r3, #22
 8010828:	6003      	str	r3, [r0, #0]
 801082a:	2001      	movs	r0, #1
 801082c:	e7e7      	b.n	80107fe <_raise_r+0x12>
 801082e:	2400      	movs	r4, #0
 8010830:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010834:	4628      	mov	r0, r5
 8010836:	4798      	blx	r3
 8010838:	2000      	movs	r0, #0
 801083a:	e7e0      	b.n	80107fe <_raise_r+0x12>

0801083c <raise>:
 801083c:	4b02      	ldr	r3, [pc, #8]	; (8010848 <raise+0xc>)
 801083e:	4601      	mov	r1, r0
 8010840:	6818      	ldr	r0, [r3, #0]
 8010842:	f7ff bfd3 	b.w	80107ec <_raise_r>
 8010846:	bf00      	nop
 8010848:	24000028 	.word	0x24000028

0801084c <_kill_r>:
 801084c:	b538      	push	{r3, r4, r5, lr}
 801084e:	4d07      	ldr	r5, [pc, #28]	; (801086c <_kill_r+0x20>)
 8010850:	2300      	movs	r3, #0
 8010852:	4604      	mov	r4, r0
 8010854:	4608      	mov	r0, r1
 8010856:	4611      	mov	r1, r2
 8010858:	602b      	str	r3, [r5, #0]
 801085a:	f7f2 fab3 	bl	8002dc4 <_kill>
 801085e:	1c43      	adds	r3, r0, #1
 8010860:	d102      	bne.n	8010868 <_kill_r+0x1c>
 8010862:	682b      	ldr	r3, [r5, #0]
 8010864:	b103      	cbz	r3, 8010868 <_kill_r+0x1c>
 8010866:	6023      	str	r3, [r4, #0]
 8010868:	bd38      	pop	{r3, r4, r5, pc}
 801086a:	bf00      	nop
 801086c:	24000ce8 	.word	0x24000ce8

08010870 <_getpid_r>:
 8010870:	f7f2 baa0 	b.w	8002db4 <_getpid>

08010874 <__sread>:
 8010874:	b510      	push	{r4, lr}
 8010876:	460c      	mov	r4, r1
 8010878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801087c:	f000 f894 	bl	80109a8 <_read_r>
 8010880:	2800      	cmp	r0, #0
 8010882:	bfab      	itete	ge
 8010884:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010886:	89a3      	ldrhlt	r3, [r4, #12]
 8010888:	181b      	addge	r3, r3, r0
 801088a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801088e:	bfac      	ite	ge
 8010890:	6563      	strge	r3, [r4, #84]	; 0x54
 8010892:	81a3      	strhlt	r3, [r4, #12]
 8010894:	bd10      	pop	{r4, pc}

08010896 <__swrite>:
 8010896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801089a:	461f      	mov	r7, r3
 801089c:	898b      	ldrh	r3, [r1, #12]
 801089e:	05db      	lsls	r3, r3, #23
 80108a0:	4605      	mov	r5, r0
 80108a2:	460c      	mov	r4, r1
 80108a4:	4616      	mov	r6, r2
 80108a6:	d505      	bpl.n	80108b4 <__swrite+0x1e>
 80108a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108ac:	2302      	movs	r3, #2
 80108ae:	2200      	movs	r2, #0
 80108b0:	f000 f868 	bl	8010984 <_lseek_r>
 80108b4:	89a3      	ldrh	r3, [r4, #12]
 80108b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80108be:	81a3      	strh	r3, [r4, #12]
 80108c0:	4632      	mov	r2, r6
 80108c2:	463b      	mov	r3, r7
 80108c4:	4628      	mov	r0, r5
 80108c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80108ca:	f000 b817 	b.w	80108fc <_write_r>

080108ce <__sseek>:
 80108ce:	b510      	push	{r4, lr}
 80108d0:	460c      	mov	r4, r1
 80108d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108d6:	f000 f855 	bl	8010984 <_lseek_r>
 80108da:	1c43      	adds	r3, r0, #1
 80108dc:	89a3      	ldrh	r3, [r4, #12]
 80108de:	bf15      	itete	ne
 80108e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80108e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80108e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80108ea:	81a3      	strheq	r3, [r4, #12]
 80108ec:	bf18      	it	ne
 80108ee:	81a3      	strhne	r3, [r4, #12]
 80108f0:	bd10      	pop	{r4, pc}

080108f2 <__sclose>:
 80108f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108f6:	f000 b813 	b.w	8010920 <_close_r>
	...

080108fc <_write_r>:
 80108fc:	b538      	push	{r3, r4, r5, lr}
 80108fe:	4d07      	ldr	r5, [pc, #28]	; (801091c <_write_r+0x20>)
 8010900:	4604      	mov	r4, r0
 8010902:	4608      	mov	r0, r1
 8010904:	4611      	mov	r1, r2
 8010906:	2200      	movs	r2, #0
 8010908:	602a      	str	r2, [r5, #0]
 801090a:	461a      	mov	r2, r3
 801090c:	f7f2 fa91 	bl	8002e32 <_write>
 8010910:	1c43      	adds	r3, r0, #1
 8010912:	d102      	bne.n	801091a <_write_r+0x1e>
 8010914:	682b      	ldr	r3, [r5, #0]
 8010916:	b103      	cbz	r3, 801091a <_write_r+0x1e>
 8010918:	6023      	str	r3, [r4, #0]
 801091a:	bd38      	pop	{r3, r4, r5, pc}
 801091c:	24000ce8 	.word	0x24000ce8

08010920 <_close_r>:
 8010920:	b538      	push	{r3, r4, r5, lr}
 8010922:	4d06      	ldr	r5, [pc, #24]	; (801093c <_close_r+0x1c>)
 8010924:	2300      	movs	r3, #0
 8010926:	4604      	mov	r4, r0
 8010928:	4608      	mov	r0, r1
 801092a:	602b      	str	r3, [r5, #0]
 801092c:	f7f2 fa9d 	bl	8002e6a <_close>
 8010930:	1c43      	adds	r3, r0, #1
 8010932:	d102      	bne.n	801093a <_close_r+0x1a>
 8010934:	682b      	ldr	r3, [r5, #0]
 8010936:	b103      	cbz	r3, 801093a <_close_r+0x1a>
 8010938:	6023      	str	r3, [r4, #0]
 801093a:	bd38      	pop	{r3, r4, r5, pc}
 801093c:	24000ce8 	.word	0x24000ce8

08010940 <_fstat_r>:
 8010940:	b538      	push	{r3, r4, r5, lr}
 8010942:	4d07      	ldr	r5, [pc, #28]	; (8010960 <_fstat_r+0x20>)
 8010944:	2300      	movs	r3, #0
 8010946:	4604      	mov	r4, r0
 8010948:	4608      	mov	r0, r1
 801094a:	4611      	mov	r1, r2
 801094c:	602b      	str	r3, [r5, #0]
 801094e:	f7f2 fa98 	bl	8002e82 <_fstat>
 8010952:	1c43      	adds	r3, r0, #1
 8010954:	d102      	bne.n	801095c <_fstat_r+0x1c>
 8010956:	682b      	ldr	r3, [r5, #0]
 8010958:	b103      	cbz	r3, 801095c <_fstat_r+0x1c>
 801095a:	6023      	str	r3, [r4, #0]
 801095c:	bd38      	pop	{r3, r4, r5, pc}
 801095e:	bf00      	nop
 8010960:	24000ce8 	.word	0x24000ce8

08010964 <_isatty_r>:
 8010964:	b538      	push	{r3, r4, r5, lr}
 8010966:	4d06      	ldr	r5, [pc, #24]	; (8010980 <_isatty_r+0x1c>)
 8010968:	2300      	movs	r3, #0
 801096a:	4604      	mov	r4, r0
 801096c:	4608      	mov	r0, r1
 801096e:	602b      	str	r3, [r5, #0]
 8010970:	f7f2 fa97 	bl	8002ea2 <_isatty>
 8010974:	1c43      	adds	r3, r0, #1
 8010976:	d102      	bne.n	801097e <_isatty_r+0x1a>
 8010978:	682b      	ldr	r3, [r5, #0]
 801097a:	b103      	cbz	r3, 801097e <_isatty_r+0x1a>
 801097c:	6023      	str	r3, [r4, #0]
 801097e:	bd38      	pop	{r3, r4, r5, pc}
 8010980:	24000ce8 	.word	0x24000ce8

08010984 <_lseek_r>:
 8010984:	b538      	push	{r3, r4, r5, lr}
 8010986:	4d07      	ldr	r5, [pc, #28]	; (80109a4 <_lseek_r+0x20>)
 8010988:	4604      	mov	r4, r0
 801098a:	4608      	mov	r0, r1
 801098c:	4611      	mov	r1, r2
 801098e:	2200      	movs	r2, #0
 8010990:	602a      	str	r2, [r5, #0]
 8010992:	461a      	mov	r2, r3
 8010994:	f7f2 fa90 	bl	8002eb8 <_lseek>
 8010998:	1c43      	adds	r3, r0, #1
 801099a:	d102      	bne.n	80109a2 <_lseek_r+0x1e>
 801099c:	682b      	ldr	r3, [r5, #0]
 801099e:	b103      	cbz	r3, 80109a2 <_lseek_r+0x1e>
 80109a0:	6023      	str	r3, [r4, #0]
 80109a2:	bd38      	pop	{r3, r4, r5, pc}
 80109a4:	24000ce8 	.word	0x24000ce8

080109a8 <_read_r>:
 80109a8:	b538      	push	{r3, r4, r5, lr}
 80109aa:	4d07      	ldr	r5, [pc, #28]	; (80109c8 <_read_r+0x20>)
 80109ac:	4604      	mov	r4, r0
 80109ae:	4608      	mov	r0, r1
 80109b0:	4611      	mov	r1, r2
 80109b2:	2200      	movs	r2, #0
 80109b4:	602a      	str	r2, [r5, #0]
 80109b6:	461a      	mov	r2, r3
 80109b8:	f7f2 fa1e 	bl	8002df8 <_read>
 80109bc:	1c43      	adds	r3, r0, #1
 80109be:	d102      	bne.n	80109c6 <_read_r+0x1e>
 80109c0:	682b      	ldr	r3, [r5, #0]
 80109c2:	b103      	cbz	r3, 80109c6 <_read_r+0x1e>
 80109c4:	6023      	str	r3, [r4, #0]
 80109c6:	bd38      	pop	{r3, r4, r5, pc}
 80109c8:	24000ce8 	.word	0x24000ce8

080109cc <_init>:
 80109cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ce:	bf00      	nop
 80109d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109d2:	bc08      	pop	{r3}
 80109d4:	469e      	mov	lr, r3
 80109d6:	4770      	bx	lr

080109d8 <_fini>:
 80109d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109da:	bf00      	nop
 80109dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109de:	bc08      	pop	{r3}
 80109e0:	469e      	mov	lr, r3
 80109e2:	4770      	bx	lr
