
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3c8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a660  0800a660  0001a660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a6a0  0800a6a0  0001a6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a6a8  0800a6a8  0001a6a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a6ac  0800a6ac  0001a6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  0800a6b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000005fc  20000010  0800a6c0  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000060c  0800a6c0  0002060c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fcbb  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003015  00000000  00000000  0003fcf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000012b0  00000000  00000000  00042d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000011d8  00000000  00000000  00043fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000360f  00000000  00000000  00045198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017286  00000000  00000000  000487a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016557a  00000000  00000000  0005fa2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001c4fa7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005018  00000000  00000000  001c4ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a648 	.word	0x0800a648

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	0800a648 	.word	0x0800a648

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f001 fb7c 	bl	8001cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f852 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 fd42 	bl	8001064 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e0:	f000 fcc4 	bl	8000f6c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80005e4:	f000 fc76 	bl	8000ed4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80005e8:	f000 f9ca 	bl	8000980 <MX_TIM2_Init>
  MX_UART4_Init();
 80005ec:	f000 fc22 	bl	8000e34 <MX_UART4_Init>
  MX_TIM4_Init();
 80005f0:	f000 fab6 	bl	8000b60 <MX_TIM4_Init>
  MX_SPI3_Init();
 80005f4:	f000 f8c0 	bl	8000778 <MX_SPI3_Init>
  MX_TIM1_Init();
 80005f8:	f000 f914 	bl	8000824 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005fc:	f000 fa38 	bl	8000a70 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000600:	f000 fb26 	bl	8000c50 <MX_TIM5_Init>
  MX_TIM15_Init();
 8000604:	f000 fb72 	bl	8000cec <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim2);
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	2101      	movs	r1, #1
 800060c:	4817      	ldr	r0, [pc, #92]	; (800066c <main+0x9c>)
 800060e:	f004 f8e1 	bl	80047d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2102      	movs	r1, #2
 8000616:	4816      	ldr	r0, [pc, #88]	; (8000670 <main+0xa0>)
 8000618:	f004 f8dc 	bl	80047d4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000622:	4812      	ldr	r0, [pc, #72]	; (800066c <main+0x9c>)
 8000624:	f004 f8d6 	bl	80047d4 <HAL_GPIO_WritePin>
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <main+0xa4>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <main+0xa4>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f042 0220 	orr.w	r2, r2, #32
 8000636:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <main+0xa4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <main+0xa4>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000646:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, 4);
 8000648:	2204      	movs	r2, #4
 800064a:	490b      	ldr	r1, [pc, #44]	; (8000678 <main+0xa8>)
 800064c:	4809      	ldr	r0, [pc, #36]	; (8000674 <main+0xa4>)
 800064e:	f007 ff4b 	bl	80084e8 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      if (TXBUFFER[0] != 0) {
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <main+0xac>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0fb      	beq.n	8000652 <main+0x82>
    	  HAL_UART_Transmit_IT(&huart3, TXBUFFER, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	4907      	ldr	r1, [pc, #28]	; (800067c <main+0xac>)
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <main+0xa4>)
 8000660:	f007 febe 	bl	80083e0 <HAL_UART_Transmit_IT>

    	  TXBUFFER[0] = 0;
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <main+0xac>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
      if (TXBUFFER[0] != 0) {
 800066a:	e7f2      	b.n	8000652 <main+0x82>
 800066c:	58020400 	.word	0x58020400
 8000670:	58021000 	.word	0x58021000
 8000674:	20000168 	.word	0x20000168
 8000678:	200005fc 	.word	0x200005fc
 800067c:	200004a4 	.word	0x200004a4

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09c      	sub	sp, #112	; 0x70
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068a:	224c      	movs	r2, #76	; 0x4c
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f009 ffd2 	bl	800a638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2220      	movs	r2, #32
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f009 ffcc 	bl	800a638 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006a0:	2002      	movs	r0, #2
 80006a2:	f004 f8cb 	bl	800483c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b31      	ldr	r3, [pc, #196]	; (8000770 <SystemClock_Config+0xf0>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a30      	ldr	r2, [pc, #192]	; (8000770 <SystemClock_Config+0xf0>)
 80006b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006b4:	6193      	str	r3, [r2, #24]
 80006b6:	4b2e      	ldr	r3, [pc, #184]	; (8000770 <SystemClock_Config+0xf0>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <SystemClock_Config+0xf4>)
 80006c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006c4:	4a2b      	ldr	r2, [pc, #172]	; (8000774 <SystemClock_Config+0xf4>)
 80006c6:	f043 0301 	orr.w	r3, r3, #1
 80006ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80006cc:	4b29      	ldr	r3, [pc, #164]	; (8000774 <SystemClock_Config+0xf4>)
 80006ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006d8:	bf00      	nop
 80006da:	4b25      	ldr	r3, [pc, #148]	; (8000770 <SystemClock_Config+0xf0>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006e6:	d1f8      	bne.n	80006da <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f0:	2340      	movs	r3, #64	; 0x40
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000700:	233c      	movs	r3, #60	; 0x3c
 8000702:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000708:	2306      	movs	r3, #6
 800070a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000710:	230c      	movs	r3, #12
 8000712:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000714:	2300      	movs	r3, #0
 8000716:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000720:	4618      	mov	r0, r3
 8000722:	f004 f8c5 	bl	80048b0 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800072c:	f000 fddf 	bl	80012ee <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	233f      	movs	r3, #63	; 0x3f
 8000732:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2303      	movs	r3, #3
 8000736:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800073c:	2308      	movs	r3, #8
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000740:	2340      	movs	r3, #64	; 0x40
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000744:	2340      	movs	r3, #64	; 0x40
 8000746:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000748:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800074c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800074e:	2340      	movs	r3, #64	; 0x40
 8000750:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2104      	movs	r1, #4
 8000756:	4618      	mov	r0, r3
 8000758:	f004 fcba 	bl	80050d0 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000762:	f000 fdc4 	bl	80012ee <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3770      	adds	r7, #112	; 0x70
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	58024800 	.word	0x58024800
 8000774:	58000400 	.word	0x58000400

08000778 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800077c:	4b27      	ldr	r3, [pc, #156]	; (800081c <MX_SPI3_Init+0xa4>)
 800077e:	4a28      	ldr	r2, [pc, #160]	; (8000820 <MX_SPI3_Init+0xa8>)
 8000780:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000782:	4b26      	ldr	r3, [pc, #152]	; (800081c <MX_SPI3_Init+0xa4>)
 8000784:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000788:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800078a:	4b24      	ldr	r3, [pc, #144]	; (800081c <MX_SPI3_Init+0xa4>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_SPI3_Init+0xa4>)
 8000792:	2203      	movs	r2, #3
 8000794:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <MX_SPI3_Init+0xa4>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_SPI3_Init+0xa4>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007a2:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_SPI3_Init+0xa4>)
 80007a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007a8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_SPI3_Init+0xa4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_SPI3_Init+0xa4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_SPI3_Init+0xa4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_SPI3_Init+0xa4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_SPI3_Init+0xa4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_SPI3_Init+0xa4>)
 80007ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ce:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_SPI3_Init+0xa4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_SPI3_Init+0xa4>)
 80007d8:	2200      	movs	r2, #0
 80007da:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_SPI3_Init+0xa4>)
 80007de:	2200      	movs	r2, #0
 80007e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_SPI3_Init+0xa4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_SPI3_Init+0xa4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_SPI3_Init+0xa4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_SPI3_Init+0xa4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_SPI3_Init+0xa4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_SPI3_Init+0xa4>)
 8000802:	2200      	movs	r2, #0
 8000804:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_SPI3_Init+0xa4>)
 8000808:	f006 fb50 	bl	8006eac <HAL_SPI_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000812:	f000 fd6c 	bl	80012ee <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200003cc 	.word	0x200003cc
 8000820:	40003c00 	.word	0x40003c00

08000824 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b09a      	sub	sp, #104	; 0x68
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000838:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000844:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
 8000854:	615a      	str	r2, [r3, #20]
 8000856:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	222c      	movs	r2, #44	; 0x2c
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f009 feea 	bl	800a638 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000864:	4b44      	ldr	r3, [pc, #272]	; (8000978 <MX_TIM1_Init+0x154>)
 8000866:	4a45      	ldr	r2, [pc, #276]	; (800097c <MX_TIM1_Init+0x158>)
 8000868:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 800086a:	4b43      	ldr	r3, [pc, #268]	; (8000978 <MX_TIM1_Init+0x154>)
 800086c:	22ef      	movs	r2, #239	; 0xef
 800086e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b41      	ldr	r3, [pc, #260]	; (8000978 <MX_TIM1_Init+0x154>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625-1;
 8000876:	4b40      	ldr	r3, [pc, #256]	; (8000978 <MX_TIM1_Init+0x154>)
 8000878:	f44f 721c 	mov.w	r2, #624	; 0x270
 800087c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087e:	4b3e      	ldr	r3, [pc, #248]	; (8000978 <MX_TIM1_Init+0x154>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000884:	4b3c      	ldr	r3, [pc, #240]	; (8000978 <MX_TIM1_Init+0x154>)
 8000886:	2200      	movs	r2, #0
 8000888:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088a:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <MX_TIM1_Init+0x154>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000890:	4839      	ldr	r0, [pc, #228]	; (8000978 <MX_TIM1_Init+0x154>)
 8000892:	f006 fc28 	bl	80070e6 <HAL_TIM_Base_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800089c:	f000 fd27 	bl	80012ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008aa:	4619      	mov	r1, r3
 80008ac:	4832      	ldr	r0, [pc, #200]	; (8000978 <MX_TIM1_Init+0x154>)
 80008ae:	f006 ff01 	bl	80076b4 <HAL_TIM_ConfigClockSource>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008b8:	f000 fd19 	bl	80012ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008bc:	482e      	ldr	r0, [pc, #184]	; (8000978 <MX_TIM1_Init+0x154>)
 80008be:	f006 fc69 	bl	8007194 <HAL_TIM_PWM_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80008c8:	f000 fd11 	bl	80012ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008dc:	4619      	mov	r1, r3
 80008de:	4826      	ldr	r0, [pc, #152]	; (8000978 <MX_TIM1_Init+0x154>)
 80008e0:	f007 fc0a 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80008ea:	f000 fd00 	bl	80012ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ee:	2360      	movs	r3, #96	; 0x60
 80008f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80008f2:	f240 1339 	movw	r3, #313	; 0x139
 80008f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008fc:	2300      	movs	r3, #0
 80008fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000904:	2300      	movs	r3, #0
 8000906:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000908:	2300      	movs	r3, #0
 800090a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800090c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000910:	2204      	movs	r2, #4
 8000912:	4619      	mov	r1, r3
 8000914:	4818      	ldr	r0, [pc, #96]	; (8000978 <MX_TIM1_Init+0x154>)
 8000916:	f006 fdbd 	bl	8007494 <HAL_TIM_PWM_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000920:	f000 fce5 	bl	80012ee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800093c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000946:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4619      	mov	r1, r3
 8000958:	4807      	ldr	r0, [pc, #28]	; (8000978 <MX_TIM1_Init+0x154>)
 800095a:	f007 fc55 	bl	8008208 <HAL_TIMEx_ConfigBreakDeadTime>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000964:	f000 fcc3 	bl	80012ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000968:	4803      	ldr	r0, [pc, #12]	; (8000978 <MX_TIM1_Init+0x154>)
 800096a:	f000 fddf 	bl	800152c <HAL_TIM_MspPostInit>

}
 800096e:	bf00      	nop
 8000970:	3768      	adds	r7, #104	; 0x68
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000458 	.word	0x20000458
 800097c:	40010000 	.word	0x40010000

08000980 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08e      	sub	sp, #56	; 0x38
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a0:	463b      	mov	r3, r7
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
 80009ae:	615a      	str	r2, [r3, #20]
 80009b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009b2:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <MX_TIM2_Init+0xec>)
 80009b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 80009ba:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <MX_TIM2_Init+0xec>)
 80009bc:	22ef      	movs	r2, #239	; 0xef
 80009be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c0:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <MX_TIM2_Init+0xec>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 80009c6:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <MX_TIM2_Init+0xec>)
 80009c8:	f44f 721c 	mov.w	r2, #624	; 0x270
 80009cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ce:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <MX_TIM2_Init+0xec>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d4:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <MX_TIM2_Init+0xec>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009da:	4824      	ldr	r0, [pc, #144]	; (8000a6c <MX_TIM2_Init+0xec>)
 80009dc:	f006 fb83 	bl	80070e6 <HAL_TIM_Base_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80009e6:	f000 fc82 	bl	80012ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f4:	4619      	mov	r1, r3
 80009f6:	481d      	ldr	r0, [pc, #116]	; (8000a6c <MX_TIM2_Init+0xec>)
 80009f8:	f006 fe5c 	bl	80076b4 <HAL_TIM_ConfigClockSource>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a02:	f000 fc74 	bl	80012ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a06:	4819      	ldr	r0, [pc, #100]	; (8000a6c <MX_TIM2_Init+0xec>)
 8000a08:	f006 fbc4 	bl	8007194 <HAL_TIM_PWM_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a12:	f000 fc6c 	bl	80012ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4811      	ldr	r0, [pc, #68]	; (8000a6c <MX_TIM2_Init+0xec>)
 8000a26:	f007 fb67 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a30:	f000 fc5d 	bl	80012ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a34:	2360      	movs	r3, #96	; 0x60
 8000a36:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000a38:	f240 1339 	movw	r3, #313	; 0x139
 8000a3c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	2208      	movs	r2, #8
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <MX_TIM2_Init+0xec>)
 8000a4e:	f006 fd21 	bl	8007494 <HAL_TIM_PWM_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000a58:	f000 fc49 	bl	80012ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <MX_TIM2_Init+0xec>)
 8000a5e:	f000 fd65 	bl	800152c <HAL_TIM_MspPostInit>

}
 8000a62:	bf00      	nop
 8000a64:	3738      	adds	r7, #56	; 0x38
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000538 	.word	0x20000538

08000a70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	; 0x38
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a90:	463b      	mov	r3, r7
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
 8000a9e:	615a      	str	r2, [r3, #20]
 8000aa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <MX_TIM3_Init+0xe8>)
 8000aa4:	4a2d      	ldr	r2, [pc, #180]	; (8000b5c <MX_TIM3_Init+0xec>)
 8000aa6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8000aa8:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <MX_TIM3_Init+0xe8>)
 8000aaa:	22ef      	movs	r2, #239	; 0xef
 8000aac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aae:	4b2a      	ldr	r3, [pc, #168]	; (8000b58 <MX_TIM3_Init+0xe8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625-1;
 8000ab4:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <MX_TIM3_Init+0xe8>)
 8000ab6:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000aba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <MX_TIM3_Init+0xe8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac2:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <MX_TIM3_Init+0xe8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ac8:	4823      	ldr	r0, [pc, #140]	; (8000b58 <MX_TIM3_Init+0xe8>)
 8000aca:	f006 fb0c 	bl	80070e6 <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ad4:	f000 fc0b 	bl	80012ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	481c      	ldr	r0, [pc, #112]	; (8000b58 <MX_TIM3_Init+0xe8>)
 8000ae6:	f006 fde5 	bl	80076b4 <HAL_TIM_ConfigClockSource>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000af0:	f000 fbfd 	bl	80012ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000af4:	4818      	ldr	r0, [pc, #96]	; (8000b58 <MX_TIM3_Init+0xe8>)
 8000af6:	f006 fb4d 	bl	8007194 <HAL_TIM_PWM_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b00:	f000 fbf5 	bl	80012ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4811      	ldr	r0, [pc, #68]	; (8000b58 <MX_TIM3_Init+0xe8>)
 8000b14:	f007 faf0 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b1e:	f000 fbe6 	bl	80012ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b22:	2360      	movs	r3, #96	; 0x60
 8000b24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000b26:	f240 1339 	movw	r3, #313	; 0x139
 8000b2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4807      	ldr	r0, [pc, #28]	; (8000b58 <MX_TIM3_Init+0xe8>)
 8000b3c:	f006 fcaa 	bl	8007494 <HAL_TIM_PWM_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000b46:	f000 fbd2 	bl	80012ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b4a:	4803      	ldr	r0, [pc, #12]	; (8000b58 <MX_TIM3_Init+0xe8>)
 8000b4c:	f000 fcee 	bl	800152c <HAL_TIM_MspPostInit>

}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000380 	.word	0x20000380
 8000b5c:	40000400 	.word	0x40000400

08000b60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08e      	sub	sp, #56	; 0x38
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b80:	463b      	mov	r3, r7
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
 8000b8e:	615a      	str	r2, [r3, #20]
 8000b90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b92:	4b2d      	ldr	r3, [pc, #180]	; (8000c48 <MX_TIM4_Init+0xe8>)
 8000b94:	4a2d      	ldr	r2, [pc, #180]	; (8000c4c <MX_TIM4_Init+0xec>)
 8000b96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8000b98:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <MX_TIM4_Init+0xe8>)
 8000b9a:	22ef      	movs	r2, #239	; 0xef
 8000b9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	; (8000c48 <MX_TIM4_Init+0xe8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <MX_TIM4_Init+0xe8>)
 8000ba6:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000baa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bac:	4b26      	ldr	r3, [pc, #152]	; (8000c48 <MX_TIM4_Init+0xe8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bb2:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <MX_TIM4_Init+0xe8>)
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bb8:	4823      	ldr	r0, [pc, #140]	; (8000c48 <MX_TIM4_Init+0xe8>)
 8000bba:	f006 fa94 	bl	80070e6 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000bc4:	f000 fb93 	bl	80012ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481c      	ldr	r0, [pc, #112]	; (8000c48 <MX_TIM4_Init+0xe8>)
 8000bd6:	f006 fd6d 	bl	80076b4 <HAL_TIM_ConfigClockSource>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000be0:	f000 fb85 	bl	80012ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000be4:	4818      	ldr	r0, [pc, #96]	; (8000c48 <MX_TIM4_Init+0xe8>)
 8000be6:	f006 fad5 	bl	8007194 <HAL_TIM_PWM_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000bf0:	f000 fb7d 	bl	80012ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000bfc:	f107 031c 	add.w	r3, r7, #28
 8000c00:	4619      	mov	r1, r3
 8000c02:	4811      	ldr	r0, [pc, #68]	; (8000c48 <MX_TIM4_Init+0xe8>)
 8000c04:	f007 fa78 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000c0e:	f000 fb6e 	bl	80012ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c12:	2360      	movs	r3, #96	; 0x60
 8000c14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000c16:	f240 1339 	movw	r3, #313	; 0x139
 8000c1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c24:	463b      	mov	r3, r7
 8000c26:	2208      	movs	r2, #8
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4807      	ldr	r0, [pc, #28]	; (8000c48 <MX_TIM4_Init+0xe8>)
 8000c2c:	f006 fc32 	bl	8007494 <HAL_TIM_PWM_ConfigChannel>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000c36:	f000 fb5a 	bl	80012ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c3a:	4803      	ldr	r0, [pc, #12]	; (8000c48 <MX_TIM4_Init+0xe8>)
 8000c3c:	f000 fc76 	bl	800152c <HAL_TIM_MspPostInit>

}
 8000c40:	bf00      	nop
 8000c42:	3738      	adds	r7, #56	; 0x38
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200000a4 	.word	0x200000a4
 8000c4c:	40000800 	.word	0x40000800

08000c50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c56:	f107 0310 	add.w	r3, r7, #16
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_TIM5_Init+0x94>)
 8000c70:	4a1d      	ldr	r2, [pc, #116]	; (8000ce8 <MX_TIM5_Init+0x98>)
 8000c72:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <MX_TIM5_Init+0x94>)
 8000c76:	22ef      	movs	r2, #239	; 0xef
 8000c78:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_TIM5_Init+0x94>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_TIM5_Init+0x94>)
 8000c82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_TIM5_Init+0x94>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_TIM5_Init+0x94>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c94:	4813      	ldr	r0, [pc, #76]	; (8000ce4 <MX_TIM5_Init+0x94>)
 8000c96:	f006 fa26 	bl	80070e6 <HAL_TIM_Base_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000ca0:	f000 fb25 	bl	80012ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <MX_TIM5_Init+0x94>)
 8000cb2:	f006 fcff 	bl	80076b4 <HAL_TIM_ConfigClockSource>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000cbc:	f000 fb17 	bl	80012ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_TIM5_Init+0x94>)
 8000cce:	f007 fa13 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000cd8:	f000 fb09 	bl	80012ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	3720      	adds	r7, #32
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000334 	.word	0x20000334
 8000ce8:	40000c00 	.word	0x40000c00

08000cec <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b09a      	sub	sp, #104	; 0x68
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
 8000d1c:	615a      	str	r2, [r3, #20]
 8000d1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	222c      	movs	r2, #44	; 0x2c
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f009 fc86 	bl	800a638 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000d2c:	4b3f      	ldr	r3, [pc, #252]	; (8000e2c <MX_TIM15_Init+0x140>)
 8000d2e:	4a40      	ldr	r2, [pc, #256]	; (8000e30 <MX_TIM15_Init+0x144>)
 8000d30:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8000d32:	4b3e      	ldr	r3, [pc, #248]	; (8000e2c <MX_TIM15_Init+0x140>)
 8000d34:	22ef      	movs	r2, #239	; 0xef
 8000d36:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d38:	4b3c      	ldr	r3, [pc, #240]	; (8000e2c <MX_TIM15_Init+0x140>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 625-1;
 8000d3e:	4b3b      	ldr	r3, [pc, #236]	; (8000e2c <MX_TIM15_Init+0x140>)
 8000d40:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000d44:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d46:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <MX_TIM15_Init+0x140>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d4c:	4b37      	ldr	r3, [pc, #220]	; (8000e2c <MX_TIM15_Init+0x140>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d52:	4b36      	ldr	r3, [pc, #216]	; (8000e2c <MX_TIM15_Init+0x140>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8000d58:	4834      	ldr	r0, [pc, #208]	; (8000e2c <MX_TIM15_Init+0x140>)
 8000d5a:	f006 f9c4 	bl	80070e6 <HAL_TIM_Base_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000d64:	f000 fac3 	bl	80012ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000d6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d72:	4619      	mov	r1, r3
 8000d74:	482d      	ldr	r0, [pc, #180]	; (8000e2c <MX_TIM15_Init+0x140>)
 8000d76:	f006 fc9d 	bl	80076b4 <HAL_TIM_ConfigClockSource>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8000d80:	f000 fab5 	bl	80012ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000d84:	4829      	ldr	r0, [pc, #164]	; (8000e2c <MX_TIM15_Init+0x140>)
 8000d86:	f006 fa05 	bl	8007194 <HAL_TIM_PWM_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8000d90:	f000 faad 	bl	80012ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d94:	2300      	movs	r3, #0
 8000d96:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000da0:	4619      	mov	r1, r3
 8000da2:	4822      	ldr	r0, [pc, #136]	; (8000e2c <MX_TIM15_Init+0x140>)
 8000da4:	f007 f9a8 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8000dae:	f000 fa9e 	bl	80012ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db2:	2360      	movs	r3, #96	; 0x60
 8000db4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000db6:	f240 1339 	movw	r3, #313	; 0x139
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4814      	ldr	r0, [pc, #80]	; (8000e2c <MX_TIM15_Init+0x140>)
 8000dda:	f006 fb5b 	bl	8007494 <HAL_TIM_PWM_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8000de4:	f000 fa83 	bl	80012ee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4807      	ldr	r0, [pc, #28]	; (8000e2c <MX_TIM15_Init+0x140>)
 8000e10:	f007 f9fa 	bl	8008208 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8000e1a:	f000 fa68 	bl	80012ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000e1e:	4803      	ldr	r0, [pc, #12]	; (8000e2c <MX_TIM15_Init+0x140>)
 8000e20:	f000 fb84 	bl	800152c <HAL_TIM_MspPostInit>

}
 8000e24:	bf00      	nop
 8000e26:	3768      	adds	r7, #104	; 0x68
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000270 	.word	0x20000270
 8000e30:	40014000 	.word	0x40014000

08000e34 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e38:	4b24      	ldr	r3, [pc, #144]	; (8000ecc <MX_UART4_Init+0x98>)
 8000e3a:	4a25      	ldr	r2, [pc, #148]	; (8000ed0 <MX_UART4_Init+0x9c>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e3e:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <MX_UART4_Init+0x98>)
 8000e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e44:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <MX_UART4_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <MX_UART4_Init+0x98>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <MX_UART4_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <MX_UART4_Init+0x98>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <MX_UART4_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <MX_UART4_Init+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MX_UART4_Init+0x98>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e70:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <MX_UART4_Init+0x98>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <MX_UART4_Init+0x98>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RS485Ex_Init(&huart4, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	4812      	ldr	r0, [pc, #72]	; (8000ecc <MX_UART4_Init+0x98>)
 8000e84:	f009 fa28 	bl	800a2d8 <HAL_RS485Ex_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8000e8e:	f000 fa2e 	bl	80012ee <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e92:	2100      	movs	r1, #0
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <MX_UART4_Init+0x98>)
 8000e96:	f009 fae0 	bl	800a45a <HAL_UARTEx_SetTxFifoThreshold>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_UART4_Init+0x70>
  {
    Error_Handler();
 8000ea0:	f000 fa25 	bl	80012ee <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4809      	ldr	r0, [pc, #36]	; (8000ecc <MX_UART4_Init+0x98>)
 8000ea8:	f009 fb15 	bl	800a4d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_UART4_Init+0x82>
  {
    Error_Handler();
 8000eb2:	f000 fa1c 	bl	80012ee <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <MX_UART4_Init+0x98>)
 8000eb8:	f009 fa96 	bl	800a3e8 <HAL_UARTEx_DisableFifoMode>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_UART4_Init+0x92>
  {
    Error_Handler();
 8000ec2:	f000 fa14 	bl	80012ee <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200004a8 	.word	0x200004a8
 8000ed0:	40004c00 	.word	0x40004c00

08000ed4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ed8:	4b22      	ldr	r3, [pc, #136]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000eda:	4a23      	ldr	r2, [pc, #140]	; (8000f68 <MX_USART3_UART_Init+0x94>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f10:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f1c:	4811      	ldr	r0, [pc, #68]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f1e:	f007 fa0f 	bl	8008340 <HAL_UART_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f28:	f000 f9e1 	bl	80012ee <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f30:	f009 fa93 	bl	800a45a <HAL_UARTEx_SetTxFifoThreshold>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000f3a:	f000 f9d8 	bl	80012ee <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4808      	ldr	r0, [pc, #32]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f42:	f009 fac8 	bl	800a4d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f4c:	f000 f9cf 	bl	80012ee <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_USART3_UART_Init+0x90>)
 8000f52:	f009 fa49 	bl	800a3e8 <HAL_UARTEx_DisableFifoMode>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f5c:	f000 f9c7 	bl	80012ee <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000168 	.word	0x20000168
 8000f68:	40004800 	.word	0x40004800

08000f6c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_stream3
  */
static void MX_DMA_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f72:	4b39      	ldr	r3, [pc, #228]	; (8001058 <MX_DMA_Init+0xec>)
 8000f74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f78:	4a37      	ldr	r2, [pc, #220]	; (8001058 <MX_DMA_Init+0xec>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f82:	4b35      	ldr	r3, [pc, #212]	; (8001058 <MX_DMA_Init+0xec>)
 8000f84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f90:	4b31      	ldr	r3, [pc, #196]	; (8001058 <MX_DMA_Init+0xec>)
 8000f92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f96:	4a30      	ldr	r2, [pc, #192]	; (8001058 <MX_DMA_Init+0xec>)
 8000f98:	f043 0302 	orr.w	r3, r3, #2
 8000f9c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <MX_DMA_Init+0xec>)
 8000fa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_stream3 on DMA1_Stream3 */
  hdma_memtomem_dma1_stream3.Instance = DMA1_Stream3;
 8000fae:	4b2b      	ldr	r3, [pc, #172]	; (800105c <MX_DMA_Init+0xf0>)
 8000fb0:	4a2b      	ldr	r2, [pc, #172]	; (8001060 <MX_DMA_Init+0xf4>)
 8000fb2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 8000fb4:	4b29      	ldr	r3, [pc, #164]	; (800105c <MX_DMA_Init+0xf0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000fba:	4b28      	ldr	r3, [pc, #160]	; (800105c <MX_DMA_Init+0xf0>)
 8000fbc:	2280      	movs	r2, #128	; 0x80
 8000fbe:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 8000fc0:	4b26      	ldr	r3, [pc, #152]	; (800105c <MX_DMA_Init+0xf0>)
 8000fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fc6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_stream3.Init.MemInc = DMA_MINC_ENABLE;
 8000fc8:	4b24      	ldr	r3, [pc, #144]	; (800105c <MX_DMA_Init+0xf0>)
 8000fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fce:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fd0:	4b22      	ldr	r3, [pc, #136]	; (800105c <MX_DMA_Init+0xf0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <MX_DMA_Init+0xf0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_stream3.Init.Mode = DMA_NORMAL;
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <MX_DMA_Init+0xf0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_stream3.Init.Priority = DMA_PRIORITY_LOW;
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	; (800105c <MX_DMA_Init+0xf0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma1_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <MX_DMA_Init+0xf0>)
 8000fea:	2204      	movs	r2, #4
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma1_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_DMA_Init+0xf0>)
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma1_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <MX_DMA_Init+0xf0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma1_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_DMA_Init+0xf0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma1_stream3) != HAL_OK)
 8001000:	4816      	ldr	r0, [pc, #88]	; (800105c <MX_DMA_Init+0xf0>)
 8001002:	f001 f813 	bl	800202c <HAL_DMA_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 800100c:	f000 f96f 	bl	80012ee <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2100      	movs	r1, #0
 8001014:	200c      	movs	r0, #12
 8001016:	f000 ffd4 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800101a:	200c      	movs	r0, #12
 800101c:	f000 ffeb 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	200d      	movs	r0, #13
 8001026:	f000 ffcc 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800102a:	200d      	movs	r0, #13
 800102c:	f000 ffe3 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	2038      	movs	r0, #56	; 0x38
 8001036:	f000 ffc4 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800103a:	2038      	movs	r0, #56	; 0x38
 800103c:	f000 ffdb 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2039      	movs	r0, #57	; 0x39
 8001046:	f000 ffbc 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800104a:	2039      	movs	r0, #57	; 0x39
 800104c:	f000 ffd3 	bl	8001ff6 <HAL_NVIC_EnableIRQ>

}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	58024400 	.word	0x58024400
 800105c:	200001f8 	.word	0x200001f8
 8001060:	40020058 	.word	0x40020058

08001064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800107a:	4b7b      	ldr	r3, [pc, #492]	; (8001268 <MX_GPIO_Init+0x204>)
 800107c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001080:	4a79      	ldr	r2, [pc, #484]	; (8001268 <MX_GPIO_Init+0x204>)
 8001082:	f043 0310 	orr.w	r3, r3, #16
 8001086:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800108a:	4b77      	ldr	r3, [pc, #476]	; (8001268 <MX_GPIO_Init+0x204>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001090:	f003 0310 	and.w	r3, r3, #16
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001098:	4b73      	ldr	r3, [pc, #460]	; (8001268 <MX_GPIO_Init+0x204>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109e:	4a72      	ldr	r2, [pc, #456]	; (8001268 <MX_GPIO_Init+0x204>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a8:	4b6f      	ldr	r3, [pc, #444]	; (8001268 <MX_GPIO_Init+0x204>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	4b6c      	ldr	r3, [pc, #432]	; (8001268 <MX_GPIO_Init+0x204>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010bc:	4a6a      	ldr	r2, [pc, #424]	; (8001268 <MX_GPIO_Init+0x204>)
 80010be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c6:	4b68      	ldr	r3, [pc, #416]	; (8001268 <MX_GPIO_Init+0x204>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b64      	ldr	r3, [pc, #400]	; (8001268 <MX_GPIO_Init+0x204>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	4a63      	ldr	r2, [pc, #396]	; (8001268 <MX_GPIO_Init+0x204>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e4:	4b60      	ldr	r3, [pc, #384]	; (8001268 <MX_GPIO_Init+0x204>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	4b5d      	ldr	r3, [pc, #372]	; (8001268 <MX_GPIO_Init+0x204>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f8:	4a5b      	ldr	r2, [pc, #364]	; (8001268 <MX_GPIO_Init+0x204>)
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001102:	4b59      	ldr	r3, [pc, #356]	; (8001268 <MX_GPIO_Init+0x204>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001110:	4b55      	ldr	r3, [pc, #340]	; (8001268 <MX_GPIO_Init+0x204>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001116:	4a54      	ldr	r2, [pc, #336]	; (8001268 <MX_GPIO_Init+0x204>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001120:	4b51      	ldr	r3, [pc, #324]	; (8001268 <MX_GPIO_Init+0x204>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	f003 0308 	and.w	r3, r3, #8
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800112e:	4b4e      	ldr	r3, [pc, #312]	; (8001268 <MX_GPIO_Init+0x204>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001134:	4a4c      	ldr	r2, [pc, #304]	; (8001268 <MX_GPIO_Init+0x204>)
 8001136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113e:	4b4a      	ldr	r3, [pc, #296]	; (8001268 <MX_GPIO_Init+0x204>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 800114c:	2200      	movs	r2, #0
 800114e:	f644 2121 	movw	r1, #18977	; 0x4a21
 8001152:	4846      	ldr	r0, [pc, #280]	; (800126c <MX_GPIO_Init+0x208>)
 8001154:	f003 fb3e 	bl	80047d4 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	f24c 0102 	movw	r1, #49154	; 0xc002
 800115e:	4844      	ldr	r0, [pc, #272]	; (8001270 <MX_GPIO_Init+0x20c>)
 8001160:	f003 fb38 	bl	80047d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001164:	2200      	movs	r2, #0
 8001166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800116a:	4842      	ldr	r0, [pc, #264]	; (8001274 <MX_GPIO_Init+0x210>)
 800116c:	f003 fb32 	bl	80047d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001176:	4840      	ldr	r0, [pc, #256]	; (8001278 <MX_GPIO_Init+0x214>)
 8001178:	f003 fb2c 	bl	80047d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 800117c:	f644 2321 	movw	r3, #18977	; 0x4a21
 8001180:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	4835      	ldr	r0, [pc, #212]	; (800126c <MX_GPIO_Init+0x208>)
 8001196:	f003 f96d 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin LM6_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM6_Pin;
 800119a:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a0:	4b36      	ldr	r3, [pc, #216]	; (800127c <MX_GPIO_Init+0x218>)
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	4830      	ldr	r0, [pc, #192]	; (8001270 <MX_GPIO_Init+0x20c>)
 80011b0:	f003 f960 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80011b4:	f24c 0302 	movw	r3, #49154	; 0xc002
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	4828      	ldr	r0, [pc, #160]	; (8001270 <MX_GPIO_Init+0x20c>)
 80011ce:	f003 f951 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80011d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d8:	2301      	movs	r3, #1
 80011da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4822      	ldr	r0, [pc, #136]	; (8001274 <MX_GPIO_Init+0x210>)
 80011ec:	f003 f942 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80011f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	481b      	ldr	r0, [pc, #108]	; (8001278 <MX_GPIO_Init+0x214>)
 800120a:	f003 f933 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 800120e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <MX_GPIO_Init+0x218>)
 8001216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	4817      	ldr	r0, [pc, #92]	; (8001280 <MX_GPIO_Init+0x21c>)
 8001224:	f003 f926 	bl	8004474 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001228:	23c0      	movs	r3, #192	; 0xc0
 800122a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <MX_GPIO_Init+0x218>)
 800122e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	480c      	ldr	r0, [pc, #48]	; (800126c <MX_GPIO_Init+0x208>)
 800123c:	f003 f91a 	bl	8004474 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001240:	2200      	movs	r2, #0
 8001242:	2103      	movs	r1, #3
 8001244:	2017      	movs	r0, #23
 8001246:	f000 febc 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800124a:	2017      	movs	r0, #23
 800124c:	f000 fed3 	bl	8001ff6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2103      	movs	r1, #3
 8001254:	2028      	movs	r0, #40	; 0x28
 8001256:	f000 feb4 	bl	8001fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800125a:	2028      	movs	r0, #40	; 0x28
 800125c:	f000 fecb 	bl	8001ff6 <HAL_NVIC_EnableIRQ>

}
 8001260:	bf00      	nop
 8001262:	3730      	adds	r7, #48	; 0x30
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	58024400 	.word	0x58024400
 800126c:	58020400 	.word	0x58020400
 8001270:	58021000 	.word	0x58021000
 8001274:	58020c00 	.word	0x58020c00
 8001278:	58020800 	.word	0x58020800
 800127c:	11110000 	.word	0x11110000
 8001280:	58021800 	.word	0x58021800

08001284 <HAL_UART_RxCpltCallback>:
 }
return len;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a06      	ldr	r2, [pc, #24]	; (80012a8 <HAL_UART_RxCpltCallback+0x24>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d104      	bne.n	800129e <HAL_UART_RxCpltCallback+0x1a>
	{
		HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, BUFFSIZE);
 8001294:	2204      	movs	r2, #4
 8001296:	4905      	ldr	r1, [pc, #20]	; (80012ac <HAL_UART_RxCpltCallback+0x28>)
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <HAL_UART_RxCpltCallback+0x24>)
 800129a:	f007 f925 	bl	80084e8 <HAL_UART_Receive_IT>
	}
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000168 	.word	0x20000168
 80012ac:	200005fc 	.word	0x200005fc

080012b0 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	80fb      	strh	r3, [r7, #6]


}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  if (htim == &htim5)
  {

  }
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f2:	b672      	cpsid	i
}
 80012f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <Error_Handler+0x8>

080012f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_MspInit+0x30>)
 8001300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001304:	4a08      	ldr	r2, [pc, #32]	; (8001328 <HAL_MspInit+0x30>)
 8001306:	f043 0302 	orr.w	r3, r3, #2
 800130a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <HAL_MspInit+0x30>)
 8001310:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	58024400 	.word	0x58024400

0800132c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b0b8      	sub	sp, #224	; 0xe0
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	22bc      	movs	r2, #188	; 0xbc
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f009 f973 	bl	800a638 <memset>
  if(hspi->Instance==SPI3)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a25      	ldr	r2, [pc, #148]	; (80013ec <HAL_SPI_MspInit+0xc0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d142      	bne.n	80013e2 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001360:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001362:	2300      	movs	r3, #0
 8001364:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4618      	mov	r0, r3
 800136c:	f004 fa3c 	bl	80057e8 <HAL_RCCEx_PeriphCLKConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001376:	f7ff ffba 	bl	80012ee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <HAL_SPI_MspInit+0xc4>)
 800137c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001380:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <HAL_SPI_MspInit+0xc4>)
 8001382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001386:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_SPI_MspInit+0xc4>)
 800138c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_SPI_MspInit+0xc4>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <HAL_SPI_MspInit+0xc4>)
 80013a0:	f043 0304 	orr.w	r3, r3, #4
 80013a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <HAL_SPI_MspInit+0xc4>)
 80013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013d0:	2306      	movs	r3, #6
 80013d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013da:	4619      	mov	r1, r3
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <HAL_SPI_MspInit+0xc8>)
 80013de:	f003 f849 	bl	8004474 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80013e2:	bf00      	nop
 80013e4:	37e0      	adds	r7, #224	; 0xe0
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40003c00 	.word	0x40003c00
 80013f0:	58024400 	.word	0x58024400
 80013f4:	58020800 	.word	0x58020800

080013f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a43      	ldr	r2, [pc, #268]	; (8001514 <HAL_TIM_Base_MspInit+0x11c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d10f      	bne.n	800142a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800140a:	4b43      	ldr	r3, [pc, #268]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 800140c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001410:	4a41      	ldr	r2, [pc, #260]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800141a:	4b3f      	ldr	r3, [pc, #252]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 800141c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001428:	e06f      	b.n	800150a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM2)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001432:	d10f      	bne.n	8001454 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001434:	4b38      	ldr	r3, [pc, #224]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 8001436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800143a:	4a37      	ldr	r2, [pc, #220]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001444:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 8001446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	69bb      	ldr	r3, [r7, #24]
}
 8001452:	e05a      	b.n	800150a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM3)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a30      	ldr	r2, [pc, #192]	; (800151c <HAL_TIM_Base_MspInit+0x124>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d10f      	bne.n	800147e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800145e:	4b2e      	ldr	r3, [pc, #184]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 8001460:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001464:	4a2c      	ldr	r2, [pc, #176]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 8001466:	f043 0302 	orr.w	r3, r3, #2
 800146a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 8001470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	697b      	ldr	r3, [r7, #20]
}
 800147c:	e045      	b.n	800150a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM4)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a27      	ldr	r2, [pc, #156]	; (8001520 <HAL_TIM_Base_MspInit+0x128>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d10f      	bne.n	80014a8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001488:	4b23      	ldr	r3, [pc, #140]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 800148a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800148e:	4a22      	ldr	r2, [pc, #136]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001498:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 800149a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
}
 80014a6:	e030      	b.n	800150a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM5)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1d      	ldr	r2, [pc, #116]	; (8001524 <HAL_TIM_Base_MspInit+0x12c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d117      	bne.n	80014e2 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 80014b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014b8:	4a17      	ldr	r2, [pc, #92]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 80014ba:	f043 0308 	orr.w	r3, r3, #8
 80014be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 80014c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	2032      	movs	r0, #50	; 0x32
 80014d6:	f000 fd74 	bl	8001fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80014da:	2032      	movs	r0, #50	; 0x32
 80014dc:	f000 fd8b 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
}
 80014e0:	e013      	b.n	800150a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM15)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <HAL_TIM_Base_MspInit+0x130>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d10e      	bne.n	800150a <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 80014ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014f2:	4a09      	ldr	r2, [pc, #36]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_TIM_Base_MspInit+0x120>)
 80014fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
}
 800150a:	bf00      	nop
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40010000 	.word	0x40010000
 8001518:	58024400 	.word	0x58024400
 800151c:	40000400 	.word	0x40000400
 8001520:	40000800 	.word	0x40000800
 8001524:	40000c00 	.word	0x40000c00
 8001528:	40014000 	.word	0x40014000

0800152c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08c      	sub	sp, #48	; 0x30
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 031c 	add.w	r3, r7, #28
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a5e      	ldr	r2, [pc, #376]	; (80016c4 <HAL_TIM_MspPostInit+0x198>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d120      	bne.n	8001590 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800154e:	4b5e      	ldr	r3, [pc, #376]	; (80016c8 <HAL_TIM_MspPostInit+0x19c>)
 8001550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001554:	4a5c      	ldr	r2, [pc, #368]	; (80016c8 <HAL_TIM_MspPostInit+0x19c>)
 8001556:	f043 0310 	orr.w	r3, r3, #16
 800155a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155e:	4b5a      	ldr	r3, [pc, #360]	; (80016c8 <HAL_TIM_MspPostInit+0x19c>)
 8001560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	61bb      	str	r3, [r7, #24]
 800156a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 800156c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800157e:	2301      	movs	r3, #1
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	4619      	mov	r1, r3
 8001588:	4850      	ldr	r0, [pc, #320]	; (80016cc <HAL_TIM_MspPostInit+0x1a0>)
 800158a:	f002 ff73 	bl	8004474 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800158e:	e094      	b.n	80016ba <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001598:	d120      	bne.n	80015dc <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	4b4b      	ldr	r3, [pc, #300]	; (80016c8 <HAL_TIM_MspPostInit+0x19c>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a0:	4a49      	ldr	r2, [pc, #292]	; (80016c8 <HAL_TIM_MspPostInit+0x19c>)
 80015a2:	f043 0302 	orr.w	r3, r3, #2
 80015a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015aa:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <HAL_TIM_MspPostInit+0x19c>)
 80015ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 80015b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015ca:	2301      	movs	r3, #1
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 031c 	add.w	r3, r7, #28
 80015d2:	4619      	mov	r1, r3
 80015d4:	483e      	ldr	r0, [pc, #248]	; (80016d0 <HAL_TIM_MspPostInit+0x1a4>)
 80015d6:	f002 ff4d 	bl	8004474 <HAL_GPIO_Init>
}
 80015da:	e06e      	b.n	80016ba <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a3c      	ldr	r2, [pc, #240]	; (80016d4 <HAL_TIM_MspPostInit+0x1a8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d11f      	bne.n	8001626 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	4b38      	ldr	r3, [pc, #224]	; (80016c8 <HAL_TIM_MspPostInit+0x19c>)
 80015e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ec:	4a36      	ldr	r2, [pc, #216]	; (80016c8 <HAL_TIM_MspPostInit+0x19c>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f6:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <HAL_TIM_MspPostInit+0x19c>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8001604:	2340      	movs	r3, #64	; 0x40
 8001606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001614:	2302      	movs	r3, #2
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 031c 	add.w	r3, r7, #28
 800161c:	4619      	mov	r1, r3
 800161e:	482e      	ldr	r0, [pc, #184]	; (80016d8 <HAL_TIM_MspPostInit+0x1ac>)
 8001620:	f002 ff28 	bl	8004474 <HAL_GPIO_Init>
}
 8001624:	e049      	b.n	80016ba <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a2c      	ldr	r2, [pc, #176]	; (80016dc <HAL_TIM_MspPostInit+0x1b0>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d120      	bne.n	8001672 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <HAL_TIM_MspPostInit+0x19c>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001636:	4a24      	ldr	r2, [pc, #144]	; (80016c8 <HAL_TIM_MspPostInit+0x19c>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001640:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <HAL_TIM_MspPostInit+0x19c>)
 8001642:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 800164e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001660:	2302      	movs	r3, #2
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	4819      	ldr	r0, [pc, #100]	; (80016d0 <HAL_TIM_MspPostInit+0x1a4>)
 800166c:	f002 ff02 	bl	8004474 <HAL_GPIO_Init>
}
 8001670:	e023      	b.n	80016ba <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a1a      	ldr	r2, [pc, #104]	; (80016e0 <HAL_TIM_MspPostInit+0x1b4>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d11e      	bne.n	80016ba <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <HAL_TIM_MspPostInit+0x19c>)
 800167e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001682:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <HAL_TIM_MspPostInit+0x19c>)
 8001684:	f043 0310 	orr.w	r3, r3, #16
 8001688:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800168c:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <HAL_TIM_MspPostInit+0x19c>)
 800168e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 800169a:	2340      	movs	r3, #64	; 0x40
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80016aa:	2304      	movs	r3, #4
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <HAL_TIM_MspPostInit+0x1a0>)
 80016b6:	f002 fedd 	bl	8004474 <HAL_GPIO_Init>
}
 80016ba:	bf00      	nop
 80016bc:	3730      	adds	r7, #48	; 0x30
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40010000 	.word	0x40010000
 80016c8:	58024400 	.word	0x58024400
 80016cc:	58021000 	.word	0x58021000
 80016d0:	58020400 	.word	0x58020400
 80016d4:	40000400 	.word	0x40000400
 80016d8:	58020000 	.word	0x58020000
 80016dc:	40000800 	.word	0x40000800
 80016e0:	40014000 	.word	0x40014000

080016e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b0bc      	sub	sp, #240	; 0xf0
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016fc:	f107 0320 	add.w	r3, r7, #32
 8001700:	22bc      	movs	r2, #188	; 0xbc
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f008 ff97 	bl	800a638 <memset>
  if(huart->Instance==UART4)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a67      	ldr	r2, [pc, #412]	; (80018ac <HAL_UART_MspInit+0x1c8>)
 8001710:	4293      	cmp	r3, r2
 8001712:	f040 80db 	bne.w	80018cc <HAL_UART_MspInit+0x1e8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001716:	2302      	movs	r3, #2
 8001718:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001720:	f107 0320 	add.w	r3, r7, #32
 8001724:	4618      	mov	r0, r3
 8001726:	f004 f85f 	bl	80057e8 <HAL_RCCEx_PeriphCLKConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001730:	f7ff fddd 	bl	80012ee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001734:	4b5e      	ldr	r3, [pc, #376]	; (80018b0 <HAL_UART_MspInit+0x1cc>)
 8001736:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800173a:	4a5d      	ldr	r2, [pc, #372]	; (80018b0 <HAL_UART_MspInit+0x1cc>)
 800173c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001740:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001744:	4b5a      	ldr	r3, [pc, #360]	; (80018b0 <HAL_UART_MspInit+0x1cc>)
 8001746:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800174a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b57      	ldr	r3, [pc, #348]	; (80018b0 <HAL_UART_MspInit+0x1cc>)
 8001754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001758:	4a55      	ldr	r2, [pc, #340]	; (80018b0 <HAL_UART_MspInit+0x1cc>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001762:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_UART_MspInit+0x1cc>)
 8001764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	61bb      	str	r3, [r7, #24]
 800176e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001770:	4b4f      	ldr	r3, [pc, #316]	; (80018b0 <HAL_UART_MspInit+0x1cc>)
 8001772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001776:	4a4e      	ldr	r2, [pc, #312]	; (80018b0 <HAL_UART_MspInit+0x1cc>)
 8001778:	f043 0308 	orr.w	r3, r3, #8
 800177c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001780:	4b4b      	ldr	r3, [pc, #300]	; (80018b0 <HAL_UART_MspInit+0x1cc>)
 8001782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA15 (JTDI)     ------> UART4_DE
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800178e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001792:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017a8:	2308      	movs	r3, #8
 80017aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017b2:	4619      	mov	r1, r3
 80017b4:	483f      	ldr	r0, [pc, #252]	; (80018b4 <HAL_UART_MspInit+0x1d0>)
 80017b6:	f002 fe5d 	bl	8004474 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017ba:	2303      	movs	r3, #3
 80017bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017d2:	2308      	movs	r3, #8
 80017d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017dc:	4619      	mov	r1, r3
 80017de:	4836      	ldr	r0, [pc, #216]	; (80018b8 <HAL_UART_MspInit+0x1d4>)
 80017e0:	f002 fe48 	bl	8004474 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 80017e4:	4b35      	ldr	r3, [pc, #212]	; (80018bc <HAL_UART_MspInit+0x1d8>)
 80017e6:	4a36      	ldr	r2, [pc, #216]	; (80018c0 <HAL_UART_MspInit+0x1dc>)
 80017e8:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80017ea:	4b34      	ldr	r3, [pc, #208]	; (80018bc <HAL_UART_MspInit+0x1d8>)
 80017ec:	223f      	movs	r2, #63	; 0x3f
 80017ee:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017f0:	4b32      	ldr	r3, [pc, #200]	; (80018bc <HAL_UART_MspInit+0x1d8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f6:	4b31      	ldr	r3, [pc, #196]	; (80018bc <HAL_UART_MspInit+0x1d8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <HAL_UART_MspInit+0x1d8>)
 80017fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001802:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001804:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_UART_MspInit+0x1d8>)
 8001806:	2200      	movs	r2, #0
 8001808:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800180a:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <HAL_UART_MspInit+0x1d8>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001810:	4b2a      	ldr	r3, [pc, #168]	; (80018bc <HAL_UART_MspInit+0x1d8>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001816:	4b29      	ldr	r3, [pc, #164]	; (80018bc <HAL_UART_MspInit+0x1d8>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800181c:	4b27      	ldr	r3, [pc, #156]	; (80018bc <HAL_UART_MspInit+0x1d8>)
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001822:	4826      	ldr	r0, [pc, #152]	; (80018bc <HAL_UART_MspInit+0x1d8>)
 8001824:	f000 fc02 	bl	800202c <HAL_DMA_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_UART_MspInit+0x14e>
    {
      Error_Handler();
 800182e:	f7ff fd5e 	bl	80012ee <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a21      	ldr	r2, [pc, #132]	; (80018bc <HAL_UART_MspInit+0x1d8>)
 8001836:	67da      	str	r2, [r3, #124]	; 0x7c
 8001838:	4a20      	ldr	r2, [pc, #128]	; (80018bc <HAL_UART_MspInit+0x1d8>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 800183e:	4b21      	ldr	r3, [pc, #132]	; (80018c4 <HAL_UART_MspInit+0x1e0>)
 8001840:	4a21      	ldr	r2, [pc, #132]	; (80018c8 <HAL_UART_MspInit+0x1e4>)
 8001842:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <HAL_UART_MspInit+0x1e0>)
 8001846:	2240      	movs	r2, #64	; 0x40
 8001848:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800184a:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <HAL_UART_MspInit+0x1e0>)
 800184c:	2240      	movs	r2, #64	; 0x40
 800184e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001850:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <HAL_UART_MspInit+0x1e0>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001856:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <HAL_UART_MspInit+0x1e0>)
 8001858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800185c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800185e:	4b19      	ldr	r3, [pc, #100]	; (80018c4 <HAL_UART_MspInit+0x1e0>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <HAL_UART_MspInit+0x1e0>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <HAL_UART_MspInit+0x1e0>)
 800186c:	2200      	movs	r2, #0
 800186e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_UART_MspInit+0x1e0>)
 8001872:	2200      	movs	r2, #0
 8001874:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001876:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <HAL_UART_MspInit+0x1e0>)
 8001878:	2200      	movs	r2, #0
 800187a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800187c:	4811      	ldr	r0, [pc, #68]	; (80018c4 <HAL_UART_MspInit+0x1e0>)
 800187e:	f000 fbd5 	bl	800202c <HAL_DMA_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <HAL_UART_MspInit+0x1a8>
    {
      Error_Handler();
 8001888:	f7ff fd31 	bl	80012ee <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <HAL_UART_MspInit+0x1e0>)
 8001890:	679a      	str	r2, [r3, #120]	; 0x78
 8001892:	4a0c      	ldr	r2, [pc, #48]	; (80018c4 <HAL_UART_MspInit+0x1e0>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	2100      	movs	r1, #0
 800189c:	2034      	movs	r0, #52	; 0x34
 800189e:	f000 fb90 	bl	8001fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80018a2:	2034      	movs	r0, #52	; 0x34
 80018a4:	f000 fba7 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018a8:	e0bb      	b.n	8001a22 <HAL_UART_MspInit+0x33e>
 80018aa:	bf00      	nop
 80018ac:	40004c00 	.word	0x40004c00
 80018b0:	58024400 	.word	0x58024400
 80018b4:	58020000 	.word	0x58020000
 80018b8:	58020c00 	.word	0x58020c00
 80018bc:	2000002c 	.word	0x2000002c
 80018c0:	40020410 	.word	0x40020410
 80018c4:	20000584 	.word	0x20000584
 80018c8:	40020428 	.word	0x40020428
  else if(huart->Instance==USART3)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a56      	ldr	r2, [pc, #344]	; (8001a2c <HAL_UART_MspInit+0x348>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	f040 80a5 	bne.w	8001a22 <HAL_UART_MspInit+0x33e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018d8:	2302      	movs	r3, #2
 80018da:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e2:	f107 0320 	add.w	r3, r7, #32
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 ff7e 	bl	80057e8 <HAL_RCCEx_PeriphCLKConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_UART_MspInit+0x212>
      Error_Handler();
 80018f2:	f7ff fcfc 	bl	80012ee <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018f6:	4b4e      	ldr	r3, [pc, #312]	; (8001a30 <HAL_UART_MspInit+0x34c>)
 80018f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018fc:	4a4c      	ldr	r2, [pc, #304]	; (8001a30 <HAL_UART_MspInit+0x34c>)
 80018fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001902:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001906:	4b4a      	ldr	r3, [pc, #296]	; (8001a30 <HAL_UART_MspInit+0x34c>)
 8001908:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800190c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001914:	4b46      	ldr	r3, [pc, #280]	; (8001a30 <HAL_UART_MspInit+0x34c>)
 8001916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191a:	4a45      	ldr	r2, [pc, #276]	; (8001a30 <HAL_UART_MspInit+0x34c>)
 800191c:	f043 0308 	orr.w	r3, r3, #8
 8001920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001924:	4b42      	ldr	r3, [pc, #264]	; (8001a30 <HAL_UART_MspInit+0x34c>)
 8001926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001932:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800194c:	2307      	movs	r3, #7
 800194e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001952:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001956:	4619      	mov	r1, r3
 8001958:	4836      	ldr	r0, [pc, #216]	; (8001a34 <HAL_UART_MspInit+0x350>)
 800195a:	f002 fd8b 	bl	8004474 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800195e:	4b36      	ldr	r3, [pc, #216]	; (8001a38 <HAL_UART_MspInit+0x354>)
 8001960:	4a36      	ldr	r2, [pc, #216]	; (8001a3c <HAL_UART_MspInit+0x358>)
 8001962:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001964:	4b34      	ldr	r3, [pc, #208]	; (8001a38 <HAL_UART_MspInit+0x354>)
 8001966:	222d      	movs	r2, #45	; 0x2d
 8001968:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800196a:	4b33      	ldr	r3, [pc, #204]	; (8001a38 <HAL_UART_MspInit+0x354>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001970:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <HAL_UART_MspInit+0x354>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001976:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <HAL_UART_MspInit+0x354>)
 8001978:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800197c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800197e:	4b2e      	ldr	r3, [pc, #184]	; (8001a38 <HAL_UART_MspInit+0x354>)
 8001980:	2200      	movs	r2, #0
 8001982:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001984:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <HAL_UART_MspInit+0x354>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800198a:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <HAL_UART_MspInit+0x354>)
 800198c:	2200      	movs	r2, #0
 800198e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <HAL_UART_MspInit+0x354>)
 8001992:	2200      	movs	r2, #0
 8001994:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001996:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <HAL_UART_MspInit+0x354>)
 8001998:	2200      	movs	r2, #0
 800199a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800199c:	4826      	ldr	r0, [pc, #152]	; (8001a38 <HAL_UART_MspInit+0x354>)
 800199e:	f000 fb45 	bl	800202c <HAL_DMA_Init>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <HAL_UART_MspInit+0x2c8>
      Error_Handler();
 80019a8:	f7ff fca1 	bl	80012ee <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a22      	ldr	r2, [pc, #136]	; (8001a38 <HAL_UART_MspInit+0x354>)
 80019b0:	67da      	str	r2, [r3, #124]	; 0x7c
 80019b2:	4a21      	ldr	r2, [pc, #132]	; (8001a38 <HAL_UART_MspInit+0x354>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80019b8:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <HAL_UART_MspInit+0x35c>)
 80019ba:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <HAL_UART_MspInit+0x360>)
 80019bc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_UART_MspInit+0x35c>)
 80019c0:	222e      	movs	r2, #46	; 0x2e
 80019c2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019c4:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <HAL_UART_MspInit+0x35c>)
 80019c6:	2240      	movs	r2, #64	; 0x40
 80019c8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ca:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_UART_MspInit+0x35c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_UART_MspInit+0x35c>)
 80019d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_UART_MspInit+0x35c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_UART_MspInit+0x35c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_UART_MspInit+0x35c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_UART_MspInit+0x35c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <HAL_UART_MspInit+0x35c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80019f6:	4812      	ldr	r0, [pc, #72]	; (8001a40 <HAL_UART_MspInit+0x35c>)
 80019f8:	f000 fb18 	bl	800202c <HAL_DMA_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_UART_MspInit+0x322>
      Error_Handler();
 8001a02:	f7ff fc74 	bl	80012ee <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <HAL_UART_MspInit+0x35c>)
 8001a0a:	679a      	str	r2, [r3, #120]	; 0x78
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <HAL_UART_MspInit+0x35c>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2027      	movs	r0, #39	; 0x27
 8001a18:	f000 fad3 	bl	8001fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a1c:	2027      	movs	r0, #39	; 0x27
 8001a1e:	f000 faea 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
}
 8001a22:	bf00      	nop
 8001a24:	37f0      	adds	r7, #240	; 0xf0
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40004800 	.word	0x40004800
 8001a30:	58024400 	.word	0x58024400
 8001a34:	58020c00 	.word	0x58020c00
 8001a38:	200000f0 	.word	0x200000f0
 8001a3c:	40020028 	.word	0x40020028
 8001a40:	200002bc 	.word	0x200002bc
 8001a44:	40020040 	.word	0x40020040

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <NMI_Handler+0x4>

08001a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <HardFault_Handler+0x4>

08001a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <MemManage_Handler+0x4>

08001a5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5e:	e7fe      	b.n	8001a5e <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a94:	f000 f98e 	bl	8001db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001aa0:	4802      	ldr	r0, [pc, #8]	; (8001aac <DMA1_Stream1_IRQHandler+0x10>)
 8001aa2:	f001 fb81 	bl	80031a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200000f0 	.word	0x200000f0

08001ab0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <DMA1_Stream2_IRQHandler+0x10>)
 8001ab6:	f001 fb77 	bl	80031a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200002bc 	.word	0x200002bc

08001ac4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ac8:	2040      	movs	r0, #64	; 0x40
 8001aca:	f002 fe9c 	bl	8004806 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001ace:	2080      	movs	r0, #128	; 0x80
 8001ad0:	f002 fe99 	bl	8004806 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <USART3_IRQHandler+0x10>)
 8001ade:	f006 fd49 	bl	8008574 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000168 	.word	0x20000168

08001aec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001af0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001af4:	f002 fe87 	bl	8004806 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001af8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001afc:	f002 fe83 	bl	8004806 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b04:	f002 fe7f 	bl	8004806 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001b08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b0c:	f002 fe7b 	bl	8004806 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <TIM5_IRQHandler+0x10>)
 8001b1a:	f005 fb9c 	bl	8007256 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000334 	.word	0x20000334

08001b28 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <UART4_IRQHandler+0x10>)
 8001b2e:	f006 fd21 	bl	8008574 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200004a8 	.word	0x200004a8

08001b3c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <DMA2_Stream0_IRQHandler+0x10>)
 8001b42:	f001 fb31 	bl	80031a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	2000002c 	.word	0x2000002c

08001b50 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <DMA2_Stream1_IRQHandler+0x10>)
 8001b56:	f001 fb27 	bl	80031a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000584 	.word	0x20000584

08001b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b68:	4b39      	ldr	r3, [pc, #228]	; (8001c50 <SystemInit+0xec>)
 8001b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6e:	4a38      	ldr	r2, [pc, #224]	; (8001c50 <SystemInit+0xec>)
 8001b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b78:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <SystemInit+0xf0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	2b06      	cmp	r3, #6
 8001b82:	d807      	bhi.n	8001b94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b84:	4b33      	ldr	r3, [pc, #204]	; (8001c54 <SystemInit+0xf0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 030f 	bic.w	r3, r3, #15
 8001b8c:	4a31      	ldr	r2, [pc, #196]	; (8001c54 <SystemInit+0xf0>)
 8001b8e:	f043 0307 	orr.w	r3, r3, #7
 8001b92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <SystemInit+0xf4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a2f      	ldr	r2, [pc, #188]	; (8001c58 <SystemInit+0xf4>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ba0:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <SystemInit+0xf4>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ba6:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <SystemInit+0xf4>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	492b      	ldr	r1, [pc, #172]	; (8001c58 <SystemInit+0xf4>)
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <SystemInit+0xf8>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <SystemInit+0xf0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d007      	beq.n	8001bce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bbe:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <SystemInit+0xf0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 030f 	bic.w	r3, r3, #15
 8001bc6:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <SystemInit+0xf0>)
 8001bc8:	f043 0307 	orr.w	r3, r3, #7
 8001bcc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <SystemInit+0xf4>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <SystemInit+0xf4>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bda:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <SystemInit+0xf4>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <SystemInit+0xf4>)
 8001be2:	4a1f      	ldr	r2, [pc, #124]	; (8001c60 <SystemInit+0xfc>)
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001be6:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <SystemInit+0xf4>)
 8001be8:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <SystemInit+0x100>)
 8001bea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <SystemInit+0xf4>)
 8001bee:	4a1e      	ldr	r2, [pc, #120]	; (8001c68 <SystemInit+0x104>)
 8001bf0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <SystemInit+0xf4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001bf8:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <SystemInit+0xf4>)
 8001bfa:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <SystemInit+0x104>)
 8001bfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001bfe:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <SystemInit+0xf4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <SystemInit+0xf4>)
 8001c06:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <SystemInit+0x104>)
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <SystemInit+0xf4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <SystemInit+0xf4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a10      	ldr	r2, [pc, #64]	; (8001c58 <SystemInit+0xf4>)
 8001c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <SystemInit+0xf4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <SystemInit+0x108>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <SystemInit+0x10c>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c2e:	d202      	bcs.n	8001c36 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <SystemInit+0x110>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <SystemInit+0x114>)
 8001c38:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c3c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <SystemInit+0xec>)
 8001c40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c44:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00
 8001c54:	52002000 	.word	0x52002000
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c60:	02020200 	.word	0x02020200
 8001c64:	01ff0000 	.word	0x01ff0000
 8001c68:	01010280 	.word	0x01010280
 8001c6c:	5c001000 	.word	0x5c001000
 8001c70:	ffff0000 	.word	0xffff0000
 8001c74:	51008108 	.word	0x51008108
 8001c78:	52004000 	.word	0x52004000

08001c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c80:	f7ff ff70 	bl	8001b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c84:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c86:	490d      	ldr	r1, [pc, #52]	; (8001cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c9c:	4c0a      	ldr	r4, [pc, #40]	; (8001cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001caa:	f008 fca1 	bl	800a5f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cae:	f7fe fc8f 	bl	80005d0 <main>
  bx  lr
 8001cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cbc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001cc0:	0800a6b0 	.word	0x0800a6b0
  ldr r2, =_sbss
 8001cc4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001cc8:	2000060c 	.word	0x2000060c

08001ccc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC3_IRQHandler>
	...

08001cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd6:	2003      	movs	r0, #3
 8001cd8:	f000 f968 	bl	8001fac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cdc:	f003 fbae 	bl	800543c <HAL_RCC_GetSysClockFreq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <HAL_Init+0x68>)
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	0a1b      	lsrs	r3, r3, #8
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	4913      	ldr	r1, [pc, #76]	; (8001d3c <HAL_Init+0x6c>)
 8001cee:	5ccb      	ldrb	r3, [r1, r3]
 8001cf0:	f003 031f 	and.w	r3, r3, #31
 8001cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <HAL_Init+0x68>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <HAL_Init+0x6c>)
 8001d04:	5cd3      	ldrb	r3, [r2, r3]
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d10:	4a0b      	ldr	r2, [pc, #44]	; (8001d40 <HAL_Init+0x70>)
 8001d12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d14:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <HAL_Init+0x74>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f000 f814 	bl	8001d48 <HAL_InitTick>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e002      	b.n	8001d30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2a:	f7ff fae5 	bl	80012f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	58024400 	.word	0x58024400
 8001d3c:	0800a660 	.word	0x0800a660
 8001d40:	20000004 	.word	0x20000004
 8001d44:	20000000 	.word	0x20000000

08001d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d50:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <HAL_InitTick+0x60>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e021      	b.n	8001da0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <HAL_InitTick+0x64>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_InitTick+0x60>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	4619      	mov	r1, r3
 8001d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 f94d 	bl	8002012 <HAL_SYSTICK_Config>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00e      	b.n	8001da0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b0f      	cmp	r3, #15
 8001d86:	d80a      	bhi.n	8001d9e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	f000 f917 	bl	8001fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d94:	4a06      	ldr	r2, [pc, #24]	; (8001db0 <HAL_InitTick+0x68>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e000      	b.n	8001da0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	2000000c 	.word	0x2000000c
 8001dac:	20000000 	.word	0x20000000
 8001db0:	20000008 	.word	0x20000008

08001db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_IncTick+0x20>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_IncTick+0x24>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <HAL_IncTick+0x24>)
 8001dc6:	6013      	str	r3, [r2, #0]
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	2000000c 	.word	0x2000000c
 8001dd8:	20000608 	.word	0x20000608

08001ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return uwTick;
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <HAL_GetTick+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000608 	.word	0x20000608

08001df4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <HAL_GetREVID+0x14>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	0c1b      	lsrs	r3, r3, #16
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	5c001000 	.word	0x5c001000

08001e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <__NVIC_SetPriorityGrouping+0x40>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <__NVIC_SetPriorityGrouping+0x44>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3a:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <__NVIC_SetPriorityGrouping+0x40>)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	60d3      	str	r3, [r2, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00
 8001e50:	05fa0000 	.word	0x05fa0000

08001e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <__NVIC_GetPriorityGrouping+0x18>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	f003 0307 	and.w	r3, r3, #7
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	db0b      	blt.n	8001e9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e82:	88fb      	ldrh	r3, [r7, #6]
 8001e84:	f003 021f 	and.w	r2, r3, #31
 8001e88:	4907      	ldr	r1, [pc, #28]	; (8001ea8 <__NVIC_EnableIRQ+0x38>)
 8001e8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	2001      	movs	r0, #1
 8001e92:	fa00 f202 	lsl.w	r2, r0, r2
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000e100 	.word	0xe000e100

08001eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	6039      	str	r1, [r7, #0]
 8001eb6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001eb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	db0a      	blt.n	8001ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	490c      	ldr	r1, [pc, #48]	; (8001ef8 <__NVIC_SetPriority+0x4c>)
 8001ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eca:	0112      	lsls	r2, r2, #4
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	440b      	add	r3, r1
 8001ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed4:	e00a      	b.n	8001eec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4908      	ldr	r1, [pc, #32]	; (8001efc <__NVIC_SetPriority+0x50>)
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	3b04      	subs	r3, #4
 8001ee4:	0112      	lsls	r2, r2, #4
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	440b      	add	r3, r1
 8001eea:	761a      	strb	r2, [r3, #24]
}
 8001eec:	bf00      	nop
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000e100 	.word	0xe000e100
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b089      	sub	sp, #36	; 0x24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f1c3 0307 	rsb	r3, r3, #7
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	bf28      	it	cs
 8001f1e:	2304      	movcs	r3, #4
 8001f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3304      	adds	r3, #4
 8001f26:	2b06      	cmp	r3, #6
 8001f28:	d902      	bls.n	8001f30 <NVIC_EncodePriority+0x30>
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3b03      	subs	r3, #3
 8001f2e:	e000      	b.n	8001f32 <NVIC_EncodePriority+0x32>
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	f04f 32ff 	mov.w	r2, #4294967295
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	43da      	mvns	r2, r3
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	401a      	ands	r2, r3
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f48:	f04f 31ff 	mov.w	r1, #4294967295
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f52:	43d9      	mvns	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	4313      	orrs	r3, r2
         );
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3724      	adds	r7, #36	; 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f78:	d301      	bcc.n	8001f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00f      	b.n	8001f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <SysTick_Config+0x40>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f86:	210f      	movs	r1, #15
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f7ff ff8e 	bl	8001eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <SysTick_Config+0x40>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <SysTick_Config+0x40>)
 8001f98:	2207      	movs	r2, #7
 8001f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	e000e010 	.word	0xe000e010

08001fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ff29 	bl	8001e0c <__NVIC_SetPriorityGrouping>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd0:	f7ff ff40 	bl	8001e54 <__NVIC_GetPriorityGrouping>
 8001fd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	6978      	ldr	r0, [r7, #20]
 8001fdc:	f7ff ff90 	bl	8001f00 <NVIC_EncodePriority>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff5f 	bl	8001eac <__NVIC_SetPriority>
}
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002000:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff33 	bl	8001e70 <__NVIC_EnableIRQ>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffa4 	bl	8001f68 <SysTick_Config>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002034:	f7ff fed2 	bl	8001ddc <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e316      	b.n	8002672 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a66      	ldr	r2, [pc, #408]	; (80021e4 <HAL_DMA_Init+0x1b8>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d04a      	beq.n	80020e4 <HAL_DMA_Init+0xb8>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a65      	ldr	r2, [pc, #404]	; (80021e8 <HAL_DMA_Init+0x1bc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d045      	beq.n	80020e4 <HAL_DMA_Init+0xb8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a63      	ldr	r2, [pc, #396]	; (80021ec <HAL_DMA_Init+0x1c0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d040      	beq.n	80020e4 <HAL_DMA_Init+0xb8>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a62      	ldr	r2, [pc, #392]	; (80021f0 <HAL_DMA_Init+0x1c4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d03b      	beq.n	80020e4 <HAL_DMA_Init+0xb8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a60      	ldr	r2, [pc, #384]	; (80021f4 <HAL_DMA_Init+0x1c8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d036      	beq.n	80020e4 <HAL_DMA_Init+0xb8>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a5f      	ldr	r2, [pc, #380]	; (80021f8 <HAL_DMA_Init+0x1cc>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d031      	beq.n	80020e4 <HAL_DMA_Init+0xb8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a5d      	ldr	r2, [pc, #372]	; (80021fc <HAL_DMA_Init+0x1d0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d02c      	beq.n	80020e4 <HAL_DMA_Init+0xb8>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a5c      	ldr	r2, [pc, #368]	; (8002200 <HAL_DMA_Init+0x1d4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d027      	beq.n	80020e4 <HAL_DMA_Init+0xb8>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a5a      	ldr	r2, [pc, #360]	; (8002204 <HAL_DMA_Init+0x1d8>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d022      	beq.n	80020e4 <HAL_DMA_Init+0xb8>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a59      	ldr	r2, [pc, #356]	; (8002208 <HAL_DMA_Init+0x1dc>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d01d      	beq.n	80020e4 <HAL_DMA_Init+0xb8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a57      	ldr	r2, [pc, #348]	; (800220c <HAL_DMA_Init+0x1e0>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d018      	beq.n	80020e4 <HAL_DMA_Init+0xb8>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a56      	ldr	r2, [pc, #344]	; (8002210 <HAL_DMA_Init+0x1e4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d013      	beq.n	80020e4 <HAL_DMA_Init+0xb8>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a54      	ldr	r2, [pc, #336]	; (8002214 <HAL_DMA_Init+0x1e8>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00e      	beq.n	80020e4 <HAL_DMA_Init+0xb8>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a53      	ldr	r2, [pc, #332]	; (8002218 <HAL_DMA_Init+0x1ec>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d009      	beq.n	80020e4 <HAL_DMA_Init+0xb8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a51      	ldr	r2, [pc, #324]	; (800221c <HAL_DMA_Init+0x1f0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d004      	beq.n	80020e4 <HAL_DMA_Init+0xb8>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a50      	ldr	r2, [pc, #320]	; (8002220 <HAL_DMA_Init+0x1f4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d101      	bne.n	80020e8 <HAL_DMA_Init+0xbc>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_DMA_Init+0xbe>
 80020e8:	2300      	movs	r3, #0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 813b 	beq.w	8002366 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a37      	ldr	r2, [pc, #220]	; (80021e4 <HAL_DMA_Init+0x1b8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d04a      	beq.n	80021a0 <HAL_DMA_Init+0x174>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a36      	ldr	r2, [pc, #216]	; (80021e8 <HAL_DMA_Init+0x1bc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d045      	beq.n	80021a0 <HAL_DMA_Init+0x174>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a34      	ldr	r2, [pc, #208]	; (80021ec <HAL_DMA_Init+0x1c0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d040      	beq.n	80021a0 <HAL_DMA_Init+0x174>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a33      	ldr	r2, [pc, #204]	; (80021f0 <HAL_DMA_Init+0x1c4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d03b      	beq.n	80021a0 <HAL_DMA_Init+0x174>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a31      	ldr	r2, [pc, #196]	; (80021f4 <HAL_DMA_Init+0x1c8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d036      	beq.n	80021a0 <HAL_DMA_Init+0x174>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a30      	ldr	r2, [pc, #192]	; (80021f8 <HAL_DMA_Init+0x1cc>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d031      	beq.n	80021a0 <HAL_DMA_Init+0x174>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a2e      	ldr	r2, [pc, #184]	; (80021fc <HAL_DMA_Init+0x1d0>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d02c      	beq.n	80021a0 <HAL_DMA_Init+0x174>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a2d      	ldr	r2, [pc, #180]	; (8002200 <HAL_DMA_Init+0x1d4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d027      	beq.n	80021a0 <HAL_DMA_Init+0x174>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a2b      	ldr	r2, [pc, #172]	; (8002204 <HAL_DMA_Init+0x1d8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d022      	beq.n	80021a0 <HAL_DMA_Init+0x174>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a2a      	ldr	r2, [pc, #168]	; (8002208 <HAL_DMA_Init+0x1dc>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d01d      	beq.n	80021a0 <HAL_DMA_Init+0x174>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a28      	ldr	r2, [pc, #160]	; (800220c <HAL_DMA_Init+0x1e0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d018      	beq.n	80021a0 <HAL_DMA_Init+0x174>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a27      	ldr	r2, [pc, #156]	; (8002210 <HAL_DMA_Init+0x1e4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d013      	beq.n	80021a0 <HAL_DMA_Init+0x174>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a25      	ldr	r2, [pc, #148]	; (8002214 <HAL_DMA_Init+0x1e8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00e      	beq.n	80021a0 <HAL_DMA_Init+0x174>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a24      	ldr	r2, [pc, #144]	; (8002218 <HAL_DMA_Init+0x1ec>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d009      	beq.n	80021a0 <HAL_DMA_Init+0x174>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a22      	ldr	r2, [pc, #136]	; (800221c <HAL_DMA_Init+0x1f0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d004      	beq.n	80021a0 <HAL_DMA_Init+0x174>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a21      	ldr	r2, [pc, #132]	; (8002220 <HAL_DMA_Init+0x1f4>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d108      	bne.n	80021b2 <HAL_DMA_Init+0x186>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0201 	bic.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e007      	b.n	80021c2 <HAL_DMA_Init+0x196>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80021c2:	e02f      	b.n	8002224 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021c4:	f7ff fe0a 	bl	8001ddc <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b05      	cmp	r3, #5
 80021d0:	d928      	bls.n	8002224 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2220      	movs	r2, #32
 80021d6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2203      	movs	r2, #3
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e246      	b.n	8002672 <HAL_DMA_Init+0x646>
 80021e4:	40020010 	.word	0x40020010
 80021e8:	40020028 	.word	0x40020028
 80021ec:	40020040 	.word	0x40020040
 80021f0:	40020058 	.word	0x40020058
 80021f4:	40020070 	.word	0x40020070
 80021f8:	40020088 	.word	0x40020088
 80021fc:	400200a0 	.word	0x400200a0
 8002200:	400200b8 	.word	0x400200b8
 8002204:	40020410 	.word	0x40020410
 8002208:	40020428 	.word	0x40020428
 800220c:	40020440 	.word	0x40020440
 8002210:	40020458 	.word	0x40020458
 8002214:	40020470 	.word	0x40020470
 8002218:	40020488 	.word	0x40020488
 800221c:	400204a0 	.word	0x400204a0
 8002220:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1c8      	bne.n	80021c4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4b83      	ldr	r3, [pc, #524]	; (800244c <HAL_DMA_Init+0x420>)
 800223e:	4013      	ands	r3, r2
 8002240:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800224a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002256:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002262:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	2b04      	cmp	r3, #4
 8002276:	d107      	bne.n	8002288 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	4313      	orrs	r3, r2
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4313      	orrs	r3, r2
 8002286:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002288:	4b71      	ldr	r3, [pc, #452]	; (8002450 <HAL_DMA_Init+0x424>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b71      	ldr	r3, [pc, #452]	; (8002454 <HAL_DMA_Init+0x428>)
 800228e:	4013      	ands	r3, r2
 8002290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002294:	d328      	bcc.n	80022e8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b28      	cmp	r3, #40	; 0x28
 800229c:	d903      	bls.n	80022a6 <HAL_DMA_Init+0x27a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b2e      	cmp	r3, #46	; 0x2e
 80022a4:	d917      	bls.n	80022d6 <HAL_DMA_Init+0x2aa>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b3e      	cmp	r3, #62	; 0x3e
 80022ac:	d903      	bls.n	80022b6 <HAL_DMA_Init+0x28a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b42      	cmp	r3, #66	; 0x42
 80022b4:	d90f      	bls.n	80022d6 <HAL_DMA_Init+0x2aa>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b46      	cmp	r3, #70	; 0x46
 80022bc:	d903      	bls.n	80022c6 <HAL_DMA_Init+0x29a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2b48      	cmp	r3, #72	; 0x48
 80022c4:	d907      	bls.n	80022d6 <HAL_DMA_Init+0x2aa>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b4e      	cmp	r3, #78	; 0x4e
 80022cc:	d905      	bls.n	80022da <HAL_DMA_Init+0x2ae>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b52      	cmp	r3, #82	; 0x52
 80022d4:	d801      	bhi.n	80022da <HAL_DMA_Init+0x2ae>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_DMA_Init+0x2b0>
 80022da:	2300      	movs	r3, #0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f023 0307 	bic.w	r3, r3, #7
 80022fe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4313      	orrs	r3, r2
 8002308:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	2b04      	cmp	r3, #4
 8002310:	d117      	bne.n	8002342 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00e      	beq.n	8002342 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f001 ff1b 	bl	8004160 <DMA_CheckFifoParam>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2240      	movs	r2, #64	; 0x40
 8002334:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e197      	b.n	8002672 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f001 fe56 	bl	8003ffc <DMA_CalcBaseAndBitshift>
 8002350:	4603      	mov	r3, r0
 8002352:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	223f      	movs	r2, #63	; 0x3f
 800235e:	409a      	lsls	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	e0cd      	b.n	8002502 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a3b      	ldr	r2, [pc, #236]	; (8002458 <HAL_DMA_Init+0x42c>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d022      	beq.n	80023b6 <HAL_DMA_Init+0x38a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a39      	ldr	r2, [pc, #228]	; (800245c <HAL_DMA_Init+0x430>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01d      	beq.n	80023b6 <HAL_DMA_Init+0x38a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a38      	ldr	r2, [pc, #224]	; (8002460 <HAL_DMA_Init+0x434>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d018      	beq.n	80023b6 <HAL_DMA_Init+0x38a>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a36      	ldr	r2, [pc, #216]	; (8002464 <HAL_DMA_Init+0x438>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_DMA_Init+0x38a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a35      	ldr	r2, [pc, #212]	; (8002468 <HAL_DMA_Init+0x43c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00e      	beq.n	80023b6 <HAL_DMA_Init+0x38a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a33      	ldr	r2, [pc, #204]	; (800246c <HAL_DMA_Init+0x440>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d009      	beq.n	80023b6 <HAL_DMA_Init+0x38a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a32      	ldr	r2, [pc, #200]	; (8002470 <HAL_DMA_Init+0x444>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d004      	beq.n	80023b6 <HAL_DMA_Init+0x38a>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a30      	ldr	r2, [pc, #192]	; (8002474 <HAL_DMA_Init+0x448>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_DMA_Init+0x38e>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_DMA_Init+0x390>
 80023ba:	2300      	movs	r3, #0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	f000 8097 	beq.w	80024f0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a24      	ldr	r2, [pc, #144]	; (8002458 <HAL_DMA_Init+0x42c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d021      	beq.n	8002410 <HAL_DMA_Init+0x3e4>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a22      	ldr	r2, [pc, #136]	; (800245c <HAL_DMA_Init+0x430>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01c      	beq.n	8002410 <HAL_DMA_Init+0x3e4>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a21      	ldr	r2, [pc, #132]	; (8002460 <HAL_DMA_Init+0x434>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d017      	beq.n	8002410 <HAL_DMA_Init+0x3e4>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a1f      	ldr	r2, [pc, #124]	; (8002464 <HAL_DMA_Init+0x438>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d012      	beq.n	8002410 <HAL_DMA_Init+0x3e4>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a1e      	ldr	r2, [pc, #120]	; (8002468 <HAL_DMA_Init+0x43c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00d      	beq.n	8002410 <HAL_DMA_Init+0x3e4>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1c      	ldr	r2, [pc, #112]	; (800246c <HAL_DMA_Init+0x440>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d008      	beq.n	8002410 <HAL_DMA_Init+0x3e4>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a1b      	ldr	r2, [pc, #108]	; (8002470 <HAL_DMA_Init+0x444>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d003      	beq.n	8002410 <HAL_DMA_Init+0x3e4>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a19      	ldr	r2, [pc, #100]	; (8002474 <HAL_DMA_Init+0x448>)
 800240e:	4293      	cmp	r3, r2
 8002410:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2202      	movs	r2, #2
 800241e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_DMA_Init+0x44c>)
 800242e:	4013      	ands	r3, r2
 8002430:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b40      	cmp	r3, #64	; 0x40
 8002438:	d020      	beq.n	800247c <HAL_DMA_Init+0x450>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b80      	cmp	r3, #128	; 0x80
 8002440:	d102      	bne.n	8002448 <HAL_DMA_Init+0x41c>
 8002442:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002446:	e01a      	b.n	800247e <HAL_DMA_Init+0x452>
 8002448:	2300      	movs	r3, #0
 800244a:	e018      	b.n	800247e <HAL_DMA_Init+0x452>
 800244c:	fe10803f 	.word	0xfe10803f
 8002450:	5c001000 	.word	0x5c001000
 8002454:	ffff0000 	.word	0xffff0000
 8002458:	58025408 	.word	0x58025408
 800245c:	5802541c 	.word	0x5802541c
 8002460:	58025430 	.word	0x58025430
 8002464:	58025444 	.word	0x58025444
 8002468:	58025458 	.word	0x58025458
 800246c:	5802546c 	.word	0x5802546c
 8002470:	58025480 	.word	0x58025480
 8002474:	58025494 	.word	0x58025494
 8002478:	fffe000f 	.word	0xfffe000f
 800247c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68d2      	ldr	r2, [r2, #12]
 8002482:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002484:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800248c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002494:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800249c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80024a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80024ac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	461a      	mov	r2, r3
 80024c2:	4b6e      	ldr	r3, [pc, #440]	; (800267c <HAL_DMA_Init+0x650>)
 80024c4:	4413      	add	r3, r2
 80024c6:	4a6e      	ldr	r2, [pc, #440]	; (8002680 <HAL_DMA_Init+0x654>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	091b      	lsrs	r3, r3, #4
 80024ce:	009a      	lsls	r2, r3, #2
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f001 fd91 	bl	8003ffc <DMA_CalcBaseAndBitshift>
 80024da:	4603      	mov	r3, r0
 80024dc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	f003 031f 	and.w	r3, r3, #31
 80024e6:	2201      	movs	r2, #1
 80024e8:	409a      	lsls	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	e008      	b.n	8002502 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2240      	movs	r2, #64	; 0x40
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2203      	movs	r2, #3
 80024fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e0b7      	b.n	8002672 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a5f      	ldr	r2, [pc, #380]	; (8002684 <HAL_DMA_Init+0x658>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d072      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a5d      	ldr	r2, [pc, #372]	; (8002688 <HAL_DMA_Init+0x65c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d06d      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a5c      	ldr	r2, [pc, #368]	; (800268c <HAL_DMA_Init+0x660>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d068      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a5a      	ldr	r2, [pc, #360]	; (8002690 <HAL_DMA_Init+0x664>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d063      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a59      	ldr	r2, [pc, #356]	; (8002694 <HAL_DMA_Init+0x668>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d05e      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a57      	ldr	r2, [pc, #348]	; (8002698 <HAL_DMA_Init+0x66c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d059      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a56      	ldr	r2, [pc, #344]	; (800269c <HAL_DMA_Init+0x670>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d054      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a54      	ldr	r2, [pc, #336]	; (80026a0 <HAL_DMA_Init+0x674>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d04f      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a53      	ldr	r2, [pc, #332]	; (80026a4 <HAL_DMA_Init+0x678>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d04a      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a51      	ldr	r2, [pc, #324]	; (80026a8 <HAL_DMA_Init+0x67c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d045      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a50      	ldr	r2, [pc, #320]	; (80026ac <HAL_DMA_Init+0x680>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d040      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a4e      	ldr	r2, [pc, #312]	; (80026b0 <HAL_DMA_Init+0x684>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d03b      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a4d      	ldr	r2, [pc, #308]	; (80026b4 <HAL_DMA_Init+0x688>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d036      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a4b      	ldr	r2, [pc, #300]	; (80026b8 <HAL_DMA_Init+0x68c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d031      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a4a      	ldr	r2, [pc, #296]	; (80026bc <HAL_DMA_Init+0x690>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d02c      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a48      	ldr	r2, [pc, #288]	; (80026c0 <HAL_DMA_Init+0x694>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d027      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a47      	ldr	r2, [pc, #284]	; (80026c4 <HAL_DMA_Init+0x698>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d022      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a45      	ldr	r2, [pc, #276]	; (80026c8 <HAL_DMA_Init+0x69c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d01d      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a44      	ldr	r2, [pc, #272]	; (80026cc <HAL_DMA_Init+0x6a0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d018      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a42      	ldr	r2, [pc, #264]	; (80026d0 <HAL_DMA_Init+0x6a4>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d013      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a41      	ldr	r2, [pc, #260]	; (80026d4 <HAL_DMA_Init+0x6a8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d00e      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a3f      	ldr	r2, [pc, #252]	; (80026d8 <HAL_DMA_Init+0x6ac>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d009      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a3e      	ldr	r2, [pc, #248]	; (80026dc <HAL_DMA_Init+0x6b0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d004      	beq.n	80025f2 <HAL_DMA_Init+0x5c6>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a3c      	ldr	r2, [pc, #240]	; (80026e0 <HAL_DMA_Init+0x6b4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_DMA_Init+0x5ca>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_DMA_Init+0x5cc>
 80025f6:	2300      	movs	r3, #0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d032      	beq.n	8002662 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f001 fe2b 	bl	8004258 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b80      	cmp	r3, #128	; 0x80
 8002608:	d102      	bne.n	8002610 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002624:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d010      	beq.n	8002650 <HAL_DMA_Init+0x624>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b08      	cmp	r3, #8
 8002634:	d80c      	bhi.n	8002650 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f001 fea8 	bl	800438c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	e008      	b.n	8002662 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	a7fdabf8 	.word	0xa7fdabf8
 8002680:	cccccccd 	.word	0xcccccccd
 8002684:	40020010 	.word	0x40020010
 8002688:	40020028 	.word	0x40020028
 800268c:	40020040 	.word	0x40020040
 8002690:	40020058 	.word	0x40020058
 8002694:	40020070 	.word	0x40020070
 8002698:	40020088 	.word	0x40020088
 800269c:	400200a0 	.word	0x400200a0
 80026a0:	400200b8 	.word	0x400200b8
 80026a4:	40020410 	.word	0x40020410
 80026a8:	40020428 	.word	0x40020428
 80026ac:	40020440 	.word	0x40020440
 80026b0:	40020458 	.word	0x40020458
 80026b4:	40020470 	.word	0x40020470
 80026b8:	40020488 	.word	0x40020488
 80026bc:	400204a0 	.word	0x400204a0
 80026c0:	400204b8 	.word	0x400204b8
 80026c4:	58025408 	.word	0x58025408
 80026c8:	5802541c 	.word	0x5802541c
 80026cc:	58025430 	.word	0x58025430
 80026d0:	58025444 	.word	0x58025444
 80026d4:	58025458 	.word	0x58025458
 80026d8:	5802546c 	.word	0x5802546c
 80026dc:	58025480 	.word	0x58025480
 80026e0:	58025494 	.word	0x58025494

080026e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff fb76 	bl	8001ddc <HAL_GetTick>
 80026f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e2dc      	b.n	8002cb6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d008      	beq.n	800271a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2280      	movs	r2, #128	; 0x80
 800270c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e2cd      	b.n	8002cb6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a76      	ldr	r2, [pc, #472]	; (80028f8 <HAL_DMA_Abort+0x214>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d04a      	beq.n	80027ba <HAL_DMA_Abort+0xd6>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a74      	ldr	r2, [pc, #464]	; (80028fc <HAL_DMA_Abort+0x218>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d045      	beq.n	80027ba <HAL_DMA_Abort+0xd6>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a73      	ldr	r2, [pc, #460]	; (8002900 <HAL_DMA_Abort+0x21c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d040      	beq.n	80027ba <HAL_DMA_Abort+0xd6>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a71      	ldr	r2, [pc, #452]	; (8002904 <HAL_DMA_Abort+0x220>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d03b      	beq.n	80027ba <HAL_DMA_Abort+0xd6>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a70      	ldr	r2, [pc, #448]	; (8002908 <HAL_DMA_Abort+0x224>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d036      	beq.n	80027ba <HAL_DMA_Abort+0xd6>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a6e      	ldr	r2, [pc, #440]	; (800290c <HAL_DMA_Abort+0x228>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d031      	beq.n	80027ba <HAL_DMA_Abort+0xd6>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a6d      	ldr	r2, [pc, #436]	; (8002910 <HAL_DMA_Abort+0x22c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d02c      	beq.n	80027ba <HAL_DMA_Abort+0xd6>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a6b      	ldr	r2, [pc, #428]	; (8002914 <HAL_DMA_Abort+0x230>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d027      	beq.n	80027ba <HAL_DMA_Abort+0xd6>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a6a      	ldr	r2, [pc, #424]	; (8002918 <HAL_DMA_Abort+0x234>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d022      	beq.n	80027ba <HAL_DMA_Abort+0xd6>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a68      	ldr	r2, [pc, #416]	; (800291c <HAL_DMA_Abort+0x238>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d01d      	beq.n	80027ba <HAL_DMA_Abort+0xd6>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a67      	ldr	r2, [pc, #412]	; (8002920 <HAL_DMA_Abort+0x23c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d018      	beq.n	80027ba <HAL_DMA_Abort+0xd6>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a65      	ldr	r2, [pc, #404]	; (8002924 <HAL_DMA_Abort+0x240>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d013      	beq.n	80027ba <HAL_DMA_Abort+0xd6>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a64      	ldr	r2, [pc, #400]	; (8002928 <HAL_DMA_Abort+0x244>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00e      	beq.n	80027ba <HAL_DMA_Abort+0xd6>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a62      	ldr	r2, [pc, #392]	; (800292c <HAL_DMA_Abort+0x248>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d009      	beq.n	80027ba <HAL_DMA_Abort+0xd6>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a61      	ldr	r2, [pc, #388]	; (8002930 <HAL_DMA_Abort+0x24c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d004      	beq.n	80027ba <HAL_DMA_Abort+0xd6>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a5f      	ldr	r2, [pc, #380]	; (8002934 <HAL_DMA_Abort+0x250>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d101      	bne.n	80027be <HAL_DMA_Abort+0xda>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_DMA_Abort+0xdc>
 80027be:	2300      	movs	r3, #0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d013      	beq.n	80027ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f022 021e 	bic.w	r2, r2, #30
 80027d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	e00a      	b.n	8002802 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 020e 	bic.w	r2, r2, #14
 80027fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a3c      	ldr	r2, [pc, #240]	; (80028f8 <HAL_DMA_Abort+0x214>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d072      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a3a      	ldr	r2, [pc, #232]	; (80028fc <HAL_DMA_Abort+0x218>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d06d      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a39      	ldr	r2, [pc, #228]	; (8002900 <HAL_DMA_Abort+0x21c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d068      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a37      	ldr	r2, [pc, #220]	; (8002904 <HAL_DMA_Abort+0x220>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d063      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a36      	ldr	r2, [pc, #216]	; (8002908 <HAL_DMA_Abort+0x224>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d05e      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a34      	ldr	r2, [pc, #208]	; (800290c <HAL_DMA_Abort+0x228>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d059      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a33      	ldr	r2, [pc, #204]	; (8002910 <HAL_DMA_Abort+0x22c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d054      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a31      	ldr	r2, [pc, #196]	; (8002914 <HAL_DMA_Abort+0x230>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d04f      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a30      	ldr	r2, [pc, #192]	; (8002918 <HAL_DMA_Abort+0x234>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d04a      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a2e      	ldr	r2, [pc, #184]	; (800291c <HAL_DMA_Abort+0x238>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d045      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a2d      	ldr	r2, [pc, #180]	; (8002920 <HAL_DMA_Abort+0x23c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d040      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a2b      	ldr	r2, [pc, #172]	; (8002924 <HAL_DMA_Abort+0x240>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d03b      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2a      	ldr	r2, [pc, #168]	; (8002928 <HAL_DMA_Abort+0x244>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d036      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a28      	ldr	r2, [pc, #160]	; (800292c <HAL_DMA_Abort+0x248>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d031      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a27      	ldr	r2, [pc, #156]	; (8002930 <HAL_DMA_Abort+0x24c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d02c      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a25      	ldr	r2, [pc, #148]	; (8002934 <HAL_DMA_Abort+0x250>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d027      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a24      	ldr	r2, [pc, #144]	; (8002938 <HAL_DMA_Abort+0x254>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d022      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a22      	ldr	r2, [pc, #136]	; (800293c <HAL_DMA_Abort+0x258>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d01d      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a21      	ldr	r2, [pc, #132]	; (8002940 <HAL_DMA_Abort+0x25c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d018      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1f      	ldr	r2, [pc, #124]	; (8002944 <HAL_DMA_Abort+0x260>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d013      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1e      	ldr	r2, [pc, #120]	; (8002948 <HAL_DMA_Abort+0x264>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00e      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a1c      	ldr	r2, [pc, #112]	; (800294c <HAL_DMA_Abort+0x268>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d009      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a1b      	ldr	r2, [pc, #108]	; (8002950 <HAL_DMA_Abort+0x26c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d004      	beq.n	80028f2 <HAL_DMA_Abort+0x20e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a19      	ldr	r2, [pc, #100]	; (8002954 <HAL_DMA_Abort+0x270>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d132      	bne.n	8002958 <HAL_DMA_Abort+0x274>
 80028f2:	2301      	movs	r3, #1
 80028f4:	e031      	b.n	800295a <HAL_DMA_Abort+0x276>
 80028f6:	bf00      	nop
 80028f8:	40020010 	.word	0x40020010
 80028fc:	40020028 	.word	0x40020028
 8002900:	40020040 	.word	0x40020040
 8002904:	40020058 	.word	0x40020058
 8002908:	40020070 	.word	0x40020070
 800290c:	40020088 	.word	0x40020088
 8002910:	400200a0 	.word	0x400200a0
 8002914:	400200b8 	.word	0x400200b8
 8002918:	40020410 	.word	0x40020410
 800291c:	40020428 	.word	0x40020428
 8002920:	40020440 	.word	0x40020440
 8002924:	40020458 	.word	0x40020458
 8002928:	40020470 	.word	0x40020470
 800292c:	40020488 	.word	0x40020488
 8002930:	400204a0 	.word	0x400204a0
 8002934:	400204b8 	.word	0x400204b8
 8002938:	58025408 	.word	0x58025408
 800293c:	5802541c 	.word	0x5802541c
 8002940:	58025430 	.word	0x58025430
 8002944:	58025444 	.word	0x58025444
 8002948:	58025458 	.word	0x58025458
 800294c:	5802546c 	.word	0x5802546c
 8002950:	58025480 	.word	0x58025480
 8002954:	58025494 	.word	0x58025494
 8002958:	2300      	movs	r3, #0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800296c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a6d      	ldr	r2, [pc, #436]	; (8002b28 <HAL_DMA_Abort+0x444>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d04a      	beq.n	8002a0e <HAL_DMA_Abort+0x32a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a6b      	ldr	r2, [pc, #428]	; (8002b2c <HAL_DMA_Abort+0x448>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d045      	beq.n	8002a0e <HAL_DMA_Abort+0x32a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a6a      	ldr	r2, [pc, #424]	; (8002b30 <HAL_DMA_Abort+0x44c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d040      	beq.n	8002a0e <HAL_DMA_Abort+0x32a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a68      	ldr	r2, [pc, #416]	; (8002b34 <HAL_DMA_Abort+0x450>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d03b      	beq.n	8002a0e <HAL_DMA_Abort+0x32a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a67      	ldr	r2, [pc, #412]	; (8002b38 <HAL_DMA_Abort+0x454>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d036      	beq.n	8002a0e <HAL_DMA_Abort+0x32a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a65      	ldr	r2, [pc, #404]	; (8002b3c <HAL_DMA_Abort+0x458>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d031      	beq.n	8002a0e <HAL_DMA_Abort+0x32a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a64      	ldr	r2, [pc, #400]	; (8002b40 <HAL_DMA_Abort+0x45c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d02c      	beq.n	8002a0e <HAL_DMA_Abort+0x32a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a62      	ldr	r2, [pc, #392]	; (8002b44 <HAL_DMA_Abort+0x460>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d027      	beq.n	8002a0e <HAL_DMA_Abort+0x32a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a61      	ldr	r2, [pc, #388]	; (8002b48 <HAL_DMA_Abort+0x464>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d022      	beq.n	8002a0e <HAL_DMA_Abort+0x32a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a5f      	ldr	r2, [pc, #380]	; (8002b4c <HAL_DMA_Abort+0x468>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d01d      	beq.n	8002a0e <HAL_DMA_Abort+0x32a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a5e      	ldr	r2, [pc, #376]	; (8002b50 <HAL_DMA_Abort+0x46c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d018      	beq.n	8002a0e <HAL_DMA_Abort+0x32a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a5c      	ldr	r2, [pc, #368]	; (8002b54 <HAL_DMA_Abort+0x470>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_DMA_Abort+0x32a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a5b      	ldr	r2, [pc, #364]	; (8002b58 <HAL_DMA_Abort+0x474>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00e      	beq.n	8002a0e <HAL_DMA_Abort+0x32a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a59      	ldr	r2, [pc, #356]	; (8002b5c <HAL_DMA_Abort+0x478>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d009      	beq.n	8002a0e <HAL_DMA_Abort+0x32a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a58      	ldr	r2, [pc, #352]	; (8002b60 <HAL_DMA_Abort+0x47c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d004      	beq.n	8002a0e <HAL_DMA_Abort+0x32a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a56      	ldr	r2, [pc, #344]	; (8002b64 <HAL_DMA_Abort+0x480>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d108      	bne.n	8002a20 <HAL_DMA_Abort+0x33c>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0201 	bic.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	e007      	b.n	8002a30 <HAL_DMA_Abort+0x34c>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a30:	e013      	b.n	8002a5a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a32:	f7ff f9d3 	bl	8001ddc <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b05      	cmp	r3, #5
 8002a3e:	d90c      	bls.n	8002a5a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2203      	movs	r2, #3
 8002a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e12d      	b.n	8002cb6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1e5      	bne.n	8002a32 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a2f      	ldr	r2, [pc, #188]	; (8002b28 <HAL_DMA_Abort+0x444>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d04a      	beq.n	8002b06 <HAL_DMA_Abort+0x422>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a2d      	ldr	r2, [pc, #180]	; (8002b2c <HAL_DMA_Abort+0x448>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d045      	beq.n	8002b06 <HAL_DMA_Abort+0x422>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a2c      	ldr	r2, [pc, #176]	; (8002b30 <HAL_DMA_Abort+0x44c>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d040      	beq.n	8002b06 <HAL_DMA_Abort+0x422>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a2a      	ldr	r2, [pc, #168]	; (8002b34 <HAL_DMA_Abort+0x450>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d03b      	beq.n	8002b06 <HAL_DMA_Abort+0x422>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a29      	ldr	r2, [pc, #164]	; (8002b38 <HAL_DMA_Abort+0x454>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d036      	beq.n	8002b06 <HAL_DMA_Abort+0x422>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a27      	ldr	r2, [pc, #156]	; (8002b3c <HAL_DMA_Abort+0x458>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d031      	beq.n	8002b06 <HAL_DMA_Abort+0x422>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <HAL_DMA_Abort+0x45c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d02c      	beq.n	8002b06 <HAL_DMA_Abort+0x422>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a24      	ldr	r2, [pc, #144]	; (8002b44 <HAL_DMA_Abort+0x460>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d027      	beq.n	8002b06 <HAL_DMA_Abort+0x422>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a23      	ldr	r2, [pc, #140]	; (8002b48 <HAL_DMA_Abort+0x464>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d022      	beq.n	8002b06 <HAL_DMA_Abort+0x422>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a21      	ldr	r2, [pc, #132]	; (8002b4c <HAL_DMA_Abort+0x468>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d01d      	beq.n	8002b06 <HAL_DMA_Abort+0x422>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a20      	ldr	r2, [pc, #128]	; (8002b50 <HAL_DMA_Abort+0x46c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d018      	beq.n	8002b06 <HAL_DMA_Abort+0x422>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a1e      	ldr	r2, [pc, #120]	; (8002b54 <HAL_DMA_Abort+0x470>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d013      	beq.n	8002b06 <HAL_DMA_Abort+0x422>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <HAL_DMA_Abort+0x474>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d00e      	beq.n	8002b06 <HAL_DMA_Abort+0x422>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1b      	ldr	r2, [pc, #108]	; (8002b5c <HAL_DMA_Abort+0x478>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d009      	beq.n	8002b06 <HAL_DMA_Abort+0x422>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1a      	ldr	r2, [pc, #104]	; (8002b60 <HAL_DMA_Abort+0x47c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d004      	beq.n	8002b06 <HAL_DMA_Abort+0x422>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <HAL_DMA_Abort+0x480>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d101      	bne.n	8002b0a <HAL_DMA_Abort+0x426>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <HAL_DMA_Abort+0x428>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d02b      	beq.n	8002b68 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	223f      	movs	r2, #63	; 0x3f
 8002b20:	409a      	lsls	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	609a      	str	r2, [r3, #8]
 8002b26:	e02a      	b.n	8002b7e <HAL_DMA_Abort+0x49a>
 8002b28:	40020010 	.word	0x40020010
 8002b2c:	40020028 	.word	0x40020028
 8002b30:	40020040 	.word	0x40020040
 8002b34:	40020058 	.word	0x40020058
 8002b38:	40020070 	.word	0x40020070
 8002b3c:	40020088 	.word	0x40020088
 8002b40:	400200a0 	.word	0x400200a0
 8002b44:	400200b8 	.word	0x400200b8
 8002b48:	40020410 	.word	0x40020410
 8002b4c:	40020428 	.word	0x40020428
 8002b50:	40020440 	.word	0x40020440
 8002b54:	40020458 	.word	0x40020458
 8002b58:	40020470 	.word	0x40020470
 8002b5c:	40020488 	.word	0x40020488
 8002b60:	400204a0 	.word	0x400204a0
 8002b64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	f003 031f 	and.w	r3, r3, #31
 8002b76:	2201      	movs	r2, #1
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a4f      	ldr	r2, [pc, #316]	; (8002cc0 <HAL_DMA_Abort+0x5dc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d072      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a4d      	ldr	r2, [pc, #308]	; (8002cc4 <HAL_DMA_Abort+0x5e0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d06d      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a4c      	ldr	r2, [pc, #304]	; (8002cc8 <HAL_DMA_Abort+0x5e4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d068      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a4a      	ldr	r2, [pc, #296]	; (8002ccc <HAL_DMA_Abort+0x5e8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d063      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a49      	ldr	r2, [pc, #292]	; (8002cd0 <HAL_DMA_Abort+0x5ec>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d05e      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a47      	ldr	r2, [pc, #284]	; (8002cd4 <HAL_DMA_Abort+0x5f0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d059      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a46      	ldr	r2, [pc, #280]	; (8002cd8 <HAL_DMA_Abort+0x5f4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d054      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a44      	ldr	r2, [pc, #272]	; (8002cdc <HAL_DMA_Abort+0x5f8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d04f      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a43      	ldr	r2, [pc, #268]	; (8002ce0 <HAL_DMA_Abort+0x5fc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d04a      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a41      	ldr	r2, [pc, #260]	; (8002ce4 <HAL_DMA_Abort+0x600>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d045      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a40      	ldr	r2, [pc, #256]	; (8002ce8 <HAL_DMA_Abort+0x604>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d040      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a3e      	ldr	r2, [pc, #248]	; (8002cec <HAL_DMA_Abort+0x608>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d03b      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a3d      	ldr	r2, [pc, #244]	; (8002cf0 <HAL_DMA_Abort+0x60c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d036      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a3b      	ldr	r2, [pc, #236]	; (8002cf4 <HAL_DMA_Abort+0x610>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d031      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a3a      	ldr	r2, [pc, #232]	; (8002cf8 <HAL_DMA_Abort+0x614>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d02c      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a38      	ldr	r2, [pc, #224]	; (8002cfc <HAL_DMA_Abort+0x618>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d027      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a37      	ldr	r2, [pc, #220]	; (8002d00 <HAL_DMA_Abort+0x61c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d022      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a35      	ldr	r2, [pc, #212]	; (8002d04 <HAL_DMA_Abort+0x620>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d01d      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a34      	ldr	r2, [pc, #208]	; (8002d08 <HAL_DMA_Abort+0x624>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d018      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a32      	ldr	r2, [pc, #200]	; (8002d0c <HAL_DMA_Abort+0x628>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a31      	ldr	r2, [pc, #196]	; (8002d10 <HAL_DMA_Abort+0x62c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00e      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a2f      	ldr	r2, [pc, #188]	; (8002d14 <HAL_DMA_Abort+0x630>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d009      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a2e      	ldr	r2, [pc, #184]	; (8002d18 <HAL_DMA_Abort+0x634>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d004      	beq.n	8002c6e <HAL_DMA_Abort+0x58a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a2c      	ldr	r2, [pc, #176]	; (8002d1c <HAL_DMA_Abort+0x638>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d101      	bne.n	8002c72 <HAL_DMA_Abort+0x58e>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_DMA_Abort+0x590>
 8002c72:	2300      	movs	r3, #0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d015      	beq.n	8002ca4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c80:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00c      	beq.n	8002ca4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c98:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ca2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40020010 	.word	0x40020010
 8002cc4:	40020028 	.word	0x40020028
 8002cc8:	40020040 	.word	0x40020040
 8002ccc:	40020058 	.word	0x40020058
 8002cd0:	40020070 	.word	0x40020070
 8002cd4:	40020088 	.word	0x40020088
 8002cd8:	400200a0 	.word	0x400200a0
 8002cdc:	400200b8 	.word	0x400200b8
 8002ce0:	40020410 	.word	0x40020410
 8002ce4:	40020428 	.word	0x40020428
 8002ce8:	40020440 	.word	0x40020440
 8002cec:	40020458 	.word	0x40020458
 8002cf0:	40020470 	.word	0x40020470
 8002cf4:	40020488 	.word	0x40020488
 8002cf8:	400204a0 	.word	0x400204a0
 8002cfc:	400204b8 	.word	0x400204b8
 8002d00:	58025408 	.word	0x58025408
 8002d04:	5802541c 	.word	0x5802541c
 8002d08:	58025430 	.word	0x58025430
 8002d0c:	58025444 	.word	0x58025444
 8002d10:	58025458 	.word	0x58025458
 8002d14:	5802546c 	.word	0x5802546c
 8002d18:	58025480 	.word	0x58025480
 8002d1c:	58025494 	.word	0x58025494

08002d20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e205      	b.n	800313e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d004      	beq.n	8002d48 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2280      	movs	r2, #128	; 0x80
 8002d42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e1fa      	b.n	800313e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a8c      	ldr	r2, [pc, #560]	; (8002f80 <HAL_DMA_Abort_IT+0x260>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d04a      	beq.n	8002de8 <HAL_DMA_Abort_IT+0xc8>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a8b      	ldr	r2, [pc, #556]	; (8002f84 <HAL_DMA_Abort_IT+0x264>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d045      	beq.n	8002de8 <HAL_DMA_Abort_IT+0xc8>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a89      	ldr	r2, [pc, #548]	; (8002f88 <HAL_DMA_Abort_IT+0x268>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d040      	beq.n	8002de8 <HAL_DMA_Abort_IT+0xc8>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a88      	ldr	r2, [pc, #544]	; (8002f8c <HAL_DMA_Abort_IT+0x26c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d03b      	beq.n	8002de8 <HAL_DMA_Abort_IT+0xc8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a86      	ldr	r2, [pc, #536]	; (8002f90 <HAL_DMA_Abort_IT+0x270>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d036      	beq.n	8002de8 <HAL_DMA_Abort_IT+0xc8>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a85      	ldr	r2, [pc, #532]	; (8002f94 <HAL_DMA_Abort_IT+0x274>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d031      	beq.n	8002de8 <HAL_DMA_Abort_IT+0xc8>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a83      	ldr	r2, [pc, #524]	; (8002f98 <HAL_DMA_Abort_IT+0x278>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d02c      	beq.n	8002de8 <HAL_DMA_Abort_IT+0xc8>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a82      	ldr	r2, [pc, #520]	; (8002f9c <HAL_DMA_Abort_IT+0x27c>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d027      	beq.n	8002de8 <HAL_DMA_Abort_IT+0xc8>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a80      	ldr	r2, [pc, #512]	; (8002fa0 <HAL_DMA_Abort_IT+0x280>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d022      	beq.n	8002de8 <HAL_DMA_Abort_IT+0xc8>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a7f      	ldr	r2, [pc, #508]	; (8002fa4 <HAL_DMA_Abort_IT+0x284>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d01d      	beq.n	8002de8 <HAL_DMA_Abort_IT+0xc8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a7d      	ldr	r2, [pc, #500]	; (8002fa8 <HAL_DMA_Abort_IT+0x288>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d018      	beq.n	8002de8 <HAL_DMA_Abort_IT+0xc8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a7c      	ldr	r2, [pc, #496]	; (8002fac <HAL_DMA_Abort_IT+0x28c>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d013      	beq.n	8002de8 <HAL_DMA_Abort_IT+0xc8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a7a      	ldr	r2, [pc, #488]	; (8002fb0 <HAL_DMA_Abort_IT+0x290>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d00e      	beq.n	8002de8 <HAL_DMA_Abort_IT+0xc8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a79      	ldr	r2, [pc, #484]	; (8002fb4 <HAL_DMA_Abort_IT+0x294>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d009      	beq.n	8002de8 <HAL_DMA_Abort_IT+0xc8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a77      	ldr	r2, [pc, #476]	; (8002fb8 <HAL_DMA_Abort_IT+0x298>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d004      	beq.n	8002de8 <HAL_DMA_Abort_IT+0xc8>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a76      	ldr	r2, [pc, #472]	; (8002fbc <HAL_DMA_Abort_IT+0x29c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d101      	bne.n	8002dec <HAL_DMA_Abort_IT+0xcc>
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_DMA_Abort_IT+0xce>
 8002dec:	2300      	movs	r3, #0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d065      	beq.n	8002ebe <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2204      	movs	r2, #4
 8002df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a60      	ldr	r2, [pc, #384]	; (8002f80 <HAL_DMA_Abort_IT+0x260>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d04a      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x17a>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a5e      	ldr	r2, [pc, #376]	; (8002f84 <HAL_DMA_Abort_IT+0x264>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d045      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x17a>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a5d      	ldr	r2, [pc, #372]	; (8002f88 <HAL_DMA_Abort_IT+0x268>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d040      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x17a>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a5b      	ldr	r2, [pc, #364]	; (8002f8c <HAL_DMA_Abort_IT+0x26c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d03b      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x17a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a5a      	ldr	r2, [pc, #360]	; (8002f90 <HAL_DMA_Abort_IT+0x270>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d036      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x17a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a58      	ldr	r2, [pc, #352]	; (8002f94 <HAL_DMA_Abort_IT+0x274>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d031      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x17a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a57      	ldr	r2, [pc, #348]	; (8002f98 <HAL_DMA_Abort_IT+0x278>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d02c      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x17a>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a55      	ldr	r2, [pc, #340]	; (8002f9c <HAL_DMA_Abort_IT+0x27c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d027      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x17a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a54      	ldr	r2, [pc, #336]	; (8002fa0 <HAL_DMA_Abort_IT+0x280>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d022      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x17a>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a52      	ldr	r2, [pc, #328]	; (8002fa4 <HAL_DMA_Abort_IT+0x284>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d01d      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x17a>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a51      	ldr	r2, [pc, #324]	; (8002fa8 <HAL_DMA_Abort_IT+0x288>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d018      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x17a>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a4f      	ldr	r2, [pc, #316]	; (8002fac <HAL_DMA_Abort_IT+0x28c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d013      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x17a>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a4e      	ldr	r2, [pc, #312]	; (8002fb0 <HAL_DMA_Abort_IT+0x290>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00e      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x17a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a4c      	ldr	r2, [pc, #304]	; (8002fb4 <HAL_DMA_Abort_IT+0x294>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d009      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x17a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a4b      	ldr	r2, [pc, #300]	; (8002fb8 <HAL_DMA_Abort_IT+0x298>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d004      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x17a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a49      	ldr	r2, [pc, #292]	; (8002fbc <HAL_DMA_Abort_IT+0x29c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d108      	bne.n	8002eac <HAL_DMA_Abort_IT+0x18c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	e147      	b.n	800313c <HAL_DMA_Abort_IT+0x41c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	e13e      	b.n	800313c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 020e 	bic.w	r2, r2, #14
 8002ecc:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a2b      	ldr	r2, [pc, #172]	; (8002f80 <HAL_DMA_Abort_IT+0x260>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d04a      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x24e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a29      	ldr	r2, [pc, #164]	; (8002f84 <HAL_DMA_Abort_IT+0x264>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d045      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x24e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a28      	ldr	r2, [pc, #160]	; (8002f88 <HAL_DMA_Abort_IT+0x268>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d040      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x24e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a26      	ldr	r2, [pc, #152]	; (8002f8c <HAL_DMA_Abort_IT+0x26c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d03b      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x24e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <HAL_DMA_Abort_IT+0x270>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d036      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x24e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a23      	ldr	r2, [pc, #140]	; (8002f94 <HAL_DMA_Abort_IT+0x274>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d031      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x24e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a22      	ldr	r2, [pc, #136]	; (8002f98 <HAL_DMA_Abort_IT+0x278>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d02c      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x24e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a20      	ldr	r2, [pc, #128]	; (8002f9c <HAL_DMA_Abort_IT+0x27c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d027      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x24e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1f      	ldr	r2, [pc, #124]	; (8002fa0 <HAL_DMA_Abort_IT+0x280>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d022      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x24e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <HAL_DMA_Abort_IT+0x284>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d01d      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x24e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1c      	ldr	r2, [pc, #112]	; (8002fa8 <HAL_DMA_Abort_IT+0x288>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d018      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x24e>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1a      	ldr	r2, [pc, #104]	; (8002fac <HAL_DMA_Abort_IT+0x28c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d013      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x24e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a19      	ldr	r2, [pc, #100]	; (8002fb0 <HAL_DMA_Abort_IT+0x290>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d00e      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x24e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a17      	ldr	r2, [pc, #92]	; (8002fb4 <HAL_DMA_Abort_IT+0x294>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d009      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x24e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a16      	ldr	r2, [pc, #88]	; (8002fb8 <HAL_DMA_Abort_IT+0x298>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d004      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x24e>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a14      	ldr	r2, [pc, #80]	; (8002fbc <HAL_DMA_Abort_IT+0x29c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d128      	bne.n	8002fc0 <HAL_DMA_Abort_IT+0x2a0>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0201 	bic.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e027      	b.n	8002fd0 <HAL_DMA_Abort_IT+0x2b0>
 8002f80:	40020010 	.word	0x40020010
 8002f84:	40020028 	.word	0x40020028
 8002f88:	40020040 	.word	0x40020040
 8002f8c:	40020058 	.word	0x40020058
 8002f90:	40020070 	.word	0x40020070
 8002f94:	40020088 	.word	0x40020088
 8002f98:	400200a0 	.word	0x400200a0
 8002f9c:	400200b8 	.word	0x400200b8
 8002fa0:	40020410 	.word	0x40020410
 8002fa4:	40020428 	.word	0x40020428
 8002fa8:	40020440 	.word	0x40020440
 8002fac:	40020458 	.word	0x40020458
 8002fb0:	40020470 	.word	0x40020470
 8002fb4:	40020488 	.word	0x40020488
 8002fb8:	400204a0 	.word	0x400204a0
 8002fbc:	400204b8 	.word	0x400204b8
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a5c      	ldr	r2, [pc, #368]	; (8003148 <HAL_DMA_Abort_IT+0x428>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d072      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a5b      	ldr	r2, [pc, #364]	; (800314c <HAL_DMA_Abort_IT+0x42c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d06d      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a59      	ldr	r2, [pc, #356]	; (8003150 <HAL_DMA_Abort_IT+0x430>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d068      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a58      	ldr	r2, [pc, #352]	; (8003154 <HAL_DMA_Abort_IT+0x434>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d063      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a56      	ldr	r2, [pc, #344]	; (8003158 <HAL_DMA_Abort_IT+0x438>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d05e      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a55      	ldr	r2, [pc, #340]	; (800315c <HAL_DMA_Abort_IT+0x43c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d059      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a53      	ldr	r2, [pc, #332]	; (8003160 <HAL_DMA_Abort_IT+0x440>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d054      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a52      	ldr	r2, [pc, #328]	; (8003164 <HAL_DMA_Abort_IT+0x444>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d04f      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a50      	ldr	r2, [pc, #320]	; (8003168 <HAL_DMA_Abort_IT+0x448>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d04a      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a4f      	ldr	r2, [pc, #316]	; (800316c <HAL_DMA_Abort_IT+0x44c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d045      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a4d      	ldr	r2, [pc, #308]	; (8003170 <HAL_DMA_Abort_IT+0x450>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d040      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a4c      	ldr	r2, [pc, #304]	; (8003174 <HAL_DMA_Abort_IT+0x454>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d03b      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a4a      	ldr	r2, [pc, #296]	; (8003178 <HAL_DMA_Abort_IT+0x458>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d036      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a49      	ldr	r2, [pc, #292]	; (800317c <HAL_DMA_Abort_IT+0x45c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d031      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a47      	ldr	r2, [pc, #284]	; (8003180 <HAL_DMA_Abort_IT+0x460>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d02c      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a46      	ldr	r2, [pc, #280]	; (8003184 <HAL_DMA_Abort_IT+0x464>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d027      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a44      	ldr	r2, [pc, #272]	; (8003188 <HAL_DMA_Abort_IT+0x468>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d022      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a43      	ldr	r2, [pc, #268]	; (800318c <HAL_DMA_Abort_IT+0x46c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d01d      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a41      	ldr	r2, [pc, #260]	; (8003190 <HAL_DMA_Abort_IT+0x470>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d018      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a40      	ldr	r2, [pc, #256]	; (8003194 <HAL_DMA_Abort_IT+0x474>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d013      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a3e      	ldr	r2, [pc, #248]	; (8003198 <HAL_DMA_Abort_IT+0x478>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00e      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a3d      	ldr	r2, [pc, #244]	; (800319c <HAL_DMA_Abort_IT+0x47c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d009      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a3b      	ldr	r2, [pc, #236]	; (80031a0 <HAL_DMA_Abort_IT+0x480>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d004      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x3a0>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a3a      	ldr	r2, [pc, #232]	; (80031a4 <HAL_DMA_Abort_IT+0x484>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d101      	bne.n	80030c4 <HAL_DMA_Abort_IT+0x3a4>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <HAL_DMA_Abort_IT+0x3a6>
 80030c4:	2300      	movs	r3, #0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d028      	beq.n	800311c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030d8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030de:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	2201      	movs	r2, #1
 80030ea:	409a      	lsls	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80030f8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00c      	beq.n	800311c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800310c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003110:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800311a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40020010 	.word	0x40020010
 800314c:	40020028 	.word	0x40020028
 8003150:	40020040 	.word	0x40020040
 8003154:	40020058 	.word	0x40020058
 8003158:	40020070 	.word	0x40020070
 800315c:	40020088 	.word	0x40020088
 8003160:	400200a0 	.word	0x400200a0
 8003164:	400200b8 	.word	0x400200b8
 8003168:	40020410 	.word	0x40020410
 800316c:	40020428 	.word	0x40020428
 8003170:	40020440 	.word	0x40020440
 8003174:	40020458 	.word	0x40020458
 8003178:	40020470 	.word	0x40020470
 800317c:	40020488 	.word	0x40020488
 8003180:	400204a0 	.word	0x400204a0
 8003184:	400204b8 	.word	0x400204b8
 8003188:	58025408 	.word	0x58025408
 800318c:	5802541c 	.word	0x5802541c
 8003190:	58025430 	.word	0x58025430
 8003194:	58025444 	.word	0x58025444
 8003198:	58025458 	.word	0x58025458
 800319c:	5802546c 	.word	0x5802546c
 80031a0:	58025480 	.word	0x58025480
 80031a4:	58025494 	.word	0x58025494

080031a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08a      	sub	sp, #40	; 0x28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031b4:	4b67      	ldr	r3, [pc, #412]	; (8003354 <HAL_DMA_IRQHandler+0x1ac>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a67      	ldr	r2, [pc, #412]	; (8003358 <HAL_DMA_IRQHandler+0x1b0>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	0a9b      	lsrs	r3, r3, #10
 80031c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a5f      	ldr	r2, [pc, #380]	; (800335c <HAL_DMA_IRQHandler+0x1b4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d04a      	beq.n	800327a <HAL_DMA_IRQHandler+0xd2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a5d      	ldr	r2, [pc, #372]	; (8003360 <HAL_DMA_IRQHandler+0x1b8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d045      	beq.n	800327a <HAL_DMA_IRQHandler+0xd2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a5c      	ldr	r2, [pc, #368]	; (8003364 <HAL_DMA_IRQHandler+0x1bc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d040      	beq.n	800327a <HAL_DMA_IRQHandler+0xd2>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a5a      	ldr	r2, [pc, #360]	; (8003368 <HAL_DMA_IRQHandler+0x1c0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d03b      	beq.n	800327a <HAL_DMA_IRQHandler+0xd2>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a59      	ldr	r2, [pc, #356]	; (800336c <HAL_DMA_IRQHandler+0x1c4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d036      	beq.n	800327a <HAL_DMA_IRQHandler+0xd2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a57      	ldr	r2, [pc, #348]	; (8003370 <HAL_DMA_IRQHandler+0x1c8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d031      	beq.n	800327a <HAL_DMA_IRQHandler+0xd2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a56      	ldr	r2, [pc, #344]	; (8003374 <HAL_DMA_IRQHandler+0x1cc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d02c      	beq.n	800327a <HAL_DMA_IRQHandler+0xd2>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a54      	ldr	r2, [pc, #336]	; (8003378 <HAL_DMA_IRQHandler+0x1d0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d027      	beq.n	800327a <HAL_DMA_IRQHandler+0xd2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a53      	ldr	r2, [pc, #332]	; (800337c <HAL_DMA_IRQHandler+0x1d4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d022      	beq.n	800327a <HAL_DMA_IRQHandler+0xd2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a51      	ldr	r2, [pc, #324]	; (8003380 <HAL_DMA_IRQHandler+0x1d8>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01d      	beq.n	800327a <HAL_DMA_IRQHandler+0xd2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a50      	ldr	r2, [pc, #320]	; (8003384 <HAL_DMA_IRQHandler+0x1dc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d018      	beq.n	800327a <HAL_DMA_IRQHandler+0xd2>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a4e      	ldr	r2, [pc, #312]	; (8003388 <HAL_DMA_IRQHandler+0x1e0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <HAL_DMA_IRQHandler+0xd2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a4d      	ldr	r2, [pc, #308]	; (800338c <HAL_DMA_IRQHandler+0x1e4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00e      	beq.n	800327a <HAL_DMA_IRQHandler+0xd2>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a4b      	ldr	r2, [pc, #300]	; (8003390 <HAL_DMA_IRQHandler+0x1e8>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_DMA_IRQHandler+0xd2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a4a      	ldr	r2, [pc, #296]	; (8003394 <HAL_DMA_IRQHandler+0x1ec>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_DMA_IRQHandler+0xd2>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a48      	ldr	r2, [pc, #288]	; (8003398 <HAL_DMA_IRQHandler+0x1f0>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <HAL_DMA_IRQHandler+0xd6>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <HAL_DMA_IRQHandler+0xd8>
 800327e:	2300      	movs	r3, #0
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 842b 	beq.w	8003adc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	2208      	movs	r2, #8
 8003290:	409a      	lsls	r2, r3
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 80a2 	beq.w	80033e0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a2e      	ldr	r2, [pc, #184]	; (800335c <HAL_DMA_IRQHandler+0x1b4>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d04a      	beq.n	800333c <HAL_DMA_IRQHandler+0x194>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a2d      	ldr	r2, [pc, #180]	; (8003360 <HAL_DMA_IRQHandler+0x1b8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d045      	beq.n	800333c <HAL_DMA_IRQHandler+0x194>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a2b      	ldr	r2, [pc, #172]	; (8003364 <HAL_DMA_IRQHandler+0x1bc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d040      	beq.n	800333c <HAL_DMA_IRQHandler+0x194>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a2a      	ldr	r2, [pc, #168]	; (8003368 <HAL_DMA_IRQHandler+0x1c0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d03b      	beq.n	800333c <HAL_DMA_IRQHandler+0x194>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a28      	ldr	r2, [pc, #160]	; (800336c <HAL_DMA_IRQHandler+0x1c4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d036      	beq.n	800333c <HAL_DMA_IRQHandler+0x194>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a27      	ldr	r2, [pc, #156]	; (8003370 <HAL_DMA_IRQHandler+0x1c8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d031      	beq.n	800333c <HAL_DMA_IRQHandler+0x194>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a25      	ldr	r2, [pc, #148]	; (8003374 <HAL_DMA_IRQHandler+0x1cc>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d02c      	beq.n	800333c <HAL_DMA_IRQHandler+0x194>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a24      	ldr	r2, [pc, #144]	; (8003378 <HAL_DMA_IRQHandler+0x1d0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d027      	beq.n	800333c <HAL_DMA_IRQHandler+0x194>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a22      	ldr	r2, [pc, #136]	; (800337c <HAL_DMA_IRQHandler+0x1d4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d022      	beq.n	800333c <HAL_DMA_IRQHandler+0x194>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a21      	ldr	r2, [pc, #132]	; (8003380 <HAL_DMA_IRQHandler+0x1d8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d01d      	beq.n	800333c <HAL_DMA_IRQHandler+0x194>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1f      	ldr	r2, [pc, #124]	; (8003384 <HAL_DMA_IRQHandler+0x1dc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d018      	beq.n	800333c <HAL_DMA_IRQHandler+0x194>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1e      	ldr	r2, [pc, #120]	; (8003388 <HAL_DMA_IRQHandler+0x1e0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d013      	beq.n	800333c <HAL_DMA_IRQHandler+0x194>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1c      	ldr	r2, [pc, #112]	; (800338c <HAL_DMA_IRQHandler+0x1e4>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00e      	beq.n	800333c <HAL_DMA_IRQHandler+0x194>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1b      	ldr	r2, [pc, #108]	; (8003390 <HAL_DMA_IRQHandler+0x1e8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d009      	beq.n	800333c <HAL_DMA_IRQHandler+0x194>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a19      	ldr	r2, [pc, #100]	; (8003394 <HAL_DMA_IRQHandler+0x1ec>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d004      	beq.n	800333c <HAL_DMA_IRQHandler+0x194>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a18      	ldr	r2, [pc, #96]	; (8003398 <HAL_DMA_IRQHandler+0x1f0>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d12f      	bne.n	800339c <HAL_DMA_IRQHandler+0x1f4>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	bf14      	ite	ne
 800334a:	2301      	movne	r3, #1
 800334c:	2300      	moveq	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	e02e      	b.n	80033b0 <HAL_DMA_IRQHandler+0x208>
 8003352:	bf00      	nop
 8003354:	20000000 	.word	0x20000000
 8003358:	1b4e81b5 	.word	0x1b4e81b5
 800335c:	40020010 	.word	0x40020010
 8003360:	40020028 	.word	0x40020028
 8003364:	40020040 	.word	0x40020040
 8003368:	40020058 	.word	0x40020058
 800336c:	40020070 	.word	0x40020070
 8003370:	40020088 	.word	0x40020088
 8003374:	400200a0 	.word	0x400200a0
 8003378:	400200b8 	.word	0x400200b8
 800337c:	40020410 	.word	0x40020410
 8003380:	40020428 	.word	0x40020428
 8003384:	40020440 	.word	0x40020440
 8003388:	40020458 	.word	0x40020458
 800338c:	40020470 	.word	0x40020470
 8003390:	40020488 	.word	0x40020488
 8003394:	400204a0 	.word	0x400204a0
 8003398:	400204b8 	.word	0x400204b8
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	bf14      	ite	ne
 80033aa:	2301      	movne	r3, #1
 80033ac:	2300      	moveq	r3, #0
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d015      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0204 	bic.w	r2, r2, #4
 80033c2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	2208      	movs	r2, #8
 80033ce:	409a      	lsls	r2, r3
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	f043 0201 	orr.w	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	fa22 f303 	lsr.w	r3, r2, r3
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d06e      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a69      	ldr	r2, [pc, #420]	; (80035a0 <HAL_DMA_IRQHandler+0x3f8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d04a      	beq.n	8003496 <HAL_DMA_IRQHandler+0x2ee>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a67      	ldr	r2, [pc, #412]	; (80035a4 <HAL_DMA_IRQHandler+0x3fc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d045      	beq.n	8003496 <HAL_DMA_IRQHandler+0x2ee>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a66      	ldr	r2, [pc, #408]	; (80035a8 <HAL_DMA_IRQHandler+0x400>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d040      	beq.n	8003496 <HAL_DMA_IRQHandler+0x2ee>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a64      	ldr	r2, [pc, #400]	; (80035ac <HAL_DMA_IRQHandler+0x404>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d03b      	beq.n	8003496 <HAL_DMA_IRQHandler+0x2ee>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a63      	ldr	r2, [pc, #396]	; (80035b0 <HAL_DMA_IRQHandler+0x408>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d036      	beq.n	8003496 <HAL_DMA_IRQHandler+0x2ee>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a61      	ldr	r2, [pc, #388]	; (80035b4 <HAL_DMA_IRQHandler+0x40c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d031      	beq.n	8003496 <HAL_DMA_IRQHandler+0x2ee>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a60      	ldr	r2, [pc, #384]	; (80035b8 <HAL_DMA_IRQHandler+0x410>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d02c      	beq.n	8003496 <HAL_DMA_IRQHandler+0x2ee>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a5e      	ldr	r2, [pc, #376]	; (80035bc <HAL_DMA_IRQHandler+0x414>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d027      	beq.n	8003496 <HAL_DMA_IRQHandler+0x2ee>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a5d      	ldr	r2, [pc, #372]	; (80035c0 <HAL_DMA_IRQHandler+0x418>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d022      	beq.n	8003496 <HAL_DMA_IRQHandler+0x2ee>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a5b      	ldr	r2, [pc, #364]	; (80035c4 <HAL_DMA_IRQHandler+0x41c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d01d      	beq.n	8003496 <HAL_DMA_IRQHandler+0x2ee>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a5a      	ldr	r2, [pc, #360]	; (80035c8 <HAL_DMA_IRQHandler+0x420>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d018      	beq.n	8003496 <HAL_DMA_IRQHandler+0x2ee>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a58      	ldr	r2, [pc, #352]	; (80035cc <HAL_DMA_IRQHandler+0x424>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <HAL_DMA_IRQHandler+0x2ee>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a57      	ldr	r2, [pc, #348]	; (80035d0 <HAL_DMA_IRQHandler+0x428>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d00e      	beq.n	8003496 <HAL_DMA_IRQHandler+0x2ee>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a55      	ldr	r2, [pc, #340]	; (80035d4 <HAL_DMA_IRQHandler+0x42c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d009      	beq.n	8003496 <HAL_DMA_IRQHandler+0x2ee>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a54      	ldr	r2, [pc, #336]	; (80035d8 <HAL_DMA_IRQHandler+0x430>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d004      	beq.n	8003496 <HAL_DMA_IRQHandler+0x2ee>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a52      	ldr	r2, [pc, #328]	; (80035dc <HAL_DMA_IRQHandler+0x434>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d10a      	bne.n	80034ac <HAL_DMA_IRQHandler+0x304>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e003      	b.n	80034b4 <HAL_DMA_IRQHandler+0x30c>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2300      	movs	r3, #0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00d      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2201      	movs	r2, #1
 80034c2:	409a      	lsls	r2, r3
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034cc:	f043 0202 	orr.w	r2, r3, #2
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2204      	movs	r2, #4
 80034de:	409a      	lsls	r2, r3
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 808f 	beq.w	8003608 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a2c      	ldr	r2, [pc, #176]	; (80035a0 <HAL_DMA_IRQHandler+0x3f8>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d04a      	beq.n	800358a <HAL_DMA_IRQHandler+0x3e2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a2a      	ldr	r2, [pc, #168]	; (80035a4 <HAL_DMA_IRQHandler+0x3fc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d045      	beq.n	800358a <HAL_DMA_IRQHandler+0x3e2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a29      	ldr	r2, [pc, #164]	; (80035a8 <HAL_DMA_IRQHandler+0x400>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d040      	beq.n	800358a <HAL_DMA_IRQHandler+0x3e2>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a27      	ldr	r2, [pc, #156]	; (80035ac <HAL_DMA_IRQHandler+0x404>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d03b      	beq.n	800358a <HAL_DMA_IRQHandler+0x3e2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a26      	ldr	r2, [pc, #152]	; (80035b0 <HAL_DMA_IRQHandler+0x408>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d036      	beq.n	800358a <HAL_DMA_IRQHandler+0x3e2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a24      	ldr	r2, [pc, #144]	; (80035b4 <HAL_DMA_IRQHandler+0x40c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d031      	beq.n	800358a <HAL_DMA_IRQHandler+0x3e2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a23      	ldr	r2, [pc, #140]	; (80035b8 <HAL_DMA_IRQHandler+0x410>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d02c      	beq.n	800358a <HAL_DMA_IRQHandler+0x3e2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a21      	ldr	r2, [pc, #132]	; (80035bc <HAL_DMA_IRQHandler+0x414>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d027      	beq.n	800358a <HAL_DMA_IRQHandler+0x3e2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a20      	ldr	r2, [pc, #128]	; (80035c0 <HAL_DMA_IRQHandler+0x418>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d022      	beq.n	800358a <HAL_DMA_IRQHandler+0x3e2>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a1e      	ldr	r2, [pc, #120]	; (80035c4 <HAL_DMA_IRQHandler+0x41c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01d      	beq.n	800358a <HAL_DMA_IRQHandler+0x3e2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1d      	ldr	r2, [pc, #116]	; (80035c8 <HAL_DMA_IRQHandler+0x420>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d018      	beq.n	800358a <HAL_DMA_IRQHandler+0x3e2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1b      	ldr	r2, [pc, #108]	; (80035cc <HAL_DMA_IRQHandler+0x424>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <HAL_DMA_IRQHandler+0x3e2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1a      	ldr	r2, [pc, #104]	; (80035d0 <HAL_DMA_IRQHandler+0x428>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00e      	beq.n	800358a <HAL_DMA_IRQHandler+0x3e2>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a18      	ldr	r2, [pc, #96]	; (80035d4 <HAL_DMA_IRQHandler+0x42c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_DMA_IRQHandler+0x3e2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a17      	ldr	r2, [pc, #92]	; (80035d8 <HAL_DMA_IRQHandler+0x430>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d004      	beq.n	800358a <HAL_DMA_IRQHandler+0x3e2>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a15      	ldr	r2, [pc, #84]	; (80035dc <HAL_DMA_IRQHandler+0x434>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d12a      	bne.n	80035e0 <HAL_DMA_IRQHandler+0x438>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf14      	ite	ne
 8003598:	2301      	movne	r3, #1
 800359a:	2300      	moveq	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	e023      	b.n	80035e8 <HAL_DMA_IRQHandler+0x440>
 80035a0:	40020010 	.word	0x40020010
 80035a4:	40020028 	.word	0x40020028
 80035a8:	40020040 	.word	0x40020040
 80035ac:	40020058 	.word	0x40020058
 80035b0:	40020070 	.word	0x40020070
 80035b4:	40020088 	.word	0x40020088
 80035b8:	400200a0 	.word	0x400200a0
 80035bc:	400200b8 	.word	0x400200b8
 80035c0:	40020410 	.word	0x40020410
 80035c4:	40020428 	.word	0x40020428
 80035c8:	40020440 	.word	0x40020440
 80035cc:	40020458 	.word	0x40020458
 80035d0:	40020470 	.word	0x40020470
 80035d4:	40020488 	.word	0x40020488
 80035d8:	400204a0 	.word	0x400204a0
 80035dc:	400204b8 	.word	0x400204b8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2300      	movs	r3, #0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00d      	beq.n	8003608 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f0:	f003 031f 	and.w	r3, r3, #31
 80035f4:	2204      	movs	r2, #4
 80035f6:	409a      	lsls	r2, r3
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003600:	f043 0204 	orr.w	r2, r3, #4
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	2210      	movs	r2, #16
 8003612:	409a      	lsls	r2, r3
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80a6 	beq.w	800376a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a85      	ldr	r2, [pc, #532]	; (8003838 <HAL_DMA_IRQHandler+0x690>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d04a      	beq.n	80036be <HAL_DMA_IRQHandler+0x516>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a83      	ldr	r2, [pc, #524]	; (800383c <HAL_DMA_IRQHandler+0x694>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d045      	beq.n	80036be <HAL_DMA_IRQHandler+0x516>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a82      	ldr	r2, [pc, #520]	; (8003840 <HAL_DMA_IRQHandler+0x698>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d040      	beq.n	80036be <HAL_DMA_IRQHandler+0x516>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a80      	ldr	r2, [pc, #512]	; (8003844 <HAL_DMA_IRQHandler+0x69c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d03b      	beq.n	80036be <HAL_DMA_IRQHandler+0x516>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a7f      	ldr	r2, [pc, #508]	; (8003848 <HAL_DMA_IRQHandler+0x6a0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d036      	beq.n	80036be <HAL_DMA_IRQHandler+0x516>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a7d      	ldr	r2, [pc, #500]	; (800384c <HAL_DMA_IRQHandler+0x6a4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d031      	beq.n	80036be <HAL_DMA_IRQHandler+0x516>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a7c      	ldr	r2, [pc, #496]	; (8003850 <HAL_DMA_IRQHandler+0x6a8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d02c      	beq.n	80036be <HAL_DMA_IRQHandler+0x516>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a7a      	ldr	r2, [pc, #488]	; (8003854 <HAL_DMA_IRQHandler+0x6ac>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d027      	beq.n	80036be <HAL_DMA_IRQHandler+0x516>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a79      	ldr	r2, [pc, #484]	; (8003858 <HAL_DMA_IRQHandler+0x6b0>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d022      	beq.n	80036be <HAL_DMA_IRQHandler+0x516>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a77      	ldr	r2, [pc, #476]	; (800385c <HAL_DMA_IRQHandler+0x6b4>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d01d      	beq.n	80036be <HAL_DMA_IRQHandler+0x516>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a76      	ldr	r2, [pc, #472]	; (8003860 <HAL_DMA_IRQHandler+0x6b8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d018      	beq.n	80036be <HAL_DMA_IRQHandler+0x516>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a74      	ldr	r2, [pc, #464]	; (8003864 <HAL_DMA_IRQHandler+0x6bc>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_DMA_IRQHandler+0x516>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a73      	ldr	r2, [pc, #460]	; (8003868 <HAL_DMA_IRQHandler+0x6c0>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00e      	beq.n	80036be <HAL_DMA_IRQHandler+0x516>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a71      	ldr	r2, [pc, #452]	; (800386c <HAL_DMA_IRQHandler+0x6c4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d009      	beq.n	80036be <HAL_DMA_IRQHandler+0x516>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a70      	ldr	r2, [pc, #448]	; (8003870 <HAL_DMA_IRQHandler+0x6c8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_DMA_IRQHandler+0x516>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a6e      	ldr	r2, [pc, #440]	; (8003874 <HAL_DMA_IRQHandler+0x6cc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d10a      	bne.n	80036d4 <HAL_DMA_IRQHandler+0x52c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf14      	ite	ne
 80036cc:	2301      	movne	r3, #1
 80036ce:	2300      	moveq	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	e009      	b.n	80036e8 <HAL_DMA_IRQHandler+0x540>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	bf14      	ite	ne
 80036e2:	2301      	movne	r3, #1
 80036e4:	2300      	moveq	r3, #0
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d03e      	beq.n	800376a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f0:	f003 031f 	and.w	r3, r3, #31
 80036f4:	2210      	movs	r2, #16
 80036f6:	409a      	lsls	r2, r3
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d018      	beq.n	800373c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d108      	bne.n	800372a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d024      	beq.n	800376a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	4798      	blx	r3
 8003728:	e01f      	b.n	800376a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01b      	beq.n	800376a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	4798      	blx	r3
 800373a:	e016      	b.n	800376a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d107      	bne.n	800375a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0208 	bic.w	r2, r2, #8
 8003758:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376e:	f003 031f 	and.w	r3, r3, #31
 8003772:	2220      	movs	r2, #32
 8003774:	409a      	lsls	r2, r3
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 8110 	beq.w	80039a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a2c      	ldr	r2, [pc, #176]	; (8003838 <HAL_DMA_IRQHandler+0x690>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d04a      	beq.n	8003820 <HAL_DMA_IRQHandler+0x678>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a2b      	ldr	r2, [pc, #172]	; (800383c <HAL_DMA_IRQHandler+0x694>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d045      	beq.n	8003820 <HAL_DMA_IRQHandler+0x678>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a29      	ldr	r2, [pc, #164]	; (8003840 <HAL_DMA_IRQHandler+0x698>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d040      	beq.n	8003820 <HAL_DMA_IRQHandler+0x678>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a28      	ldr	r2, [pc, #160]	; (8003844 <HAL_DMA_IRQHandler+0x69c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d03b      	beq.n	8003820 <HAL_DMA_IRQHandler+0x678>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a26      	ldr	r2, [pc, #152]	; (8003848 <HAL_DMA_IRQHandler+0x6a0>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d036      	beq.n	8003820 <HAL_DMA_IRQHandler+0x678>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a25      	ldr	r2, [pc, #148]	; (800384c <HAL_DMA_IRQHandler+0x6a4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d031      	beq.n	8003820 <HAL_DMA_IRQHandler+0x678>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a23      	ldr	r2, [pc, #140]	; (8003850 <HAL_DMA_IRQHandler+0x6a8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d02c      	beq.n	8003820 <HAL_DMA_IRQHandler+0x678>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a22      	ldr	r2, [pc, #136]	; (8003854 <HAL_DMA_IRQHandler+0x6ac>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d027      	beq.n	8003820 <HAL_DMA_IRQHandler+0x678>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a20      	ldr	r2, [pc, #128]	; (8003858 <HAL_DMA_IRQHandler+0x6b0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d022      	beq.n	8003820 <HAL_DMA_IRQHandler+0x678>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1f      	ldr	r2, [pc, #124]	; (800385c <HAL_DMA_IRQHandler+0x6b4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d01d      	beq.n	8003820 <HAL_DMA_IRQHandler+0x678>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <HAL_DMA_IRQHandler+0x6b8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d018      	beq.n	8003820 <HAL_DMA_IRQHandler+0x678>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1c      	ldr	r2, [pc, #112]	; (8003864 <HAL_DMA_IRQHandler+0x6bc>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d013      	beq.n	8003820 <HAL_DMA_IRQHandler+0x678>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1a      	ldr	r2, [pc, #104]	; (8003868 <HAL_DMA_IRQHandler+0x6c0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00e      	beq.n	8003820 <HAL_DMA_IRQHandler+0x678>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a19      	ldr	r2, [pc, #100]	; (800386c <HAL_DMA_IRQHandler+0x6c4>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d009      	beq.n	8003820 <HAL_DMA_IRQHandler+0x678>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a17      	ldr	r2, [pc, #92]	; (8003870 <HAL_DMA_IRQHandler+0x6c8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d004      	beq.n	8003820 <HAL_DMA_IRQHandler+0x678>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a16      	ldr	r2, [pc, #88]	; (8003874 <HAL_DMA_IRQHandler+0x6cc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d12b      	bne.n	8003878 <HAL_DMA_IRQHandler+0x6d0>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	bf14      	ite	ne
 800382e:	2301      	movne	r3, #1
 8003830:	2300      	moveq	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	e02a      	b.n	800388c <HAL_DMA_IRQHandler+0x6e4>
 8003836:	bf00      	nop
 8003838:	40020010 	.word	0x40020010
 800383c:	40020028 	.word	0x40020028
 8003840:	40020040 	.word	0x40020040
 8003844:	40020058 	.word	0x40020058
 8003848:	40020070 	.word	0x40020070
 800384c:	40020088 	.word	0x40020088
 8003850:	400200a0 	.word	0x400200a0
 8003854:	400200b8 	.word	0x400200b8
 8003858:	40020410 	.word	0x40020410
 800385c:	40020428 	.word	0x40020428
 8003860:	40020440 	.word	0x40020440
 8003864:	40020458 	.word	0x40020458
 8003868:	40020470 	.word	0x40020470
 800386c:	40020488 	.word	0x40020488
 8003870:	400204a0 	.word	0x400204a0
 8003874:	400204b8 	.word	0x400204b8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	bf14      	ite	ne
 8003886:	2301      	movne	r3, #1
 8003888:	2300      	moveq	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 8087 	beq.w	80039a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003896:	f003 031f 	and.w	r3, r3, #31
 800389a:	2220      	movs	r2, #32
 800389c:	409a      	lsls	r2, r3
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d139      	bne.n	8003922 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0216 	bic.w	r2, r2, #22
 80038bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d103      	bne.n	80038de <HAL_DMA_IRQHandler+0x736>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0208 	bic.w	r2, r2, #8
 80038ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	223f      	movs	r2, #63	; 0x3f
 80038f8:	409a      	lsls	r2, r3
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 834a 	beq.w	8003fac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
          }
          return;
 8003920:	e344      	b.n	8003fac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d018      	beq.n	8003962 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d108      	bne.n	8003950 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	2b00      	cmp	r3, #0
 8003944:	d02c      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
 800394e:	e027      	b.n	80039a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003954:	2b00      	cmp	r3, #0
 8003956:	d023      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4798      	blx	r3
 8003960:	e01e      	b.n	80039a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10f      	bne.n	8003990 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0210 	bic.w	r2, r2, #16
 800397e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8306 	beq.w	8003fb6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 8088 	beq.w	8003ac8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2204      	movs	r2, #4
 80039bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a7a      	ldr	r2, [pc, #488]	; (8003bb0 <HAL_DMA_IRQHandler+0xa08>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d04a      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x8b8>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a79      	ldr	r2, [pc, #484]	; (8003bb4 <HAL_DMA_IRQHandler+0xa0c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d045      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x8b8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a77      	ldr	r2, [pc, #476]	; (8003bb8 <HAL_DMA_IRQHandler+0xa10>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d040      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x8b8>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a76      	ldr	r2, [pc, #472]	; (8003bbc <HAL_DMA_IRQHandler+0xa14>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d03b      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x8b8>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a74      	ldr	r2, [pc, #464]	; (8003bc0 <HAL_DMA_IRQHandler+0xa18>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d036      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x8b8>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a73      	ldr	r2, [pc, #460]	; (8003bc4 <HAL_DMA_IRQHandler+0xa1c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d031      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x8b8>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a71      	ldr	r2, [pc, #452]	; (8003bc8 <HAL_DMA_IRQHandler+0xa20>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d02c      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x8b8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a70      	ldr	r2, [pc, #448]	; (8003bcc <HAL_DMA_IRQHandler+0xa24>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d027      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x8b8>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a6e      	ldr	r2, [pc, #440]	; (8003bd0 <HAL_DMA_IRQHandler+0xa28>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d022      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x8b8>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a6d      	ldr	r2, [pc, #436]	; (8003bd4 <HAL_DMA_IRQHandler+0xa2c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d01d      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x8b8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a6b      	ldr	r2, [pc, #428]	; (8003bd8 <HAL_DMA_IRQHandler+0xa30>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d018      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x8b8>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a6a      	ldr	r2, [pc, #424]	; (8003bdc <HAL_DMA_IRQHandler+0xa34>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d013      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x8b8>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a68      	ldr	r2, [pc, #416]	; (8003be0 <HAL_DMA_IRQHandler+0xa38>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d00e      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x8b8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a67      	ldr	r2, [pc, #412]	; (8003be4 <HAL_DMA_IRQHandler+0xa3c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d009      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x8b8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a65      	ldr	r2, [pc, #404]	; (8003be8 <HAL_DMA_IRQHandler+0xa40>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d004      	beq.n	8003a60 <HAL_DMA_IRQHandler+0x8b8>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a64      	ldr	r2, [pc, #400]	; (8003bec <HAL_DMA_IRQHandler+0xa44>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d108      	bne.n	8003a72 <HAL_DMA_IRQHandler+0x8ca>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e007      	b.n	8003a82 <HAL_DMA_IRQHandler+0x8da>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0201 	bic.w	r2, r2, #1
 8003a80:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3301      	adds	r3, #1
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d307      	bcc.n	8003a9e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1f2      	bne.n	8003a82 <HAL_DMA_IRQHandler+0x8da>
 8003a9c:	e000      	b.n	8003aa0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a9e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d004      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2203      	movs	r2, #3
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003abe:	e003      	b.n	8003ac8 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 8272 	beq.w	8003fb6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	4798      	blx	r3
 8003ada:	e26c      	b.n	8003fb6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a43      	ldr	r2, [pc, #268]	; (8003bf0 <HAL_DMA_IRQHandler+0xa48>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d022      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x984>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a42      	ldr	r2, [pc, #264]	; (8003bf4 <HAL_DMA_IRQHandler+0xa4c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d01d      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x984>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a40      	ldr	r2, [pc, #256]	; (8003bf8 <HAL_DMA_IRQHandler+0xa50>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d018      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x984>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a3f      	ldr	r2, [pc, #252]	; (8003bfc <HAL_DMA_IRQHandler+0xa54>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d013      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x984>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a3d      	ldr	r2, [pc, #244]	; (8003c00 <HAL_DMA_IRQHandler+0xa58>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d00e      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x984>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a3c      	ldr	r2, [pc, #240]	; (8003c04 <HAL_DMA_IRQHandler+0xa5c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d009      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x984>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a3a      	ldr	r2, [pc, #232]	; (8003c08 <HAL_DMA_IRQHandler+0xa60>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d004      	beq.n	8003b2c <HAL_DMA_IRQHandler+0x984>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a39      	ldr	r2, [pc, #228]	; (8003c0c <HAL_DMA_IRQHandler+0xa64>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d101      	bne.n	8003b30 <HAL_DMA_IRQHandler+0x988>
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <HAL_DMA_IRQHandler+0x98a>
 8003b30:	2300      	movs	r3, #0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 823f 	beq.w	8003fb6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	2204      	movs	r2, #4
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 80cd 	beq.w	8003cf0 <HAL_DMA_IRQHandler+0xb48>
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f003 0304 	and.w	r3, r3, #4
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80c7 	beq.w	8003cf0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	2204      	movs	r2, #4
 8003b6c:	409a      	lsls	r2, r3
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d049      	beq.n	8003c10 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8210 	beq.w	8003fb0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b98:	e20a      	b.n	8003fb0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8206 	beq.w	8003fb0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bac:	e200      	b.n	8003fb0 <HAL_DMA_IRQHandler+0xe08>
 8003bae:	bf00      	nop
 8003bb0:	40020010 	.word	0x40020010
 8003bb4:	40020028 	.word	0x40020028
 8003bb8:	40020040 	.word	0x40020040
 8003bbc:	40020058 	.word	0x40020058
 8003bc0:	40020070 	.word	0x40020070
 8003bc4:	40020088 	.word	0x40020088
 8003bc8:	400200a0 	.word	0x400200a0
 8003bcc:	400200b8 	.word	0x400200b8
 8003bd0:	40020410 	.word	0x40020410
 8003bd4:	40020428 	.word	0x40020428
 8003bd8:	40020440 	.word	0x40020440
 8003bdc:	40020458 	.word	0x40020458
 8003be0:	40020470 	.word	0x40020470
 8003be4:	40020488 	.word	0x40020488
 8003be8:	400204a0 	.word	0x400204a0
 8003bec:	400204b8 	.word	0x400204b8
 8003bf0:	58025408 	.word	0x58025408
 8003bf4:	5802541c 	.word	0x5802541c
 8003bf8:	58025430 	.word	0x58025430
 8003bfc:	58025444 	.word	0x58025444
 8003c00:	58025458 	.word	0x58025458
 8003c04:	5802546c 	.word	0x5802546c
 8003c08:	58025480 	.word	0x58025480
 8003c0c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d160      	bne.n	8003cdc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a8c      	ldr	r2, [pc, #560]	; (8003e50 <HAL_DMA_IRQHandler+0xca8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d04a      	beq.n	8003cba <HAL_DMA_IRQHandler+0xb12>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a8a      	ldr	r2, [pc, #552]	; (8003e54 <HAL_DMA_IRQHandler+0xcac>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d045      	beq.n	8003cba <HAL_DMA_IRQHandler+0xb12>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a89      	ldr	r2, [pc, #548]	; (8003e58 <HAL_DMA_IRQHandler+0xcb0>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d040      	beq.n	8003cba <HAL_DMA_IRQHandler+0xb12>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a87      	ldr	r2, [pc, #540]	; (8003e5c <HAL_DMA_IRQHandler+0xcb4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d03b      	beq.n	8003cba <HAL_DMA_IRQHandler+0xb12>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a86      	ldr	r2, [pc, #536]	; (8003e60 <HAL_DMA_IRQHandler+0xcb8>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d036      	beq.n	8003cba <HAL_DMA_IRQHandler+0xb12>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a84      	ldr	r2, [pc, #528]	; (8003e64 <HAL_DMA_IRQHandler+0xcbc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d031      	beq.n	8003cba <HAL_DMA_IRQHandler+0xb12>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a83      	ldr	r2, [pc, #524]	; (8003e68 <HAL_DMA_IRQHandler+0xcc0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d02c      	beq.n	8003cba <HAL_DMA_IRQHandler+0xb12>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a81      	ldr	r2, [pc, #516]	; (8003e6c <HAL_DMA_IRQHandler+0xcc4>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d027      	beq.n	8003cba <HAL_DMA_IRQHandler+0xb12>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a80      	ldr	r2, [pc, #512]	; (8003e70 <HAL_DMA_IRQHandler+0xcc8>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d022      	beq.n	8003cba <HAL_DMA_IRQHandler+0xb12>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a7e      	ldr	r2, [pc, #504]	; (8003e74 <HAL_DMA_IRQHandler+0xccc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d01d      	beq.n	8003cba <HAL_DMA_IRQHandler+0xb12>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a7d      	ldr	r2, [pc, #500]	; (8003e78 <HAL_DMA_IRQHandler+0xcd0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d018      	beq.n	8003cba <HAL_DMA_IRQHandler+0xb12>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a7b      	ldr	r2, [pc, #492]	; (8003e7c <HAL_DMA_IRQHandler+0xcd4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_DMA_IRQHandler+0xb12>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a7a      	ldr	r2, [pc, #488]	; (8003e80 <HAL_DMA_IRQHandler+0xcd8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00e      	beq.n	8003cba <HAL_DMA_IRQHandler+0xb12>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a78      	ldr	r2, [pc, #480]	; (8003e84 <HAL_DMA_IRQHandler+0xcdc>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d009      	beq.n	8003cba <HAL_DMA_IRQHandler+0xb12>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a77      	ldr	r2, [pc, #476]	; (8003e88 <HAL_DMA_IRQHandler+0xce0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d004      	beq.n	8003cba <HAL_DMA_IRQHandler+0xb12>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a75      	ldr	r2, [pc, #468]	; (8003e8c <HAL_DMA_IRQHandler+0xce4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d108      	bne.n	8003ccc <HAL_DMA_IRQHandler+0xb24>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0208 	bic.w	r2, r2, #8
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	e007      	b.n	8003cdc <HAL_DMA_IRQHandler+0xb34>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0204 	bic.w	r2, r2, #4
 8003cda:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 8165 	beq.w	8003fb0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cee:	e15f      	b.n	8003fb0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cf4:	f003 031f 	and.w	r3, r3, #31
 8003cf8:	2202      	movs	r2, #2
 8003cfa:	409a      	lsls	r2, r3
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 80c5 	beq.w	8003e90 <HAL_DMA_IRQHandler+0xce8>
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 80bf 	beq.w	8003e90 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d16:	f003 031f 	and.w	r3, r3, #31
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d018      	beq.n	8003d5e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 813a 	beq.w	8003fb4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d48:	e134      	b.n	8003fb4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 8130 	beq.w	8003fb4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d5c:	e12a      	b.n	8003fb4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d168      	bne.n	8003e3a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a38      	ldr	r2, [pc, #224]	; (8003e50 <HAL_DMA_IRQHandler+0xca8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d04a      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xc60>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a37      	ldr	r2, [pc, #220]	; (8003e54 <HAL_DMA_IRQHandler+0xcac>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d045      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xc60>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a35      	ldr	r2, [pc, #212]	; (8003e58 <HAL_DMA_IRQHandler+0xcb0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d040      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xc60>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a34      	ldr	r2, [pc, #208]	; (8003e5c <HAL_DMA_IRQHandler+0xcb4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d03b      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xc60>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a32      	ldr	r2, [pc, #200]	; (8003e60 <HAL_DMA_IRQHandler+0xcb8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d036      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xc60>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a31      	ldr	r2, [pc, #196]	; (8003e64 <HAL_DMA_IRQHandler+0xcbc>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d031      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xc60>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2f      	ldr	r2, [pc, #188]	; (8003e68 <HAL_DMA_IRQHandler+0xcc0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d02c      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xc60>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a2e      	ldr	r2, [pc, #184]	; (8003e6c <HAL_DMA_IRQHandler+0xcc4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d027      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xc60>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a2c      	ldr	r2, [pc, #176]	; (8003e70 <HAL_DMA_IRQHandler+0xcc8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d022      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xc60>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a2b      	ldr	r2, [pc, #172]	; (8003e74 <HAL_DMA_IRQHandler+0xccc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d01d      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xc60>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a29      	ldr	r2, [pc, #164]	; (8003e78 <HAL_DMA_IRQHandler+0xcd0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d018      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xc60>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a28      	ldr	r2, [pc, #160]	; (8003e7c <HAL_DMA_IRQHandler+0xcd4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d013      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xc60>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a26      	ldr	r2, [pc, #152]	; (8003e80 <HAL_DMA_IRQHandler+0xcd8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00e      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xc60>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a25      	ldr	r2, [pc, #148]	; (8003e84 <HAL_DMA_IRQHandler+0xcdc>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d009      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xc60>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a23      	ldr	r2, [pc, #140]	; (8003e88 <HAL_DMA_IRQHandler+0xce0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d004      	beq.n	8003e08 <HAL_DMA_IRQHandler+0xc60>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a22      	ldr	r2, [pc, #136]	; (8003e8c <HAL_DMA_IRQHandler+0xce4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d108      	bne.n	8003e1a <HAL_DMA_IRQHandler+0xc72>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0214 	bic.w	r2, r2, #20
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	e007      	b.n	8003e2a <HAL_DMA_IRQHandler+0xc82>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 020a 	bic.w	r2, r2, #10
 8003e28:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80b8 	beq.w	8003fb4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e4c:	e0b2      	b.n	8003fb4 <HAL_DMA_IRQHandler+0xe0c>
 8003e4e:	bf00      	nop
 8003e50:	40020010 	.word	0x40020010
 8003e54:	40020028 	.word	0x40020028
 8003e58:	40020040 	.word	0x40020040
 8003e5c:	40020058 	.word	0x40020058
 8003e60:	40020070 	.word	0x40020070
 8003e64:	40020088 	.word	0x40020088
 8003e68:	400200a0 	.word	0x400200a0
 8003e6c:	400200b8 	.word	0x400200b8
 8003e70:	40020410 	.word	0x40020410
 8003e74:	40020428 	.word	0x40020428
 8003e78:	40020440 	.word	0x40020440
 8003e7c:	40020458 	.word	0x40020458
 8003e80:	40020470 	.word	0x40020470
 8003e84:	40020488 	.word	0x40020488
 8003e88:	400204a0 	.word	0x400204a0
 8003e8c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	2208      	movs	r2, #8
 8003e9a:	409a      	lsls	r2, r3
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8088 	beq.w	8003fb6 <HAL_DMA_IRQHandler+0xe0e>
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8082 	beq.w	8003fb6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a41      	ldr	r2, [pc, #260]	; (8003fbc <HAL_DMA_IRQHandler+0xe14>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d04a      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xdaa>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a3f      	ldr	r2, [pc, #252]	; (8003fc0 <HAL_DMA_IRQHandler+0xe18>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d045      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xdaa>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a3e      	ldr	r2, [pc, #248]	; (8003fc4 <HAL_DMA_IRQHandler+0xe1c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d040      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xdaa>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a3c      	ldr	r2, [pc, #240]	; (8003fc8 <HAL_DMA_IRQHandler+0xe20>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d03b      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xdaa>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a3b      	ldr	r2, [pc, #236]	; (8003fcc <HAL_DMA_IRQHandler+0xe24>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d036      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xdaa>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a39      	ldr	r2, [pc, #228]	; (8003fd0 <HAL_DMA_IRQHandler+0xe28>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d031      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xdaa>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a38      	ldr	r2, [pc, #224]	; (8003fd4 <HAL_DMA_IRQHandler+0xe2c>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d02c      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xdaa>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a36      	ldr	r2, [pc, #216]	; (8003fd8 <HAL_DMA_IRQHandler+0xe30>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d027      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xdaa>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a35      	ldr	r2, [pc, #212]	; (8003fdc <HAL_DMA_IRQHandler+0xe34>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d022      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xdaa>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a33      	ldr	r2, [pc, #204]	; (8003fe0 <HAL_DMA_IRQHandler+0xe38>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01d      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xdaa>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a32      	ldr	r2, [pc, #200]	; (8003fe4 <HAL_DMA_IRQHandler+0xe3c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d018      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xdaa>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a30      	ldr	r2, [pc, #192]	; (8003fe8 <HAL_DMA_IRQHandler+0xe40>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xdaa>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a2f      	ldr	r2, [pc, #188]	; (8003fec <HAL_DMA_IRQHandler+0xe44>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00e      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xdaa>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a2d      	ldr	r2, [pc, #180]	; (8003ff0 <HAL_DMA_IRQHandler+0xe48>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xdaa>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a2c      	ldr	r2, [pc, #176]	; (8003ff4 <HAL_DMA_IRQHandler+0xe4c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_DMA_IRQHandler+0xdaa>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2a      	ldr	r2, [pc, #168]	; (8003ff8 <HAL_DMA_IRQHandler+0xe50>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d108      	bne.n	8003f64 <HAL_DMA_IRQHandler+0xdbc>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 021c 	bic.w	r2, r2, #28
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	e007      	b.n	8003f74 <HAL_DMA_IRQHandler+0xdcc>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 020e 	bic.w	r2, r2, #14
 8003f72:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d009      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	4798      	blx	r3
 8003faa:	e004      	b.n	8003fb6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003fac:	bf00      	nop
 8003fae:	e002      	b.n	8003fb6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fb0:	bf00      	nop
 8003fb2:	e000      	b.n	8003fb6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fb4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003fb6:	3728      	adds	r7, #40	; 0x28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40020010 	.word	0x40020010
 8003fc0:	40020028 	.word	0x40020028
 8003fc4:	40020040 	.word	0x40020040
 8003fc8:	40020058 	.word	0x40020058
 8003fcc:	40020070 	.word	0x40020070
 8003fd0:	40020088 	.word	0x40020088
 8003fd4:	400200a0 	.word	0x400200a0
 8003fd8:	400200b8 	.word	0x400200b8
 8003fdc:	40020410 	.word	0x40020410
 8003fe0:	40020428 	.word	0x40020428
 8003fe4:	40020440 	.word	0x40020440
 8003fe8:	40020458 	.word	0x40020458
 8003fec:	40020470 	.word	0x40020470
 8003ff0:	40020488 	.word	0x40020488
 8003ff4:	400204a0 	.word	0x400204a0
 8003ff8:	400204b8 	.word	0x400204b8

08003ffc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a42      	ldr	r2, [pc, #264]	; (8004114 <DMA_CalcBaseAndBitshift+0x118>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d04a      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a41      	ldr	r2, [pc, #260]	; (8004118 <DMA_CalcBaseAndBitshift+0x11c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d045      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a3f      	ldr	r2, [pc, #252]	; (800411c <DMA_CalcBaseAndBitshift+0x120>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d040      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a3e      	ldr	r2, [pc, #248]	; (8004120 <DMA_CalcBaseAndBitshift+0x124>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d03b      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a3c      	ldr	r2, [pc, #240]	; (8004124 <DMA_CalcBaseAndBitshift+0x128>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d036      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a3b      	ldr	r2, [pc, #236]	; (8004128 <DMA_CalcBaseAndBitshift+0x12c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d031      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a39      	ldr	r2, [pc, #228]	; (800412c <DMA_CalcBaseAndBitshift+0x130>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d02c      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a38      	ldr	r2, [pc, #224]	; (8004130 <DMA_CalcBaseAndBitshift+0x134>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d027      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a36      	ldr	r2, [pc, #216]	; (8004134 <DMA_CalcBaseAndBitshift+0x138>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d022      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a35      	ldr	r2, [pc, #212]	; (8004138 <DMA_CalcBaseAndBitshift+0x13c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d01d      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a33      	ldr	r2, [pc, #204]	; (800413c <DMA_CalcBaseAndBitshift+0x140>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d018      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a32      	ldr	r2, [pc, #200]	; (8004140 <DMA_CalcBaseAndBitshift+0x144>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d013      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a30      	ldr	r2, [pc, #192]	; (8004144 <DMA_CalcBaseAndBitshift+0x148>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00e      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a2f      	ldr	r2, [pc, #188]	; (8004148 <DMA_CalcBaseAndBitshift+0x14c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d009      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a2d      	ldr	r2, [pc, #180]	; (800414c <DMA_CalcBaseAndBitshift+0x150>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d004      	beq.n	80040a4 <DMA_CalcBaseAndBitshift+0xa8>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a2c      	ldr	r2, [pc, #176]	; (8004150 <DMA_CalcBaseAndBitshift+0x154>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d101      	bne.n	80040a8 <DMA_CalcBaseAndBitshift+0xac>
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <DMA_CalcBaseAndBitshift+0xae>
 80040a8:	2300      	movs	r3, #0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d024      	beq.n	80040f8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	3b10      	subs	r3, #16
 80040b6:	4a27      	ldr	r2, [pc, #156]	; (8004154 <DMA_CalcBaseAndBitshift+0x158>)
 80040b8:	fba2 2303 	umull	r2, r3, r2, r3
 80040bc:	091b      	lsrs	r3, r3, #4
 80040be:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	4a24      	ldr	r2, [pc, #144]	; (8004158 <DMA_CalcBaseAndBitshift+0x15c>)
 80040c8:	5cd3      	ldrb	r3, [r2, r3]
 80040ca:	461a      	mov	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d908      	bls.n	80040e8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	461a      	mov	r2, r3
 80040dc:	4b1f      	ldr	r3, [pc, #124]	; (800415c <DMA_CalcBaseAndBitshift+0x160>)
 80040de:	4013      	ands	r3, r2
 80040e0:	1d1a      	adds	r2, r3, #4
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	659a      	str	r2, [r3, #88]	; 0x58
 80040e6:	e00d      	b.n	8004104 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	4b1b      	ldr	r3, [pc, #108]	; (800415c <DMA_CalcBaseAndBitshift+0x160>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6593      	str	r3, [r2, #88]	; 0x58
 80040f6:	e005      	b.n	8004104 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	40020010 	.word	0x40020010
 8004118:	40020028 	.word	0x40020028
 800411c:	40020040 	.word	0x40020040
 8004120:	40020058 	.word	0x40020058
 8004124:	40020070 	.word	0x40020070
 8004128:	40020088 	.word	0x40020088
 800412c:	400200a0 	.word	0x400200a0
 8004130:	400200b8 	.word	0x400200b8
 8004134:	40020410 	.word	0x40020410
 8004138:	40020428 	.word	0x40020428
 800413c:	40020440 	.word	0x40020440
 8004140:	40020458 	.word	0x40020458
 8004144:	40020470 	.word	0x40020470
 8004148:	40020488 	.word	0x40020488
 800414c:	400204a0 	.word	0x400204a0
 8004150:	400204b8 	.word	0x400204b8
 8004154:	aaaaaaab 	.word	0xaaaaaaab
 8004158:	0800a670 	.word	0x0800a670
 800415c:	fffffc00 	.word	0xfffffc00

08004160 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d120      	bne.n	80041b6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004178:	2b03      	cmp	r3, #3
 800417a:	d858      	bhi.n	800422e <DMA_CheckFifoParam+0xce>
 800417c:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <DMA_CheckFifoParam+0x24>)
 800417e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004182:	bf00      	nop
 8004184:	08004195 	.word	0x08004195
 8004188:	080041a7 	.word	0x080041a7
 800418c:	08004195 	.word	0x08004195
 8004190:	0800422f 	.word	0x0800422f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d048      	beq.n	8004232 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041a4:	e045      	b.n	8004232 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041ae:	d142      	bne.n	8004236 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041b4:	e03f      	b.n	8004236 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041be:	d123      	bne.n	8004208 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d838      	bhi.n	800423a <DMA_CheckFifoParam+0xda>
 80041c8:	a201      	add	r2, pc, #4	; (adr r2, 80041d0 <DMA_CheckFifoParam+0x70>)
 80041ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ce:	bf00      	nop
 80041d0:	080041e1 	.word	0x080041e1
 80041d4:	080041e7 	.word	0x080041e7
 80041d8:	080041e1 	.word	0x080041e1
 80041dc:	080041f9 	.word	0x080041f9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
        break;
 80041e4:	e030      	b.n	8004248 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d025      	beq.n	800423e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041f6:	e022      	b.n	800423e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004200:	d11f      	bne.n	8004242 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004206:	e01c      	b.n	8004242 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	2b02      	cmp	r3, #2
 800420e:	d902      	bls.n	8004216 <DMA_CheckFifoParam+0xb6>
 8004210:	2b03      	cmp	r3, #3
 8004212:	d003      	beq.n	800421c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004214:	e018      	b.n	8004248 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	73fb      	strb	r3, [r7, #15]
        break;
 800421a:	e015      	b.n	8004248 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004220:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00e      	beq.n	8004246 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	73fb      	strb	r3, [r7, #15]
    break;
 800422c:	e00b      	b.n	8004246 <DMA_CheckFifoParam+0xe6>
        break;
 800422e:	bf00      	nop
 8004230:	e00a      	b.n	8004248 <DMA_CheckFifoParam+0xe8>
        break;
 8004232:	bf00      	nop
 8004234:	e008      	b.n	8004248 <DMA_CheckFifoParam+0xe8>
        break;
 8004236:	bf00      	nop
 8004238:	e006      	b.n	8004248 <DMA_CheckFifoParam+0xe8>
        break;
 800423a:	bf00      	nop
 800423c:	e004      	b.n	8004248 <DMA_CheckFifoParam+0xe8>
        break;
 800423e:	bf00      	nop
 8004240:	e002      	b.n	8004248 <DMA_CheckFifoParam+0xe8>
        break;
 8004242:	bf00      	nop
 8004244:	e000      	b.n	8004248 <DMA_CheckFifoParam+0xe8>
    break;
 8004246:	bf00      	nop
    }
  }

  return status;
 8004248:	7bfb      	ldrb	r3, [r7, #15]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop

08004258 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a38      	ldr	r2, [pc, #224]	; (800434c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d022      	beq.n	80042b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a36      	ldr	r2, [pc, #216]	; (8004350 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d01d      	beq.n	80042b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a35      	ldr	r2, [pc, #212]	; (8004354 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d018      	beq.n	80042b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a33      	ldr	r2, [pc, #204]	; (8004358 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d013      	beq.n	80042b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a32      	ldr	r2, [pc, #200]	; (800435c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d00e      	beq.n	80042b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a30      	ldr	r2, [pc, #192]	; (8004360 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d009      	beq.n	80042b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a2f      	ldr	r2, [pc, #188]	; (8004364 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d004      	beq.n	80042b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a2d      	ldr	r2, [pc, #180]	; (8004368 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d101      	bne.n	80042ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80042ba:	2300      	movs	r3, #0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01a      	beq.n	80042f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	3b08      	subs	r3, #8
 80042c8:	4a28      	ldr	r2, [pc, #160]	; (800436c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	091b      	lsrs	r3, r3, #4
 80042d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4b26      	ldr	r3, [pc, #152]	; (8004370 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80042d6:	4413      	add	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	461a      	mov	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a24      	ldr	r2, [pc, #144]	; (8004374 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80042e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f003 031f 	and.w	r3, r3, #31
 80042ec:	2201      	movs	r2, #1
 80042ee:	409a      	lsls	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80042f4:	e024      	b.n	8004340 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	3b10      	subs	r3, #16
 80042fe:	4a1e      	ldr	r2, [pc, #120]	; (8004378 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004300:	fba2 2303 	umull	r2, r3, r2, r3
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4a1c      	ldr	r2, [pc, #112]	; (800437c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d806      	bhi.n	800431e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d902      	bls.n	800431e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3308      	adds	r3, #8
 800431c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4b18      	ldr	r3, [pc, #96]	; (8004384 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	461a      	mov	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a16      	ldr	r2, [pc, #88]	; (8004388 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004330:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	2201      	movs	r2, #1
 800433a:	409a      	lsls	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004340:	bf00      	nop
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	58025408 	.word	0x58025408
 8004350:	5802541c 	.word	0x5802541c
 8004354:	58025430 	.word	0x58025430
 8004358:	58025444 	.word	0x58025444
 800435c:	58025458 	.word	0x58025458
 8004360:	5802546c 	.word	0x5802546c
 8004364:	58025480 	.word	0x58025480
 8004368:	58025494 	.word	0x58025494
 800436c:	cccccccd 	.word	0xcccccccd
 8004370:	16009600 	.word	0x16009600
 8004374:	58025880 	.word	0x58025880
 8004378:	aaaaaaab 	.word	0xaaaaaaab
 800437c:	400204b8 	.word	0x400204b8
 8004380:	4002040f 	.word	0x4002040f
 8004384:	10008200 	.word	0x10008200
 8004388:	40020880 	.word	0x40020880

0800438c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d04a      	beq.n	8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d847      	bhi.n	8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a25      	ldr	r2, [pc, #148]	; (8004444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d022      	beq.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a24      	ldr	r2, [pc, #144]	; (8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d01d      	beq.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a22      	ldr	r2, [pc, #136]	; (800444c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d018      	beq.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a21      	ldr	r2, [pc, #132]	; (8004450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d013      	beq.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1f      	ldr	r2, [pc, #124]	; (8004454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00e      	beq.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d009      	beq.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1c      	ldr	r2, [pc, #112]	; (800445c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d004      	beq.n	80043f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a1b      	ldr	r2, [pc, #108]	; (8004460 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d101      	bne.n	80043fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80043fc:	2300      	movs	r3, #0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00a      	beq.n	8004418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4b17      	ldr	r3, [pc, #92]	; (8004464 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	461a      	mov	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a15      	ldr	r2, [pc, #84]	; (8004468 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004414:	671a      	str	r2, [r3, #112]	; 0x70
 8004416:	e009      	b.n	800442c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4b14      	ldr	r3, [pc, #80]	; (800446c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800441c:	4413      	add	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	461a      	mov	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a11      	ldr	r2, [pc, #68]	; (8004470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800442a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3b01      	subs	r3, #1
 8004430:	2201      	movs	r2, #1
 8004432:	409a      	lsls	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	58025408 	.word	0x58025408
 8004448:	5802541c 	.word	0x5802541c
 800444c:	58025430 	.word	0x58025430
 8004450:	58025444 	.word	0x58025444
 8004454:	58025458 	.word	0x58025458
 8004458:	5802546c 	.word	0x5802546c
 800445c:	58025480 	.word	0x58025480
 8004460:	58025494 	.word	0x58025494
 8004464:	1600963f 	.word	0x1600963f
 8004468:	58025940 	.word	0x58025940
 800446c:	1000823f 	.word	0x1000823f
 8004470:	40020940 	.word	0x40020940

08004474 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004474:	b480      	push	{r7}
 8004476:	b089      	sub	sp, #36	; 0x24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004482:	4b89      	ldr	r3, [pc, #548]	; (80046a8 <HAL_GPIO_Init+0x234>)
 8004484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004486:	e194      	b.n	80047b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	2101      	movs	r1, #1
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	fa01 f303 	lsl.w	r3, r1, r3
 8004494:	4013      	ands	r3, r2
 8004496:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 8186 	beq.w	80047ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d00b      	beq.n	80044c0 <HAL_GPIO_Init+0x4c>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d007      	beq.n	80044c0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044b4:	2b11      	cmp	r3, #17
 80044b6:	d003      	beq.n	80044c0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b12      	cmp	r3, #18
 80044be:	d130      	bne.n	8004522 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	2203      	movs	r2, #3
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4013      	ands	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	68da      	ldr	r2, [r3, #12]
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044f6:	2201      	movs	r2, #1
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4013      	ands	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	091b      	lsrs	r3, r3, #4
 800450c:	f003 0201 	and.w	r2, r3, #1
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4313      	orrs	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	2203      	movs	r2, #3
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	43db      	mvns	r3, r3
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	4013      	ands	r3, r2
 8004538:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4313      	orrs	r3, r2
 800454a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d003      	beq.n	8004562 <HAL_GPIO_Init+0xee>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b12      	cmp	r3, #18
 8004560:	d123      	bne.n	80045aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	08da      	lsrs	r2, r3, #3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3208      	adds	r2, #8
 800456a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800456e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	220f      	movs	r2, #15
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	43db      	mvns	r3, r3
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	4013      	ands	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	fa02 f303 	lsl.w	r3, r2, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4313      	orrs	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	08da      	lsrs	r2, r3, #3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3208      	adds	r2, #8
 80045a4:	69b9      	ldr	r1, [r7, #24]
 80045a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	2203      	movs	r2, #3
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43db      	mvns	r3, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4013      	ands	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f003 0203 	and.w	r2, r3, #3
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	fa02 f303 	lsl.w	r3, r2, r3
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 80e0 	beq.w	80047ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ec:	4b2f      	ldr	r3, [pc, #188]	; (80046ac <HAL_GPIO_Init+0x238>)
 80045ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045f2:	4a2e      	ldr	r2, [pc, #184]	; (80046ac <HAL_GPIO_Init+0x238>)
 80045f4:	f043 0302 	orr.w	r3, r3, #2
 80045f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80045fc:	4b2b      	ldr	r3, [pc, #172]	; (80046ac <HAL_GPIO_Init+0x238>)
 80045fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800460a:	4a29      	ldr	r2, [pc, #164]	; (80046b0 <HAL_GPIO_Init+0x23c>)
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	089b      	lsrs	r3, r3, #2
 8004610:	3302      	adds	r3, #2
 8004612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	220f      	movs	r2, #15
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	4013      	ands	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a20      	ldr	r2, [pc, #128]	; (80046b4 <HAL_GPIO_Init+0x240>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d052      	beq.n	80046dc <HAL_GPIO_Init+0x268>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a1f      	ldr	r2, [pc, #124]	; (80046b8 <HAL_GPIO_Init+0x244>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d031      	beq.n	80046a2 <HAL_GPIO_Init+0x22e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a1e      	ldr	r2, [pc, #120]	; (80046bc <HAL_GPIO_Init+0x248>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d02b      	beq.n	800469e <HAL_GPIO_Init+0x22a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1d      	ldr	r2, [pc, #116]	; (80046c0 <HAL_GPIO_Init+0x24c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d025      	beq.n	800469a <HAL_GPIO_Init+0x226>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1c      	ldr	r2, [pc, #112]	; (80046c4 <HAL_GPIO_Init+0x250>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d01f      	beq.n	8004696 <HAL_GPIO_Init+0x222>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a1b      	ldr	r2, [pc, #108]	; (80046c8 <HAL_GPIO_Init+0x254>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d019      	beq.n	8004692 <HAL_GPIO_Init+0x21e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a1a      	ldr	r2, [pc, #104]	; (80046cc <HAL_GPIO_Init+0x258>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d013      	beq.n	800468e <HAL_GPIO_Init+0x21a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a19      	ldr	r2, [pc, #100]	; (80046d0 <HAL_GPIO_Init+0x25c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00d      	beq.n	800468a <HAL_GPIO_Init+0x216>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a18      	ldr	r2, [pc, #96]	; (80046d4 <HAL_GPIO_Init+0x260>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d007      	beq.n	8004686 <HAL_GPIO_Init+0x212>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a17      	ldr	r2, [pc, #92]	; (80046d8 <HAL_GPIO_Init+0x264>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d101      	bne.n	8004682 <HAL_GPIO_Init+0x20e>
 800467e:	2309      	movs	r3, #9
 8004680:	e02d      	b.n	80046de <HAL_GPIO_Init+0x26a>
 8004682:	230a      	movs	r3, #10
 8004684:	e02b      	b.n	80046de <HAL_GPIO_Init+0x26a>
 8004686:	2308      	movs	r3, #8
 8004688:	e029      	b.n	80046de <HAL_GPIO_Init+0x26a>
 800468a:	2307      	movs	r3, #7
 800468c:	e027      	b.n	80046de <HAL_GPIO_Init+0x26a>
 800468e:	2306      	movs	r3, #6
 8004690:	e025      	b.n	80046de <HAL_GPIO_Init+0x26a>
 8004692:	2305      	movs	r3, #5
 8004694:	e023      	b.n	80046de <HAL_GPIO_Init+0x26a>
 8004696:	2304      	movs	r3, #4
 8004698:	e021      	b.n	80046de <HAL_GPIO_Init+0x26a>
 800469a:	2303      	movs	r3, #3
 800469c:	e01f      	b.n	80046de <HAL_GPIO_Init+0x26a>
 800469e:	2302      	movs	r3, #2
 80046a0:	e01d      	b.n	80046de <HAL_GPIO_Init+0x26a>
 80046a2:	2301      	movs	r3, #1
 80046a4:	e01b      	b.n	80046de <HAL_GPIO_Init+0x26a>
 80046a6:	bf00      	nop
 80046a8:	58000080 	.word	0x58000080
 80046ac:	58024400 	.word	0x58024400
 80046b0:	58000400 	.word	0x58000400
 80046b4:	58020000 	.word	0x58020000
 80046b8:	58020400 	.word	0x58020400
 80046bc:	58020800 	.word	0x58020800
 80046c0:	58020c00 	.word	0x58020c00
 80046c4:	58021000 	.word	0x58021000
 80046c8:	58021400 	.word	0x58021400
 80046cc:	58021800 	.word	0x58021800
 80046d0:	58021c00 	.word	0x58021c00
 80046d4:	58022000 	.word	0x58022000
 80046d8:	58022400 	.word	0x58022400
 80046dc:	2300      	movs	r3, #0
 80046de:	69fa      	ldr	r2, [r7, #28]
 80046e0:	f002 0203 	and.w	r2, r2, #3
 80046e4:	0092      	lsls	r2, r2, #2
 80046e6:	4093      	lsls	r3, r2
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046ee:	4938      	ldr	r1, [pc, #224]	; (80047d0 <HAL_GPIO_Init+0x35c>)
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	089b      	lsrs	r3, r3, #2
 80046f4:	3302      	adds	r3, #2
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	43db      	mvns	r3, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	43db      	mvns	r3, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4013      	ands	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	43db      	mvns	r3, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4013      	ands	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800477e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80047a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	3301      	adds	r3, #1
 80047b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f47f ae63 	bne.w	8004488 <HAL_GPIO_Init+0x14>
  }
}
 80047c2:	bf00      	nop
 80047c4:	bf00      	nop
 80047c6:	3724      	adds	r7, #36	; 0x24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	58000400 	.word	0x58000400

080047d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	807b      	strh	r3, [r7, #2]
 80047e0:	4613      	mov	r3, r2
 80047e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047e4:	787b      	ldrb	r3, [r7, #1]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047ea:	887a      	ldrh	r2, [r7, #2]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80047f0:	e003      	b.n	80047fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80047f2:	887b      	ldrh	r3, [r7, #2]
 80047f4:	041a      	lsls	r2, r3, #16
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	619a      	str	r2, [r3, #24]
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	4603      	mov	r3, r0
 800480e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004814:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004818:	88fb      	ldrh	r3, [r7, #6]
 800481a:	4013      	ands	r3, r2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d008      	beq.n	8004832 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004820:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004824:	88fb      	ldrh	r3, [r7, #6]
 8004826:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800482a:	88fb      	ldrh	r3, [r7, #6]
 800482c:	4618      	mov	r0, r3
 800482e:	f7fc fd49 	bl	80012c4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004832:	bf00      	nop
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004844:	4b19      	ldr	r3, [pc, #100]	; (80048ac <HAL_PWREx_ConfigSupply+0x70>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b04      	cmp	r3, #4
 800484e:	d00a      	beq.n	8004866 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004850:	4b16      	ldr	r3, [pc, #88]	; (80048ac <HAL_PWREx_ConfigSupply+0x70>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	429a      	cmp	r2, r3
 800485c:	d001      	beq.n	8004862 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e01f      	b.n	80048a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	e01d      	b.n	80048a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004866:	4b11      	ldr	r3, [pc, #68]	; (80048ac <HAL_PWREx_ConfigSupply+0x70>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f023 0207 	bic.w	r2, r3, #7
 800486e:	490f      	ldr	r1, [pc, #60]	; (80048ac <HAL_PWREx_ConfigSupply+0x70>)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4313      	orrs	r3, r2
 8004874:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004876:	f7fd fab1 	bl	8001ddc <HAL_GetTick>
 800487a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800487c:	e009      	b.n	8004892 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800487e:	f7fd faad 	bl	8001ddc <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800488c:	d901      	bls.n	8004892 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e007      	b.n	80048a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004892:	4b06      	ldr	r3, [pc, #24]	; (80048ac <HAL_PWREx_ConfigSupply+0x70>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800489a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800489e:	d1ee      	bne.n	800487e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	58024800 	.word	0x58024800

080048b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08c      	sub	sp, #48	; 0x30
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e3ff      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 8087 	beq.w	80049de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d0:	4b99      	ldr	r3, [pc, #612]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048da:	4b97      	ldr	r3, [pc, #604]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80048e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e2:	2b10      	cmp	r3, #16
 80048e4:	d007      	beq.n	80048f6 <HAL_RCC_OscConfig+0x46>
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	2b18      	cmp	r3, #24
 80048ea:	d110      	bne.n	800490e <HAL_RCC_OscConfig+0x5e>
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d10b      	bne.n	800490e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f6:	4b90      	ldr	r3, [pc, #576]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d06c      	beq.n	80049dc <HAL_RCC_OscConfig+0x12c>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d168      	bne.n	80049dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e3d9      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004916:	d106      	bne.n	8004926 <HAL_RCC_OscConfig+0x76>
 8004918:	4b87      	ldr	r3, [pc, #540]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a86      	ldr	r2, [pc, #536]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 800491e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	e02e      	b.n	8004984 <HAL_RCC_OscConfig+0xd4>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10c      	bne.n	8004948 <HAL_RCC_OscConfig+0x98>
 800492e:	4b82      	ldr	r3, [pc, #520]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a81      	ldr	r2, [pc, #516]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	4b7f      	ldr	r3, [pc, #508]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a7e      	ldr	r2, [pc, #504]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004940:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	e01d      	b.n	8004984 <HAL_RCC_OscConfig+0xd4>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004950:	d10c      	bne.n	800496c <HAL_RCC_OscConfig+0xbc>
 8004952:	4b79      	ldr	r3, [pc, #484]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a78      	ldr	r2, [pc, #480]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	4b76      	ldr	r3, [pc, #472]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a75      	ldr	r2, [pc, #468]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	e00b      	b.n	8004984 <HAL_RCC_OscConfig+0xd4>
 800496c:	4b72      	ldr	r3, [pc, #456]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a71      	ldr	r2, [pc, #452]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	4b6f      	ldr	r3, [pc, #444]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a6e      	ldr	r2, [pc, #440]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 800497e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d013      	beq.n	80049b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498c:	f7fd fa26 	bl	8001ddc <HAL_GetTick>
 8004990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004994:	f7fd fa22 	bl	8001ddc <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b64      	cmp	r3, #100	; 0x64
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e38d      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049a6:	4b64      	ldr	r3, [pc, #400]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f0      	beq.n	8004994 <HAL_RCC_OscConfig+0xe4>
 80049b2:	e014      	b.n	80049de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fd fa12 	bl	8001ddc <HAL_GetTick>
 80049b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049bc:	f7fd fa0e 	bl	8001ddc <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b64      	cmp	r3, #100	; 0x64
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e379      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80049ce:	4b5a      	ldr	r3, [pc, #360]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0x10c>
 80049da:	e000      	b.n	80049de <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 80ae 	beq.w	8004b48 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ec:	4b52      	ldr	r3, [pc, #328]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049f6:	4b50      	ldr	r3, [pc, #320]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d007      	beq.n	8004a12 <HAL_RCC_OscConfig+0x162>
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	2b18      	cmp	r3, #24
 8004a06:	d13a      	bne.n	8004a7e <HAL_RCC_OscConfig+0x1ce>
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d135      	bne.n	8004a7e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a12:	4b49      	ldr	r3, [pc, #292]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d005      	beq.n	8004a2a <HAL_RCC_OscConfig+0x17a>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e34b      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a2a:	f7fd f9e3 	bl	8001df4 <HAL_GetREVID>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d817      	bhi.n	8004a68 <HAL_RCC_OscConfig+0x1b8>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2b40      	cmp	r3, #64	; 0x40
 8004a3e:	d108      	bne.n	8004a52 <HAL_RCC_OscConfig+0x1a2>
 8004a40:	4b3d      	ldr	r3, [pc, #244]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004a48:	4a3b      	ldr	r2, [pc, #236]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a4e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a50:	e07a      	b.n	8004b48 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a52:	4b39      	ldr	r3, [pc, #228]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	031b      	lsls	r3, r3, #12
 8004a60:	4935      	ldr	r1, [pc, #212]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a66:	e06f      	b.n	8004b48 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a68:	4b33      	ldr	r3, [pc, #204]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	061b      	lsls	r3, r3, #24
 8004a76:	4930      	ldr	r1, [pc, #192]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a7c:	e064      	b.n	8004b48 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d045      	beq.n	8004b12 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a86:	4b2c      	ldr	r3, [pc, #176]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f023 0219 	bic.w	r2, r3, #25
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	4929      	ldr	r1, [pc, #164]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a98:	f7fd f9a0 	bl	8001ddc <HAL_GetTick>
 8004a9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aa0:	f7fd f99c 	bl	8001ddc <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e307      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ab2:	4b21      	ldr	r3, [pc, #132]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004abe:	f7fd f999 	bl	8001df4 <HAL_GetREVID>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d817      	bhi.n	8004afc <HAL_RCC_OscConfig+0x24c>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	d108      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x236>
 8004ad4:	4b18      	ldr	r3, [pc, #96]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004adc:	4a16      	ldr	r2, [pc, #88]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae2:	6053      	str	r3, [r2, #4]
 8004ae4:	e030      	b.n	8004b48 <HAL_RCC_OscConfig+0x298>
 8004ae6:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	031b      	lsls	r3, r3, #12
 8004af4:	4910      	ldr	r1, [pc, #64]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
 8004afa:	e025      	b.n	8004b48 <HAL_RCC_OscConfig+0x298>
 8004afc:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	061b      	lsls	r3, r3, #24
 8004b0a:	490b      	ldr	r1, [pc, #44]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]
 8004b10:	e01a      	b.n	8004b48 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b12:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a08      	ldr	r2, [pc, #32]	; (8004b38 <HAL_RCC_OscConfig+0x288>)
 8004b18:	f023 0301 	bic.w	r3, r3, #1
 8004b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1e:	f7fd f95d 	bl	8001ddc <HAL_GetTick>
 8004b22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b24:	e00a      	b.n	8004b3c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b26:	f7fd f959 	bl	8001ddc <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d903      	bls.n	8004b3c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e2c4      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
 8004b38:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004b3c:	4ba4      	ldr	r3, [pc, #656]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1ee      	bne.n	8004b26 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0310 	and.w	r3, r3, #16
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 80a9 	beq.w	8004ca8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b56:	4b9e      	ldr	r3, [pc, #632]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b5e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b60:	4b9b      	ldr	r3, [pc, #620]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b64:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d007      	beq.n	8004b7c <HAL_RCC_OscConfig+0x2cc>
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	2b18      	cmp	r3, #24
 8004b70:	d13a      	bne.n	8004be8 <HAL_RCC_OscConfig+0x338>
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d135      	bne.n	8004be8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004b7c:	4b94      	ldr	r3, [pc, #592]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_RCC_OscConfig+0x2e4>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	2b80      	cmp	r3, #128	; 0x80
 8004b8e:	d001      	beq.n	8004b94 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e296      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b94:	f7fd f92e 	bl	8001df4 <HAL_GetREVID>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d817      	bhi.n	8004bd2 <HAL_RCC_OscConfig+0x322>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d108      	bne.n	8004bbc <HAL_RCC_OscConfig+0x30c>
 8004baa:	4b89      	ldr	r3, [pc, #548]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004bb2:	4a87      	ldr	r2, [pc, #540]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004bb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bb8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bba:	e075      	b.n	8004ca8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bbc:	4b84      	ldr	r3, [pc, #528]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	069b      	lsls	r3, r3, #26
 8004bca:	4981      	ldr	r1, [pc, #516]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004bd0:	e06a      	b.n	8004ca8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004bd2:	4b7f      	ldr	r3, [pc, #508]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	061b      	lsls	r3, r3, #24
 8004be0:	497b      	ldr	r1, [pc, #492]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004be6:	e05f      	b.n	8004ca8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d042      	beq.n	8004c76 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004bf0:	4b77      	ldr	r3, [pc, #476]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a76      	ldr	r2, [pc, #472]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fd f8ee 	bl	8001ddc <HAL_GetTick>
 8004c00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c04:	f7fd f8ea 	bl	8001ddc <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e255      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c16:	4b6e      	ldr	r3, [pc, #440]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c22:	f7fd f8e7 	bl	8001df4 <HAL_GetREVID>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d817      	bhi.n	8004c60 <HAL_RCC_OscConfig+0x3b0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	2b20      	cmp	r3, #32
 8004c36:	d108      	bne.n	8004c4a <HAL_RCC_OscConfig+0x39a>
 8004c38:	4b65      	ldr	r3, [pc, #404]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004c40:	4a63      	ldr	r2, [pc, #396]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004c42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c46:	6053      	str	r3, [r2, #4]
 8004c48:	e02e      	b.n	8004ca8 <HAL_RCC_OscConfig+0x3f8>
 8004c4a:	4b61      	ldr	r3, [pc, #388]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	069b      	lsls	r3, r3, #26
 8004c58:	495d      	ldr	r1, [pc, #372]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	604b      	str	r3, [r1, #4]
 8004c5e:	e023      	b.n	8004ca8 <HAL_RCC_OscConfig+0x3f8>
 8004c60:	4b5b      	ldr	r3, [pc, #364]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	061b      	lsls	r3, r3, #24
 8004c6e:	4958      	ldr	r1, [pc, #352]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60cb      	str	r3, [r1, #12]
 8004c74:	e018      	b.n	8004ca8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004c76:	4b56      	ldr	r3, [pc, #344]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a55      	ldr	r2, [pc, #340]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7fd f8ab 	bl	8001ddc <HAL_GetTick>
 8004c86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c88:	e008      	b.n	8004c9c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004c8a:	f7fd f8a7 	bl	8001ddc <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	2b02      	cmp	r3, #2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e212      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004c9c:	4b4c      	ldr	r3, [pc, #304]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1f0      	bne.n	8004c8a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d036      	beq.n	8004d22 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d019      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cbc:	4b44      	ldr	r3, [pc, #272]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc0:	4a43      	ldr	r2, [pc, #268]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc8:	f7fd f888 	bl	8001ddc <HAL_GetTick>
 8004ccc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cd0:	f7fd f884 	bl	8001ddc <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e1ef      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ce2:	4b3b      	ldr	r3, [pc, #236]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x420>
 8004cee:	e018      	b.n	8004d22 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf0:	4b37      	ldr	r3, [pc, #220]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf4:	4a36      	ldr	r2, [pc, #216]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cfc:	f7fd f86e 	bl	8001ddc <HAL_GetTick>
 8004d00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d04:	f7fd f86a 	bl	8001ddc <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e1d5      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d16:	4b2e      	ldr	r3, [pc, #184]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d036      	beq.n	8004d9c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d019      	beq.n	8004d6a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d36:	4b26      	ldr	r3, [pc, #152]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a25      	ldr	r2, [pc, #148]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004d3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d42:	f7fd f84b 	bl	8001ddc <HAL_GetTick>
 8004d46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d4a:	f7fd f847 	bl	8001ddc <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e1b2      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d5c:	4b1c      	ldr	r3, [pc, #112]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0f0      	beq.n	8004d4a <HAL_RCC_OscConfig+0x49a>
 8004d68:	e018      	b.n	8004d9c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d6a:	4b19      	ldr	r3, [pc, #100]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a18      	ldr	r2, [pc, #96]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d76:	f7fd f831 	bl	8001ddc <HAL_GetTick>
 8004d7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004d7e:	f7fd f82d 	bl	8001ddc <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e198      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004d90:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <HAL_RCC_OscConfig+0x520>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1f0      	bne.n	8004d7e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 8085 	beq.w	8004eb4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004daa:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <HAL_RCC_OscConfig+0x524>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a09      	ldr	r2, [pc, #36]	; (8004dd4 <HAL_RCC_OscConfig+0x524>)
 8004db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004db6:	f7fd f811 	bl	8001ddc <HAL_GetTick>
 8004dba:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dbc:	e00c      	b.n	8004dd8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004dbe:	f7fd f80d 	bl	8001ddc <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b64      	cmp	r3, #100	; 0x64
 8004dca:	d905      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e178      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
 8004dd0:	58024400 	.word	0x58024400
 8004dd4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004dd8:	4b96      	ldr	r3, [pc, #600]	; (8005034 <HAL_RCC_OscConfig+0x784>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0ec      	beq.n	8004dbe <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d106      	bne.n	8004dfa <HAL_RCC_OscConfig+0x54a>
 8004dec:	4b92      	ldr	r3, [pc, #584]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	4a91      	ldr	r2, [pc, #580]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	6713      	str	r3, [r2, #112]	; 0x70
 8004df8:	e02d      	b.n	8004e56 <HAL_RCC_OscConfig+0x5a6>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10c      	bne.n	8004e1c <HAL_RCC_OscConfig+0x56c>
 8004e02:	4b8d      	ldr	r3, [pc, #564]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e06:	4a8c      	ldr	r2, [pc, #560]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004e08:	f023 0301 	bic.w	r3, r3, #1
 8004e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0e:	4b8a      	ldr	r3, [pc, #552]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e12:	4a89      	ldr	r2, [pc, #548]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004e14:	f023 0304 	bic.w	r3, r3, #4
 8004e18:	6713      	str	r3, [r2, #112]	; 0x70
 8004e1a:	e01c      	b.n	8004e56 <HAL_RCC_OscConfig+0x5a6>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2b05      	cmp	r3, #5
 8004e22:	d10c      	bne.n	8004e3e <HAL_RCC_OscConfig+0x58e>
 8004e24:	4b84      	ldr	r3, [pc, #528]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e28:	4a83      	ldr	r2, [pc, #524]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004e2a:	f043 0304 	orr.w	r3, r3, #4
 8004e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e30:	4b81      	ldr	r3, [pc, #516]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e34:	4a80      	ldr	r2, [pc, #512]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004e36:	f043 0301 	orr.w	r3, r3, #1
 8004e3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3c:	e00b      	b.n	8004e56 <HAL_RCC_OscConfig+0x5a6>
 8004e3e:	4b7e      	ldr	r3, [pc, #504]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e42:	4a7d      	ldr	r2, [pc, #500]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	6713      	str	r3, [r2, #112]	; 0x70
 8004e4a:	4b7b      	ldr	r3, [pc, #492]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4e:	4a7a      	ldr	r2, [pc, #488]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004e50:	f023 0304 	bic.w	r3, r3, #4
 8004e54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d015      	beq.n	8004e8a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5e:	f7fc ffbd 	bl	8001ddc <HAL_GetTick>
 8004e62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e64:	e00a      	b.n	8004e7c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e66:	f7fc ffb9 	bl	8001ddc <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d901      	bls.n	8004e7c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e122      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e7c:	4b6e      	ldr	r3, [pc, #440]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0ee      	beq.n	8004e66 <HAL_RCC_OscConfig+0x5b6>
 8004e88:	e014      	b.n	8004eb4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8a:	f7fc ffa7 	bl	8001ddc <HAL_GetTick>
 8004e8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004e90:	e00a      	b.n	8004ea8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e92:	f7fc ffa3 	bl	8001ddc <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e10c      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ea8:	4b63      	ldr	r3, [pc, #396]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1ee      	bne.n	8004e92 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 8101 	beq.w	80050c0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004ebe:	4b5e      	ldr	r3, [pc, #376]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ec6:	2b18      	cmp	r3, #24
 8004ec8:	f000 80bc 	beq.w	8005044 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	f040 8095 	bne.w	8005000 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ed6:	4b58      	ldr	r3, [pc, #352]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a57      	ldr	r2, [pc, #348]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004edc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee2:	f7fc ff7b 	bl	8001ddc <HAL_GetTick>
 8004ee6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eea:	f7fc ff77 	bl	8001ddc <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e0e2      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004efc:	4b4e      	ldr	r3, [pc, #312]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1f0      	bne.n	8004eea <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f08:	4b4b      	ldr	r3, [pc, #300]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004f0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f0c:	4b4b      	ldr	r3, [pc, #300]	; (800503c <HAL_RCC_OscConfig+0x78c>)
 8004f0e:	4013      	ands	r3, r2
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f18:	0112      	lsls	r2, r2, #4
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	4946      	ldr	r1, [pc, #280]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	628b      	str	r3, [r1, #40]	; 0x28
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	3b01      	subs	r3, #1
 8004f28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f30:	3b01      	subs	r3, #1
 8004f32:	025b      	lsls	r3, r3, #9
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	041b      	lsls	r3, r3, #16
 8004f40:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	061b      	lsls	r3, r3, #24
 8004f4e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f52:	4939      	ldr	r1, [pc, #228]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004f58:	4b37      	ldr	r3, [pc, #220]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	4a36      	ldr	r2, [pc, #216]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f64:	4b34      	ldr	r3, [pc, #208]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f68:	4b35      	ldr	r3, [pc, #212]	; (8005040 <HAL_RCC_OscConfig+0x790>)
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004f70:	00d2      	lsls	r2, r2, #3
 8004f72:	4931      	ldr	r1, [pc, #196]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004f78:	4b2f      	ldr	r3, [pc, #188]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	f023 020c 	bic.w	r2, r3, #12
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	492c      	ldr	r1, [pc, #176]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004f8a:	4b2b      	ldr	r3, [pc, #172]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8e:	f023 0202 	bic.w	r2, r3, #2
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	4928      	ldr	r1, [pc, #160]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f9c:	4b26      	ldr	r3, [pc, #152]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	4a25      	ldr	r2, [pc, #148]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fa8:	4b23      	ldr	r3, [pc, #140]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fac:	4a22      	ldr	r2, [pc, #136]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004fb4:	4b20      	ldr	r3, [pc, #128]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	4a1f      	ldr	r2, [pc, #124]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004fba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004fc0:	4b1d      	ldr	r3, [pc, #116]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	4a1c      	ldr	r2, [pc, #112]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004fc6:	f043 0301 	orr.w	r3, r3, #1
 8004fca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fcc:	4b1a      	ldr	r3, [pc, #104]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a19      	ldr	r2, [pc, #100]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7fc ff00 	bl	8001ddc <HAL_GetTick>
 8004fdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe0:	f7fc fefc 	bl	8001ddc <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e067      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ff2:	4b11      	ldr	r3, [pc, #68]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x730>
 8004ffe:	e05f      	b.n	80050c0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005000:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a0c      	ldr	r2, [pc, #48]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8005006:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800500a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500c:	f7fc fee6 	bl	8001ddc <HAL_GetTick>
 8005010:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005014:	f7fc fee2 	bl	8001ddc <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e04d      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005026:	4b04      	ldr	r3, [pc, #16]	; (8005038 <HAL_RCC_OscConfig+0x788>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0x764>
 8005032:	e045      	b.n	80050c0 <HAL_RCC_OscConfig+0x810>
 8005034:	58024800 	.word	0x58024800
 8005038:	58024400 	.word	0x58024400
 800503c:	fffffc0c 	.word	0xfffffc0c
 8005040:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005044:	4b21      	ldr	r3, [pc, #132]	; (80050cc <HAL_RCC_OscConfig+0x81c>)
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800504a:	4b20      	ldr	r3, [pc, #128]	; (80050cc <HAL_RCC_OscConfig+0x81c>)
 800504c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	2b01      	cmp	r3, #1
 8005056:	d031      	beq.n	80050bc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f003 0203 	and.w	r2, r3, #3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005062:	429a      	cmp	r2, r3
 8005064:	d12a      	bne.n	80050bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005072:	429a      	cmp	r2, r3
 8005074:	d122      	bne.n	80050bc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005080:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005082:	429a      	cmp	r2, r3
 8005084:	d11a      	bne.n	80050bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	0a5b      	lsrs	r3, r3, #9
 800508a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005092:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005094:	429a      	cmp	r2, r3
 8005096:	d111      	bne.n	80050bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	0c1b      	lsrs	r3, r3, #16
 800509c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d108      	bne.n	80050bc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	0e1b      	lsrs	r3, r3, #24
 80050ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d001      	beq.n	80050c0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3730      	adds	r7, #48	; 0x30
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	58024400 	.word	0x58024400

080050d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e19c      	b.n	800541e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050e4:	4b8a      	ldr	r3, [pc, #552]	; (8005310 <HAL_RCC_ClockConfig+0x240>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 030f 	and.w	r3, r3, #15
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d910      	bls.n	8005114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f2:	4b87      	ldr	r3, [pc, #540]	; (8005310 <HAL_RCC_ClockConfig+0x240>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f023 020f 	bic.w	r2, r3, #15
 80050fa:	4985      	ldr	r1, [pc, #532]	; (8005310 <HAL_RCC_ClockConfig+0x240>)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	4313      	orrs	r3, r2
 8005100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005102:	4b83      	ldr	r3, [pc, #524]	; (8005310 <HAL_RCC_ClockConfig+0x240>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d001      	beq.n	8005114 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e184      	b.n	800541e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d010      	beq.n	8005142 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691a      	ldr	r2, [r3, #16]
 8005124:	4b7b      	ldr	r3, [pc, #492]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800512c:	429a      	cmp	r2, r3
 800512e:	d908      	bls.n	8005142 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005130:	4b78      	ldr	r3, [pc, #480]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	4975      	ldr	r1, [pc, #468]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 800513e:	4313      	orrs	r3, r2
 8005140:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d010      	beq.n	8005170 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695a      	ldr	r2, [r3, #20]
 8005152:	4b70      	ldr	r3, [pc, #448]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800515a:	429a      	cmp	r2, r3
 800515c:	d908      	bls.n	8005170 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800515e:	4b6d      	ldr	r3, [pc, #436]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	496a      	ldr	r1, [pc, #424]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 800516c:	4313      	orrs	r3, r2
 800516e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0310 	and.w	r3, r3, #16
 8005178:	2b00      	cmp	r3, #0
 800517a:	d010      	beq.n	800519e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	699a      	ldr	r2, [r3, #24]
 8005180:	4b64      	ldr	r3, [pc, #400]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005188:	429a      	cmp	r2, r3
 800518a:	d908      	bls.n	800519e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800518c:	4b61      	ldr	r3, [pc, #388]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	495e      	ldr	r1, [pc, #376]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 800519a:	4313      	orrs	r3, r2
 800519c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d010      	beq.n	80051cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69da      	ldr	r2, [r3, #28]
 80051ae:	4b59      	ldr	r3, [pc, #356]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d908      	bls.n	80051cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80051ba:	4b56      	ldr	r3, [pc, #344]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	4953      	ldr	r1, [pc, #332]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d010      	beq.n	80051fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	4b4d      	ldr	r3, [pc, #308]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d908      	bls.n	80051fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051e8:	4b4a      	ldr	r3, [pc, #296]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	f023 020f 	bic.w	r2, r3, #15
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	4947      	ldr	r1, [pc, #284]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d055      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005206:	4b43      	ldr	r3, [pc, #268]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	4940      	ldr	r1, [pc, #256]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 8005214:	4313      	orrs	r3, r2
 8005216:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	2b02      	cmp	r3, #2
 800521e:	d107      	bne.n	8005230 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005220:	4b3c      	ldr	r3, [pc, #240]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d121      	bne.n	8005270 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e0f6      	b.n	800541e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b03      	cmp	r3, #3
 8005236:	d107      	bne.n	8005248 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005238:	4b36      	ldr	r3, [pc, #216]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d115      	bne.n	8005270 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e0ea      	b.n	800541e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d107      	bne.n	8005260 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005250:	4b30      	ldr	r3, [pc, #192]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d109      	bne.n	8005270 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0de      	b.n	800541e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005260:	4b2c      	ldr	r3, [pc, #176]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e0d6      	b.n	800541e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005270:	4b28      	ldr	r3, [pc, #160]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	f023 0207 	bic.w	r2, r3, #7
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	4925      	ldr	r1, [pc, #148]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 800527e:	4313      	orrs	r3, r2
 8005280:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005282:	f7fc fdab 	bl	8001ddc <HAL_GetTick>
 8005286:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005288:	e00a      	b.n	80052a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800528a:	f7fc fda7 	bl	8001ddc <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	f241 3288 	movw	r2, #5000	; 0x1388
 8005298:	4293      	cmp	r3, r2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e0be      	b.n	800541e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a0:	4b1c      	ldr	r3, [pc, #112]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d1eb      	bne.n	800528a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d010      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	4b14      	ldr	r3, [pc, #80]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d208      	bcs.n	80052e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052ce:	4b11      	ldr	r3, [pc, #68]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	f023 020f 	bic.w	r2, r3, #15
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	490e      	ldr	r1, [pc, #56]	; (8005314 <HAL_RCC_ClockConfig+0x244>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052e0:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <HAL_RCC_ClockConfig+0x240>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d214      	bcs.n	8005318 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b08      	ldr	r3, [pc, #32]	; (8005310 <HAL_RCC_ClockConfig+0x240>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 020f 	bic.w	r2, r3, #15
 80052f6:	4906      	ldr	r1, [pc, #24]	; (8005310 <HAL_RCC_ClockConfig+0x240>)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fe:	4b04      	ldr	r3, [pc, #16]	; (8005310 <HAL_RCC_ClockConfig+0x240>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d005      	beq.n	8005318 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e086      	b.n	800541e <HAL_RCC_ClockConfig+0x34e>
 8005310:	52002000 	.word	0x52002000
 8005314:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0304 	and.w	r3, r3, #4
 8005320:	2b00      	cmp	r3, #0
 8005322:	d010      	beq.n	8005346 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	4b3f      	ldr	r3, [pc, #252]	; (8005428 <HAL_RCC_ClockConfig+0x358>)
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005330:	429a      	cmp	r2, r3
 8005332:	d208      	bcs.n	8005346 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005334:	4b3c      	ldr	r3, [pc, #240]	; (8005428 <HAL_RCC_ClockConfig+0x358>)
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	4939      	ldr	r1, [pc, #228]	; (8005428 <HAL_RCC_ClockConfig+0x358>)
 8005342:	4313      	orrs	r3, r2
 8005344:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0308 	and.w	r3, r3, #8
 800534e:	2b00      	cmp	r3, #0
 8005350:	d010      	beq.n	8005374 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	695a      	ldr	r2, [r3, #20]
 8005356:	4b34      	ldr	r3, [pc, #208]	; (8005428 <HAL_RCC_ClockConfig+0x358>)
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800535e:	429a      	cmp	r2, r3
 8005360:	d208      	bcs.n	8005374 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005362:	4b31      	ldr	r3, [pc, #196]	; (8005428 <HAL_RCC_ClockConfig+0x358>)
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	492e      	ldr	r1, [pc, #184]	; (8005428 <HAL_RCC_ClockConfig+0x358>)
 8005370:	4313      	orrs	r3, r2
 8005372:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0310 	and.w	r3, r3, #16
 800537c:	2b00      	cmp	r3, #0
 800537e:	d010      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699a      	ldr	r2, [r3, #24]
 8005384:	4b28      	ldr	r3, [pc, #160]	; (8005428 <HAL_RCC_ClockConfig+0x358>)
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800538c:	429a      	cmp	r2, r3
 800538e:	d208      	bcs.n	80053a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005390:	4b25      	ldr	r3, [pc, #148]	; (8005428 <HAL_RCC_ClockConfig+0x358>)
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	4922      	ldr	r1, [pc, #136]	; (8005428 <HAL_RCC_ClockConfig+0x358>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d010      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69da      	ldr	r2, [r3, #28]
 80053b2:	4b1d      	ldr	r3, [pc, #116]	; (8005428 <HAL_RCC_ClockConfig+0x358>)
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d208      	bcs.n	80053d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80053be:	4b1a      	ldr	r3, [pc, #104]	; (8005428 <HAL_RCC_ClockConfig+0x358>)
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	4917      	ldr	r1, [pc, #92]	; (8005428 <HAL_RCC_ClockConfig+0x358>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80053d0:	f000 f834 	bl	800543c <HAL_RCC_GetSysClockFreq>
 80053d4:	4602      	mov	r2, r0
 80053d6:	4b14      	ldr	r3, [pc, #80]	; (8005428 <HAL_RCC_ClockConfig+0x358>)
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	0a1b      	lsrs	r3, r3, #8
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	4912      	ldr	r1, [pc, #72]	; (800542c <HAL_RCC_ClockConfig+0x35c>)
 80053e2:	5ccb      	ldrb	r3, [r1, r3]
 80053e4:	f003 031f 	and.w	r3, r3, #31
 80053e8:	fa22 f303 	lsr.w	r3, r2, r3
 80053ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053ee:	4b0e      	ldr	r3, [pc, #56]	; (8005428 <HAL_RCC_ClockConfig+0x358>)
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	4a0d      	ldr	r2, [pc, #52]	; (800542c <HAL_RCC_ClockConfig+0x35c>)
 80053f8:	5cd3      	ldrb	r3, [r2, r3]
 80053fa:	f003 031f 	and.w	r3, r3, #31
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	fa22 f303 	lsr.w	r3, r2, r3
 8005404:	4a0a      	ldr	r2, [pc, #40]	; (8005430 <HAL_RCC_ClockConfig+0x360>)
 8005406:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005408:	4a0a      	ldr	r2, [pc, #40]	; (8005434 <HAL_RCC_ClockConfig+0x364>)
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800540e:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <HAL_RCC_ClockConfig+0x368>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f7fc fc98 	bl	8001d48 <HAL_InitTick>
 8005418:	4603      	mov	r3, r0
 800541a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800541c:	7bfb      	ldrb	r3, [r7, #15]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3718      	adds	r7, #24
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	58024400 	.word	0x58024400
 800542c:	0800a660 	.word	0x0800a660
 8005430:	20000004 	.word	0x20000004
 8005434:	20000000 	.word	0x20000000
 8005438:	20000008 	.word	0x20000008

0800543c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800543c:	b480      	push	{r7}
 800543e:	b089      	sub	sp, #36	; 0x24
 8005440:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005442:	4bb3      	ldr	r3, [pc, #716]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800544a:	2b18      	cmp	r3, #24
 800544c:	f200 8155 	bhi.w	80056fa <HAL_RCC_GetSysClockFreq+0x2be>
 8005450:	a201      	add	r2, pc, #4	; (adr r2, 8005458 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005456:	bf00      	nop
 8005458:	080054bd 	.word	0x080054bd
 800545c:	080056fb 	.word	0x080056fb
 8005460:	080056fb 	.word	0x080056fb
 8005464:	080056fb 	.word	0x080056fb
 8005468:	080056fb 	.word	0x080056fb
 800546c:	080056fb 	.word	0x080056fb
 8005470:	080056fb 	.word	0x080056fb
 8005474:	080056fb 	.word	0x080056fb
 8005478:	080054e3 	.word	0x080054e3
 800547c:	080056fb 	.word	0x080056fb
 8005480:	080056fb 	.word	0x080056fb
 8005484:	080056fb 	.word	0x080056fb
 8005488:	080056fb 	.word	0x080056fb
 800548c:	080056fb 	.word	0x080056fb
 8005490:	080056fb 	.word	0x080056fb
 8005494:	080056fb 	.word	0x080056fb
 8005498:	080054e9 	.word	0x080054e9
 800549c:	080056fb 	.word	0x080056fb
 80054a0:	080056fb 	.word	0x080056fb
 80054a4:	080056fb 	.word	0x080056fb
 80054a8:	080056fb 	.word	0x080056fb
 80054ac:	080056fb 	.word	0x080056fb
 80054b0:	080056fb 	.word	0x080056fb
 80054b4:	080056fb 	.word	0x080056fb
 80054b8:	080054ef 	.word	0x080054ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054bc:	4b94      	ldr	r3, [pc, #592]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d009      	beq.n	80054dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80054c8:	4b91      	ldr	r3, [pc, #580]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	08db      	lsrs	r3, r3, #3
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	4a90      	ldr	r2, [pc, #576]	; (8005714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054d4:	fa22 f303 	lsr.w	r3, r2, r3
 80054d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80054da:	e111      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80054dc:	4b8d      	ldr	r3, [pc, #564]	; (8005714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054de:	61bb      	str	r3, [r7, #24]
    break;
 80054e0:	e10e      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80054e2:	4b8d      	ldr	r3, [pc, #564]	; (8005718 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054e4:	61bb      	str	r3, [r7, #24]
    break;
 80054e6:	e10b      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80054e8:	4b8c      	ldr	r3, [pc, #560]	; (800571c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80054ea:	61bb      	str	r3, [r7, #24]
    break;
 80054ec:	e108      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054ee:	4b88      	ldr	r3, [pc, #544]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80054f8:	4b85      	ldr	r3, [pc, #532]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fc:	091b      	lsrs	r3, r3, #4
 80054fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005502:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005504:	4b82      	ldr	r3, [pc, #520]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800550e:	4b80      	ldr	r3, [pc, #512]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005512:	08db      	lsrs	r3, r3, #3
 8005514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	fb02 f303 	mul.w	r3, r2, r3
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005526:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 80e1 	beq.w	80056f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b02      	cmp	r3, #2
 8005536:	f000 8083 	beq.w	8005640 <HAL_RCC_GetSysClockFreq+0x204>
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	2b02      	cmp	r3, #2
 800553e:	f200 80a1 	bhi.w	8005684 <HAL_RCC_GetSysClockFreq+0x248>
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <HAL_RCC_GetSysClockFreq+0x114>
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d056      	beq.n	80055fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800554e:	e099      	b.n	8005684 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005550:	4b6f      	ldr	r3, [pc, #444]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0320 	and.w	r3, r3, #32
 8005558:	2b00      	cmp	r3, #0
 800555a:	d02d      	beq.n	80055b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800555c:	4b6c      	ldr	r3, [pc, #432]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	08db      	lsrs	r3, r3, #3
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	4a6b      	ldr	r2, [pc, #428]	; (8005714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005568:	fa22 f303 	lsr.w	r3, r2, r3
 800556c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	ee07 3a90 	vmov	s15, r3
 8005574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005586:	4b62      	ldr	r3, [pc, #392]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005596:	ed97 6a02 	vldr	s12, [r7, #8]
 800559a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005720 <HAL_RCC_GetSysClockFreq+0x2e4>
 800559e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80055b6:	e087      	b.n	80056c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	ee07 3a90 	vmov	s15, r3
 80055be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005724 <HAL_RCC_GetSysClockFreq+0x2e8>
 80055c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ca:	4b51      	ldr	r3, [pc, #324]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d2:	ee07 3a90 	vmov	s15, r3
 80055d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055da:	ed97 6a02 	vldr	s12, [r7, #8]
 80055de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005720 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055fa:	e065      	b.n	80056c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005606:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005728 <HAL_RCC_GetSysClockFreq+0x2ec>
 800560a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800560e:	4b40      	ldr	r3, [pc, #256]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005616:	ee07 3a90 	vmov	s15, r3
 800561a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005622:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005720 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800562e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800563e:	e043      	b.n	80056c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800572c <HAL_RCC_GetSysClockFreq+0x2f0>
 800564e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005652:	4b2f      	ldr	r3, [pc, #188]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005662:	ed97 6a02 	vldr	s12, [r7, #8]
 8005666:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005720 <HAL_RCC_GetSysClockFreq+0x2e4>
 800566a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800566e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005682:	e021      	b.n	80056c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	ee07 3a90 	vmov	s15, r3
 800568a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005728 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005696:	4b1e      	ldr	r3, [pc, #120]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569e:	ee07 3a90 	vmov	s15, r3
 80056a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80056aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005720 <HAL_RCC_GetSysClockFreq+0x2e4>
 80056ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80056c8:	4b11      	ldr	r3, [pc, #68]	; (8005710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056cc:	0a5b      	lsrs	r3, r3, #9
 80056ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056d2:	3301      	adds	r3, #1
 80056d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	ee07 3a90 	vmov	s15, r3
 80056dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80056e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056ec:	ee17 3a90 	vmov	r3, s15
 80056f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80056f2:	e005      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	61bb      	str	r3, [r7, #24]
    break;
 80056f8:	e002      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80056fa:	4b07      	ldr	r3, [pc, #28]	; (8005718 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80056fc:	61bb      	str	r3, [r7, #24]
    break;
 80056fe:	bf00      	nop
  }

  return sysclockfreq;
 8005700:	69bb      	ldr	r3, [r7, #24]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3724      	adds	r7, #36	; 0x24
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	58024400 	.word	0x58024400
 8005714:	03d09000 	.word	0x03d09000
 8005718:	003d0900 	.word	0x003d0900
 800571c:	02dc6c00 	.word	0x02dc6c00
 8005720:	46000000 	.word	0x46000000
 8005724:	4c742400 	.word	0x4c742400
 8005728:	4a742400 	.word	0x4a742400
 800572c:	4c371b00 	.word	0x4c371b00

08005730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005736:	f7ff fe81 	bl	800543c <HAL_RCC_GetSysClockFreq>
 800573a:	4602      	mov	r2, r0
 800573c:	4b10      	ldr	r3, [pc, #64]	; (8005780 <HAL_RCC_GetHCLKFreq+0x50>)
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	0a1b      	lsrs	r3, r3, #8
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	490f      	ldr	r1, [pc, #60]	; (8005784 <HAL_RCC_GetHCLKFreq+0x54>)
 8005748:	5ccb      	ldrb	r3, [r1, r3]
 800574a:	f003 031f 	and.w	r3, r3, #31
 800574e:	fa22 f303 	lsr.w	r3, r2, r3
 8005752:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005754:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <HAL_RCC_GetHCLKFreq+0x50>)
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	4a09      	ldr	r2, [pc, #36]	; (8005784 <HAL_RCC_GetHCLKFreq+0x54>)
 800575e:	5cd3      	ldrb	r3, [r2, r3]
 8005760:	f003 031f 	and.w	r3, r3, #31
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	fa22 f303 	lsr.w	r3, r2, r3
 800576a:	4a07      	ldr	r2, [pc, #28]	; (8005788 <HAL_RCC_GetHCLKFreq+0x58>)
 800576c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800576e:	4a07      	ldr	r2, [pc, #28]	; (800578c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005774:	4b04      	ldr	r3, [pc, #16]	; (8005788 <HAL_RCC_GetHCLKFreq+0x58>)
 8005776:	681b      	ldr	r3, [r3, #0]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	58024400 	.word	0x58024400
 8005784:	0800a660 	.word	0x0800a660
 8005788:	20000004 	.word	0x20000004
 800578c:	20000000 	.word	0x20000000

08005790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005794:	f7ff ffcc 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 8005798:	4602      	mov	r2, r0
 800579a:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	091b      	lsrs	r3, r3, #4
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	4904      	ldr	r1, [pc, #16]	; (80057b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057a6:	5ccb      	ldrb	r3, [r1, r3]
 80057a8:	f003 031f 	and.w	r3, r3, #31
 80057ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	58024400 	.word	0x58024400
 80057b8:	0800a660 	.word	0x0800a660

080057bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80057c0:	f7ff ffb6 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 80057c4:	4602      	mov	r2, r0
 80057c6:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	0a1b      	lsrs	r3, r3, #8
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	4904      	ldr	r1, [pc, #16]	; (80057e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80057d2:	5ccb      	ldrb	r3, [r1, r3]
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80057dc:	4618      	mov	r0, r3
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	58024400 	.word	0x58024400
 80057e4:	0800a660 	.word	0x0800a660

080057e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057f0:	2300      	movs	r3, #0
 80057f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057f4:	2300      	movs	r3, #0
 80057f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d03f      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005808:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800580c:	d02a      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800580e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005812:	d824      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005814:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005818:	d018      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800581a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800581e:	d81e      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005828:	d007      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800582a:	e018      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800582c:	4bab      	ldr	r3, [pc, #684]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	4aaa      	ldr	r2, [pc, #680]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005836:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005838:	e015      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	3304      	adds	r3, #4
 800583e:	2102      	movs	r1, #2
 8005840:	4618      	mov	r0, r3
 8005842:	f001 f9cf 	bl	8006be4 <RCCEx_PLL2_Config>
 8005846:	4603      	mov	r3, r0
 8005848:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800584a:	e00c      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3324      	adds	r3, #36	; 0x24
 8005850:	2102      	movs	r1, #2
 8005852:	4618      	mov	r0, r3
 8005854:	f001 fa78 	bl	8006d48 <RCCEx_PLL3_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800585c:	e003      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	75fb      	strb	r3, [r7, #23]
      break;
 8005862:	e000      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005866:	7dfb      	ldrb	r3, [r7, #23]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d109      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800586c:	4b9b      	ldr	r3, [pc, #620]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800586e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005870:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005878:	4998      	ldr	r1, [pc, #608]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800587a:	4313      	orrs	r3, r2
 800587c:	650b      	str	r3, [r1, #80]	; 0x50
 800587e:	e001      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005880:	7dfb      	ldrb	r3, [r7, #23]
 8005882:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d03d      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005894:	2b04      	cmp	r3, #4
 8005896:	d826      	bhi.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005898:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800589a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589e:	bf00      	nop
 80058a0:	080058b5 	.word	0x080058b5
 80058a4:	080058c3 	.word	0x080058c3
 80058a8:	080058d5 	.word	0x080058d5
 80058ac:	080058ed 	.word	0x080058ed
 80058b0:	080058ed 	.word	0x080058ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b4:	4b89      	ldr	r3, [pc, #548]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b8:	4a88      	ldr	r2, [pc, #544]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058c0:	e015      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	3304      	adds	r3, #4
 80058c6:	2100      	movs	r1, #0
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 f98b 	bl	8006be4 <RCCEx_PLL2_Config>
 80058ce:	4603      	mov	r3, r0
 80058d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058d2:	e00c      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3324      	adds	r3, #36	; 0x24
 80058d8:	2100      	movs	r1, #0
 80058da:	4618      	mov	r0, r3
 80058dc:	f001 fa34 	bl	8006d48 <RCCEx_PLL3_Config>
 80058e0:	4603      	mov	r3, r0
 80058e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058e4:	e003      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	75fb      	strb	r3, [r7, #23]
      break;
 80058ea:	e000      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80058ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058ee:	7dfb      	ldrb	r3, [r7, #23]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d109      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058f4:	4b79      	ldr	r3, [pc, #484]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f8:	f023 0207 	bic.w	r2, r3, #7
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005900:	4976      	ldr	r1, [pc, #472]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005902:	4313      	orrs	r3, r2
 8005904:	650b      	str	r3, [r1, #80]	; 0x50
 8005906:	e001      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005908:	7dfb      	ldrb	r3, [r7, #23]
 800590a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005914:	2b00      	cmp	r3, #0
 8005916:	d042      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005920:	d02b      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005926:	d825      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005928:	2bc0      	cmp	r3, #192	; 0xc0
 800592a:	d028      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800592c:	2bc0      	cmp	r3, #192	; 0xc0
 800592e:	d821      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005930:	2b80      	cmp	r3, #128	; 0x80
 8005932:	d016      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005934:	2b80      	cmp	r3, #128	; 0x80
 8005936:	d81d      	bhi.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d007      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005940:	e018      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005942:	4b66      	ldr	r3, [pc, #408]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005946:	4a65      	ldr	r2, [pc, #404]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800594c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800594e:	e017      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3304      	adds	r3, #4
 8005954:	2100      	movs	r1, #0
 8005956:	4618      	mov	r0, r3
 8005958:	f001 f944 	bl	8006be4 <RCCEx_PLL2_Config>
 800595c:	4603      	mov	r3, r0
 800595e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005960:	e00e      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3324      	adds	r3, #36	; 0x24
 8005966:	2100      	movs	r1, #0
 8005968:	4618      	mov	r0, r3
 800596a:	f001 f9ed 	bl	8006d48 <RCCEx_PLL3_Config>
 800596e:	4603      	mov	r3, r0
 8005970:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005972:	e005      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	75fb      	strb	r3, [r7, #23]
      break;
 8005978:	e002      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800597a:	bf00      	nop
 800597c:	e000      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800597e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d109      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005986:	4b55      	ldr	r3, [pc, #340]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005992:	4952      	ldr	r1, [pc, #328]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005994:	4313      	orrs	r3, r2
 8005996:	650b      	str	r3, [r1, #80]	; 0x50
 8005998:	e001      	b.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599a:	7dfb      	ldrb	r3, [r7, #23]
 800599c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d049      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059b4:	d030      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80059b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059ba:	d82a      	bhi.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80059bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059c0:	d02c      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80059c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059c6:	d824      	bhi.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80059c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059cc:	d018      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80059ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059d2:	d81e      	bhi.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80059d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059dc:	d007      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80059de:	e018      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059e0:	4b3e      	ldr	r3, [pc, #248]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e4:	4a3d      	ldr	r2, [pc, #244]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80059e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80059ec:	e017      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3304      	adds	r3, #4
 80059f2:	2100      	movs	r1, #0
 80059f4:	4618      	mov	r0, r3
 80059f6:	f001 f8f5 	bl	8006be4 <RCCEx_PLL2_Config>
 80059fa:	4603      	mov	r3, r0
 80059fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80059fe:	e00e      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3324      	adds	r3, #36	; 0x24
 8005a04:	2100      	movs	r1, #0
 8005a06:	4618      	mov	r0, r3
 8005a08:	f001 f99e 	bl	8006d48 <RCCEx_PLL3_Config>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a10:	e005      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	75fb      	strb	r3, [r7, #23]
      break;
 8005a16:	e002      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005a18:	bf00      	nop
 8005a1a:	e000      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a1e:	7dfb      	ldrb	r3, [r7, #23]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10a      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005a24:	4b2d      	ldr	r3, [pc, #180]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a28:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a32:	492a      	ldr	r1, [pc, #168]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	658b      	str	r3, [r1, #88]	; 0x58
 8005a38:	e001      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3a:	7dfb      	ldrb	r3, [r7, #23]
 8005a3c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d04c      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a54:	d030      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005a56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a5a:	d82a      	bhi.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005a5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a60:	d02c      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8005a62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a66:	d824      	bhi.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005a68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a6c:	d018      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005a6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a72:	d81e      	bhi.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005a78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a7c:	d007      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005a7e:	e018      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a80:	4b16      	ldr	r3, [pc, #88]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	4a15      	ldr	r2, [pc, #84]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a8a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005a8c:	e017      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	3304      	adds	r3, #4
 8005a92:	2100      	movs	r1, #0
 8005a94:	4618      	mov	r0, r3
 8005a96:	f001 f8a5 	bl	8006be4 <RCCEx_PLL2_Config>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005a9e:	e00e      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3324      	adds	r3, #36	; 0x24
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f001 f94e 	bl	8006d48 <RCCEx_PLL3_Config>
 8005aac:	4603      	mov	r3, r0
 8005aae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ab0:	e005      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab6:	e002      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005ab8:	bf00      	nop
 8005aba:	e000      	b.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005abc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005abe:	7dfb      	ldrb	r3, [r7, #23]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10d      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ad2:	4902      	ldr	r1, [pc, #8]	; (8005adc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	658b      	str	r3, [r1, #88]	; 0x58
 8005ad8:	e004      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005ada:	bf00      	nop
 8005adc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae0:	7dfb      	ldrb	r3, [r7, #23]
 8005ae2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d032      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af4:	2b30      	cmp	r3, #48	; 0x30
 8005af6:	d01c      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005af8:	2b30      	cmp	r3, #48	; 0x30
 8005afa:	d817      	bhi.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005afc:	2b20      	cmp	r3, #32
 8005afe:	d00c      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005b00:	2b20      	cmp	r3, #32
 8005b02:	d813      	bhi.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d016      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005b08:	2b10      	cmp	r3, #16
 8005b0a:	d10f      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b0c:	4baf      	ldr	r3, [pc, #700]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	4aae      	ldr	r2, [pc, #696]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005b18:	e00e      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	2102      	movs	r1, #2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 f85f 	bl	8006be4 <RCCEx_PLL2_Config>
 8005b26:	4603      	mov	r3, r0
 8005b28:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005b2a:	e005      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b30:	e002      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005b32:	bf00      	nop
 8005b34:	e000      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8005b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b38:	7dfb      	ldrb	r3, [r7, #23]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d109      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b3e:	4ba3      	ldr	r3, [pc, #652]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b4a:	49a0      	ldr	r1, [pc, #640]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b50:	e001      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b52:	7dfb      	ldrb	r3, [r7, #23]
 8005b54:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d047      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b6a:	d030      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b70:	d82a      	bhi.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005b72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b76:	d02c      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005b78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b7c:	d824      	bhi.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b82:	d018      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b88:	d81e      	bhi.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b92:	d007      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005b94:	e018      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b96:	4b8d      	ldr	r3, [pc, #564]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9a:	4a8c      	ldr	r2, [pc, #560]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ba2:	e017      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3304      	adds	r3, #4
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f001 f81a 	bl	8006be4 <RCCEx_PLL2_Config>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005bb4:	e00e      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	3324      	adds	r3, #36	; 0x24
 8005bba:	2100      	movs	r1, #0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 f8c3 	bl	8006d48 <RCCEx_PLL3_Config>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005bc6:	e005      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	75fb      	strb	r3, [r7, #23]
      break;
 8005bcc:	e002      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005bce:	bf00      	nop
 8005bd0:	e000      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005bd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d109      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005bda:	4b7c      	ldr	r3, [pc, #496]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bde:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be6:	4979      	ldr	r1, [pc, #484]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	650b      	str	r3, [r1, #80]	; 0x50
 8005bec:	e001      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d049      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c06:	d02e      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c0c:	d828      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005c0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c12:	d02a      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005c14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c18:	d822      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005c1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c1e:	d026      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005c20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c24:	d81c      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005c26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c2a:	d010      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005c2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c30:	d816      	bhi.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d01d      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3a:	d111      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	2101      	movs	r1, #1
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 ffce 	bl	8006be4 <RCCEx_PLL2_Config>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c4c:	e012      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	3324      	adds	r3, #36	; 0x24
 8005c52:	2101      	movs	r1, #1
 8005c54:	4618      	mov	r0, r3
 8005c56:	f001 f877 	bl	8006d48 <RCCEx_PLL3_Config>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005c5e:	e009      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	75fb      	strb	r3, [r7, #23]
      break;
 8005c64:	e006      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005c66:	bf00      	nop
 8005c68:	e004      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005c6a:	bf00      	nop
 8005c6c:	e002      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005c6e:	bf00      	nop
 8005c70:	e000      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c74:	7dfb      	ldrb	r3, [r7, #23]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d109      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005c7a:	4b54      	ldr	r3, [pc, #336]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c86:	4951      	ldr	r1, [pc, #324]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	650b      	str	r3, [r1, #80]	; 0x50
 8005c8c:	e001      	b.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8e:	7dfb      	ldrb	r3, [r7, #23]
 8005c90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d04b      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ca8:	d02e      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cae:	d828      	bhi.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb4:	d02a      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cba:	d822      	bhi.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005cbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005cc0:	d026      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005cc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005cc6:	d81c      	bhi.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ccc:	d010      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cd2:	d816      	bhi.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01d      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005cd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cdc:	d111      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 ff7d 	bl	8006be4 <RCCEx_PLL2_Config>
 8005cea:	4603      	mov	r3, r0
 8005cec:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005cee:	e012      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3324      	adds	r3, #36	; 0x24
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 f826 	bl	8006d48 <RCCEx_PLL3_Config>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005d00:	e009      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	75fb      	strb	r3, [r7, #23]
      break;
 8005d06:	e006      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005d08:	bf00      	nop
 8005d0a:	e004      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005d0c:	bf00      	nop
 8005d0e:	e002      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005d10:	bf00      	nop
 8005d12:	e000      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005d14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d16:	7dfb      	ldrb	r3, [r7, #23]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10a      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005d1c:	4b2b      	ldr	r3, [pc, #172]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d20:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d2a:	4928      	ldr	r1, [pc, #160]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	658b      	str	r3, [r1, #88]	; 0x58
 8005d30:	e001      	b.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d32:	7dfb      	ldrb	r3, [r7, #23]
 8005d34:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d02f      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d4a:	d00e      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d50:	d814      	bhi.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d015      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d5a:	d10f      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d5c:	4b1b      	ldr	r3, [pc, #108]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d60:	4a1a      	ldr	r2, [pc, #104]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d68:	e00c      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	2101      	movs	r1, #1
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 ff37 	bl	8006be4 <RCCEx_PLL2_Config>
 8005d76:	4603      	mov	r3, r0
 8005d78:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005d7a:	e003      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d80:	e000      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005d82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d84:	7dfb      	ldrb	r3, [r7, #23]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d109      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d8a:	4b10      	ldr	r3, [pc, #64]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d96:	490d      	ldr	r1, [pc, #52]	; (8005dcc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	650b      	str	r3, [r1, #80]	; 0x50
 8005d9c:	e001      	b.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
 8005da0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d033      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db2:	2b03      	cmp	r3, #3
 8005db4:	d81c      	bhi.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005db6:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbc:	08005df7 	.word	0x08005df7
 8005dc0:	08005dd1 	.word	0x08005dd1
 8005dc4:	08005ddf 	.word	0x08005ddf
 8005dc8:	08005df7 	.word	0x08005df7
 8005dcc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd0:	4bb8      	ldr	r3, [pc, #736]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	4ab7      	ldr	r2, [pc, #732]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005ddc:	e00c      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3304      	adds	r3, #4
 8005de2:	2102      	movs	r1, #2
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fefd 	bl	8006be4 <RCCEx_PLL2_Config>
 8005dea:	4603      	mov	r3, r0
 8005dec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005dee:	e003      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	75fb      	strb	r3, [r7, #23]
      break;
 8005df4:	e000      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d109      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005dfe:	4bad      	ldr	r3, [pc, #692]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e02:	f023 0203 	bic.w	r2, r3, #3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0a:	49aa      	ldr	r1, [pc, #680]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e10:	e001      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e12:	7dfb      	ldrb	r3, [r7, #23]
 8005e14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f000 8086 	beq.w	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e24:	4ba4      	ldr	r3, [pc, #656]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4aa3      	ldr	r2, [pc, #652]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e30:	f7fb ffd4 	bl	8001ddc <HAL_GetTick>
 8005e34:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e36:	e009      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e38:	f7fb ffd0 	bl	8001ddc <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b64      	cmp	r3, #100	; 0x64
 8005e44:	d902      	bls.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	75fb      	strb	r3, [r7, #23]
        break;
 8005e4a:	e005      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e4c:	4b9a      	ldr	r3, [pc, #616]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0ef      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005e58:	7dfb      	ldrb	r3, [r7, #23]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d166      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e5e:	4b95      	ldr	r3, [pc, #596]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e68:	4053      	eors	r3, r2
 8005e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d013      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e72:	4b90      	ldr	r3, [pc, #576]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e7c:	4b8d      	ldr	r3, [pc, #564]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e80:	4a8c      	ldr	r2, [pc, #560]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e86:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e88:	4b8a      	ldr	r3, [pc, #552]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8c:	4a89      	ldr	r2, [pc, #548]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e92:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e94:	4a87      	ldr	r2, [pc, #540]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea4:	d115      	bne.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ea6:	f7fb ff99 	bl	8001ddc <HAL_GetTick>
 8005eaa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005eac:	e00b      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eae:	f7fb ff95 	bl	8001ddc <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d902      	bls.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	75fb      	strb	r3, [r7, #23]
            break;
 8005ec4:	e005      	b.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ec6:	4b7b      	ldr	r3, [pc, #492]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0ed      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d126      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ee6:	d10d      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005ee8:	4b72      	ldr	r3, [pc, #456]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ef6:	0919      	lsrs	r1, r3, #4
 8005ef8:	4b70      	ldr	r3, [pc, #448]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8005efa:	400b      	ands	r3, r1
 8005efc:	496d      	ldr	r1, [pc, #436]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005efe:	4313      	orrs	r3, r2
 8005f00:	610b      	str	r3, [r1, #16]
 8005f02:	e005      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005f04:	4b6b      	ldr	r3, [pc, #428]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	4a6a      	ldr	r2, [pc, #424]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005f0e:	6113      	str	r3, [r2, #16]
 8005f10:	4b68      	ldr	r3, [pc, #416]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f1e:	4965      	ldr	r1, [pc, #404]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	670b      	str	r3, [r1, #112]	; 0x70
 8005f24:	e004      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f26:	7dfb      	ldrb	r3, [r7, #23]
 8005f28:	75bb      	strb	r3, [r7, #22]
 8005f2a:	e001      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
 8005f2e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d07e      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f40:	2b28      	cmp	r3, #40	; 0x28
 8005f42:	d867      	bhi.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005f44:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4a:	bf00      	nop
 8005f4c:	0800601b 	.word	0x0800601b
 8005f50:	08006015 	.word	0x08006015
 8005f54:	08006015 	.word	0x08006015
 8005f58:	08006015 	.word	0x08006015
 8005f5c:	08006015 	.word	0x08006015
 8005f60:	08006015 	.word	0x08006015
 8005f64:	08006015 	.word	0x08006015
 8005f68:	08006015 	.word	0x08006015
 8005f6c:	08005ff1 	.word	0x08005ff1
 8005f70:	08006015 	.word	0x08006015
 8005f74:	08006015 	.word	0x08006015
 8005f78:	08006015 	.word	0x08006015
 8005f7c:	08006015 	.word	0x08006015
 8005f80:	08006015 	.word	0x08006015
 8005f84:	08006015 	.word	0x08006015
 8005f88:	08006015 	.word	0x08006015
 8005f8c:	08006003 	.word	0x08006003
 8005f90:	08006015 	.word	0x08006015
 8005f94:	08006015 	.word	0x08006015
 8005f98:	08006015 	.word	0x08006015
 8005f9c:	08006015 	.word	0x08006015
 8005fa0:	08006015 	.word	0x08006015
 8005fa4:	08006015 	.word	0x08006015
 8005fa8:	08006015 	.word	0x08006015
 8005fac:	0800601b 	.word	0x0800601b
 8005fb0:	08006015 	.word	0x08006015
 8005fb4:	08006015 	.word	0x08006015
 8005fb8:	08006015 	.word	0x08006015
 8005fbc:	08006015 	.word	0x08006015
 8005fc0:	08006015 	.word	0x08006015
 8005fc4:	08006015 	.word	0x08006015
 8005fc8:	08006015 	.word	0x08006015
 8005fcc:	0800601b 	.word	0x0800601b
 8005fd0:	08006015 	.word	0x08006015
 8005fd4:	08006015 	.word	0x08006015
 8005fd8:	08006015 	.word	0x08006015
 8005fdc:	08006015 	.word	0x08006015
 8005fe0:	08006015 	.word	0x08006015
 8005fe4:	08006015 	.word	0x08006015
 8005fe8:	08006015 	.word	0x08006015
 8005fec:	0800601b 	.word	0x0800601b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 fdf4 	bl	8006be4 <RCCEx_PLL2_Config>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006000:	e00c      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3324      	adds	r3, #36	; 0x24
 8006006:	2101      	movs	r1, #1
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fe9d 	bl	8006d48 <RCCEx_PLL3_Config>
 800600e:	4603      	mov	r3, r0
 8006010:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006012:	e003      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	75fb      	strb	r3, [r7, #23]
      break;
 8006018:	e000      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800601a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800601c:	7dfb      	ldrb	r3, [r7, #23]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d109      	bne.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006022:	4b24      	ldr	r3, [pc, #144]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006026:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800602e:	4921      	ldr	r1, [pc, #132]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006030:	4313      	orrs	r3, r2
 8006032:	654b      	str	r3, [r1, #84]	; 0x54
 8006034:	e001      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006036:	7dfb      	ldrb	r3, [r7, #23]
 8006038:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	2b00      	cmp	r3, #0
 8006044:	d03e      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800604a:	2b05      	cmp	r3, #5
 800604c:	d820      	bhi.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800604e:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	08006097 	.word	0x08006097
 8006058:	0800606d 	.word	0x0800606d
 800605c:	0800607f 	.word	0x0800607f
 8006060:	08006097 	.word	0x08006097
 8006064:	08006097 	.word	0x08006097
 8006068:	08006097 	.word	0x08006097
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3304      	adds	r3, #4
 8006070:	2101      	movs	r1, #1
 8006072:	4618      	mov	r0, r3
 8006074:	f000 fdb6 	bl	8006be4 <RCCEx_PLL2_Config>
 8006078:	4603      	mov	r3, r0
 800607a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800607c:	e00c      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3324      	adds	r3, #36	; 0x24
 8006082:	2101      	movs	r1, #1
 8006084:	4618      	mov	r0, r3
 8006086:	f000 fe5f 	bl	8006d48 <RCCEx_PLL3_Config>
 800608a:	4603      	mov	r3, r0
 800608c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800608e:	e003      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	75fb      	strb	r3, [r7, #23]
      break;
 8006094:	e000      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006096:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d110      	bne.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800609e:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a2:	f023 0207 	bic.w	r2, r3, #7
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060aa:	4902      	ldr	r1, [pc, #8]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	654b      	str	r3, [r1, #84]	; 0x54
 80060b0:	e008      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80060b2:	bf00      	nop
 80060b4:	58024400 	.word	0x58024400
 80060b8:	58024800 	.word	0x58024800
 80060bc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c0:	7dfb      	ldrb	r3, [r7, #23]
 80060c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d039      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d6:	2b05      	cmp	r3, #5
 80060d8:	d820      	bhi.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80060da:	a201      	add	r2, pc, #4	; (adr r2, 80060e0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80060dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e0:	08006123 	.word	0x08006123
 80060e4:	080060f9 	.word	0x080060f9
 80060e8:	0800610b 	.word	0x0800610b
 80060ec:	08006123 	.word	0x08006123
 80060f0:	08006123 	.word	0x08006123
 80060f4:	08006123 	.word	0x08006123
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3304      	adds	r3, #4
 80060fc:	2101      	movs	r1, #1
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fd70 	bl	8006be4 <RCCEx_PLL2_Config>
 8006104:	4603      	mov	r3, r0
 8006106:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006108:	e00c      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3324      	adds	r3, #36	; 0x24
 800610e:	2101      	movs	r1, #1
 8006110:	4618      	mov	r0, r3
 8006112:	f000 fe19 	bl	8006d48 <RCCEx_PLL3_Config>
 8006116:	4603      	mov	r3, r0
 8006118:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800611a:	e003      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	75fb      	strb	r3, [r7, #23]
      break;
 8006120:	e000      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006122:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006124:	7dfb      	ldrb	r3, [r7, #23]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10a      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800612a:	4bb7      	ldr	r3, [pc, #732]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800612c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612e:	f023 0207 	bic.w	r2, r3, #7
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006138:	49b3      	ldr	r1, [pc, #716]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800613a:	4313      	orrs	r3, r2
 800613c:	658b      	str	r3, [r1, #88]	; 0x58
 800613e:	e001      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006140:	7dfb      	ldrb	r3, [r7, #23]
 8006142:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	2b00      	cmp	r3, #0
 800614e:	d04b      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006156:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800615a:	d02e      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800615c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006160:	d828      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006166:	d02a      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616c:	d822      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800616e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006172:	d026      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006174:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006178:	d81c      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800617a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800617e:	d010      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006184:	d816      	bhi.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d01d      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800618a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800618e:	d111      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3304      	adds	r3, #4
 8006194:	2100      	movs	r1, #0
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fd24 	bl	8006be4 <RCCEx_PLL2_Config>
 800619c:	4603      	mov	r3, r0
 800619e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80061a0:	e012      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	3324      	adds	r3, #36	; 0x24
 80061a6:	2102      	movs	r1, #2
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fdcd 	bl	8006d48 <RCCEx_PLL3_Config>
 80061ae:	4603      	mov	r3, r0
 80061b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80061b2:	e009      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	75fb      	strb	r3, [r7, #23]
      break;
 80061b8:	e006      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80061ba:	bf00      	nop
 80061bc:	e004      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80061be:	bf00      	nop
 80061c0:	e002      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80061c2:	bf00      	nop
 80061c4:	e000      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80061c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061c8:	7dfb      	ldrb	r3, [r7, #23]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10a      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061ce:	4b8e      	ldr	r3, [pc, #568]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80061d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061dc:	498a      	ldr	r1, [pc, #552]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	654b      	str	r3, [r1, #84]	; 0x54
 80061e2:	e001      	b.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
 80061e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d04b      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061fa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061fe:	d02e      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006200:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006204:	d828      	bhi.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800620a:	d02a      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800620c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006210:	d822      	bhi.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006212:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006216:	d026      	beq.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006218:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800621c:	d81c      	bhi.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800621e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006222:	d010      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006228:	d816      	bhi.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d01d      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800622e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006232:	d111      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3304      	adds	r3, #4
 8006238:	2100      	movs	r1, #0
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fcd2 	bl	8006be4 <RCCEx_PLL2_Config>
 8006240:	4603      	mov	r3, r0
 8006242:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006244:	e012      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3324      	adds	r3, #36	; 0x24
 800624a:	2102      	movs	r1, #2
 800624c:	4618      	mov	r0, r3
 800624e:	f000 fd7b 	bl	8006d48 <RCCEx_PLL3_Config>
 8006252:	4603      	mov	r3, r0
 8006254:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006256:	e009      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	75fb      	strb	r3, [r7, #23]
      break;
 800625c:	e006      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800625e:	bf00      	nop
 8006260:	e004      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006262:	bf00      	nop
 8006264:	e002      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006266:	bf00      	nop
 8006268:	e000      	b.n	800626c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800626a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800626c:	7dfb      	ldrb	r3, [r7, #23]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10a      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006272:	4b65      	ldr	r3, [pc, #404]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006276:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006280:	4961      	ldr	r1, [pc, #388]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006282:	4313      	orrs	r3, r2
 8006284:	658b      	str	r3, [r1, #88]	; 0x58
 8006286:	e001      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006288:	7dfb      	ldrb	r3, [r7, #23]
 800628a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006294:	2b00      	cmp	r3, #0
 8006296:	d04b      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800629e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062a2:	d02e      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80062a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80062a8:	d828      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80062aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ae:	d02a      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80062b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062b4:	d822      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80062b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80062ba:	d026      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80062bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80062c0:	d81c      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80062c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062c6:	d010      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80062c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062cc:	d816      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d01d      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80062d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062d6:	d111      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3304      	adds	r3, #4
 80062dc:	2100      	movs	r1, #0
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fc80 	bl	8006be4 <RCCEx_PLL2_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80062e8:	e012      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3324      	adds	r3, #36	; 0x24
 80062ee:	2102      	movs	r1, #2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 fd29 	bl	8006d48 <RCCEx_PLL3_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80062fa:	e009      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006300:	e006      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006302:	bf00      	nop
 8006304:	e004      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006306:	bf00      	nop
 8006308:	e002      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800630a:	bf00      	nop
 800630c:	e000      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800630e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006310:	7dfb      	ldrb	r3, [r7, #23]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10a      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006316:	4b3c      	ldr	r3, [pc, #240]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006324:	4938      	ldr	r1, [pc, #224]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006326:	4313      	orrs	r3, r2
 8006328:	658b      	str	r3, [r1, #88]	; 0x58
 800632a:	e001      	b.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800632c:	7dfb      	ldrb	r3, [r7, #23]
 800632e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0308 	and.w	r3, r3, #8
 8006338:	2b00      	cmp	r3, #0
 800633a:	d01a      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006346:	d10a      	bne.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3324      	adds	r3, #36	; 0x24
 800634c:	2102      	movs	r1, #2
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fcfa 	bl	8006d48 <RCCEx_PLL3_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800635e:	4b2a      	ldr	r3, [pc, #168]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006362:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800636c:	4926      	ldr	r1, [pc, #152]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800636e:	4313      	orrs	r3, r2
 8006370:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0310 	and.w	r3, r3, #16
 800637a:	2b00      	cmp	r3, #0
 800637c:	d01a      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006388:	d10a      	bne.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	3324      	adds	r3, #36	; 0x24
 800638e:	2102      	movs	r1, #2
 8006390:	4618      	mov	r0, r3
 8006392:	f000 fcd9 	bl	8006d48 <RCCEx_PLL3_Config>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063a0:	4b19      	ldr	r3, [pc, #100]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80063a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ae:	4916      	ldr	r1, [pc, #88]	; (8006408 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80063b0:	4313      	orrs	r3, r2
 80063b2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d036      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063ca:	d01f      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80063cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063d0:	d817      	bhi.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80063d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063da:	d009      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80063dc:	e011      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3304      	adds	r3, #4
 80063e2:	2100      	movs	r1, #0
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 fbfd 	bl	8006be4 <RCCEx_PLL2_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80063ee:	e00e      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3324      	adds	r3, #36	; 0x24
 80063f4:	2102      	movs	r1, #2
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 fca6 	bl	8006d48 <RCCEx_PLL3_Config>
 80063fc:	4603      	mov	r3, r0
 80063fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006400:	e005      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	75fb      	strb	r3, [r7, #23]
      break;
 8006406:	e002      	b.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006408:	58024400 	.word	0x58024400
      break;
 800640c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800640e:	7dfb      	ldrb	r3, [r7, #23]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006414:	4b93      	ldr	r3, [pc, #588]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006418:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006422:	4990      	ldr	r1, [pc, #576]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006424:	4313      	orrs	r3, r2
 8006426:	658b      	str	r3, [r1, #88]	; 0x58
 8006428:	e001      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800642a:	7dfb      	ldrb	r3, [r7, #23]
 800642c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d033      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006440:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006444:	d01c      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006446:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800644a:	d816      	bhi.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800644c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006450:	d003      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006452:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006456:	d007      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006458:	e00f      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800645a:	4b82      	ldr	r3, [pc, #520]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800645c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645e:	4a81      	ldr	r2, [pc, #516]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006464:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006466:	e00c      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3324      	adds	r3, #36	; 0x24
 800646c:	2101      	movs	r1, #1
 800646e:	4618      	mov	r0, r3
 8006470:	f000 fc6a 	bl	8006d48 <RCCEx_PLL3_Config>
 8006474:	4603      	mov	r3, r0
 8006476:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006478:	e003      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	75fb      	strb	r3, [r7, #23]
      break;
 800647e:	e000      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006480:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006482:	7dfb      	ldrb	r3, [r7, #23]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006488:	4b76      	ldr	r3, [pc, #472]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800648a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006496:	4973      	ldr	r1, [pc, #460]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006498:	4313      	orrs	r3, r2
 800649a:	654b      	str	r3, [r1, #84]	; 0x54
 800649c:	e001      	b.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800649e:	7dfb      	ldrb	r3, [r7, #23]
 80064a0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d029      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80064b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ba:	d007      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80064bc:	e00f      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064be:	4b69      	ldr	r3, [pc, #420]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c2:	4a68      	ldr	r2, [pc, #416]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80064ca:	e00b      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3304      	adds	r3, #4
 80064d0:	2102      	movs	r1, #2
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fb86 	bl	8006be4 <RCCEx_PLL2_Config>
 80064d8:	4603      	mov	r3, r0
 80064da:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80064dc:	e002      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	75fb      	strb	r3, [r7, #23]
      break;
 80064e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d109      	bne.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80064ea:	4b5e      	ldr	r3, [pc, #376]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064f6:	495b      	ldr	r1, [pc, #364]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064fc:	e001      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fe:	7dfb      	ldrb	r3, [r7, #23]
 8006500:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3324      	adds	r3, #36	; 0x24
 8006512:	2102      	movs	r1, #2
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fc17 	bl	8006d48 <RCCEx_PLL3_Config>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d030      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006534:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006538:	d017      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800653a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800653e:	d811      	bhi.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006544:	d013      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800654a:	d80b      	bhi.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d010      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006554:	d106      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006556:	4b43      	ldr	r3, [pc, #268]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655a:	4a42      	ldr	r2, [pc, #264]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800655c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006560:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006562:	e007      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	75fb      	strb	r3, [r7, #23]
      break;
 8006568:	e004      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800656a:	bf00      	nop
 800656c:	e002      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800656e:	bf00      	nop
 8006570:	e000      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006572:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006574:	7dfb      	ldrb	r3, [r7, #23]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d109      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800657a:	4b3a      	ldr	r3, [pc, #232]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800657c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006586:	4937      	ldr	r1, [pc, #220]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006588:	4313      	orrs	r3, r2
 800658a:	654b      	str	r3, [r1, #84]	; 0x54
 800658c:	e001      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658e:	7dfb      	ldrb	r3, [r7, #23]
 8006590:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800659a:	2b00      	cmp	r3, #0
 800659c:	d008      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800659e:	4b31      	ldr	r3, [pc, #196]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065aa:	492e      	ldr	r1, [pc, #184]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d009      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80065bc:	4b29      	ldr	r3, [pc, #164]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80065ca:	4926      	ldr	r1, [pc, #152]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d008      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80065dc:	4b21      	ldr	r3, [pc, #132]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065e8:	491e      	ldr	r1, [pc, #120]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00d      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065fa:	4b1a      	ldr	r3, [pc, #104]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	4a19      	ldr	r2, [pc, #100]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006600:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006604:	6113      	str	r3, [r2, #16]
 8006606:	4b17      	ldr	r3, [pc, #92]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006608:	691a      	ldr	r2, [r3, #16]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006610:	4914      	ldr	r1, [pc, #80]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006612:	4313      	orrs	r3, r2
 8006614:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	da08      	bge.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800661e:	4b11      	ldr	r3, [pc, #68]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006622:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800662a:	490e      	ldr	r1, [pc, #56]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800662c:	4313      	orrs	r3, r2
 800662e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d009      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800663c:	4b09      	ldr	r3, [pc, #36]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800663e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006640:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800664a:	4906      	ldr	r1, [pc, #24]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800664c:	4313      	orrs	r3, r2
 800664e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006650:	7dbb      	ldrb	r3, [r7, #22]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	e000      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	58024400 	.word	0x58024400

08006668 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800666c:	f7ff f860 	bl	8005730 <HAL_RCC_GetHCLKFreq>
 8006670:	4602      	mov	r2, r0
 8006672:	4b06      	ldr	r3, [pc, #24]	; (800668c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	091b      	lsrs	r3, r3, #4
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	4904      	ldr	r1, [pc, #16]	; (8006690 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800667e:	5ccb      	ldrb	r3, [r1, r3]
 8006680:	f003 031f 	and.w	r3, r3, #31
 8006684:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006688:	4618      	mov	r0, r3
 800668a:	bd80      	pop	{r7, pc}
 800668c:	58024400 	.word	0x58024400
 8006690:	0800a660 	.word	0x0800a660

08006694 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006694:	b480      	push	{r7}
 8006696:	b089      	sub	sp, #36	; 0x24
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800669c:	4ba1      	ldr	r3, [pc, #644]	; (8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800669e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a0:	f003 0303 	and.w	r3, r3, #3
 80066a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80066a6:	4b9f      	ldr	r3, [pc, #636]	; (8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066aa:	0b1b      	lsrs	r3, r3, #12
 80066ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80066b2:	4b9c      	ldr	r3, [pc, #624]	; (8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b6:	091b      	lsrs	r3, r3, #4
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80066be:	4b99      	ldr	r3, [pc, #612]	; (8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c2:	08db      	lsrs	r3, r3, #3
 80066c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	fb02 f303 	mul.w	r3, r2, r3
 80066ce:	ee07 3a90 	vmov	s15, r3
 80066d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 8111 	beq.w	8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	f000 8083 	beq.w	80067f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	f200 80a1 	bhi.w	8006834 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d056      	beq.n	80067ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80066fe:	e099      	b.n	8006834 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006700:	4b88      	ldr	r3, [pc, #544]	; (8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0320 	and.w	r3, r3, #32
 8006708:	2b00      	cmp	r3, #0
 800670a:	d02d      	beq.n	8006768 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800670c:	4b85      	ldr	r3, [pc, #532]	; (8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	08db      	lsrs	r3, r3, #3
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	4a84      	ldr	r2, [pc, #528]	; (8006928 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006718:	fa22 f303 	lsr.w	r3, r2, r3
 800671c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	ee07 3a90 	vmov	s15, r3
 8006724:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	ee07 3a90 	vmov	s15, r3
 800672e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006736:	4b7b      	ldr	r3, [pc, #492]	; (8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800673e:	ee07 3a90 	vmov	s15, r3
 8006742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006746:	ed97 6a03 	vldr	s12, [r7, #12]
 800674a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800692c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800674e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800675a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800675e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006762:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006766:	e087      	b.n	8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006772:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006930 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800677a:	4b6a      	ldr	r3, [pc, #424]	; (8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800677c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006782:	ee07 3a90 	vmov	s15, r3
 8006786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800678a:	ed97 6a03 	vldr	s12, [r7, #12]
 800678e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800692c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800679a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800679e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067aa:	e065      	b.n	8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	ee07 3a90 	vmov	s15, r3
 80067b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80067ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067be:	4b59      	ldr	r3, [pc, #356]	; (8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c6:	ee07 3a90 	vmov	s15, r3
 80067ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80067d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800692c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067ee:	e043      	b.n	8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	ee07 3a90 	vmov	s15, r3
 80067f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006938 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80067fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006802:	4b48      	ldr	r3, [pc, #288]	; (8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006812:	ed97 6a03 	vldr	s12, [r7, #12]
 8006816:	eddf 5a45 	vldr	s11, [pc, #276]	; 800692c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800681a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800681e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800682a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800682e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006832:	e021      	b.n	8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	ee07 3a90 	vmov	s15, r3
 800683a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800683e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006934 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006846:	4b37      	ldr	r3, [pc, #220]	; (8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800684e:	ee07 3a90 	vmov	s15, r3
 8006852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006856:	ed97 6a03 	vldr	s12, [r7, #12]
 800685a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800692c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800685e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800686a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800686e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006872:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006876:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006878:	4b2a      	ldr	r3, [pc, #168]	; (8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	0a5b      	lsrs	r3, r3, #9
 800687e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006882:	ee07 3a90 	vmov	s15, r3
 8006886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800688a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800688e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006892:	edd7 6a07 	vldr	s13, [r7, #28]
 8006896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800689a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800689e:	ee17 2a90 	vmov	r2, s15
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80068a6:	4b1f      	ldr	r3, [pc, #124]	; (8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068aa:	0c1b      	lsrs	r3, r3, #16
 80068ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b0:	ee07 3a90 	vmov	s15, r3
 80068b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80068c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068cc:	ee17 2a90 	vmov	r2, s15
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80068d4:	4b13      	ldr	r3, [pc, #76]	; (8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d8:	0e1b      	lsrs	r3, r3, #24
 80068da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068de:	ee07 3a90 	vmov	s15, r3
 80068e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80068f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068fa:	ee17 2a90 	vmov	r2, s15
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006902:	e008      	b.n	8006916 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	609a      	str	r2, [r3, #8]
}
 8006916:	bf00      	nop
 8006918:	3724      	adds	r7, #36	; 0x24
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	58024400 	.word	0x58024400
 8006928:	03d09000 	.word	0x03d09000
 800692c:	46000000 	.word	0x46000000
 8006930:	4c742400 	.word	0x4c742400
 8006934:	4a742400 	.word	0x4a742400
 8006938:	4c371b00 	.word	0x4c371b00

0800693c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800693c:	b480      	push	{r7}
 800693e:	b089      	sub	sp, #36	; 0x24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006944:	4ba1      	ldr	r3, [pc, #644]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006948:	f003 0303 	and.w	r3, r3, #3
 800694c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800694e:	4b9f      	ldr	r3, [pc, #636]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006952:	0d1b      	lsrs	r3, r3, #20
 8006954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006958:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800695a:	4b9c      	ldr	r3, [pc, #624]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800695c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695e:	0a1b      	lsrs	r3, r3, #8
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006966:	4b99      	ldr	r3, [pc, #612]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696a:	08db      	lsrs	r3, r3, #3
 800696c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	fb02 f303 	mul.w	r3, r2, r3
 8006976:	ee07 3a90 	vmov	s15, r3
 800697a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 8111 	beq.w	8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	2b02      	cmp	r3, #2
 800698e:	f000 8083 	beq.w	8006a98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	2b02      	cmp	r3, #2
 8006996:	f200 80a1 	bhi.w	8006adc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d056      	beq.n	8006a54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80069a6:	e099      	b.n	8006adc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069a8:	4b88      	ldr	r3, [pc, #544]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d02d      	beq.n	8006a10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069b4:	4b85      	ldr	r3, [pc, #532]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	08db      	lsrs	r3, r3, #3
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	4a84      	ldr	r2, [pc, #528]	; (8006bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80069c0:	fa22 f303 	lsr.w	r3, r2, r3
 80069c4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	ee07 3a90 	vmov	s15, r3
 80069cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069de:	4b7b      	ldr	r3, [pc, #492]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80069f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006a0e:	e087      	b.n	8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	ee07 3a90 	vmov	s15, r3
 8006a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a22:	4b6a      	ldr	r3, [pc, #424]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2a:	ee07 3a90 	vmov	s15, r3
 8006a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a36:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a52:	e065      	b.n	8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a66:	4b59      	ldr	r3, [pc, #356]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a7a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006a96:	e043      	b.n	8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006be0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aaa:	4b48      	ldr	r3, [pc, #288]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006abe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ada:	e021      	b.n	8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006bdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aee:	4b37      	ldr	r3, [pc, #220]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006b20:	4b2a      	ldr	r3, [pc, #168]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	0a5b      	lsrs	r3, r3, #9
 8006b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b46:	ee17 2a90 	vmov	r2, s15
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006b4e:	4b1f      	ldr	r3, [pc, #124]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	0c1b      	lsrs	r3, r3, #16
 8006b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b58:	ee07 3a90 	vmov	s15, r3
 8006b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b74:	ee17 2a90 	vmov	r2, s15
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006b7c:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b80:	0e1b      	lsrs	r3, r3, #24
 8006b82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ba2:	ee17 2a90 	vmov	r2, s15
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006baa:	e008      	b.n	8006bbe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	609a      	str	r2, [r3, #8]
}
 8006bbe:	bf00      	nop
 8006bc0:	3724      	adds	r7, #36	; 0x24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	58024400 	.word	0x58024400
 8006bd0:	03d09000 	.word	0x03d09000
 8006bd4:	46000000 	.word	0x46000000
 8006bd8:	4c742400 	.word	0x4c742400
 8006bdc:	4a742400 	.word	0x4a742400
 8006be0:	4c371b00 	.word	0x4c371b00

08006be4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bf2:	4b53      	ldr	r3, [pc, #332]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf6:	f003 0303 	and.w	r3, r3, #3
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d101      	bne.n	8006c02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e099      	b.n	8006d36 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006c02:	4b4f      	ldr	r3, [pc, #316]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a4e      	ldr	r2, [pc, #312]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c0e:	f7fb f8e5 	bl	8001ddc <HAL_GetTick>
 8006c12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c14:	e008      	b.n	8006c28 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006c16:	f7fb f8e1 	bl	8001ddc <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d901      	bls.n	8006c28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e086      	b.n	8006d36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c28:	4b45      	ldr	r3, [pc, #276]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1f0      	bne.n	8006c16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006c34:	4b42      	ldr	r3, [pc, #264]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	031b      	lsls	r3, r3, #12
 8006c42:	493f      	ldr	r1, [pc, #252]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	628b      	str	r3, [r1, #40]	; 0x28
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	025b      	lsls	r3, r3, #9
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	041b      	lsls	r3, r3, #16
 8006c66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	061b      	lsls	r3, r3, #24
 8006c74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c78:	4931      	ldr	r1, [pc, #196]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c7e:	4b30      	ldr	r3, [pc, #192]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	492d      	ldr	r1, [pc, #180]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006c90:	4b2b      	ldr	r3, [pc, #172]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c94:	f023 0220 	bic.w	r2, r3, #32
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	4928      	ldr	r1, [pc, #160]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006ca2:	4b27      	ldr	r3, [pc, #156]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca6:	4a26      	ldr	r2, [pc, #152]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006ca8:	f023 0310 	bic.w	r3, r3, #16
 8006cac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006cae:	4b24      	ldr	r3, [pc, #144]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cb2:	4b24      	ldr	r3, [pc, #144]	; (8006d44 <RCCEx_PLL2_Config+0x160>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	69d2      	ldr	r2, [r2, #28]
 8006cba:	00d2      	lsls	r2, r2, #3
 8006cbc:	4920      	ldr	r1, [pc, #128]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006cc2:	4b1f      	ldr	r3, [pc, #124]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc6:	4a1e      	ldr	r2, [pc, #120]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cc8:	f043 0310 	orr.w	r3, r3, #16
 8006ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d106      	bne.n	8006ce2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006cd4:	4b1a      	ldr	r3, [pc, #104]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd8:	4a19      	ldr	r2, [pc, #100]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ce0:	e00f      	b.n	8006d02 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d106      	bne.n	8006cf6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006ce8:	4b15      	ldr	r3, [pc, #84]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cec:	4a14      	ldr	r2, [pc, #80]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006cf4:	e005      	b.n	8006d02 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006cf6:	4b12      	ldr	r3, [pc, #72]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfa:	4a11      	ldr	r2, [pc, #68]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006cfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006d02:	4b0f      	ldr	r3, [pc, #60]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a0e      	ldr	r2, [pc, #56]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006d08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d0e:	f7fb f865 	bl	8001ddc <HAL_GetTick>
 8006d12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d14:	e008      	b.n	8006d28 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006d16:	f7fb f861 	bl	8001ddc <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d901      	bls.n	8006d28 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e006      	b.n	8006d36 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d28:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <RCCEx_PLL2_Config+0x15c>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d0f0      	beq.n	8006d16 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	58024400 	.word	0x58024400
 8006d44:	ffff0007 	.word	0xffff0007

08006d48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d56:	4b53      	ldr	r3, [pc, #332]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5a:	f003 0303 	and.w	r3, r3, #3
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d101      	bne.n	8006d66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e099      	b.n	8006e9a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d66:	4b4f      	ldr	r3, [pc, #316]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a4e      	ldr	r2, [pc, #312]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d72:	f7fb f833 	bl	8001ddc <HAL_GetTick>
 8006d76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d78:	e008      	b.n	8006d8c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006d7a:	f7fb f82f 	bl	8001ddc <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d901      	bls.n	8006d8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e086      	b.n	8006e9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d8c:	4b45      	ldr	r3, [pc, #276]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1f0      	bne.n	8006d7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d98:	4b42      	ldr	r3, [pc, #264]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	051b      	lsls	r3, r3, #20
 8006da6:	493f      	ldr	r1, [pc, #252]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	628b      	str	r3, [r1, #40]	; 0x28
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	3b01      	subs	r3, #1
 8006db2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	025b      	lsls	r3, r3, #9
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	041b      	lsls	r3, r3, #16
 8006dca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	061b      	lsls	r3, r3, #24
 8006dd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ddc:	4931      	ldr	r1, [pc, #196]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006de2:	4b30      	ldr	r3, [pc, #192]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	492d      	ldr	r1, [pc, #180]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006df4:	4b2b      	ldr	r3, [pc, #172]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	4928      	ldr	r1, [pc, #160]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006e06:	4b27      	ldr	r3, [pc, #156]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0a:	4a26      	ldr	r2, [pc, #152]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006e12:	4b24      	ldr	r3, [pc, #144]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e16:	4b24      	ldr	r3, [pc, #144]	; (8006ea8 <RCCEx_PLL3_Config+0x160>)
 8006e18:	4013      	ands	r3, r2
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	69d2      	ldr	r2, [r2, #28]
 8006e1e:	00d2      	lsls	r2, r2, #3
 8006e20:	4920      	ldr	r1, [pc, #128]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006e26:	4b1f      	ldr	r3, [pc, #124]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2a:	4a1e      	ldr	r2, [pc, #120]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d106      	bne.n	8006e46 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006e38:	4b1a      	ldr	r3, [pc, #104]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	4a19      	ldr	r2, [pc, #100]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e44:	e00f      	b.n	8006e66 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d106      	bne.n	8006e5a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e4c:	4b15      	ldr	r3, [pc, #84]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	4a14      	ldr	r2, [pc, #80]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e52:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006e58:	e005      	b.n	8006e66 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e5a:	4b12      	ldr	r3, [pc, #72]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	4a11      	ldr	r2, [pc, #68]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006e66:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a0e      	ldr	r2, [pc, #56]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e72:	f7fa ffb3 	bl	8001ddc <HAL_GetTick>
 8006e76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e78:	e008      	b.n	8006e8c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006e7a:	f7fa ffaf 	bl	8001ddc <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d901      	bls.n	8006e8c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e006      	b.n	8006e9a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e8c:	4b05      	ldr	r3, [pc, #20]	; (8006ea4 <RCCEx_PLL3_Config+0x15c>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0f0      	beq.n	8006e7a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	58024400 	.word	0x58024400
 8006ea8:	ffff0007 	.word	0xffff0007

08006eac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e0eb      	b.n	800709a <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a75      	ldr	r2, [pc, #468]	; (80070a4 <HAL_SPI_Init+0x1f8>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00f      	beq.n	8006ef2 <HAL_SPI_Init+0x46>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a74      	ldr	r2, [pc, #464]	; (80070a8 <HAL_SPI_Init+0x1fc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d00a      	beq.n	8006ef2 <HAL_SPI_Init+0x46>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a72      	ldr	r2, [pc, #456]	; (80070ac <HAL_SPI_Init+0x200>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d005      	beq.n	8006ef2 <HAL_SPI_Init+0x46>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	2b0f      	cmp	r3, #15
 8006eec:	d901      	bls.n	8006ef2 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e0d3      	b.n	800709a <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f8dc 	bl	80070b0 <SPI_GetPacketSize>
 8006ef8:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a69      	ldr	r2, [pc, #420]	; (80070a4 <HAL_SPI_Init+0x1f8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d00c      	beq.n	8006f1e <HAL_SPI_Init+0x72>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a67      	ldr	r2, [pc, #412]	; (80070a8 <HAL_SPI_Init+0x1fc>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d007      	beq.n	8006f1e <HAL_SPI_Init+0x72>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a66      	ldr	r2, [pc, #408]	; (80070ac <HAL_SPI_Init+0x200>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d002      	beq.n	8006f1e <HAL_SPI_Init+0x72>
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b08      	cmp	r3, #8
 8006f1c:	d811      	bhi.n	8006f42 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006f22:	4a60      	ldr	r2, [pc, #384]	; (80070a4 <HAL_SPI_Init+0x1f8>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d009      	beq.n	8006f3c <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a5e      	ldr	r2, [pc, #376]	; (80070a8 <HAL_SPI_Init+0x1fc>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d004      	beq.n	8006f3c <HAL_SPI_Init+0x90>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a5d      	ldr	r2, [pc, #372]	; (80070ac <HAL_SPI_Init+0x200>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d104      	bne.n	8006f46 <HAL_SPI_Init+0x9a>
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	2b10      	cmp	r3, #16
 8006f40:	d901      	bls.n	8006f46 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e0a9      	b.n	800709a <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d106      	bne.n	8006f60 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7fa f9e6 	bl	800132c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0201 	bic.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f80:	d119      	bne.n	8006fb6 <HAL_SPI_Init+0x10a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f8a:	d103      	bne.n	8006f94 <HAL_SPI_Init+0xe8>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d008      	beq.n	8006fa6 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10c      	bne.n	8006fb6 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fa4:	d107      	bne.n	8006fb6 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fb4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	69da      	ldr	r2, [r3, #28]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc8:	ea42 0103 	orr.w	r1, r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	431a      	orrs	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	431a      	orrs	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	431a      	orrs	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	431a      	orrs	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	431a      	orrs	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007016:	ea42 0103 	orr.w	r1, r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d113      	bne.n	8007056 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007040:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007054:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0201 	bic.w	r2, r2, #1
 8007064:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00a      	beq.n	8007088 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	430a      	orrs	r2, r1
 8007086:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	40013000 	.word	0x40013000
 80070a8:	40003800 	.word	0x40003800
 80070ac:	40003c00 	.word	0x40003c00

080070b0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070bc:	095b      	lsrs	r3, r3, #5
 80070be:	3301      	adds	r3, #1
 80070c0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	3301      	adds	r3, #1
 80070c8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	3307      	adds	r3, #7
 80070ce:	08db      	lsrs	r3, r3, #3
 80070d0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	fb02 f303 	mul.w	r3, r2, r3
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b082      	sub	sp, #8
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e049      	b.n	800718c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b00      	cmp	r3, #0
 8007102:	d106      	bne.n	8007112 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7fa f973 	bl	80013f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2202      	movs	r2, #2
 8007116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3304      	adds	r3, #4
 8007122:	4619      	mov	r1, r3
 8007124:	4610      	mov	r0, r2
 8007126:	f000 fbe1 	bl	80078ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	3708      	adds	r7, #8
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e049      	b.n	800723a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f841 	bl	8007242 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	3304      	adds	r3, #4
 80071d0:	4619      	mov	r1, r3
 80071d2:	4610      	mov	r0, r2
 80071d4:	f000 fb8a 	bl	80078ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b02      	cmp	r3, #2
 800726a:	d122      	bne.n	80072b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b02      	cmp	r3, #2
 8007278:	d11b      	bne.n	80072b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f06f 0202 	mvn.w	r2, #2
 8007282:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	f003 0303 	and.w	r3, r3, #3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fb09 	bl	80078b0 <HAL_TIM_IC_CaptureCallback>
 800729e:	e005      	b.n	80072ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fafb 	bl	800789c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fb0c 	bl	80078c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	f003 0304 	and.w	r3, r3, #4
 80072bc:	2b04      	cmp	r3, #4
 80072be:	d122      	bne.n	8007306 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	f003 0304 	and.w	r3, r3, #4
 80072ca:	2b04      	cmp	r3, #4
 80072cc:	d11b      	bne.n	8007306 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f06f 0204 	mvn.w	r2, #4
 80072d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2202      	movs	r2, #2
 80072dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fadf 	bl	80078b0 <HAL_TIM_IC_CaptureCallback>
 80072f2:	e005      	b.n	8007300 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fad1 	bl	800789c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fae2 	bl	80078c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b08      	cmp	r3, #8
 8007312:	d122      	bne.n	800735a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f003 0308 	and.w	r3, r3, #8
 800731e:	2b08      	cmp	r3, #8
 8007320:	d11b      	bne.n	800735a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f06f 0208 	mvn.w	r2, #8
 800732a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2204      	movs	r2, #4
 8007330:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69db      	ldr	r3, [r3, #28]
 8007338:	f003 0303 	and.w	r3, r3, #3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fab5 	bl	80078b0 <HAL_TIM_IC_CaptureCallback>
 8007346:	e005      	b.n	8007354 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 faa7 	bl	800789c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fab8 	bl	80078c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	f003 0310 	and.w	r3, r3, #16
 8007364:	2b10      	cmp	r3, #16
 8007366:	d122      	bne.n	80073ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	f003 0310 	and.w	r3, r3, #16
 8007372:	2b10      	cmp	r3, #16
 8007374:	d11b      	bne.n	80073ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f06f 0210 	mvn.w	r2, #16
 800737e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2208      	movs	r2, #8
 8007384:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fa8b 	bl	80078b0 <HAL_TIM_IC_CaptureCallback>
 800739a:	e005      	b.n	80073a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fa7d 	bl	800789c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fa8e 	bl	80078c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d10e      	bne.n	80073da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d107      	bne.n	80073da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f06f 0201 	mvn.w	r2, #1
 80073d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7f9 ff80 	bl	80012da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	691b      	ldr	r3, [r3, #16]
 80073e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073e4:	2b80      	cmp	r3, #128	; 0x80
 80073e6:	d10e      	bne.n	8007406 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f2:	2b80      	cmp	r3, #128	; 0x80
 80073f4:	d107      	bne.n	8007406 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 ff89 	bl	8008318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007410:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007414:	d10e      	bne.n	8007434 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007420:	2b80      	cmp	r3, #128	; 0x80
 8007422:	d107      	bne.n	8007434 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800742c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 ff7c 	bl	800832c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743e:	2b40      	cmp	r3, #64	; 0x40
 8007440:	d10e      	bne.n	8007460 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800744c:	2b40      	cmp	r3, #64	; 0x40
 800744e:	d107      	bne.n	8007460 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fa3c 	bl	80078d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b20      	cmp	r3, #32
 800746c:	d10e      	bne.n	800748c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f003 0320 	and.w	r3, r3, #32
 8007478:	2b20      	cmp	r3, #32
 800747a:	d107      	bne.n	800748c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f06f 0220 	mvn.w	r2, #32
 8007484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 ff3c 	bl	8008304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d101      	bne.n	80074ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80074aa:	2302      	movs	r3, #2
 80074ac:	e0fd      	b.n	80076aa <HAL_TIM_PWM_ConfigChannel+0x216>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2201      	movs	r2, #1
 80074b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b14      	cmp	r3, #20
 80074ba:	f200 80f0 	bhi.w	800769e <HAL_TIM_PWM_ConfigChannel+0x20a>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	08007519 	.word	0x08007519
 80074c8:	0800769f 	.word	0x0800769f
 80074cc:	0800769f 	.word	0x0800769f
 80074d0:	0800769f 	.word	0x0800769f
 80074d4:	08007559 	.word	0x08007559
 80074d8:	0800769f 	.word	0x0800769f
 80074dc:	0800769f 	.word	0x0800769f
 80074e0:	0800769f 	.word	0x0800769f
 80074e4:	0800759b 	.word	0x0800759b
 80074e8:	0800769f 	.word	0x0800769f
 80074ec:	0800769f 	.word	0x0800769f
 80074f0:	0800769f 	.word	0x0800769f
 80074f4:	080075db 	.word	0x080075db
 80074f8:	0800769f 	.word	0x0800769f
 80074fc:	0800769f 	.word	0x0800769f
 8007500:	0800769f 	.word	0x0800769f
 8007504:	0800761d 	.word	0x0800761d
 8007508:	0800769f 	.word	0x0800769f
 800750c:	0800769f 	.word	0x0800769f
 8007510:	0800769f 	.word	0x0800769f
 8007514:	0800765d 	.word	0x0800765d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	4618      	mov	r0, r3
 8007520:	f000 fa7e 	bl	8007a20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	699a      	ldr	r2, [r3, #24]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0208 	orr.w	r2, r2, #8
 8007532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	699a      	ldr	r2, [r3, #24]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f022 0204 	bic.w	r2, r2, #4
 8007542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	6999      	ldr	r1, [r3, #24]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	691a      	ldr	r2, [r3, #16]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	619a      	str	r2, [r3, #24]
      break;
 8007556:	e0a3      	b.n	80076a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68b9      	ldr	r1, [r7, #8]
 800755e:	4618      	mov	r0, r3
 8007560:	f000 faee 	bl	8007b40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	699a      	ldr	r2, [r3, #24]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	699a      	ldr	r2, [r3, #24]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6999      	ldr	r1, [r3, #24]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	021a      	lsls	r2, r3, #8
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	430a      	orrs	r2, r1
 8007596:	619a      	str	r2, [r3, #24]
      break;
 8007598:	e082      	b.n	80076a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68b9      	ldr	r1, [r7, #8]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 fb57 	bl	8007c54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	69da      	ldr	r2, [r3, #28]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f042 0208 	orr.w	r2, r2, #8
 80075b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	69da      	ldr	r2, [r3, #28]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0204 	bic.w	r2, r2, #4
 80075c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69d9      	ldr	r1, [r3, #28]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	691a      	ldr	r2, [r3, #16]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	430a      	orrs	r2, r1
 80075d6:	61da      	str	r2, [r3, #28]
      break;
 80075d8:	e062      	b.n	80076a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68b9      	ldr	r1, [r7, #8]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f000 fbbd 	bl	8007d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69da      	ldr	r2, [r3, #28]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	69da      	ldr	r2, [r3, #28]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	69d9      	ldr	r1, [r3, #28]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	021a      	lsls	r2, r3, #8
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	61da      	str	r2, [r3, #28]
      break;
 800761a:	e041      	b.n	80076a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68b9      	ldr	r1, [r7, #8]
 8007622:	4618      	mov	r0, r3
 8007624:	f000 fc04 	bl	8007e30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0208 	orr.w	r2, r2, #8
 8007636:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f022 0204 	bic.w	r2, r2, #4
 8007646:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	691a      	ldr	r2, [r3, #16]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800765a:	e021      	b.n	80076a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68b9      	ldr	r1, [r7, #8]
 8007662:	4618      	mov	r0, r3
 8007664:	f000 fc46 	bl	8007ef4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007676:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007686:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	021a      	lsls	r2, r3, #8
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800769c:	e000      	b.n	80076a0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800769e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop

080076b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d101      	bne.n	80076cc <HAL_TIM_ConfigClockSource+0x18>
 80076c8:	2302      	movs	r3, #2
 80076ca:	e0db      	b.n	8007884 <HAL_TIM_ConfigClockSource+0x1d0>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	4b69      	ldr	r3, [pc, #420]	; (800788c <HAL_TIM_ConfigClockSource+0x1d8>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a63      	ldr	r2, [pc, #396]	; (8007890 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007702:	4293      	cmp	r3, r2
 8007704:	f000 80a9 	beq.w	800785a <HAL_TIM_ConfigClockSource+0x1a6>
 8007708:	4a61      	ldr	r2, [pc, #388]	; (8007890 <HAL_TIM_ConfigClockSource+0x1dc>)
 800770a:	4293      	cmp	r3, r2
 800770c:	f200 80ae 	bhi.w	800786c <HAL_TIM_ConfigClockSource+0x1b8>
 8007710:	4a60      	ldr	r2, [pc, #384]	; (8007894 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	f000 80a1 	beq.w	800785a <HAL_TIM_ConfigClockSource+0x1a6>
 8007718:	4a5e      	ldr	r2, [pc, #376]	; (8007894 <HAL_TIM_ConfigClockSource+0x1e0>)
 800771a:	4293      	cmp	r3, r2
 800771c:	f200 80a6 	bhi.w	800786c <HAL_TIM_ConfigClockSource+0x1b8>
 8007720:	4a5d      	ldr	r2, [pc, #372]	; (8007898 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007722:	4293      	cmp	r3, r2
 8007724:	f000 8099 	beq.w	800785a <HAL_TIM_ConfigClockSource+0x1a6>
 8007728:	4a5b      	ldr	r2, [pc, #364]	; (8007898 <HAL_TIM_ConfigClockSource+0x1e4>)
 800772a:	4293      	cmp	r3, r2
 800772c:	f200 809e 	bhi.w	800786c <HAL_TIM_ConfigClockSource+0x1b8>
 8007730:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007734:	f000 8091 	beq.w	800785a <HAL_TIM_ConfigClockSource+0x1a6>
 8007738:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800773c:	f200 8096 	bhi.w	800786c <HAL_TIM_ConfigClockSource+0x1b8>
 8007740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007744:	f000 8089 	beq.w	800785a <HAL_TIM_ConfigClockSource+0x1a6>
 8007748:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800774c:	f200 808e 	bhi.w	800786c <HAL_TIM_ConfigClockSource+0x1b8>
 8007750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007754:	d03e      	beq.n	80077d4 <HAL_TIM_ConfigClockSource+0x120>
 8007756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800775a:	f200 8087 	bhi.w	800786c <HAL_TIM_ConfigClockSource+0x1b8>
 800775e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007762:	f000 8085 	beq.w	8007870 <HAL_TIM_ConfigClockSource+0x1bc>
 8007766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800776a:	d87f      	bhi.n	800786c <HAL_TIM_ConfigClockSource+0x1b8>
 800776c:	2b70      	cmp	r3, #112	; 0x70
 800776e:	d01a      	beq.n	80077a6 <HAL_TIM_ConfigClockSource+0xf2>
 8007770:	2b70      	cmp	r3, #112	; 0x70
 8007772:	d87b      	bhi.n	800786c <HAL_TIM_ConfigClockSource+0x1b8>
 8007774:	2b60      	cmp	r3, #96	; 0x60
 8007776:	d050      	beq.n	800781a <HAL_TIM_ConfigClockSource+0x166>
 8007778:	2b60      	cmp	r3, #96	; 0x60
 800777a:	d877      	bhi.n	800786c <HAL_TIM_ConfigClockSource+0x1b8>
 800777c:	2b50      	cmp	r3, #80	; 0x50
 800777e:	d03c      	beq.n	80077fa <HAL_TIM_ConfigClockSource+0x146>
 8007780:	2b50      	cmp	r3, #80	; 0x50
 8007782:	d873      	bhi.n	800786c <HAL_TIM_ConfigClockSource+0x1b8>
 8007784:	2b40      	cmp	r3, #64	; 0x40
 8007786:	d058      	beq.n	800783a <HAL_TIM_ConfigClockSource+0x186>
 8007788:	2b40      	cmp	r3, #64	; 0x40
 800778a:	d86f      	bhi.n	800786c <HAL_TIM_ConfigClockSource+0x1b8>
 800778c:	2b30      	cmp	r3, #48	; 0x30
 800778e:	d064      	beq.n	800785a <HAL_TIM_ConfigClockSource+0x1a6>
 8007790:	2b30      	cmp	r3, #48	; 0x30
 8007792:	d86b      	bhi.n	800786c <HAL_TIM_ConfigClockSource+0x1b8>
 8007794:	2b20      	cmp	r3, #32
 8007796:	d060      	beq.n	800785a <HAL_TIM_ConfigClockSource+0x1a6>
 8007798:	2b20      	cmp	r3, #32
 800779a:	d867      	bhi.n	800786c <HAL_TIM_ConfigClockSource+0x1b8>
 800779c:	2b00      	cmp	r3, #0
 800779e:	d05c      	beq.n	800785a <HAL_TIM_ConfigClockSource+0x1a6>
 80077a0:	2b10      	cmp	r3, #16
 80077a2:	d05a      	beq.n	800785a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80077a4:	e062      	b.n	800786c <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	6899      	ldr	r1, [r3, #8]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685a      	ldr	r2, [r3, #4]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	f000 fc7f 	bl	80080b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	609a      	str	r2, [r3, #8]
      break;
 80077d2:	e04e      	b.n	8007872 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	6899      	ldr	r1, [r3, #8]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f000 fc68 	bl	80080b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077f6:	609a      	str	r2, [r3, #8]
      break;
 80077f8:	e03b      	b.n	8007872 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	6859      	ldr	r1, [r3, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	461a      	mov	r2, r3
 8007808:	f000 fbd8 	bl	8007fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2150      	movs	r1, #80	; 0x50
 8007812:	4618      	mov	r0, r3
 8007814:	f000 fc32 	bl	800807c <TIM_ITRx_SetConfig>
      break;
 8007818:	e02b      	b.n	8007872 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6818      	ldr	r0, [r3, #0]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	6859      	ldr	r1, [r3, #4]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	461a      	mov	r2, r3
 8007828:	f000 fbf7 	bl	800801a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2160      	movs	r1, #96	; 0x60
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fc22 	bl	800807c <TIM_ITRx_SetConfig>
      break;
 8007838:	e01b      	b.n	8007872 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6818      	ldr	r0, [r3, #0]
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	6859      	ldr	r1, [r3, #4]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	461a      	mov	r2, r3
 8007848:	f000 fbb8 	bl	8007fbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2140      	movs	r1, #64	; 0x40
 8007852:	4618      	mov	r0, r3
 8007854:	f000 fc12 	bl	800807c <TIM_ITRx_SetConfig>
      break;
 8007858:	e00b      	b.n	8007872 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4619      	mov	r1, r3
 8007864:	4610      	mov	r0, r2
 8007866:	f000 fc09 	bl	800807c <TIM_ITRx_SetConfig>
        break;
 800786a:	e002      	b.n	8007872 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 800786c:	bf00      	nop
 800786e:	e000      	b.n	8007872 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8007870:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	ffceff88 	.word	0xffceff88
 8007890:	00100040 	.word	0x00100040
 8007894:	00100030 	.word	0x00100030
 8007898:	00100020 	.word	0x00100020

0800789c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a40      	ldr	r2, [pc, #256]	; (8007a00 <TIM_Base_SetConfig+0x114>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d013      	beq.n	800792c <TIM_Base_SetConfig+0x40>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800790a:	d00f      	beq.n	800792c <TIM_Base_SetConfig+0x40>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a3d      	ldr	r2, [pc, #244]	; (8007a04 <TIM_Base_SetConfig+0x118>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d00b      	beq.n	800792c <TIM_Base_SetConfig+0x40>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a3c      	ldr	r2, [pc, #240]	; (8007a08 <TIM_Base_SetConfig+0x11c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d007      	beq.n	800792c <TIM_Base_SetConfig+0x40>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a3b      	ldr	r2, [pc, #236]	; (8007a0c <TIM_Base_SetConfig+0x120>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d003      	beq.n	800792c <TIM_Base_SetConfig+0x40>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a3a      	ldr	r2, [pc, #232]	; (8007a10 <TIM_Base_SetConfig+0x124>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d108      	bne.n	800793e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007932:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	4313      	orrs	r3, r2
 800793c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a2f      	ldr	r2, [pc, #188]	; (8007a00 <TIM_Base_SetConfig+0x114>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d01f      	beq.n	8007986 <TIM_Base_SetConfig+0x9a>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800794c:	d01b      	beq.n	8007986 <TIM_Base_SetConfig+0x9a>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a2c      	ldr	r2, [pc, #176]	; (8007a04 <TIM_Base_SetConfig+0x118>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d017      	beq.n	8007986 <TIM_Base_SetConfig+0x9a>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a2b      	ldr	r2, [pc, #172]	; (8007a08 <TIM_Base_SetConfig+0x11c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d013      	beq.n	8007986 <TIM_Base_SetConfig+0x9a>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a2a      	ldr	r2, [pc, #168]	; (8007a0c <TIM_Base_SetConfig+0x120>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d00f      	beq.n	8007986 <TIM_Base_SetConfig+0x9a>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a29      	ldr	r2, [pc, #164]	; (8007a10 <TIM_Base_SetConfig+0x124>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d00b      	beq.n	8007986 <TIM_Base_SetConfig+0x9a>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a28      	ldr	r2, [pc, #160]	; (8007a14 <TIM_Base_SetConfig+0x128>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d007      	beq.n	8007986 <TIM_Base_SetConfig+0x9a>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a27      	ldr	r2, [pc, #156]	; (8007a18 <TIM_Base_SetConfig+0x12c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d003      	beq.n	8007986 <TIM_Base_SetConfig+0x9a>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a26      	ldr	r2, [pc, #152]	; (8007a1c <TIM_Base_SetConfig+0x130>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d108      	bne.n	8007998 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800798c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	4313      	orrs	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a10      	ldr	r2, [pc, #64]	; (8007a00 <TIM_Base_SetConfig+0x114>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d00f      	beq.n	80079e4 <TIM_Base_SetConfig+0xf8>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a12      	ldr	r2, [pc, #72]	; (8007a10 <TIM_Base_SetConfig+0x124>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d00b      	beq.n	80079e4 <TIM_Base_SetConfig+0xf8>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a11      	ldr	r2, [pc, #68]	; (8007a14 <TIM_Base_SetConfig+0x128>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d007      	beq.n	80079e4 <TIM_Base_SetConfig+0xf8>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a10      	ldr	r2, [pc, #64]	; (8007a18 <TIM_Base_SetConfig+0x12c>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d003      	beq.n	80079e4 <TIM_Base_SetConfig+0xf8>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a0f      	ldr	r2, [pc, #60]	; (8007a1c <TIM_Base_SetConfig+0x130>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d103      	bne.n	80079ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	691a      	ldr	r2, [r3, #16]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	615a      	str	r2, [r3, #20]
}
 80079f2:	bf00      	nop
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	40010000 	.word	0x40010000
 8007a04:	40000400 	.word	0x40000400
 8007a08:	40000800 	.word	0x40000800
 8007a0c:	40000c00 	.word	0x40000c00
 8007a10:	40010400 	.word	0x40010400
 8007a14:	40014000 	.word	0x40014000
 8007a18:	40014400 	.word	0x40014400
 8007a1c:	40014800 	.word	0x40014800

08007a20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b087      	sub	sp, #28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	f023 0201 	bic.w	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	4b37      	ldr	r3, [pc, #220]	; (8007b28 <TIM_OC1_SetConfig+0x108>)
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0303 	bic.w	r3, r3, #3
 8007a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f023 0302 	bic.w	r3, r3, #2
 8007a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a2d      	ldr	r2, [pc, #180]	; (8007b2c <TIM_OC1_SetConfig+0x10c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d00f      	beq.n	8007a9c <TIM_OC1_SetConfig+0x7c>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a2c      	ldr	r2, [pc, #176]	; (8007b30 <TIM_OC1_SetConfig+0x110>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d00b      	beq.n	8007a9c <TIM_OC1_SetConfig+0x7c>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a2b      	ldr	r2, [pc, #172]	; (8007b34 <TIM_OC1_SetConfig+0x114>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d007      	beq.n	8007a9c <TIM_OC1_SetConfig+0x7c>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a2a      	ldr	r2, [pc, #168]	; (8007b38 <TIM_OC1_SetConfig+0x118>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d003      	beq.n	8007a9c <TIM_OC1_SetConfig+0x7c>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a29      	ldr	r2, [pc, #164]	; (8007b3c <TIM_OC1_SetConfig+0x11c>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d10c      	bne.n	8007ab6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f023 0308 	bic.w	r3, r3, #8
 8007aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f023 0304 	bic.w	r3, r3, #4
 8007ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a1c      	ldr	r2, [pc, #112]	; (8007b2c <TIM_OC1_SetConfig+0x10c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00f      	beq.n	8007ade <TIM_OC1_SetConfig+0xbe>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a1b      	ldr	r2, [pc, #108]	; (8007b30 <TIM_OC1_SetConfig+0x110>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00b      	beq.n	8007ade <TIM_OC1_SetConfig+0xbe>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a1a      	ldr	r2, [pc, #104]	; (8007b34 <TIM_OC1_SetConfig+0x114>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d007      	beq.n	8007ade <TIM_OC1_SetConfig+0xbe>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a19      	ldr	r2, [pc, #100]	; (8007b38 <TIM_OC1_SetConfig+0x118>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d003      	beq.n	8007ade <TIM_OC1_SetConfig+0xbe>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a18      	ldr	r2, [pc, #96]	; (8007b3c <TIM_OC1_SetConfig+0x11c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d111      	bne.n	8007b02 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	621a      	str	r2, [r3, #32]
}
 8007b1c:	bf00      	nop
 8007b1e:	371c      	adds	r7, #28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	fffeff8f 	.word	0xfffeff8f
 8007b2c:	40010000 	.word	0x40010000
 8007b30:	40010400 	.word	0x40010400
 8007b34:	40014000 	.word	0x40014000
 8007b38:	40014400 	.word	0x40014400
 8007b3c:	40014800 	.word	0x40014800

08007b40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b087      	sub	sp, #28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	f023 0210 	bic.w	r2, r3, #16
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	4b34      	ldr	r3, [pc, #208]	; (8007c3c <TIM_OC2_SetConfig+0xfc>)
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	021b      	lsls	r3, r3, #8
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f023 0320 	bic.w	r3, r3, #32
 8007b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	011b      	lsls	r3, r3, #4
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a29      	ldr	r2, [pc, #164]	; (8007c40 <TIM_OC2_SetConfig+0x100>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d003      	beq.n	8007ba8 <TIM_OC2_SetConfig+0x68>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a28      	ldr	r2, [pc, #160]	; (8007c44 <TIM_OC2_SetConfig+0x104>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d10d      	bne.n	8007bc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	011b      	lsls	r3, r3, #4
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a1e      	ldr	r2, [pc, #120]	; (8007c40 <TIM_OC2_SetConfig+0x100>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d00f      	beq.n	8007bec <TIM_OC2_SetConfig+0xac>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a1d      	ldr	r2, [pc, #116]	; (8007c44 <TIM_OC2_SetConfig+0x104>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d00b      	beq.n	8007bec <TIM_OC2_SetConfig+0xac>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a1c      	ldr	r2, [pc, #112]	; (8007c48 <TIM_OC2_SetConfig+0x108>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d007      	beq.n	8007bec <TIM_OC2_SetConfig+0xac>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a1b      	ldr	r2, [pc, #108]	; (8007c4c <TIM_OC2_SetConfig+0x10c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d003      	beq.n	8007bec <TIM_OC2_SetConfig+0xac>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a1a      	ldr	r2, [pc, #104]	; (8007c50 <TIM_OC2_SetConfig+0x110>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d113      	bne.n	8007c14 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	621a      	str	r2, [r3, #32]
}
 8007c2e:	bf00      	nop
 8007c30:	371c      	adds	r7, #28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	feff8fff 	.word	0xfeff8fff
 8007c40:	40010000 	.word	0x40010000
 8007c44:	40010400 	.word	0x40010400
 8007c48:	40014000 	.word	0x40014000
 8007c4c:	40014400 	.word	0x40014400
 8007c50:	40014800 	.word	0x40014800

08007c54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f023 0303 	bic.w	r3, r3, #3
 8007c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	021b      	lsls	r3, r3, #8
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a27      	ldr	r2, [pc, #156]	; (8007d4c <TIM_OC3_SetConfig+0xf8>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d003      	beq.n	8007cba <TIM_OC3_SetConfig+0x66>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a26      	ldr	r2, [pc, #152]	; (8007d50 <TIM_OC3_SetConfig+0xfc>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d10d      	bne.n	8007cd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	021b      	lsls	r3, r3, #8
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a1c      	ldr	r2, [pc, #112]	; (8007d4c <TIM_OC3_SetConfig+0xf8>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d00f      	beq.n	8007cfe <TIM_OC3_SetConfig+0xaa>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a1b      	ldr	r2, [pc, #108]	; (8007d50 <TIM_OC3_SetConfig+0xfc>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d00b      	beq.n	8007cfe <TIM_OC3_SetConfig+0xaa>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a1a      	ldr	r2, [pc, #104]	; (8007d54 <TIM_OC3_SetConfig+0x100>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d007      	beq.n	8007cfe <TIM_OC3_SetConfig+0xaa>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a19      	ldr	r2, [pc, #100]	; (8007d58 <TIM_OC3_SetConfig+0x104>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d003      	beq.n	8007cfe <TIM_OC3_SetConfig+0xaa>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a18      	ldr	r2, [pc, #96]	; (8007d5c <TIM_OC3_SetConfig+0x108>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d113      	bne.n	8007d26 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	011b      	lsls	r3, r3, #4
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	621a      	str	r2, [r3, #32]
}
 8007d40:	bf00      	nop
 8007d42:	371c      	adds	r7, #28
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	40010000 	.word	0x40010000
 8007d50:	40010400 	.word	0x40010400
 8007d54:	40014000 	.word	0x40014000
 8007d58:	40014400 	.word	0x40014400
 8007d5c:	40014800 	.word	0x40014800

08007d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	021b      	lsls	r3, r3, #8
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	031b      	lsls	r3, r3, #12
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a18      	ldr	r2, [pc, #96]	; (8007e1c <TIM_OC4_SetConfig+0xbc>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d00f      	beq.n	8007de0 <TIM_OC4_SetConfig+0x80>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a17      	ldr	r2, [pc, #92]	; (8007e20 <TIM_OC4_SetConfig+0xc0>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d00b      	beq.n	8007de0 <TIM_OC4_SetConfig+0x80>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a16      	ldr	r2, [pc, #88]	; (8007e24 <TIM_OC4_SetConfig+0xc4>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d007      	beq.n	8007de0 <TIM_OC4_SetConfig+0x80>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a15      	ldr	r2, [pc, #84]	; (8007e28 <TIM_OC4_SetConfig+0xc8>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d003      	beq.n	8007de0 <TIM_OC4_SetConfig+0x80>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a14      	ldr	r2, [pc, #80]	; (8007e2c <TIM_OC4_SetConfig+0xcc>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d109      	bne.n	8007df4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007de6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	019b      	lsls	r3, r3, #6
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	685a      	ldr	r2, [r3, #4]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	621a      	str	r2, [r3, #32]
}
 8007e0e:	bf00      	nop
 8007e10:	371c      	adds	r7, #28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	40010000 	.word	0x40010000
 8007e20:	40010400 	.word	0x40010400
 8007e24:	40014000 	.word	0x40014000
 8007e28:	40014400 	.word	0x40014400
 8007e2c:	40014800 	.word	0x40014800

08007e30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a1b      	ldr	r3, [r3, #32]
 8007e3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68fa      	ldr	r2, [r7, #12]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	041b      	lsls	r3, r3, #16
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a17      	ldr	r2, [pc, #92]	; (8007ee0 <TIM_OC5_SetConfig+0xb0>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d00f      	beq.n	8007ea6 <TIM_OC5_SetConfig+0x76>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a16      	ldr	r2, [pc, #88]	; (8007ee4 <TIM_OC5_SetConfig+0xb4>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d00b      	beq.n	8007ea6 <TIM_OC5_SetConfig+0x76>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a15      	ldr	r2, [pc, #84]	; (8007ee8 <TIM_OC5_SetConfig+0xb8>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d007      	beq.n	8007ea6 <TIM_OC5_SetConfig+0x76>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a14      	ldr	r2, [pc, #80]	; (8007eec <TIM_OC5_SetConfig+0xbc>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d003      	beq.n	8007ea6 <TIM_OC5_SetConfig+0x76>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a13      	ldr	r2, [pc, #76]	; (8007ef0 <TIM_OC5_SetConfig+0xc0>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d109      	bne.n	8007eba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	021b      	lsls	r3, r3, #8
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	685a      	ldr	r2, [r3, #4]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	693a      	ldr	r2, [r7, #16]
 8007ed2:	621a      	str	r2, [r3, #32]
}
 8007ed4:	bf00      	nop
 8007ed6:	371c      	adds	r7, #28
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	40010000 	.word	0x40010000
 8007ee4:	40010400 	.word	0x40010400
 8007ee8:	40014000 	.word	0x40014000
 8007eec:	40014400 	.word	0x40014400
 8007ef0:	40014800 	.word	0x40014800

08007ef4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b087      	sub	sp, #28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	021b      	lsls	r3, r3, #8
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	051b      	lsls	r3, r3, #20
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a18      	ldr	r2, [pc, #96]	; (8007fa8 <TIM_OC6_SetConfig+0xb4>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d00f      	beq.n	8007f6c <TIM_OC6_SetConfig+0x78>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a17      	ldr	r2, [pc, #92]	; (8007fac <TIM_OC6_SetConfig+0xb8>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d00b      	beq.n	8007f6c <TIM_OC6_SetConfig+0x78>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a16      	ldr	r2, [pc, #88]	; (8007fb0 <TIM_OC6_SetConfig+0xbc>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d007      	beq.n	8007f6c <TIM_OC6_SetConfig+0x78>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a15      	ldr	r2, [pc, #84]	; (8007fb4 <TIM_OC6_SetConfig+0xc0>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d003      	beq.n	8007f6c <TIM_OC6_SetConfig+0x78>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a14      	ldr	r2, [pc, #80]	; (8007fb8 <TIM_OC6_SetConfig+0xc4>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d109      	bne.n	8007f80 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007f72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	695b      	ldr	r3, [r3, #20]
 8007f78:	029b      	lsls	r3, r3, #10
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68fa      	ldr	r2, [r7, #12]
 8007f8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	621a      	str	r2, [r3, #32]
}
 8007f9a:	bf00      	nop
 8007f9c:	371c      	adds	r7, #28
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr
 8007fa6:	bf00      	nop
 8007fa8:	40010000 	.word	0x40010000
 8007fac:	40010400 	.word	0x40010400
 8007fb0:	40014000 	.word	0x40014000
 8007fb4:	40014400 	.word	0x40014400
 8007fb8:	40014800 	.word	0x40014800

08007fbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b087      	sub	sp, #28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a1b      	ldr	r3, [r3, #32]
 8007fcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	f023 0201 	bic.w	r2, r3, #1
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	011b      	lsls	r3, r3, #4
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f023 030a 	bic.w	r3, r3, #10
 8007ff8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ffa:	697a      	ldr	r2, [r7, #20]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	621a      	str	r2, [r3, #32]
}
 800800e:	bf00      	nop
 8008010:	371c      	adds	r7, #28
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800801a:	b480      	push	{r7}
 800801c:	b087      	sub	sp, #28
 800801e:	af00      	add	r7, sp, #0
 8008020:	60f8      	str	r0, [r7, #12]
 8008022:	60b9      	str	r1, [r7, #8]
 8008024:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6a1b      	ldr	r3, [r3, #32]
 800802a:	f023 0210 	bic.w	r2, r3, #16
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6a1b      	ldr	r3, [r3, #32]
 800803c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008044:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	031b      	lsls	r3, r3, #12
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	4313      	orrs	r3, r2
 800804e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008056:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	011b      	lsls	r3, r3, #4
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	4313      	orrs	r3, r2
 8008060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	621a      	str	r2, [r3, #32]
}
 800806e:	bf00      	nop
 8008070:	371c      	adds	r7, #28
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
	...

0800807c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	4b09      	ldr	r3, [pc, #36]	; (80080b4 <TIM_ITRx_SetConfig+0x38>)
 8008090:	4013      	ands	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008094:	683a      	ldr	r2, [r7, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	4313      	orrs	r3, r2
 800809a:	f043 0307 	orr.w	r3, r3, #7
 800809e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	609a      	str	r2, [r3, #8]
}
 80080a6:	bf00      	nop
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	ffcfff8f 	.word	0xffcfff8f

080080b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	021a      	lsls	r2, r3, #8
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	431a      	orrs	r2, r3
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	4313      	orrs	r3, r2
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	4313      	orrs	r3, r2
 80080e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	609a      	str	r2, [r3, #8]
}
 80080ec:	bf00      	nop
 80080ee:	371c      	adds	r7, #28
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008108:	2b01      	cmp	r3, #1
 800810a:	d101      	bne.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800810c:	2302      	movs	r3, #2
 800810e:	e068      	b.n	80081e2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a2e      	ldr	r2, [pc, #184]	; (80081f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d004      	beq.n	8008144 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a2d      	ldr	r2, [pc, #180]	; (80081f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d108      	bne.n	8008156 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800814a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	4313      	orrs	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800815c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	4313      	orrs	r3, r2
 8008166:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a1e      	ldr	r2, [pc, #120]	; (80081f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d01d      	beq.n	80081b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008182:	d018      	beq.n	80081b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a1b      	ldr	r2, [pc, #108]	; (80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d013      	beq.n	80081b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a1a      	ldr	r2, [pc, #104]	; (80081fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d00e      	beq.n	80081b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a18      	ldr	r2, [pc, #96]	; (8008200 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d009      	beq.n	80081b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a13      	ldr	r2, [pc, #76]	; (80081f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d004      	beq.n	80081b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a14      	ldr	r2, [pc, #80]	; (8008204 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d10c      	bne.n	80081d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	40010000 	.word	0x40010000
 80081f4:	40010400 	.word	0x40010400
 80081f8:	40000400 	.word	0x40000400
 80081fc:	40000800 	.word	0x40000800
 8008200:	40000c00 	.word	0x40000c00
 8008204:	40001800 	.word	0x40001800

08008208 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800821c:	2b01      	cmp	r3, #1
 800821e:	d101      	bne.n	8008224 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008220:	2302      	movs	r3, #2
 8008222:	e065      	b.n	80082f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	4313      	orrs	r3, r2
 8008246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	4313      	orrs	r3, r2
 8008254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4313      	orrs	r3, r2
 8008262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	4313      	orrs	r3, r2
 8008270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	4313      	orrs	r3, r2
 800827e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828a:	4313      	orrs	r3, r2
 800828c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	041b      	lsls	r3, r3, #16
 800829a:	4313      	orrs	r3, r2
 800829c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a16      	ldr	r2, [pc, #88]	; (80082fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d004      	beq.n	80082b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a14      	ldr	r2, [pc, #80]	; (8008300 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d115      	bne.n	80082de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	051b      	lsls	r3, r3, #20
 80082be:	4313      	orrs	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	69db      	ldr	r3, [r3, #28]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	6a1b      	ldr	r3, [r3, #32]
 80082da:	4313      	orrs	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	40010000 	.word	0x40010000
 8008300:	40010400 	.word	0x40010400

08008304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e042      	b.n	80083d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008358:	2b00      	cmp	r3, #0
 800835a:	d106      	bne.n	800836a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7f9 f9bd 	bl	80016e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2224      	movs	r2, #36	; 0x24
 800836e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 0201 	bic.w	r2, r2, #1
 8008380:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fbc6 	bl	8008b14 <UART_SetConfig>
 8008388:	4603      	mov	r3, r0
 800838a:	2b01      	cmp	r3, #1
 800838c:	d101      	bne.n	8008392 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e022      	b.n	80083d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008396:	2b00      	cmp	r3, #0
 8008398:	d002      	beq.n	80083a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 f91a 	bl	80095d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	689a      	ldr	r2, [r3, #8]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f042 0201 	orr.w	r2, r2, #1
 80083ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 f9a1 	bl	8009718 <UART_CheckIdleState>
 80083d6:	4603      	mov	r3, r0
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	4613      	mov	r3, r2
 80083ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083f4:	2b20      	cmp	r3, #32
 80083f6:	d168      	bne.n	80084ca <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d002      	beq.n	8008404 <HAL_UART_Transmit_IT+0x24>
 80083fe:	88fb      	ldrh	r3, [r7, #6]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	e061      	b.n	80084cc <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800840e:	2b01      	cmp	r3, #1
 8008410:	d101      	bne.n	8008416 <HAL_UART_Transmit_IT+0x36>
 8008412:	2302      	movs	r3, #2
 8008414:	e05a      	b.n	80084cc <HAL_UART_Transmit_IT+0xec>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	88fa      	ldrh	r2, [r7, #6]
 8008428:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	88fa      	ldrh	r2, [r7, #6]
 8008430:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2221      	movs	r2, #33	; 0x21
 8008446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800844e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008452:	d11c      	bne.n	800848e <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800845c:	d107      	bne.n	800846e <HAL_UART_Transmit_IT+0x8e>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d103      	bne.n	800846e <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4a1b      	ldr	r2, [pc, #108]	; (80084d8 <HAL_UART_Transmit_IT+0xf8>)
 800846a:	675a      	str	r2, [r3, #116]	; 0x74
 800846c:	e002      	b.n	8008474 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	4a1a      	ldr	r2, [pc, #104]	; (80084dc <HAL_UART_Transmit_IT+0xfc>)
 8008472:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689a      	ldr	r2, [r3, #8]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800848a:	609a      	str	r2, [r3, #8]
 800848c:	e01b      	b.n	80084c6 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008496:	d107      	bne.n	80084a8 <HAL_UART_Transmit_IT+0xc8>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d103      	bne.n	80084a8 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4a0f      	ldr	r2, [pc, #60]	; (80084e0 <HAL_UART_Transmit_IT+0x100>)
 80084a4:	675a      	str	r2, [r3, #116]	; 0x74
 80084a6:	e002      	b.n	80084ae <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4a0e      	ldr	r2, [pc, #56]	; (80084e4 <HAL_UART_Transmit_IT+0x104>)
 80084ac:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80084c4:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	e000      	b.n	80084cc <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80084ca:	2302      	movs	r3, #2
  }
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	08009c49 	.word	0x08009c49
 80084dc:	08009baf 	.word	0x08009baf
 80084e0:	08009b31 	.word	0x08009b31
 80084e4:	08009abd 	.word	0x08009abd

080084e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	4613      	mov	r3, r2
 80084f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084fc:	2b20      	cmp	r3, #32
 80084fe:	d131      	bne.n	8008564 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <HAL_UART_Receive_IT+0x24>
 8008506:	88fb      	ldrh	r3, [r7, #6]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e02a      	b.n	8008566 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008516:	2b01      	cmp	r3, #1
 8008518:	d101      	bne.n	800851e <HAL_UART_Receive_IT+0x36>
 800851a:	2302      	movs	r3, #2
 800851c:	e023      	b.n	8008566 <HAL_UART_Receive_IT+0x7e>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a0f      	ldr	r2, [pc, #60]	; (8008570 <HAL_UART_Receive_IT+0x88>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d00e      	beq.n	8008554 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d007      	beq.n	8008554 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008552:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008554:	88fb      	ldrh	r3, [r7, #6]
 8008556:	461a      	mov	r2, r3
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f001 f9a8 	bl	80098b0 <UART_Start_Receive_IT>
 8008560:	4603      	mov	r3, r0
 8008562:	e000      	b.n	8008566 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008564:	2302      	movs	r3, #2
  }
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	58000c00 	.word	0x58000c00

08008574 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b088      	sub	sp, #32
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	69db      	ldr	r3, [r3, #28]
 8008582:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008594:	69fa      	ldr	r2, [r7, #28]
 8008596:	f640 030f 	movw	r3, #2063	; 0x80f
 800859a:	4013      	ands	r3, r2
 800859c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d118      	bne.n	80085d6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	f003 0320 	and.w	r3, r3, #32
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d013      	beq.n	80085d6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	f003 0320 	and.w	r3, r3, #32
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d104      	bne.n	80085c2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d009      	beq.n	80085d6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	f000 8282 	beq.w	8008ad0 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	4798      	blx	r3
      }
      return;
 80085d4:	e27c      	b.n	8008ad0 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 80ef 	beq.w	80087bc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	4b73      	ldr	r3, [pc, #460]	; (80087b0 <HAL_UART_IRQHandler+0x23c>)
 80085e2:	4013      	ands	r3, r2
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d105      	bne.n	80085f4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80085e8:	69ba      	ldr	r2, [r7, #24]
 80085ea:	4b72      	ldr	r3, [pc, #456]	; (80087b4 <HAL_UART_IRQHandler+0x240>)
 80085ec:	4013      	ands	r3, r2
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 80e4 	beq.w	80087bc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d010      	beq.n	8008620 <HAL_UART_IRQHandler+0xac>
 80085fe:	69bb      	ldr	r3, [r7, #24]
 8008600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00b      	beq.n	8008620 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2201      	movs	r2, #1
 800860e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008616:	f043 0201 	orr.w	r2, r3, #1
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d010      	beq.n	800864c <HAL_UART_IRQHandler+0xd8>
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f003 0301 	and.w	r3, r3, #1
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00b      	beq.n	800864c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2202      	movs	r2, #2
 800863a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008642:	f043 0204 	orr.w	r2, r3, #4
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	f003 0304 	and.w	r3, r3, #4
 8008652:	2b00      	cmp	r3, #0
 8008654:	d010      	beq.n	8008678 <HAL_UART_IRQHandler+0x104>
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2204      	movs	r2, #4
 8008666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800866e:	f043 0202 	orr.w	r2, r3, #2
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	f003 0308 	and.w	r3, r3, #8
 800867e:	2b00      	cmp	r3, #0
 8008680:	d015      	beq.n	80086ae <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	f003 0320 	and.w	r3, r3, #32
 8008688:	2b00      	cmp	r3, #0
 800868a:	d104      	bne.n	8008696 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	4b48      	ldr	r3, [pc, #288]	; (80087b0 <HAL_UART_IRQHandler+0x23c>)
 8008690:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00b      	beq.n	80086ae <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2208      	movs	r2, #8
 800869c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086a4:	f043 0208 	orr.w	r2, r3, #8
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d011      	beq.n	80086dc <HAL_UART_IRQHandler+0x168>
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00c      	beq.n	80086dc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086d2:	f043 0220 	orr.w	r2, r3, #32
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 81f6 	beq.w	8008ad4 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	f003 0320 	and.w	r3, r3, #32
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d011      	beq.n	8008716 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086f2:	69bb      	ldr	r3, [r7, #24]
 80086f4:	f003 0320 	and.w	r3, r3, #32
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d104      	bne.n	8008706 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d007      	beq.n	8008716 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800870a:	2b00      	cmp	r3, #0
 800870c:	d003      	beq.n	8008716 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800871c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008728:	2b40      	cmp	r3, #64	; 0x40
 800872a:	d004      	beq.n	8008736 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008732:	2b00      	cmp	r3, #0
 8008734:	d031      	beq.n	800879a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f001 f978 	bl	8009a2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008746:	2b40      	cmp	r3, #64	; 0x40
 8008748:	d123      	bne.n	8008792 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	689a      	ldr	r2, [r3, #8]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008758:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800875e:	2b00      	cmp	r3, #0
 8008760:	d013      	beq.n	800878a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008766:	4a14      	ldr	r2, [pc, #80]	; (80087b8 <HAL_UART_IRQHandler+0x244>)
 8008768:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800876e:	4618      	mov	r0, r3
 8008770:	f7fa fad6 	bl	8002d20 <HAL_DMA_Abort_IT>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d017      	beq.n	80087aa <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800877e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008784:	4610      	mov	r0, r2
 8008786:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008788:	e00f      	b.n	80087aa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f9ac 	bl	8008ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008790:	e00b      	b.n	80087aa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f9a8 	bl	8008ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008798:	e007      	b.n	80087aa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f9a4 	bl	8008ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80087a8:	e194      	b.n	8008ad4 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087aa:	bf00      	nop
    return;
 80087ac:	e192      	b.n	8008ad4 <HAL_UART_IRQHandler+0x560>
 80087ae:	bf00      	nop
 80087b0:	10000001 	.word	0x10000001
 80087b4:	04000120 	.word	0x04000120
 80087b8:	08009a91 	.word	0x08009a91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	f040 810f 	bne.w	80089e4 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	f003 0310 	and.w	r3, r3, #16
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 8109 	beq.w	80089e4 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	f003 0310 	and.w	r3, r3, #16
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f000 8103 	beq.w	80089e4 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2210      	movs	r2, #16
 80087e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f0:	2b40      	cmp	r3, #64	; 0x40
 80087f2:	f040 80bb 	bne.w	800896c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a96      	ldr	r2, [pc, #600]	; (8008a58 <HAL_UART_IRQHandler+0x4e4>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d059      	beq.n	80088b6 <HAL_UART_IRQHandler+0x342>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a94      	ldr	r2, [pc, #592]	; (8008a5c <HAL_UART_IRQHandler+0x4e8>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d053      	beq.n	80088b6 <HAL_UART_IRQHandler+0x342>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a92      	ldr	r2, [pc, #584]	; (8008a60 <HAL_UART_IRQHandler+0x4ec>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d04d      	beq.n	80088b6 <HAL_UART_IRQHandler+0x342>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a90      	ldr	r2, [pc, #576]	; (8008a64 <HAL_UART_IRQHandler+0x4f0>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d047      	beq.n	80088b6 <HAL_UART_IRQHandler+0x342>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a8e      	ldr	r2, [pc, #568]	; (8008a68 <HAL_UART_IRQHandler+0x4f4>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d041      	beq.n	80088b6 <HAL_UART_IRQHandler+0x342>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a8c      	ldr	r2, [pc, #560]	; (8008a6c <HAL_UART_IRQHandler+0x4f8>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d03b      	beq.n	80088b6 <HAL_UART_IRQHandler+0x342>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a8a      	ldr	r2, [pc, #552]	; (8008a70 <HAL_UART_IRQHandler+0x4fc>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d035      	beq.n	80088b6 <HAL_UART_IRQHandler+0x342>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a88      	ldr	r2, [pc, #544]	; (8008a74 <HAL_UART_IRQHandler+0x500>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d02f      	beq.n	80088b6 <HAL_UART_IRQHandler+0x342>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a86      	ldr	r2, [pc, #536]	; (8008a78 <HAL_UART_IRQHandler+0x504>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d029      	beq.n	80088b6 <HAL_UART_IRQHandler+0x342>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a84      	ldr	r2, [pc, #528]	; (8008a7c <HAL_UART_IRQHandler+0x508>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d023      	beq.n	80088b6 <HAL_UART_IRQHandler+0x342>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a82      	ldr	r2, [pc, #520]	; (8008a80 <HAL_UART_IRQHandler+0x50c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d01d      	beq.n	80088b6 <HAL_UART_IRQHandler+0x342>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a80      	ldr	r2, [pc, #512]	; (8008a84 <HAL_UART_IRQHandler+0x510>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d017      	beq.n	80088b6 <HAL_UART_IRQHandler+0x342>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a7e      	ldr	r2, [pc, #504]	; (8008a88 <HAL_UART_IRQHandler+0x514>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d011      	beq.n	80088b6 <HAL_UART_IRQHandler+0x342>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a7c      	ldr	r2, [pc, #496]	; (8008a8c <HAL_UART_IRQHandler+0x518>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d00b      	beq.n	80088b6 <HAL_UART_IRQHandler+0x342>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a7a      	ldr	r2, [pc, #488]	; (8008a90 <HAL_UART_IRQHandler+0x51c>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d005      	beq.n	80088b6 <HAL_UART_IRQHandler+0x342>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a78      	ldr	r2, [pc, #480]	; (8008a94 <HAL_UART_IRQHandler+0x520>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d105      	bne.n	80088c2 <HAL_UART_IRQHandler+0x34e>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	e004      	b.n	80088cc <HAL_UART_IRQHandler+0x358>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80088ce:	893b      	ldrh	r3, [r7, #8]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 8101 	beq.w	8008ad8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088dc:	893a      	ldrh	r2, [r7, #8]
 80088de:	429a      	cmp	r2, r3
 80088e0:	f080 80fa 	bcs.w	8008ad8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	893a      	ldrh	r2, [r7, #8]
 80088e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088f0:	69db      	ldr	r3, [r3, #28]
 80088f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088f6:	d02b      	beq.n	8008950 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008906:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689a      	ldr	r2, [r3, #8]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 0201 	bic.w	r2, r2, #1
 8008916:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	689a      	ldr	r2, [r3, #8]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008926:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2220      	movs	r2, #32
 800892c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f022 0210 	bic.w	r2, r2, #16
 8008944:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800894a:	4618      	mov	r0, r3
 800894c:	f7f9 feca 	bl	80026e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800895c:	b29b      	uxth	r3, r3
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	b29b      	uxth	r3, r3
 8008962:	4619      	mov	r1, r3
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f8c9 	bl	8008afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800896a:	e0b5      	b.n	8008ad8 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008978:	b29b      	uxth	r3, r3
 800897a:	1ad3      	subs	r3, r2, r3
 800897c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008984:	b29b      	uxth	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	f000 80a8 	beq.w	8008adc <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800898c:	897b      	ldrh	r3, [r7, #10]
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 80a4 	beq.w	8008adc <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80089a2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6899      	ldr	r1, [r3, #8]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681a      	ldr	r2, [r3, #0]
 80089ae:	4b3a      	ldr	r3, [pc, #232]	; (8008a98 <HAL_UART_IRQHandler+0x524>)
 80089b0:	400b      	ands	r3, r1
 80089b2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 0210 	bic.w	r2, r2, #16
 80089d6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089d8:	897b      	ldrh	r3, [r7, #10]
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f88d 	bl	8008afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089e2:	e07b      	b.n	8008adc <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00d      	beq.n	8008a0a <HAL_UART_IRQHandler+0x496>
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d008      	beq.n	8008a0a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008a00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f001 fcd2 	bl	800a3ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a08:	e06b      	b.n	8008ae2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d012      	beq.n	8008a3a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d104      	bne.n	8008a28 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d008      	beq.n	8008a3a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d057      	beq.n	8008ae0 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	4798      	blx	r3
    }
    return;
 8008a38:	e052      	b.n	8008ae0 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d02b      	beq.n	8008a9c <HAL_UART_IRQHandler+0x528>
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d026      	beq.n	8008a9c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f001 f94c 	bl	8009cec <UART_EndTransmit_IT>
    return;
 8008a54:	e045      	b.n	8008ae2 <HAL_UART_IRQHandler+0x56e>
 8008a56:	bf00      	nop
 8008a58:	40020010 	.word	0x40020010
 8008a5c:	40020028 	.word	0x40020028
 8008a60:	40020040 	.word	0x40020040
 8008a64:	40020058 	.word	0x40020058
 8008a68:	40020070 	.word	0x40020070
 8008a6c:	40020088 	.word	0x40020088
 8008a70:	400200a0 	.word	0x400200a0
 8008a74:	400200b8 	.word	0x400200b8
 8008a78:	40020410 	.word	0x40020410
 8008a7c:	40020428 	.word	0x40020428
 8008a80:	40020440 	.word	0x40020440
 8008a84:	40020458 	.word	0x40020458
 8008a88:	40020470 	.word	0x40020470
 8008a8c:	40020488 	.word	0x40020488
 8008a90:	400204a0 	.word	0x400204a0
 8008a94:	400204b8 	.word	0x400204b8
 8008a98:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d008      	beq.n	8008ab8 <HAL_UART_IRQHandler+0x544>
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d003      	beq.n	8008ab8 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 fc8f 	bl	800a3d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ab6:	e014      	b.n	8008ae2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00f      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x56e>
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	da0c      	bge.n	8008ae2 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f001 fc79 	bl	800a3c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ace:	e008      	b.n	8008ae2 <HAL_UART_IRQHandler+0x56e>
      return;
 8008ad0:	bf00      	nop
 8008ad2:	e006      	b.n	8008ae2 <HAL_UART_IRQHandler+0x56e>
    return;
 8008ad4:	bf00      	nop
 8008ad6:	e004      	b.n	8008ae2 <HAL_UART_IRQHandler+0x56e>
      return;
 8008ad8:	bf00      	nop
 8008ada:	e002      	b.n	8008ae2 <HAL_UART_IRQHandler+0x56e>
      return;
 8008adc:	bf00      	nop
 8008ade:	e000      	b.n	8008ae2 <HAL_UART_IRQHandler+0x56e>
    return;
 8008ae0:	bf00      	nop
  }
}
 8008ae2:	3720      	adds	r7, #32
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b14:	b5b0      	push	{r4, r5, r7, lr}
 8008b16:	b08e      	sub	sp, #56	; 0x38
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	689a      	ldr	r2, [r3, #8]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	431a      	orrs	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	431a      	orrs	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	4bbf      	ldr	r3, [pc, #764]	; (8008e40 <UART_SetConfig+0x32c>)
 8008b42:	4013      	ands	r3, r2
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	6812      	ldr	r2, [r2, #0]
 8008b48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b4a:	430b      	orrs	r3, r1
 8008b4c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68da      	ldr	r2, [r3, #12]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	430a      	orrs	r2, r1
 8008b62:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4ab5      	ldr	r2, [pc, #724]	; (8008e44 <UART_SetConfig+0x330>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d004      	beq.n	8008b7e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689a      	ldr	r2, [r3, #8]
 8008b84:	4bb0      	ldr	r3, [pc, #704]	; (8008e48 <UART_SetConfig+0x334>)
 8008b86:	4013      	ands	r3, r2
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	6812      	ldr	r2, [r2, #0]
 8008b8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b8e:	430b      	orrs	r3, r1
 8008b90:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b98:	f023 010f 	bic.w	r1, r3, #15
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4aa7      	ldr	r2, [pc, #668]	; (8008e4c <UART_SetConfig+0x338>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d176      	bne.n	8008ca0 <UART_SetConfig+0x18c>
 8008bb2:	4ba7      	ldr	r3, [pc, #668]	; (8008e50 <UART_SetConfig+0x33c>)
 8008bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008bba:	2b28      	cmp	r3, #40	; 0x28
 8008bbc:	d86c      	bhi.n	8008c98 <UART_SetConfig+0x184>
 8008bbe:	a201      	add	r2, pc, #4	; (adr r2, 8008bc4 <UART_SetConfig+0xb0>)
 8008bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc4:	08008c69 	.word	0x08008c69
 8008bc8:	08008c99 	.word	0x08008c99
 8008bcc:	08008c99 	.word	0x08008c99
 8008bd0:	08008c99 	.word	0x08008c99
 8008bd4:	08008c99 	.word	0x08008c99
 8008bd8:	08008c99 	.word	0x08008c99
 8008bdc:	08008c99 	.word	0x08008c99
 8008be0:	08008c99 	.word	0x08008c99
 8008be4:	08008c71 	.word	0x08008c71
 8008be8:	08008c99 	.word	0x08008c99
 8008bec:	08008c99 	.word	0x08008c99
 8008bf0:	08008c99 	.word	0x08008c99
 8008bf4:	08008c99 	.word	0x08008c99
 8008bf8:	08008c99 	.word	0x08008c99
 8008bfc:	08008c99 	.word	0x08008c99
 8008c00:	08008c99 	.word	0x08008c99
 8008c04:	08008c79 	.word	0x08008c79
 8008c08:	08008c99 	.word	0x08008c99
 8008c0c:	08008c99 	.word	0x08008c99
 8008c10:	08008c99 	.word	0x08008c99
 8008c14:	08008c99 	.word	0x08008c99
 8008c18:	08008c99 	.word	0x08008c99
 8008c1c:	08008c99 	.word	0x08008c99
 8008c20:	08008c99 	.word	0x08008c99
 8008c24:	08008c81 	.word	0x08008c81
 8008c28:	08008c99 	.word	0x08008c99
 8008c2c:	08008c99 	.word	0x08008c99
 8008c30:	08008c99 	.word	0x08008c99
 8008c34:	08008c99 	.word	0x08008c99
 8008c38:	08008c99 	.word	0x08008c99
 8008c3c:	08008c99 	.word	0x08008c99
 8008c40:	08008c99 	.word	0x08008c99
 8008c44:	08008c89 	.word	0x08008c89
 8008c48:	08008c99 	.word	0x08008c99
 8008c4c:	08008c99 	.word	0x08008c99
 8008c50:	08008c99 	.word	0x08008c99
 8008c54:	08008c99 	.word	0x08008c99
 8008c58:	08008c99 	.word	0x08008c99
 8008c5c:	08008c99 	.word	0x08008c99
 8008c60:	08008c99 	.word	0x08008c99
 8008c64:	08008c91 	.word	0x08008c91
 8008c68:	2301      	movs	r3, #1
 8008c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c6e:	e222      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008c70:	2304      	movs	r3, #4
 8008c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c76:	e21e      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008c78:	2308      	movs	r3, #8
 8008c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c7e:	e21a      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008c80:	2310      	movs	r3, #16
 8008c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c86:	e216      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008c88:	2320      	movs	r3, #32
 8008c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c8e:	e212      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008c90:	2340      	movs	r3, #64	; 0x40
 8008c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c96:	e20e      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008c98:	2380      	movs	r3, #128	; 0x80
 8008c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008c9e:	e20a      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a6b      	ldr	r2, [pc, #428]	; (8008e54 <UART_SetConfig+0x340>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d130      	bne.n	8008d0c <UART_SetConfig+0x1f8>
 8008caa:	4b69      	ldr	r3, [pc, #420]	; (8008e50 <UART_SetConfig+0x33c>)
 8008cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cae:	f003 0307 	and.w	r3, r3, #7
 8008cb2:	2b05      	cmp	r3, #5
 8008cb4:	d826      	bhi.n	8008d04 <UART_SetConfig+0x1f0>
 8008cb6:	a201      	add	r2, pc, #4	; (adr r2, 8008cbc <UART_SetConfig+0x1a8>)
 8008cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cbc:	08008cd5 	.word	0x08008cd5
 8008cc0:	08008cdd 	.word	0x08008cdd
 8008cc4:	08008ce5 	.word	0x08008ce5
 8008cc8:	08008ced 	.word	0x08008ced
 8008ccc:	08008cf5 	.word	0x08008cf5
 8008cd0:	08008cfd 	.word	0x08008cfd
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cda:	e1ec      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008cdc:	2304      	movs	r3, #4
 8008cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008ce2:	e1e8      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008ce4:	2308      	movs	r3, #8
 8008ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cea:	e1e4      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008cec:	2310      	movs	r3, #16
 8008cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cf2:	e1e0      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008cf4:	2320      	movs	r3, #32
 8008cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008cfa:	e1dc      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008cfc:	2340      	movs	r3, #64	; 0x40
 8008cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d02:	e1d8      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008d04:	2380      	movs	r3, #128	; 0x80
 8008d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d0a:	e1d4      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a51      	ldr	r2, [pc, #324]	; (8008e58 <UART_SetConfig+0x344>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d130      	bne.n	8008d78 <UART_SetConfig+0x264>
 8008d16:	4b4e      	ldr	r3, [pc, #312]	; (8008e50 <UART_SetConfig+0x33c>)
 8008d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d1a:	f003 0307 	and.w	r3, r3, #7
 8008d1e:	2b05      	cmp	r3, #5
 8008d20:	d826      	bhi.n	8008d70 <UART_SetConfig+0x25c>
 8008d22:	a201      	add	r2, pc, #4	; (adr r2, 8008d28 <UART_SetConfig+0x214>)
 8008d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d28:	08008d41 	.word	0x08008d41
 8008d2c:	08008d49 	.word	0x08008d49
 8008d30:	08008d51 	.word	0x08008d51
 8008d34:	08008d59 	.word	0x08008d59
 8008d38:	08008d61 	.word	0x08008d61
 8008d3c:	08008d69 	.word	0x08008d69
 8008d40:	2300      	movs	r3, #0
 8008d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d46:	e1b6      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008d48:	2304      	movs	r3, #4
 8008d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d4e:	e1b2      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008d50:	2308      	movs	r3, #8
 8008d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d56:	e1ae      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008d58:	2310      	movs	r3, #16
 8008d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d5e:	e1aa      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008d60:	2320      	movs	r3, #32
 8008d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d66:	e1a6      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008d68:	2340      	movs	r3, #64	; 0x40
 8008d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d6e:	e1a2      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008d70:	2380      	movs	r3, #128	; 0x80
 8008d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008d76:	e19e      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a37      	ldr	r2, [pc, #220]	; (8008e5c <UART_SetConfig+0x348>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d130      	bne.n	8008de4 <UART_SetConfig+0x2d0>
 8008d82:	4b33      	ldr	r3, [pc, #204]	; (8008e50 <UART_SetConfig+0x33c>)
 8008d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d86:	f003 0307 	and.w	r3, r3, #7
 8008d8a:	2b05      	cmp	r3, #5
 8008d8c:	d826      	bhi.n	8008ddc <UART_SetConfig+0x2c8>
 8008d8e:	a201      	add	r2, pc, #4	; (adr r2, 8008d94 <UART_SetConfig+0x280>)
 8008d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d94:	08008dad 	.word	0x08008dad
 8008d98:	08008db5 	.word	0x08008db5
 8008d9c:	08008dbd 	.word	0x08008dbd
 8008da0:	08008dc5 	.word	0x08008dc5
 8008da4:	08008dcd 	.word	0x08008dcd
 8008da8:	08008dd5 	.word	0x08008dd5
 8008dac:	2300      	movs	r3, #0
 8008dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008db2:	e180      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008db4:	2304      	movs	r3, #4
 8008db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dba:	e17c      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008dbc:	2308      	movs	r3, #8
 8008dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dc2:	e178      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008dc4:	2310      	movs	r3, #16
 8008dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dca:	e174      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008dcc:	2320      	movs	r3, #32
 8008dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dd2:	e170      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008dd4:	2340      	movs	r3, #64	; 0x40
 8008dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008dda:	e16c      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008ddc:	2380      	movs	r3, #128	; 0x80
 8008dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008de2:	e168      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a1d      	ldr	r2, [pc, #116]	; (8008e60 <UART_SetConfig+0x34c>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d142      	bne.n	8008e74 <UART_SetConfig+0x360>
 8008dee:	4b18      	ldr	r3, [pc, #96]	; (8008e50 <UART_SetConfig+0x33c>)
 8008df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df2:	f003 0307 	and.w	r3, r3, #7
 8008df6:	2b05      	cmp	r3, #5
 8008df8:	d838      	bhi.n	8008e6c <UART_SetConfig+0x358>
 8008dfa:	a201      	add	r2, pc, #4	; (adr r2, 8008e00 <UART_SetConfig+0x2ec>)
 8008dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e00:	08008e19 	.word	0x08008e19
 8008e04:	08008e21 	.word	0x08008e21
 8008e08:	08008e29 	.word	0x08008e29
 8008e0c:	08008e31 	.word	0x08008e31
 8008e10:	08008e39 	.word	0x08008e39
 8008e14:	08008e65 	.word	0x08008e65
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e1e:	e14a      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008e20:	2304      	movs	r3, #4
 8008e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e26:	e146      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008e28:	2308      	movs	r3, #8
 8008e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e2e:	e142      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008e30:	2310      	movs	r3, #16
 8008e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e36:	e13e      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008e38:	2320      	movs	r3, #32
 8008e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e3e:	e13a      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008e40:	cfff69f3 	.word	0xcfff69f3
 8008e44:	58000c00 	.word	0x58000c00
 8008e48:	11fff4ff 	.word	0x11fff4ff
 8008e4c:	40011000 	.word	0x40011000
 8008e50:	58024400 	.word	0x58024400
 8008e54:	40004400 	.word	0x40004400
 8008e58:	40004800 	.word	0x40004800
 8008e5c:	40004c00 	.word	0x40004c00
 8008e60:	40005000 	.word	0x40005000
 8008e64:	2340      	movs	r3, #64	; 0x40
 8008e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e6a:	e124      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008e6c:	2380      	movs	r3, #128	; 0x80
 8008e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008e72:	e120      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4acc      	ldr	r2, [pc, #816]	; (80091ac <UART_SetConfig+0x698>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d176      	bne.n	8008f6c <UART_SetConfig+0x458>
 8008e7e:	4bcc      	ldr	r3, [pc, #816]	; (80091b0 <UART_SetConfig+0x69c>)
 8008e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e86:	2b28      	cmp	r3, #40	; 0x28
 8008e88:	d86c      	bhi.n	8008f64 <UART_SetConfig+0x450>
 8008e8a:	a201      	add	r2, pc, #4	; (adr r2, 8008e90 <UART_SetConfig+0x37c>)
 8008e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e90:	08008f35 	.word	0x08008f35
 8008e94:	08008f65 	.word	0x08008f65
 8008e98:	08008f65 	.word	0x08008f65
 8008e9c:	08008f65 	.word	0x08008f65
 8008ea0:	08008f65 	.word	0x08008f65
 8008ea4:	08008f65 	.word	0x08008f65
 8008ea8:	08008f65 	.word	0x08008f65
 8008eac:	08008f65 	.word	0x08008f65
 8008eb0:	08008f3d 	.word	0x08008f3d
 8008eb4:	08008f65 	.word	0x08008f65
 8008eb8:	08008f65 	.word	0x08008f65
 8008ebc:	08008f65 	.word	0x08008f65
 8008ec0:	08008f65 	.word	0x08008f65
 8008ec4:	08008f65 	.word	0x08008f65
 8008ec8:	08008f65 	.word	0x08008f65
 8008ecc:	08008f65 	.word	0x08008f65
 8008ed0:	08008f45 	.word	0x08008f45
 8008ed4:	08008f65 	.word	0x08008f65
 8008ed8:	08008f65 	.word	0x08008f65
 8008edc:	08008f65 	.word	0x08008f65
 8008ee0:	08008f65 	.word	0x08008f65
 8008ee4:	08008f65 	.word	0x08008f65
 8008ee8:	08008f65 	.word	0x08008f65
 8008eec:	08008f65 	.word	0x08008f65
 8008ef0:	08008f4d 	.word	0x08008f4d
 8008ef4:	08008f65 	.word	0x08008f65
 8008ef8:	08008f65 	.word	0x08008f65
 8008efc:	08008f65 	.word	0x08008f65
 8008f00:	08008f65 	.word	0x08008f65
 8008f04:	08008f65 	.word	0x08008f65
 8008f08:	08008f65 	.word	0x08008f65
 8008f0c:	08008f65 	.word	0x08008f65
 8008f10:	08008f55 	.word	0x08008f55
 8008f14:	08008f65 	.word	0x08008f65
 8008f18:	08008f65 	.word	0x08008f65
 8008f1c:	08008f65 	.word	0x08008f65
 8008f20:	08008f65 	.word	0x08008f65
 8008f24:	08008f65 	.word	0x08008f65
 8008f28:	08008f65 	.word	0x08008f65
 8008f2c:	08008f65 	.word	0x08008f65
 8008f30:	08008f5d 	.word	0x08008f5d
 8008f34:	2301      	movs	r3, #1
 8008f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f3a:	e0bc      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008f3c:	2304      	movs	r3, #4
 8008f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f42:	e0b8      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008f44:	2308      	movs	r3, #8
 8008f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f4a:	e0b4      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008f4c:	2310      	movs	r3, #16
 8008f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f52:	e0b0      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008f54:	2320      	movs	r3, #32
 8008f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f5a:	e0ac      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008f5c:	2340      	movs	r3, #64	; 0x40
 8008f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f62:	e0a8      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008f64:	2380      	movs	r3, #128	; 0x80
 8008f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f6a:	e0a4      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a90      	ldr	r2, [pc, #576]	; (80091b4 <UART_SetConfig+0x6a0>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d130      	bne.n	8008fd8 <UART_SetConfig+0x4c4>
 8008f76:	4b8e      	ldr	r3, [pc, #568]	; (80091b0 <UART_SetConfig+0x69c>)
 8008f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f7a:	f003 0307 	and.w	r3, r3, #7
 8008f7e:	2b05      	cmp	r3, #5
 8008f80:	d826      	bhi.n	8008fd0 <UART_SetConfig+0x4bc>
 8008f82:	a201      	add	r2, pc, #4	; (adr r2, 8008f88 <UART_SetConfig+0x474>)
 8008f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f88:	08008fa1 	.word	0x08008fa1
 8008f8c:	08008fa9 	.word	0x08008fa9
 8008f90:	08008fb1 	.word	0x08008fb1
 8008f94:	08008fb9 	.word	0x08008fb9
 8008f98:	08008fc1 	.word	0x08008fc1
 8008f9c:	08008fc9 	.word	0x08008fc9
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fa6:	e086      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008fa8:	2304      	movs	r3, #4
 8008faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fae:	e082      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008fb0:	2308      	movs	r3, #8
 8008fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fb6:	e07e      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008fb8:	2310      	movs	r3, #16
 8008fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fbe:	e07a      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008fc0:	2320      	movs	r3, #32
 8008fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fc6:	e076      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008fc8:	2340      	movs	r3, #64	; 0x40
 8008fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fce:	e072      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008fd0:	2380      	movs	r3, #128	; 0x80
 8008fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fd6:	e06e      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a76      	ldr	r2, [pc, #472]	; (80091b8 <UART_SetConfig+0x6a4>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d130      	bne.n	8009044 <UART_SetConfig+0x530>
 8008fe2:	4b73      	ldr	r3, [pc, #460]	; (80091b0 <UART_SetConfig+0x69c>)
 8008fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	2b05      	cmp	r3, #5
 8008fec:	d826      	bhi.n	800903c <UART_SetConfig+0x528>
 8008fee:	a201      	add	r2, pc, #4	; (adr r2, 8008ff4 <UART_SetConfig+0x4e0>)
 8008ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff4:	0800900d 	.word	0x0800900d
 8008ff8:	08009015 	.word	0x08009015
 8008ffc:	0800901d 	.word	0x0800901d
 8009000:	08009025 	.word	0x08009025
 8009004:	0800902d 	.word	0x0800902d
 8009008:	08009035 	.word	0x08009035
 800900c:	2300      	movs	r3, #0
 800900e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009012:	e050      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8009014:	2304      	movs	r3, #4
 8009016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800901a:	e04c      	b.n	80090b6 <UART_SetConfig+0x5a2>
 800901c:	2308      	movs	r3, #8
 800901e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009022:	e048      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8009024:	2310      	movs	r3, #16
 8009026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800902a:	e044      	b.n	80090b6 <UART_SetConfig+0x5a2>
 800902c:	2320      	movs	r3, #32
 800902e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009032:	e040      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8009034:	2340      	movs	r3, #64	; 0x40
 8009036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800903a:	e03c      	b.n	80090b6 <UART_SetConfig+0x5a2>
 800903c:	2380      	movs	r3, #128	; 0x80
 800903e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009042:	e038      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a5c      	ldr	r2, [pc, #368]	; (80091bc <UART_SetConfig+0x6a8>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d130      	bne.n	80090b0 <UART_SetConfig+0x59c>
 800904e:	4b58      	ldr	r3, [pc, #352]	; (80091b0 <UART_SetConfig+0x69c>)
 8009050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009052:	f003 0307 	and.w	r3, r3, #7
 8009056:	2b05      	cmp	r3, #5
 8009058:	d826      	bhi.n	80090a8 <UART_SetConfig+0x594>
 800905a:	a201      	add	r2, pc, #4	; (adr r2, 8009060 <UART_SetConfig+0x54c>)
 800905c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009060:	08009079 	.word	0x08009079
 8009064:	08009081 	.word	0x08009081
 8009068:	08009089 	.word	0x08009089
 800906c:	08009091 	.word	0x08009091
 8009070:	08009099 	.word	0x08009099
 8009074:	080090a1 	.word	0x080090a1
 8009078:	2302      	movs	r3, #2
 800907a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800907e:	e01a      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8009080:	2304      	movs	r3, #4
 8009082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009086:	e016      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8009088:	2308      	movs	r3, #8
 800908a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800908e:	e012      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8009090:	2310      	movs	r3, #16
 8009092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009096:	e00e      	b.n	80090b6 <UART_SetConfig+0x5a2>
 8009098:	2320      	movs	r3, #32
 800909a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800909e:	e00a      	b.n	80090b6 <UART_SetConfig+0x5a2>
 80090a0:	2340      	movs	r3, #64	; 0x40
 80090a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090a6:	e006      	b.n	80090b6 <UART_SetConfig+0x5a2>
 80090a8:	2380      	movs	r3, #128	; 0x80
 80090aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090ae:	e002      	b.n	80090b6 <UART_SetConfig+0x5a2>
 80090b0:	2380      	movs	r3, #128	; 0x80
 80090b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a40      	ldr	r2, [pc, #256]	; (80091bc <UART_SetConfig+0x6a8>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	f040 80ef 	bne.w	80092a0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80090c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80090c6:	2b20      	cmp	r3, #32
 80090c8:	dc46      	bgt.n	8009158 <UART_SetConfig+0x644>
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	f2c0 8081 	blt.w	80091d2 <UART_SetConfig+0x6be>
 80090d0:	3b02      	subs	r3, #2
 80090d2:	2b1e      	cmp	r3, #30
 80090d4:	d87d      	bhi.n	80091d2 <UART_SetConfig+0x6be>
 80090d6:	a201      	add	r2, pc, #4	; (adr r2, 80090dc <UART_SetConfig+0x5c8>)
 80090d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090dc:	0800915f 	.word	0x0800915f
 80090e0:	080091d3 	.word	0x080091d3
 80090e4:	08009167 	.word	0x08009167
 80090e8:	080091d3 	.word	0x080091d3
 80090ec:	080091d3 	.word	0x080091d3
 80090f0:	080091d3 	.word	0x080091d3
 80090f4:	08009177 	.word	0x08009177
 80090f8:	080091d3 	.word	0x080091d3
 80090fc:	080091d3 	.word	0x080091d3
 8009100:	080091d3 	.word	0x080091d3
 8009104:	080091d3 	.word	0x080091d3
 8009108:	080091d3 	.word	0x080091d3
 800910c:	080091d3 	.word	0x080091d3
 8009110:	080091d3 	.word	0x080091d3
 8009114:	08009187 	.word	0x08009187
 8009118:	080091d3 	.word	0x080091d3
 800911c:	080091d3 	.word	0x080091d3
 8009120:	080091d3 	.word	0x080091d3
 8009124:	080091d3 	.word	0x080091d3
 8009128:	080091d3 	.word	0x080091d3
 800912c:	080091d3 	.word	0x080091d3
 8009130:	080091d3 	.word	0x080091d3
 8009134:	080091d3 	.word	0x080091d3
 8009138:	080091d3 	.word	0x080091d3
 800913c:	080091d3 	.word	0x080091d3
 8009140:	080091d3 	.word	0x080091d3
 8009144:	080091d3 	.word	0x080091d3
 8009148:	080091d3 	.word	0x080091d3
 800914c:	080091d3 	.word	0x080091d3
 8009150:	080091d3 	.word	0x080091d3
 8009154:	080091c5 	.word	0x080091c5
 8009158:	2b40      	cmp	r3, #64	; 0x40
 800915a:	d036      	beq.n	80091ca <UART_SetConfig+0x6b6>
 800915c:	e039      	b.n	80091d2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800915e:	f7fd fa83 	bl	8006668 <HAL_RCCEx_GetD3PCLK1Freq>
 8009162:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009164:	e03b      	b.n	80091de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009166:	f107 0314 	add.w	r3, r7, #20
 800916a:	4618      	mov	r0, r3
 800916c:	f7fd fa92 	bl	8006694 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009174:	e033      	b.n	80091de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009176:	f107 0308 	add.w	r3, r7, #8
 800917a:	4618      	mov	r0, r3
 800917c:	f7fd fbde 	bl	800693c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009184:	e02b      	b.n	80091de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009186:	4b0a      	ldr	r3, [pc, #40]	; (80091b0 <UART_SetConfig+0x69c>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f003 0320 	and.w	r3, r3, #32
 800918e:	2b00      	cmp	r3, #0
 8009190:	d009      	beq.n	80091a6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009192:	4b07      	ldr	r3, [pc, #28]	; (80091b0 <UART_SetConfig+0x69c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	08db      	lsrs	r3, r3, #3
 8009198:	f003 0303 	and.w	r3, r3, #3
 800919c:	4a08      	ldr	r2, [pc, #32]	; (80091c0 <UART_SetConfig+0x6ac>)
 800919e:	fa22 f303 	lsr.w	r3, r2, r3
 80091a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091a4:	e01b      	b.n	80091de <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80091a6:	4b06      	ldr	r3, [pc, #24]	; (80091c0 <UART_SetConfig+0x6ac>)
 80091a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091aa:	e018      	b.n	80091de <UART_SetConfig+0x6ca>
 80091ac:	40011400 	.word	0x40011400
 80091b0:	58024400 	.word	0x58024400
 80091b4:	40007800 	.word	0x40007800
 80091b8:	40007c00 	.word	0x40007c00
 80091bc:	58000c00 	.word	0x58000c00
 80091c0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091c4:	4bc4      	ldr	r3, [pc, #784]	; (80094d8 <UART_SetConfig+0x9c4>)
 80091c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091c8:	e009      	b.n	80091de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80091d0:	e005      	b.n	80091de <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80091dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 81da 	beq.w	800959a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ea:	4abc      	ldr	r2, [pc, #752]	; (80094dc <UART_SetConfig+0x9c8>)
 80091ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091f0:	461a      	mov	r2, r3
 80091f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80091f8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685a      	ldr	r2, [r3, #4]
 80091fe:	4613      	mov	r3, r2
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	4413      	add	r3, r2
 8009204:	6a3a      	ldr	r2, [r7, #32]
 8009206:	429a      	cmp	r2, r3
 8009208:	d305      	bcc.n	8009216 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009210:	6a3a      	ldr	r2, [r7, #32]
 8009212:	429a      	cmp	r2, r3
 8009214:	d903      	bls.n	800921e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800921c:	e1bd      	b.n	800959a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800921e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009220:	4618      	mov	r0, r3
 8009222:	f04f 0100 	mov.w	r1, #0
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922a:	4aac      	ldr	r2, [pc, #688]	; (80094dc <UART_SetConfig+0x9c8>)
 800922c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009230:	b29a      	uxth	r2, r3
 8009232:	f04f 0300 	mov.w	r3, #0
 8009236:	f7f7 f84f 	bl	80002d8 <__aeabi_uldivmod>
 800923a:	4602      	mov	r2, r0
 800923c:	460b      	mov	r3, r1
 800923e:	4610      	mov	r0, r2
 8009240:	4619      	mov	r1, r3
 8009242:	f04f 0200 	mov.w	r2, #0
 8009246:	f04f 0300 	mov.w	r3, #0
 800924a:	020b      	lsls	r3, r1, #8
 800924c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009250:	0202      	lsls	r2, r0, #8
 8009252:	6879      	ldr	r1, [r7, #4]
 8009254:	6849      	ldr	r1, [r1, #4]
 8009256:	0849      	lsrs	r1, r1, #1
 8009258:	4608      	mov	r0, r1
 800925a:	f04f 0100 	mov.w	r1, #0
 800925e:	1814      	adds	r4, r2, r0
 8009260:	eb43 0501 	adc.w	r5, r3, r1
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	461a      	mov	r2, r3
 800926a:	f04f 0300 	mov.w	r3, #0
 800926e:	4620      	mov	r0, r4
 8009270:	4629      	mov	r1, r5
 8009272:	f7f7 f831 	bl	80002d8 <__aeabi_uldivmod>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	4613      	mov	r3, r2
 800927c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800927e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009284:	d308      	bcc.n	8009298 <UART_SetConfig+0x784>
 8009286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009288:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800928c:	d204      	bcs.n	8009298 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009294:	60da      	str	r2, [r3, #12]
 8009296:	e180      	b.n	800959a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800929e:	e17c      	b.n	800959a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092a8:	f040 80bf 	bne.w	800942a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80092ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092b0:	2b20      	cmp	r3, #32
 80092b2:	dc49      	bgt.n	8009348 <UART_SetConfig+0x834>
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	db7c      	blt.n	80093b2 <UART_SetConfig+0x89e>
 80092b8:	2b20      	cmp	r3, #32
 80092ba:	d87a      	bhi.n	80093b2 <UART_SetConfig+0x89e>
 80092bc:	a201      	add	r2, pc, #4	; (adr r2, 80092c4 <UART_SetConfig+0x7b0>)
 80092be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c2:	bf00      	nop
 80092c4:	0800934f 	.word	0x0800934f
 80092c8:	08009357 	.word	0x08009357
 80092cc:	080093b3 	.word	0x080093b3
 80092d0:	080093b3 	.word	0x080093b3
 80092d4:	0800935f 	.word	0x0800935f
 80092d8:	080093b3 	.word	0x080093b3
 80092dc:	080093b3 	.word	0x080093b3
 80092e0:	080093b3 	.word	0x080093b3
 80092e4:	0800936f 	.word	0x0800936f
 80092e8:	080093b3 	.word	0x080093b3
 80092ec:	080093b3 	.word	0x080093b3
 80092f0:	080093b3 	.word	0x080093b3
 80092f4:	080093b3 	.word	0x080093b3
 80092f8:	080093b3 	.word	0x080093b3
 80092fc:	080093b3 	.word	0x080093b3
 8009300:	080093b3 	.word	0x080093b3
 8009304:	0800937f 	.word	0x0800937f
 8009308:	080093b3 	.word	0x080093b3
 800930c:	080093b3 	.word	0x080093b3
 8009310:	080093b3 	.word	0x080093b3
 8009314:	080093b3 	.word	0x080093b3
 8009318:	080093b3 	.word	0x080093b3
 800931c:	080093b3 	.word	0x080093b3
 8009320:	080093b3 	.word	0x080093b3
 8009324:	080093b3 	.word	0x080093b3
 8009328:	080093b3 	.word	0x080093b3
 800932c:	080093b3 	.word	0x080093b3
 8009330:	080093b3 	.word	0x080093b3
 8009334:	080093b3 	.word	0x080093b3
 8009338:	080093b3 	.word	0x080093b3
 800933c:	080093b3 	.word	0x080093b3
 8009340:	080093b3 	.word	0x080093b3
 8009344:	080093a5 	.word	0x080093a5
 8009348:	2b40      	cmp	r3, #64	; 0x40
 800934a:	d02e      	beq.n	80093aa <UART_SetConfig+0x896>
 800934c:	e031      	b.n	80093b2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800934e:	f7fc fa1f 	bl	8005790 <HAL_RCC_GetPCLK1Freq>
 8009352:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009354:	e033      	b.n	80093be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009356:	f7fc fa31 	bl	80057bc <HAL_RCC_GetPCLK2Freq>
 800935a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800935c:	e02f      	b.n	80093be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800935e:	f107 0314 	add.w	r3, r7, #20
 8009362:	4618      	mov	r0, r3
 8009364:	f7fd f996 	bl	8006694 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800936c:	e027      	b.n	80093be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800936e:	f107 0308 	add.w	r3, r7, #8
 8009372:	4618      	mov	r0, r3
 8009374:	f7fd fae2 	bl	800693c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800937c:	e01f      	b.n	80093be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800937e:	4b58      	ldr	r3, [pc, #352]	; (80094e0 <UART_SetConfig+0x9cc>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 0320 	and.w	r3, r3, #32
 8009386:	2b00      	cmp	r3, #0
 8009388:	d009      	beq.n	800939e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800938a:	4b55      	ldr	r3, [pc, #340]	; (80094e0 <UART_SetConfig+0x9cc>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	08db      	lsrs	r3, r3, #3
 8009390:	f003 0303 	and.w	r3, r3, #3
 8009394:	4a53      	ldr	r2, [pc, #332]	; (80094e4 <UART_SetConfig+0x9d0>)
 8009396:	fa22 f303 	lsr.w	r3, r2, r3
 800939a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800939c:	e00f      	b.n	80093be <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800939e:	4b51      	ldr	r3, [pc, #324]	; (80094e4 <UART_SetConfig+0x9d0>)
 80093a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093a2:	e00c      	b.n	80093be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093a4:	4b4c      	ldr	r3, [pc, #304]	; (80094d8 <UART_SetConfig+0x9c4>)
 80093a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093a8:	e009      	b.n	80093be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80093b0:	e005      	b.n	80093be <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80093bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 80ea 	beq.w	800959a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ca:	4a44      	ldr	r2, [pc, #272]	; (80094dc <UART_SetConfig+0x9c8>)
 80093cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093d0:	461a      	mov	r2, r3
 80093d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80093d8:	005a      	lsls	r2, r3, #1
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	085b      	lsrs	r3, r3, #1
 80093e0:	441a      	add	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f0:	2b0f      	cmp	r3, #15
 80093f2:	d916      	bls.n	8009422 <UART_SetConfig+0x90e>
 80093f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093fa:	d212      	bcs.n	8009422 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fe:	b29b      	uxth	r3, r3
 8009400:	f023 030f 	bic.w	r3, r3, #15
 8009404:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009408:	085b      	lsrs	r3, r3, #1
 800940a:	b29b      	uxth	r3, r3
 800940c:	f003 0307 	and.w	r3, r3, #7
 8009410:	b29a      	uxth	r2, r3
 8009412:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009414:	4313      	orrs	r3, r2
 8009416:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800941e:	60da      	str	r2, [r3, #12]
 8009420:	e0bb      	b.n	800959a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009428:	e0b7      	b.n	800959a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800942a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800942e:	2b20      	cmp	r3, #32
 8009430:	dc4a      	bgt.n	80094c8 <UART_SetConfig+0x9b4>
 8009432:	2b00      	cmp	r3, #0
 8009434:	f2c0 8086 	blt.w	8009544 <UART_SetConfig+0xa30>
 8009438:	2b20      	cmp	r3, #32
 800943a:	f200 8083 	bhi.w	8009544 <UART_SetConfig+0xa30>
 800943e:	a201      	add	r2, pc, #4	; (adr r2, 8009444 <UART_SetConfig+0x930>)
 8009440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009444:	080094cf 	.word	0x080094cf
 8009448:	080094e9 	.word	0x080094e9
 800944c:	08009545 	.word	0x08009545
 8009450:	08009545 	.word	0x08009545
 8009454:	080094f1 	.word	0x080094f1
 8009458:	08009545 	.word	0x08009545
 800945c:	08009545 	.word	0x08009545
 8009460:	08009545 	.word	0x08009545
 8009464:	08009501 	.word	0x08009501
 8009468:	08009545 	.word	0x08009545
 800946c:	08009545 	.word	0x08009545
 8009470:	08009545 	.word	0x08009545
 8009474:	08009545 	.word	0x08009545
 8009478:	08009545 	.word	0x08009545
 800947c:	08009545 	.word	0x08009545
 8009480:	08009545 	.word	0x08009545
 8009484:	08009511 	.word	0x08009511
 8009488:	08009545 	.word	0x08009545
 800948c:	08009545 	.word	0x08009545
 8009490:	08009545 	.word	0x08009545
 8009494:	08009545 	.word	0x08009545
 8009498:	08009545 	.word	0x08009545
 800949c:	08009545 	.word	0x08009545
 80094a0:	08009545 	.word	0x08009545
 80094a4:	08009545 	.word	0x08009545
 80094a8:	08009545 	.word	0x08009545
 80094ac:	08009545 	.word	0x08009545
 80094b0:	08009545 	.word	0x08009545
 80094b4:	08009545 	.word	0x08009545
 80094b8:	08009545 	.word	0x08009545
 80094bc:	08009545 	.word	0x08009545
 80094c0:	08009545 	.word	0x08009545
 80094c4:	08009537 	.word	0x08009537
 80094c8:	2b40      	cmp	r3, #64	; 0x40
 80094ca:	d037      	beq.n	800953c <UART_SetConfig+0xa28>
 80094cc:	e03a      	b.n	8009544 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094ce:	f7fc f95f 	bl	8005790 <HAL_RCC_GetPCLK1Freq>
 80094d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80094d4:	e03c      	b.n	8009550 <UART_SetConfig+0xa3c>
 80094d6:	bf00      	nop
 80094d8:	003d0900 	.word	0x003d0900
 80094dc:	0800a678 	.word	0x0800a678
 80094e0:	58024400 	.word	0x58024400
 80094e4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094e8:	f7fc f968 	bl	80057bc <HAL_RCC_GetPCLK2Freq>
 80094ec:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80094ee:	e02f      	b.n	8009550 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094f0:	f107 0314 	add.w	r3, r7, #20
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7fd f8cd 	bl	8006694 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80094fe:	e027      	b.n	8009550 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009500:	f107 0308 	add.w	r3, r7, #8
 8009504:	4618      	mov	r0, r3
 8009506:	f7fd fa19 	bl	800693c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800950e:	e01f      	b.n	8009550 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009510:	4b2c      	ldr	r3, [pc, #176]	; (80095c4 <UART_SetConfig+0xab0>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0320 	and.w	r3, r3, #32
 8009518:	2b00      	cmp	r3, #0
 800951a:	d009      	beq.n	8009530 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800951c:	4b29      	ldr	r3, [pc, #164]	; (80095c4 <UART_SetConfig+0xab0>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	08db      	lsrs	r3, r3, #3
 8009522:	f003 0303 	and.w	r3, r3, #3
 8009526:	4a28      	ldr	r2, [pc, #160]	; (80095c8 <UART_SetConfig+0xab4>)
 8009528:	fa22 f303 	lsr.w	r3, r2, r3
 800952c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800952e:	e00f      	b.n	8009550 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8009530:	4b25      	ldr	r3, [pc, #148]	; (80095c8 <UART_SetConfig+0xab4>)
 8009532:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009534:	e00c      	b.n	8009550 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009536:	4b25      	ldr	r3, [pc, #148]	; (80095cc <UART_SetConfig+0xab8>)
 8009538:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800953a:	e009      	b.n	8009550 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800953c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009540:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009542:	e005      	b.n	8009550 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8009544:	2300      	movs	r3, #0
 8009546:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800954e:	bf00      	nop
    }

    if (pclk != 0U)
 8009550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009552:	2b00      	cmp	r3, #0
 8009554:	d021      	beq.n	800959a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955a:	4a1d      	ldr	r2, [pc, #116]	; (80095d0 <UART_SetConfig+0xabc>)
 800955c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009560:	461a      	mov	r2, r3
 8009562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009564:	fbb3 f2f2 	udiv	r2, r3, r2
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	085b      	lsrs	r3, r3, #1
 800956e:	441a      	add	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	fbb2 f3f3 	udiv	r3, r2, r3
 8009578:	b29b      	uxth	r3, r3
 800957a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	2b0f      	cmp	r3, #15
 8009580:	d908      	bls.n	8009594 <UART_SetConfig+0xa80>
 8009582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009588:	d204      	bcs.n	8009594 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009590:	60da      	str	r2, [r3, #12]
 8009592:	e002      	b.n	800959a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80095b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3738      	adds	r7, #56	; 0x38
 80095be:	46bd      	mov	sp, r7
 80095c0:	bdb0      	pop	{r4, r5, r7, pc}
 80095c2:	bf00      	nop
 80095c4:	58024400 	.word	0x58024400
 80095c8:	03d09000 	.word	0x03d09000
 80095cc:	003d0900 	.word	0x003d0900
 80095d0:	0800a678 	.word	0x0800a678

080095d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e0:	f003 0301 	and.w	r3, r3, #1
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d00a      	beq.n	80095fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	430a      	orrs	r2, r1
 80095fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009602:	f003 0302 	and.w	r3, r3, #2
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00a      	beq.n	8009620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	430a      	orrs	r2, r1
 800961e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009624:	f003 0304 	and.w	r3, r3, #4
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00a      	beq.n	8009642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	430a      	orrs	r2, r1
 8009640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009646:	f003 0308 	and.w	r3, r3, #8
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00a      	beq.n	8009664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	430a      	orrs	r2, r1
 8009662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009668:	f003 0310 	and.w	r3, r3, #16
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00a      	beq.n	8009686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	430a      	orrs	r2, r1
 8009684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968a:	f003 0320 	and.w	r3, r3, #32
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00a      	beq.n	80096a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	430a      	orrs	r2, r1
 80096a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d01a      	beq.n	80096ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	430a      	orrs	r2, r1
 80096c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096d2:	d10a      	bne.n	80096ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	430a      	orrs	r2, r1
 80096e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00a      	beq.n	800970c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	430a      	orrs	r2, r1
 800970a:	605a      	str	r2, [r3, #4]
  }
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr

08009718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af02      	add	r7, sp, #8
 800971e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009728:	f7f8 fb58 	bl	8001ddc <HAL_GetTick>
 800972c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f003 0308 	and.w	r3, r3, #8
 8009738:	2b08      	cmp	r3, #8
 800973a:	d10e      	bne.n	800975a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800973c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f82f 	bl	80097ae <UART_WaitOnFlagUntilTimeout>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e025      	b.n	80097a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 0304 	and.w	r3, r3, #4
 8009764:	2b04      	cmp	r3, #4
 8009766:	d10e      	bne.n	8009786 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f819 	bl	80097ae <UART_WaitOnFlagUntilTimeout>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d001      	beq.n	8009786 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009782:	2303      	movs	r3, #3
 8009784:	e00f      	b.n	80097a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2220      	movs	r2, #32
 800978a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2220      	movs	r2, #32
 8009792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b084      	sub	sp, #16
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	60f8      	str	r0, [r7, #12]
 80097b6:	60b9      	str	r1, [r7, #8]
 80097b8:	603b      	str	r3, [r7, #0]
 80097ba:	4613      	mov	r3, r2
 80097bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097be:	e062      	b.n	8009886 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c6:	d05e      	beq.n	8009886 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097c8:	f7f8 fb08 	bl	8001ddc <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	69ba      	ldr	r2, [r7, #24]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d302      	bcc.n	80097de <UART_WaitOnFlagUntilTimeout+0x30>
 80097d8:	69bb      	ldr	r3, [r7, #24]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d11d      	bne.n	800981a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80097ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	689a      	ldr	r2, [r3, #8]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f022 0201 	bic.w	r2, r2, #1
 80097fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2220      	movs	r2, #32
 8009802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2220      	movs	r2, #32
 800980a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009816:	2303      	movs	r3, #3
 8009818:	e045      	b.n	80098a6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 0304 	and.w	r3, r3, #4
 8009824:	2b00      	cmp	r3, #0
 8009826:	d02e      	beq.n	8009886 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009836:	d126      	bne.n	8009886 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009840:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009850:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689a      	ldr	r2, [r3, #8]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f022 0201 	bic.w	r2, r2, #1
 8009860:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2220      	movs	r2, #32
 8009866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2220      	movs	r2, #32
 800986e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2220      	movs	r2, #32
 8009876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e00f      	b.n	80098a6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	69da      	ldr	r2, [r3, #28]
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	4013      	ands	r3, r2
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	429a      	cmp	r2, r3
 8009894:	bf0c      	ite	eq
 8009896:	2301      	moveq	r3, #1
 8009898:	2300      	movne	r3, #0
 800989a:	b2db      	uxtb	r3, r3
 800989c:	461a      	mov	r2, r3
 800989e:	79fb      	ldrb	r3, [r7, #7]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d08d      	beq.n	80097c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
	...

080098b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	4613      	mov	r3, r2
 80098bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	88fa      	ldrh	r2, [r7, #6]
 80098c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	88fa      	ldrh	r2, [r7, #6]
 80098d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2200      	movs	r2, #0
 80098d8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098e2:	d10e      	bne.n	8009902 <UART_Start_Receive_IT+0x52>
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d105      	bne.n	80098f8 <UART_Start_Receive_IT+0x48>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80098f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80098f6:	e02d      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	22ff      	movs	r2, #255	; 0xff
 80098fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009900:	e028      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10d      	bne.n	8009926 <UART_Start_Receive_IT+0x76>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d104      	bne.n	800991c <UART_Start_Receive_IT+0x6c>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	22ff      	movs	r2, #255	; 0xff
 8009916:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800991a:	e01b      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	227f      	movs	r2, #127	; 0x7f
 8009920:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009924:	e016      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800992e:	d10d      	bne.n	800994c <UART_Start_Receive_IT+0x9c>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d104      	bne.n	8009942 <UART_Start_Receive_IT+0x92>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	227f      	movs	r2, #127	; 0x7f
 800993c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009940:	e008      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	223f      	movs	r2, #63	; 0x3f
 8009946:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800994a:	e003      	b.n	8009954 <UART_Start_Receive_IT+0xa4>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2222      	movs	r2, #34	; 0x22
 8009960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689a      	ldr	r2, [r3, #8]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f042 0201 	orr.w	r2, r2, #1
 8009972:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800997c:	d12a      	bne.n	80099d4 <UART_Start_Receive_IT+0x124>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009984:	88fa      	ldrh	r2, [r7, #6]
 8009986:	429a      	cmp	r2, r3
 8009988:	d324      	bcc.n	80099d4 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009992:	d107      	bne.n	80099a4 <UART_Start_Receive_IT+0xf4>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d103      	bne.n	80099a4 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4a1f      	ldr	r2, [pc, #124]	; (8009a1c <UART_Start_Receive_IT+0x16c>)
 80099a0:	671a      	str	r2, [r3, #112]	; 0x70
 80099a2:	e002      	b.n	80099aa <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4a1e      	ldr	r2, [pc, #120]	; (8009a20 <UART_Start_Receive_IT+0x170>)
 80099a8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099c0:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	689a      	ldr	r2, [r3, #8]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80099d0:	609a      	str	r2, [r3, #8]
 80099d2:	e01b      	b.n	8009a0c <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099dc:	d107      	bne.n	80099ee <UART_Start_Receive_IT+0x13e>
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d103      	bne.n	80099ee <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	4a0e      	ldr	r2, [pc, #56]	; (8009a24 <UART_Start_Receive_IT+0x174>)
 80099ea:	671a      	str	r2, [r3, #112]	; 0x70
 80099ec:	e002      	b.n	80099f4 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	4a0d      	ldr	r2, [pc, #52]	; (8009a28 <UART_Start_Receive_IT+0x178>)
 80099f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009a0a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	0800a0d5 	.word	0x0800a0d5
 8009a20:	08009ed1 	.word	0x08009ed1
 8009a24:	08009df9 	.word	0x08009df9
 8009a28:	08009d21 	.word	0x08009d21

08009a2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009a42:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6899      	ldr	r1, [r3, #8]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	4b0f      	ldr	r3, [pc, #60]	; (8009a8c <UART_EndRxTransfer+0x60>)
 8009a50:	400b      	ands	r3, r1
 8009a52:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d107      	bne.n	8009a6c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f022 0210 	bic.w	r2, r2, #16
 8009a6a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2220      	movs	r2, #32
 8009a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	effffffe 	.word	0xeffffffe

08009a90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f7ff f81a 	bl	8008ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ab4:	bf00      	nop
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009aca:	2b21      	cmp	r3, #33	; 0x21
 8009acc:	d12a      	bne.n	8009b24 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d110      	bne.n	8009afc <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ae8:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009af8:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009afa:	e013      	b.n	8009b24 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b00:	781a      	ldrb	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b0c:	1c5a      	adds	r2, r3, #1
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b3e:	2b21      	cmp	r3, #33	; 0x21
 8009b40:	d12f      	bne.n	8009ba2 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d110      	bne.n	8009b70 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b5c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b6c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009b6e:	e018      	b.n	8009ba2 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b74:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	881b      	ldrh	r3, [r3, #0]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b84:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b8a:	1c9a      	adds	r2, r3, #2
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8009ba2:	bf00      	nop
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr

08009bae <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009bae:	b480      	push	{r7}
 8009bb0:	b085      	sub	sp, #20
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bbc:	2b21      	cmp	r3, #33	; 0x21
 8009bbe:	d13d      	bne.n	8009c3c <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009bc6:	81fb      	strh	r3, [r7, #14]
 8009bc8:	e035      	b.n	8009c36 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d111      	bne.n	8009bfa <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	689a      	ldr	r2, [r3, #8]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009be4:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bf4:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8009bf6:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8009bf8:	e020      	b.n	8009c3c <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	69db      	ldr	r3, [r3, #28]
 8009c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d013      	beq.n	8009c30 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c0c:	781a      	ldrb	r2, [r3, #0]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c18:	1c5a      	adds	r2, r3, #1
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	3b01      	subs	r3, #1
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c30:	89fb      	ldrh	r3, [r7, #14]
 8009c32:	3b01      	subs	r3, #1
 8009c34:	81fb      	strh	r3, [r7, #14]
 8009c36:	89fb      	ldrh	r3, [r7, #14]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1c6      	bne.n	8009bca <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8009c3c:	bf00      	nop
 8009c3e:	3714      	adds	r7, #20
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c56:	2b21      	cmp	r3, #33	; 0x21
 8009c58:	d142      	bne.n	8009ce0 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009c60:	81fb      	strh	r3, [r7, #14]
 8009c62:	e03a      	b.n	8009cda <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d111      	bne.n	8009c94 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	689a      	ldr	r2, [r3, #8]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8009c7e:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c8e:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8009c90:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8009c92:	e025      	b.n	8009ce0 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	69db      	ldr	r3, [r3, #28]
 8009c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d018      	beq.n	8009cd4 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ca6:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	461a      	mov	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cb6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cbc:	1c9a      	adds	r2, r3, #2
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009cd4:	89fb      	ldrh	r3, [r7, #14]
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	81fb      	strh	r3, [r7, #14]
 8009cda:	89fb      	ldrh	r3, [r7, #14]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d1c1      	bne.n	8009c64 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8009ce0:	bf00      	nop
 8009ce2:	3714      	adds	r7, #20
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d02:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2220      	movs	r2, #32
 8009d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7f7 facc 	bl	80012b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d18:	bf00      	nop
 8009d1a:	3708      	adds	r7, #8
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d2e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d36:	2b22      	cmp	r3, #34	; 0x22
 8009d38:	d152      	bne.n	8009de0 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d40:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d42:	89bb      	ldrh	r3, [r7, #12]
 8009d44:	b2d9      	uxtb	r1, r3
 8009d46:	89fb      	ldrh	r3, [r7, #14]
 8009d48:	b2da      	uxtb	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d4e:	400a      	ands	r2, r1
 8009d50:	b2d2      	uxtb	r2, r2
 8009d52:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d58:	1c5a      	adds	r2, r3, #1
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	3b01      	subs	r3, #1
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d139      	bne.n	8009df0 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009d8a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	689a      	ldr	r2, [r3, #8]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f022 0201 	bic.w	r2, r2, #1
 8009d9a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2220      	movs	r2, #32
 8009da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d10f      	bne.n	8009dd2 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f022 0210 	bic.w	r2, r2, #16
 8009dc0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009dc8:	4619      	mov	r1, r3
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f7fe fe96 	bl	8008afc <HAL_UARTEx_RxEventCallback>
 8009dd0:	e002      	b.n	8009dd8 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f7f7 fa56 	bl	8001284 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009dde:	e007      	b.n	8009df0 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	699a      	ldr	r2, [r3, #24]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f042 0208 	orr.w	r2, r2, #8
 8009dee:	619a      	str	r2, [r3, #24]
}
 8009df0:	bf00      	nop
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009e06:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e0e:	2b22      	cmp	r3, #34	; 0x22
 8009e10:	d152      	bne.n	8009eb8 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e18:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e1e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009e20:	89ba      	ldrh	r2, [r7, #12]
 8009e22:	89fb      	ldrh	r3, [r7, #14]
 8009e24:	4013      	ands	r3, r2
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e30:	1c9a      	adds	r2, r3, #2
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d139      	bne.n	8009ec8 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009e62:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	689a      	ldr	r2, [r3, #8]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f022 0201 	bic.w	r2, r2, #1
 8009e72:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2220      	movs	r2, #32
 8009e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d10f      	bne.n	8009eaa <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f022 0210 	bic.w	r2, r2, #16
 8009e98:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f7fe fe2a 	bl	8008afc <HAL_UARTEx_RxEventCallback>
 8009ea8:	e002      	b.n	8009eb0 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7f7 f9ea 	bl	8001284 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009eb6:	e007      	b.n	8009ec8 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	699a      	ldr	r2, [r3, #24]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f042 0208 	orr.w	r2, r2, #8
 8009ec6:	619a      	str	r2, [r3, #24]
}
 8009ec8:	bf00      	nop
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b088      	sub	sp, #32
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ede:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	69db      	ldr	r3, [r3, #28]
 8009ee6:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009efe:	2b22      	cmp	r3, #34	; 0x22
 8009f00:	f040 80d8 	bne.w	800a0b4 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f0a:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f0c:	e0a8      	b.n	800a060 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f14:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f16:	89bb      	ldrh	r3, [r7, #12]
 8009f18:	b2d9      	uxtb	r1, r3
 8009f1a:	8b7b      	ldrh	r3, [r7, #26]
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f22:	400a      	ands	r2, r1
 8009f24:	b2d2      	uxtb	r2, r2
 8009f26:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f2c:	1c5a      	adds	r2, r3, #1
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	f003 0307 	and.w	r3, r3, #7
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d04d      	beq.n	8009ff2 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	f003 0301 	and.w	r3, r3, #1
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d010      	beq.n	8009f82 <UART_RxISR_8BIT_FIFOEN+0xb2>
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00b      	beq.n	8009f82 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f78:	f043 0201 	orr.w	r2, r3, #1
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	f003 0302 	and.w	r3, r3, #2
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d010      	beq.n	8009fae <UART_RxISR_8BIT_FIFOEN+0xde>
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f003 0301 	and.w	r3, r3, #1
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00b      	beq.n	8009fae <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fa4:	f043 0204 	orr.w	r2, r3, #4
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	f003 0304 	and.w	r3, r3, #4
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d010      	beq.n	8009fda <UART_RxISR_8BIT_FIFOEN+0x10a>
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00b      	beq.n	8009fda <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2204      	movs	r2, #4
 8009fc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fd0:	f043 0202 	orr.w	r2, r3, #2
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d006      	beq.n	8009ff2 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7fe fd7f 	bl	8008ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ff8:	b29b      	uxth	r3, r3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d130      	bne.n	800a060 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a00c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	6899      	ldr	r1, [r3, #8]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	4b2c      	ldr	r3, [pc, #176]	; (800a0cc <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800a01a:	400b      	ands	r3, r1
 800a01c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2220      	movs	r2, #32
 800a022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a030:	2b01      	cmp	r3, #1
 800a032:	d10f      	bne.n	800a054 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f022 0210 	bic.w	r2, r2, #16
 800a042:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a04a:	4619      	mov	r1, r3
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f7fe fd55 	bl	8008afc <HAL_UARTEx_RxEventCallback>
 800a052:	e002      	b.n	800a05a <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7f7 f915 	bl	8001284 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a060:	89fb      	ldrh	r3, [r7, #14]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d005      	beq.n	800a072 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	f003 0320 	and.w	r3, r3, #32
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f47f af4e 	bne.w	8009f0e <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a078:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a07a:	897b      	ldrh	r3, [r7, #10]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d021      	beq.n	800a0c4 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a086:	897a      	ldrh	r2, [r7, #10]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d21b      	bcs.n	800a0c4 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	689a      	ldr	r2, [r3, #8]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a09a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a0c      	ldr	r2, [pc, #48]	; (800a0d0 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800a0a0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f042 0220 	orr.w	r2, r2, #32
 800a0b0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a0b2:	e007      	b.n	800a0c4 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	699a      	ldr	r2, [r3, #24]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f042 0208 	orr.w	r2, r2, #8
 800a0c2:	619a      	str	r2, [r3, #24]
}
 800a0c4:	bf00      	nop
 800a0c6:	3720      	adds	r7, #32
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	effffffe 	.word	0xeffffffe
 800a0d0:	08009d21 	.word	0x08009d21

0800a0d4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b08a      	sub	sp, #40	; 0x28
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a0e2:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	69db      	ldr	r3, [r3, #28]
 800a0ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a102:	2b22      	cmp	r3, #34	; 0x22
 800a104:	f040 80d8 	bne.w	800a2b8 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a10e:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a110:	e0a8      	b.n	800a264 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a118:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a11e:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800a120:	8aba      	ldrh	r2, [r7, #20]
 800a122:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a124:	4013      	ands	r3, r2
 800a126:	b29a      	uxth	r2, r3
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a130:	1c9a      	adds	r2, r3, #2
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	3b01      	subs	r3, #1
 800a140:	b29a      	uxth	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	69db      	ldr	r3, [r3, #28]
 800a14e:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a152:	f003 0307 	and.w	r3, r3, #7
 800a156:	2b00      	cmp	r3, #0
 800a158:	d04d      	beq.n	800a1f6 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	f003 0301 	and.w	r3, r3, #1
 800a160:	2b00      	cmp	r3, #0
 800a162:	d010      	beq.n	800a186 <UART_RxISR_16BIT_FIFOEN+0xb2>
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00b      	beq.n	800a186 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2201      	movs	r2, #1
 800a174:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a17c:	f043 0201 	orr.w	r2, r3, #1
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a188:	f003 0302 	and.w	r3, r3, #2
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d010      	beq.n	800a1b2 <UART_RxISR_16BIT_FIFOEN+0xde>
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00b      	beq.n	800a1b2 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2202      	movs	r2, #2
 800a1a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1a8:	f043 0204 	orr.w	r2, r3, #4
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b4:	f003 0304 	and.w	r3, r3, #4
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d010      	beq.n	800a1de <UART_RxISR_16BIT_FIFOEN+0x10a>
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00b      	beq.n	800a1de <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2204      	movs	r2, #4
 800a1cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1d4:	f043 0202 	orr.w	r2, r3, #2
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d006      	beq.n	800a1f6 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7fe fc7d 	bl	8008ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d130      	bne.n	800a264 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a210:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	6899      	ldr	r1, [r3, #8]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	4b2c      	ldr	r3, [pc, #176]	; (800a2d0 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800a21e:	400b      	ands	r3, r1
 800a220:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2220      	movs	r2, #32
 800a226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a234:	2b01      	cmp	r3, #1
 800a236:	d10f      	bne.n	800a258 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f022 0210 	bic.w	r2, r2, #16
 800a246:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a24e:	4619      	mov	r1, r3
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f7fe fc53 	bl	8008afc <HAL_UARTEx_RxEventCallback>
 800a256:	e002      	b.n	800a25e <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7f7 f813 	bl	8001284 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a264:	8afb      	ldrh	r3, [r7, #22]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d005      	beq.n	800a276 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	f003 0320 	and.w	r3, r3, #32
 800a270:	2b00      	cmp	r3, #0
 800a272:	f47f af4e 	bne.w	800a112 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a27c:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a27e:	89fb      	ldrh	r3, [r7, #14]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d021      	beq.n	800a2c8 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a28a:	89fa      	ldrh	r2, [r7, #14]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d21b      	bcs.n	800a2c8 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689a      	ldr	r2, [r3, #8]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a29e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a0c      	ldr	r2, [pc, #48]	; (800a2d4 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800a2a4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f042 0220 	orr.w	r2, r2, #32
 800a2b4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2b6:	e007      	b.n	800a2c8 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	699a      	ldr	r2, [r3, #24]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f042 0208 	orr.w	r2, r2, #8
 800a2c6:	619a      	str	r2, [r3, #24]
}
 800a2c8:	bf00      	nop
 800a2ca:	3728      	adds	r7, #40	; 0x28
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	effffffe 	.word	0xeffffffe
 800a2d4:	08009df9 	.word	0x08009df9

0800a2d8 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	607a      	str	r2, [r7, #4]
 800a2e4:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d101      	bne.n	800a2f0 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	e056      	b.n	800a39e <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d106      	bne.n	800a308 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f7f7 f9ee 	bl	80016e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2224      	movs	r2, #36	; 0x24
 800a30c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f022 0201 	bic.w	r2, r2, #1
 800a31e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a320:	68f8      	ldr	r0, [r7, #12]
 800a322:	f7fe fbf7 	bl	8008b14 <UART_SetConfig>
 800a326:	4603      	mov	r3, r0
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d101      	bne.n	800a330 <HAL_RS485Ex_Init+0x58>
  {
    return HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	e036      	b.n	800a39e <HAL_RS485Ex_Init+0xc6>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a334:	2b00      	cmp	r3, #0
 800a336:	d002      	beq.n	800a33e <HAL_RS485Ex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800a338:	68f8      	ldr	r0, [r7, #12]
 800a33a:	f7ff f94b 	bl	80095d4 <UART_AdvFeatureConfig>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a34c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	430a      	orrs	r2, r1
 800a360:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	055b      	lsls	r3, r3, #21
 800a366:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	041b      	lsls	r3, r3, #16
 800a36c:	697a      	ldr	r2, [r7, #20]
 800a36e:	4313      	orrs	r3, r2
 800a370:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	4b0b      	ldr	r3, [pc, #44]	; (800a3a8 <HAL_RS485Ex_Init+0xd0>)
 800a37a:	4013      	ands	r3, r2
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	6812      	ldr	r2, [r2, #0]
 800a380:	6979      	ldr	r1, [r7, #20]
 800a382:	430b      	orrs	r3, r1
 800a384:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f042 0201 	orr.w	r2, r2, #1
 800a394:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f7ff f9be 	bl	8009718 <UART_CheckIdleState>
 800a39c:	4603      	mov	r3, r0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3718      	adds	r7, #24
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	fc00ffff 	.word	0xfc00ffff

0800a3ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a3b4:	bf00      	nop
 800a3b6:	370c      	adds	r7, #12
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a3c8:	bf00      	nop
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a3dc:	bf00      	nop
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d101      	bne.n	800a3fe <HAL_UARTEx_DisableFifoMode+0x16>
 800a3fa:	2302      	movs	r3, #2
 800a3fc:	e027      	b.n	800a44e <HAL_UARTEx_DisableFifoMode+0x66>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2224      	movs	r2, #36	; 0x24
 800a40a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f022 0201 	bic.w	r2, r2, #1
 800a424:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a42c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2200      	movs	r2, #0
 800a432:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2220      	movs	r2, #32
 800a440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3714      	adds	r7, #20
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b084      	sub	sp, #16
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d101      	bne.n	800a472 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a46e:	2302      	movs	r3, #2
 800a470:	e02d      	b.n	800a4ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2201      	movs	r2, #1
 800a476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2224      	movs	r2, #36	; 0x24
 800a47e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f022 0201 	bic.w	r2, r2, #1
 800a498:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	683a      	ldr	r2, [r7, #0]
 800a4aa:	430a      	orrs	r2, r1
 800a4ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f850 	bl	800a554 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2220      	movs	r2, #32
 800a4c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b084      	sub	sp, #16
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d101      	bne.n	800a4ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	e02d      	b.n	800a54a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2224      	movs	r2, #36	; 0x24
 800a4fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f022 0201 	bic.w	r2, r2, #1
 800a514:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	689b      	ldr	r3, [r3, #8]
 800a51c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	683a      	ldr	r2, [r7, #0]
 800a526:	430a      	orrs	r2, r1
 800a528:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 f812 	bl	800a554 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2220      	movs	r2, #32
 800a53c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a548:	2300      	movs	r3, #0
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
	...

0800a554 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a554:	b480      	push	{r7}
 800a556:	b085      	sub	sp, #20
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a560:	2b00      	cmp	r3, #0
 800a562:	d108      	bne.n	800a576 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a574:	e031      	b.n	800a5da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a576:	2310      	movs	r3, #16
 800a578:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a57a:	2310      	movs	r3, #16
 800a57c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	0e5b      	lsrs	r3, r3, #25
 800a586:	b2db      	uxtb	r3, r3
 800a588:	f003 0307 	and.w	r3, r3, #7
 800a58c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	0f5b      	lsrs	r3, r3, #29
 800a596:	b2db      	uxtb	r3, r3
 800a598:	f003 0307 	and.w	r3, r3, #7
 800a59c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a59e:	7bbb      	ldrb	r3, [r7, #14]
 800a5a0:	7b3a      	ldrb	r2, [r7, #12]
 800a5a2:	4911      	ldr	r1, [pc, #68]	; (800a5e8 <UARTEx_SetNbDataToProcess+0x94>)
 800a5a4:	5c8a      	ldrb	r2, [r1, r2]
 800a5a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a5aa:	7b3a      	ldrb	r2, [r7, #12]
 800a5ac:	490f      	ldr	r1, [pc, #60]	; (800a5ec <UARTEx_SetNbDataToProcess+0x98>)
 800a5ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a5b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5bc:	7bfb      	ldrb	r3, [r7, #15]
 800a5be:	7b7a      	ldrb	r2, [r7, #13]
 800a5c0:	4909      	ldr	r1, [pc, #36]	; (800a5e8 <UARTEx_SetNbDataToProcess+0x94>)
 800a5c2:	5c8a      	ldrb	r2, [r1, r2]
 800a5c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a5c8:	7b7a      	ldrb	r2, [r7, #13]
 800a5ca:	4908      	ldr	r1, [pc, #32]	; (800a5ec <UARTEx_SetNbDataToProcess+0x98>)
 800a5cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a5ce:	fb93 f3f2 	sdiv	r3, r3, r2
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a5da:	bf00      	nop
 800a5dc:	3714      	adds	r7, #20
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr
 800a5e6:	bf00      	nop
 800a5e8:	0800a690 	.word	0x0800a690
 800a5ec:	0800a698 	.word	0x0800a698

0800a5f0 <__libc_init_array>:
 800a5f0:	b570      	push	{r4, r5, r6, lr}
 800a5f2:	4d0d      	ldr	r5, [pc, #52]	; (800a628 <__libc_init_array+0x38>)
 800a5f4:	4c0d      	ldr	r4, [pc, #52]	; (800a62c <__libc_init_array+0x3c>)
 800a5f6:	1b64      	subs	r4, r4, r5
 800a5f8:	10a4      	asrs	r4, r4, #2
 800a5fa:	2600      	movs	r6, #0
 800a5fc:	42a6      	cmp	r6, r4
 800a5fe:	d109      	bne.n	800a614 <__libc_init_array+0x24>
 800a600:	4d0b      	ldr	r5, [pc, #44]	; (800a630 <__libc_init_array+0x40>)
 800a602:	4c0c      	ldr	r4, [pc, #48]	; (800a634 <__libc_init_array+0x44>)
 800a604:	f000 f820 	bl	800a648 <_init>
 800a608:	1b64      	subs	r4, r4, r5
 800a60a:	10a4      	asrs	r4, r4, #2
 800a60c:	2600      	movs	r6, #0
 800a60e:	42a6      	cmp	r6, r4
 800a610:	d105      	bne.n	800a61e <__libc_init_array+0x2e>
 800a612:	bd70      	pop	{r4, r5, r6, pc}
 800a614:	f855 3b04 	ldr.w	r3, [r5], #4
 800a618:	4798      	blx	r3
 800a61a:	3601      	adds	r6, #1
 800a61c:	e7ee      	b.n	800a5fc <__libc_init_array+0xc>
 800a61e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a622:	4798      	blx	r3
 800a624:	3601      	adds	r6, #1
 800a626:	e7f2      	b.n	800a60e <__libc_init_array+0x1e>
 800a628:	0800a6a8 	.word	0x0800a6a8
 800a62c:	0800a6a8 	.word	0x0800a6a8
 800a630:	0800a6a8 	.word	0x0800a6a8
 800a634:	0800a6ac 	.word	0x0800a6ac

0800a638 <memset>:
 800a638:	4402      	add	r2, r0
 800a63a:	4603      	mov	r3, r0
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d100      	bne.n	800a642 <memset+0xa>
 800a640:	4770      	bx	lr
 800a642:	f803 1b01 	strb.w	r1, [r3], #1
 800a646:	e7f9      	b.n	800a63c <memset+0x4>

0800a648 <_init>:
 800a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64a:	bf00      	nop
 800a64c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a64e:	bc08      	pop	{r3}
 800a650:	469e      	mov	lr, r3
 800a652:	4770      	bx	lr

0800a654 <_fini>:
 800a654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a656:	bf00      	nop
 800a658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a65a:	bc08      	pop	{r3}
 800a65c:	469e      	mov	lr, r3
 800a65e:	4770      	bx	lr
