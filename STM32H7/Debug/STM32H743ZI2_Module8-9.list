
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9c0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  0800fc60  0800fc60  0001fc60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010304  08010304  00020304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801030c  0801030c  0002030c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010310  08010310  00020310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000000  08010314  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000924  200001e8  080104fc  000301e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000b0c  080104fc  00030b0c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   000240b5  00000000  00000000  00030216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000039b4  00000000  00000000  000542cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001468  00000000  00000000  00057c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001368  00000000  00000000  000590e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038da7  00000000  00000000  0005a450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019e90  00000000  00000000  000931f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167dd2  00000000  00000000  000ad087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00214e59  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000067f4  00000000  00000000  00214eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e8 	.word	0x200001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fc48 	.word	0x0800fc48

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001ec 	.word	0x200001ec
 80002dc:	0800fc48 	.word	0x0800fc48

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000690:	1d39      	adds	r1, r7, #4
 8000692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000696:	2201      	movs	r2, #1
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <__io_putchar+0x20>)
 800069a:	f009 fd6b 	bl	800a174 <HAL_UART_Transmit>

return ch;
 800069e:	687b      	ldr	r3, [r7, #4]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000460 	.word	0x20000460

080006ac <delayMicroseconds>:
float C0x = 0.705,C2x,C3x,C0y,C2y,C3y;
float T;
float t = 0.;

void delayMicroseconds(uint32_t us)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
    __IO uint32_t currentTicks = SysTick->VAL;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <delayMicroseconds+0x80>)
 80006b6:	689b      	ldr	r3, [r3, #8]
 80006b8:	613b      	str	r3, [r7, #16]
  /* Number of ticks per millisecond */
  const uint32_t tickPerMs = SysTick->LOAD + 1;
 80006ba:	4b1c      	ldr	r3, [pc, #112]	; (800072c <delayMicroseconds+0x80>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	3301      	adds	r3, #1
 80006c0:	61bb      	str	r3, [r7, #24]
  /* Number of ticks to count */
  const uint32_t nbTicks = ((us - ((us > 0) ? 1 : 0)) * tickPerMs) / 1000;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <delayMicroseconds+0x20>
 80006c8:	2301      	movs	r3, #1
 80006ca:	e000      	b.n	80006ce <delayMicroseconds+0x22>
 80006cc:	2300      	movs	r3, #0
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	69ba      	ldr	r2, [r7, #24]
 80006d4:	fb02 f303 	mul.w	r3, r2, r3
 80006d8:	4a15      	ldr	r2, [pc, #84]	; (8000730 <delayMicroseconds+0x84>)
 80006da:	fba2 2303 	umull	r2, r3, r2, r3
 80006de:	099b      	lsrs	r3, r3, #6
 80006e0:	617b      	str	r3, [r7, #20]
  /* Number of elapsed ticks */
  uint32_t elapsedTicks = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t oldTicks = currentTicks;
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	60fb      	str	r3, [r7, #12]
  do {
    currentTicks = SysTick->VAL;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <delayMicroseconds+0x80>)
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	613b      	str	r3, [r7, #16]
    elapsedTicks += (oldTicks < currentTicks) ? tickPerMs + oldTicks - currentTicks :
 80006f0:	68fa      	ldr	r2, [r7, #12]
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d205      	bcs.n	8000704 <delayMicroseconds+0x58>
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	441a      	add	r2, r3
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	e002      	b.n	800070a <delayMicroseconds+0x5e>
                    oldTicks - currentTicks;
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	693b      	ldr	r3, [r7, #16]
    elapsedTicks += (oldTicks < currentTicks) ? tickPerMs + oldTicks - currentTicks :
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	69fa      	ldr	r2, [r7, #28]
 800070c:	4413      	add	r3, r2
 800070e:	61fb      	str	r3, [r7, #28]
    oldTicks = currentTicks;
 8000710:	693b      	ldr	r3, [r7, #16]
 8000712:	60fb      	str	r3, [r7, #12]
  } while (nbTicks > elapsedTicks);
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	429a      	cmp	r2, r3
 800071a:	d8e6      	bhi.n	80006ea <delayMicroseconds+0x3e>
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3724      	adds	r7, #36	; 0x24
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000e010 	.word	0xe000e010
 8000730:	10624dd3 	.word	0x10624dd3

08000734 <CRC16>:
/*
 * CRC16 Checksum for RS485 Modbus RTU Communication
 * Updated : 20 May 2021
 * */
uint16_t CRC16(uint8_t *buf, int len) {
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	6039      	str	r1, [r7, #0]
  uint16_t crc = 0xFFFF;
 800073e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000742:	81fb      	strh	r3, [r7, #14]
  for (uint16_t pos = 0; pos < len; pos++) {
 8000744:	2300      	movs	r3, #0
 8000746:	81bb      	strh	r3, [r7, #12]
 8000748:	e026      	b.n	8000798 <CRC16+0x64>
    crc ^= (uint16_t)buf[pos];        // XOR byte into least sig. byte of crc
 800074a:	89bb      	ldrh	r3, [r7, #12]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	4413      	add	r3, r2
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b29a      	uxth	r2, r3
 8000754:	89fb      	ldrh	r3, [r7, #14]
 8000756:	4053      	eors	r3, r2
 8000758:	81fb      	strh	r3, [r7, #14]
    for (int i = 8; i != 0; i--) {    // Loop over each bit
 800075a:	2308      	movs	r3, #8
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	e015      	b.n	800078c <CRC16+0x58>
      if ((crc & 0x0001) != 0) {      // If the LSB is set
 8000760:	89fb      	ldrh	r3, [r7, #14]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	2b00      	cmp	r3, #0
 8000768:	d00a      	beq.n	8000780 <CRC16+0x4c>
        crc >>= 1;                    // Shift right and XOR 0xA001
 800076a:	89fb      	ldrh	r3, [r7, #14]
 800076c:	085b      	lsrs	r3, r3, #1
 800076e:	81fb      	strh	r3, [r7, #14]
        crc ^= 0xA001;
 8000770:	89fb      	ldrh	r3, [r7, #14]
 8000772:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8000776:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 800077a:	43db      	mvns	r3, r3
 800077c:	81fb      	strh	r3, [r7, #14]
 800077e:	e002      	b.n	8000786 <CRC16+0x52>
      } else {                        // Else LSB is not set
        crc >>= 1;                    // Just shift right
 8000780:	89fb      	ldrh	r3, [r7, #14]
 8000782:	085b      	lsrs	r3, r3, #1
 8000784:	81fb      	strh	r3, [r7, #14]
    for (int i = 8; i != 0; i--) {    // Loop over each bit
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	3b01      	subs	r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1e6      	bne.n	8000760 <CRC16+0x2c>
  for (uint16_t pos = 0; pos < len; pos++) {
 8000792:	89bb      	ldrh	r3, [r7, #12]
 8000794:	3301      	adds	r3, #1
 8000796:	81bb      	strh	r3, [r7, #12]
 8000798:	89bb      	ldrh	r3, [r7, #12]
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	429a      	cmp	r2, r3
 800079e:	dcd4      	bgt.n	800074a <CRC16+0x16>
      }
    }
  }

  return crc;
 80007a0:	89fb      	ldrh	r3, [r7, #14]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
	...

080007b0 <AMT21_getPositionModbusRTU>:
 * Error values are returned as 0xFFFF
 *
 * AMT21 Encoder with RS485 Modbus RTU Communication Function
 * Updated : 20 May 2021
 * */
uint16_t AMT21_getPositionModbusRTU(uint8_t _device_addr, uint8_t resolution) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	460a      	mov	r2, r1
 80007ba:	71fb      	strb	r3, [r7, #7]
 80007bc:	4613      	mov	r3, r2
 80007be:	71bb      	strb	r3, [r7, #6]
  volatile uint8_t _dat[3] = {0,0,0};
 80007c0:	4a5e      	ldr	r2, [pc, #376]	; (800093c <AMT21_getPositionModbusRTU+0x18c>)
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	6812      	ldr	r2, [r2, #0]
 80007c8:	4611      	mov	r1, r2
 80007ca:	8019      	strh	r1, [r3, #0]
 80007cc:	3302      	adds	r3, #2
 80007ce:	0c12      	lsrs	r2, r2, #16
 80007d0:	701a      	strb	r2, [r3, #0]
  uint16_t currentPosition = 0;       //16-bit response from encoder;
 80007d2:	2300      	movs	r3, #0
 80007d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  bool binaryArray[16];
  uint8_t buff[8] = {
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	723b      	strb	r3, [r7, #8]
 80007da:	2304      	movs	r3, #4
 80007dc:	727b      	strb	r3, [r7, #9]
 80007de:	2300      	movs	r3, #0
 80007e0:	72bb      	strb	r3, [r7, #10]
 80007e2:	2301      	movs	r3, #1
 80007e4:	72fb      	strb	r3, [r7, #11]
 80007e6:	2300      	movs	r3, #0
 80007e8:	733b      	strb	r3, [r7, #12]
 80007ea:	2301      	movs	r3, #1
 80007ec:	737b      	strb	r3, [r7, #13]
 80007ee:	2300      	movs	r3, #0
 80007f0:	73bb      	strb	r3, [r7, #14]
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
    (uint8_t)0x00, // Quantity HIGH
    (uint8_t)0x01, // Quantity LOW
    (uint8_t)0x00, // CRC LOW
    (uint8_t)0x00  // CRC HIGH
  };
  uint16_t crc = CRC16(&buff[0], 6);
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	2106      	movs	r1, #6
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff99 	bl	8000734 <CRC16>
 8000802:	4603      	mov	r3, r0
 8000804:	84fb      	strh	r3, [r7, #38]	; 0x26
  buff[6] = (uint8_t)(crc & 0xFF);
 8000806:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000808:	b2db      	uxtb	r3, r3
 800080a:	73bb      	strb	r3, [r7, #14]
  buff[7] = (uint8_t)((crc >> 8) & 0xFF);
 800080c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800080e:	0a1b      	lsrs	r3, r3, #8
 8000810:	b29b      	uxth	r3, r3
 8000812:	b2db      	uxtb	r3, r3
 8000814:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart4, buff, 8, 1000);
 8000816:	f107 0108 	add.w	r1, r7, #8
 800081a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081e:	2208      	movs	r2, #8
 8000820:	4847      	ldr	r0, [pc, #284]	; (8000940 <AMT21_getPositionModbusRTU+0x190>)
 8000822:	f009 fca7 	bl	800a174 <HAL_UART_Transmit>
  delayMicroseconds(30);
 8000826:	201e      	movs	r0, #30
 8000828:	f7ff ff40 	bl	80006ac <delayMicroseconds>
  HAL_UART_Receive(&huart4, (uint8_t *) &_dat, 3, 100);
 800082c:	f107 0120 	add.w	r1, r7, #32
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	2203      	movs	r2, #3
 8000834:	4842      	ldr	r0, [pc, #264]	; (8000940 <AMT21_getPositionModbusRTU+0x190>)
 8000836:	f009 fd33 	bl	800a2a0 <HAL_UART_Receive>
  if(_dat[0] != 2){
 800083a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b02      	cmp	r3, #2
 8000842:	d004      	beq.n	800084e <AMT21_getPositionModbusRTU+0x9e>
      currentPosition = 0xFFFF;
 8000844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000848:	85fb      	strh	r3, [r7, #46]	; 0x2e
      return currentPosition;
 800084a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800084c:	e071      	b.n	8000932 <AMT21_getPositionModbusRTU+0x182>
    }
  currentPosition = (currentPosition | _dat[1]) << 8;
 800084e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000852:	b2db      	uxtb	r3, r3
 8000854:	b29a      	uxth	r2, r3
 8000856:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000858:	4313      	orrs	r3, r2
 800085a:	b29b      	uxth	r3, r3
 800085c:	021b      	lsls	r3, r3, #8
 800085e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  currentPosition = currentPosition | _dat[2];
 8000860:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000864:	b2db      	uxtb	r3, r3
 8000866:	b29a      	uxth	r2, r3
 8000868:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800086a:	4313      	orrs	r3, r2
 800086c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  for(int i = 0; i < 16; i++){
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	; 0x28
 8000872:	e013      	b.n	800089c <AMT21_getPositionModbusRTU+0xec>
      binaryArray[i] = (0x01) & (currentPosition >> (i));
 8000874:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000878:	fa42 f303 	asr.w	r3, r2, r3
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	2b00      	cmp	r3, #0
 8000882:	bf14      	ite	ne
 8000884:	2301      	movne	r3, #1
 8000886:	2300      	moveq	r3, #0
 8000888:	b2d9      	uxtb	r1, r3
 800088a:	f107 0210 	add.w	r2, r7, #16
 800088e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000890:	4413      	add	r3, r2
 8000892:	460a      	mov	r2, r1
 8000894:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 16; i++){
 8000896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000898:	3301      	adds	r3, #1
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
 800089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800089e:	2b0f      	cmp	r3, #15
 80008a0:	dde8      	ble.n	8000874 <AMT21_getPositionModbusRTU+0xc4>
  }
  if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 80008a2:	7ffb      	ldrb	r3, [r7, #31]
 80008a4:	4619      	mov	r1, r3
 80008a6:	7f7a      	ldrb	r2, [r7, #29]
 80008a8:	7efb      	ldrb	r3, [r7, #27]
 80008aa:	4053      	eors	r3, r2
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	7e7b      	ldrb	r3, [r7, #25]
 80008b0:	4053      	eors	r3, r2
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	7dfb      	ldrb	r3, [r7, #23]
 80008b6:	4053      	eors	r3, r2
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	7d7b      	ldrb	r3, [r7, #21]
 80008bc:	4053      	eors	r3, r2
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	7cfb      	ldrb	r3, [r7, #19]
 80008c2:	4053      	eors	r3, r2
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	7c7b      	ldrb	r3, [r7, #17]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	bf0c      	ite	eq
 80008cc:	2301      	moveq	r3, #1
 80008ce:	2300      	movne	r3, #0
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4299      	cmp	r1, r3
 80008d4:	d11e      	bne.n	8000914 <AMT21_getPositionModbusRTU+0x164>
          && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 80008d6:	7fbb      	ldrb	r3, [r7, #30]
 80008d8:	4619      	mov	r1, r3
 80008da:	7f3a      	ldrb	r2, [r7, #28]
 80008dc:	7ebb      	ldrb	r3, [r7, #26]
 80008de:	4053      	eors	r3, r2
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	7e3b      	ldrb	r3, [r7, #24]
 80008e4:	4053      	eors	r3, r2
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	7dbb      	ldrb	r3, [r7, #22]
 80008ea:	4053      	eors	r3, r2
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	7d3b      	ldrb	r3, [r7, #20]
 80008f0:	4053      	eors	r3, r2
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	7cbb      	ldrb	r3, [r7, #18]
 80008f6:	4053      	eors	r3, r2
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	7c3b      	ldrb	r3, [r7, #16]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	bf0c      	ite	eq
 8000900:	2301      	moveq	r3, #1
 8000902:	2300      	movne	r3, #0
 8000904:	b2db      	uxtb	r3, r3
 8000906:	4299      	cmp	r1, r3
 8000908:	d104      	bne.n	8000914 <AMT21_getPositionModbusRTU+0x164>
    {
      //we got back a good position, so just mask away the checkbits
      currentPosition = currentPosition & 0x3FFF;
 800090a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800090c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000910:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000912:	e002      	b.n	800091a <AMT21_getPositionModbusRTU+0x16a>
    }
  else
  {
    currentPosition = 0xFFFF; //bad position
 8000914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000918:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }
  if ((resolution == RES12) && (currentPosition != 0xFFFF)){
 800091a:	79bb      	ldrb	r3, [r7, #6]
 800091c:	2b0c      	cmp	r3, #12
 800091e:	d107      	bne.n	8000930 <AMT21_getPositionModbusRTU+0x180>
 8000920:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000926:	4293      	cmp	r3, r2
 8000928:	d002      	beq.n	8000930 <AMT21_getPositionModbusRTU+0x180>
      currentPosition = currentPosition >> 2;
 800092a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800092c:	089b      	lsrs	r3, r3, #2
 800092e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }
  return currentPosition;
 8000930:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8000932:	4618      	mov	r0, r3
 8000934:	3730      	adds	r7, #48	; 0x30
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	0800fc60 	.word	0x0800fc60
 8000940:	200008b4 	.word	0x200008b4

08000944 <PIDInit>:

/*
 * PID Initialization Function
 * Updated : 22 Mar 2021
 * */
void PIDInit(findchessPID_t *_PID, float _Kp, float _Ki, float _Kd, float _Iminlimit, float _Imaxlimit, float _Ddbd){
 8000944:	b480      	push	{r7}
 8000946:	b089      	sub	sp, #36	; 0x24
 8000948:	af00      	add	r7, sp, #0
 800094a:	61f8      	str	r0, [r7, #28]
 800094c:	ed87 0a06 	vstr	s0, [r7, #24]
 8000950:	edc7 0a05 	vstr	s1, [r7, #20]
 8000954:	ed87 1a04 	vstr	s2, [r7, #16]
 8000958:	edc7 1a03 	vstr	s3, [r7, #12]
 800095c:	ed87 2a02 	vstr	s4, [r7, #8]
 8000960:	edc7 2a01 	vstr	s5, [r7, #4]
	_PID->Kp = _Kp;
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	69ba      	ldr	r2, [r7, #24]
 8000968:	601a      	str	r2, [r3, #0]
	_PID->Ki = _Ki;
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	605a      	str	r2, [r3, #4]
	_PID->Kd = _Kd;
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	609a      	str	r2, [r3, #8]
	_PID->I_Err = 0;
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	f04f 0200 	mov.w	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
	_PID->D_Err = 0;
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	f04f 0200 	mov.w	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
	_PID->I_MinLimit = _Iminlimit;
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	68fa      	ldr	r2, [r7, #12]
 800098a:	615a      	str	r2, [r3, #20]
	_PID->I_MaxLimit = _Imaxlimit;
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	619a      	str	r2, [r3, #24]
	_PID->DeadBand = _Ddbd;
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000998:	bf00      	nop
 800099a:	3724      	adds	r7, #36	; 0x24
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <PIDCalculate>:
/*
 * PID Calculate Function
 * Updated : 22 Mar 2021
 * */
float PIDCalculate(findchessPID_t *_PID, float _setPoint, float _inputValue){
 80009a4:	b480      	push	{r7}
 80009a6:	b087      	sub	sp, #28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80009b0:	edc7 0a01 	vstr	s1, [r7, #4]
	static float Previous_Err = 0;
	float Err = _setPoint - _inputValue;
 80009b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80009b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80009bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009c0:	edc7 7a04 	vstr	s15, [r7, #16]
	if (fabs(Err) < _PID->DeadBand){
 80009c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80009c8:	eeb0 7ae7 	vabs.f32	s14, s15
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80009d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009da:	d502      	bpl.n	80009e2 <PIDCalculate+0x3e>
		return 0;
 80009dc:	f04f 0300 	mov.w	r3, #0
 80009e0:	e073      	b.n	8000aca <PIDCalculate+0x126>
	}
	_PID->I_Err += Err;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80009e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80009ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	edc3 7a03 	vstr	s15, [r3, #12]
	_PID->D_Err -= Err - Previous_Err;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	ed93 7a04 	vldr	s14, [r3, #16]
 80009fc:	4b37      	ldr	r3, [pc, #220]	; (8000adc <PIDCalculate+0x138>)
 80009fe:	edd3 7a00 	vldr	s15, [r3]
 8000a02:	edd7 6a04 	vldr	s13, [r7, #16]
 8000a06:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	edc3 7a04 	vstr	s15, [r3, #16]
	if (_PID->I_Err > _PID->I_MaxLimit){
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	ed93 7a03 	vldr	s14, [r3, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000a20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a28:	dd04      	ble.n	8000a34 <PIDCalculate+0x90>
	    _PID->I_Err = _PID->I_MaxLimit;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	699a      	ldr	r2, [r3, #24]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	e00e      	b.n	8000a52 <PIDCalculate+0xae>
	}
	else if (_PID->I_Err < _PID->I_MinLimit){
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	ed93 7a03 	vldr	s14, [r3, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000a40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a48:	d503      	bpl.n	8000a52 <PIDCalculate+0xae>
	    _PID->I_Err = _PID->I_MinLimit;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	695a      	ldr	r2, [r3, #20]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	60da      	str	r2, [r3, #12]
	}
	float output = (_PID->Kp * Err + _PID->Ki * _PID->I_Err + _PID->Kd * _PID->D_Err);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	ed93 7a00 	vldr	s14, [r3]
 8000a58:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	edd3 6a01 	vldr	s13, [r3, #4]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	edd3 7a03 	vldr	s15, [r3, #12]
 8000a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	edd3 6a02 	vldr	s13, [r3, #8]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a88:	edc7 7a05 	vstr	s15, [r7, #20]
	if (output > _PID->outputMaxLimit){
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	edd3 7a08 	vldr	s15, [r3, #32]
 8000a92:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9e:	dd03      	ble.n	8000aa8 <PIDCalculate+0x104>
		output = _PID->outputMaxLimit;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	6a1b      	ldr	r3, [r3, #32]
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	e00c      	b.n	8000ac2 <PIDCalculate+0x11e>
	}
	else if (output < _PID->outputMinLimit){
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	edd3 7a07 	vldr	s15, [r3, #28]
 8000aae:	ed97 7a05 	vldr	s14, [r7, #20]
 8000ab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aba:	d502      	bpl.n	8000ac2 <PIDCalculate+0x11e>
		output = _PID->outputMinLimit;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	69db      	ldr	r3, [r3, #28]
 8000ac0:	617b      	str	r3, [r7, #20]
	}
	Previous_Err = Err;
 8000ac2:	4a06      	ldr	r2, [pc, #24]	; (8000adc <PIDCalculate+0x138>)
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	6013      	str	r3, [r2, #0]
	return output;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	ee07 3a90 	vmov	s15, r3
}
 8000ace:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad2:	371c      	adds	r7, #28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	20000218 	.word	0x20000218

08000ae0 <IPK_findChessBot>:
/*
 * Inverse Pose Kinematic Function
 * Updated : 22 Mar 2021
 * */
void IPK_findChessBot(float X, float Y, float Z, float endEff_Yaw)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	ed2d 8b06 	vpush	{d8-d10}
 8000ae6:	b092      	sub	sp, #72	; 0x48
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	ed87 0a03 	vstr	s0, [r7, #12]
 8000aee:	edc7 0a02 	vstr	s1, [r7, #8]
 8000af2:	ed87 1a01 	vstr	s2, [r7, #4]
 8000af6:	edc7 1a00 	vstr	s3, [r7]
	const float l1 = 0.020, l2 = 0.370, l3 = 0.315,
 8000afa:	4b87      	ldr	r3, [pc, #540]	; (8000d18 <IPK_findChessBot+0x238>)
 8000afc:	647b      	str	r3, [r7, #68]	; 0x44
 8000afe:	4b87      	ldr	r3, [pc, #540]	; (8000d1c <IPK_findChessBot+0x23c>)
 8000b00:	643b      	str	r3, [r7, #64]	; 0x40
 8000b02:	4b87      	ldr	r3, [pc, #540]	; (8000d20 <IPK_findChessBot+0x240>)
 8000b04:	63fb      	str	r3, [r7, #60]	; 0x3c
			h1 = 0.125, h3 = 0.065, h4 = 0.190;
 8000b06:	f04f 5378 	mov.w	r3, #1040187392	; 0x3e000000
 8000b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b0c:	4b85      	ldr	r3, [pc, #532]	; (8000d24 <IPK_findChessBot+0x244>)
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8000b10:	4b85      	ldr	r3, [pc, #532]	; (8000d28 <IPK_findChessBot+0x248>)
 8000b12:	633b      	str	r3, [r7, #48]	; 0x30
	float l12 = l1 + l2;
 8000b14:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000b18:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b20:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

	float C3 = (X*X + Y*Y - l12*l12 - l3*l3) / (2 * l12 * l3);
 8000b24:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b28:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000b2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000b30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000b34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b38:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b3c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000b40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b44:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000b48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000b4c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000b50:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000b54:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000b58:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b64:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float S3 = sqrt(1 - (C3 * C3));
 8000b68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000b6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000b70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b7c:	eeb0 0b47 	vmov.f64	d0, d7
 8000b80:	f00b fc4a 	bl	800c418 <sqrt>
 8000b84:	eeb0 7b40 	vmov.f64	d7, d0
 8000b88:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b8c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float q3 = atan2(S3, C3);
 8000b90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000b94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b98:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8000b9c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000ba0:	eeb0 1b46 	vmov.f64	d1, d6
 8000ba4:	eeb0 0b47 	vmov.f64	d0, d7
 8000ba8:	f00b fc32 	bl	800c410 <atan2>
 8000bac:	eeb0 7b40 	vmov.f64	d7, d0
 8000bb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bb4:	edc7 7a08 	vstr	s15, [r7, #32]

    float S1 = -l3 * sin(q3) * X + (l12 + l3*cos(q3)) * Y;
 8000bb8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000bbc:	eef1 7a67 	vneg.f32	s15, s15
 8000bc0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000bc4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000bc8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bcc:	eeb0 0b47 	vmov.f64	d0, d7
 8000bd0:	f00b fbd6 	bl	800c380 <sin>
 8000bd4:	eeb0 7b40 	vmov.f64	d7, d0
 8000bd8:	ee28 6b07 	vmul.f64	d6, d8, d7
 8000bdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000be0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000be4:	ee26 8b07 	vmul.f64	d8, d6, d7
 8000be8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000bec:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000bf0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000bf4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000bf8:	edd7 7a08 	vldr	s15, [r7, #32]
 8000bfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c00:	eeb0 0b47 	vmov.f64	d0, d7
 8000c04:	f00b fb2c 	bl	800c260 <cos>
 8000c08:	eeb0 7b40 	vmov.f64	d7, d0
 8000c0c:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8000c10:	ee39 6b07 	vadd.f64	d6, d9, d7
 8000c14:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c1c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c20:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000c24:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c28:	edc7 7a07 	vstr	s15, [r7, #28]
    float C1 = l3 * sin(q3) * Y + (l12 + l3*cos(q3)) * X;
 8000c2c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000c30:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000c34:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c3c:	eeb0 0b47 	vmov.f64	d0, d7
 8000c40:	f00b fb9e 	bl	800c380 <sin>
 8000c44:	eeb0 7b40 	vmov.f64	d7, d0
 8000c48:	ee28 6b07 	vmul.f64	d6, d8, d7
 8000c4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c50:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c54:	ee26 8b07 	vmul.f64	d8, d6, d7
 8000c58:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000c5c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000c60:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000c64:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000c68:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c70:	eeb0 0b47 	vmov.f64	d0, d7
 8000c74:	f00b faf4 	bl	800c260 <cos>
 8000c78:	eeb0 7b40 	vmov.f64	d7, d0
 8000c7c:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8000c80:	ee39 6b07 	vadd.f64	d6, d9, d7
 8000c84:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c8c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c90:	ee38 7b07 	vadd.f64	d7, d8, d7
 8000c94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c98:	edc7 7a06 	vstr	s15, [r7, #24]
    float q1 = atan2(S1, C1);
 8000c9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ca0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ca4:	edd7 6a06 	vldr	s13, [r7, #24]
 8000ca8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8000cac:	eeb0 1b46 	vmov.f64	d1, d6
 8000cb0:	eeb0 0b47 	vmov.f64	d0, d7
 8000cb4:	f00b fbac 	bl	800c410 <atan2>
 8000cb8:	eeb0 7b40 	vmov.f64	d7, d0
 8000cbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cc0:	edc7 7a05 	vstr	s15, [r7, #20]
    if(endEff_Yaw - q1 - q3 < -2.880 || endEff_Yaw - q1 - q3 > 2.880)
    {
        printf("Out of range for q4\n");
		return;
    }*/
	q[0] = q1;
 8000cc4:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <IPK_findChessBot+0x24c>)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	6013      	str	r3, [r2, #0]
	q[1] = Z + h4 - h3 - h1;
 8000cca:	ed97 7a01 	vldr	s14, [r7, #4]
 8000cce:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000cd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000cd6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000cda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cde:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <IPK_findChessBot+0x24c>)
 8000ce8:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] = q3;
 8000cec:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <IPK_findChessBot+0x24c>)
 8000cee:	6a3b      	ldr	r3, [r7, #32]
 8000cf0:	6093      	str	r3, [r2, #8]
	q[3] = endEff_Yaw - q1 - q3;
 8000cf2:	ed97 7a00 	vldr	s14, [r7]
 8000cf6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cfa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cfe:	edd7 7a08 	vldr	s15, [r7, #32]
 8000d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <IPK_findChessBot+0x24c>)
 8000d08:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3748      	adds	r7, #72	; 0x48
 8000d10:	46bd      	mov	sp, r7
 8000d12:	ecbd 8b06 	vpop	{d8-d10}
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	3ca3d70a 	.word	0x3ca3d70a
 8000d1c:	3ebd70a4 	.word	0x3ebd70a4
 8000d20:	3ea147ae 	.word	0x3ea147ae
 8000d24:	3d851eb8 	.word	0x3d851eb8
 8000d28:	3e428f5c 	.word	0x3e428f5c
 8000d2c:	20000204 	.word	0x20000204

08000d30 <IVK>:
void IVK()
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <IAK>:
void IAK()
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0

}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	0000      	movs	r0, r0
	...

08000d50 <StepDriveRad>:
/*
 * Stepper motor driving function (Radian input)
 * Updated : 18 Mar 2021 16:44
 * */
void StepDriveRad(char _ch, double _ang_v)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	ed87 0b00 	vstr	d0, [r7]
 8000d5c:	73fb      	strb	r3, [r7, #15]
	switch(_ch)
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	3b01      	subs	r3, #1
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	f200 8212 	bhi.w	800118c <StepDriveRad+0x43c>
 8000d68:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <StepDriveRad+0x20>)
 8000d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6e:	bf00      	nop
 8000d70:	08000d85 	.word	0x08000d85
 8000d74:	08000e4b 	.word	0x08000e4b
 8000d78:	08000f1d 	.word	0x08000f1d
 8000d7c:	08000fdf 	.word	0x08000fdf
 8000d80:	080010a5 	.word	0x080010a5
	{
		case STEPJ1:
		{
			ang_vel[0] = _ang_v;
 8000d84:	ed97 7b00 	vldr	d7, [r7]
 8000d88:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d8c:	4bd2      	ldr	r3, [pc, #840]	; (80010d8 <StepDriveRad+0x388>)
 8000d8e:	edc3 7a00 	vstr	s15, [r3]
			/* Direction of Joint1's Stepper Motor */
			if(_ang_v < 0)
 8000d92:	ed97 7b00 	vldr	d7, [r7]
 8000d96:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9e:	d506      	bpl.n	8000dae <StepDriveRad+0x5e>
			{
				HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000da6:	48cd      	ldr	r0, [pc, #820]	; (80010dc <StepDriveRad+0x38c>)
 8000da8:	f005 f9ea 	bl	8006180 <HAL_GPIO_WritePin>
 8000dac:	e005      	b.n	8000dba <StepDriveRad+0x6a>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000db4:	48c9      	ldr	r0, [pc, #804]	; (80010dc <StepDriveRad+0x38c>)
 8000db6:	f005 f9e3 	bl	8006180 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint1's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM1->ARR is undefined value.
 8000dba:	ed97 7b00 	vldr	d7, [r7]
 8000dbe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc6:	d107      	bne.n	8000dd8 <StepDriveRad+0x88>
			{
				TIM1->CCR2 = 0;
 8000dc8:	4bc5      	ldr	r3, [pc, #788]	; (80010e0 <StepDriveRad+0x390>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->ARR = 625-1;
 8000dce:	4bc4      	ldr	r3, [pc, #784]	; (80010e0 <StepDriveRad+0x390>)
 8000dd0:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000dd4:	62da      	str	r2, [r3, #44]	; 0x2c
			else
			{
				TIM1->ARR = round((6.283*_FCY)/(1600*((TIM1->PSC)+1)*abs(_ang_v))) - 1;
				TIM1->CCR2 = round(((TIM1->ARR)+1)/2);
			}
			break;
 8000dd6:	e1d9      	b.n	800118c <StepDriveRad+0x43c>
				TIM1->ARR = round((6.283*_FCY)/(1600*((TIM1->PSC)+1)*abs(_ang_v))) - 1;
 8000dd8:	4bc1      	ldr	r3, [pc, #772]	; (80010e0 <StepDriveRad+0x390>)
 8000dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ddc:	3301      	adds	r3, #1
 8000dde:	ed97 7b00 	vldr	d7, [r7]
 8000de2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000de6:	ee17 2a90 	vmov	r2, s15
 8000dea:	2a00      	cmp	r2, #0
 8000dec:	bfb8      	it	lt
 8000dee:	4252      	neglt	r2, r2
 8000df0:	fb02 f303 	mul.w	r3, r2, r3
 8000df4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000df8:	fb02 f303 	mul.w	r3, r2, r3
 8000dfc:	ee07 3a90 	vmov	s15, r3
 8000e00:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e04:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 80010d0 <StepDriveRad+0x380>
 8000e08:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e0c:	eeb0 0b46 	vmov.f64	d0, d6
 8000e10:	f00b fa6e 	bl	800c2f0 <round>
 8000e14:	eeb0 7b40 	vmov.f64	d7, d0
 8000e18:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e20:	4baf      	ldr	r3, [pc, #700]	; (80010e0 <StepDriveRad+0x390>)
 8000e22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e26:	ee17 2a90 	vmov	r2, s15
 8000e2a:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM1->CCR2 = round(((TIM1->ARR)+1)/2);
 8000e2c:	4bac      	ldr	r3, [pc, #688]	; (80010e0 <StepDriveRad+0x390>)
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	3301      	adds	r3, #1
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	ee07 3a90 	vmov	s15, r3
 8000e38:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e3c:	4ba8      	ldr	r3, [pc, #672]	; (80010e0 <StepDriveRad+0x390>)
 8000e3e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e42:	ee17 2a90 	vmov	r2, s15
 8000e46:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000e48:	e1a0      	b.n	800118c <StepDriveRad+0x43c>
		}
		case STEPJ2:
		{
			ang_vel[1] = _ang_v;
 8000e4a:	ed97 7b00 	vldr	d7, [r7]
 8000e4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e52:	4ba1      	ldr	r3, [pc, #644]	; (80010d8 <StepDriveRad+0x388>)
 8000e54:	edc3 7a01 	vstr	s15, [r3, #4]
			/* Direction of Joint2's Stepper Motor */
			if(_ang_v < 0)
 8000e58:	ed97 7b00 	vldr	d7, [r7]
 8000e5c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e64:	d506      	bpl.n	8000e74 <StepDriveRad+0x124>
			{
				HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e6c:	489d      	ldr	r0, [pc, #628]	; (80010e4 <StepDriveRad+0x394>)
 8000e6e:	f005 f987 	bl	8006180 <HAL_GPIO_WritePin>
 8000e72:	e005      	b.n	8000e80 <StepDriveRad+0x130>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e7a:	489a      	ldr	r0, [pc, #616]	; (80010e4 <StepDriveRad+0x394>)
 8000e7c:	f005 f980 	bl	8006180 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint2's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM2->ARR is undefined value.
 8000e80:	ed97 7b00 	vldr	d7, [r7]
 8000e84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8c:	d109      	bne.n	8000ea2 <StepDriveRad+0x152>
			{
				TIM2->CCR3 = 0;
 8000e8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e92:	2200      	movs	r2, #0
 8000e94:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM2->ARR = 625-1;
 8000e96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e9a:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
			else
			{
				TIM2->ARR = round((6.283*_FCY)/(1600*((TIM2->PSC)+1)*abs(_ang_v))) - 1;
				TIM2->CCR3 = round(((TIM2->ARR)+1)/2);
			}
			break;
 8000ea0:	e174      	b.n	800118c <StepDriveRad+0x43c>
				TIM2->ARR = round((6.283*_FCY)/(1600*((TIM2->PSC)+1)*abs(_ang_v))) - 1;
 8000ea2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	ed97 7b00 	vldr	d7, [r7]
 8000eae:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000eb2:	ee17 2a90 	vmov	r2, s15
 8000eb6:	2a00      	cmp	r2, #0
 8000eb8:	bfb8      	it	lt
 8000eba:	4252      	neglt	r2, r2
 8000ebc:	fb02 f303 	mul.w	r3, r2, r3
 8000ec0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000ec4:	fb02 f303 	mul.w	r3, r2, r3
 8000ec8:	ee07 3a90 	vmov	s15, r3
 8000ecc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ed0:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 80010d0 <StepDriveRad+0x380>
 8000ed4:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ed8:	eeb0 0b46 	vmov.f64	d0, d6
 8000edc:	f00b fa08 	bl	800c2f0 <round>
 8000ee0:	eeb0 7b40 	vmov.f64	d7, d0
 8000ee4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ee8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ef0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ef4:	ee17 2a90 	vmov	r2, s15
 8000ef8:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM2->CCR3 = round(((TIM2->ARR)+1)/2);
 8000efa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f00:	3301      	adds	r3, #1
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	ee07 3a90 	vmov	s15, r3
 8000f08:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f10:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000f14:	ee17 2a90 	vmov	r2, s15
 8000f18:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000f1a:	e137      	b.n	800118c <StepDriveRad+0x43c>
		}
		case STEPJ3:
		{
			ang_vel[2] = _ang_v;
 8000f1c:	ed97 7b00 	vldr	d7, [r7]
 8000f20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f24:	4b6c      	ldr	r3, [pc, #432]	; (80010d8 <StepDriveRad+0x388>)
 8000f26:	edc3 7a02 	vstr	s15, [r3, #8]
			/* Direction of Joint3's Stepper Motor */
			if(_ang_v < 0)
 8000f2a:	ed97 7b00 	vldr	d7, [r7]
 8000f2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f36:	d505      	bpl.n	8000f44 <StepDriveRad+0x1f4>
			{
				HAL_GPIO_WritePin(DIR_3_GPIO_Port, DIR_3_Pin, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	4869      	ldr	r0, [pc, #420]	; (80010e4 <StepDriveRad+0x394>)
 8000f3e:	f005 f91f 	bl	8006180 <HAL_GPIO_WritePin>
 8000f42:	e004      	b.n	8000f4e <StepDriveRad+0x1fe>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_3_GPIO_Port, DIR_3_Pin, GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2120      	movs	r1, #32
 8000f48:	4866      	ldr	r0, [pc, #408]	; (80010e4 <StepDriveRad+0x394>)
 8000f4a:	f005 f919 	bl	8006180 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint3's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM3->ARR is undefined value.
 8000f4e:	ed97 7b00 	vldr	d7, [r7]
 8000f52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5a:	d107      	bne.n	8000f6c <StepDriveRad+0x21c>
			{
				TIM3->CCR1 = 0;
 8000f5c:	4b62      	ldr	r3, [pc, #392]	; (80010e8 <StepDriveRad+0x398>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3->ARR = 625-1;
 8000f62:	4b61      	ldr	r3, [pc, #388]	; (80010e8 <StepDriveRad+0x398>)
 8000f64:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000f68:	62da      	str	r2, [r3, #44]	; 0x2c
			else
			{
				TIM3->ARR = round((6.283*_FCY)/(1600*((TIM3->PSC)+1)*abs(_ang_v))) - 1;
				TIM3->CCR1 = round(((TIM3->ARR)+1)/2);
			}
			break;
 8000f6a:	e10f      	b.n	800118c <StepDriveRad+0x43c>
				TIM3->ARR = round((6.283*_FCY)/(1600*((TIM3->PSC)+1)*abs(_ang_v))) - 1;
 8000f6c:	4b5e      	ldr	r3, [pc, #376]	; (80010e8 <StepDriveRad+0x398>)
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f70:	3301      	adds	r3, #1
 8000f72:	ed97 7b00 	vldr	d7, [r7]
 8000f76:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f7a:	ee17 2a90 	vmov	r2, s15
 8000f7e:	2a00      	cmp	r2, #0
 8000f80:	bfb8      	it	lt
 8000f82:	4252      	neglt	r2, r2
 8000f84:	fb02 f303 	mul.w	r3, r2, r3
 8000f88:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000f8c:	fb02 f303 	mul.w	r3, r2, r3
 8000f90:	ee07 3a90 	vmov	s15, r3
 8000f94:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f98:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 80010d0 <StepDriveRad+0x380>
 8000f9c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000fa0:	eeb0 0b46 	vmov.f64	d0, d6
 8000fa4:	f00b f9a4 	bl	800c2f0 <round>
 8000fa8:	eeb0 7b40 	vmov.f64	d7, d0
 8000fac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000fb0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fb4:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <StepDriveRad+0x398>)
 8000fb6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fba:	ee17 2a90 	vmov	r2, s15
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM3->CCR1 = round(((TIM3->ARR)+1)/2);
 8000fc0:	4b49      	ldr	r3, [pc, #292]	; (80010e8 <StepDriveRad+0x398>)
 8000fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	085b      	lsrs	r3, r3, #1
 8000fc8:	ee07 3a90 	vmov	s15, r3
 8000fcc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000fd0:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <StepDriveRad+0x398>)
 8000fd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000fd6:	ee17 2a90 	vmov	r2, s15
 8000fda:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000fdc:	e0d6      	b.n	800118c <StepDriveRad+0x43c>
		}
		case STEPJ4:
		{
			ang_vel[3] = _ang_v;
 8000fde:	ed97 7b00 	vldr	d7, [r7]
 8000fe2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fe6:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <StepDriveRad+0x388>)
 8000fe8:	edc3 7a03 	vstr	s15, [r3, #12]
			/* Direction of Joint4's Stepper Motor */
			if(_ang_v < 0)
 8000fec:	ed97 7b00 	vldr	d7, [r7]
 8000ff0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff8:	d506      	bpl.n	8001008 <StepDriveRad+0x2b8>
			{
				HAL_GPIO_WritePin(DIR_4_GPIO_Port, DIR_4_Pin, GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001000:	4838      	ldr	r0, [pc, #224]	; (80010e4 <StepDriveRad+0x394>)
 8001002:	f005 f8bd 	bl	8006180 <HAL_GPIO_WritePin>
 8001006:	e005      	b.n	8001014 <StepDriveRad+0x2c4>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_4_GPIO_Port, DIR_4_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100e:	4835      	ldr	r0, [pc, #212]	; (80010e4 <StepDriveRad+0x394>)
 8001010:	f005 f8b6 	bl	8006180 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint4's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM4->ARR is undefined value.
 8001014:	ed97 7b00 	vldr	d7, [r7]
 8001018:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	d107      	bne.n	8001032 <StepDriveRad+0x2e2>
			{
				TIM4->CCR3 = 0;
 8001022:	4b32      	ldr	r3, [pc, #200]	; (80010ec <StepDriveRad+0x39c>)
 8001024:	2200      	movs	r2, #0
 8001026:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM4->ARR = 625-1;
 8001028:	4b30      	ldr	r3, [pc, #192]	; (80010ec <StepDriveRad+0x39c>)
 800102a:	f44f 721c 	mov.w	r2, #624	; 0x270
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
			else
			{
				TIM4->ARR = round((6.283*_FCY)/(1600*((TIM4->PSC)+1)*abs(_ang_v))) - 1;
				TIM4->CCR3 = round(((TIM4->ARR)+1)/2);
			}
			break;
 8001030:	e0ac      	b.n	800118c <StepDriveRad+0x43c>
				TIM4->ARR = round((6.283*_FCY)/(1600*((TIM4->PSC)+1)*abs(_ang_v))) - 1;
 8001032:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <StepDriveRad+0x39c>)
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	3301      	adds	r3, #1
 8001038:	ed97 7b00 	vldr	d7, [r7]
 800103c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001040:	ee17 2a90 	vmov	r2, s15
 8001044:	2a00      	cmp	r2, #0
 8001046:	bfb8      	it	lt
 8001048:	4252      	neglt	r2, r2
 800104a:	fb02 f303 	mul.w	r3, r2, r3
 800104e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001052:	fb02 f303 	mul.w	r3, r2, r3
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800105e:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 80010d0 <StepDriveRad+0x380>
 8001062:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001066:	eeb0 0b46 	vmov.f64	d0, d6
 800106a:	f00b f941 	bl	800c2f0 <round>
 800106e:	eeb0 7b40 	vmov.f64	d7, d0
 8001072:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001076:	ee37 7b46 	vsub.f64	d7, d7, d6
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <StepDriveRad+0x39c>)
 800107c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001080:	ee17 2a90 	vmov	r2, s15
 8001084:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM4->CCR3 = round(((TIM4->ARR)+1)/2);
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <StepDriveRad+0x39c>)
 8001088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108a:	3301      	adds	r3, #1
 800108c:	085b      	lsrs	r3, r3, #1
 800108e:	ee07 3a90 	vmov	s15, r3
 8001092:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <StepDriveRad+0x39c>)
 8001098:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800109c:	ee17 2a90 	vmov	r2, s15
 80010a0:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80010a2:	e073      	b.n	800118c <StepDriveRad+0x43c>
		}
		case STEPGripper:
		{
			ang_vel[4] = _ang_v;
 80010a4:	ed97 7b00 	vldr	d7, [r7]
 80010a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010ac:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <StepDriveRad+0x388>)
 80010ae:	edc3 7a04 	vstr	s15, [r3, #16]
			/* Direction of Gripper's Stepper Motor */
			if(_ang_v < 0)
 80010b2:	ed97 7b00 	vldr	d7, [r7]
 80010b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80010ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010be:	d517      	bpl.n	80010f0 <StepDriveRad+0x3a0>
			{
				HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_SET);
 80010c0:	2201      	movs	r2, #1
 80010c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <StepDriveRad+0x38c>)
 80010c8:	f005 f85a 	bl	8006180 <HAL_GPIO_WritePin>
 80010cc:	e016      	b.n	80010fc <StepDriveRad+0x3ac>
 80010ce:	bf00      	nop
 80010d0:	20000000 	.word	0x20000000
 80010d4:	41d67842 	.word	0x41d67842
 80010d8:	20000258 	.word	0x20000258
 80010dc:	58021000 	.word	0x58021000
 80010e0:	40010000 	.word	0x40010000
 80010e4:	58020400 	.word	0x58020400
 80010e8:	40000400 	.word	0x40000400
 80010ec:	40000800 	.word	0x40000800
			}
			else
			{
				HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010f6:	482a      	ldr	r0, [pc, #168]	; (80011a0 <StepDriveRad+0x450>)
 80010f8:	f005 f842 	bl	8006180 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Gripper's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM2->ARR is undefined value.
 80010fc:	ed97 7b00 	vldr	d7, [r7]
 8001100:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001108:	d107      	bne.n	800111a <StepDriveRad+0x3ca>
			{
				TIM15->CCR2 = 0;
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <StepDriveRad+0x454>)
 800110c:	2200      	movs	r2, #0
 800110e:	639a      	str	r2, [r3, #56]	; 0x38
				TIM15->ARR = 625-1;
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <StepDriveRad+0x454>)
 8001112:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c
			else
			{
				TIM15->ARR = round((6.283*_FCY)/(1600*((TIM15->PSC)+1)*abs(_ang_v))) - 1;
				TIM15->CCR2 = round(((TIM15->ARR)+1)/2);
			}
			break;
 8001118:	e037      	b.n	800118a <StepDriveRad+0x43a>
				TIM15->ARR = round((6.283*_FCY)/(1600*((TIM15->PSC)+1)*abs(_ang_v))) - 1;
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <StepDriveRad+0x454>)
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111e:	3301      	adds	r3, #1
 8001120:	ed97 7b00 	vldr	d7, [r7]
 8001124:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001128:	ee17 2a90 	vmov	r2, s15
 800112c:	2a00      	cmp	r2, #0
 800112e:	bfb8      	it	lt
 8001130:	4252      	neglt	r2, r2
 8001132:	fb02 f303 	mul.w	r3, r2, r3
 8001136:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800113a:	fb02 f303 	mul.w	r3, r2, r3
 800113e:	ee07 3a90 	vmov	s15, r3
 8001142:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001146:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8001198 <StepDriveRad+0x448>
 800114a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800114e:	eeb0 0b46 	vmov.f64	d0, d6
 8001152:	f00b f8cd 	bl	800c2f0 <round>
 8001156:	eeb0 7b40 	vmov.f64	d7, d0
 800115a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800115e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <StepDriveRad+0x454>)
 8001164:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001168:	ee17 2a90 	vmov	r2, s15
 800116c:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM15->CCR2 = round(((TIM15->ARR)+1)/2);
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <StepDriveRad+0x454>)
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	3301      	adds	r3, #1
 8001174:	085b      	lsrs	r3, r3, #1
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <StepDriveRad+0x454>)
 8001180:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001184:	ee17 2a90 	vmov	r2, s15
 8001188:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800118a:	bf00      	nop
		{

		}
	}

}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	f3af 8000 	nop.w
 8001198:	20000000 	.word	0x20000000
 800119c:	41d67842 	.word	0x41d67842
 80011a0:	58021000 	.word	0x58021000
 80011a4:	40014000 	.word	0x40014000

080011a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ae:	f002 f957 	bl	8003460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b2:	f000 f8f9 	bl	80013a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b6:	f000 fe69 	bl	8001e8c <MX_GPIO_Init>
  MX_DMA_Init();
 80011ba:	f000 fe0f 	bl	8001ddc <MX_DMA_Init>
  MX_USART3_UART_Init();
 80011be:	f000 fdc1 	bl	8001d44 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80011c2:	f000 fa93 	bl	80016ec <MX_TIM2_Init>
  MX_UART4_Init();
 80011c6:	f000 fd25 	bl	8001c14 <MX_UART4_Init>
  MX_TIM4_Init();
 80011ca:	f000 fb7f 	bl	80018cc <MX_TIM4_Init>
  MX_SPI3_Init();
 80011ce:	f000 f989 	bl	80014e4 <MX_SPI3_Init>
  MX_TIM1_Init();
 80011d2:	f000 f9dd 	bl	8001590 <MX_TIM1_Init>
  MX_TIM3_Init();
 80011d6:	f000 fb01 	bl	80017dc <MX_TIM3_Init>
  MX_TIM5_Init();
 80011da:	f000 fbef 	bl	80019bc <MX_TIM5_Init>
  MX_TIM15_Init();
 80011de:	f000 fc75 	bl	8001acc <MX_TIM15_Init>
  MX_TIM12_Init();
 80011e2:	f000 fc39 	bl	8001a58 <MX_TIM12_Init>
  MX_CRC_Init();
 80011e6:	f000 f95b 	bl	80014a0 <MX_CRC_Init>
  MX_USART2_UART_Init();
 80011ea:	f000 fd5f 	bl	8001cac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  uint8_t encoder_address[5] = {0xA4, 0xB4, 0xC4, 0xD4, 0x54};
//  uint16_t abs_position = 0;

  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	2101      	movs	r1, #1
 80011f2:	4859      	ldr	r0, [pc, #356]	; (8001358 <main+0x1b0>)
 80011f4:	f004 ffc4 	bl	8006180 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2102      	movs	r1, #2
 80011fc:	4857      	ldr	r0, [pc, #348]	; (800135c <main+0x1b4>)
 80011fe:	f004 ffbf 	bl	8006180 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001208:	4853      	ldr	r0, [pc, #332]	; (8001358 <main+0x1b0>)
 800120a:	f004 ffb9 	bl	8006180 <HAL_GPIO_WritePin>

  PIDInit(&PID_Joint1, 1, 1, 1, -7, 7, 0);
 800120e:	eddf 2a54 	vldr	s5, [pc, #336]	; 8001360 <main+0x1b8>
 8001212:	eeb1 2a0c 	vmov.f32	s4, #28	; 0x40e00000  7.0
 8001216:	eef9 1a0c 	vmov.f32	s3, #156	; 0xc0e00000 -7.0
 800121a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800121e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001222:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001226:	484f      	ldr	r0, [pc, #316]	; (8001364 <main+0x1bc>)
 8001228:	f7ff fb8c 	bl	8000944 <PIDInit>
  PIDInit(&PID_Joint2, 1, 1, 1, -7, 7, 0);
 800122c:	eddf 2a4c 	vldr	s5, [pc, #304]	; 8001360 <main+0x1b8>
 8001230:	eeb1 2a0c 	vmov.f32	s4, #28	; 0x40e00000  7.0
 8001234:	eef9 1a0c 	vmov.f32	s3, #156	; 0xc0e00000 -7.0
 8001238:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800123c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001240:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001244:	4848      	ldr	r0, [pc, #288]	; (8001368 <main+0x1c0>)
 8001246:	f7ff fb7d 	bl	8000944 <PIDInit>
  PIDInit(&PID_Joint3, 1, 1, 1, -7, 7, 0);
 800124a:	eddf 2a45 	vldr	s5, [pc, #276]	; 8001360 <main+0x1b8>
 800124e:	eeb1 2a0c 	vmov.f32	s4, #28	; 0x40e00000  7.0
 8001252:	eef9 1a0c 	vmov.f32	s3, #156	; 0xc0e00000 -7.0
 8001256:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800125a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800125e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001262:	4842      	ldr	r0, [pc, #264]	; (800136c <main+0x1c4>)
 8001264:	f7ff fb6e 	bl	8000944 <PIDInit>
  PIDInit(&PID_Joint4, 1, 1, 1, -7, 7, 0);
 8001268:	eddf 2a3d 	vldr	s5, [pc, #244]	; 8001360 <main+0x1b8>
 800126c:	eeb1 2a0c 	vmov.f32	s4, #28	; 0x40e00000  7.0
 8001270:	eef9 1a0c 	vmov.f32	s3, #156	; 0xc0e00000 -7.0
 8001274:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001278:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800127c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001280:	483b      	ldr	r0, [pc, #236]	; (8001370 <main+0x1c8>)
 8001282:	f7ff fb5f 	bl	8000944 <PIDInit>

  TIM1->CCR2 = 0;
 8001286:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <main+0x1cc>)
 8001288:	2200      	movs	r2, #0
 800128a:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR3 = 0;
 800128c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001290:	2200      	movs	r2, #0
 8001292:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3->CCR1 = 0;
 8001294:	4b38      	ldr	r3, [pc, #224]	; (8001378 <main+0x1d0>)
 8001296:	2200      	movs	r2, #0
 8001298:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR3 = 0;
 800129a:	4b38      	ldr	r3, [pc, #224]	; (800137c <main+0x1d4>)
 800129c:	2200      	movs	r2, #0
 800129e:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM15->CCR2 = 0;
 80012a0:	4b37      	ldr	r3, [pc, #220]	; (8001380 <main+0x1d8>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80012a6:	2104      	movs	r1, #4
 80012a8:	4836      	ldr	r0, [pc, #216]	; (8001384 <main+0x1dc>)
 80012aa:	f007 fcd9 	bl	8008c60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012ae:	2108      	movs	r1, #8
 80012b0:	4835      	ldr	r0, [pc, #212]	; (8001388 <main+0x1e0>)
 80012b2:	f007 fcd5 	bl	8008c60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012b6:	2100      	movs	r1, #0
 80012b8:	4834      	ldr	r0, [pc, #208]	; (800138c <main+0x1e4>)
 80012ba:	f007 fcd1 	bl	8008c60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80012be:	2108      	movs	r1, #8
 80012c0:	4833      	ldr	r0, [pc, #204]	; (8001390 <main+0x1e8>)
 80012c2:	f007 fccd 	bl	8008c60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80012c6:	2104      	movs	r1, #4
 80012c8:	4832      	ldr	r0, [pc, #200]	; (8001394 <main+0x1ec>)
 80012ca:	f007 fcc9 	bl	8008c60 <HAL_TIM_PWM_Start>

  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 80012ce:	4b32      	ldr	r3, [pc, #200]	; (8001398 <main+0x1f0>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <main+0x1f0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 0220 	orr.w	r2, r2, #32
 80012dc:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 80012de:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <main+0x1f0>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b2c      	ldr	r3, [pc, #176]	; (8001398 <main+0x1f0>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012ec:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, 4);
 80012ee:	2204      	movs	r2, #4
 80012f0:	492a      	ldr	r1, [pc, #168]	; (800139c <main+0x1f4>)
 80012f2:	4829      	ldr	r0, [pc, #164]	; (8001398 <main+0x1f0>)
 80012f4:	f009 f8a8 	bl	800a448 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	attempts = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	717b      	strb	r3, [r7, #5]

          //this function gets the encoder position and returns it as a uint16_t
          //send the function either res12 or res14 for your encoders resolution
          encoderPosition = AMT21_getPositionModbusRTU((uint8_t)0x54, RES14);
 80012fc:	210e      	movs	r1, #14
 80012fe:	2054      	movs	r0, #84	; 0x54
 8001300:	f7ff fa56 	bl	80007b0 <AMT21_getPositionModbusRTU>
 8001304:	4603      	mov	r3, r0
 8001306:	80fb      	strh	r3, [r7, #6]

          //if the position returned was 0xFFFF we know that there was an error calculating the checksum
          //make 3 attempts for position. we will pre-increment attempts because we'll use the number later and want an accurate count
          while (encoderPosition == 0xFFFF && ++attempts < 3)
 8001308:	e005      	b.n	8001316 <main+0x16e>
          {
              encoderPosition = AMT21_getPositionModbusRTU((uint8_t)0x54, RES14); //try again
 800130a:	210e      	movs	r1, #14
 800130c:	2054      	movs	r0, #84	; 0x54
 800130e:	f7ff fa4f 	bl	80007b0 <AMT21_getPositionModbusRTU>
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
          while (encoderPosition == 0xFFFF && ++attempts < 3)
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800131c:	4293      	cmp	r3, r2
 800131e:	d105      	bne.n	800132c <main+0x184>
 8001320:	797b      	ldrb	r3, [r7, #5]
 8001322:	3301      	adds	r3, #1
 8001324:	717b      	strb	r3, [r7, #5]
 8001326:	797b      	ldrb	r3, [r7, #5]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d9ee      	bls.n	800130a <main+0x162>
          }

          if (encoderPosition == 0xFFFF) //position is bad, let the user know how many times we tried
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001332:	4293      	cmp	r3, r2
 8001334:	d105      	bne.n	8001342 <main+0x19a>
          {
            printf("Encoder 0 error. Attempts: %d\n", attempts); //print out the number in decimal format. attempts - 1 is used since we post incremented the loop
 8001336:	797b      	ldrb	r3, [r7, #5]
 8001338:	4619      	mov	r1, r3
 800133a:	4819      	ldr	r0, [pc, #100]	; (80013a0 <main+0x1f8>)
 800133c:	f00c fc6e 	bl	800dc1c <iprintf>
 8001340:	e004      	b.n	800134c <main+0x1a4>
          }
          else //position was good, print to serial stream
          {

              printf("Encoder 0: %d\n", encoderPosition); //print out the number in decimal format. attempts - 1 is used since we post incremented the loop
 8001342:	88fb      	ldrh	r3, [r7, #6]
 8001344:	4619      	mov	r1, r3
 8001346:	4817      	ldr	r0, [pc, #92]	; (80013a4 <main+0x1fc>)
 8001348:	f00c fc68 	bl	800dc1c <iprintf>
          }
          HAL_Delay(500);
 800134c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001350:	f002 f918 	bl	8003584 <HAL_Delay>
	attempts = 0;
 8001354:	e7d0      	b.n	80012f8 <main+0x150>
 8001356:	bf00      	nop
 8001358:	58020400 	.word	0x58020400
 800135c:	58021000 	.word	0x58021000
 8001360:	00000000 	.word	0x00000000
 8001364:	2000035c 	.word	0x2000035c
 8001368:	20000888 	.word	0x20000888
 800136c:	20000228 	.word	0x20000228
 8001370:	20000680 	.word	0x20000680
 8001374:	40010000 	.word	0x40010000
 8001378:	40000400 	.word	0x40000400
 800137c:	40000800 	.word	0x40000800
 8001380:	40014000 	.word	0x40014000
 8001384:	20000834 	.word	0x20000834
 8001388:	20000948 	.word	0x20000948
 800138c:	200006b4 	.word	0x200006b4
 8001390:	20000388 	.word	0x20000388
 8001394:	20000504 	.word	0x20000504
 8001398:	20000460 	.word	0x20000460
 800139c:	20000af4 	.word	0x20000af4
 80013a0:	0800fc64 	.word	0x0800fc64
 80013a4:	0800fc84 	.word	0x0800fc84

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b09c      	sub	sp, #112	; 0x70
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	224c      	movs	r2, #76	; 0x4c
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f00b ffe6 	bl	800d388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2220      	movs	r2, #32
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00b ffe0 	bl	800d388 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80013c8:	2002      	movs	r0, #2
 80013ca:	f004 ff0d 	bl	80061e8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80013ce:	2300      	movs	r3, #0
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	4b31      	ldr	r3, [pc, #196]	; (8001498 <SystemClock_Config+0xf0>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	4a30      	ldr	r2, [pc, #192]	; (8001498 <SystemClock_Config+0xf0>)
 80013d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013dc:	6193      	str	r3, [r2, #24]
 80013de:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <SystemClock_Config+0xf0>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	4b2c      	ldr	r3, [pc, #176]	; (800149c <SystemClock_Config+0xf4>)
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	4a2b      	ldr	r2, [pc, #172]	; (800149c <SystemClock_Config+0xf4>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013f4:	4b29      	ldr	r3, [pc, #164]	; (800149c <SystemClock_Config+0xf4>)
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001400:	bf00      	nop
 8001402:	4b25      	ldr	r3, [pc, #148]	; (8001498 <SystemClock_Config+0xf0>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800140a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800140e:	d1f8      	bne.n	8001402 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001410:	2302      	movs	r3, #2
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001414:	2301      	movs	r3, #1
 8001416:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001418:	2340      	movs	r3, #64	; 0x40
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141c:	2302      	movs	r3, #2
 800141e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001420:	2300      	movs	r3, #0
 8001422:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001424:	2304      	movs	r3, #4
 8001426:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001428:	233c      	movs	r3, #60	; 0x3c
 800142a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001430:	2306      	movs	r3, #6
 8001432:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001434:	2302      	movs	r3, #2
 8001436:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001438:	230c      	movs	r3, #12
 800143a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800143c:	2300      	movs	r3, #0
 800143e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	4618      	mov	r0, r3
 800144a:	f004 ff07 	bl	800625c <HAL_RCC_OscConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001454:	f001 f952 	bl	80026fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001458:	233f      	movs	r3, #63	; 0x3f
 800145a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145c:	2303      	movs	r3, #3
 800145e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001464:	2308      	movs	r3, #8
 8001466:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001468:	2340      	movs	r3, #64	; 0x40
 800146a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800146c:	2340      	movs	r3, #64	; 0x40
 800146e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001474:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001476:	2340      	movs	r3, #64	; 0x40
 8001478:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2104      	movs	r1, #4
 800147e:	4618      	mov	r0, r3
 8001480:	f005 fafc 	bl	8006a7c <HAL_RCC_ClockConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800148a:	f001 f937 	bl	80026fc <Error_Handler>
  }
}
 800148e:	bf00      	nop
 8001490:	3770      	adds	r7, #112	; 0x70
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	58024800 	.word	0x58024800
 800149c:	58000400 	.word	0x58000400

080014a0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80014a4:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <MX_CRC_Init+0x3c>)
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <MX_CRC_Init+0x40>)
 80014a8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MX_CRC_Init+0x3c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <MX_CRC_Init+0x3c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <MX_CRC_Init+0x3c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014bc:	4b07      	ldr	r3, [pc, #28]	; (80014dc <MX_CRC_Init+0x3c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <MX_CRC_Init+0x3c>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <MX_CRC_Init+0x3c>)
 80014ca:	f002 f99b 	bl	8003804 <HAL_CRC_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80014d4:	f001 f912 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000550 	.word	0x20000550
 80014e0:	58024c00 	.word	0x58024c00

080014e4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014e8:	4b27      	ldr	r3, [pc, #156]	; (8001588 <MX_SPI3_Init+0xa4>)
 80014ea:	4a28      	ldr	r2, [pc, #160]	; (800158c <MX_SPI3_Init+0xa8>)
 80014ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <MX_SPI3_Init+0xa4>)
 80014f0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <MX_SPI3_Init+0xa4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <MX_SPI3_Init+0xa4>)
 80014fe:	2203      	movs	r2, #3
 8001500:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001502:	4b21      	ldr	r3, [pc, #132]	; (8001588 <MX_SPI3_Init+0xa4>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <MX_SPI3_Init+0xa4>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800150e:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <MX_SPI3_Init+0xa4>)
 8001510:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001514:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <MX_SPI3_Init+0xa4>)
 8001518:	2200      	movs	r2, #0
 800151a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800151c:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <MX_SPI3_Init+0xa4>)
 800151e:	2200      	movs	r2, #0
 8001520:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001522:	4b19      	ldr	r3, [pc, #100]	; (8001588 <MX_SPI3_Init+0xa4>)
 8001524:	2200      	movs	r2, #0
 8001526:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <MX_SPI3_Init+0xa4>)
 800152a:	2200      	movs	r2, #0
 800152c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800152e:	4b16      	ldr	r3, [pc, #88]	; (8001588 <MX_SPI3_Init+0xa4>)
 8001530:	2200      	movs	r2, #0
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001534:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_SPI3_Init+0xa4>)
 8001536:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800153a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800153c:	4b12      	ldr	r3, [pc, #72]	; (8001588 <MX_SPI3_Init+0xa4>)
 800153e:	2200      	movs	r2, #0
 8001540:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_SPI3_Init+0xa4>)
 8001544:	2200      	movs	r2, #0
 8001546:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_SPI3_Init+0xa4>)
 800154a:	2200      	movs	r2, #0
 800154c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_SPI3_Init+0xa4>)
 8001550:	2200      	movs	r2, #0
 8001552:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_SPI3_Init+0xa4>)
 8001556:	2200      	movs	r2, #0
 8001558:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_SPI3_Init+0xa4>)
 800155c:	2200      	movs	r2, #0
 800155e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_SPI3_Init+0xa4>)
 8001562:	2200      	movs	r2, #0
 8001564:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_SPI3_Init+0xa4>)
 8001568:	2200      	movs	r2, #0
 800156a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_SPI3_Init+0xa4>)
 800156e:	2200      	movs	r2, #0
 8001570:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_SPI3_Init+0xa4>)
 8001574:	f007 f970 	bl	8008858 <HAL_SPI_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800157e:	f001 f8bd 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000700 	.word	0x20000700
 800158c:	40003c00 	.word	0x40003c00

08001590 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b09a      	sub	sp, #104	; 0x68
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001596:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	615a      	str	r2, [r3, #20]
 80015c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	222c      	movs	r2, #44	; 0x2c
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f00b fedc 	bl	800d388 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015d0:	4b44      	ldr	r3, [pc, #272]	; (80016e4 <MX_TIM1_Init+0x154>)
 80015d2:	4a45      	ldr	r2, [pc, #276]	; (80016e8 <MX_TIM1_Init+0x158>)
 80015d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 80015d6:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <MX_TIM1_Init+0x154>)
 80015d8:	22ef      	movs	r2, #239	; 0xef
 80015da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015dc:	4b41      	ldr	r3, [pc, #260]	; (80016e4 <MX_TIM1_Init+0x154>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625-1;
 80015e2:	4b40      	ldr	r3, [pc, #256]	; (80016e4 <MX_TIM1_Init+0x154>)
 80015e4:	f44f 721c 	mov.w	r2, #624	; 0x270
 80015e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ea:	4b3e      	ldr	r3, [pc, #248]	; (80016e4 <MX_TIM1_Init+0x154>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015f0:	4b3c      	ldr	r3, [pc, #240]	; (80016e4 <MX_TIM1_Init+0x154>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <MX_TIM1_Init+0x154>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015fc:	4839      	ldr	r0, [pc, #228]	; (80016e4 <MX_TIM1_Init+0x154>)
 80015fe:	f007 fa48 	bl	8008a92 <HAL_TIM_Base_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001608:	f001 f878 	bl	80026fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800160c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001610:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001612:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001616:	4619      	mov	r1, r3
 8001618:	4832      	ldr	r0, [pc, #200]	; (80016e4 <MX_TIM1_Init+0x154>)
 800161a:	f007 feef 	bl	80093fc <HAL_TIM_ConfigClockSource>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001624:	f001 f86a 	bl	80026fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001628:	482e      	ldr	r0, [pc, #184]	; (80016e4 <MX_TIM1_Init+0x154>)
 800162a:	f007 fab8 	bl	8008b9e <HAL_TIM_PWM_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001634:	f001 f862 	bl	80026fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001638:	2300      	movs	r3, #0
 800163a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800163c:	2300      	movs	r3, #0
 800163e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001640:	2300      	movs	r3, #0
 8001642:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001644:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001648:	4619      	mov	r1, r3
 800164a:	4826      	ldr	r0, [pc, #152]	; (80016e4 <MX_TIM1_Init+0x154>)
 800164c:	f008 fc1e 	bl	8009e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001656:	f001 f851 	bl	80026fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800165a:	2360      	movs	r3, #96	; 0x60
 800165c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800165e:	f240 1339 	movw	r3, #313	; 0x139
 8001662:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001664:	2300      	movs	r3, #0
 8001666:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001668:	2300      	movs	r3, #0
 800166a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001670:	2300      	movs	r3, #0
 8001672:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001674:	2300      	movs	r3, #0
 8001676:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001678:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800167c:	2204      	movs	r2, #4
 800167e:	4619      	mov	r1, r3
 8001680:	4818      	ldr	r0, [pc, #96]	; (80016e4 <MX_TIM1_Init+0x154>)
 8001682:	f007 fdab 	bl	80091dc <HAL_TIM_PWM_ConfigChannel>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800168c:	f001 f836 	bl	80026fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016b6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	4619      	mov	r1, r3
 80016c4:	4807      	ldr	r0, [pc, #28]	; (80016e4 <MX_TIM1_Init+0x154>)
 80016c6:	f008 fc69 	bl	8009f9c <HAL_TIMEx_ConfigBreakDeadTime>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80016d0:	f001 f814 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <MX_TIM1_Init+0x154>)
 80016d6:	f001 f985 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 80016da:	bf00      	nop
 80016dc:	3768      	adds	r7, #104	; 0x68
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000834 	.word	0x20000834
 80016e8:	40010000 	.word	0x40010000

080016ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08e      	sub	sp, #56	; 0x38
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800170c:	463b      	mov	r3, r7
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]
 800171a:	615a      	str	r2, [r3, #20]
 800171c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800171e:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <MX_TIM2_Init+0xec>)
 8001720:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001724:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8001726:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <MX_TIM2_Init+0xec>)
 8001728:	22ef      	movs	r2, #239	; 0xef
 800172a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172c:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <MX_TIM2_Init+0xec>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 8001732:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <MX_TIM2_Init+0xec>)
 8001734:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001738:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <MX_TIM2_Init+0xec>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001740:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <MX_TIM2_Init+0xec>)
 8001742:	2200      	movs	r2, #0
 8001744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001746:	4824      	ldr	r0, [pc, #144]	; (80017d8 <MX_TIM2_Init+0xec>)
 8001748:	f007 f9a3 	bl	8008a92 <HAL_TIM_Base_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001752:	f000 ffd3 	bl	80026fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800175c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001760:	4619      	mov	r1, r3
 8001762:	481d      	ldr	r0, [pc, #116]	; (80017d8 <MX_TIM2_Init+0xec>)
 8001764:	f007 fe4a 	bl	80093fc <HAL_TIM_ConfigClockSource>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800176e:	f000 ffc5 	bl	80026fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001772:	4819      	ldr	r0, [pc, #100]	; (80017d8 <MX_TIM2_Init+0xec>)
 8001774:	f007 fa13 	bl	8008b9e <HAL_TIM_PWM_Init>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800177e:	f000 ffbd 	bl	80026fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	4619      	mov	r1, r3
 8001790:	4811      	ldr	r0, [pc, #68]	; (80017d8 <MX_TIM2_Init+0xec>)
 8001792:	f008 fb7b 	bl	8009e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800179c:	f000 ffae 	bl	80026fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a0:	2360      	movs	r3, #96	; 0x60
 80017a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80017a4:	f240 1339 	movw	r3, #313	; 0x139
 80017a8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017b2:	463b      	mov	r3, r7
 80017b4:	2208      	movs	r2, #8
 80017b6:	4619      	mov	r1, r3
 80017b8:	4807      	ldr	r0, [pc, #28]	; (80017d8 <MX_TIM2_Init+0xec>)
 80017ba:	f007 fd0f 	bl	80091dc <HAL_TIM_PWM_ConfigChannel>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80017c4:	f000 ff9a 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017c8:	4803      	ldr	r0, [pc, #12]	; (80017d8 <MX_TIM2_Init+0xec>)
 80017ca:	f001 f90b 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 80017ce:	bf00      	nop
 80017d0:	3738      	adds	r7, #56	; 0x38
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000948 	.word	0x20000948

080017dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08e      	sub	sp, #56	; 0x38
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fc:	463b      	mov	r3, r7
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]
 800180a:	615a      	str	r2, [r3, #20]
 800180c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800180e:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <MX_TIM3_Init+0xe8>)
 8001810:	4a2d      	ldr	r2, [pc, #180]	; (80018c8 <MX_TIM3_Init+0xec>)
 8001812:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8001814:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <MX_TIM3_Init+0xe8>)
 8001816:	22ef      	movs	r2, #239	; 0xef
 8001818:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <MX_TIM3_Init+0xe8>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625-1;
 8001820:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <MX_TIM3_Init+0xe8>)
 8001822:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001826:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001828:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <MX_TIM3_Init+0xe8>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182e:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <MX_TIM3_Init+0xe8>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001834:	4823      	ldr	r0, [pc, #140]	; (80018c4 <MX_TIM3_Init+0xe8>)
 8001836:	f007 f92c 	bl	8008a92 <HAL_TIM_Base_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001840:	f000 ff5c 	bl	80026fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001844:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001848:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800184a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800184e:	4619      	mov	r1, r3
 8001850:	481c      	ldr	r0, [pc, #112]	; (80018c4 <MX_TIM3_Init+0xe8>)
 8001852:	f007 fdd3 	bl	80093fc <HAL_TIM_ConfigClockSource>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800185c:	f000 ff4e 	bl	80026fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001860:	4818      	ldr	r0, [pc, #96]	; (80018c4 <MX_TIM3_Init+0xe8>)
 8001862:	f007 f99c 	bl	8008b9e <HAL_TIM_PWM_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800186c:	f000 ff46 	bl	80026fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	4619      	mov	r1, r3
 800187e:	4811      	ldr	r0, [pc, #68]	; (80018c4 <MX_TIM3_Init+0xe8>)
 8001880:	f008 fb04 	bl	8009e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800188a:	f000 ff37 	bl	80026fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800188e:	2360      	movs	r3, #96	; 0x60
 8001890:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8001892:	f240 1339 	movw	r3, #313	; 0x139
 8001896:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a0:	463b      	mov	r3, r7
 80018a2:	2200      	movs	r2, #0
 80018a4:	4619      	mov	r1, r3
 80018a6:	4807      	ldr	r0, [pc, #28]	; (80018c4 <MX_TIM3_Init+0xe8>)
 80018a8:	f007 fc98 	bl	80091dc <HAL_TIM_PWM_ConfigChannel>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80018b2:	f000 ff23 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018b6:	4803      	ldr	r0, [pc, #12]	; (80018c4 <MX_TIM3_Init+0xe8>)
 80018b8:	f001 f894 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 80018bc:	bf00      	nop
 80018be:	3738      	adds	r7, #56	; 0x38
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200006b4 	.word	0x200006b4
 80018c8:	40000400 	.word	0x40000400

080018cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08e      	sub	sp, #56	; 0x38
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ec:	463b      	mov	r3, r7
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	605a      	str	r2, [r3, #4]
 80018f4:	609a      	str	r2, [r3, #8]
 80018f6:	60da      	str	r2, [r3, #12]
 80018f8:	611a      	str	r2, [r3, #16]
 80018fa:	615a      	str	r2, [r3, #20]
 80018fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018fe:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <MX_TIM4_Init+0xe8>)
 8001900:	4a2d      	ldr	r2, [pc, #180]	; (80019b8 <MX_TIM4_Init+0xec>)
 8001902:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8001904:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <MX_TIM4_Init+0xe8>)
 8001906:	22ef      	movs	r2, #239	; 0xef
 8001908:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <MX_TIM4_Init+0xe8>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 8001910:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <MX_TIM4_Init+0xe8>)
 8001912:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001916:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001918:	4b26      	ldr	r3, [pc, #152]	; (80019b4 <MX_TIM4_Init+0xe8>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800191e:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <MX_TIM4_Init+0xe8>)
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001924:	4823      	ldr	r0, [pc, #140]	; (80019b4 <MX_TIM4_Init+0xe8>)
 8001926:	f007 f8b4 	bl	8008a92 <HAL_TIM_Base_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001930:	f000 fee4 	bl	80026fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800193a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800193e:	4619      	mov	r1, r3
 8001940:	481c      	ldr	r0, [pc, #112]	; (80019b4 <MX_TIM4_Init+0xe8>)
 8001942:	f007 fd5b 	bl	80093fc <HAL_TIM_ConfigClockSource>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800194c:	f000 fed6 	bl	80026fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001950:	4818      	ldr	r0, [pc, #96]	; (80019b4 <MX_TIM4_Init+0xe8>)
 8001952:	f007 f924 	bl	8008b9e <HAL_TIM_PWM_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800195c:	f000 fece 	bl	80026fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4619      	mov	r1, r3
 800196e:	4811      	ldr	r0, [pc, #68]	; (80019b4 <MX_TIM4_Init+0xe8>)
 8001970:	f008 fa8c 	bl	8009e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800197a:	f000 febf 	bl	80026fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197e:	2360      	movs	r3, #96	; 0x60
 8001980:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8001982:	f240 1339 	movw	r3, #313	; 0x139
 8001986:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001990:	463b      	mov	r3, r7
 8001992:	2208      	movs	r2, #8
 8001994:	4619      	mov	r1, r3
 8001996:	4807      	ldr	r0, [pc, #28]	; (80019b4 <MX_TIM4_Init+0xe8>)
 8001998:	f007 fc20 	bl	80091dc <HAL_TIM_PWM_ConfigChannel>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80019a2:	f000 feab 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019a6:	4803      	ldr	r0, [pc, #12]	; (80019b4 <MX_TIM4_Init+0xe8>)
 80019a8:	f001 f81c 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 80019ac:	bf00      	nop
 80019ae:	3738      	adds	r7, #56	; 0x38
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000388 	.word	0x20000388
 80019b8:	40000800 	.word	0x40000800

080019bc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b088      	sub	sp, #32
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c2:	f107 0310 	add.w	r3, r7, #16
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	605a      	str	r2, [r3, #4]
 80019d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019da:	4b1d      	ldr	r3, [pc, #116]	; (8001a50 <MX_TIM5_Init+0x94>)
 80019dc:	4a1d      	ldr	r2, [pc, #116]	; (8001a54 <MX_TIM5_Init+0x98>)
 80019de:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 80019e0:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <MX_TIM5_Init+0x94>)
 80019e2:	22ef      	movs	r2, #239	; 0xef
 80019e4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e6:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <MX_TIM5_Init+0x94>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 80019ec:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <MX_TIM5_Init+0x94>)
 80019ee:	f240 12f3 	movw	r2, #499	; 0x1f3
 80019f2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <MX_TIM5_Init+0x94>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <MX_TIM5_Init+0x94>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a00:	4813      	ldr	r0, [pc, #76]	; (8001a50 <MX_TIM5_Init+0x94>)
 8001a02:	f007 f846 	bl	8008a92 <HAL_TIM_Base_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001a0c:	f000 fe76 	bl	80026fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480c      	ldr	r0, [pc, #48]	; (8001a50 <MX_TIM5_Init+0x94>)
 8001a1e:	f007 fced 	bl	80093fc <HAL_TIM_ConfigClockSource>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001a28:	f000 fe68 	bl	80026fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	4619      	mov	r1, r3
 8001a38:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_TIM5_Init+0x94>)
 8001a3a:	f008 fa27 	bl	8009e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001a44:	f000 fe5a 	bl	80026fc <Error_Handler>
  /* USER CODE BEGIN TIM5_Init 2 */
//  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE END TIM5_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	3720      	adds	r7, #32
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000634 	.word	0x20000634
 8001a54:	40000c00 	.word	0x40000c00

08001a58 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5e:	463b      	mov	r3, r7
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <MX_TIM12_Init+0x6c>)
 8001a6c:	4a16      	ldr	r2, [pc, #88]	; (8001ac8 <MX_TIM12_Init+0x70>)
 8001a6e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 240-1;
 8001a70:	4b14      	ldr	r3, [pc, #80]	; (8001ac4 <MX_TIM12_Init+0x6c>)
 8001a72:	22ef      	movs	r2, #239	; 0xef
 8001a74:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <MX_TIM12_Init+0x6c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 500-1;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_TIM12_Init+0x6c>)
 8001a7e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001a82:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_TIM12_Init+0x6c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_TIM12_Init+0x6c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <MX_TIM12_Init+0x6c>)
 8001a92:	f006 fffe 	bl	8008a92 <HAL_TIM_Base_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8001a9c:	f000 fe2e 	bl	80026fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa4:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4806      	ldr	r0, [pc, #24]	; (8001ac4 <MX_TIM12_Init+0x6c>)
 8001aac:	f007 fca6 	bl	80093fc <HAL_TIM_ConfigClockSource>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8001ab6:	f000 fe21 	bl	80026fc <Error_Handler>
  /* USER CODE BEGIN TIM12_Init 2 */
//  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE END TIM12_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000a24 	.word	0x20000a24
 8001ac8:	40001800 	.word	0x40001800

08001acc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b09a      	sub	sp, #104	; 0x68
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]
 8001ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
 8001afc:	615a      	str	r2, [r3, #20]
 8001afe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	222c      	movs	r2, #44	; 0x2c
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f00b fc3e 	bl	800d388 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001b0c:	4b3f      	ldr	r3, [pc, #252]	; (8001c0c <MX_TIM15_Init+0x140>)
 8001b0e:	4a40      	ldr	r2, [pc, #256]	; (8001c10 <MX_TIM15_Init+0x144>)
 8001b10:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8001b12:	4b3e      	ldr	r3, [pc, #248]	; (8001c0c <MX_TIM15_Init+0x140>)
 8001b14:	22ef      	movs	r2, #239	; 0xef
 8001b16:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b18:	4b3c      	ldr	r3, [pc, #240]	; (8001c0c <MX_TIM15_Init+0x140>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 625-1;
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	; (8001c0c <MX_TIM15_Init+0x140>)
 8001b20:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001b24:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b26:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <MX_TIM15_Init+0x140>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001b2c:	4b37      	ldr	r3, [pc, #220]	; (8001c0c <MX_TIM15_Init+0x140>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b32:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <MX_TIM15_Init+0x140>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001b38:	4834      	ldr	r0, [pc, #208]	; (8001c0c <MX_TIM15_Init+0x140>)
 8001b3a:	f006 ffaa 	bl	8008a92 <HAL_TIM_Base_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001b44:	f000 fdda 	bl	80026fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001b4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b52:	4619      	mov	r1, r3
 8001b54:	482d      	ldr	r0, [pc, #180]	; (8001c0c <MX_TIM15_Init+0x140>)
 8001b56:	f007 fc51 	bl	80093fc <HAL_TIM_ConfigClockSource>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001b60:	f000 fdcc 	bl	80026fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001b64:	4829      	ldr	r0, [pc, #164]	; (8001c0c <MX_TIM15_Init+0x140>)
 8001b66:	f007 f81a 	bl	8008b9e <HAL_TIM_PWM_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8001b70:	f000 fdc4 	bl	80026fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b74:	2300      	movs	r3, #0
 8001b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001b7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b80:	4619      	mov	r1, r3
 8001b82:	4822      	ldr	r0, [pc, #136]	; (8001c0c <MX_TIM15_Init+0x140>)
 8001b84:	f008 f982 	bl	8009e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8001b8e:	f000 fdb5 	bl	80026fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b92:	2360      	movs	r3, #96	; 0x60
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8001b96:	f240 1339 	movw	r3, #313	; 0x139
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4814      	ldr	r0, [pc, #80]	; (8001c0c <MX_TIM15_Init+0x140>)
 8001bba:	f007 fb0f 	bl	80091dc <HAL_TIM_PWM_ConfigChannel>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8001bc4:	f000 fd9a 	bl	80026fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	4619      	mov	r1, r3
 8001bee:	4807      	ldr	r0, [pc, #28]	; (8001c0c <MX_TIM15_Init+0x140>)
 8001bf0:	f008 f9d4 	bl	8009f9c <HAL_TIMEx_ConfigBreakDeadTime>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001bfa:	f000 fd7f 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001bfe:	4803      	ldr	r0, [pc, #12]	; (8001c0c <MX_TIM15_Init+0x140>)
 8001c00:	f000 fef0 	bl	80029e4 <HAL_TIM_MspPostInit>

}
 8001c04:	bf00      	nop
 8001c06:	3768      	adds	r7, #104	; 0x68
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000504 	.word	0x20000504
 8001c10:	40014000 	.word	0x40014000

08001c14 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c18:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <MX_UART4_Init+0x90>)
 8001c1a:	4a23      	ldr	r2, [pc, #140]	; (8001ca8 <MX_UART4_Init+0x94>)
 8001c1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001c1e:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <MX_UART4_Init+0x90>)
 8001c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c26:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <MX_UART4_Init+0x90>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <MX_UART4_Init+0x90>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c32:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <MX_UART4_Init+0x90>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c38:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <MX_UART4_Init+0x90>)
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3e:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <MX_UART4_Init+0x90>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c44:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <MX_UART4_Init+0x90>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c4a:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <MX_UART4_Init+0x90>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <MX_UART4_Init+0x90>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <MX_UART4_Init+0x90>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c5c:	4811      	ldr	r0, [pc, #68]	; (8001ca4 <MX_UART4_Init+0x90>)
 8001c5e:	f008 fa39 	bl	800a0d4 <HAL_UART_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001c68:	f000 fd48 	bl	80026fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <MX_UART4_Init+0x90>)
 8001c70:	f00a fa2b 	bl	800c0ca <HAL_UARTEx_SetTxFifoThreshold>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001c7a:	f000 fd3f 	bl	80026fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4808      	ldr	r0, [pc, #32]	; (8001ca4 <MX_UART4_Init+0x90>)
 8001c82:	f00a fa60 	bl	800c146 <HAL_UARTEx_SetRxFifoThreshold>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001c8c:	f000 fd36 	bl	80026fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001c90:	4804      	ldr	r0, [pc, #16]	; (8001ca4 <MX_UART4_Init+0x90>)
 8001c92:	f00a f9e1 	bl	800c058 <HAL_UARTEx_DisableFifoMode>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001c9c:	f000 fd2e 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ca0:	bf00      	nop
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	200008b4 	.word	0x200008b4
 8001ca8:	40004c00 	.word	0x40004c00

08001cac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cb0:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cb2:	4a23      	ldr	r2, [pc, #140]	; (8001d40 <MX_USART2_UART_Init+0x94>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cb6:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <MX_USART2_UART_Init+0x90>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ce2:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <MX_USART2_UART_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ce8:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <MX_USART2_UART_Init+0x90>)
 8001cf6:	f008 f9ed 	bl	800a0d4 <HAL_UART_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001d00:	f000 fcfc 	bl	80026fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d04:	2100      	movs	r1, #0
 8001d06:	480d      	ldr	r0, [pc, #52]	; (8001d3c <MX_USART2_UART_Init+0x90>)
 8001d08:	f00a f9df 	bl	800c0ca <HAL_UARTEx_SetTxFifoThreshold>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001d12:	f000 fcf3 	bl	80026fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d16:	2100      	movs	r1, #0
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <MX_USART2_UART_Init+0x90>)
 8001d1a:	f00a fa14 	bl	800c146 <HAL_UARTEx_SetRxFifoThreshold>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001d24:	f000 fcea 	bl	80026fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <MX_USART2_UART_Init+0x90>)
 8001d2a:	f00a f995 	bl	800c058 <HAL_UARTEx_DisableFifoMode>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001d34:	f000 fce2 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000994 	.word	0x20000994
 8001d40:	40004400 	.word	0x40004400

08001d44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d48:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <MX_USART3_UART_Init+0x90>)
 8001d4a:	4a23      	ldr	r2, [pc, #140]	; (8001dd8 <MX_USART3_UART_Init+0x94>)
 8001d4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d4e:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <MX_USART3_UART_Init+0x90>)
 8001d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d56:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <MX_USART3_UART_Init+0x90>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <MX_USART3_UART_Init+0x90>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d62:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <MX_USART3_UART_Init+0x90>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d68:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <MX_USART3_UART_Init+0x90>)
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <MX_USART3_UART_Init+0x90>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d74:	4b17      	ldr	r3, [pc, #92]	; (8001dd4 <MX_USART3_UART_Init+0x90>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <MX_USART3_UART_Init+0x90>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d80:	4b14      	ldr	r3, [pc, #80]	; (8001dd4 <MX_USART3_UART_Init+0x90>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <MX_USART3_UART_Init+0x90>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d8c:	4811      	ldr	r0, [pc, #68]	; (8001dd4 <MX_USART3_UART_Init+0x90>)
 8001d8e:	f008 f9a1 	bl	800a0d4 <HAL_UART_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d98:	f000 fcb0 	bl	80026fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	480d      	ldr	r0, [pc, #52]	; (8001dd4 <MX_USART3_UART_Init+0x90>)
 8001da0:	f00a f993 	bl	800c0ca <HAL_UARTEx_SetTxFifoThreshold>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001daa:	f000 fca7 	bl	80026fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dae:	2100      	movs	r1, #0
 8001db0:	4808      	ldr	r0, [pc, #32]	; (8001dd4 <MX_USART3_UART_Init+0x90>)
 8001db2:	f00a f9c8 	bl	800c146 <HAL_UARTEx_SetRxFifoThreshold>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001dbc:	f000 fc9e 	bl	80026fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001dc0:	4804      	ldr	r0, [pc, #16]	; (8001dd4 <MX_USART3_UART_Init+0x90>)
 8001dc2:	f00a f949 	bl	800c058 <HAL_UARTEx_DisableFifoMode>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001dcc:	f000 fc96 	bl	80026fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000460 	.word	0x20000460
 8001dd8:	40004800 	.word	0x40004800

08001ddc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001de2:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <MX_DMA_Init+0xac>)
 8001de4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001de8:	4a27      	ldr	r2, [pc, #156]	; (8001e88 <MX_DMA_Init+0xac>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001df2:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <MX_DMA_Init+0xac>)
 8001df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e00:	4b21      	ldr	r3, [pc, #132]	; (8001e88 <MX_DMA_Init+0xac>)
 8001e02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e06:	4a20      	ldr	r2, [pc, #128]	; (8001e88 <MX_DMA_Init+0xac>)
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <MX_DMA_Init+0xac>)
 8001e12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	200c      	movs	r0, #12
 8001e24:	f001 fcb9 	bl	800379a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e28:	200c      	movs	r0, #12
 8001e2a:	f001 fcd0 	bl	80037ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	200d      	movs	r0, #13
 8001e34:	f001 fcb1 	bl	800379a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e38:	200d      	movs	r0, #13
 8001e3a:	f001 fcc8 	bl	80037ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	200f      	movs	r0, #15
 8001e44:	f001 fca9 	bl	800379a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001e48:	200f      	movs	r0, #15
 8001e4a:	f001 fcc0 	bl	80037ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2010      	movs	r0, #16
 8001e54:	f001 fca1 	bl	800379a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e58:	2010      	movs	r0, #16
 8001e5a:	f001 fcb8 	bl	80037ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	2038      	movs	r0, #56	; 0x38
 8001e64:	f001 fc99 	bl	800379a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e68:	2038      	movs	r0, #56	; 0x38
 8001e6a:	f001 fcb0 	bl	80037ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	2039      	movs	r0, #57	; 0x39
 8001e74:	f001 fc91 	bl	800379a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001e78:	2039      	movs	r0, #57	; 0x39
 8001e7a:	f001 fca8 	bl	80037ce <HAL_NVIC_EnableIRQ>

}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	58024400 	.word	0x58024400

08001e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08c      	sub	sp, #48	; 0x30
 8001e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]
 8001ea0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ea2:	4b8c      	ldr	r3, [pc, #560]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea8:	4a8a      	ldr	r2, [pc, #552]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001eaa:	f043 0310 	orr.w	r3, r3, #16
 8001eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eb2:	4b88      	ldr	r3, [pc, #544]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb8:	f003 0310 	and.w	r3, r3, #16
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec0:	4b84      	ldr	r3, [pc, #528]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec6:	4a83      	ldr	r2, [pc, #524]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ed0:	4b80      	ldr	r3, [pc, #512]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ede:	4b7d      	ldr	r3, [pc, #500]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee4:	4a7b      	ldr	r2, [pc, #492]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eee:	4b79      	ldr	r3, [pc, #484]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efc:	4b75      	ldr	r3, [pc, #468]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f02:	4a74      	ldr	r2, [pc, #464]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f0c:	4b71      	ldr	r3, [pc, #452]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1a:	4b6e      	ldr	r3, [pc, #440]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f20:	4a6c      	ldr	r2, [pc, #432]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001f22:	f043 0302 	orr.w	r3, r3, #2
 8001f26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f2a:	4b6a      	ldr	r3, [pc, #424]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f38:	4b66      	ldr	r3, [pc, #408]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3e:	4a65      	ldr	r2, [pc, #404]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f48:	4b62      	ldr	r3, [pc, #392]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f56:	4b5f      	ldr	r3, [pc, #380]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5c:	4a5d      	ldr	r2, [pc, #372]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f66:	4b5b      	ldr	r3, [pc, #364]	; (80020d4 <MX_GPIO_Init+0x248>)
 8001f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f70:	603b      	str	r3, [r7, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001f74:	2200      	movs	r2, #0
 8001f76:	f644 2121 	movw	r1, #18977	; 0x4a21
 8001f7a:	4857      	ldr	r0, [pc, #348]	; (80020d8 <MX_GPIO_Init+0x24c>)
 8001f7c:	f004 f900 	bl	8006180 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001f80:	2200      	movs	r2, #0
 8001f82:	f24c 0102 	movw	r1, #49154	; 0xc002
 8001f86:	4855      	ldr	r0, [pc, #340]	; (80020dc <MX_GPIO_Init+0x250>)
 8001f88:	f004 f8fa 	bl	8006180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f92:	4853      	ldr	r0, [pc, #332]	; (80020e0 <MX_GPIO_Init+0x254>)
 8001f94:	f004 f8f4 	bl	8006180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f9e:	4851      	ldr	r0, [pc, #324]	; (80020e4 <MX_GPIO_Init+0x258>)
 8001fa0:	f004 f8ee 	bl	8006180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001faa:	484f      	ldr	r0, [pc, #316]	; (80020e8 <MX_GPIO_Init+0x25c>)
 8001fac:	f004 f8e8 	bl	8006180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8001fb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fb6:	4b4d      	ldr	r3, [pc, #308]	; (80020ec <MX_GPIO_Init+0x260>)
 8001fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4847      	ldr	r0, [pc, #284]	; (80020e4 <MX_GPIO_Init+0x258>)
 8001fc6:	f003 ff2b 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001fca:	f644 2321 	movw	r3, #18977	; 0x4a21
 8001fce:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	483d      	ldr	r0, [pc, #244]	; (80020d8 <MX_GPIO_Init+0x24c>)
 8001fe4:	f003 ff1c 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8001fe8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fee:	4b3f      	ldr	r3, [pc, #252]	; (80020ec <MX_GPIO_Init+0x260>)
 8001ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ff6:	f107 031c 	add.w	r3, r7, #28
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4837      	ldr	r0, [pc, #220]	; (80020dc <MX_GPIO_Init+0x250>)
 8001ffe:	f003 ff0f 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8002002:	f24c 0302 	movw	r3, #49154	; 0xc002
 8002006:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002008:	2301      	movs	r3, #1
 800200a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002014:	f107 031c 	add.w	r3, r7, #28
 8002018:	4619      	mov	r1, r3
 800201a:	4830      	ldr	r0, [pc, #192]	; (80020dc <MX_GPIO_Init+0x250>)
 800201c:	f003 ff00 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002026:	2301      	movs	r3, #1
 8002028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	4619      	mov	r1, r3
 8002038:	4829      	ldr	r0, [pc, #164]	; (80020e0 <MX_GPIO_Init+0x254>)
 800203a:	f003 fef1 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800203e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002044:	2301      	movs	r3, #1
 8002046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	4823      	ldr	r0, [pc, #140]	; (80020e4 <MX_GPIO_Init+0x258>)
 8002058:	f003 fee2 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART4_DE_Pin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 800205c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	4619      	mov	r1, r3
 8002074:	481c      	ldr	r0, [pc, #112]	; (80020e8 <MX_GPIO_Init+0x25c>)
 8002076:	f003 fed3 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 800207a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800207e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002080:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <MX_GPIO_Init+0x260>)
 8002082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8002088:	f107 031c 	add.w	r3, r7, #28
 800208c:	4619      	mov	r1, r3
 800208e:	4818      	ldr	r0, [pc, #96]	; (80020f0 <MX_GPIO_Init+0x264>)
 8002090:	f003 fec6 	bl	8005e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8002094:	23c0      	movs	r3, #192	; 0xc0
 8002096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002098:	4b14      	ldr	r3, [pc, #80]	; (80020ec <MX_GPIO_Init+0x260>)
 800209a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a0:	f107 031c 	add.w	r3, r7, #28
 80020a4:	4619      	mov	r1, r3
 80020a6:	480c      	ldr	r0, [pc, #48]	; (80020d8 <MX_GPIO_Init+0x24c>)
 80020a8:	f003 feba 	bl	8005e20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2103      	movs	r1, #3
 80020b0:	2017      	movs	r0, #23
 80020b2:	f001 fb72 	bl	800379a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020b6:	2017      	movs	r0, #23
 80020b8:	f001 fb89 	bl	80037ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80020bc:	2200      	movs	r2, #0
 80020be:	2103      	movs	r1, #3
 80020c0:	2028      	movs	r0, #40	; 0x28
 80020c2:	f001 fb6a 	bl	800379a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020c6:	2028      	movs	r0, #40	; 0x28
 80020c8:	f001 fb81 	bl	80037ce <HAL_NVIC_EnableIRQ>

}
 80020cc:	bf00      	nop
 80020ce:	3730      	adds	r7, #48	; 0x30
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	58024400 	.word	0x58024400
 80020d8:	58020400 	.word	0x58020400
 80020dc:	58021000 	.word	0x58021000
 80020e0:	58020c00 	.word	0x58020c00
 80020e4:	58020800 	.word	0x58020800
 80020e8:	58020000 	.word	0x58020000
 80020ec:	11110000 	.word	0x11110000
 80020f0:	58021800 	.word	0x58021800

080020f4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a5a      	ldr	r2, [pc, #360]	; (8002268 <HAL_UART_RxCpltCallback+0x174>)
 8002100:	4293      	cmp	r3, r2
 8002102:	f040 80ad 	bne.w	8002260 <HAL_UART_RxCpltCallback+0x16c>
	{
		UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ReceivedData_Address;
 8002106:	4b59      	ldr	r3, [pc, #356]	; (800226c <HAL_UART_RxCpltCallback+0x178>)
 8002108:	22ac      	movs	r2, #172	; 0xac
 800210a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 800210c:	2364      	movs	r3, #100	; 0x64
 800210e:	2201      	movs	r2, #1
 8002110:	4956      	ldr	r1, [pc, #344]	; (800226c <HAL_UART_RxCpltCallback+0x178>)
 8002112:	4855      	ldr	r0, [pc, #340]	; (8002268 <HAL_UART_RxCpltCallback+0x174>)
 8002114:	f008 f82e 	bl	800a174 <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	2101      	movs	r1, #1
 800211c:	4854      	ldr	r0, [pc, #336]	; (8002270 <HAL_UART_RxCpltCallback+0x17c>)
 800211e:	f004 f82f 	bl	8006180 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002122:	2201      	movs	r2, #1
 8002124:	2102      	movs	r1, #2
 8002126:	4853      	ldr	r0, [pc, #332]	; (8002274 <HAL_UART_RxCpltCallback+0x180>)
 8002128:	f004 f82a 	bl	8006180 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800212c:	2200      	movs	r2, #0
 800212e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002132:	484f      	ldr	r0, [pc, #316]	; (8002270 <HAL_UART_RxCpltCallback+0x17c>)
 8002134:	f004 f824 	bl	8006180 <HAL_GPIO_WritePin>
		volatile uint8_t num_mode = UART3_RXBUFFER[0] & 0x0F;
 8002138:	4b4f      	ldr	r3, [pc, #316]	; (8002278 <HAL_UART_RxCpltCallback+0x184>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	b2db      	uxtb	r3, r3
 8002142:	75fb      	strb	r3, [r7, #23]
		volatile int received_checksum = UART3_RXBUFFER[3];
 8002144:	4b4c      	ldr	r3, [pc, #304]	; (8002278 <HAL_UART_RxCpltCallback+0x184>)
 8002146:	78db      	ldrb	r3, [r3, #3]
 8002148:	613b      	str	r3, [r7, #16]
		volatile int calculate_checksum = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 800214e:	2400      	movs	r4, #0
 8002150:	e006      	b.n	8002160 <HAL_UART_RxCpltCallback+0x6c>
		{
			calculate_checksum += UART3_RXBUFFER[i];
 8002152:	4b49      	ldr	r3, [pc, #292]	; (8002278 <HAL_UART_RxCpltCallback+0x184>)
 8002154:	5d1b      	ldrb	r3, [r3, r4]
 8002156:	461a      	mov	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 800215e:	3401      	adds	r4, #1
 8002160:	2c02      	cmp	r4, #2
 8002162:	ddf6      	ble.n	8002152 <HAL_UART_RxCpltCallback+0x5e>
		}
		calculate_checksum = ~calculate_checksum;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	43db      	mvns	r3, r3
 8002168:	60fb      	str	r3, [r7, #12]
		calculate_checksum = calculate_checksum & 0xFF;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	60fb      	str	r3, [r7, #12]
		if (received_checksum == calculate_checksum)
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	429a      	cmp	r2, r3
 8002176:	d15b      	bne.n	8002230 <HAL_UART_RxCpltCallback+0x13c>
		{
			switch(num_mode)
 8002178:	7dfb      	ldrb	r3, [r7, #23]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	2b0e      	cmp	r3, #14
 8002180:	d844      	bhi.n	800220c <HAL_UART_RxCpltCallback+0x118>
 8002182:	a201      	add	r2, pc, #4	; (adr r2, 8002188 <HAL_UART_RxCpltCallback+0x94>)
 8002184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002188:	0800220d 	.word	0x0800220d
 800218c:	0800220d 	.word	0x0800220d
 8002190:	0800220d 	.word	0x0800220d
 8002194:	0800220d 	.word	0x0800220d
 8002198:	0800220d 	.word	0x0800220d
 800219c:	080021c5 	.word	0x080021c5
 80021a0:	080021cd 	.word	0x080021cd
 80021a4:	080021d5 	.word	0x080021d5
 80021a8:	080021dd 	.word	0x080021dd
 80021ac:	080021e5 	.word	0x080021e5
 80021b0:	080021ed 	.word	0x080021ed
 80021b4:	080021f5 	.word	0x080021f5
 80021b8:	080021fd 	.word	0x080021fd
 80021bc:	08002205 	.word	0x08002205
 80021c0:	0800220d 	.word	0x0800220d
			{
				case 6:		// q1 Mode
				{
					State_Input_Joint_State = 1;
 80021c4:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_UART_RxCpltCallback+0x188>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	701a      	strb	r2, [r3, #0]
					break;
 80021ca:	e020      	b.n	800220e <HAL_UART_RxCpltCallback+0x11a>
				}
				case 7:		// q2 Mode
				{
					State_Input_Joint_State = 1;
 80021cc:	4b2b      	ldr	r3, [pc, #172]	; (800227c <HAL_UART_RxCpltCallback+0x188>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
					break;
 80021d2:	e01c      	b.n	800220e <HAL_UART_RxCpltCallback+0x11a>
				}
				case 8:		// q3 Mode
				{
					State_Input_Joint_State = 1;
 80021d4:	4b29      	ldr	r3, [pc, #164]	; (800227c <HAL_UART_RxCpltCallback+0x188>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	701a      	strb	r2, [r3, #0]
					break;
 80021da:	e018      	b.n	800220e <HAL_UART_RxCpltCallback+0x11a>
				}
				case 9:		// q4 Mode
				{
					State_Input_Joint_State = 1;
 80021dc:	4b27      	ldr	r3, [pc, #156]	; (800227c <HAL_UART_RxCpltCallback+0x188>)
 80021de:	2201      	movs	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
					break;
 80021e2:	e014      	b.n	800220e <HAL_UART_RxCpltCallback+0x11a>
				}
				case 10:	// Set Home Mode
				{
					State_Set_Home = 1;
 80021e4:	4b26      	ldr	r3, [pc, #152]	; (8002280 <HAL_UART_RxCpltCallback+0x18c>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	701a      	strb	r2, [r3, #0]
					break;
 80021ea:	e010      	b.n	800220e <HAL_UART_RxCpltCallback+0x11a>
				{
					break;
				}
				case 11:	// Request 4 Joint State Mode
				{
					State_Print_4_Joint_State = 1;
 80021ec:	4b25      	ldr	r3, [pc, #148]	; (8002284 <HAL_UART_RxCpltCallback+0x190>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
					break;
 80021f2:	e00c      	b.n	800220e <HAL_UART_RxCpltCallback+0x11a>
				}
				case 12:	// Request Gripper State Mode
				{
					State_Print_Gripper_State = 1;
 80021f4:	4b24      	ldr	r3, [pc, #144]	; (8002288 <HAL_UART_RxCpltCallback+0x194>)
 80021f6:	2201      	movs	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
					break;
 80021fa:	e008      	b.n	800220e <HAL_UART_RxCpltCallback+0x11a>
				}
				case 13:	// Activate Gripper Mode
				{
					State_Activate_Gripper = 1;
 80021fc:	4b23      	ldr	r3, [pc, #140]	; (800228c <HAL_UART_RxCpltCallback+0x198>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
					break;
 8002202:	e004      	b.n	800220e <HAL_UART_RxCpltCallback+0x11a>
				}
				case 14:	// Deactivate Gripper Mode
				{
					State_Deactivate_Gripper = 1;
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <HAL_UART_RxCpltCallback+0x19c>)
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
					break;
 800220a:	e000      	b.n	800220e <HAL_UART_RxCpltCallback+0x11a>
				{
					break;
				}
				default:
				{
					break;
 800220c:	bf00      	nop
				}
			}
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800220e:	2201      	movs	r2, #1
 8002210:	2101      	movs	r1, #1
 8002212:	4817      	ldr	r0, [pc, #92]	; (8002270 <HAL_UART_RxCpltCallback+0x17c>)
 8002214:	f003 ffb4 	bl	8006180 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002218:	2200      	movs	r2, #0
 800221a:	2102      	movs	r1, #2
 800221c:	4815      	ldr	r0, [pc, #84]	; (8002274 <HAL_UART_RxCpltCallback+0x180>)
 800221e:	f003 ffaf 	bl	8006180 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002228:	4811      	ldr	r0, [pc, #68]	; (8002270 <HAL_UART_RxCpltCallback+0x17c>)
 800222a:	f003 ffa9 	bl	8006180 <HAL_GPIO_WritePin>
 800222e:	e012      	b.n	8002256 <HAL_UART_RxCpltCallback+0x162>
		}
		else
		{
			  State_Checksum_Error = 1;
 8002230:	4b18      	ldr	r3, [pc, #96]	; (8002294 <HAL_UART_RxCpltCallback+0x1a0>)
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	2101      	movs	r1, #1
 800223a:	480d      	ldr	r0, [pc, #52]	; (8002270 <HAL_UART_RxCpltCallback+0x17c>)
 800223c:	f003 ffa0 	bl	8006180 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002240:	2200      	movs	r2, #0
 8002242:	2102      	movs	r1, #2
 8002244:	480b      	ldr	r0, [pc, #44]	; (8002274 <HAL_UART_RxCpltCallback+0x180>)
 8002246:	f003 ff9b 	bl	8006180 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800224a:	2201      	movs	r2, #1
 800224c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002250:	4807      	ldr	r0, [pc, #28]	; (8002270 <HAL_UART_RxCpltCallback+0x17c>)
 8002252:	f003 ff95 	bl	8006180 <HAL_GPIO_WritePin>
		}
		HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, BUFFSIZE);
 8002256:	2204      	movs	r2, #4
 8002258:	4907      	ldr	r1, [pc, #28]	; (8002278 <HAL_UART_RxCpltCallback+0x184>)
 800225a:	4803      	ldr	r0, [pc, #12]	; (8002268 <HAL_UART_RxCpltCallback+0x174>)
 800225c:	f008 f8f4 	bl	800a448 <HAL_UART_Receive_IT>
	}
}
 8002260:	bf00      	nop
 8002262:	371c      	adds	r7, #28
 8002264:	46bd      	mov	sp, r7
 8002266:	bd90      	pop	{r4, r7, pc}
 8002268:	20000460 	.word	0x20000460
 800226c:	2000082c 	.word	0x2000082c
 8002270:	58020400 	.word	0x58020400
 8002274:	58021000 	.word	0x58021000
 8002278:	20000af4 	.word	0x20000af4
 800227c:	200006ac 	.word	0x200006ac
 8002280:	2000082d 	.word	0x2000082d
 8002284:	2000082e 	.word	0x2000082e
 8002288:	20000254 	.word	0x20000254
 800228c:	20000af0 	.word	0x20000af0
 8002290:	20000574 	.word	0x20000574
 8002294:	20000a74 	.word	0x20000a74

08002298 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LM1_Pin || GPIO_Pin == LM2_Pin || GPIO_Pin == LM3_Pin || GPIO_Pin == LM4_Pin || GPIO_Pin == LM5_Pin)
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a8:	d00d      	beq.n	80022c6 <HAL_GPIO_EXTI_Callback+0x2e>
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b0:	d009      	beq.n	80022c6 <HAL_GPIO_EXTI_Callback+0x2e>
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	2b80      	cmp	r3, #128	; 0x80
 80022b6:	d006      	beq.n	80022c6 <HAL_GPIO_EXTI_Callback+0x2e>
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	2b40      	cmp	r3, #64	; 0x40
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_EXTI_Callback+0x2e>
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022c4:	d12b      	bne.n	800231e <HAL_GPIO_EXTI_Callback+0x86>
	{
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2101      	movs	r1, #1
 80022ca:	481d      	ldr	r0, [pc, #116]	; (8002340 <HAL_GPIO_EXTI_Callback+0xa8>)
 80022cc:	f003 ff58 	bl	8006180 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80022d0:	2200      	movs	r2, #0
 80022d2:	2102      	movs	r1, #2
 80022d4:	481b      	ldr	r0, [pc, #108]	; (8002344 <HAL_GPIO_EXTI_Callback+0xac>)
 80022d6:	f003 ff53 	bl	8006180 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80022da:	2201      	movs	r2, #1
 80022dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022e0:	4817      	ldr	r0, [pc, #92]	; (8002340 <HAL_GPIO_EXTI_Callback+0xa8>)
 80022e2:	f003 ff4d 	bl	8006180 <HAL_GPIO_WritePin>

		  HAL_TIM_Base_Stop_IT(&htim5);
 80022e6:	4818      	ldr	r0, [pc, #96]	; (8002348 <HAL_GPIO_EXTI_Callback+0xb0>)
 80022e8:	f006 fc2a 	bl	8008b40 <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_Stop_IT(&htim12);
 80022ec:	4817      	ldr	r0, [pc, #92]	; (800234c <HAL_GPIO_EXTI_Callback+0xb4>)
 80022ee:	f006 fc27 	bl	8008b40 <HAL_TIM_Base_Stop_IT>

		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80022f2:	2104      	movs	r1, #4
 80022f4:	4816      	ldr	r0, [pc, #88]	; (8002350 <HAL_GPIO_EXTI_Callback+0xb8>)
 80022f6:	f006 fdbb 	bl	8008e70 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80022fa:	2108      	movs	r1, #8
 80022fc:	4815      	ldr	r0, [pc, #84]	; (8002354 <HAL_GPIO_EXTI_Callback+0xbc>)
 80022fe:	f006 fdb7 	bl	8008e70 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002302:	2100      	movs	r1, #0
 8002304:	4814      	ldr	r0, [pc, #80]	; (8002358 <HAL_GPIO_EXTI_Callback+0xc0>)
 8002306:	f006 fdb3 	bl	8008e70 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 800230a:	2108      	movs	r1, #8
 800230c:	4813      	ldr	r0, [pc, #76]	; (800235c <HAL_GPIO_EXTI_Callback+0xc4>)
 800230e:	f006 fdaf 	bl	8008e70 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 8002312:	2104      	movs	r1, #4
 8002314:	4812      	ldr	r0, [pc, #72]	; (8002360 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002316:	f006 fdab 	bl	8008e70 <HAL_TIM_PWM_Stop>
		  Error_Handler();
 800231a:	f000 f9ef 	bl	80026fc <Error_Handler>

	}
	if(GPIO_Pin == Blue_Button_Pin)
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002324:	d108      	bne.n	8002338 <HAL_GPIO_EXTI_Callback+0xa0>
	  {
		UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ReceivedData_Address;
 8002326:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002328:	22ac      	movs	r2, #172	; 0xac
 800232a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 800232c:	2364      	movs	r3, #100	; 0x64
 800232e:	2201      	movs	r2, #1
 8002330:	490c      	ldr	r1, [pc, #48]	; (8002364 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002332:	480d      	ldr	r0, [pc, #52]	; (8002368 <HAL_GPIO_EXTI_Callback+0xd0>)
 8002334:	f007 ff1e 	bl	800a174 <HAL_UART_Transmit>
		//		T += 3;
//		HAL_TIM_Base_Start_IT(&htim12);
	  }
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	58020400 	.word	0x58020400
 8002344:	58021000 	.word	0x58021000
 8002348:	20000634 	.word	0x20000634
 800234c:	20000a24 	.word	0x20000a24
 8002350:	20000834 	.word	0x20000834
 8002354:	20000948 	.word	0x20000948
 8002358:	200006b4 	.word	0x200006b4
 800235c:	20000388 	.word	0x20000388
 8002360:	20000504 	.word	0x20000504
 8002364:	2000082c 	.word	0x2000082c
 8002368:	20000460 	.word	0x20000460

0800236c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	 * HAL_TIM_Base_Start_IT(&htim5);
	 * HAL_TIM_Base_Stop_IT(&htim5);
	 *
	 */
  /* Timer5 Interrupt for PID Position Control.*/
  if (htim->Instance == TIM5)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4aca      	ldr	r2, [pc, #808]	; (80026a4 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800237a:	4293      	cmp	r3, r2
 800237c:	f040 8084 	bne.w	8002488 <HAL_TIM_PeriodElapsedCallback+0x11c>
  {
	    // PID Control Loop
	    StepDriveRad(1, PIDCalculate(&PID_Joint1, q[0], q_s[0]));
 8002380:	4bc9      	ldr	r3, [pc, #804]	; (80026a8 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	4bc9      	ldr	r3, [pc, #804]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002388:	ed93 7a00 	vldr	s14, [r3]
 800238c:	eef0 0a47 	vmov.f32	s1, s14
 8002390:	eeb0 0a67 	vmov.f32	s0, s15
 8002394:	48c6      	ldr	r0, [pc, #792]	; (80026b0 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002396:	f7fe fb05 	bl	80009a4 <PIDCalculate>
 800239a:	eef0 7a40 	vmov.f32	s15, s0
 800239e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023a2:	eeb0 0b47 	vmov.f64	d0, d7
 80023a6:	2001      	movs	r0, #1
 80023a8:	f7fe fcd2 	bl	8000d50 <StepDriveRad>
	    q_s[0] = q_s[0] + theta_q[0];
 80023ac:	4bbf      	ldr	r3, [pc, #764]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 80023ae:	ed93 7a00 	vldr	s14, [r3]
 80023b2:	4bc0      	ldr	r3, [pc, #768]	; (80026b4 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023bc:	4bbb      	ldr	r3, [pc, #748]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 80023be:	edc3 7a00 	vstr	s15, [r3]
	    StepDriveRad(2, PIDCalculate(&PID_Joint2, q[1], q_s[1]));
 80023c2:	4bb9      	ldr	r3, [pc, #740]	; (80026a8 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80023c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80023c8:	4bb8      	ldr	r3, [pc, #736]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 80023ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80023ce:	eef0 0a47 	vmov.f32	s1, s14
 80023d2:	eeb0 0a67 	vmov.f32	s0, s15
 80023d6:	48b8      	ldr	r0, [pc, #736]	; (80026b8 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80023d8:	f7fe fae4 	bl	80009a4 <PIDCalculate>
 80023dc:	eef0 7a40 	vmov.f32	s15, s0
 80023e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023e4:	eeb0 0b47 	vmov.f64	d0, d7
 80023e8:	2002      	movs	r0, #2
 80023ea:	f7fe fcb1 	bl	8000d50 <StepDriveRad>
	    q_s[1] = q_s[1] + theta_q[1];
 80023ee:	4baf      	ldr	r3, [pc, #700]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 80023f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80023f4:	4baf      	ldr	r3, [pc, #700]	; (80026b4 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80023f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80023fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fe:	4bab      	ldr	r3, [pc, #684]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002400:	edc3 7a01 	vstr	s15, [r3, #4]
	    StepDriveRad(3, PIDCalculate(&PID_Joint3, q[2], q_s[2]));
 8002404:	4ba8      	ldr	r3, [pc, #672]	; (80026a8 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002406:	edd3 7a02 	vldr	s15, [r3, #8]
 800240a:	4ba8      	ldr	r3, [pc, #672]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 800240c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002410:	eef0 0a47 	vmov.f32	s1, s14
 8002414:	eeb0 0a67 	vmov.f32	s0, s15
 8002418:	48a8      	ldr	r0, [pc, #672]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0x350>)
 800241a:	f7fe fac3 	bl	80009a4 <PIDCalculate>
 800241e:	eef0 7a40 	vmov.f32	s15, s0
 8002422:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002426:	eeb0 0b47 	vmov.f64	d0, d7
 800242a:	2003      	movs	r0, #3
 800242c:	f7fe fc90 	bl	8000d50 <StepDriveRad>
	    q_s[2] = q_s[2] + theta_q[2];
 8002430:	4b9e      	ldr	r3, [pc, #632]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002432:	ed93 7a02 	vldr	s14, [r3, #8]
 8002436:	4b9f      	ldr	r3, [pc, #636]	; (80026b4 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002438:	edd3 7a02 	vldr	s15, [r3, #8]
 800243c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002440:	4b9a      	ldr	r3, [pc, #616]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002442:	edc3 7a02 	vstr	s15, [r3, #8]
	    StepDriveRad(4, PIDCalculate(&PID_Joint4, q[3], q_s[3]));
 8002446:	4b98      	ldr	r3, [pc, #608]	; (80026a8 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002448:	edd3 7a03 	vldr	s15, [r3, #12]
 800244c:	4b97      	ldr	r3, [pc, #604]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 800244e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002452:	eef0 0a47 	vmov.f32	s1, s14
 8002456:	eeb0 0a67 	vmov.f32	s0, s15
 800245a:	4899      	ldr	r0, [pc, #612]	; (80026c0 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800245c:	f7fe faa2 	bl	80009a4 <PIDCalculate>
 8002460:	eef0 7a40 	vmov.f32	s15, s0
 8002464:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002468:	eeb0 0b47 	vmov.f64	d0, d7
 800246c:	2004      	movs	r0, #4
 800246e:	f7fe fc6f 	bl	8000d50 <StepDriveRad>
	    q_s[3] = q_s[3] + theta_q[3];
 8002472:	4b8e      	ldr	r3, [pc, #568]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002474:	ed93 7a03 	vldr	s14, [r3, #12]
 8002478:	4b8e      	ldr	r3, [pc, #568]	; (80026b4 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800247a:	edd3 7a03 	vldr	s15, [r3, #12]
 800247e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002482:	4b8a      	ldr	r3, [pc, #552]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002484:	edc3 7a03 	vstr	s15, [r3, #12]
  }
  /* Timer12 Interrupt for Trajectory Generation.*/
  if (htim->Instance == TIM12)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a8d      	ldr	r2, [pc, #564]	; (80026c4 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800248e:	4293      	cmp	r3, r2
 8002490:	f040 8104 	bne.w	800269c <HAL_TIM_PeriodElapsedCallback+0x330>
  {
	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002494:	2201      	movs	r2, #1
 8002496:	2102      	movs	r1, #2
 8002498:	488b      	ldr	r0, [pc, #556]	; (80026c8 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800249a:	f003 fe71 	bl	8006180 <HAL_GPIO_WritePin>

	    // Cubic Trajectory
	    float t_2 = t*t;
 800249e:	4b8b      	ldr	r3, [pc, #556]	; (80026cc <HAL_TIM_PeriodElapsedCallback+0x360>)
 80024a0:	ed93 7a00 	vldr	s14, [r3]
 80024a4:	4b89      	ldr	r3, [pc, #548]	; (80026cc <HAL_TIM_PeriodElapsedCallback+0x360>)
 80024a6:	edd3 7a00 	vldr	s15, [r3]
 80024aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ae:	edc7 7a05 	vstr	s15, [r7, #20]
	    float t_3 = t_2 * t;
 80024b2:	4b86      	ldr	r3, [pc, #536]	; (80026cc <HAL_TIM_PeriodElapsedCallback+0x360>)
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80024bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c0:	edc7 7a04 	vstr	s15, [r7, #16]
	    float Goal_position_x = C0x + (C2x*t_2) + (C3x*t_3);
 80024c4:	4b82      	ldr	r3, [pc, #520]	; (80026d0 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80024c6:	ed93 7a00 	vldr	s14, [r3]
 80024ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80024ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024d2:	4b80      	ldr	r3, [pc, #512]	; (80026d4 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024dc:	4b7e      	ldr	r3, [pc, #504]	; (80026d8 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80024de:	edd3 6a00 	vldr	s13, [r3]
 80024e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80024e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ee:	edc7 7a03 	vstr	s15, [r7, #12]
	    float Goal_position_y = C0y + (C2y*t_2) + (C3y*t_3);
 80024f2:	4b7a      	ldr	r3, [pc, #488]	; (80026dc <HAL_TIM_PeriodElapsedCallback+0x370>)
 80024f4:	ed93 7a00 	vldr	s14, [r3]
 80024f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80024fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002500:	4b77      	ldr	r3, [pc, #476]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8002502:	edd3 7a00 	vldr	s15, [r3]
 8002506:	ee37 7a27 	vadd.f32	s14, s14, s15
 800250a:	4b76      	ldr	r3, [pc, #472]	; (80026e4 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800250c:	edd3 6a00 	vldr	s13, [r3]
 8002510:	edd7 7a04 	vldr	s15, [r7, #16]
 8002514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251c:	edc7 7a02 	vstr	s15, [r7, #8]

	    // Circle Trajectory


	    // Inverse Pose Kinematics
	    IPK_findChessBot(Goal_position_x, Goal_position_y, 0, 0);
 8002520:	eddf 1a71 	vldr	s3, [pc, #452]	; 80026e8 <HAL_TIM_PeriodElapsedCallback+0x37c>
 8002524:	ed9f 1a70 	vldr	s2, [pc, #448]	; 80026e8 <HAL_TIM_PeriodElapsedCallback+0x37c>
 8002528:	edd7 0a02 	vldr	s1, [r7, #8]
 800252c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002530:	f7fe fad6 	bl	8000ae0 <IPK_findChessBot>

	    // Inverse Velocity Kinematics
	    IVK();
 8002534:	f7fe fbfc 	bl	8000d30 <IVK>

	    // Inverse Acceleration Kinematics
	    IAK();
 8002538:	f7fe fc01 	bl	8000d3e <IAK>

	    // Casade Control Loop
	    StepDriveRad(1, PIDCalculate(&PID_Joint1, q[0], q_s[0]));
 800253c:	4b5a      	ldr	r3, [pc, #360]	; (80026a8 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800253e:	edd3 7a00 	vldr	s15, [r3]
 8002542:	4b5a      	ldr	r3, [pc, #360]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002544:	ed93 7a00 	vldr	s14, [r3]
 8002548:	eef0 0a47 	vmov.f32	s1, s14
 800254c:	eeb0 0a67 	vmov.f32	s0, s15
 8002550:	4857      	ldr	r0, [pc, #348]	; (80026b0 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002552:	f7fe fa27 	bl	80009a4 <PIDCalculate>
 8002556:	eef0 7a40 	vmov.f32	s15, s0
 800255a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800255e:	eeb0 0b47 	vmov.f64	d0, d7
 8002562:	2001      	movs	r0, #1
 8002564:	f7fe fbf4 	bl	8000d50 <StepDriveRad>
	    q_s[0] = q_s[0] + theta_q[0];
 8002568:	4b50      	ldr	r3, [pc, #320]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 800256a:	ed93 7a00 	vldr	s14, [r3]
 800256e:	4b51      	ldr	r3, [pc, #324]	; (80026b4 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002570:	edd3 7a00 	vldr	s15, [r3]
 8002574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002578:	4b4c      	ldr	r3, [pc, #304]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 800257a:	edc3 7a00 	vstr	s15, [r3]
	    StepDriveRad(2, PIDCalculate(&PID_Joint2, q[1], q_s[1]));
 800257e:	4b4a      	ldr	r3, [pc, #296]	; (80026a8 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002580:	edd3 7a01 	vldr	s15, [r3, #4]
 8002584:	4b49      	ldr	r3, [pc, #292]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002586:	ed93 7a01 	vldr	s14, [r3, #4]
 800258a:	eef0 0a47 	vmov.f32	s1, s14
 800258e:	eeb0 0a67 	vmov.f32	s0, s15
 8002592:	4849      	ldr	r0, [pc, #292]	; (80026b8 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8002594:	f7fe fa06 	bl	80009a4 <PIDCalculate>
 8002598:	eef0 7a40 	vmov.f32	s15, s0
 800259c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025a0:	eeb0 0b47 	vmov.f64	d0, d7
 80025a4:	2002      	movs	r0, #2
 80025a6:	f7fe fbd3 	bl	8000d50 <StepDriveRad>
	    q_s[1] = q_s[1] + theta_q[1];
 80025aa:	4b40      	ldr	r3, [pc, #256]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 80025ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80025b0:	4b40      	ldr	r3, [pc, #256]	; (80026b4 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80025b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80025b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ba:	4b3c      	ldr	r3, [pc, #240]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 80025bc:	edc3 7a01 	vstr	s15, [r3, #4]
	    StepDriveRad(3, PIDCalculate(&PID_Joint3, q[2], q_s[2]));
 80025c0:	4b39      	ldr	r3, [pc, #228]	; (80026a8 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80025c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80025c6:	4b39      	ldr	r3, [pc, #228]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 80025c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80025cc:	eef0 0a47 	vmov.f32	s1, s14
 80025d0:	eeb0 0a67 	vmov.f32	s0, s15
 80025d4:	4839      	ldr	r0, [pc, #228]	; (80026bc <HAL_TIM_PeriodElapsedCallback+0x350>)
 80025d6:	f7fe f9e5 	bl	80009a4 <PIDCalculate>
 80025da:	eef0 7a40 	vmov.f32	s15, s0
 80025de:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025e2:	eeb0 0b47 	vmov.f64	d0, d7
 80025e6:	2003      	movs	r0, #3
 80025e8:	f7fe fbb2 	bl	8000d50 <StepDriveRad>
	    q_s[2] = q_s[2] + theta_q[2];
 80025ec:	4b2f      	ldr	r3, [pc, #188]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 80025ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80025f2:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80025f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80025f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fc:	4b2b      	ldr	r3, [pc, #172]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 80025fe:	edc3 7a02 	vstr	s15, [r3, #8]
	    StepDriveRad(4, PIDCalculate(&PID_Joint4, q[3], q_s[3]));
 8002602:	4b29      	ldr	r3, [pc, #164]	; (80026a8 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002604:	edd3 7a03 	vldr	s15, [r3, #12]
 8002608:	4b28      	ldr	r3, [pc, #160]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 800260a:	ed93 7a03 	vldr	s14, [r3, #12]
 800260e:	eef0 0a47 	vmov.f32	s1, s14
 8002612:	eeb0 0a67 	vmov.f32	s0, s15
 8002616:	482a      	ldr	r0, [pc, #168]	; (80026c0 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8002618:	f7fe f9c4 	bl	80009a4 <PIDCalculate>
 800261c:	eef0 7a40 	vmov.f32	s15, s0
 8002620:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002624:	eeb0 0b47 	vmov.f64	d0, d7
 8002628:	2004      	movs	r0, #4
 800262a:	f7fe fb91 	bl	8000d50 <StepDriveRad>
	    q_s[3] = q_s[3] + theta_q[3];
 800262e:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002630:	ed93 7a03 	vldr	s14, [r3, #12]
 8002634:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002636:	edd3 7a03 	vldr	s15, [r3, #12]
 800263a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800263e:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002640:	edc3 7a03 	vstr	s15, [r3, #12]

	    // Sample time 0.0005 seconds
	    if (t < T)
 8002644:	4b21      	ldr	r3, [pc, #132]	; (80026cc <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002646:	ed93 7a00 	vldr	s14, [r3]
 800264a:	4b28      	ldr	r3, [pc, #160]	; (80026ec <HAL_TIM_PeriodElapsedCallback+0x380>)
 800264c:	edd3 7a00 	vldr	s15, [r3]
 8002650:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002658:	d50b      	bpl.n	8002672 <HAL_TIM_PeriodElapsedCallback+0x306>
	    {
	        t = t + sample_time;
 800265a:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <HAL_TIM_PeriodElapsedCallback+0x360>)
 800265c:	ed93 7a00 	vldr	s14, [r3]
 8002660:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8002662:	edd3 7a00 	vldr	s15, [r3]
 8002666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_TIM_PeriodElapsedCallback+0x360>)
 800266c:	edc3 7a00 	vstr	s15, [r3]
	    	HAL_TIM_Base_Stop_IT(&htim12);
	    	State_Casade_Control_Timer = 1;
	        // Stop Control Loop
	    }
  }
}
 8002670:	e014      	b.n	800269c <HAL_TIM_PeriodElapsedCallback+0x330>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002672:	2200      	movs	r2, #0
 8002674:	2102      	movs	r1, #2
 8002676:	4814      	ldr	r0, [pc, #80]	; (80026c8 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002678:	f003 fd82 	bl	8006180 <HAL_GPIO_WritePin>
	    	t = T;
 800267c:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_TIM_PeriodElapsedCallback+0x380>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a12      	ldr	r2, [pc, #72]	; (80026cc <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002682:	6013      	str	r3, [r2, #0]
	    	C0x = Goal_position_x;
 8002684:	4a13      	ldr	r2, [pc, #76]	; (80026d4 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6013      	str	r3, [r2, #0]
	    	C0y = Goal_position_y;
 800268a:	4a15      	ldr	r2, [pc, #84]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x374>)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	6013      	str	r3, [r2, #0]
	    	HAL_TIM_Base_Stop_IT(&htim12);
 8002690:	4818      	ldr	r0, [pc, #96]	; (80026f4 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8002692:	f006 fa55 	bl	8008b40 <HAL_TIM_Base_Stop_IT>
	    	State_Casade_Control_Timer = 1;
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8002698:	2201      	movs	r2, #1
 800269a:	701a      	strb	r2, [r3, #0]
}
 800269c:	bf00      	nop
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40000c00 	.word	0x40000c00
 80026a8:	20000204 	.word	0x20000204
 80026ac:	20000788 	.word	0x20000788
 80026b0:	2000035c 	.word	0x2000035c
 80026b4:	20000814 	.word	0x20000814
 80026b8:	20000888 	.word	0x20000888
 80026bc:	20000228 	.word	0x20000228
 80026c0:	20000680 	.word	0x20000680
 80026c4:	40001800 	.word	0x40001800
 80026c8:	58021000 	.word	0x58021000
 80026cc:	20000214 	.word	0x20000214
 80026d0:	20000884 	.word	0x20000884
 80026d4:	20000004 	.word	0x20000004
 80026d8:	20000880 	.word	0x20000880
 80026dc:	20000578 	.word	0x20000578
 80026e0:	20000a70 	.word	0x20000a70
 80026e4:	20000830 	.word	0x20000830
 80026e8:	00000000 	.word	0x00000000
 80026ec:	200006b0 	.word	0x200006b0
 80026f0:	20000000 	.word	0x20000000
 80026f4:	20000a24 	.word	0x20000a24
 80026f8:	20000944 	.word	0x20000944

080026fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002700:	2200      	movs	r2, #0
 8002702:	2101      	movs	r1, #1
 8002704:	4808      	ldr	r0, [pc, #32]	; (8002728 <Error_Handler+0x2c>)
 8002706:	f003 fd3b 	bl	8006180 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800270a:	2200      	movs	r2, #0
 800270c:	2102      	movs	r1, #2
 800270e:	4807      	ldr	r0, [pc, #28]	; (800272c <Error_Handler+0x30>)
 8002710:	f003 fd36 	bl	8006180 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002714:	2201      	movs	r2, #1
 8002716:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800271a:	4803      	ldr	r0, [pc, #12]	; (8002728 <Error_Handler+0x2c>)
 800271c:	f003 fd30 	bl	8006180 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002720:	b672      	cpsid	i
}
 8002722:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002724:	e7fe      	b.n	8002724 <Error_Handler+0x28>
 8002726:	bf00      	nop
 8002728:	58020400 	.word	0x58020400
 800272c:	58021000 	.word	0x58021000

08002730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_MspInit+0x30>)
 8002738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800273c:	4a08      	ldr	r2, [pc, #32]	; (8002760 <HAL_MspInit+0x30>)
 800273e:	f043 0302 	orr.w	r3, r3, #2
 8002742:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_MspInit+0x30>)
 8002748:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	58024400 	.word	0x58024400

08002764 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <HAL_CRC_MspInit+0x3c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d10e      	bne.n	8002794 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_CRC_MspInit+0x40>)
 8002778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800277c:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <HAL_CRC_MspInit+0x40>)
 800277e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002782:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002786:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <HAL_CRC_MspInit+0x40>)
 8002788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800278c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002794:	bf00      	nop
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	58024c00 	.word	0x58024c00
 80027a4:	58024400 	.word	0x58024400

080027a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b0b8      	sub	sp, #224	; 0xe0
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027c0:	f107 0310 	add.w	r3, r7, #16
 80027c4:	22bc      	movs	r2, #188	; 0xbc
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f00a fddd 	bl	800d388 <memset>
  if(hspi->Instance==SPI3)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a25      	ldr	r2, [pc, #148]	; (8002868 <HAL_SPI_MspInit+0xc0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d142      	bne.n	800285e <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80027d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027dc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80027de:	2300      	movs	r3, #0
 80027e0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027e2:	f107 0310 	add.w	r3, r7, #16
 80027e6:	4618      	mov	r0, r3
 80027e8:	f004 fcd4 	bl	8007194 <HAL_RCCEx_PeriphCLKConfig>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80027f2:	f7ff ff83 	bl	80026fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027f6:	4b1d      	ldr	r3, [pc, #116]	; (800286c <HAL_SPI_MspInit+0xc4>)
 80027f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027fc:	4a1b      	ldr	r2, [pc, #108]	; (800286c <HAL_SPI_MspInit+0xc4>)
 80027fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002802:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002806:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_SPI_MspInit+0xc4>)
 8002808:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800280c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002814:	4b15      	ldr	r3, [pc, #84]	; (800286c <HAL_SPI_MspInit+0xc4>)
 8002816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800281a:	4a14      	ldr	r2, [pc, #80]	; (800286c <HAL_SPI_MspInit+0xc4>)
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_SPI_MspInit+0xc4>)
 8002826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002832:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002836:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283a:	2302      	movs	r3, #2
 800283c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800284c:	2306      	movs	r3, #6
 800284e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002852:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002856:	4619      	mov	r1, r3
 8002858:	4805      	ldr	r0, [pc, #20]	; (8002870 <HAL_SPI_MspInit+0xc8>)
 800285a:	f003 fae1 	bl	8005e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800285e:	bf00      	nop
 8002860:	37e0      	adds	r7, #224	; 0xe0
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40003c00 	.word	0x40003c00
 800286c:	58024400 	.word	0x58024400
 8002870:	58020800 	.word	0x58020800

08002874 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a51      	ldr	r2, [pc, #324]	; (80029c8 <HAL_TIM_Base_MspInit+0x154>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d10f      	bne.n	80028a6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002886:	4b51      	ldr	r3, [pc, #324]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 8002888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800288c:	4a4f      	ldr	r2, [pc, #316]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002896:	4b4d      	ldr	r3, [pc, #308]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 8002898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	627b      	str	r3, [r7, #36]	; 0x24
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80028a4:	e08c      	b.n	80029c0 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM2)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ae:	d10f      	bne.n	80028d0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028b0:	4b46      	ldr	r3, [pc, #280]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 80028b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028b6:	4a45      	ldr	r2, [pc, #276]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028c0:	4b42      	ldr	r3, [pc, #264]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 80028c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	623b      	str	r3, [r7, #32]
 80028cc:	6a3b      	ldr	r3, [r7, #32]
}
 80028ce:	e077      	b.n	80029c0 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM3)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a3e      	ldr	r2, [pc, #248]	; (80029d0 <HAL_TIM_Base_MspInit+0x15c>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d10f      	bne.n	80028fa <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028da:	4b3c      	ldr	r3, [pc, #240]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 80028dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028e0:	4a3a      	ldr	r2, [pc, #232]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 80028e2:	f043 0302 	orr.w	r3, r3, #2
 80028e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028ea:	4b38      	ldr	r3, [pc, #224]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 80028ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	69fb      	ldr	r3, [r7, #28]
}
 80028f8:	e062      	b.n	80029c0 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM4)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a35      	ldr	r2, [pc, #212]	; (80029d4 <HAL_TIM_Base_MspInit+0x160>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d10f      	bne.n	8002924 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002904:	4b31      	ldr	r3, [pc, #196]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 8002906:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800290a:	4a30      	ldr	r2, [pc, #192]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 800290c:	f043 0304 	orr.w	r3, r3, #4
 8002910:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 8002916:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	61bb      	str	r3, [r7, #24]
 8002920:	69bb      	ldr	r3, [r7, #24]
}
 8002922:	e04d      	b.n	80029c0 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM5)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a2b      	ldr	r2, [pc, #172]	; (80029d8 <HAL_TIM_Base_MspInit+0x164>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d117      	bne.n	800295e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800292e:	4b27      	ldr	r3, [pc, #156]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 8002930:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002934:	4a25      	ldr	r2, [pc, #148]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 8002936:	f043 0308 	orr.w	r3, r3, #8
 800293a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800293e:	4b23      	ldr	r3, [pc, #140]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 8002940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	617b      	str	r3, [r7, #20]
 800294a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800294c:	2200      	movs	r2, #0
 800294e:	2100      	movs	r1, #0
 8002950:	2032      	movs	r0, #50	; 0x32
 8002952:	f000 ff22 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002956:	2032      	movs	r0, #50	; 0x32
 8002958:	f000 ff39 	bl	80037ce <HAL_NVIC_EnableIRQ>
}
 800295c:	e030      	b.n	80029c0 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM12)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1e      	ldr	r2, [pc, #120]	; (80029dc <HAL_TIM_Base_MspInit+0x168>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d117      	bne.n	8002998 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002968:	4b18      	ldr	r3, [pc, #96]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 800296a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800296e:	4a17      	ldr	r2, [pc, #92]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 8002970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002974:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002978:	4b14      	ldr	r3, [pc, #80]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 800297a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002986:	2200      	movs	r2, #0
 8002988:	2100      	movs	r1, #0
 800298a:	202b      	movs	r0, #43	; 0x2b
 800298c:	f000 ff05 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002990:	202b      	movs	r0, #43	; 0x2b
 8002992:	f000 ff1c 	bl	80037ce <HAL_NVIC_EnableIRQ>
}
 8002996:	e013      	b.n	80029c0 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM15)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a10      	ldr	r2, [pc, #64]	; (80029e0 <HAL_TIM_Base_MspInit+0x16c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d10e      	bne.n	80029c0 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80029a2:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 80029a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029a8:	4a08      	ldr	r2, [pc, #32]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 80029aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_TIM_Base_MspInit+0x158>)
 80029b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]
}
 80029c0:	bf00      	nop
 80029c2:	3728      	adds	r7, #40	; 0x28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40010000 	.word	0x40010000
 80029cc:	58024400 	.word	0x58024400
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40000800 	.word	0x40000800
 80029d8:	40000c00 	.word	0x40000c00
 80029dc:	40001800 	.word	0x40001800
 80029e0:	40014000 	.word	0x40014000

080029e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08c      	sub	sp, #48	; 0x30
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 031c 	add.w	r3, r7, #28
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a5e      	ldr	r2, [pc, #376]	; (8002b7c <HAL_TIM_MspPostInit+0x198>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d120      	bne.n	8002a48 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a06:	4b5e      	ldr	r3, [pc, #376]	; (8002b80 <HAL_TIM_MspPostInit+0x19c>)
 8002a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0c:	4a5c      	ldr	r2, [pc, #368]	; (8002b80 <HAL_TIM_MspPostInit+0x19c>)
 8002a0e:	f043 0310 	orr.w	r3, r3, #16
 8002a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a16:	4b5a      	ldr	r3, [pc, #360]	; (8002b80 <HAL_TIM_MspPostInit+0x19c>)
 8002a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	61bb      	str	r3, [r7, #24]
 8002a22:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8002a24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a32:	2300      	movs	r3, #0
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a36:	2301      	movs	r3, #1
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8002a3a:	f107 031c 	add.w	r3, r7, #28
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4850      	ldr	r0, [pc, #320]	; (8002b84 <HAL_TIM_MspPostInit+0x1a0>)
 8002a42:	f003 f9ed 	bl	8005e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002a46:	e094      	b.n	8002b72 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a50:	d120      	bne.n	8002a94 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a52:	4b4b      	ldr	r3, [pc, #300]	; (8002b80 <HAL_TIM_MspPostInit+0x19c>)
 8002a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a58:	4a49      	ldr	r2, [pc, #292]	; (8002b80 <HAL_TIM_MspPostInit+0x19c>)
 8002a5a:	f043 0302 	orr.w	r3, r3, #2
 8002a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a62:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <HAL_TIM_MspPostInit+0x19c>)
 8002a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8002a70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a82:	2301      	movs	r3, #1
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8002a86:	f107 031c 	add.w	r3, r7, #28
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	483e      	ldr	r0, [pc, #248]	; (8002b88 <HAL_TIM_MspPostInit+0x1a4>)
 8002a8e:	f003 f9c7 	bl	8005e20 <HAL_GPIO_Init>
}
 8002a92:	e06e      	b.n	8002b72 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a3c      	ldr	r2, [pc, #240]	; (8002b8c <HAL_TIM_MspPostInit+0x1a8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d11f      	bne.n	8002ade <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	4b38      	ldr	r3, [pc, #224]	; (8002b80 <HAL_TIM_MspPostInit+0x19c>)
 8002aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa4:	4a36      	ldr	r2, [pc, #216]	; (8002b80 <HAL_TIM_MspPostInit+0x19c>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aae:	4b34      	ldr	r3, [pc, #208]	; (8002b80 <HAL_TIM_MspPostInit+0x19c>)
 8002ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8002abc:	2340      	movs	r3, #64	; 0x40
 8002abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002acc:	2302      	movs	r3, #2
 8002ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8002ad0:	f107 031c 	add.w	r3, r7, #28
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	482e      	ldr	r0, [pc, #184]	; (8002b90 <HAL_TIM_MspPostInit+0x1ac>)
 8002ad8:	f003 f9a2 	bl	8005e20 <HAL_GPIO_Init>
}
 8002adc:	e049      	b.n	8002b72 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a2c      	ldr	r2, [pc, #176]	; (8002b94 <HAL_TIM_MspPostInit+0x1b0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d120      	bne.n	8002b2a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae8:	4b25      	ldr	r3, [pc, #148]	; (8002b80 <HAL_TIM_MspPostInit+0x19c>)
 8002aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aee:	4a24      	ldr	r2, [pc, #144]	; (8002b80 <HAL_TIM_MspPostInit+0x19c>)
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002af8:	4b21      	ldr	r3, [pc, #132]	; (8002b80 <HAL_TIM_MspPostInit+0x19c>)
 8002afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8002b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b14:	2300      	movs	r3, #0
 8002b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8002b1c:	f107 031c 	add.w	r3, r7, #28
 8002b20:	4619      	mov	r1, r3
 8002b22:	4819      	ldr	r0, [pc, #100]	; (8002b88 <HAL_TIM_MspPostInit+0x1a4>)
 8002b24:	f003 f97c 	bl	8005e20 <HAL_GPIO_Init>
}
 8002b28:	e023      	b.n	8002b72 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a1a      	ldr	r2, [pc, #104]	; (8002b98 <HAL_TIM_MspPostInit+0x1b4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d11e      	bne.n	8002b72 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b34:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_TIM_MspPostInit+0x19c>)
 8002b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b3a:	4a11      	ldr	r2, [pc, #68]	; (8002b80 <HAL_TIM_MspPostInit+0x19c>)
 8002b3c:	f043 0310 	orr.w	r3, r3, #16
 8002b40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b44:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <HAL_TIM_MspPostInit+0x19c>)
 8002b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8002b52:	2340      	movs	r3, #64	; 0x40
 8002b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b56:	2302      	movs	r3, #2
 8002b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002b62:	2304      	movs	r3, #4
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8002b66:	f107 031c 	add.w	r3, r7, #28
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4805      	ldr	r0, [pc, #20]	; (8002b84 <HAL_TIM_MspPostInit+0x1a0>)
 8002b6e:	f003 f957 	bl	8005e20 <HAL_GPIO_Init>
}
 8002b72:	bf00      	nop
 8002b74:	3730      	adds	r7, #48	; 0x30
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40010000 	.word	0x40010000
 8002b80:	58024400 	.word	0x58024400
 8002b84:	58021000 	.word	0x58021000
 8002b88:	58020400 	.word	0x58020400
 8002b8c:	40000400 	.word	0x40000400
 8002b90:	58020000 	.word	0x58020000
 8002b94:	40000800 	.word	0x40000800
 8002b98:	40014000 	.word	0x40014000

08002b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b0bc      	sub	sp, #240	; 0xf0
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bb4:	f107 0320 	add.w	r3, r7, #32
 8002bb8:	22bc      	movs	r2, #188	; 0xbc
 8002bba:	2100      	movs	r1, #0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f00a fbe3 	bl	800d388 <memset>
  if(huart->Instance==UART4)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4aa6      	ldr	r2, [pc, #664]	; (8002e60 <HAL_UART_MspInit+0x2c4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	f040 80a5 	bne.w	8002d18 <HAL_UART_MspInit+0x17c>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bd8:	f107 0320 	add.w	r3, r7, #32
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f004 fad9 	bl	8007194 <HAL_RCCEx_PeriphCLKConfig>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002be8:	f7ff fd88 	bl	80026fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002bec:	4b9d      	ldr	r3, [pc, #628]	; (8002e64 <HAL_UART_MspInit+0x2c8>)
 8002bee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bf2:	4a9c      	ldr	r2, [pc, #624]	; (8002e64 <HAL_UART_MspInit+0x2c8>)
 8002bf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002bf8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bfc:	4b99      	ldr	r3, [pc, #612]	; (8002e64 <HAL_UART_MspInit+0x2c8>)
 8002bfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c06:	61fb      	str	r3, [r7, #28]
 8002c08:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c0a:	4b96      	ldr	r3, [pc, #600]	; (8002e64 <HAL_UART_MspInit+0x2c8>)
 8002c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c10:	4a94      	ldr	r2, [pc, #592]	; (8002e64 <HAL_UART_MspInit+0x2c8>)
 8002c12:	f043 0308 	orr.w	r3, r3, #8
 8002c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c1a:	4b92      	ldr	r3, [pc, #584]	; (8002e64 <HAL_UART_MspInit+0x2c8>)
 8002c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002c40:	2308      	movs	r3, #8
 8002c42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c46:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4886      	ldr	r0, [pc, #536]	; (8002e68 <HAL_UART_MspInit+0x2cc>)
 8002c4e:	f003 f8e7 	bl	8005e20 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 8002c52:	4b86      	ldr	r3, [pc, #536]	; (8002e6c <HAL_UART_MspInit+0x2d0>)
 8002c54:	4a86      	ldr	r2, [pc, #536]	; (8002e70 <HAL_UART_MspInit+0x2d4>)
 8002c56:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002c58:	4b84      	ldr	r3, [pc, #528]	; (8002e6c <HAL_UART_MspInit+0x2d0>)
 8002c5a:	223f      	movs	r2, #63	; 0x3f
 8002c5c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c5e:	4b83      	ldr	r3, [pc, #524]	; (8002e6c <HAL_UART_MspInit+0x2d0>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c64:	4b81      	ldr	r3, [pc, #516]	; (8002e6c <HAL_UART_MspInit+0x2d0>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c6a:	4b80      	ldr	r3, [pc, #512]	; (8002e6c <HAL_UART_MspInit+0x2d0>)
 8002c6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c70:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c72:	4b7e      	ldr	r3, [pc, #504]	; (8002e6c <HAL_UART_MspInit+0x2d0>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c78:	4b7c      	ldr	r3, [pc, #496]	; (8002e6c <HAL_UART_MspInit+0x2d0>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002c7e:	4b7b      	ldr	r3, [pc, #492]	; (8002e6c <HAL_UART_MspInit+0x2d0>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c84:	4b79      	ldr	r3, [pc, #484]	; (8002e6c <HAL_UART_MspInit+0x2d0>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c8a:	4b78      	ldr	r3, [pc, #480]	; (8002e6c <HAL_UART_MspInit+0x2d0>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002c90:	4876      	ldr	r0, [pc, #472]	; (8002e6c <HAL_UART_MspInit+0x2d0>)
 8002c92:	f000 fea1 	bl	80039d8 <HAL_DMA_Init>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8002c9c:	f7ff fd2e 	bl	80026fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a72      	ldr	r2, [pc, #456]	; (8002e6c <HAL_UART_MspInit+0x2d0>)
 8002ca4:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ca6:	4a71      	ldr	r2, [pc, #452]	; (8002e6c <HAL_UART_MspInit+0x2d0>)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 8002cac:	4b71      	ldr	r3, [pc, #452]	; (8002e74 <HAL_UART_MspInit+0x2d8>)
 8002cae:	4a72      	ldr	r2, [pc, #456]	; (8002e78 <HAL_UART_MspInit+0x2dc>)
 8002cb0:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002cb2:	4b70      	ldr	r3, [pc, #448]	; (8002e74 <HAL_UART_MspInit+0x2d8>)
 8002cb4:	2240      	movs	r2, #64	; 0x40
 8002cb6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cb8:	4b6e      	ldr	r3, [pc, #440]	; (8002e74 <HAL_UART_MspInit+0x2d8>)
 8002cba:	2240      	movs	r2, #64	; 0x40
 8002cbc:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cbe:	4b6d      	ldr	r3, [pc, #436]	; (8002e74 <HAL_UART_MspInit+0x2d8>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cc4:	4b6b      	ldr	r3, [pc, #428]	; (8002e74 <HAL_UART_MspInit+0x2d8>)
 8002cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cca:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ccc:	4b69      	ldr	r3, [pc, #420]	; (8002e74 <HAL_UART_MspInit+0x2d8>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cd2:	4b68      	ldr	r3, [pc, #416]	; (8002e74 <HAL_UART_MspInit+0x2d8>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002cd8:	4b66      	ldr	r3, [pc, #408]	; (8002e74 <HAL_UART_MspInit+0x2d8>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002cde:	4b65      	ldr	r3, [pc, #404]	; (8002e74 <HAL_UART_MspInit+0x2d8>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ce4:	4b63      	ldr	r3, [pc, #396]	; (8002e74 <HAL_UART_MspInit+0x2d8>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002cea:	4862      	ldr	r0, [pc, #392]	; (8002e74 <HAL_UART_MspInit+0x2d8>)
 8002cec:	f000 fe74 	bl	80039d8 <HAL_DMA_Init>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8002cf6:	f7ff fd01 	bl	80026fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a5d      	ldr	r2, [pc, #372]	; (8002e74 <HAL_UART_MspInit+0x2d8>)
 8002cfe:	679a      	str	r2, [r3, #120]	; 0x78
 8002d00:	4a5c      	ldr	r2, [pc, #368]	; (8002e74 <HAL_UART_MspInit+0x2d8>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	2100      	movs	r1, #0
 8002d0a:	2034      	movs	r0, #52	; 0x34
 8002d0c:	f000 fd45 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002d10:	2034      	movs	r0, #52	; 0x34
 8002d12:	f000 fd5c 	bl	80037ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d16:	e168      	b.n	8002fea <HAL_UART_MspInit+0x44e>
  else if(huart->Instance==USART2)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a57      	ldr	r2, [pc, #348]	; (8002e7c <HAL_UART_MspInit+0x2e0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	f040 80b6 	bne.w	8002e90 <HAL_UART_MspInit+0x2f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d24:	2302      	movs	r3, #2
 8002d26:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d2e:	f107 0320 	add.w	r3, r7, #32
 8002d32:	4618      	mov	r0, r3
 8002d34:	f004 fa2e 	bl	8007194 <HAL_RCCEx_PeriphCLKConfig>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8002d3e:	f7ff fcdd 	bl	80026fc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d42:	4b48      	ldr	r3, [pc, #288]	; (8002e64 <HAL_UART_MspInit+0x2c8>)
 8002d44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d48:	4a46      	ldr	r2, [pc, #280]	; (8002e64 <HAL_UART_MspInit+0x2c8>)
 8002d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d52:	4b44      	ldr	r3, [pc, #272]	; (8002e64 <HAL_UART_MspInit+0x2c8>)
 8002d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d60:	4b40      	ldr	r3, [pc, #256]	; (8002e64 <HAL_UART_MspInit+0x2c8>)
 8002d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d66:	4a3f      	ldr	r2, [pc, #252]	; (8002e64 <HAL_UART_MspInit+0x2c8>)
 8002d68:	f043 0308 	orr.w	r3, r3, #8
 8002d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d70:	4b3c      	ldr	r3, [pc, #240]	; (8002e64 <HAL_UART_MspInit+0x2c8>)
 8002d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002d7e:	2360      	movs	r3, #96	; 0x60
 8002d80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d96:	2307      	movs	r3, #7
 8002d98:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002da0:	4619      	mov	r1, r3
 8002da2:	4831      	ldr	r0, [pc, #196]	; (8002e68 <HAL_UART_MspInit+0x2cc>)
 8002da4:	f003 f83c 	bl	8005e20 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream4;
 8002da8:	4b35      	ldr	r3, [pc, #212]	; (8002e80 <HAL_UART_MspInit+0x2e4>)
 8002daa:	4a36      	ldr	r2, [pc, #216]	; (8002e84 <HAL_UART_MspInit+0x2e8>)
 8002dac:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002dae:	4b34      	ldr	r3, [pc, #208]	; (8002e80 <HAL_UART_MspInit+0x2e4>)
 8002db0:	222b      	movs	r2, #43	; 0x2b
 8002db2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002db4:	4b32      	ldr	r3, [pc, #200]	; (8002e80 <HAL_UART_MspInit+0x2e4>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dba:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <HAL_UART_MspInit+0x2e4>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dc0:	4b2f      	ldr	r3, [pc, #188]	; (8002e80 <HAL_UART_MspInit+0x2e4>)
 8002dc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dc6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dc8:	4b2d      	ldr	r3, [pc, #180]	; (8002e80 <HAL_UART_MspInit+0x2e4>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dce:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <HAL_UART_MspInit+0x2e4>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002dd4:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <HAL_UART_MspInit+0x2e4>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002dda:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <HAL_UART_MspInit+0x2e4>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002de0:	4b27      	ldr	r3, [pc, #156]	; (8002e80 <HAL_UART_MspInit+0x2e4>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002de6:	4826      	ldr	r0, [pc, #152]	; (8002e80 <HAL_UART_MspInit+0x2e4>)
 8002de8:	f000 fdf6 	bl	80039d8 <HAL_DMA_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8002df2:	f7ff fc83 	bl	80026fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a21      	ldr	r2, [pc, #132]	; (8002e80 <HAL_UART_MspInit+0x2e4>)
 8002dfa:	67da      	str	r2, [r3, #124]	; 0x7c
 8002dfc:	4a20      	ldr	r2, [pc, #128]	; (8002e80 <HAL_UART_MspInit+0x2e4>)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream5;
 8002e02:	4b21      	ldr	r3, [pc, #132]	; (8002e88 <HAL_UART_MspInit+0x2ec>)
 8002e04:	4a21      	ldr	r2, [pc, #132]	; (8002e8c <HAL_UART_MspInit+0x2f0>)
 8002e06:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002e08:	4b1f      	ldr	r3, [pc, #124]	; (8002e88 <HAL_UART_MspInit+0x2ec>)
 8002e0a:	222c      	movs	r2, #44	; 0x2c
 8002e0c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <HAL_UART_MspInit+0x2ec>)
 8002e10:	2240      	movs	r2, #64	; 0x40
 8002e12:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e14:	4b1c      	ldr	r3, [pc, #112]	; (8002e88 <HAL_UART_MspInit+0x2ec>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e1a:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <HAL_UART_MspInit+0x2ec>)
 8002e1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e20:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e22:	4b19      	ldr	r3, [pc, #100]	; (8002e88 <HAL_UART_MspInit+0x2ec>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e28:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <HAL_UART_MspInit+0x2ec>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002e2e:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <HAL_UART_MspInit+0x2ec>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e34:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <HAL_UART_MspInit+0x2ec>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e3a:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <HAL_UART_MspInit+0x2ec>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002e40:	4811      	ldr	r0, [pc, #68]	; (8002e88 <HAL_UART_MspInit+0x2ec>)
 8002e42:	f000 fdc9 	bl	80039d8 <HAL_DMA_Init>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_UART_MspInit+0x2b4>
      Error_Handler();
 8002e4c:	f7ff fc56 	bl	80026fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a0d      	ldr	r2, [pc, #52]	; (8002e88 <HAL_UART_MspInit+0x2ec>)
 8002e54:	679a      	str	r2, [r3, #120]	; 0x78
 8002e56:	4a0c      	ldr	r2, [pc, #48]	; (8002e88 <HAL_UART_MspInit+0x2ec>)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e5c:	e0c5      	b.n	8002fea <HAL_UART_MspInit+0x44e>
 8002e5e:	bf00      	nop
 8002e60:	40004c00 	.word	0x40004c00
 8002e64:	58024400 	.word	0x58024400
 8002e68:	58020c00 	.word	0x58020c00
 8002e6c:	2000026c 	.word	0x2000026c
 8002e70:	40020410 	.word	0x40020410
 8002e74:	20000a78 	.word	0x20000a78
 8002e78:	40020428 	.word	0x40020428
 8002e7c:	40004400 	.word	0x40004400
 8002e80:	200002e4 	.word	0x200002e4
 8002e84:	40020070 	.word	0x40020070
 8002e88:	2000079c 	.word	0x2000079c
 8002e8c:	40020088 	.word	0x40020088
  else if(huart->Instance==USART3)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a57      	ldr	r2, [pc, #348]	; (8002ff4 <HAL_UART_MspInit+0x458>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	f040 80a7 	bne.w	8002fea <HAL_UART_MspInit+0x44e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ea6:	f107 0320 	add.w	r3, r7, #32
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f004 f972 	bl	8007194 <HAL_RCCEx_PeriphCLKConfig>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_UART_MspInit+0x31e>
      Error_Handler();
 8002eb6:	f7ff fc21 	bl	80026fc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002eba:	4b4f      	ldr	r3, [pc, #316]	; (8002ff8 <HAL_UART_MspInit+0x45c>)
 8002ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ec0:	4a4d      	ldr	r2, [pc, #308]	; (8002ff8 <HAL_UART_MspInit+0x45c>)
 8002ec2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002eca:	4b4b      	ldr	r3, [pc, #300]	; (8002ff8 <HAL_UART_MspInit+0x45c>)
 8002ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ed8:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_UART_MspInit+0x45c>)
 8002eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ede:	4a46      	ldr	r2, [pc, #280]	; (8002ff8 <HAL_UART_MspInit+0x45c>)
 8002ee0:	f043 0308 	orr.w	r3, r3, #8
 8002ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ee8:	4b43      	ldr	r3, [pc, #268]	; (8002ff8 <HAL_UART_MspInit+0x45c>)
 8002eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ef6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efe:	2302      	movs	r3, #2
 8002f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f10:	2307      	movs	r3, #7
 8002f12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f16:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4837      	ldr	r0, [pc, #220]	; (8002ffc <HAL_UART_MspInit+0x460>)
 8002f1e:	f002 ff7f 	bl	8005e20 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002f22:	4b37      	ldr	r3, [pc, #220]	; (8003000 <HAL_UART_MspInit+0x464>)
 8002f24:	4a37      	ldr	r2, [pc, #220]	; (8003004 <HAL_UART_MspInit+0x468>)
 8002f26:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002f28:	4b35      	ldr	r3, [pc, #212]	; (8003000 <HAL_UART_MspInit+0x464>)
 8002f2a:	222d      	movs	r2, #45	; 0x2d
 8002f2c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f2e:	4b34      	ldr	r3, [pc, #208]	; (8003000 <HAL_UART_MspInit+0x464>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f34:	4b32      	ldr	r3, [pc, #200]	; (8003000 <HAL_UART_MspInit+0x464>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f3a:	4b31      	ldr	r3, [pc, #196]	; (8003000 <HAL_UART_MspInit+0x464>)
 8002f3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f40:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f42:	4b2f      	ldr	r3, [pc, #188]	; (8003000 <HAL_UART_MspInit+0x464>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f48:	4b2d      	ldr	r3, [pc, #180]	; (8003000 <HAL_UART_MspInit+0x464>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002f4e:	4b2c      	ldr	r3, [pc, #176]	; (8003000 <HAL_UART_MspInit+0x464>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002f54:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <HAL_UART_MspInit+0x464>)
 8002f56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f5a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f5c:	4b28      	ldr	r3, [pc, #160]	; (8003000 <HAL_UART_MspInit+0x464>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002f62:	4827      	ldr	r0, [pc, #156]	; (8003000 <HAL_UART_MspInit+0x464>)
 8002f64:	f000 fd38 	bl	80039d8 <HAL_DMA_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_UART_MspInit+0x3d6>
      Error_Handler();
 8002f6e:	f7ff fbc5 	bl	80026fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a22      	ldr	r2, [pc, #136]	; (8003000 <HAL_UART_MspInit+0x464>)
 8002f76:	67da      	str	r2, [r3, #124]	; 0x7c
 8002f78:	4a21      	ldr	r2, [pc, #132]	; (8003000 <HAL_UART_MspInit+0x464>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8002f7e:	4b22      	ldr	r3, [pc, #136]	; (8003008 <HAL_UART_MspInit+0x46c>)
 8002f80:	4a22      	ldr	r2, [pc, #136]	; (800300c <HAL_UART_MspInit+0x470>)
 8002f82:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002f84:	4b20      	ldr	r3, [pc, #128]	; (8003008 <HAL_UART_MspInit+0x46c>)
 8002f86:	222e      	movs	r2, #46	; 0x2e
 8002f88:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f8a:	4b1f      	ldr	r3, [pc, #124]	; (8003008 <HAL_UART_MspInit+0x46c>)
 8002f8c:	2240      	movs	r2, #64	; 0x40
 8002f8e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f90:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <HAL_UART_MspInit+0x46c>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f96:	4b1c      	ldr	r3, [pc, #112]	; (8003008 <HAL_UART_MspInit+0x46c>)
 8002f98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f9c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <HAL_UART_MspInit+0x46c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fa4:	4b18      	ldr	r3, [pc, #96]	; (8003008 <HAL_UART_MspInit+0x46c>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002faa:	4b17      	ldr	r3, [pc, #92]	; (8003008 <HAL_UART_MspInit+0x46c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002fb0:	4b15      	ldr	r3, [pc, #84]	; (8003008 <HAL_UART_MspInit+0x46c>)
 8002fb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fb6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fb8:	4b13      	ldr	r3, [pc, #76]	; (8003008 <HAL_UART_MspInit+0x46c>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002fbe:	4812      	ldr	r0, [pc, #72]	; (8003008 <HAL_UART_MspInit+0x46c>)
 8002fc0:	f000 fd0a 	bl	80039d8 <HAL_DMA_Init>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_UART_MspInit+0x432>
      Error_Handler();
 8002fca:	f7ff fb97 	bl	80026fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a0d      	ldr	r2, [pc, #52]	; (8003008 <HAL_UART_MspInit+0x46c>)
 8002fd2:	679a      	str	r2, [r3, #120]	; 0x78
 8002fd4:	4a0c      	ldr	r2, [pc, #48]	; (8003008 <HAL_UART_MspInit+0x46c>)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	2100      	movs	r1, #0
 8002fde:	2027      	movs	r0, #39	; 0x27
 8002fe0:	f000 fbdb 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002fe4:	2027      	movs	r0, #39	; 0x27
 8002fe6:	f000 fbf2 	bl	80037ce <HAL_NVIC_EnableIRQ>
}
 8002fea:	bf00      	nop
 8002fec:	37f0      	adds	r7, #240	; 0xf0
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40004800 	.word	0x40004800
 8002ff8:	58024400 	.word	0x58024400
 8002ffc:	58020c00 	.word	0x58020c00
 8003000:	200003d4 	.word	0x200003d4
 8003004:	40020028 	.word	0x40020028
 8003008:	200005bc 	.word	0x200005bc
 800300c:	40020040 	.word	0x40020040

08003010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003014:	e7fe      	b.n	8003014 <NMI_Handler+0x4>

08003016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800301a:	e7fe      	b.n	800301a <HardFault_Handler+0x4>

0800301c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003020:	e7fe      	b.n	8003020 <MemManage_Handler+0x4>

08003022 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003026:	e7fe      	b.n	8003026 <BusFault_Handler+0x4>

08003028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800302c:	e7fe      	b.n	800302c <UsageFault_Handler+0x4>

0800302e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800302e:	b480      	push	{r7}
 8003030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800305c:	f000 fa72 	bl	8003544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	bd80      	pop	{r7, pc}

08003064 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003068:	4802      	ldr	r0, [pc, #8]	; (8003074 <DMA1_Stream1_IRQHandler+0x10>)
 800306a:	f001 fd73 	bl	8004b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200003d4 	.word	0x200003d4

08003078 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800307c:	4802      	ldr	r0, [pc, #8]	; (8003088 <DMA1_Stream2_IRQHandler+0x10>)
 800307e:	f001 fd69 	bl	8004b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	200005bc 	.word	0x200005bc

0800308c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003090:	4802      	ldr	r0, [pc, #8]	; (800309c <DMA1_Stream4_IRQHandler+0x10>)
 8003092:	f001 fd5f 	bl	8004b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	200002e4 	.word	0x200002e4

080030a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80030a4:	4802      	ldr	r0, [pc, #8]	; (80030b0 <DMA1_Stream5_IRQHandler+0x10>)
 80030a6:	f001 fd55 	bl	8004b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	2000079c 	.word	0x2000079c

080030b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80030b8:	2040      	movs	r0, #64	; 0x40
 80030ba:	f003 f87a 	bl	80061b2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80030be:	2080      	movs	r0, #128	; 0x80
 80030c0:	f003 f877 	bl	80061b2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80030cc:	4802      	ldr	r0, [pc, #8]	; (80030d8 <USART3_IRQHandler+0x10>)
 80030ce:	f007 fa01 	bl	800a4d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20000460 	.word	0x20000460

080030dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80030e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80030e4:	f003 f865 	bl	80061b2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80030e8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80030ec:	f003 f861 	bl	80061b2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80030f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80030f4:	f003 f85d 	bl	80061b2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80030f8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80030fc:	f003 f859 	bl	80061b2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}

08003104 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003108:	4802      	ldr	r0, [pc, #8]	; (8003114 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800310a:	f005 ff47 	bl	8008f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000a24 	.word	0x20000a24

08003118 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800311c:	4802      	ldr	r0, [pc, #8]	; (8003128 <TIM5_IRQHandler+0x10>)
 800311e:	f005 ff3d 	bl	8008f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000634 	.word	0x20000634

0800312c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003130:	4802      	ldr	r0, [pc, #8]	; (800313c <UART4_IRQHandler+0x10>)
 8003132:	f007 f9cf 	bl	800a4d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	200008b4 	.word	0x200008b4

08003140 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003144:	4802      	ldr	r0, [pc, #8]	; (8003150 <DMA2_Stream0_IRQHandler+0x10>)
 8003146:	f001 fd05 	bl	8004b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	2000026c 	.word	0x2000026c

08003154 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003158:	4802      	ldr	r0, [pc, #8]	; (8003164 <DMA2_Stream1_IRQHandler+0x10>)
 800315a:	f001 fcfb 	bl	8004b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000a78 	.word	0x20000a78

08003168 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
	return 1;
 800316c:	2301      	movs	r3, #1
}
 800316e:	4618      	mov	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <_kill>:

int _kill(int pid, int sig)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003182:	f00a f8d7 	bl	800d334 <__errno>
 8003186:	4603      	mov	r3, r0
 8003188:	2216      	movs	r2, #22
 800318a:	601a      	str	r2, [r3, #0]
	return -1;
 800318c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003190:	4618      	mov	r0, r3
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <_exit>:

void _exit (int status)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80031a0:	f04f 31ff 	mov.w	r1, #4294967295
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7ff ffe7 	bl	8003178 <_kill>
	while (1) {}		/* Make sure we hang here */
 80031aa:	e7fe      	b.n	80031aa <_exit+0x12>

080031ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	e00a      	b.n	80031d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80031be:	f3af 8000 	nop.w
 80031c2:	4601      	mov	r1, r0
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	60ba      	str	r2, [r7, #8]
 80031ca:	b2ca      	uxtb	r2, r1
 80031cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	3301      	adds	r3, #1
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	429a      	cmp	r2, r3
 80031da:	dbf0      	blt.n	80031be <_read+0x12>
	}

return len;
 80031dc:	687b      	ldr	r3, [r7, #4]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b086      	sub	sp, #24
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
 80031f6:	e009      	b.n	800320c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	60ba      	str	r2, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd fa41 	bl	8000688 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	3301      	adds	r3, #1
 800320a:	617b      	str	r3, [r7, #20]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	429a      	cmp	r2, r3
 8003212:	dbf1      	blt.n	80031f8 <_write+0x12>
	}
	return len;
 8003214:	687b      	ldr	r3, [r7, #4]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <_close>:

int _close(int file)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
	return -1;
 8003226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003246:	605a      	str	r2, [r3, #4]
	return 0;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <_isatty>:

int _isatty(int file)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
	return 1;
 800325e:	2301      	movs	r3, #1
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
	return 0;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003290:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <_sbrk+0x5c>)
 8003292:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <_sbrk+0x60>)
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <_sbrk+0x64>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d102      	bne.n	80032aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032a4:	4b11      	ldr	r3, [pc, #68]	; (80032ec <_sbrk+0x64>)
 80032a6:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <_sbrk+0x68>)
 80032a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <_sbrk+0x64>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d207      	bcs.n	80032c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032b8:	f00a f83c 	bl	800d334 <__errno>
 80032bc:	4603      	mov	r3, r0
 80032be:	220c      	movs	r2, #12
 80032c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032c2:	f04f 33ff 	mov.w	r3, #4294967295
 80032c6:	e009      	b.n	80032dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <_sbrk+0x64>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032ce:	4b07      	ldr	r3, [pc, #28]	; (80032ec <_sbrk+0x64>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	4a05      	ldr	r2, [pc, #20]	; (80032ec <_sbrk+0x64>)
 80032d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032da:	68fb      	ldr	r3, [r7, #12]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20020000 	.word	0x20020000
 80032e8:	00000400 	.word	0x00000400
 80032ec:	2000021c 	.word	0x2000021c
 80032f0:	20000b10 	.word	0x20000b10

080032f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80032f8:	4b39      	ldr	r3, [pc, #228]	; (80033e0 <SystemInit+0xec>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fe:	4a38      	ldr	r2, [pc, #224]	; (80033e0 <SystemInit+0xec>)
 8003300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003308:	4b36      	ldr	r3, [pc, #216]	; (80033e4 <SystemInit+0xf0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	2b06      	cmp	r3, #6
 8003312:	d807      	bhi.n	8003324 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003314:	4b33      	ldr	r3, [pc, #204]	; (80033e4 <SystemInit+0xf0>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f023 030f 	bic.w	r3, r3, #15
 800331c:	4a31      	ldr	r2, [pc, #196]	; (80033e4 <SystemInit+0xf0>)
 800331e:	f043 0307 	orr.w	r3, r3, #7
 8003322:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003324:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <SystemInit+0xf4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a2f      	ldr	r2, [pc, #188]	; (80033e8 <SystemInit+0xf4>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003330:	4b2d      	ldr	r3, [pc, #180]	; (80033e8 <SystemInit+0xf4>)
 8003332:	2200      	movs	r2, #0
 8003334:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003336:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <SystemInit+0xf4>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	492b      	ldr	r1, [pc, #172]	; (80033e8 <SystemInit+0xf4>)
 800333c:	4b2b      	ldr	r3, [pc, #172]	; (80033ec <SystemInit+0xf8>)
 800333e:	4013      	ands	r3, r2
 8003340:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003342:	4b28      	ldr	r3, [pc, #160]	; (80033e4 <SystemInit+0xf0>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800334e:	4b25      	ldr	r3, [pc, #148]	; (80033e4 <SystemInit+0xf0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 030f 	bic.w	r3, r3, #15
 8003356:	4a23      	ldr	r2, [pc, #140]	; (80033e4 <SystemInit+0xf0>)
 8003358:	f043 0307 	orr.w	r3, r3, #7
 800335c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800335e:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <SystemInit+0xf4>)
 8003360:	2200      	movs	r2, #0
 8003362:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003364:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <SystemInit+0xf4>)
 8003366:	2200      	movs	r2, #0
 8003368:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800336a:	4b1f      	ldr	r3, [pc, #124]	; (80033e8 <SystemInit+0xf4>)
 800336c:	2200      	movs	r2, #0
 800336e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003370:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <SystemInit+0xf4>)
 8003372:	4a1f      	ldr	r2, [pc, #124]	; (80033f0 <SystemInit+0xfc>)
 8003374:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003376:	4b1c      	ldr	r3, [pc, #112]	; (80033e8 <SystemInit+0xf4>)
 8003378:	4a1e      	ldr	r2, [pc, #120]	; (80033f4 <SystemInit+0x100>)
 800337a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800337c:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <SystemInit+0xf4>)
 800337e:	4a1e      	ldr	r2, [pc, #120]	; (80033f8 <SystemInit+0x104>)
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003382:	4b19      	ldr	r3, [pc, #100]	; (80033e8 <SystemInit+0xf4>)
 8003384:	2200      	movs	r2, #0
 8003386:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003388:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <SystemInit+0xf4>)
 800338a:	4a1b      	ldr	r2, [pc, #108]	; (80033f8 <SystemInit+0x104>)
 800338c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800338e:	4b16      	ldr	r3, [pc, #88]	; (80033e8 <SystemInit+0xf4>)
 8003390:	2200      	movs	r2, #0
 8003392:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003394:	4b14      	ldr	r3, [pc, #80]	; (80033e8 <SystemInit+0xf4>)
 8003396:	4a18      	ldr	r2, [pc, #96]	; (80033f8 <SystemInit+0x104>)
 8003398:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800339a:	4b13      	ldr	r3, [pc, #76]	; (80033e8 <SystemInit+0xf4>)
 800339c:	2200      	movs	r2, #0
 800339e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033a0:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <SystemInit+0xf4>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a10      	ldr	r2, [pc, #64]	; (80033e8 <SystemInit+0xf4>)
 80033a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80033ac:	4b0e      	ldr	r3, [pc, #56]	; (80033e8 <SystemInit+0xf4>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80033b2:	4b12      	ldr	r3, [pc, #72]	; (80033fc <SystemInit+0x108>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4b12      	ldr	r3, [pc, #72]	; (8003400 <SystemInit+0x10c>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033be:	d202      	bcs.n	80033c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80033c0:	4b10      	ldr	r3, [pc, #64]	; (8003404 <SystemInit+0x110>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80033c6:	4b10      	ldr	r3, [pc, #64]	; (8003408 <SystemInit+0x114>)
 80033c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80033cc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <SystemInit+0xec>)
 80033d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033d4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80033d6:	bf00      	nop
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000ed00 	.word	0xe000ed00
 80033e4:	52002000 	.word	0x52002000
 80033e8:	58024400 	.word	0x58024400
 80033ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80033f0:	02020200 	.word	0x02020200
 80033f4:	01ff0000 	.word	0x01ff0000
 80033f8:	01010280 	.word	0x01010280
 80033fc:	5c001000 	.word	0x5c001000
 8003400:	ffff0000 	.word	0xffff0000
 8003404:	51008108 	.word	0x51008108
 8003408:	52004000 	.word	0x52004000

0800340c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800340c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003444 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003410:	f7ff ff70 	bl	80032f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003414:	480c      	ldr	r0, [pc, #48]	; (8003448 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003416:	490d      	ldr	r1, [pc, #52]	; (800344c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003418:	4a0d      	ldr	r2, [pc, #52]	; (8003450 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800341a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800341c:	e002      	b.n	8003424 <LoopCopyDataInit>

0800341e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800341e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003422:	3304      	adds	r3, #4

08003424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003428:	d3f9      	bcc.n	800341e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800342a:	4a0a      	ldr	r2, [pc, #40]	; (8003454 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800342c:	4c0a      	ldr	r4, [pc, #40]	; (8003458 <LoopFillZerobss+0x22>)
  movs r3, #0
 800342e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003430:	e001      	b.n	8003436 <LoopFillZerobss>

08003432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003434:	3204      	adds	r2, #4

08003436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003438:	d3fb      	bcc.n	8003432 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800343a:	f009 ff81 	bl	800d340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800343e:	f7fd feb3 	bl	80011a8 <main>
  bx  lr
 8003442:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003444:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800344c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003450:	08010314 	.word	0x08010314
  ldr r2, =_sbss
 8003454:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003458:	20000b0c 	.word	0x20000b0c

0800345c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800345c:	e7fe      	b.n	800345c <ADC3_IRQHandler>
	...

08003460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003466:	2003      	movs	r0, #3
 8003468:	f000 f98c 	bl	8003784 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800346c:	f003 fcbc 	bl	8006de8 <HAL_RCC_GetSysClockFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b15      	ldr	r3, [pc, #84]	; (80034c8 <HAL_Init+0x68>)
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	0a1b      	lsrs	r3, r3, #8
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	4913      	ldr	r1, [pc, #76]	; (80034cc <HAL_Init+0x6c>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	f003 031f 	and.w	r3, r3, #31
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
 8003488:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800348a:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <HAL_Init+0x68>)
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	4a0e      	ldr	r2, [pc, #56]	; (80034cc <HAL_Init+0x6c>)
 8003494:	5cd3      	ldrb	r3, [r2, r3]
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	fa22 f303 	lsr.w	r3, r2, r3
 80034a0:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <HAL_Init+0x70>)
 80034a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034a4:	4a0b      	ldr	r2, [pc, #44]	; (80034d4 <HAL_Init+0x74>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034aa:	2000      	movs	r0, #0
 80034ac:	f000 f814 	bl	80034d8 <HAL_InitTick>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e002      	b.n	80034c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80034ba:	f7ff f939 	bl	8002730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	58024400 	.word	0x58024400
 80034cc:	0800fc94 	.word	0x0800fc94
 80034d0:	2000000c 	.word	0x2000000c
 80034d4:	20000008 	.word	0x20000008

080034d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80034e0:	4b15      	ldr	r3, [pc, #84]	; (8003538 <HAL_InitTick+0x60>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e021      	b.n	8003530 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80034ec:	4b13      	ldr	r3, [pc, #76]	; (800353c <HAL_InitTick+0x64>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	4b11      	ldr	r3, [pc, #68]	; (8003538 <HAL_InitTick+0x60>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	4619      	mov	r1, r3
 80034f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80034fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f971 	bl	80037ea <HAL_SYSTICK_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e00e      	b.n	8003530 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b0f      	cmp	r3, #15
 8003516:	d80a      	bhi.n	800352e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003518:	2200      	movs	r2, #0
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	f04f 30ff 	mov.w	r0, #4294967295
 8003520:	f000 f93b 	bl	800379a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003524:	4a06      	ldr	r2, [pc, #24]	; (8003540 <HAL_InitTick+0x68>)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	e000      	b.n	8003530 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
}
 8003530:	4618      	mov	r0, r3
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000014 	.word	0x20000014
 800353c:	20000008 	.word	0x20000008
 8003540:	20000010 	.word	0x20000010

08003544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <HAL_IncTick+0x20>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	4b06      	ldr	r3, [pc, #24]	; (8003568 <HAL_IncTick+0x24>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4413      	add	r3, r2
 8003554:	4a04      	ldr	r2, [pc, #16]	; (8003568 <HAL_IncTick+0x24>)
 8003556:	6013      	str	r3, [r2, #0]
}
 8003558:	bf00      	nop
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000014 	.word	0x20000014
 8003568:	20000af8 	.word	0x20000af8

0800356c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return uwTick;
 8003570:	4b03      	ldr	r3, [pc, #12]	; (8003580 <HAL_GetTick+0x14>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20000af8 	.word	0x20000af8

08003584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800358c:	f7ff ffee 	bl	800356c <HAL_GetTick>
 8003590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d005      	beq.n	80035aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <HAL_Delay+0x44>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4413      	add	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035aa:	bf00      	nop
 80035ac:	f7ff ffde 	bl	800356c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d8f7      	bhi.n	80035ac <HAL_Delay+0x28>
  {
  }
}
 80035bc:	bf00      	nop
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000014 	.word	0x20000014

080035cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80035d0:	4b03      	ldr	r3, [pc, #12]	; (80035e0 <HAL_GetREVID+0x14>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	0c1b      	lsrs	r3, r3, #16
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	5c001000 	.word	0x5c001000

080035e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <__NVIC_SetPriorityGrouping+0x40>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003600:	4013      	ands	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800360c:	4b06      	ldr	r3, [pc, #24]	; (8003628 <__NVIC_SetPriorityGrouping+0x44>)
 800360e:	4313      	orrs	r3, r2
 8003610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003612:	4a04      	ldr	r2, [pc, #16]	; (8003624 <__NVIC_SetPriorityGrouping+0x40>)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	60d3      	str	r3, [r2, #12]
}
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000ed00 	.word	0xe000ed00
 8003628:	05fa0000 	.word	0x05fa0000

0800362c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <__NVIC_GetPriorityGrouping+0x18>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	0a1b      	lsrs	r3, r3, #8
 8003636:	f003 0307 	and.w	r3, r3, #7
}
 800363a:	4618      	mov	r0, r3
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003656:	2b00      	cmp	r3, #0
 8003658:	db0b      	blt.n	8003672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	4907      	ldr	r1, [pc, #28]	; (8003680 <__NVIC_EnableIRQ+0x38>)
 8003662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	2001      	movs	r0, #1
 800366a:	fa00 f202 	lsl.w	r2, r0, r2
 800366e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	e000e100 	.word	0xe000e100

08003684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	6039      	str	r1, [r7, #0]
 800368e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003690:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003694:	2b00      	cmp	r3, #0
 8003696:	db0a      	blt.n	80036ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	b2da      	uxtb	r2, r3
 800369c:	490c      	ldr	r1, [pc, #48]	; (80036d0 <__NVIC_SetPriority+0x4c>)
 800369e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036a2:	0112      	lsls	r2, r2, #4
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	440b      	add	r3, r1
 80036a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036ac:	e00a      	b.n	80036c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	4908      	ldr	r1, [pc, #32]	; (80036d4 <__NVIC_SetPriority+0x50>)
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	3b04      	subs	r3, #4
 80036bc:	0112      	lsls	r2, r2, #4
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	440b      	add	r3, r1
 80036c2:	761a      	strb	r2, [r3, #24]
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	e000e100 	.word	0xe000e100
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d8:	b480      	push	{r7}
 80036da:	b089      	sub	sp, #36	; 0x24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f1c3 0307 	rsb	r3, r3, #7
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	bf28      	it	cs
 80036f6:	2304      	movcs	r3, #4
 80036f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3304      	adds	r3, #4
 80036fe:	2b06      	cmp	r3, #6
 8003700:	d902      	bls.n	8003708 <NVIC_EncodePriority+0x30>
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3b03      	subs	r3, #3
 8003706:	e000      	b.n	800370a <NVIC_EncodePriority+0x32>
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800370c:	f04f 32ff 	mov.w	r2, #4294967295
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43da      	mvns	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	401a      	ands	r2, r3
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003720:	f04f 31ff 	mov.w	r1, #4294967295
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	fa01 f303 	lsl.w	r3, r1, r3
 800372a:	43d9      	mvns	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003730:	4313      	orrs	r3, r2
         );
}
 8003732:	4618      	mov	r0, r3
 8003734:	3724      	adds	r7, #36	; 0x24
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3b01      	subs	r3, #1
 800374c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003750:	d301      	bcc.n	8003756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003752:	2301      	movs	r3, #1
 8003754:	e00f      	b.n	8003776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003756:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <SysTick_Config+0x40>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3b01      	subs	r3, #1
 800375c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800375e:	210f      	movs	r1, #15
 8003760:	f04f 30ff 	mov.w	r0, #4294967295
 8003764:	f7ff ff8e 	bl	8003684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <SysTick_Config+0x40>)
 800376a:	2200      	movs	r2, #0
 800376c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800376e:	4b04      	ldr	r3, [pc, #16]	; (8003780 <SysTick_Config+0x40>)
 8003770:	2207      	movs	r2, #7
 8003772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	e000e010 	.word	0xe000e010

08003784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff ff29 	bl	80035e4 <__NVIC_SetPriorityGrouping>
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b086      	sub	sp, #24
 800379e:	af00      	add	r7, sp, #0
 80037a0:	4603      	mov	r3, r0
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037a8:	f7ff ff40 	bl	800362c <__NVIC_GetPriorityGrouping>
 80037ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	6978      	ldr	r0, [r7, #20]
 80037b4:	f7ff ff90 	bl	80036d8 <NVIC_EncodePriority>
 80037b8:	4602      	mov	r2, r0
 80037ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037be:	4611      	mov	r1, r2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff ff5f 	bl	8003684 <__NVIC_SetPriority>
}
 80037c6:	bf00      	nop
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	4603      	mov	r3, r0
 80037d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7ff ff33 	bl	8003648 <__NVIC_EnableIRQ>
}
 80037e2:	bf00      	nop
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff ffa4 	bl	8003740 <SysTick_Config>
 80037f8:	4603      	mov	r3, r0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
	...

08003804 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e054      	b.n	80038c0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	7f5b      	ldrb	r3, [r3, #29]
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d105      	bne.n	800382c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fe ff9c 	bl	8002764 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2202      	movs	r2, #2
 8003830:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	791b      	ldrb	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10c      	bne.n	8003854 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <HAL_CRC_Init+0xc4>)
 8003840:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0218 	bic.w	r2, r2, #24
 8003850:	609a      	str	r2, [r3, #8]
 8003852:	e00c      	b.n	800386e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6899      	ldr	r1, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	461a      	mov	r2, r3
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f834 	bl	80038cc <HAL_CRCEx_Polynomial_Set>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e028      	b.n	80038c0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	795b      	ldrb	r3, [r3, #5]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d105      	bne.n	8003882 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f04f 32ff 	mov.w	r2, #4294967295
 800387e:	611a      	str	r2, [r3, #16]
 8003880:	e004      	b.n	800388c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6912      	ldr	r2, [r2, #16]
 800388a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	699a      	ldr	r2, [r3, #24]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	04c11db7 	.word	0x04c11db7

080038cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80038dc:	231f      	movs	r3, #31
 80038de:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80038e0:	bf00      	nop
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1e5a      	subs	r2, r3, #1
 80038e6:	613a      	str	r2, [r7, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d009      	beq.n	8003900 <HAL_CRCEx_Polynomial_Set+0x34>
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f003 031f 	and.w	r3, r3, #31
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_CRCEx_Polynomial_Set+0x16>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b18      	cmp	r3, #24
 8003904:	d846      	bhi.n	8003994 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003906:	a201      	add	r2, pc, #4	; (adr r2, 800390c <HAL_CRCEx_Polynomial_Set+0x40>)
 8003908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390c:	0800399b 	.word	0x0800399b
 8003910:	08003995 	.word	0x08003995
 8003914:	08003995 	.word	0x08003995
 8003918:	08003995 	.word	0x08003995
 800391c:	08003995 	.word	0x08003995
 8003920:	08003995 	.word	0x08003995
 8003924:	08003995 	.word	0x08003995
 8003928:	08003995 	.word	0x08003995
 800392c:	08003989 	.word	0x08003989
 8003930:	08003995 	.word	0x08003995
 8003934:	08003995 	.word	0x08003995
 8003938:	08003995 	.word	0x08003995
 800393c:	08003995 	.word	0x08003995
 8003940:	08003995 	.word	0x08003995
 8003944:	08003995 	.word	0x08003995
 8003948:	08003995 	.word	0x08003995
 800394c:	0800397d 	.word	0x0800397d
 8003950:	08003995 	.word	0x08003995
 8003954:	08003995 	.word	0x08003995
 8003958:	08003995 	.word	0x08003995
 800395c:	08003995 	.word	0x08003995
 8003960:	08003995 	.word	0x08003995
 8003964:	08003995 	.word	0x08003995
 8003968:	08003995 	.word	0x08003995
 800396c:	08003971 	.word	0x08003971
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2b06      	cmp	r3, #6
 8003974:	d913      	bls.n	800399e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800397a:	e010      	b.n	800399e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2b07      	cmp	r3, #7
 8003980:	d90f      	bls.n	80039a2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003986:	e00c      	b.n	80039a2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	2b0f      	cmp	r3, #15
 800398c:	d90b      	bls.n	80039a6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003992:	e008      	b.n	80039a6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	75fb      	strb	r3, [r7, #23]
      break;
 8003998:	e006      	b.n	80039a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800399a:	bf00      	nop
 800399c:	e004      	b.n	80039a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800399e:	bf00      	nop
 80039a0:	e002      	b.n	80039a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80039a2:	bf00      	nop
 80039a4:	e000      	b.n	80039a8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80039a6:	bf00      	nop
  }
  if (status == HAL_OK)
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10d      	bne.n	80039ca <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f023 0118 	bic.w	r1, r3, #24
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	371c      	adds	r7, #28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80039e0:	f7ff fdc4 	bl	800356c <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e316      	b.n	800401e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a66      	ldr	r2, [pc, #408]	; (8003b90 <HAL_DMA_Init+0x1b8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d04a      	beq.n	8003a90 <HAL_DMA_Init+0xb8>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a65      	ldr	r2, [pc, #404]	; (8003b94 <HAL_DMA_Init+0x1bc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d045      	beq.n	8003a90 <HAL_DMA_Init+0xb8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a63      	ldr	r2, [pc, #396]	; (8003b98 <HAL_DMA_Init+0x1c0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d040      	beq.n	8003a90 <HAL_DMA_Init+0xb8>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a62      	ldr	r2, [pc, #392]	; (8003b9c <HAL_DMA_Init+0x1c4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d03b      	beq.n	8003a90 <HAL_DMA_Init+0xb8>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a60      	ldr	r2, [pc, #384]	; (8003ba0 <HAL_DMA_Init+0x1c8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d036      	beq.n	8003a90 <HAL_DMA_Init+0xb8>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a5f      	ldr	r2, [pc, #380]	; (8003ba4 <HAL_DMA_Init+0x1cc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d031      	beq.n	8003a90 <HAL_DMA_Init+0xb8>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a5d      	ldr	r2, [pc, #372]	; (8003ba8 <HAL_DMA_Init+0x1d0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d02c      	beq.n	8003a90 <HAL_DMA_Init+0xb8>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a5c      	ldr	r2, [pc, #368]	; (8003bac <HAL_DMA_Init+0x1d4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d027      	beq.n	8003a90 <HAL_DMA_Init+0xb8>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a5a      	ldr	r2, [pc, #360]	; (8003bb0 <HAL_DMA_Init+0x1d8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d022      	beq.n	8003a90 <HAL_DMA_Init+0xb8>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a59      	ldr	r2, [pc, #356]	; (8003bb4 <HAL_DMA_Init+0x1dc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d01d      	beq.n	8003a90 <HAL_DMA_Init+0xb8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a57      	ldr	r2, [pc, #348]	; (8003bb8 <HAL_DMA_Init+0x1e0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d018      	beq.n	8003a90 <HAL_DMA_Init+0xb8>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a56      	ldr	r2, [pc, #344]	; (8003bbc <HAL_DMA_Init+0x1e4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d013      	beq.n	8003a90 <HAL_DMA_Init+0xb8>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a54      	ldr	r2, [pc, #336]	; (8003bc0 <HAL_DMA_Init+0x1e8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00e      	beq.n	8003a90 <HAL_DMA_Init+0xb8>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a53      	ldr	r2, [pc, #332]	; (8003bc4 <HAL_DMA_Init+0x1ec>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d009      	beq.n	8003a90 <HAL_DMA_Init+0xb8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a51      	ldr	r2, [pc, #324]	; (8003bc8 <HAL_DMA_Init+0x1f0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d004      	beq.n	8003a90 <HAL_DMA_Init+0xb8>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a50      	ldr	r2, [pc, #320]	; (8003bcc <HAL_DMA_Init+0x1f4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d101      	bne.n	8003a94 <HAL_DMA_Init+0xbc>
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <HAL_DMA_Init+0xbe>
 8003a94:	2300      	movs	r3, #0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 813b 	beq.w	8003d12 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a37      	ldr	r2, [pc, #220]	; (8003b90 <HAL_DMA_Init+0x1b8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d04a      	beq.n	8003b4c <HAL_DMA_Init+0x174>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a36      	ldr	r2, [pc, #216]	; (8003b94 <HAL_DMA_Init+0x1bc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d045      	beq.n	8003b4c <HAL_DMA_Init+0x174>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a34      	ldr	r2, [pc, #208]	; (8003b98 <HAL_DMA_Init+0x1c0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d040      	beq.n	8003b4c <HAL_DMA_Init+0x174>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a33      	ldr	r2, [pc, #204]	; (8003b9c <HAL_DMA_Init+0x1c4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d03b      	beq.n	8003b4c <HAL_DMA_Init+0x174>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a31      	ldr	r2, [pc, #196]	; (8003ba0 <HAL_DMA_Init+0x1c8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d036      	beq.n	8003b4c <HAL_DMA_Init+0x174>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a30      	ldr	r2, [pc, #192]	; (8003ba4 <HAL_DMA_Init+0x1cc>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d031      	beq.n	8003b4c <HAL_DMA_Init+0x174>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a2e      	ldr	r2, [pc, #184]	; (8003ba8 <HAL_DMA_Init+0x1d0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d02c      	beq.n	8003b4c <HAL_DMA_Init+0x174>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a2d      	ldr	r2, [pc, #180]	; (8003bac <HAL_DMA_Init+0x1d4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d027      	beq.n	8003b4c <HAL_DMA_Init+0x174>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a2b      	ldr	r2, [pc, #172]	; (8003bb0 <HAL_DMA_Init+0x1d8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d022      	beq.n	8003b4c <HAL_DMA_Init+0x174>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a2a      	ldr	r2, [pc, #168]	; (8003bb4 <HAL_DMA_Init+0x1dc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d01d      	beq.n	8003b4c <HAL_DMA_Init+0x174>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a28      	ldr	r2, [pc, #160]	; (8003bb8 <HAL_DMA_Init+0x1e0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d018      	beq.n	8003b4c <HAL_DMA_Init+0x174>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a27      	ldr	r2, [pc, #156]	; (8003bbc <HAL_DMA_Init+0x1e4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d013      	beq.n	8003b4c <HAL_DMA_Init+0x174>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a25      	ldr	r2, [pc, #148]	; (8003bc0 <HAL_DMA_Init+0x1e8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d00e      	beq.n	8003b4c <HAL_DMA_Init+0x174>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a24      	ldr	r2, [pc, #144]	; (8003bc4 <HAL_DMA_Init+0x1ec>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d009      	beq.n	8003b4c <HAL_DMA_Init+0x174>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a22      	ldr	r2, [pc, #136]	; (8003bc8 <HAL_DMA_Init+0x1f0>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d004      	beq.n	8003b4c <HAL_DMA_Init+0x174>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a21      	ldr	r2, [pc, #132]	; (8003bcc <HAL_DMA_Init+0x1f4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d108      	bne.n	8003b5e <HAL_DMA_Init+0x186>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0201 	bic.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	e007      	b.n	8003b6e <HAL_DMA_Init+0x196>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b6e:	e02f      	b.n	8003bd0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b70:	f7ff fcfc 	bl	800356c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b05      	cmp	r3, #5
 8003b7c:	d928      	bls.n	8003bd0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2203      	movs	r2, #3
 8003b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e246      	b.n	800401e <HAL_DMA_Init+0x646>
 8003b90:	40020010 	.word	0x40020010
 8003b94:	40020028 	.word	0x40020028
 8003b98:	40020040 	.word	0x40020040
 8003b9c:	40020058 	.word	0x40020058
 8003ba0:	40020070 	.word	0x40020070
 8003ba4:	40020088 	.word	0x40020088
 8003ba8:	400200a0 	.word	0x400200a0
 8003bac:	400200b8 	.word	0x400200b8
 8003bb0:	40020410 	.word	0x40020410
 8003bb4:	40020428 	.word	0x40020428
 8003bb8:	40020440 	.word	0x40020440
 8003bbc:	40020458 	.word	0x40020458
 8003bc0:	40020470 	.word	0x40020470
 8003bc4:	40020488 	.word	0x40020488
 8003bc8:	400204a0 	.word	0x400204a0
 8003bcc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1c8      	bne.n	8003b70 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4b83      	ldr	r3, [pc, #524]	; (8003df8 <HAL_DMA_Init+0x420>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003bf6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c02:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c0e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d107      	bne.n	8003c34 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003c34:	4b71      	ldr	r3, [pc, #452]	; (8003dfc <HAL_DMA_Init+0x424>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	4b71      	ldr	r3, [pc, #452]	; (8003e00 <HAL_DMA_Init+0x428>)
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c40:	d328      	bcc.n	8003c94 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b28      	cmp	r3, #40	; 0x28
 8003c48:	d903      	bls.n	8003c52 <HAL_DMA_Init+0x27a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b2e      	cmp	r3, #46	; 0x2e
 8003c50:	d917      	bls.n	8003c82 <HAL_DMA_Init+0x2aa>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b3e      	cmp	r3, #62	; 0x3e
 8003c58:	d903      	bls.n	8003c62 <HAL_DMA_Init+0x28a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b42      	cmp	r3, #66	; 0x42
 8003c60:	d90f      	bls.n	8003c82 <HAL_DMA_Init+0x2aa>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b46      	cmp	r3, #70	; 0x46
 8003c68:	d903      	bls.n	8003c72 <HAL_DMA_Init+0x29a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b48      	cmp	r3, #72	; 0x48
 8003c70:	d907      	bls.n	8003c82 <HAL_DMA_Init+0x2aa>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b4e      	cmp	r3, #78	; 0x4e
 8003c78:	d905      	bls.n	8003c86 <HAL_DMA_Init+0x2ae>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b52      	cmp	r3, #82	; 0x52
 8003c80:	d801      	bhi.n	8003c86 <HAL_DMA_Init+0x2ae>
 8003c82:	2301      	movs	r3, #1
 8003c84:	e000      	b.n	8003c88 <HAL_DMA_Init+0x2b0>
 8003c86:	2300      	movs	r3, #0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c92:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f023 0307 	bic.w	r3, r3, #7
 8003caa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d117      	bne.n	8003cee <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00e      	beq.n	8003cee <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f001 ff1b 	bl	8005b0c <DMA_CheckFifoParam>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2240      	movs	r2, #64	; 0x40
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e197      	b.n	800401e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f001 fe56 	bl	80059a8 <DMA_CalcBaseAndBitshift>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	223f      	movs	r2, #63	; 0x3f
 8003d0a:	409a      	lsls	r2, r3
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	e0cd      	b.n	8003eae <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a3b      	ldr	r2, [pc, #236]	; (8003e04 <HAL_DMA_Init+0x42c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d022      	beq.n	8003d62 <HAL_DMA_Init+0x38a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a39      	ldr	r2, [pc, #228]	; (8003e08 <HAL_DMA_Init+0x430>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d01d      	beq.n	8003d62 <HAL_DMA_Init+0x38a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a38      	ldr	r2, [pc, #224]	; (8003e0c <HAL_DMA_Init+0x434>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d018      	beq.n	8003d62 <HAL_DMA_Init+0x38a>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a36      	ldr	r2, [pc, #216]	; (8003e10 <HAL_DMA_Init+0x438>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <HAL_DMA_Init+0x38a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a35      	ldr	r2, [pc, #212]	; (8003e14 <HAL_DMA_Init+0x43c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00e      	beq.n	8003d62 <HAL_DMA_Init+0x38a>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a33      	ldr	r2, [pc, #204]	; (8003e18 <HAL_DMA_Init+0x440>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d009      	beq.n	8003d62 <HAL_DMA_Init+0x38a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a32      	ldr	r2, [pc, #200]	; (8003e1c <HAL_DMA_Init+0x444>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d004      	beq.n	8003d62 <HAL_DMA_Init+0x38a>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a30      	ldr	r2, [pc, #192]	; (8003e20 <HAL_DMA_Init+0x448>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d101      	bne.n	8003d66 <HAL_DMA_Init+0x38e>
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_DMA_Init+0x390>
 8003d66:	2300      	movs	r3, #0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8097 	beq.w	8003e9c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a24      	ldr	r2, [pc, #144]	; (8003e04 <HAL_DMA_Init+0x42c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d021      	beq.n	8003dbc <HAL_DMA_Init+0x3e4>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a22      	ldr	r2, [pc, #136]	; (8003e08 <HAL_DMA_Init+0x430>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d01c      	beq.n	8003dbc <HAL_DMA_Init+0x3e4>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <HAL_DMA_Init+0x434>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d017      	beq.n	8003dbc <HAL_DMA_Init+0x3e4>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <HAL_DMA_Init+0x438>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d012      	beq.n	8003dbc <HAL_DMA_Init+0x3e4>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <HAL_DMA_Init+0x43c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d00d      	beq.n	8003dbc <HAL_DMA_Init+0x3e4>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <HAL_DMA_Init+0x440>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d008      	beq.n	8003dbc <HAL_DMA_Init+0x3e4>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1b      	ldr	r2, [pc, #108]	; (8003e1c <HAL_DMA_Init+0x444>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d003      	beq.n	8003dbc <HAL_DMA_Init+0x3e4>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <HAL_DMA_Init+0x448>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <HAL_DMA_Init+0x44c>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	d020      	beq.n	8003e28 <HAL_DMA_Init+0x450>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b80      	cmp	r3, #128	; 0x80
 8003dec:	d102      	bne.n	8003df4 <HAL_DMA_Init+0x41c>
 8003dee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003df2:	e01a      	b.n	8003e2a <HAL_DMA_Init+0x452>
 8003df4:	2300      	movs	r3, #0
 8003df6:	e018      	b.n	8003e2a <HAL_DMA_Init+0x452>
 8003df8:	fe10803f 	.word	0xfe10803f
 8003dfc:	5c001000 	.word	0x5c001000
 8003e00:	ffff0000 	.word	0xffff0000
 8003e04:	58025408 	.word	0x58025408
 8003e08:	5802541c 	.word	0x5802541c
 8003e0c:	58025430 	.word	0x58025430
 8003e10:	58025444 	.word	0x58025444
 8003e14:	58025458 	.word	0x58025458
 8003e18:	5802546c 	.word	0x5802546c
 8003e1c:	58025480 	.word	0x58025480
 8003e20:	58025494 	.word	0x58025494
 8003e24:	fffe000f 	.word	0xfffe000f
 8003e28:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	68d2      	ldr	r2, [r2, #12]
 8003e2e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003e38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003e40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003e48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69db      	ldr	r3, [r3, #28]
 8003e4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003e50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003e58:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4b6e      	ldr	r3, [pc, #440]	; (8004028 <HAL_DMA_Init+0x650>)
 8003e70:	4413      	add	r3, r2
 8003e72:	4a6e      	ldr	r2, [pc, #440]	; (800402c <HAL_DMA_Init+0x654>)
 8003e74:	fba2 2303 	umull	r2, r3, r2, r3
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	009a      	lsls	r2, r3, #2
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f001 fd91 	bl	80059a8 <DMA_CalcBaseAndBitshift>
 8003e86:	4603      	mov	r3, r0
 8003e88:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8e:	f003 031f 	and.w	r3, r3, #31
 8003e92:	2201      	movs	r2, #1
 8003e94:	409a      	lsls	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	e008      	b.n	8003eae <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2240      	movs	r2, #64	; 0x40
 8003ea0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e0b7      	b.n	800401e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a5f      	ldr	r2, [pc, #380]	; (8004030 <HAL_DMA_Init+0x658>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d072      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a5d      	ldr	r2, [pc, #372]	; (8004034 <HAL_DMA_Init+0x65c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d06d      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a5c      	ldr	r2, [pc, #368]	; (8004038 <HAL_DMA_Init+0x660>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d068      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a5a      	ldr	r2, [pc, #360]	; (800403c <HAL_DMA_Init+0x664>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d063      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a59      	ldr	r2, [pc, #356]	; (8004040 <HAL_DMA_Init+0x668>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d05e      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a57      	ldr	r2, [pc, #348]	; (8004044 <HAL_DMA_Init+0x66c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d059      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a56      	ldr	r2, [pc, #344]	; (8004048 <HAL_DMA_Init+0x670>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d054      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a54      	ldr	r2, [pc, #336]	; (800404c <HAL_DMA_Init+0x674>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d04f      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a53      	ldr	r2, [pc, #332]	; (8004050 <HAL_DMA_Init+0x678>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d04a      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a51      	ldr	r2, [pc, #324]	; (8004054 <HAL_DMA_Init+0x67c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d045      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a50      	ldr	r2, [pc, #320]	; (8004058 <HAL_DMA_Init+0x680>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d040      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a4e      	ldr	r2, [pc, #312]	; (800405c <HAL_DMA_Init+0x684>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d03b      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a4d      	ldr	r2, [pc, #308]	; (8004060 <HAL_DMA_Init+0x688>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d036      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a4b      	ldr	r2, [pc, #300]	; (8004064 <HAL_DMA_Init+0x68c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d031      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a4a      	ldr	r2, [pc, #296]	; (8004068 <HAL_DMA_Init+0x690>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d02c      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a48      	ldr	r2, [pc, #288]	; (800406c <HAL_DMA_Init+0x694>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d027      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a47      	ldr	r2, [pc, #284]	; (8004070 <HAL_DMA_Init+0x698>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d022      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a45      	ldr	r2, [pc, #276]	; (8004074 <HAL_DMA_Init+0x69c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d01d      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a44      	ldr	r2, [pc, #272]	; (8004078 <HAL_DMA_Init+0x6a0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d018      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a42      	ldr	r2, [pc, #264]	; (800407c <HAL_DMA_Init+0x6a4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d013      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a41      	ldr	r2, [pc, #260]	; (8004080 <HAL_DMA_Init+0x6a8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d00e      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a3f      	ldr	r2, [pc, #252]	; (8004084 <HAL_DMA_Init+0x6ac>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d009      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a3e      	ldr	r2, [pc, #248]	; (8004088 <HAL_DMA_Init+0x6b0>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d004      	beq.n	8003f9e <HAL_DMA_Init+0x5c6>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a3c      	ldr	r2, [pc, #240]	; (800408c <HAL_DMA_Init+0x6b4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d101      	bne.n	8003fa2 <HAL_DMA_Init+0x5ca>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <HAL_DMA_Init+0x5cc>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d032      	beq.n	800400e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f001 fe2b 	bl	8005c04 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b80      	cmp	r3, #128	; 0x80
 8003fb4:	d102      	bne.n	8003fbc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003fd0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d010      	beq.n	8003ffc <HAL_DMA_Init+0x624>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d80c      	bhi.n	8003ffc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f001 fea8 	bl	8005d38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ff8:	605a      	str	r2, [r3, #4]
 8003ffa:	e008      	b.n	800400e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	a7fdabf8 	.word	0xa7fdabf8
 800402c:	cccccccd 	.word	0xcccccccd
 8004030:	40020010 	.word	0x40020010
 8004034:	40020028 	.word	0x40020028
 8004038:	40020040 	.word	0x40020040
 800403c:	40020058 	.word	0x40020058
 8004040:	40020070 	.word	0x40020070
 8004044:	40020088 	.word	0x40020088
 8004048:	400200a0 	.word	0x400200a0
 800404c:	400200b8 	.word	0x400200b8
 8004050:	40020410 	.word	0x40020410
 8004054:	40020428 	.word	0x40020428
 8004058:	40020440 	.word	0x40020440
 800405c:	40020458 	.word	0x40020458
 8004060:	40020470 	.word	0x40020470
 8004064:	40020488 	.word	0x40020488
 8004068:	400204a0 	.word	0x400204a0
 800406c:	400204b8 	.word	0x400204b8
 8004070:	58025408 	.word	0x58025408
 8004074:	5802541c 	.word	0x5802541c
 8004078:	58025430 	.word	0x58025430
 800407c:	58025444 	.word	0x58025444
 8004080:	58025458 	.word	0x58025458
 8004084:	5802546c 	.word	0x5802546c
 8004088:	58025480 	.word	0x58025480
 800408c:	58025494 	.word	0x58025494

08004090 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004098:	f7ff fa68 	bl	800356c <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e2dc      	b.n	8004662 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d008      	beq.n	80040c6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2280      	movs	r2, #128	; 0x80
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e2cd      	b.n	8004662 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a76      	ldr	r2, [pc, #472]	; (80042a4 <HAL_DMA_Abort+0x214>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d04a      	beq.n	8004166 <HAL_DMA_Abort+0xd6>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a74      	ldr	r2, [pc, #464]	; (80042a8 <HAL_DMA_Abort+0x218>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d045      	beq.n	8004166 <HAL_DMA_Abort+0xd6>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a73      	ldr	r2, [pc, #460]	; (80042ac <HAL_DMA_Abort+0x21c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d040      	beq.n	8004166 <HAL_DMA_Abort+0xd6>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a71      	ldr	r2, [pc, #452]	; (80042b0 <HAL_DMA_Abort+0x220>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d03b      	beq.n	8004166 <HAL_DMA_Abort+0xd6>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a70      	ldr	r2, [pc, #448]	; (80042b4 <HAL_DMA_Abort+0x224>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d036      	beq.n	8004166 <HAL_DMA_Abort+0xd6>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a6e      	ldr	r2, [pc, #440]	; (80042b8 <HAL_DMA_Abort+0x228>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d031      	beq.n	8004166 <HAL_DMA_Abort+0xd6>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a6d      	ldr	r2, [pc, #436]	; (80042bc <HAL_DMA_Abort+0x22c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d02c      	beq.n	8004166 <HAL_DMA_Abort+0xd6>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a6b      	ldr	r2, [pc, #428]	; (80042c0 <HAL_DMA_Abort+0x230>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d027      	beq.n	8004166 <HAL_DMA_Abort+0xd6>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a6a      	ldr	r2, [pc, #424]	; (80042c4 <HAL_DMA_Abort+0x234>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d022      	beq.n	8004166 <HAL_DMA_Abort+0xd6>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a68      	ldr	r2, [pc, #416]	; (80042c8 <HAL_DMA_Abort+0x238>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d01d      	beq.n	8004166 <HAL_DMA_Abort+0xd6>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a67      	ldr	r2, [pc, #412]	; (80042cc <HAL_DMA_Abort+0x23c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d018      	beq.n	8004166 <HAL_DMA_Abort+0xd6>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a65      	ldr	r2, [pc, #404]	; (80042d0 <HAL_DMA_Abort+0x240>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d013      	beq.n	8004166 <HAL_DMA_Abort+0xd6>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a64      	ldr	r2, [pc, #400]	; (80042d4 <HAL_DMA_Abort+0x244>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00e      	beq.n	8004166 <HAL_DMA_Abort+0xd6>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a62      	ldr	r2, [pc, #392]	; (80042d8 <HAL_DMA_Abort+0x248>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d009      	beq.n	8004166 <HAL_DMA_Abort+0xd6>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a61      	ldr	r2, [pc, #388]	; (80042dc <HAL_DMA_Abort+0x24c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d004      	beq.n	8004166 <HAL_DMA_Abort+0xd6>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a5f      	ldr	r2, [pc, #380]	; (80042e0 <HAL_DMA_Abort+0x250>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d101      	bne.n	800416a <HAL_DMA_Abort+0xda>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <HAL_DMA_Abort+0xdc>
 800416a:	2300      	movs	r3, #0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d013      	beq.n	8004198 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 021e 	bic.w	r2, r2, #30
 800417e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	695a      	ldr	r2, [r3, #20]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800418e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	e00a      	b.n	80041ae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 020e 	bic.w	r2, r2, #14
 80041a6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a3c      	ldr	r2, [pc, #240]	; (80042a4 <HAL_DMA_Abort+0x214>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d072      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a3a      	ldr	r2, [pc, #232]	; (80042a8 <HAL_DMA_Abort+0x218>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d06d      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a39      	ldr	r2, [pc, #228]	; (80042ac <HAL_DMA_Abort+0x21c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d068      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a37      	ldr	r2, [pc, #220]	; (80042b0 <HAL_DMA_Abort+0x220>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d063      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a36      	ldr	r2, [pc, #216]	; (80042b4 <HAL_DMA_Abort+0x224>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d05e      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a34      	ldr	r2, [pc, #208]	; (80042b8 <HAL_DMA_Abort+0x228>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d059      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a33      	ldr	r2, [pc, #204]	; (80042bc <HAL_DMA_Abort+0x22c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d054      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a31      	ldr	r2, [pc, #196]	; (80042c0 <HAL_DMA_Abort+0x230>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d04f      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a30      	ldr	r2, [pc, #192]	; (80042c4 <HAL_DMA_Abort+0x234>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d04a      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a2e      	ldr	r2, [pc, #184]	; (80042c8 <HAL_DMA_Abort+0x238>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d045      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a2d      	ldr	r2, [pc, #180]	; (80042cc <HAL_DMA_Abort+0x23c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d040      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a2b      	ldr	r2, [pc, #172]	; (80042d0 <HAL_DMA_Abort+0x240>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d03b      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a2a      	ldr	r2, [pc, #168]	; (80042d4 <HAL_DMA_Abort+0x244>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d036      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a28      	ldr	r2, [pc, #160]	; (80042d8 <HAL_DMA_Abort+0x248>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d031      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a27      	ldr	r2, [pc, #156]	; (80042dc <HAL_DMA_Abort+0x24c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d02c      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a25      	ldr	r2, [pc, #148]	; (80042e0 <HAL_DMA_Abort+0x250>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d027      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a24      	ldr	r2, [pc, #144]	; (80042e4 <HAL_DMA_Abort+0x254>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d022      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a22      	ldr	r2, [pc, #136]	; (80042e8 <HAL_DMA_Abort+0x258>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01d      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a21      	ldr	r2, [pc, #132]	; (80042ec <HAL_DMA_Abort+0x25c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d018      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1f      	ldr	r2, [pc, #124]	; (80042f0 <HAL_DMA_Abort+0x260>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1e      	ldr	r2, [pc, #120]	; (80042f4 <HAL_DMA_Abort+0x264>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d00e      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1c      	ldr	r2, [pc, #112]	; (80042f8 <HAL_DMA_Abort+0x268>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d009      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1b      	ldr	r2, [pc, #108]	; (80042fc <HAL_DMA_Abort+0x26c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d004      	beq.n	800429e <HAL_DMA_Abort+0x20e>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a19      	ldr	r2, [pc, #100]	; (8004300 <HAL_DMA_Abort+0x270>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d132      	bne.n	8004304 <HAL_DMA_Abort+0x274>
 800429e:	2301      	movs	r3, #1
 80042a0:	e031      	b.n	8004306 <HAL_DMA_Abort+0x276>
 80042a2:	bf00      	nop
 80042a4:	40020010 	.word	0x40020010
 80042a8:	40020028 	.word	0x40020028
 80042ac:	40020040 	.word	0x40020040
 80042b0:	40020058 	.word	0x40020058
 80042b4:	40020070 	.word	0x40020070
 80042b8:	40020088 	.word	0x40020088
 80042bc:	400200a0 	.word	0x400200a0
 80042c0:	400200b8 	.word	0x400200b8
 80042c4:	40020410 	.word	0x40020410
 80042c8:	40020428 	.word	0x40020428
 80042cc:	40020440 	.word	0x40020440
 80042d0:	40020458 	.word	0x40020458
 80042d4:	40020470 	.word	0x40020470
 80042d8:	40020488 	.word	0x40020488
 80042dc:	400204a0 	.word	0x400204a0
 80042e0:	400204b8 	.word	0x400204b8
 80042e4:	58025408 	.word	0x58025408
 80042e8:	5802541c 	.word	0x5802541c
 80042ec:	58025430 	.word	0x58025430
 80042f0:	58025444 	.word	0x58025444
 80042f4:	58025458 	.word	0x58025458
 80042f8:	5802546c 	.word	0x5802546c
 80042fc:	58025480 	.word	0x58025480
 8004300:	58025494 	.word	0x58025494
 8004304:	2300      	movs	r3, #0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004318:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a6d      	ldr	r2, [pc, #436]	; (80044d4 <HAL_DMA_Abort+0x444>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d04a      	beq.n	80043ba <HAL_DMA_Abort+0x32a>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a6b      	ldr	r2, [pc, #428]	; (80044d8 <HAL_DMA_Abort+0x448>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d045      	beq.n	80043ba <HAL_DMA_Abort+0x32a>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a6a      	ldr	r2, [pc, #424]	; (80044dc <HAL_DMA_Abort+0x44c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d040      	beq.n	80043ba <HAL_DMA_Abort+0x32a>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a68      	ldr	r2, [pc, #416]	; (80044e0 <HAL_DMA_Abort+0x450>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d03b      	beq.n	80043ba <HAL_DMA_Abort+0x32a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a67      	ldr	r2, [pc, #412]	; (80044e4 <HAL_DMA_Abort+0x454>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d036      	beq.n	80043ba <HAL_DMA_Abort+0x32a>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a65      	ldr	r2, [pc, #404]	; (80044e8 <HAL_DMA_Abort+0x458>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d031      	beq.n	80043ba <HAL_DMA_Abort+0x32a>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a64      	ldr	r2, [pc, #400]	; (80044ec <HAL_DMA_Abort+0x45c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d02c      	beq.n	80043ba <HAL_DMA_Abort+0x32a>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a62      	ldr	r2, [pc, #392]	; (80044f0 <HAL_DMA_Abort+0x460>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d027      	beq.n	80043ba <HAL_DMA_Abort+0x32a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a61      	ldr	r2, [pc, #388]	; (80044f4 <HAL_DMA_Abort+0x464>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d022      	beq.n	80043ba <HAL_DMA_Abort+0x32a>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a5f      	ldr	r2, [pc, #380]	; (80044f8 <HAL_DMA_Abort+0x468>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d01d      	beq.n	80043ba <HAL_DMA_Abort+0x32a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a5e      	ldr	r2, [pc, #376]	; (80044fc <HAL_DMA_Abort+0x46c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d018      	beq.n	80043ba <HAL_DMA_Abort+0x32a>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a5c      	ldr	r2, [pc, #368]	; (8004500 <HAL_DMA_Abort+0x470>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_DMA_Abort+0x32a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a5b      	ldr	r2, [pc, #364]	; (8004504 <HAL_DMA_Abort+0x474>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00e      	beq.n	80043ba <HAL_DMA_Abort+0x32a>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a59      	ldr	r2, [pc, #356]	; (8004508 <HAL_DMA_Abort+0x478>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_DMA_Abort+0x32a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a58      	ldr	r2, [pc, #352]	; (800450c <HAL_DMA_Abort+0x47c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_DMA_Abort+0x32a>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a56      	ldr	r2, [pc, #344]	; (8004510 <HAL_DMA_Abort+0x480>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d108      	bne.n	80043cc <HAL_DMA_Abort+0x33c>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0201 	bic.w	r2, r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	e007      	b.n	80043dc <HAL_DMA_Abort+0x34c>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0201 	bic.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80043dc:	e013      	b.n	8004406 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043de:	f7ff f8c5 	bl	800356c <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b05      	cmp	r3, #5
 80043ea:	d90c      	bls.n	8004406 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2203      	movs	r2, #3
 80043fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e12d      	b.n	8004662 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1e5      	bne.n	80043de <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a2f      	ldr	r2, [pc, #188]	; (80044d4 <HAL_DMA_Abort+0x444>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d04a      	beq.n	80044b2 <HAL_DMA_Abort+0x422>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a2d      	ldr	r2, [pc, #180]	; (80044d8 <HAL_DMA_Abort+0x448>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d045      	beq.n	80044b2 <HAL_DMA_Abort+0x422>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a2c      	ldr	r2, [pc, #176]	; (80044dc <HAL_DMA_Abort+0x44c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d040      	beq.n	80044b2 <HAL_DMA_Abort+0x422>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a2a      	ldr	r2, [pc, #168]	; (80044e0 <HAL_DMA_Abort+0x450>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d03b      	beq.n	80044b2 <HAL_DMA_Abort+0x422>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a29      	ldr	r2, [pc, #164]	; (80044e4 <HAL_DMA_Abort+0x454>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d036      	beq.n	80044b2 <HAL_DMA_Abort+0x422>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a27      	ldr	r2, [pc, #156]	; (80044e8 <HAL_DMA_Abort+0x458>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d031      	beq.n	80044b2 <HAL_DMA_Abort+0x422>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a26      	ldr	r2, [pc, #152]	; (80044ec <HAL_DMA_Abort+0x45c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d02c      	beq.n	80044b2 <HAL_DMA_Abort+0x422>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a24      	ldr	r2, [pc, #144]	; (80044f0 <HAL_DMA_Abort+0x460>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d027      	beq.n	80044b2 <HAL_DMA_Abort+0x422>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a23      	ldr	r2, [pc, #140]	; (80044f4 <HAL_DMA_Abort+0x464>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d022      	beq.n	80044b2 <HAL_DMA_Abort+0x422>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a21      	ldr	r2, [pc, #132]	; (80044f8 <HAL_DMA_Abort+0x468>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d01d      	beq.n	80044b2 <HAL_DMA_Abort+0x422>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a20      	ldr	r2, [pc, #128]	; (80044fc <HAL_DMA_Abort+0x46c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d018      	beq.n	80044b2 <HAL_DMA_Abort+0x422>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1e      	ldr	r2, [pc, #120]	; (8004500 <HAL_DMA_Abort+0x470>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d013      	beq.n	80044b2 <HAL_DMA_Abort+0x422>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1d      	ldr	r2, [pc, #116]	; (8004504 <HAL_DMA_Abort+0x474>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00e      	beq.n	80044b2 <HAL_DMA_Abort+0x422>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a1b      	ldr	r2, [pc, #108]	; (8004508 <HAL_DMA_Abort+0x478>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d009      	beq.n	80044b2 <HAL_DMA_Abort+0x422>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a1a      	ldr	r2, [pc, #104]	; (800450c <HAL_DMA_Abort+0x47c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d004      	beq.n	80044b2 <HAL_DMA_Abort+0x422>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a18      	ldr	r2, [pc, #96]	; (8004510 <HAL_DMA_Abort+0x480>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d101      	bne.n	80044b6 <HAL_DMA_Abort+0x426>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <HAL_DMA_Abort+0x428>
 80044b6:	2300      	movs	r3, #0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d02b      	beq.n	8004514 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c6:	f003 031f 	and.w	r3, r3, #31
 80044ca:	223f      	movs	r2, #63	; 0x3f
 80044cc:	409a      	lsls	r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	609a      	str	r2, [r3, #8]
 80044d2:	e02a      	b.n	800452a <HAL_DMA_Abort+0x49a>
 80044d4:	40020010 	.word	0x40020010
 80044d8:	40020028 	.word	0x40020028
 80044dc:	40020040 	.word	0x40020040
 80044e0:	40020058 	.word	0x40020058
 80044e4:	40020070 	.word	0x40020070
 80044e8:	40020088 	.word	0x40020088
 80044ec:	400200a0 	.word	0x400200a0
 80044f0:	400200b8 	.word	0x400200b8
 80044f4:	40020410 	.word	0x40020410
 80044f8:	40020428 	.word	0x40020428
 80044fc:	40020440 	.word	0x40020440
 8004500:	40020458 	.word	0x40020458
 8004504:	40020470 	.word	0x40020470
 8004508:	40020488 	.word	0x40020488
 800450c:	400204a0 	.word	0x400204a0
 8004510:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004518:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451e:	f003 031f 	and.w	r3, r3, #31
 8004522:	2201      	movs	r2, #1
 8004524:	409a      	lsls	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a4f      	ldr	r2, [pc, #316]	; (800466c <HAL_DMA_Abort+0x5dc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d072      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a4d      	ldr	r2, [pc, #308]	; (8004670 <HAL_DMA_Abort+0x5e0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d06d      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a4c      	ldr	r2, [pc, #304]	; (8004674 <HAL_DMA_Abort+0x5e4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d068      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a4a      	ldr	r2, [pc, #296]	; (8004678 <HAL_DMA_Abort+0x5e8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d063      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a49      	ldr	r2, [pc, #292]	; (800467c <HAL_DMA_Abort+0x5ec>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d05e      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a47      	ldr	r2, [pc, #284]	; (8004680 <HAL_DMA_Abort+0x5f0>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d059      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a46      	ldr	r2, [pc, #280]	; (8004684 <HAL_DMA_Abort+0x5f4>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d054      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a44      	ldr	r2, [pc, #272]	; (8004688 <HAL_DMA_Abort+0x5f8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d04f      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a43      	ldr	r2, [pc, #268]	; (800468c <HAL_DMA_Abort+0x5fc>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d04a      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a41      	ldr	r2, [pc, #260]	; (8004690 <HAL_DMA_Abort+0x600>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d045      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a40      	ldr	r2, [pc, #256]	; (8004694 <HAL_DMA_Abort+0x604>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d040      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a3e      	ldr	r2, [pc, #248]	; (8004698 <HAL_DMA_Abort+0x608>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d03b      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a3d      	ldr	r2, [pc, #244]	; (800469c <HAL_DMA_Abort+0x60c>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d036      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a3b      	ldr	r2, [pc, #236]	; (80046a0 <HAL_DMA_Abort+0x610>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d031      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a3a      	ldr	r2, [pc, #232]	; (80046a4 <HAL_DMA_Abort+0x614>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d02c      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a38      	ldr	r2, [pc, #224]	; (80046a8 <HAL_DMA_Abort+0x618>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d027      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a37      	ldr	r2, [pc, #220]	; (80046ac <HAL_DMA_Abort+0x61c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d022      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a35      	ldr	r2, [pc, #212]	; (80046b0 <HAL_DMA_Abort+0x620>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d01d      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a34      	ldr	r2, [pc, #208]	; (80046b4 <HAL_DMA_Abort+0x624>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d018      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a32      	ldr	r2, [pc, #200]	; (80046b8 <HAL_DMA_Abort+0x628>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d013      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a31      	ldr	r2, [pc, #196]	; (80046bc <HAL_DMA_Abort+0x62c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00e      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a2f      	ldr	r2, [pc, #188]	; (80046c0 <HAL_DMA_Abort+0x630>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d009      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a2e      	ldr	r2, [pc, #184]	; (80046c4 <HAL_DMA_Abort+0x634>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d004      	beq.n	800461a <HAL_DMA_Abort+0x58a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a2c      	ldr	r2, [pc, #176]	; (80046c8 <HAL_DMA_Abort+0x638>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d101      	bne.n	800461e <HAL_DMA_Abort+0x58e>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <HAL_DMA_Abort+0x590>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d015      	beq.n	8004650 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800462c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00c      	beq.n	8004650 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004644:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800464e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40020010 	.word	0x40020010
 8004670:	40020028 	.word	0x40020028
 8004674:	40020040 	.word	0x40020040
 8004678:	40020058 	.word	0x40020058
 800467c:	40020070 	.word	0x40020070
 8004680:	40020088 	.word	0x40020088
 8004684:	400200a0 	.word	0x400200a0
 8004688:	400200b8 	.word	0x400200b8
 800468c:	40020410 	.word	0x40020410
 8004690:	40020428 	.word	0x40020428
 8004694:	40020440 	.word	0x40020440
 8004698:	40020458 	.word	0x40020458
 800469c:	40020470 	.word	0x40020470
 80046a0:	40020488 	.word	0x40020488
 80046a4:	400204a0 	.word	0x400204a0
 80046a8:	400204b8 	.word	0x400204b8
 80046ac:	58025408 	.word	0x58025408
 80046b0:	5802541c 	.word	0x5802541c
 80046b4:	58025430 	.word	0x58025430
 80046b8:	58025444 	.word	0x58025444
 80046bc:	58025458 	.word	0x58025458
 80046c0:	5802546c 	.word	0x5802546c
 80046c4:	58025480 	.word	0x58025480
 80046c8:	58025494 	.word	0x58025494

080046cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e205      	b.n	8004aea <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d004      	beq.n	80046f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2280      	movs	r2, #128	; 0x80
 80046ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e1fa      	b.n	8004aea <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a8c      	ldr	r2, [pc, #560]	; (800492c <HAL_DMA_Abort_IT+0x260>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d04a      	beq.n	8004794 <HAL_DMA_Abort_IT+0xc8>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a8b      	ldr	r2, [pc, #556]	; (8004930 <HAL_DMA_Abort_IT+0x264>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d045      	beq.n	8004794 <HAL_DMA_Abort_IT+0xc8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a89      	ldr	r2, [pc, #548]	; (8004934 <HAL_DMA_Abort_IT+0x268>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d040      	beq.n	8004794 <HAL_DMA_Abort_IT+0xc8>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a88      	ldr	r2, [pc, #544]	; (8004938 <HAL_DMA_Abort_IT+0x26c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d03b      	beq.n	8004794 <HAL_DMA_Abort_IT+0xc8>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a86      	ldr	r2, [pc, #536]	; (800493c <HAL_DMA_Abort_IT+0x270>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d036      	beq.n	8004794 <HAL_DMA_Abort_IT+0xc8>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a85      	ldr	r2, [pc, #532]	; (8004940 <HAL_DMA_Abort_IT+0x274>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d031      	beq.n	8004794 <HAL_DMA_Abort_IT+0xc8>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a83      	ldr	r2, [pc, #524]	; (8004944 <HAL_DMA_Abort_IT+0x278>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d02c      	beq.n	8004794 <HAL_DMA_Abort_IT+0xc8>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a82      	ldr	r2, [pc, #520]	; (8004948 <HAL_DMA_Abort_IT+0x27c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d027      	beq.n	8004794 <HAL_DMA_Abort_IT+0xc8>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a80      	ldr	r2, [pc, #512]	; (800494c <HAL_DMA_Abort_IT+0x280>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d022      	beq.n	8004794 <HAL_DMA_Abort_IT+0xc8>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a7f      	ldr	r2, [pc, #508]	; (8004950 <HAL_DMA_Abort_IT+0x284>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d01d      	beq.n	8004794 <HAL_DMA_Abort_IT+0xc8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a7d      	ldr	r2, [pc, #500]	; (8004954 <HAL_DMA_Abort_IT+0x288>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d018      	beq.n	8004794 <HAL_DMA_Abort_IT+0xc8>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a7c      	ldr	r2, [pc, #496]	; (8004958 <HAL_DMA_Abort_IT+0x28c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <HAL_DMA_Abort_IT+0xc8>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a7a      	ldr	r2, [pc, #488]	; (800495c <HAL_DMA_Abort_IT+0x290>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00e      	beq.n	8004794 <HAL_DMA_Abort_IT+0xc8>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a79      	ldr	r2, [pc, #484]	; (8004960 <HAL_DMA_Abort_IT+0x294>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d009      	beq.n	8004794 <HAL_DMA_Abort_IT+0xc8>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a77      	ldr	r2, [pc, #476]	; (8004964 <HAL_DMA_Abort_IT+0x298>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <HAL_DMA_Abort_IT+0xc8>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a76      	ldr	r2, [pc, #472]	; (8004968 <HAL_DMA_Abort_IT+0x29c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d101      	bne.n	8004798 <HAL_DMA_Abort_IT+0xcc>
 8004794:	2301      	movs	r3, #1
 8004796:	e000      	b.n	800479a <HAL_DMA_Abort_IT+0xce>
 8004798:	2300      	movs	r3, #0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d065      	beq.n	800486a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2204      	movs	r2, #4
 80047a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a60      	ldr	r2, [pc, #384]	; (800492c <HAL_DMA_Abort_IT+0x260>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d04a      	beq.n	8004846 <HAL_DMA_Abort_IT+0x17a>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a5e      	ldr	r2, [pc, #376]	; (8004930 <HAL_DMA_Abort_IT+0x264>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d045      	beq.n	8004846 <HAL_DMA_Abort_IT+0x17a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a5d      	ldr	r2, [pc, #372]	; (8004934 <HAL_DMA_Abort_IT+0x268>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d040      	beq.n	8004846 <HAL_DMA_Abort_IT+0x17a>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a5b      	ldr	r2, [pc, #364]	; (8004938 <HAL_DMA_Abort_IT+0x26c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d03b      	beq.n	8004846 <HAL_DMA_Abort_IT+0x17a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a5a      	ldr	r2, [pc, #360]	; (800493c <HAL_DMA_Abort_IT+0x270>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d036      	beq.n	8004846 <HAL_DMA_Abort_IT+0x17a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a58      	ldr	r2, [pc, #352]	; (8004940 <HAL_DMA_Abort_IT+0x274>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d031      	beq.n	8004846 <HAL_DMA_Abort_IT+0x17a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a57      	ldr	r2, [pc, #348]	; (8004944 <HAL_DMA_Abort_IT+0x278>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d02c      	beq.n	8004846 <HAL_DMA_Abort_IT+0x17a>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a55      	ldr	r2, [pc, #340]	; (8004948 <HAL_DMA_Abort_IT+0x27c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d027      	beq.n	8004846 <HAL_DMA_Abort_IT+0x17a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a54      	ldr	r2, [pc, #336]	; (800494c <HAL_DMA_Abort_IT+0x280>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d022      	beq.n	8004846 <HAL_DMA_Abort_IT+0x17a>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a52      	ldr	r2, [pc, #328]	; (8004950 <HAL_DMA_Abort_IT+0x284>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d01d      	beq.n	8004846 <HAL_DMA_Abort_IT+0x17a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a51      	ldr	r2, [pc, #324]	; (8004954 <HAL_DMA_Abort_IT+0x288>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d018      	beq.n	8004846 <HAL_DMA_Abort_IT+0x17a>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a4f      	ldr	r2, [pc, #316]	; (8004958 <HAL_DMA_Abort_IT+0x28c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d013      	beq.n	8004846 <HAL_DMA_Abort_IT+0x17a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a4e      	ldr	r2, [pc, #312]	; (800495c <HAL_DMA_Abort_IT+0x290>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00e      	beq.n	8004846 <HAL_DMA_Abort_IT+0x17a>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a4c      	ldr	r2, [pc, #304]	; (8004960 <HAL_DMA_Abort_IT+0x294>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_DMA_Abort_IT+0x17a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a4b      	ldr	r2, [pc, #300]	; (8004964 <HAL_DMA_Abort_IT+0x298>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d004      	beq.n	8004846 <HAL_DMA_Abort_IT+0x17a>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a49      	ldr	r2, [pc, #292]	; (8004968 <HAL_DMA_Abort_IT+0x29c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d108      	bne.n	8004858 <HAL_DMA_Abort_IT+0x18c>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0201 	bic.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e147      	b.n	8004ae8 <HAL_DMA_Abort_IT+0x41c>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f022 0201 	bic.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	e13e      	b.n	8004ae8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 020e 	bic.w	r2, r2, #14
 8004878:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2b      	ldr	r2, [pc, #172]	; (800492c <HAL_DMA_Abort_IT+0x260>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d04a      	beq.n	800491a <HAL_DMA_Abort_IT+0x24e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a29      	ldr	r2, [pc, #164]	; (8004930 <HAL_DMA_Abort_IT+0x264>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d045      	beq.n	800491a <HAL_DMA_Abort_IT+0x24e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a28      	ldr	r2, [pc, #160]	; (8004934 <HAL_DMA_Abort_IT+0x268>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d040      	beq.n	800491a <HAL_DMA_Abort_IT+0x24e>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a26      	ldr	r2, [pc, #152]	; (8004938 <HAL_DMA_Abort_IT+0x26c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d03b      	beq.n	800491a <HAL_DMA_Abort_IT+0x24e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a25      	ldr	r2, [pc, #148]	; (800493c <HAL_DMA_Abort_IT+0x270>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d036      	beq.n	800491a <HAL_DMA_Abort_IT+0x24e>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a23      	ldr	r2, [pc, #140]	; (8004940 <HAL_DMA_Abort_IT+0x274>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d031      	beq.n	800491a <HAL_DMA_Abort_IT+0x24e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a22      	ldr	r2, [pc, #136]	; (8004944 <HAL_DMA_Abort_IT+0x278>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d02c      	beq.n	800491a <HAL_DMA_Abort_IT+0x24e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a20      	ldr	r2, [pc, #128]	; (8004948 <HAL_DMA_Abort_IT+0x27c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d027      	beq.n	800491a <HAL_DMA_Abort_IT+0x24e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a1f      	ldr	r2, [pc, #124]	; (800494c <HAL_DMA_Abort_IT+0x280>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d022      	beq.n	800491a <HAL_DMA_Abort_IT+0x24e>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1d      	ldr	r2, [pc, #116]	; (8004950 <HAL_DMA_Abort_IT+0x284>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d01d      	beq.n	800491a <HAL_DMA_Abort_IT+0x24e>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1c      	ldr	r2, [pc, #112]	; (8004954 <HAL_DMA_Abort_IT+0x288>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d018      	beq.n	800491a <HAL_DMA_Abort_IT+0x24e>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1a      	ldr	r2, [pc, #104]	; (8004958 <HAL_DMA_Abort_IT+0x28c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <HAL_DMA_Abort_IT+0x24e>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a19      	ldr	r2, [pc, #100]	; (800495c <HAL_DMA_Abort_IT+0x290>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00e      	beq.n	800491a <HAL_DMA_Abort_IT+0x24e>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a17      	ldr	r2, [pc, #92]	; (8004960 <HAL_DMA_Abort_IT+0x294>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_DMA_Abort_IT+0x24e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a16      	ldr	r2, [pc, #88]	; (8004964 <HAL_DMA_Abort_IT+0x298>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d004      	beq.n	800491a <HAL_DMA_Abort_IT+0x24e>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a14      	ldr	r2, [pc, #80]	; (8004968 <HAL_DMA_Abort_IT+0x29c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d128      	bne.n	800496c <HAL_DMA_Abort_IT+0x2a0>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0201 	bic.w	r2, r2, #1
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	e027      	b.n	800497c <HAL_DMA_Abort_IT+0x2b0>
 800492c:	40020010 	.word	0x40020010
 8004930:	40020028 	.word	0x40020028
 8004934:	40020040 	.word	0x40020040
 8004938:	40020058 	.word	0x40020058
 800493c:	40020070 	.word	0x40020070
 8004940:	40020088 	.word	0x40020088
 8004944:	400200a0 	.word	0x400200a0
 8004948:	400200b8 	.word	0x400200b8
 800494c:	40020410 	.word	0x40020410
 8004950:	40020428 	.word	0x40020428
 8004954:	40020440 	.word	0x40020440
 8004958:	40020458 	.word	0x40020458
 800495c:	40020470 	.word	0x40020470
 8004960:	40020488 	.word	0x40020488
 8004964:	400204a0 	.word	0x400204a0
 8004968:	400204b8 	.word	0x400204b8
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a5c      	ldr	r2, [pc, #368]	; (8004af4 <HAL_DMA_Abort_IT+0x428>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d072      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a5b      	ldr	r2, [pc, #364]	; (8004af8 <HAL_DMA_Abort_IT+0x42c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d06d      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a59      	ldr	r2, [pc, #356]	; (8004afc <HAL_DMA_Abort_IT+0x430>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d068      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a58      	ldr	r2, [pc, #352]	; (8004b00 <HAL_DMA_Abort_IT+0x434>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d063      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a56      	ldr	r2, [pc, #344]	; (8004b04 <HAL_DMA_Abort_IT+0x438>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d05e      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a55      	ldr	r2, [pc, #340]	; (8004b08 <HAL_DMA_Abort_IT+0x43c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d059      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a53      	ldr	r2, [pc, #332]	; (8004b0c <HAL_DMA_Abort_IT+0x440>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d054      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a52      	ldr	r2, [pc, #328]	; (8004b10 <HAL_DMA_Abort_IT+0x444>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d04f      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a50      	ldr	r2, [pc, #320]	; (8004b14 <HAL_DMA_Abort_IT+0x448>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d04a      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a4f      	ldr	r2, [pc, #316]	; (8004b18 <HAL_DMA_Abort_IT+0x44c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d045      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a4d      	ldr	r2, [pc, #308]	; (8004b1c <HAL_DMA_Abort_IT+0x450>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d040      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a4c      	ldr	r2, [pc, #304]	; (8004b20 <HAL_DMA_Abort_IT+0x454>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d03b      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a4a      	ldr	r2, [pc, #296]	; (8004b24 <HAL_DMA_Abort_IT+0x458>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d036      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a49      	ldr	r2, [pc, #292]	; (8004b28 <HAL_DMA_Abort_IT+0x45c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d031      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a47      	ldr	r2, [pc, #284]	; (8004b2c <HAL_DMA_Abort_IT+0x460>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d02c      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a46      	ldr	r2, [pc, #280]	; (8004b30 <HAL_DMA_Abort_IT+0x464>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d027      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a44      	ldr	r2, [pc, #272]	; (8004b34 <HAL_DMA_Abort_IT+0x468>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d022      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a43      	ldr	r2, [pc, #268]	; (8004b38 <HAL_DMA_Abort_IT+0x46c>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d01d      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a41      	ldr	r2, [pc, #260]	; (8004b3c <HAL_DMA_Abort_IT+0x470>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d018      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a40      	ldr	r2, [pc, #256]	; (8004b40 <HAL_DMA_Abort_IT+0x474>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d013      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a3e      	ldr	r2, [pc, #248]	; (8004b44 <HAL_DMA_Abort_IT+0x478>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00e      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a3d      	ldr	r2, [pc, #244]	; (8004b48 <HAL_DMA_Abort_IT+0x47c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d009      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a3b      	ldr	r2, [pc, #236]	; (8004b4c <HAL_DMA_Abort_IT+0x480>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d004      	beq.n	8004a6c <HAL_DMA_Abort_IT+0x3a0>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a3a      	ldr	r2, [pc, #232]	; (8004b50 <HAL_DMA_Abort_IT+0x484>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d101      	bne.n	8004a70 <HAL_DMA_Abort_IT+0x3a4>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <HAL_DMA_Abort_IT+0x3a6>
 8004a70:	2300      	movs	r3, #0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d028      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a84:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a90:	f003 031f 	and.w	r3, r3, #31
 8004a94:	2201      	movs	r2, #1
 8004a96:	409a      	lsls	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004aa4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00c      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ab8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004abc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ac6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40020010 	.word	0x40020010
 8004af8:	40020028 	.word	0x40020028
 8004afc:	40020040 	.word	0x40020040
 8004b00:	40020058 	.word	0x40020058
 8004b04:	40020070 	.word	0x40020070
 8004b08:	40020088 	.word	0x40020088
 8004b0c:	400200a0 	.word	0x400200a0
 8004b10:	400200b8 	.word	0x400200b8
 8004b14:	40020410 	.word	0x40020410
 8004b18:	40020428 	.word	0x40020428
 8004b1c:	40020440 	.word	0x40020440
 8004b20:	40020458 	.word	0x40020458
 8004b24:	40020470 	.word	0x40020470
 8004b28:	40020488 	.word	0x40020488
 8004b2c:	400204a0 	.word	0x400204a0
 8004b30:	400204b8 	.word	0x400204b8
 8004b34:	58025408 	.word	0x58025408
 8004b38:	5802541c 	.word	0x5802541c
 8004b3c:	58025430 	.word	0x58025430
 8004b40:	58025444 	.word	0x58025444
 8004b44:	58025458 	.word	0x58025458
 8004b48:	5802546c 	.word	0x5802546c
 8004b4c:	58025480 	.word	0x58025480
 8004b50:	58025494 	.word	0x58025494

08004b54 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08a      	sub	sp, #40	; 0x28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b60:	4b67      	ldr	r3, [pc, #412]	; (8004d00 <HAL_DMA_IRQHandler+0x1ac>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a67      	ldr	r2, [pc, #412]	; (8004d04 <HAL_DMA_IRQHandler+0x1b0>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	0a9b      	lsrs	r3, r3, #10
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b72:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b78:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a5f      	ldr	r2, [pc, #380]	; (8004d08 <HAL_DMA_IRQHandler+0x1b4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d04a      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xd2>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a5d      	ldr	r2, [pc, #372]	; (8004d0c <HAL_DMA_IRQHandler+0x1b8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d045      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xd2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a5c      	ldr	r2, [pc, #368]	; (8004d10 <HAL_DMA_IRQHandler+0x1bc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d040      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xd2>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a5a      	ldr	r2, [pc, #360]	; (8004d14 <HAL_DMA_IRQHandler+0x1c0>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d03b      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xd2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a59      	ldr	r2, [pc, #356]	; (8004d18 <HAL_DMA_IRQHandler+0x1c4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d036      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xd2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a57      	ldr	r2, [pc, #348]	; (8004d1c <HAL_DMA_IRQHandler+0x1c8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d031      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xd2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a56      	ldr	r2, [pc, #344]	; (8004d20 <HAL_DMA_IRQHandler+0x1cc>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d02c      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xd2>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a54      	ldr	r2, [pc, #336]	; (8004d24 <HAL_DMA_IRQHandler+0x1d0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d027      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xd2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a53      	ldr	r2, [pc, #332]	; (8004d28 <HAL_DMA_IRQHandler+0x1d4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d022      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xd2>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a51      	ldr	r2, [pc, #324]	; (8004d2c <HAL_DMA_IRQHandler+0x1d8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d01d      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xd2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a50      	ldr	r2, [pc, #320]	; (8004d30 <HAL_DMA_IRQHandler+0x1dc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d018      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xd2>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a4e      	ldr	r2, [pc, #312]	; (8004d34 <HAL_DMA_IRQHandler+0x1e0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d013      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xd2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a4d      	ldr	r2, [pc, #308]	; (8004d38 <HAL_DMA_IRQHandler+0x1e4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xd2>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a4b      	ldr	r2, [pc, #300]	; (8004d3c <HAL_DMA_IRQHandler+0x1e8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d009      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xd2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a4a      	ldr	r2, [pc, #296]	; (8004d40 <HAL_DMA_IRQHandler+0x1ec>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_DMA_IRQHandler+0xd2>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a48      	ldr	r2, [pc, #288]	; (8004d44 <HAL_DMA_IRQHandler+0x1f0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d101      	bne.n	8004c2a <HAL_DMA_IRQHandler+0xd6>
 8004c26:	2301      	movs	r3, #1
 8004c28:	e000      	b.n	8004c2c <HAL_DMA_IRQHandler+0xd8>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 842b 	beq.w	8005488 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	2208      	movs	r2, #8
 8004c3c:	409a      	lsls	r2, r3
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	4013      	ands	r3, r2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80a2 	beq.w	8004d8c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2e      	ldr	r2, [pc, #184]	; (8004d08 <HAL_DMA_IRQHandler+0x1b4>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d04a      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x194>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a2d      	ldr	r2, [pc, #180]	; (8004d0c <HAL_DMA_IRQHandler+0x1b8>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d045      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x194>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a2b      	ldr	r2, [pc, #172]	; (8004d10 <HAL_DMA_IRQHandler+0x1bc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d040      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x194>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a2a      	ldr	r2, [pc, #168]	; (8004d14 <HAL_DMA_IRQHandler+0x1c0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d03b      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x194>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a28      	ldr	r2, [pc, #160]	; (8004d18 <HAL_DMA_IRQHandler+0x1c4>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d036      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x194>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a27      	ldr	r2, [pc, #156]	; (8004d1c <HAL_DMA_IRQHandler+0x1c8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d031      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x194>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a25      	ldr	r2, [pc, #148]	; (8004d20 <HAL_DMA_IRQHandler+0x1cc>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d02c      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x194>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a24      	ldr	r2, [pc, #144]	; (8004d24 <HAL_DMA_IRQHandler+0x1d0>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d027      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x194>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a22      	ldr	r2, [pc, #136]	; (8004d28 <HAL_DMA_IRQHandler+0x1d4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d022      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x194>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a21      	ldr	r2, [pc, #132]	; (8004d2c <HAL_DMA_IRQHandler+0x1d8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d01d      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x194>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1f      	ldr	r2, [pc, #124]	; (8004d30 <HAL_DMA_IRQHandler+0x1dc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d018      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x194>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <HAL_DMA_IRQHandler+0x1e0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d013      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x194>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1c      	ldr	r2, [pc, #112]	; (8004d38 <HAL_DMA_IRQHandler+0x1e4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00e      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x194>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1b      	ldr	r2, [pc, #108]	; (8004d3c <HAL_DMA_IRQHandler+0x1e8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d009      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x194>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a19      	ldr	r2, [pc, #100]	; (8004d40 <HAL_DMA_IRQHandler+0x1ec>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d004      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x194>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a18      	ldr	r2, [pc, #96]	; (8004d44 <HAL_DMA_IRQHandler+0x1f0>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d12f      	bne.n	8004d48 <HAL_DMA_IRQHandler+0x1f4>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bf14      	ite	ne
 8004cf6:	2301      	movne	r3, #1
 8004cf8:	2300      	moveq	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	e02e      	b.n	8004d5c <HAL_DMA_IRQHandler+0x208>
 8004cfe:	bf00      	nop
 8004d00:	20000008 	.word	0x20000008
 8004d04:	1b4e81b5 	.word	0x1b4e81b5
 8004d08:	40020010 	.word	0x40020010
 8004d0c:	40020028 	.word	0x40020028
 8004d10:	40020040 	.word	0x40020040
 8004d14:	40020058 	.word	0x40020058
 8004d18:	40020070 	.word	0x40020070
 8004d1c:	40020088 	.word	0x40020088
 8004d20:	400200a0 	.word	0x400200a0
 8004d24:	400200b8 	.word	0x400200b8
 8004d28:	40020410 	.word	0x40020410
 8004d2c:	40020428 	.word	0x40020428
 8004d30:	40020440 	.word	0x40020440
 8004d34:	40020458 	.word	0x40020458
 8004d38:	40020470 	.word	0x40020470
 8004d3c:	40020488 	.word	0x40020488
 8004d40:	400204a0 	.word	0x400204a0
 8004d44:	400204b8 	.word	0x400204b8
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bf14      	ite	ne
 8004d56:	2301      	movne	r3, #1
 8004d58:	2300      	moveq	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d015      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0204 	bic.w	r2, r2, #4
 8004d6e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d74:	f003 031f 	and.w	r3, r3, #31
 8004d78:	2208      	movs	r2, #8
 8004d7a:	409a      	lsls	r2, r3
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d84:	f043 0201 	orr.w	r2, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d90:	f003 031f 	and.w	r3, r3, #31
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d06e      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a69      	ldr	r2, [pc, #420]	; (8004f4c <HAL_DMA_IRQHandler+0x3f8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d04a      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2ee>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a67      	ldr	r2, [pc, #412]	; (8004f50 <HAL_DMA_IRQHandler+0x3fc>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d045      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2ee>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a66      	ldr	r2, [pc, #408]	; (8004f54 <HAL_DMA_IRQHandler+0x400>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d040      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2ee>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a64      	ldr	r2, [pc, #400]	; (8004f58 <HAL_DMA_IRQHandler+0x404>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d03b      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2ee>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a63      	ldr	r2, [pc, #396]	; (8004f5c <HAL_DMA_IRQHandler+0x408>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d036      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2ee>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a61      	ldr	r2, [pc, #388]	; (8004f60 <HAL_DMA_IRQHandler+0x40c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d031      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2ee>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a60      	ldr	r2, [pc, #384]	; (8004f64 <HAL_DMA_IRQHandler+0x410>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d02c      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2ee>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a5e      	ldr	r2, [pc, #376]	; (8004f68 <HAL_DMA_IRQHandler+0x414>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d027      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2ee>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a5d      	ldr	r2, [pc, #372]	; (8004f6c <HAL_DMA_IRQHandler+0x418>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d022      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2ee>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a5b      	ldr	r2, [pc, #364]	; (8004f70 <HAL_DMA_IRQHandler+0x41c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01d      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2ee>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a5a      	ldr	r2, [pc, #360]	; (8004f74 <HAL_DMA_IRQHandler+0x420>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d018      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2ee>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a58      	ldr	r2, [pc, #352]	; (8004f78 <HAL_DMA_IRQHandler+0x424>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2ee>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a57      	ldr	r2, [pc, #348]	; (8004f7c <HAL_DMA_IRQHandler+0x428>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00e      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2ee>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a55      	ldr	r2, [pc, #340]	; (8004f80 <HAL_DMA_IRQHandler+0x42c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2ee>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a54      	ldr	r2, [pc, #336]	; (8004f84 <HAL_DMA_IRQHandler+0x430>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_DMA_IRQHandler+0x2ee>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a52      	ldr	r2, [pc, #328]	; (8004f88 <HAL_DMA_IRQHandler+0x434>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d10a      	bne.n	8004e58 <HAL_DMA_IRQHandler+0x304>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	e003      	b.n	8004e60 <HAL_DMA_IRQHandler+0x30c>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00d      	beq.n	8004e80 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e68:	f003 031f 	and.w	r3, r3, #31
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	409a      	lsls	r2, r3
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e78:	f043 0202 	orr.w	r2, r3, #2
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e84:	f003 031f 	and.w	r3, r3, #31
 8004e88:	2204      	movs	r2, #4
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 808f 	beq.w	8004fb4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a2c      	ldr	r2, [pc, #176]	; (8004f4c <HAL_DMA_IRQHandler+0x3f8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d04a      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x3e2>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a2a      	ldr	r2, [pc, #168]	; (8004f50 <HAL_DMA_IRQHandler+0x3fc>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d045      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x3e2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a29      	ldr	r2, [pc, #164]	; (8004f54 <HAL_DMA_IRQHandler+0x400>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d040      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x3e2>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a27      	ldr	r2, [pc, #156]	; (8004f58 <HAL_DMA_IRQHandler+0x404>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d03b      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x3e2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a26      	ldr	r2, [pc, #152]	; (8004f5c <HAL_DMA_IRQHandler+0x408>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d036      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x3e2>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a24      	ldr	r2, [pc, #144]	; (8004f60 <HAL_DMA_IRQHandler+0x40c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d031      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x3e2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a23      	ldr	r2, [pc, #140]	; (8004f64 <HAL_DMA_IRQHandler+0x410>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d02c      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x3e2>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a21      	ldr	r2, [pc, #132]	; (8004f68 <HAL_DMA_IRQHandler+0x414>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d027      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x3e2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a20      	ldr	r2, [pc, #128]	; (8004f6c <HAL_DMA_IRQHandler+0x418>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d022      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x3e2>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a1e      	ldr	r2, [pc, #120]	; (8004f70 <HAL_DMA_IRQHandler+0x41c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d01d      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x3e2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a1d      	ldr	r2, [pc, #116]	; (8004f74 <HAL_DMA_IRQHandler+0x420>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d018      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x3e2>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a1b      	ldr	r2, [pc, #108]	; (8004f78 <HAL_DMA_IRQHandler+0x424>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d013      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x3e2>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a1a      	ldr	r2, [pc, #104]	; (8004f7c <HAL_DMA_IRQHandler+0x428>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00e      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x3e2>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a18      	ldr	r2, [pc, #96]	; (8004f80 <HAL_DMA_IRQHandler+0x42c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d009      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x3e2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a17      	ldr	r2, [pc, #92]	; (8004f84 <HAL_DMA_IRQHandler+0x430>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d004      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x3e2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a15      	ldr	r2, [pc, #84]	; (8004f88 <HAL_DMA_IRQHandler+0x434>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d12a      	bne.n	8004f8c <HAL_DMA_IRQHandler+0x438>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	bf14      	ite	ne
 8004f44:	2301      	movne	r3, #1
 8004f46:	2300      	moveq	r3, #0
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	e023      	b.n	8004f94 <HAL_DMA_IRQHandler+0x440>
 8004f4c:	40020010 	.word	0x40020010
 8004f50:	40020028 	.word	0x40020028
 8004f54:	40020040 	.word	0x40020040
 8004f58:	40020058 	.word	0x40020058
 8004f5c:	40020070 	.word	0x40020070
 8004f60:	40020088 	.word	0x40020088
 8004f64:	400200a0 	.word	0x400200a0
 8004f68:	400200b8 	.word	0x400200b8
 8004f6c:	40020410 	.word	0x40020410
 8004f70:	40020428 	.word	0x40020428
 8004f74:	40020440 	.word	0x40020440
 8004f78:	40020458 	.word	0x40020458
 8004f7c:	40020470 	.word	0x40020470
 8004f80:	40020488 	.word	0x40020488
 8004f84:	400204a0 	.word	0x400204a0
 8004f88:	400204b8 	.word	0x400204b8
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2300      	movs	r3, #0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00d      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9c:	f003 031f 	and.w	r3, r3, #31
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	409a      	lsls	r2, r3
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fac:	f043 0204 	orr.w	r2, r3, #4
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	2210      	movs	r2, #16
 8004fbe:	409a      	lsls	r2, r3
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 80a6 	beq.w	8005116 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a85      	ldr	r2, [pc, #532]	; (80051e4 <HAL_DMA_IRQHandler+0x690>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d04a      	beq.n	800506a <HAL_DMA_IRQHandler+0x516>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a83      	ldr	r2, [pc, #524]	; (80051e8 <HAL_DMA_IRQHandler+0x694>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d045      	beq.n	800506a <HAL_DMA_IRQHandler+0x516>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a82      	ldr	r2, [pc, #520]	; (80051ec <HAL_DMA_IRQHandler+0x698>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d040      	beq.n	800506a <HAL_DMA_IRQHandler+0x516>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a80      	ldr	r2, [pc, #512]	; (80051f0 <HAL_DMA_IRQHandler+0x69c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d03b      	beq.n	800506a <HAL_DMA_IRQHandler+0x516>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a7f      	ldr	r2, [pc, #508]	; (80051f4 <HAL_DMA_IRQHandler+0x6a0>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d036      	beq.n	800506a <HAL_DMA_IRQHandler+0x516>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a7d      	ldr	r2, [pc, #500]	; (80051f8 <HAL_DMA_IRQHandler+0x6a4>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d031      	beq.n	800506a <HAL_DMA_IRQHandler+0x516>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a7c      	ldr	r2, [pc, #496]	; (80051fc <HAL_DMA_IRQHandler+0x6a8>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d02c      	beq.n	800506a <HAL_DMA_IRQHandler+0x516>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a7a      	ldr	r2, [pc, #488]	; (8005200 <HAL_DMA_IRQHandler+0x6ac>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d027      	beq.n	800506a <HAL_DMA_IRQHandler+0x516>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a79      	ldr	r2, [pc, #484]	; (8005204 <HAL_DMA_IRQHandler+0x6b0>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d022      	beq.n	800506a <HAL_DMA_IRQHandler+0x516>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a77      	ldr	r2, [pc, #476]	; (8005208 <HAL_DMA_IRQHandler+0x6b4>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d01d      	beq.n	800506a <HAL_DMA_IRQHandler+0x516>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a76      	ldr	r2, [pc, #472]	; (800520c <HAL_DMA_IRQHandler+0x6b8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d018      	beq.n	800506a <HAL_DMA_IRQHandler+0x516>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a74      	ldr	r2, [pc, #464]	; (8005210 <HAL_DMA_IRQHandler+0x6bc>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d013      	beq.n	800506a <HAL_DMA_IRQHandler+0x516>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a73      	ldr	r2, [pc, #460]	; (8005214 <HAL_DMA_IRQHandler+0x6c0>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00e      	beq.n	800506a <HAL_DMA_IRQHandler+0x516>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a71      	ldr	r2, [pc, #452]	; (8005218 <HAL_DMA_IRQHandler+0x6c4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d009      	beq.n	800506a <HAL_DMA_IRQHandler+0x516>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a70      	ldr	r2, [pc, #448]	; (800521c <HAL_DMA_IRQHandler+0x6c8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d004      	beq.n	800506a <HAL_DMA_IRQHandler+0x516>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a6e      	ldr	r2, [pc, #440]	; (8005220 <HAL_DMA_IRQHandler+0x6cc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d10a      	bne.n	8005080 <HAL_DMA_IRQHandler+0x52c>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	bf14      	ite	ne
 8005078:	2301      	movne	r3, #1
 800507a:	2300      	moveq	r3, #0
 800507c:	b2db      	uxtb	r3, r3
 800507e:	e009      	b.n	8005094 <HAL_DMA_IRQHandler+0x540>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0304 	and.w	r3, r3, #4
 800508a:	2b00      	cmp	r3, #0
 800508c:	bf14      	ite	ne
 800508e:	2301      	movne	r3, #1
 8005090:	2300      	moveq	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d03e      	beq.n	8005116 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509c:	f003 031f 	and.w	r3, r3, #31
 80050a0:	2210      	movs	r2, #16
 80050a2:	409a      	lsls	r2, r3
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d018      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d108      	bne.n	80050d6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d024      	beq.n	8005116 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	4798      	blx	r3
 80050d4:	e01f      	b.n	8005116 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d01b      	beq.n	8005116 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	4798      	blx	r3
 80050e6:	e016      	b.n	8005116 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d107      	bne.n	8005106 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0208 	bic.w	r2, r2, #8
 8005104:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	d003      	beq.n	8005116 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	2220      	movs	r2, #32
 8005120:	409a      	lsls	r2, r3
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	4013      	ands	r3, r2
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 8110 	beq.w	800534c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a2c      	ldr	r2, [pc, #176]	; (80051e4 <HAL_DMA_IRQHandler+0x690>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d04a      	beq.n	80051cc <HAL_DMA_IRQHandler+0x678>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a2b      	ldr	r2, [pc, #172]	; (80051e8 <HAL_DMA_IRQHandler+0x694>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d045      	beq.n	80051cc <HAL_DMA_IRQHandler+0x678>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a29      	ldr	r2, [pc, #164]	; (80051ec <HAL_DMA_IRQHandler+0x698>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d040      	beq.n	80051cc <HAL_DMA_IRQHandler+0x678>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a28      	ldr	r2, [pc, #160]	; (80051f0 <HAL_DMA_IRQHandler+0x69c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d03b      	beq.n	80051cc <HAL_DMA_IRQHandler+0x678>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a26      	ldr	r2, [pc, #152]	; (80051f4 <HAL_DMA_IRQHandler+0x6a0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d036      	beq.n	80051cc <HAL_DMA_IRQHandler+0x678>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a25      	ldr	r2, [pc, #148]	; (80051f8 <HAL_DMA_IRQHandler+0x6a4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d031      	beq.n	80051cc <HAL_DMA_IRQHandler+0x678>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a23      	ldr	r2, [pc, #140]	; (80051fc <HAL_DMA_IRQHandler+0x6a8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d02c      	beq.n	80051cc <HAL_DMA_IRQHandler+0x678>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a22      	ldr	r2, [pc, #136]	; (8005200 <HAL_DMA_IRQHandler+0x6ac>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d027      	beq.n	80051cc <HAL_DMA_IRQHandler+0x678>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a20      	ldr	r2, [pc, #128]	; (8005204 <HAL_DMA_IRQHandler+0x6b0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d022      	beq.n	80051cc <HAL_DMA_IRQHandler+0x678>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a1f      	ldr	r2, [pc, #124]	; (8005208 <HAL_DMA_IRQHandler+0x6b4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d01d      	beq.n	80051cc <HAL_DMA_IRQHandler+0x678>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a1d      	ldr	r2, [pc, #116]	; (800520c <HAL_DMA_IRQHandler+0x6b8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d018      	beq.n	80051cc <HAL_DMA_IRQHandler+0x678>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1c      	ldr	r2, [pc, #112]	; (8005210 <HAL_DMA_IRQHandler+0x6bc>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d013      	beq.n	80051cc <HAL_DMA_IRQHandler+0x678>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1a      	ldr	r2, [pc, #104]	; (8005214 <HAL_DMA_IRQHandler+0x6c0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00e      	beq.n	80051cc <HAL_DMA_IRQHandler+0x678>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a19      	ldr	r2, [pc, #100]	; (8005218 <HAL_DMA_IRQHandler+0x6c4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d009      	beq.n	80051cc <HAL_DMA_IRQHandler+0x678>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a17      	ldr	r2, [pc, #92]	; (800521c <HAL_DMA_IRQHandler+0x6c8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d004      	beq.n	80051cc <HAL_DMA_IRQHandler+0x678>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a16      	ldr	r2, [pc, #88]	; (8005220 <HAL_DMA_IRQHandler+0x6cc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d12b      	bne.n	8005224 <HAL_DMA_IRQHandler+0x6d0>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	bf14      	ite	ne
 80051da:	2301      	movne	r3, #1
 80051dc:	2300      	moveq	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	e02a      	b.n	8005238 <HAL_DMA_IRQHandler+0x6e4>
 80051e2:	bf00      	nop
 80051e4:	40020010 	.word	0x40020010
 80051e8:	40020028 	.word	0x40020028
 80051ec:	40020040 	.word	0x40020040
 80051f0:	40020058 	.word	0x40020058
 80051f4:	40020070 	.word	0x40020070
 80051f8:	40020088 	.word	0x40020088
 80051fc:	400200a0 	.word	0x400200a0
 8005200:	400200b8 	.word	0x400200b8
 8005204:	40020410 	.word	0x40020410
 8005208:	40020428 	.word	0x40020428
 800520c:	40020440 	.word	0x40020440
 8005210:	40020458 	.word	0x40020458
 8005214:	40020470 	.word	0x40020470
 8005218:	40020488 	.word	0x40020488
 800521c:	400204a0 	.word	0x400204a0
 8005220:	400204b8 	.word	0x400204b8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	bf14      	ite	ne
 8005232:	2301      	movne	r3, #1
 8005234:	2300      	moveq	r3, #0
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8087 	beq.w	800534c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005242:	f003 031f 	and.w	r3, r3, #31
 8005246:	2220      	movs	r2, #32
 8005248:	409a      	lsls	r2, r3
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b04      	cmp	r3, #4
 8005258:	d139      	bne.n	80052ce <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0216 	bic.w	r2, r2, #22
 8005268:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695a      	ldr	r2, [r3, #20]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005278:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	2b00      	cmp	r3, #0
 8005280:	d103      	bne.n	800528a <HAL_DMA_IRQHandler+0x736>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f022 0208 	bic.w	r2, r2, #8
 8005298:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800529e:	f003 031f 	and.w	r3, r3, #31
 80052a2:	223f      	movs	r2, #63	; 0x3f
 80052a4:	409a      	lsls	r2, r3
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 834a 	beq.w	8005958 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	4798      	blx	r3
          }
          return;
 80052cc:	e344      	b.n	8005958 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d018      	beq.n	800530e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d108      	bne.n	80052fc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d02c      	beq.n	800534c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	4798      	blx	r3
 80052fa:	e027      	b.n	800534c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d023      	beq.n	800534c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	4798      	blx	r3
 800530c:	e01e      	b.n	800534c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10f      	bne.n	800533c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0210 	bic.w	r2, r2, #16
 800532a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 8306 	beq.w	8005962 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	f000 8088 	beq.w	8005474 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2204      	movs	r2, #4
 8005368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a7a      	ldr	r2, [pc, #488]	; (800555c <HAL_DMA_IRQHandler+0xa08>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d04a      	beq.n	800540c <HAL_DMA_IRQHandler+0x8b8>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a79      	ldr	r2, [pc, #484]	; (8005560 <HAL_DMA_IRQHandler+0xa0c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d045      	beq.n	800540c <HAL_DMA_IRQHandler+0x8b8>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a77      	ldr	r2, [pc, #476]	; (8005564 <HAL_DMA_IRQHandler+0xa10>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d040      	beq.n	800540c <HAL_DMA_IRQHandler+0x8b8>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a76      	ldr	r2, [pc, #472]	; (8005568 <HAL_DMA_IRQHandler+0xa14>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d03b      	beq.n	800540c <HAL_DMA_IRQHandler+0x8b8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a74      	ldr	r2, [pc, #464]	; (800556c <HAL_DMA_IRQHandler+0xa18>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d036      	beq.n	800540c <HAL_DMA_IRQHandler+0x8b8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a73      	ldr	r2, [pc, #460]	; (8005570 <HAL_DMA_IRQHandler+0xa1c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d031      	beq.n	800540c <HAL_DMA_IRQHandler+0x8b8>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a71      	ldr	r2, [pc, #452]	; (8005574 <HAL_DMA_IRQHandler+0xa20>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d02c      	beq.n	800540c <HAL_DMA_IRQHandler+0x8b8>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a70      	ldr	r2, [pc, #448]	; (8005578 <HAL_DMA_IRQHandler+0xa24>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d027      	beq.n	800540c <HAL_DMA_IRQHandler+0x8b8>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a6e      	ldr	r2, [pc, #440]	; (800557c <HAL_DMA_IRQHandler+0xa28>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d022      	beq.n	800540c <HAL_DMA_IRQHandler+0x8b8>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a6d      	ldr	r2, [pc, #436]	; (8005580 <HAL_DMA_IRQHandler+0xa2c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d01d      	beq.n	800540c <HAL_DMA_IRQHandler+0x8b8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a6b      	ldr	r2, [pc, #428]	; (8005584 <HAL_DMA_IRQHandler+0xa30>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d018      	beq.n	800540c <HAL_DMA_IRQHandler+0x8b8>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a6a      	ldr	r2, [pc, #424]	; (8005588 <HAL_DMA_IRQHandler+0xa34>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d013      	beq.n	800540c <HAL_DMA_IRQHandler+0x8b8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a68      	ldr	r2, [pc, #416]	; (800558c <HAL_DMA_IRQHandler+0xa38>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00e      	beq.n	800540c <HAL_DMA_IRQHandler+0x8b8>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a67      	ldr	r2, [pc, #412]	; (8005590 <HAL_DMA_IRQHandler+0xa3c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d009      	beq.n	800540c <HAL_DMA_IRQHandler+0x8b8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a65      	ldr	r2, [pc, #404]	; (8005594 <HAL_DMA_IRQHandler+0xa40>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d004      	beq.n	800540c <HAL_DMA_IRQHandler+0x8b8>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a64      	ldr	r2, [pc, #400]	; (8005598 <HAL_DMA_IRQHandler+0xa44>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d108      	bne.n	800541e <HAL_DMA_IRQHandler+0x8ca>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	e007      	b.n	800542e <HAL_DMA_IRQHandler+0x8da>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0201 	bic.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3301      	adds	r3, #1
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005436:	429a      	cmp	r2, r3
 8005438:	d307      	bcc.n	800544a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f2      	bne.n	800542e <HAL_DMA_IRQHandler+0x8da>
 8005448:	e000      	b.n	800544c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800544a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d004      	beq.n	800546c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2203      	movs	r2, #3
 8005466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800546a:	e003      	b.n	8005474 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 8272 	beq.w	8005962 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	4798      	blx	r3
 8005486:	e26c      	b.n	8005962 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a43      	ldr	r2, [pc, #268]	; (800559c <HAL_DMA_IRQHandler+0xa48>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d022      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x984>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a42      	ldr	r2, [pc, #264]	; (80055a0 <HAL_DMA_IRQHandler+0xa4c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d01d      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x984>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a40      	ldr	r2, [pc, #256]	; (80055a4 <HAL_DMA_IRQHandler+0xa50>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d018      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x984>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a3f      	ldr	r2, [pc, #252]	; (80055a8 <HAL_DMA_IRQHandler+0xa54>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d013      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x984>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a3d      	ldr	r2, [pc, #244]	; (80055ac <HAL_DMA_IRQHandler+0xa58>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00e      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x984>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a3c      	ldr	r2, [pc, #240]	; (80055b0 <HAL_DMA_IRQHandler+0xa5c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d009      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x984>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a3a      	ldr	r2, [pc, #232]	; (80055b4 <HAL_DMA_IRQHandler+0xa60>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <HAL_DMA_IRQHandler+0x984>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a39      	ldr	r2, [pc, #228]	; (80055b8 <HAL_DMA_IRQHandler+0xa64>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d101      	bne.n	80054dc <HAL_DMA_IRQHandler+0x988>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <HAL_DMA_IRQHandler+0x98a>
 80054dc:	2300      	movs	r3, #0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 823f 	beq.w	8005962 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f0:	f003 031f 	and.w	r3, r3, #31
 80054f4:	2204      	movs	r2, #4
 80054f6:	409a      	lsls	r2, r3
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 80cd 	beq.w	800569c <HAL_DMA_IRQHandler+0xb48>
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 80c7 	beq.w	800569c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005512:	f003 031f 	and.w	r3, r3, #31
 8005516:	2204      	movs	r2, #4
 8005518:	409a      	lsls	r2, r3
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d049      	beq.n	80055bc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d109      	bne.n	8005546 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 8210 	beq.w	800595c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005544:	e20a      	b.n	800595c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 8206 	beq.w	800595c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005558:	e200      	b.n	800595c <HAL_DMA_IRQHandler+0xe08>
 800555a:	bf00      	nop
 800555c:	40020010 	.word	0x40020010
 8005560:	40020028 	.word	0x40020028
 8005564:	40020040 	.word	0x40020040
 8005568:	40020058 	.word	0x40020058
 800556c:	40020070 	.word	0x40020070
 8005570:	40020088 	.word	0x40020088
 8005574:	400200a0 	.word	0x400200a0
 8005578:	400200b8 	.word	0x400200b8
 800557c:	40020410 	.word	0x40020410
 8005580:	40020428 	.word	0x40020428
 8005584:	40020440 	.word	0x40020440
 8005588:	40020458 	.word	0x40020458
 800558c:	40020470 	.word	0x40020470
 8005590:	40020488 	.word	0x40020488
 8005594:	400204a0 	.word	0x400204a0
 8005598:	400204b8 	.word	0x400204b8
 800559c:	58025408 	.word	0x58025408
 80055a0:	5802541c 	.word	0x5802541c
 80055a4:	58025430 	.word	0x58025430
 80055a8:	58025444 	.word	0x58025444
 80055ac:	58025458 	.word	0x58025458
 80055b0:	5802546c 	.word	0x5802546c
 80055b4:	58025480 	.word	0x58025480
 80055b8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d160      	bne.n	8005688 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a8c      	ldr	r2, [pc, #560]	; (80057fc <HAL_DMA_IRQHandler+0xca8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d04a      	beq.n	8005666 <HAL_DMA_IRQHandler+0xb12>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a8a      	ldr	r2, [pc, #552]	; (8005800 <HAL_DMA_IRQHandler+0xcac>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d045      	beq.n	8005666 <HAL_DMA_IRQHandler+0xb12>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a89      	ldr	r2, [pc, #548]	; (8005804 <HAL_DMA_IRQHandler+0xcb0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d040      	beq.n	8005666 <HAL_DMA_IRQHandler+0xb12>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a87      	ldr	r2, [pc, #540]	; (8005808 <HAL_DMA_IRQHandler+0xcb4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d03b      	beq.n	8005666 <HAL_DMA_IRQHandler+0xb12>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a86      	ldr	r2, [pc, #536]	; (800580c <HAL_DMA_IRQHandler+0xcb8>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d036      	beq.n	8005666 <HAL_DMA_IRQHandler+0xb12>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a84      	ldr	r2, [pc, #528]	; (8005810 <HAL_DMA_IRQHandler+0xcbc>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d031      	beq.n	8005666 <HAL_DMA_IRQHandler+0xb12>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a83      	ldr	r2, [pc, #524]	; (8005814 <HAL_DMA_IRQHandler+0xcc0>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d02c      	beq.n	8005666 <HAL_DMA_IRQHandler+0xb12>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a81      	ldr	r2, [pc, #516]	; (8005818 <HAL_DMA_IRQHandler+0xcc4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d027      	beq.n	8005666 <HAL_DMA_IRQHandler+0xb12>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a80      	ldr	r2, [pc, #512]	; (800581c <HAL_DMA_IRQHandler+0xcc8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d022      	beq.n	8005666 <HAL_DMA_IRQHandler+0xb12>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a7e      	ldr	r2, [pc, #504]	; (8005820 <HAL_DMA_IRQHandler+0xccc>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01d      	beq.n	8005666 <HAL_DMA_IRQHandler+0xb12>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a7d      	ldr	r2, [pc, #500]	; (8005824 <HAL_DMA_IRQHandler+0xcd0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d018      	beq.n	8005666 <HAL_DMA_IRQHandler+0xb12>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a7b      	ldr	r2, [pc, #492]	; (8005828 <HAL_DMA_IRQHandler+0xcd4>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d013      	beq.n	8005666 <HAL_DMA_IRQHandler+0xb12>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a7a      	ldr	r2, [pc, #488]	; (800582c <HAL_DMA_IRQHandler+0xcd8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00e      	beq.n	8005666 <HAL_DMA_IRQHandler+0xb12>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a78      	ldr	r2, [pc, #480]	; (8005830 <HAL_DMA_IRQHandler+0xcdc>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d009      	beq.n	8005666 <HAL_DMA_IRQHandler+0xb12>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a77      	ldr	r2, [pc, #476]	; (8005834 <HAL_DMA_IRQHandler+0xce0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d004      	beq.n	8005666 <HAL_DMA_IRQHandler+0xb12>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a75      	ldr	r2, [pc, #468]	; (8005838 <HAL_DMA_IRQHandler+0xce4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d108      	bne.n	8005678 <HAL_DMA_IRQHandler+0xb24>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0208 	bic.w	r2, r2, #8
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	e007      	b.n	8005688 <HAL_DMA_IRQHandler+0xb34>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0204 	bic.w	r2, r2, #4
 8005686:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 8165 	beq.w	800595c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800569a:	e15f      	b.n	800595c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a0:	f003 031f 	and.w	r3, r3, #31
 80056a4:	2202      	movs	r2, #2
 80056a6:	409a      	lsls	r2, r3
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	4013      	ands	r3, r2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 80c5 	beq.w	800583c <HAL_DMA_IRQHandler+0xce8>
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 80bf 	beq.w	800583c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c2:	f003 031f 	and.w	r3, r3, #31
 80056c6:	2202      	movs	r2, #2
 80056c8:	409a      	lsls	r2, r3
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d018      	beq.n	800570a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d109      	bne.n	80056f6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 813a 	beq.w	8005960 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056f4:	e134      	b.n	8005960 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 8130 	beq.w	8005960 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005708:	e12a      	b.n	8005960 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d168      	bne.n	80057e6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a38      	ldr	r2, [pc, #224]	; (80057fc <HAL_DMA_IRQHandler+0xca8>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d04a      	beq.n	80057b4 <HAL_DMA_IRQHandler+0xc60>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a37      	ldr	r2, [pc, #220]	; (8005800 <HAL_DMA_IRQHandler+0xcac>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d045      	beq.n	80057b4 <HAL_DMA_IRQHandler+0xc60>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a35      	ldr	r2, [pc, #212]	; (8005804 <HAL_DMA_IRQHandler+0xcb0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d040      	beq.n	80057b4 <HAL_DMA_IRQHandler+0xc60>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a34      	ldr	r2, [pc, #208]	; (8005808 <HAL_DMA_IRQHandler+0xcb4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d03b      	beq.n	80057b4 <HAL_DMA_IRQHandler+0xc60>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a32      	ldr	r2, [pc, #200]	; (800580c <HAL_DMA_IRQHandler+0xcb8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d036      	beq.n	80057b4 <HAL_DMA_IRQHandler+0xc60>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a31      	ldr	r2, [pc, #196]	; (8005810 <HAL_DMA_IRQHandler+0xcbc>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d031      	beq.n	80057b4 <HAL_DMA_IRQHandler+0xc60>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a2f      	ldr	r2, [pc, #188]	; (8005814 <HAL_DMA_IRQHandler+0xcc0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d02c      	beq.n	80057b4 <HAL_DMA_IRQHandler+0xc60>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a2e      	ldr	r2, [pc, #184]	; (8005818 <HAL_DMA_IRQHandler+0xcc4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d027      	beq.n	80057b4 <HAL_DMA_IRQHandler+0xc60>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a2c      	ldr	r2, [pc, #176]	; (800581c <HAL_DMA_IRQHandler+0xcc8>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d022      	beq.n	80057b4 <HAL_DMA_IRQHandler+0xc60>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a2b      	ldr	r2, [pc, #172]	; (8005820 <HAL_DMA_IRQHandler+0xccc>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d01d      	beq.n	80057b4 <HAL_DMA_IRQHandler+0xc60>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a29      	ldr	r2, [pc, #164]	; (8005824 <HAL_DMA_IRQHandler+0xcd0>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d018      	beq.n	80057b4 <HAL_DMA_IRQHandler+0xc60>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a28      	ldr	r2, [pc, #160]	; (8005828 <HAL_DMA_IRQHandler+0xcd4>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d013      	beq.n	80057b4 <HAL_DMA_IRQHandler+0xc60>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a26      	ldr	r2, [pc, #152]	; (800582c <HAL_DMA_IRQHandler+0xcd8>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00e      	beq.n	80057b4 <HAL_DMA_IRQHandler+0xc60>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a25      	ldr	r2, [pc, #148]	; (8005830 <HAL_DMA_IRQHandler+0xcdc>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d009      	beq.n	80057b4 <HAL_DMA_IRQHandler+0xc60>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a23      	ldr	r2, [pc, #140]	; (8005834 <HAL_DMA_IRQHandler+0xce0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d004      	beq.n	80057b4 <HAL_DMA_IRQHandler+0xc60>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a22      	ldr	r2, [pc, #136]	; (8005838 <HAL_DMA_IRQHandler+0xce4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d108      	bne.n	80057c6 <HAL_DMA_IRQHandler+0xc72>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0214 	bic.w	r2, r2, #20
 80057c2:	601a      	str	r2, [r3, #0]
 80057c4:	e007      	b.n	80057d6 <HAL_DMA_IRQHandler+0xc82>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 020a 	bic.w	r2, r2, #10
 80057d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f000 80b8 	beq.w	8005960 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057f8:	e0b2      	b.n	8005960 <HAL_DMA_IRQHandler+0xe0c>
 80057fa:	bf00      	nop
 80057fc:	40020010 	.word	0x40020010
 8005800:	40020028 	.word	0x40020028
 8005804:	40020040 	.word	0x40020040
 8005808:	40020058 	.word	0x40020058
 800580c:	40020070 	.word	0x40020070
 8005810:	40020088 	.word	0x40020088
 8005814:	400200a0 	.word	0x400200a0
 8005818:	400200b8 	.word	0x400200b8
 800581c:	40020410 	.word	0x40020410
 8005820:	40020428 	.word	0x40020428
 8005824:	40020440 	.word	0x40020440
 8005828:	40020458 	.word	0x40020458
 800582c:	40020470 	.word	0x40020470
 8005830:	40020488 	.word	0x40020488
 8005834:	400204a0 	.word	0x400204a0
 8005838:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005840:	f003 031f 	and.w	r3, r3, #31
 8005844:	2208      	movs	r2, #8
 8005846:	409a      	lsls	r2, r3
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	4013      	ands	r3, r2
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 8088 	beq.w	8005962 <HAL_DMA_IRQHandler+0xe0e>
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f003 0308 	and.w	r3, r3, #8
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 8082 	beq.w	8005962 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a41      	ldr	r2, [pc, #260]	; (8005968 <HAL_DMA_IRQHandler+0xe14>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d04a      	beq.n	80058fe <HAL_DMA_IRQHandler+0xdaa>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a3f      	ldr	r2, [pc, #252]	; (800596c <HAL_DMA_IRQHandler+0xe18>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d045      	beq.n	80058fe <HAL_DMA_IRQHandler+0xdaa>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a3e      	ldr	r2, [pc, #248]	; (8005970 <HAL_DMA_IRQHandler+0xe1c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d040      	beq.n	80058fe <HAL_DMA_IRQHandler+0xdaa>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a3c      	ldr	r2, [pc, #240]	; (8005974 <HAL_DMA_IRQHandler+0xe20>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d03b      	beq.n	80058fe <HAL_DMA_IRQHandler+0xdaa>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a3b      	ldr	r2, [pc, #236]	; (8005978 <HAL_DMA_IRQHandler+0xe24>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d036      	beq.n	80058fe <HAL_DMA_IRQHandler+0xdaa>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a39      	ldr	r2, [pc, #228]	; (800597c <HAL_DMA_IRQHandler+0xe28>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d031      	beq.n	80058fe <HAL_DMA_IRQHandler+0xdaa>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a38      	ldr	r2, [pc, #224]	; (8005980 <HAL_DMA_IRQHandler+0xe2c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d02c      	beq.n	80058fe <HAL_DMA_IRQHandler+0xdaa>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a36      	ldr	r2, [pc, #216]	; (8005984 <HAL_DMA_IRQHandler+0xe30>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d027      	beq.n	80058fe <HAL_DMA_IRQHandler+0xdaa>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a35      	ldr	r2, [pc, #212]	; (8005988 <HAL_DMA_IRQHandler+0xe34>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d022      	beq.n	80058fe <HAL_DMA_IRQHandler+0xdaa>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a33      	ldr	r2, [pc, #204]	; (800598c <HAL_DMA_IRQHandler+0xe38>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d01d      	beq.n	80058fe <HAL_DMA_IRQHandler+0xdaa>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a32      	ldr	r2, [pc, #200]	; (8005990 <HAL_DMA_IRQHandler+0xe3c>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d018      	beq.n	80058fe <HAL_DMA_IRQHandler+0xdaa>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a30      	ldr	r2, [pc, #192]	; (8005994 <HAL_DMA_IRQHandler+0xe40>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d013      	beq.n	80058fe <HAL_DMA_IRQHandler+0xdaa>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a2f      	ldr	r2, [pc, #188]	; (8005998 <HAL_DMA_IRQHandler+0xe44>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00e      	beq.n	80058fe <HAL_DMA_IRQHandler+0xdaa>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a2d      	ldr	r2, [pc, #180]	; (800599c <HAL_DMA_IRQHandler+0xe48>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d009      	beq.n	80058fe <HAL_DMA_IRQHandler+0xdaa>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a2c      	ldr	r2, [pc, #176]	; (80059a0 <HAL_DMA_IRQHandler+0xe4c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d004      	beq.n	80058fe <HAL_DMA_IRQHandler+0xdaa>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a2a      	ldr	r2, [pc, #168]	; (80059a4 <HAL_DMA_IRQHandler+0xe50>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d108      	bne.n	8005910 <HAL_DMA_IRQHandler+0xdbc>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f022 021c 	bic.w	r2, r2, #28
 800590c:	601a      	str	r2, [r3, #0]
 800590e:	e007      	b.n	8005920 <HAL_DMA_IRQHandler+0xdcc>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 020e 	bic.w	r2, r2, #14
 800591e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005924:	f003 031f 	and.w	r3, r3, #31
 8005928:	2201      	movs	r2, #1
 800592a:	409a      	lsls	r2, r3
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2201      	movs	r2, #1
 8005942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	4798      	blx	r3
 8005956:	e004      	b.n	8005962 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005958:	bf00      	nop
 800595a:	e002      	b.n	8005962 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800595c:	bf00      	nop
 800595e:	e000      	b.n	8005962 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005960:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005962:	3728      	adds	r7, #40	; 0x28
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40020010 	.word	0x40020010
 800596c:	40020028 	.word	0x40020028
 8005970:	40020040 	.word	0x40020040
 8005974:	40020058 	.word	0x40020058
 8005978:	40020070 	.word	0x40020070
 800597c:	40020088 	.word	0x40020088
 8005980:	400200a0 	.word	0x400200a0
 8005984:	400200b8 	.word	0x400200b8
 8005988:	40020410 	.word	0x40020410
 800598c:	40020428 	.word	0x40020428
 8005990:	40020440 	.word	0x40020440
 8005994:	40020458 	.word	0x40020458
 8005998:	40020470 	.word	0x40020470
 800599c:	40020488 	.word	0x40020488
 80059a0:	400204a0 	.word	0x400204a0
 80059a4:	400204b8 	.word	0x400204b8

080059a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a42      	ldr	r2, [pc, #264]	; (8005ac0 <DMA_CalcBaseAndBitshift+0x118>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d04a      	beq.n	8005a50 <DMA_CalcBaseAndBitshift+0xa8>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a41      	ldr	r2, [pc, #260]	; (8005ac4 <DMA_CalcBaseAndBitshift+0x11c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d045      	beq.n	8005a50 <DMA_CalcBaseAndBitshift+0xa8>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a3f      	ldr	r2, [pc, #252]	; (8005ac8 <DMA_CalcBaseAndBitshift+0x120>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d040      	beq.n	8005a50 <DMA_CalcBaseAndBitshift+0xa8>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a3e      	ldr	r2, [pc, #248]	; (8005acc <DMA_CalcBaseAndBitshift+0x124>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d03b      	beq.n	8005a50 <DMA_CalcBaseAndBitshift+0xa8>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a3c      	ldr	r2, [pc, #240]	; (8005ad0 <DMA_CalcBaseAndBitshift+0x128>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d036      	beq.n	8005a50 <DMA_CalcBaseAndBitshift+0xa8>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a3b      	ldr	r2, [pc, #236]	; (8005ad4 <DMA_CalcBaseAndBitshift+0x12c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d031      	beq.n	8005a50 <DMA_CalcBaseAndBitshift+0xa8>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a39      	ldr	r2, [pc, #228]	; (8005ad8 <DMA_CalcBaseAndBitshift+0x130>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d02c      	beq.n	8005a50 <DMA_CalcBaseAndBitshift+0xa8>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a38      	ldr	r2, [pc, #224]	; (8005adc <DMA_CalcBaseAndBitshift+0x134>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d027      	beq.n	8005a50 <DMA_CalcBaseAndBitshift+0xa8>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a36      	ldr	r2, [pc, #216]	; (8005ae0 <DMA_CalcBaseAndBitshift+0x138>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d022      	beq.n	8005a50 <DMA_CalcBaseAndBitshift+0xa8>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a35      	ldr	r2, [pc, #212]	; (8005ae4 <DMA_CalcBaseAndBitshift+0x13c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d01d      	beq.n	8005a50 <DMA_CalcBaseAndBitshift+0xa8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a33      	ldr	r2, [pc, #204]	; (8005ae8 <DMA_CalcBaseAndBitshift+0x140>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d018      	beq.n	8005a50 <DMA_CalcBaseAndBitshift+0xa8>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a32      	ldr	r2, [pc, #200]	; (8005aec <DMA_CalcBaseAndBitshift+0x144>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d013      	beq.n	8005a50 <DMA_CalcBaseAndBitshift+0xa8>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a30      	ldr	r2, [pc, #192]	; (8005af0 <DMA_CalcBaseAndBitshift+0x148>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00e      	beq.n	8005a50 <DMA_CalcBaseAndBitshift+0xa8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a2f      	ldr	r2, [pc, #188]	; (8005af4 <DMA_CalcBaseAndBitshift+0x14c>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d009      	beq.n	8005a50 <DMA_CalcBaseAndBitshift+0xa8>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a2d      	ldr	r2, [pc, #180]	; (8005af8 <DMA_CalcBaseAndBitshift+0x150>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <DMA_CalcBaseAndBitshift+0xa8>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a2c      	ldr	r2, [pc, #176]	; (8005afc <DMA_CalcBaseAndBitshift+0x154>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d101      	bne.n	8005a54 <DMA_CalcBaseAndBitshift+0xac>
 8005a50:	2301      	movs	r3, #1
 8005a52:	e000      	b.n	8005a56 <DMA_CalcBaseAndBitshift+0xae>
 8005a54:	2300      	movs	r3, #0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d024      	beq.n	8005aa4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	3b10      	subs	r3, #16
 8005a62:	4a27      	ldr	r2, [pc, #156]	; (8005b00 <DMA_CalcBaseAndBitshift+0x158>)
 8005a64:	fba2 2303 	umull	r2, r3, r2, r3
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	4a24      	ldr	r2, [pc, #144]	; (8005b04 <DMA_CalcBaseAndBitshift+0x15c>)
 8005a74:	5cd3      	ldrb	r3, [r2, r3]
 8005a76:	461a      	mov	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b03      	cmp	r3, #3
 8005a80:	d908      	bls.n	8005a94 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	4b1f      	ldr	r3, [pc, #124]	; (8005b08 <DMA_CalcBaseAndBitshift+0x160>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	1d1a      	adds	r2, r3, #4
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	659a      	str	r2, [r3, #88]	; 0x58
 8005a92:	e00d      	b.n	8005ab0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4b1b      	ldr	r3, [pc, #108]	; (8005b08 <DMA_CalcBaseAndBitshift+0x160>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8005aa2:	e005      	b.n	8005ab0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	40020010 	.word	0x40020010
 8005ac4:	40020028 	.word	0x40020028
 8005ac8:	40020040 	.word	0x40020040
 8005acc:	40020058 	.word	0x40020058
 8005ad0:	40020070 	.word	0x40020070
 8005ad4:	40020088 	.word	0x40020088
 8005ad8:	400200a0 	.word	0x400200a0
 8005adc:	400200b8 	.word	0x400200b8
 8005ae0:	40020410 	.word	0x40020410
 8005ae4:	40020428 	.word	0x40020428
 8005ae8:	40020440 	.word	0x40020440
 8005aec:	40020458 	.word	0x40020458
 8005af0:	40020470 	.word	0x40020470
 8005af4:	40020488 	.word	0x40020488
 8005af8:	400204a0 	.word	0x400204a0
 8005afc:	400204b8 	.word	0x400204b8
 8005b00:	aaaaaaab 	.word	0xaaaaaaab
 8005b04:	0800fca4 	.word	0x0800fca4
 8005b08:	fffffc00 	.word	0xfffffc00

08005b0c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d120      	bne.n	8005b62 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d858      	bhi.n	8005bda <DMA_CheckFifoParam+0xce>
 8005b28:	a201      	add	r2, pc, #4	; (adr r2, 8005b30 <DMA_CheckFifoParam+0x24>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005b41 	.word	0x08005b41
 8005b34:	08005b53 	.word	0x08005b53
 8005b38:	08005b41 	.word	0x08005b41
 8005b3c:	08005bdb 	.word	0x08005bdb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d048      	beq.n	8005bde <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b50:	e045      	b.n	8005bde <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b5a:	d142      	bne.n	8005be2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005b60:	e03f      	b.n	8005be2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b6a:	d123      	bne.n	8005bb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b70:	2b03      	cmp	r3, #3
 8005b72:	d838      	bhi.n	8005be6 <DMA_CheckFifoParam+0xda>
 8005b74:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <DMA_CheckFifoParam+0x70>)
 8005b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7a:	bf00      	nop
 8005b7c:	08005b8d 	.word	0x08005b8d
 8005b80:	08005b93 	.word	0x08005b93
 8005b84:	08005b8d 	.word	0x08005b8d
 8005b88:	08005ba5 	.word	0x08005ba5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	73fb      	strb	r3, [r7, #15]
        break;
 8005b90:	e030      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d025      	beq.n	8005bea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ba2:	e022      	b.n	8005bea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005bac:	d11f      	bne.n	8005bee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bb2:	e01c      	b.n	8005bee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d902      	bls.n	8005bc2 <DMA_CheckFifoParam+0xb6>
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d003      	beq.n	8005bc8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005bc0:	e018      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	73fb      	strb	r3, [r7, #15]
        break;
 8005bc6:	e015      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00e      	beq.n	8005bf2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8005bd8:	e00b      	b.n	8005bf2 <DMA_CheckFifoParam+0xe6>
        break;
 8005bda:	bf00      	nop
 8005bdc:	e00a      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>
        break;
 8005bde:	bf00      	nop
 8005be0:	e008      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>
        break;
 8005be2:	bf00      	nop
 8005be4:	e006      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>
        break;
 8005be6:	bf00      	nop
 8005be8:	e004      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>
        break;
 8005bea:	bf00      	nop
 8005bec:	e002      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>
        break;
 8005bee:	bf00      	nop
 8005bf0:	e000      	b.n	8005bf4 <DMA_CheckFifoParam+0xe8>
    break;
 8005bf2:	bf00      	nop
    }
  }

  return status;
 8005bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop

08005c04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a38      	ldr	r2, [pc, #224]	; (8005cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d022      	beq.n	8005c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a36      	ldr	r2, [pc, #216]	; (8005cfc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d01d      	beq.n	8005c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a35      	ldr	r2, [pc, #212]	; (8005d00 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d018      	beq.n	8005c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a33      	ldr	r2, [pc, #204]	; (8005d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d013      	beq.n	8005c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a32      	ldr	r2, [pc, #200]	; (8005d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00e      	beq.n	8005c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a30      	ldr	r2, [pc, #192]	; (8005d0c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d009      	beq.n	8005c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a2f      	ldr	r2, [pc, #188]	; (8005d10 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d004      	beq.n	8005c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a2d      	ldr	r2, [pc, #180]	; (8005d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d101      	bne.n	8005c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005c62:	2301      	movs	r3, #1
 8005c64:	e000      	b.n	8005c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005c66:	2300      	movs	r3, #0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d01a      	beq.n	8005ca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	3b08      	subs	r3, #8
 8005c74:	4a28      	ldr	r2, [pc, #160]	; (8005d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005c76:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7a:	091b      	lsrs	r3, r3, #4
 8005c7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	4b26      	ldr	r3, [pc, #152]	; (8005d1c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	461a      	mov	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a24      	ldr	r2, [pc, #144]	; (8005d20 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005c90:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f003 031f 	and.w	r3, r3, #31
 8005c98:	2201      	movs	r2, #1
 8005c9a:	409a      	lsls	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ca0:	e024      	b.n	8005cec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	3b10      	subs	r3, #16
 8005caa:	4a1e      	ldr	r2, [pc, #120]	; (8005d24 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005cac:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb0:	091b      	lsrs	r3, r3, #4
 8005cb2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4a1c      	ldr	r2, [pc, #112]	; (8005d28 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d806      	bhi.n	8005cca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4a1b      	ldr	r2, [pc, #108]	; (8005d2c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d902      	bls.n	8005cca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4b18      	ldr	r3, [pc, #96]	; (8005d30 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a16      	ldr	r2, [pc, #88]	; (8005d34 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005cdc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f003 031f 	and.w	r3, r3, #31
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	409a      	lsls	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005cec:	bf00      	nop
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	58025408 	.word	0x58025408
 8005cfc:	5802541c 	.word	0x5802541c
 8005d00:	58025430 	.word	0x58025430
 8005d04:	58025444 	.word	0x58025444
 8005d08:	58025458 	.word	0x58025458
 8005d0c:	5802546c 	.word	0x5802546c
 8005d10:	58025480 	.word	0x58025480
 8005d14:	58025494 	.word	0x58025494
 8005d18:	cccccccd 	.word	0xcccccccd
 8005d1c:	16009600 	.word	0x16009600
 8005d20:	58025880 	.word	0x58025880
 8005d24:	aaaaaaab 	.word	0xaaaaaaab
 8005d28:	400204b8 	.word	0x400204b8
 8005d2c:	4002040f 	.word	0x4002040f
 8005d30:	10008200 	.word	0x10008200
 8005d34:	40020880 	.word	0x40020880

08005d38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d04a      	beq.n	8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d847      	bhi.n	8005de4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a25      	ldr	r2, [pc, #148]	; (8005df0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d022      	beq.n	8005da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a24      	ldr	r2, [pc, #144]	; (8005df4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d01d      	beq.n	8005da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a22      	ldr	r2, [pc, #136]	; (8005df8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d018      	beq.n	8005da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a21      	ldr	r2, [pc, #132]	; (8005dfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d013      	beq.n	8005da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1f      	ldr	r2, [pc, #124]	; (8005e00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00e      	beq.n	8005da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1e      	ldr	r2, [pc, #120]	; (8005e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d009      	beq.n	8005da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1c      	ldr	r2, [pc, #112]	; (8005e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d004      	beq.n	8005da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a1b      	ldr	r2, [pc, #108]	; (8005e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d101      	bne.n	8005da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005da4:	2301      	movs	r3, #1
 8005da6:	e000      	b.n	8005daa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005da8:	2300      	movs	r3, #0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00a      	beq.n	8005dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4b17      	ldr	r3, [pc, #92]	; (8005e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	461a      	mov	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a15      	ldr	r2, [pc, #84]	; (8005e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005dc0:	671a      	str	r2, [r3, #112]	; 0x70
 8005dc2:	e009      	b.n	8005dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	4b14      	ldr	r3, [pc, #80]	; (8005e18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005dc8:	4413      	add	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	461a      	mov	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a11      	ldr	r2, [pc, #68]	; (8005e1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005dd6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	2201      	movs	r2, #1
 8005dde:	409a      	lsls	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005de4:	bf00      	nop
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	58025408 	.word	0x58025408
 8005df4:	5802541c 	.word	0x5802541c
 8005df8:	58025430 	.word	0x58025430
 8005dfc:	58025444 	.word	0x58025444
 8005e00:	58025458 	.word	0x58025458
 8005e04:	5802546c 	.word	0x5802546c
 8005e08:	58025480 	.word	0x58025480
 8005e0c:	58025494 	.word	0x58025494
 8005e10:	1600963f 	.word	0x1600963f
 8005e14:	58025940 	.word	0x58025940
 8005e18:	1000823f 	.word	0x1000823f
 8005e1c:	40020940 	.word	0x40020940

08005e20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b089      	sub	sp, #36	; 0x24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e2e:	4b89      	ldr	r3, [pc, #548]	; (8006054 <HAL_GPIO_Init+0x234>)
 8005e30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e32:	e194      	b.n	800615e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	2101      	movs	r1, #1
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e40:	4013      	ands	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 8186 	beq.w	8006158 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d00b      	beq.n	8005e6c <HAL_GPIO_Init+0x4c>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d007      	beq.n	8005e6c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005e60:	2b11      	cmp	r3, #17
 8005e62:	d003      	beq.n	8005e6c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	2b12      	cmp	r3, #18
 8005e6a:	d130      	bne.n	8005ece <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	2203      	movs	r2, #3
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4013      	ands	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eaa:	43db      	mvns	r3, r3
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	091b      	lsrs	r3, r3, #4
 8005eb8:	f003 0201 	and.w	r2, r3, #1
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	2203      	movs	r2, #3
 8005eda:	fa02 f303 	lsl.w	r3, r2, r3
 8005ede:	43db      	mvns	r3, r3
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d003      	beq.n	8005f0e <HAL_GPIO_Init+0xee>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b12      	cmp	r3, #18
 8005f0c:	d123      	bne.n	8005f56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	08da      	lsrs	r2, r3, #3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3208      	adds	r2, #8
 8005f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	220f      	movs	r2, #15
 8005f26:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2a:	43db      	mvns	r3, r3
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	691a      	ldr	r2, [r3, #16]
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	08da      	lsrs	r2, r3, #3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3208      	adds	r2, #8
 8005f50:	69b9      	ldr	r1, [r7, #24]
 8005f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	2203      	movs	r2, #3
 8005f62:	fa02 f303 	lsl.w	r3, r2, r3
 8005f66:	43db      	mvns	r3, r3
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f003 0203 	and.w	r2, r3, #3
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	005b      	lsls	r3, r3, #1
 8005f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 80e0 	beq.w	8006158 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f98:	4b2f      	ldr	r3, [pc, #188]	; (8006058 <HAL_GPIO_Init+0x238>)
 8005f9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f9e:	4a2e      	ldr	r2, [pc, #184]	; (8006058 <HAL_GPIO_Init+0x238>)
 8005fa0:	f043 0302 	orr.w	r3, r3, #2
 8005fa4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005fa8:	4b2b      	ldr	r3, [pc, #172]	; (8006058 <HAL_GPIO_Init+0x238>)
 8005faa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	60fb      	str	r3, [r7, #12]
 8005fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fb6:	4a29      	ldr	r2, [pc, #164]	; (800605c <HAL_GPIO_Init+0x23c>)
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	089b      	lsrs	r3, r3, #2
 8005fbc:	3302      	adds	r3, #2
 8005fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	220f      	movs	r2, #15
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	43db      	mvns	r3, r3
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a20      	ldr	r2, [pc, #128]	; (8006060 <HAL_GPIO_Init+0x240>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d052      	beq.n	8006088 <HAL_GPIO_Init+0x268>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a1f      	ldr	r2, [pc, #124]	; (8006064 <HAL_GPIO_Init+0x244>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d031      	beq.n	800604e <HAL_GPIO_Init+0x22e>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a1e      	ldr	r2, [pc, #120]	; (8006068 <HAL_GPIO_Init+0x248>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d02b      	beq.n	800604a <HAL_GPIO_Init+0x22a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a1d      	ldr	r2, [pc, #116]	; (800606c <HAL_GPIO_Init+0x24c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d025      	beq.n	8006046 <HAL_GPIO_Init+0x226>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a1c      	ldr	r2, [pc, #112]	; (8006070 <HAL_GPIO_Init+0x250>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d01f      	beq.n	8006042 <HAL_GPIO_Init+0x222>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a1b      	ldr	r2, [pc, #108]	; (8006074 <HAL_GPIO_Init+0x254>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d019      	beq.n	800603e <HAL_GPIO_Init+0x21e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a1a      	ldr	r2, [pc, #104]	; (8006078 <HAL_GPIO_Init+0x258>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d013      	beq.n	800603a <HAL_GPIO_Init+0x21a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a19      	ldr	r2, [pc, #100]	; (800607c <HAL_GPIO_Init+0x25c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00d      	beq.n	8006036 <HAL_GPIO_Init+0x216>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a18      	ldr	r2, [pc, #96]	; (8006080 <HAL_GPIO_Init+0x260>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d007      	beq.n	8006032 <HAL_GPIO_Init+0x212>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a17      	ldr	r2, [pc, #92]	; (8006084 <HAL_GPIO_Init+0x264>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d101      	bne.n	800602e <HAL_GPIO_Init+0x20e>
 800602a:	2309      	movs	r3, #9
 800602c:	e02d      	b.n	800608a <HAL_GPIO_Init+0x26a>
 800602e:	230a      	movs	r3, #10
 8006030:	e02b      	b.n	800608a <HAL_GPIO_Init+0x26a>
 8006032:	2308      	movs	r3, #8
 8006034:	e029      	b.n	800608a <HAL_GPIO_Init+0x26a>
 8006036:	2307      	movs	r3, #7
 8006038:	e027      	b.n	800608a <HAL_GPIO_Init+0x26a>
 800603a:	2306      	movs	r3, #6
 800603c:	e025      	b.n	800608a <HAL_GPIO_Init+0x26a>
 800603e:	2305      	movs	r3, #5
 8006040:	e023      	b.n	800608a <HAL_GPIO_Init+0x26a>
 8006042:	2304      	movs	r3, #4
 8006044:	e021      	b.n	800608a <HAL_GPIO_Init+0x26a>
 8006046:	2303      	movs	r3, #3
 8006048:	e01f      	b.n	800608a <HAL_GPIO_Init+0x26a>
 800604a:	2302      	movs	r3, #2
 800604c:	e01d      	b.n	800608a <HAL_GPIO_Init+0x26a>
 800604e:	2301      	movs	r3, #1
 8006050:	e01b      	b.n	800608a <HAL_GPIO_Init+0x26a>
 8006052:	bf00      	nop
 8006054:	58000080 	.word	0x58000080
 8006058:	58024400 	.word	0x58024400
 800605c:	58000400 	.word	0x58000400
 8006060:	58020000 	.word	0x58020000
 8006064:	58020400 	.word	0x58020400
 8006068:	58020800 	.word	0x58020800
 800606c:	58020c00 	.word	0x58020c00
 8006070:	58021000 	.word	0x58021000
 8006074:	58021400 	.word	0x58021400
 8006078:	58021800 	.word	0x58021800
 800607c:	58021c00 	.word	0x58021c00
 8006080:	58022000 	.word	0x58022000
 8006084:	58022400 	.word	0x58022400
 8006088:	2300      	movs	r3, #0
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	f002 0203 	and.w	r2, r2, #3
 8006090:	0092      	lsls	r2, r2, #2
 8006092:	4093      	lsls	r3, r2
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	4313      	orrs	r3, r2
 8006098:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800609a:	4938      	ldr	r1, [pc, #224]	; (800617c <HAL_GPIO_Init+0x35c>)
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	089b      	lsrs	r3, r3, #2
 80060a0:	3302      	adds	r3, #2
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	43db      	mvns	r3, r3
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	4013      	ands	r3, r2
 80060b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	43db      	mvns	r3, r3
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	4013      	ands	r3, r2
 80060e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	43db      	mvns	r3, r3
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	4013      	ands	r3, r2
 800610c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006122:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800612a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	43db      	mvns	r3, r3
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	4013      	ands	r3, r2
 800613a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006150:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	3301      	adds	r3, #1
 800615c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	fa22 f303 	lsr.w	r3, r2, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	f47f ae63 	bne.w	8005e34 <HAL_GPIO_Init+0x14>
  }
}
 800616e:	bf00      	nop
 8006170:	bf00      	nop
 8006172:	3724      	adds	r7, #36	; 0x24
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	58000400 	.word	0x58000400

08006180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	460b      	mov	r3, r1
 800618a:	807b      	strh	r3, [r7, #2]
 800618c:	4613      	mov	r3, r2
 800618e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006190:	787b      	ldrb	r3, [r7, #1]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006196:	887a      	ldrh	r2, [r7, #2]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800619c:	e003      	b.n	80061a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800619e:	887b      	ldrh	r3, [r7, #2]
 80061a0:	041a      	lsls	r2, r3, #16
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	619a      	str	r2, [r3, #24]
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b082      	sub	sp, #8
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	4603      	mov	r3, r0
 80061ba:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80061bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80061c4:	88fb      	ldrh	r3, [r7, #6]
 80061c6:	4013      	ands	r3, r2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d008      	beq.n	80061de <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80061cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80061d6:	88fb      	ldrh	r3, [r7, #6]
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fc f85d 	bl	8002298 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80061f0:	4b19      	ldr	r3, [pc, #100]	; (8006258 <HAL_PWREx_ConfigSupply+0x70>)
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0304 	and.w	r3, r3, #4
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d00a      	beq.n	8006212 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80061fc:	4b16      	ldr	r3, [pc, #88]	; (8006258 <HAL_PWREx_ConfigSupply+0x70>)
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	429a      	cmp	r2, r3
 8006208:	d001      	beq.n	800620e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e01f      	b.n	800624e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	e01d      	b.n	800624e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006212:	4b11      	ldr	r3, [pc, #68]	; (8006258 <HAL_PWREx_ConfigSupply+0x70>)
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f023 0207 	bic.w	r2, r3, #7
 800621a:	490f      	ldr	r1, [pc, #60]	; (8006258 <HAL_PWREx_ConfigSupply+0x70>)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4313      	orrs	r3, r2
 8006220:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006222:	f7fd f9a3 	bl	800356c <HAL_GetTick>
 8006226:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006228:	e009      	b.n	800623e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800622a:	f7fd f99f 	bl	800356c <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006238:	d901      	bls.n	800623e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e007      	b.n	800624e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800623e:	4b06      	ldr	r3, [pc, #24]	; (8006258 <HAL_PWREx_ConfigSupply+0x70>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800624a:	d1ee      	bne.n	800622a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	58024800 	.word	0x58024800

0800625c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08c      	sub	sp, #48	; 0x30
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e3ff      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 8087 	beq.w	800638a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800627c:	4b99      	ldr	r3, [pc, #612]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006284:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006286:	4b97      	ldr	r3, [pc, #604]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 8006288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	2b10      	cmp	r3, #16
 8006290:	d007      	beq.n	80062a2 <HAL_RCC_OscConfig+0x46>
 8006292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006294:	2b18      	cmp	r3, #24
 8006296:	d110      	bne.n	80062ba <HAL_RCC_OscConfig+0x5e>
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d10b      	bne.n	80062ba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062a2:	4b90      	ldr	r3, [pc, #576]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d06c      	beq.n	8006388 <HAL_RCC_OscConfig+0x12c>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d168      	bne.n	8006388 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e3d9      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c2:	d106      	bne.n	80062d2 <HAL_RCC_OscConfig+0x76>
 80062c4:	4b87      	ldr	r3, [pc, #540]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a86      	ldr	r2, [pc, #536]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 80062ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	e02e      	b.n	8006330 <HAL_RCC_OscConfig+0xd4>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10c      	bne.n	80062f4 <HAL_RCC_OscConfig+0x98>
 80062da:	4b82      	ldr	r3, [pc, #520]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a81      	ldr	r2, [pc, #516]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 80062e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	4b7f      	ldr	r3, [pc, #508]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a7e      	ldr	r2, [pc, #504]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 80062ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	e01d      	b.n	8006330 <HAL_RCC_OscConfig+0xd4>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062fc:	d10c      	bne.n	8006318 <HAL_RCC_OscConfig+0xbc>
 80062fe:	4b79      	ldr	r3, [pc, #484]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a78      	ldr	r2, [pc, #480]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 8006304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	4b76      	ldr	r3, [pc, #472]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a75      	ldr	r2, [pc, #468]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 8006310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	e00b      	b.n	8006330 <HAL_RCC_OscConfig+0xd4>
 8006318:	4b72      	ldr	r3, [pc, #456]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a71      	ldr	r2, [pc, #452]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 800631e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	4b6f      	ldr	r3, [pc, #444]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a6e      	ldr	r2, [pc, #440]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 800632a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800632e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d013      	beq.n	8006360 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006338:	f7fd f918 	bl	800356c <HAL_GetTick>
 800633c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006340:	f7fd f914 	bl	800356c <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b64      	cmp	r3, #100	; 0x64
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e38d      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006352:	4b64      	ldr	r3, [pc, #400]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0f0      	beq.n	8006340 <HAL_RCC_OscConfig+0xe4>
 800635e:	e014      	b.n	800638a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006360:	f7fd f904 	bl	800356c <HAL_GetTick>
 8006364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006366:	e008      	b.n	800637a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006368:	f7fd f900 	bl	800356c <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b64      	cmp	r3, #100	; 0x64
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e379      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800637a:	4b5a      	ldr	r3, [pc, #360]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1f0      	bne.n	8006368 <HAL_RCC_OscConfig+0x10c>
 8006386:	e000      	b.n	800638a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 80ae 	beq.w	80064f4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006398:	4b52      	ldr	r3, [pc, #328]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063a2:	4b50      	ldr	r3, [pc, #320]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d007      	beq.n	80063be <HAL_RCC_OscConfig+0x162>
 80063ae:	6a3b      	ldr	r3, [r7, #32]
 80063b0:	2b18      	cmp	r3, #24
 80063b2:	d13a      	bne.n	800642a <HAL_RCC_OscConfig+0x1ce>
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	f003 0303 	and.w	r3, r3, #3
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d135      	bne.n	800642a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063be:	4b49      	ldr	r3, [pc, #292]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0304 	and.w	r3, r3, #4
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d005      	beq.n	80063d6 <HAL_RCC_OscConfig+0x17a>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e34b      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063d6:	f7fd f8f9 	bl	80035cc <HAL_GetREVID>
 80063da:	4603      	mov	r3, r0
 80063dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d817      	bhi.n	8006414 <HAL_RCC_OscConfig+0x1b8>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	2b40      	cmp	r3, #64	; 0x40
 80063ea:	d108      	bne.n	80063fe <HAL_RCC_OscConfig+0x1a2>
 80063ec:	4b3d      	ldr	r3, [pc, #244]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80063f4:	4a3b      	ldr	r2, [pc, #236]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 80063f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063fa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063fc:	e07a      	b.n	80064f4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063fe:	4b39      	ldr	r3, [pc, #228]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	031b      	lsls	r3, r3, #12
 800640c:	4935      	ldr	r1, [pc, #212]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 800640e:	4313      	orrs	r3, r2
 8006410:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006412:	e06f      	b.n	80064f4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006414:	4b33      	ldr	r3, [pc, #204]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	061b      	lsls	r3, r3, #24
 8006422:	4930      	ldr	r1, [pc, #192]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 8006424:	4313      	orrs	r3, r2
 8006426:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006428:	e064      	b.n	80064f4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d045      	beq.n	80064be <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006432:	4b2c      	ldr	r3, [pc, #176]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f023 0219 	bic.w	r2, r3, #25
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	4929      	ldr	r1, [pc, #164]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 8006440:	4313      	orrs	r3, r2
 8006442:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006444:	f7fd f892 	bl	800356c <HAL_GetTick>
 8006448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800644c:	f7fd f88e 	bl	800356c <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e307      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800645e:	4b21      	ldr	r3, [pc, #132]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0304 	and.w	r3, r3, #4
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0f0      	beq.n	800644c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800646a:	f7fd f8af 	bl	80035cc <HAL_GetREVID>
 800646e:	4603      	mov	r3, r0
 8006470:	f241 0203 	movw	r2, #4099	; 0x1003
 8006474:	4293      	cmp	r3, r2
 8006476:	d817      	bhi.n	80064a8 <HAL_RCC_OscConfig+0x24c>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2b40      	cmp	r3, #64	; 0x40
 800647e:	d108      	bne.n	8006492 <HAL_RCC_OscConfig+0x236>
 8006480:	4b18      	ldr	r3, [pc, #96]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006488:	4a16      	ldr	r2, [pc, #88]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 800648a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800648e:	6053      	str	r3, [r2, #4]
 8006490:	e030      	b.n	80064f4 <HAL_RCC_OscConfig+0x298>
 8006492:	4b14      	ldr	r3, [pc, #80]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	031b      	lsls	r3, r3, #12
 80064a0:	4910      	ldr	r1, [pc, #64]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	604b      	str	r3, [r1, #4]
 80064a6:	e025      	b.n	80064f4 <HAL_RCC_OscConfig+0x298>
 80064a8:	4b0e      	ldr	r3, [pc, #56]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	061b      	lsls	r3, r3, #24
 80064b6:	490b      	ldr	r1, [pc, #44]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	604b      	str	r3, [r1, #4]
 80064bc:	e01a      	b.n	80064f4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064be:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a08      	ldr	r2, [pc, #32]	; (80064e4 <HAL_RCC_OscConfig+0x288>)
 80064c4:	f023 0301 	bic.w	r3, r3, #1
 80064c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ca:	f7fd f84f 	bl	800356c <HAL_GetTick>
 80064ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064d0:	e00a      	b.n	80064e8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064d2:	f7fd f84b 	bl	800356c <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d903      	bls.n	80064e8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e2c4      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
 80064e4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80064e8:	4ba4      	ldr	r3, [pc, #656]	; (800677c <HAL_RCC_OscConfig+0x520>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1ee      	bne.n	80064d2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0310 	and.w	r3, r3, #16
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 80a9 	beq.w	8006654 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006502:	4b9e      	ldr	r3, [pc, #632]	; (800677c <HAL_RCC_OscConfig+0x520>)
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800650a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800650c:	4b9b      	ldr	r3, [pc, #620]	; (800677c <HAL_RCC_OscConfig+0x520>)
 800650e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006510:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	2b08      	cmp	r3, #8
 8006516:	d007      	beq.n	8006528 <HAL_RCC_OscConfig+0x2cc>
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2b18      	cmp	r3, #24
 800651c:	d13a      	bne.n	8006594 <HAL_RCC_OscConfig+0x338>
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f003 0303 	and.w	r3, r3, #3
 8006524:	2b01      	cmp	r3, #1
 8006526:	d135      	bne.n	8006594 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006528:	4b94      	ldr	r3, [pc, #592]	; (800677c <HAL_RCC_OscConfig+0x520>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <HAL_RCC_OscConfig+0x2e4>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	2b80      	cmp	r3, #128	; 0x80
 800653a:	d001      	beq.n	8006540 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e296      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006540:	f7fd f844 	bl	80035cc <HAL_GetREVID>
 8006544:	4603      	mov	r3, r0
 8006546:	f241 0203 	movw	r2, #4099	; 0x1003
 800654a:	4293      	cmp	r3, r2
 800654c:	d817      	bhi.n	800657e <HAL_RCC_OscConfig+0x322>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	2b20      	cmp	r3, #32
 8006554:	d108      	bne.n	8006568 <HAL_RCC_OscConfig+0x30c>
 8006556:	4b89      	ldr	r3, [pc, #548]	; (800677c <HAL_RCC_OscConfig+0x520>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800655e:	4a87      	ldr	r2, [pc, #540]	; (800677c <HAL_RCC_OscConfig+0x520>)
 8006560:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006564:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006566:	e075      	b.n	8006654 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006568:	4b84      	ldr	r3, [pc, #528]	; (800677c <HAL_RCC_OscConfig+0x520>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	069b      	lsls	r3, r3, #26
 8006576:	4981      	ldr	r1, [pc, #516]	; (800677c <HAL_RCC_OscConfig+0x520>)
 8006578:	4313      	orrs	r3, r2
 800657a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800657c:	e06a      	b.n	8006654 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800657e:	4b7f      	ldr	r3, [pc, #508]	; (800677c <HAL_RCC_OscConfig+0x520>)
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	061b      	lsls	r3, r3, #24
 800658c:	497b      	ldr	r1, [pc, #492]	; (800677c <HAL_RCC_OscConfig+0x520>)
 800658e:	4313      	orrs	r3, r2
 8006590:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006592:	e05f      	b.n	8006654 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	69db      	ldr	r3, [r3, #28]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d042      	beq.n	8006622 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800659c:	4b77      	ldr	r3, [pc, #476]	; (800677c <HAL_RCC_OscConfig+0x520>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a76      	ldr	r2, [pc, #472]	; (800677c <HAL_RCC_OscConfig+0x520>)
 80065a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a8:	f7fc ffe0 	bl	800356c <HAL_GetTick>
 80065ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065ae:	e008      	b.n	80065c2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80065b0:	f7fc ffdc 	bl	800356c <HAL_GetTick>
 80065b4:	4602      	mov	r2, r0
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d901      	bls.n	80065c2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e255      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065c2:	4b6e      	ldr	r3, [pc, #440]	; (800677c <HAL_RCC_OscConfig+0x520>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0f0      	beq.n	80065b0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065ce:	f7fc fffd 	bl	80035cc <HAL_GetREVID>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80065d8:	4293      	cmp	r3, r2
 80065da:	d817      	bhi.n	800660c <HAL_RCC_OscConfig+0x3b0>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	d108      	bne.n	80065f6 <HAL_RCC_OscConfig+0x39a>
 80065e4:	4b65      	ldr	r3, [pc, #404]	; (800677c <HAL_RCC_OscConfig+0x520>)
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80065ec:	4a63      	ldr	r2, [pc, #396]	; (800677c <HAL_RCC_OscConfig+0x520>)
 80065ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065f2:	6053      	str	r3, [r2, #4]
 80065f4:	e02e      	b.n	8006654 <HAL_RCC_OscConfig+0x3f8>
 80065f6:	4b61      	ldr	r3, [pc, #388]	; (800677c <HAL_RCC_OscConfig+0x520>)
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	069b      	lsls	r3, r3, #26
 8006604:	495d      	ldr	r1, [pc, #372]	; (800677c <HAL_RCC_OscConfig+0x520>)
 8006606:	4313      	orrs	r3, r2
 8006608:	604b      	str	r3, [r1, #4]
 800660a:	e023      	b.n	8006654 <HAL_RCC_OscConfig+0x3f8>
 800660c:	4b5b      	ldr	r3, [pc, #364]	; (800677c <HAL_RCC_OscConfig+0x520>)
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	061b      	lsls	r3, r3, #24
 800661a:	4958      	ldr	r1, [pc, #352]	; (800677c <HAL_RCC_OscConfig+0x520>)
 800661c:	4313      	orrs	r3, r2
 800661e:	60cb      	str	r3, [r1, #12]
 8006620:	e018      	b.n	8006654 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006622:	4b56      	ldr	r3, [pc, #344]	; (800677c <HAL_RCC_OscConfig+0x520>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a55      	ldr	r2, [pc, #340]	; (800677c <HAL_RCC_OscConfig+0x520>)
 8006628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800662c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800662e:	f7fc ff9d 	bl	800356c <HAL_GetTick>
 8006632:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006634:	e008      	b.n	8006648 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006636:	f7fc ff99 	bl	800356c <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b02      	cmp	r3, #2
 8006642:	d901      	bls.n	8006648 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e212      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006648:	4b4c      	ldr	r3, [pc, #304]	; (800677c <HAL_RCC_OscConfig+0x520>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006650:	2b00      	cmp	r3, #0
 8006652:	d1f0      	bne.n	8006636 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b00      	cmp	r3, #0
 800665e:	d036      	beq.n	80066ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	695b      	ldr	r3, [r3, #20]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d019      	beq.n	800669c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006668:	4b44      	ldr	r3, [pc, #272]	; (800677c <HAL_RCC_OscConfig+0x520>)
 800666a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800666c:	4a43      	ldr	r2, [pc, #268]	; (800677c <HAL_RCC_OscConfig+0x520>)
 800666e:	f043 0301 	orr.w	r3, r3, #1
 8006672:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006674:	f7fc ff7a 	bl	800356c <HAL_GetTick>
 8006678:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800667a:	e008      	b.n	800668e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800667c:	f7fc ff76 	bl	800356c <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e1ef      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800668e:	4b3b      	ldr	r3, [pc, #236]	; (800677c <HAL_RCC_OscConfig+0x520>)
 8006690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0f0      	beq.n	800667c <HAL_RCC_OscConfig+0x420>
 800669a:	e018      	b.n	80066ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800669c:	4b37      	ldr	r3, [pc, #220]	; (800677c <HAL_RCC_OscConfig+0x520>)
 800669e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a0:	4a36      	ldr	r2, [pc, #216]	; (800677c <HAL_RCC_OscConfig+0x520>)
 80066a2:	f023 0301 	bic.w	r3, r3, #1
 80066a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066a8:	f7fc ff60 	bl	800356c <HAL_GetTick>
 80066ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066ae:	e008      	b.n	80066c2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066b0:	f7fc ff5c 	bl	800356c <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e1d5      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066c2:	4b2e      	ldr	r3, [pc, #184]	; (800677c <HAL_RCC_OscConfig+0x520>)
 80066c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1f0      	bne.n	80066b0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d036      	beq.n	8006748 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d019      	beq.n	8006716 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80066e2:	4b26      	ldr	r3, [pc, #152]	; (800677c <HAL_RCC_OscConfig+0x520>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a25      	ldr	r2, [pc, #148]	; (800677c <HAL_RCC_OscConfig+0x520>)
 80066e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80066ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066ee:	f7fc ff3d 	bl	800356c <HAL_GetTick>
 80066f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80066f4:	e008      	b.n	8006708 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80066f6:	f7fc ff39 	bl	800356c <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	2b02      	cmp	r3, #2
 8006702:	d901      	bls.n	8006708 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e1b2      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006708:	4b1c      	ldr	r3, [pc, #112]	; (800677c <HAL_RCC_OscConfig+0x520>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0f0      	beq.n	80066f6 <HAL_RCC_OscConfig+0x49a>
 8006714:	e018      	b.n	8006748 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006716:	4b19      	ldr	r3, [pc, #100]	; (800677c <HAL_RCC_OscConfig+0x520>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a18      	ldr	r2, [pc, #96]	; (800677c <HAL_RCC_OscConfig+0x520>)
 800671c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006720:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006722:	f7fc ff23 	bl	800356c <HAL_GetTick>
 8006726:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006728:	e008      	b.n	800673c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800672a:	f7fc ff1f 	bl	800356c <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d901      	bls.n	800673c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e198      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800673c:	4b0f      	ldr	r3, [pc, #60]	; (800677c <HAL_RCC_OscConfig+0x520>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1f0      	bne.n	800672a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8085 	beq.w	8006860 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006756:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <HAL_RCC_OscConfig+0x524>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a09      	ldr	r2, [pc, #36]	; (8006780 <HAL_RCC_OscConfig+0x524>)
 800675c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006760:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006762:	f7fc ff03 	bl	800356c <HAL_GetTick>
 8006766:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006768:	e00c      	b.n	8006784 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800676a:	f7fc feff 	bl	800356c <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b64      	cmp	r3, #100	; 0x64
 8006776:	d905      	bls.n	8006784 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e178      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
 800677c:	58024400 	.word	0x58024400
 8006780:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006784:	4b96      	ldr	r3, [pc, #600]	; (80069e0 <HAL_RCC_OscConfig+0x784>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678c:	2b00      	cmp	r3, #0
 800678e:	d0ec      	beq.n	800676a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d106      	bne.n	80067a6 <HAL_RCC_OscConfig+0x54a>
 8006798:	4b92      	ldr	r3, [pc, #584]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 800679a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800679c:	4a91      	ldr	r2, [pc, #580]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 800679e:	f043 0301 	orr.w	r3, r3, #1
 80067a2:	6713      	str	r3, [r2, #112]	; 0x70
 80067a4:	e02d      	b.n	8006802 <HAL_RCC_OscConfig+0x5a6>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10c      	bne.n	80067c8 <HAL_RCC_OscConfig+0x56c>
 80067ae:	4b8d      	ldr	r3, [pc, #564]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80067b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b2:	4a8c      	ldr	r2, [pc, #560]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80067b4:	f023 0301 	bic.w	r3, r3, #1
 80067b8:	6713      	str	r3, [r2, #112]	; 0x70
 80067ba:	4b8a      	ldr	r3, [pc, #552]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80067bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067be:	4a89      	ldr	r2, [pc, #548]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80067c0:	f023 0304 	bic.w	r3, r3, #4
 80067c4:	6713      	str	r3, [r2, #112]	; 0x70
 80067c6:	e01c      	b.n	8006802 <HAL_RCC_OscConfig+0x5a6>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	2b05      	cmp	r3, #5
 80067ce:	d10c      	bne.n	80067ea <HAL_RCC_OscConfig+0x58e>
 80067d0:	4b84      	ldr	r3, [pc, #528]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80067d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d4:	4a83      	ldr	r2, [pc, #524]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80067d6:	f043 0304 	orr.w	r3, r3, #4
 80067da:	6713      	str	r3, [r2, #112]	; 0x70
 80067dc:	4b81      	ldr	r3, [pc, #516]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80067de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e0:	4a80      	ldr	r2, [pc, #512]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80067e2:	f043 0301 	orr.w	r3, r3, #1
 80067e6:	6713      	str	r3, [r2, #112]	; 0x70
 80067e8:	e00b      	b.n	8006802 <HAL_RCC_OscConfig+0x5a6>
 80067ea:	4b7e      	ldr	r3, [pc, #504]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80067ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ee:	4a7d      	ldr	r2, [pc, #500]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80067f0:	f023 0301 	bic.w	r3, r3, #1
 80067f4:	6713      	str	r3, [r2, #112]	; 0x70
 80067f6:	4b7b      	ldr	r3, [pc, #492]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80067f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fa:	4a7a      	ldr	r2, [pc, #488]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80067fc:	f023 0304 	bic.w	r3, r3, #4
 8006800:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d015      	beq.n	8006836 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800680a:	f7fc feaf 	bl	800356c <HAL_GetTick>
 800680e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006810:	e00a      	b.n	8006828 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006812:	f7fc feab 	bl	800356c <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006820:	4293      	cmp	r3, r2
 8006822:	d901      	bls.n	8006828 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e122      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006828:	4b6e      	ldr	r3, [pc, #440]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 800682a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d0ee      	beq.n	8006812 <HAL_RCC_OscConfig+0x5b6>
 8006834:	e014      	b.n	8006860 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006836:	f7fc fe99 	bl	800356c <HAL_GetTick>
 800683a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800683c:	e00a      	b.n	8006854 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800683e:	f7fc fe95 	bl	800356c <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	f241 3288 	movw	r2, #5000	; 0x1388
 800684c:	4293      	cmp	r3, r2
 800684e:	d901      	bls.n	8006854 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e10c      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006854:	4b63      	ldr	r3, [pc, #396]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 8006856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1ee      	bne.n	800683e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 8101 	beq.w	8006a6c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800686a:	4b5e      	ldr	r3, [pc, #376]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006872:	2b18      	cmp	r3, #24
 8006874:	f000 80bc 	beq.w	80069f0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687c:	2b02      	cmp	r3, #2
 800687e:	f040 8095 	bne.w	80069ac <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006882:	4b58      	ldr	r3, [pc, #352]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a57      	ldr	r2, [pc, #348]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 8006888:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800688c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800688e:	f7fc fe6d 	bl	800356c <HAL_GetTick>
 8006892:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006894:	e008      	b.n	80068a8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006896:	f7fc fe69 	bl	800356c <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e0e2      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80068a8:	4b4e      	ldr	r3, [pc, #312]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1f0      	bne.n	8006896 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068b4:	4b4b      	ldr	r3, [pc, #300]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80068b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068b8:	4b4b      	ldr	r3, [pc, #300]	; (80069e8 <HAL_RCC_OscConfig+0x78c>)
 80068ba:	4013      	ands	r3, r2
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80068c4:	0112      	lsls	r2, r2, #4
 80068c6:	430a      	orrs	r2, r1
 80068c8:	4946      	ldr	r1, [pc, #280]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	628b      	str	r3, [r1, #40]	; 0x28
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d2:	3b01      	subs	r3, #1
 80068d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068dc:	3b01      	subs	r3, #1
 80068de:	025b      	lsls	r3, r3, #9
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e8:	3b01      	subs	r3, #1
 80068ea:	041b      	lsls	r3, r3, #16
 80068ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f6:	3b01      	subs	r3, #1
 80068f8:	061b      	lsls	r3, r3, #24
 80068fa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80068fe:	4939      	ldr	r1, [pc, #228]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 8006900:	4313      	orrs	r3, r2
 8006902:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006904:	4b37      	ldr	r3, [pc, #220]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006908:	4a36      	ldr	r2, [pc, #216]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 800690a:	f023 0301 	bic.w	r3, r3, #1
 800690e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006910:	4b34      	ldr	r3, [pc, #208]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 8006912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006914:	4b35      	ldr	r3, [pc, #212]	; (80069ec <HAL_RCC_OscConfig+0x790>)
 8006916:	4013      	ands	r3, r2
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800691c:	00d2      	lsls	r2, r2, #3
 800691e:	4931      	ldr	r1, [pc, #196]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 8006920:	4313      	orrs	r3, r2
 8006922:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006924:	4b2f      	ldr	r3, [pc, #188]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 8006926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006928:	f023 020c 	bic.w	r2, r3, #12
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006930:	492c      	ldr	r1, [pc, #176]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 8006932:	4313      	orrs	r3, r2
 8006934:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006936:	4b2b      	ldr	r3, [pc, #172]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 8006938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693a:	f023 0202 	bic.w	r2, r3, #2
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006942:	4928      	ldr	r1, [pc, #160]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 8006944:	4313      	orrs	r3, r2
 8006946:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006948:	4b26      	ldr	r3, [pc, #152]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 800694a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694c:	4a25      	ldr	r2, [pc, #148]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 800694e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006952:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006954:	4b23      	ldr	r3, [pc, #140]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 8006956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006958:	4a22      	ldr	r2, [pc, #136]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 800695a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800695e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006960:	4b20      	ldr	r3, [pc, #128]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	4a1f      	ldr	r2, [pc, #124]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 8006966:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800696a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800696c:	4b1d      	ldr	r3, [pc, #116]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	4a1c      	ldr	r2, [pc, #112]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 8006972:	f043 0301 	orr.w	r3, r3, #1
 8006976:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006978:	4b1a      	ldr	r3, [pc, #104]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a19      	ldr	r2, [pc, #100]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 800697e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006984:	f7fc fdf2 	bl	800356c <HAL_GetTick>
 8006988:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800698a:	e008      	b.n	800699e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800698c:	f7fc fdee 	bl	800356c <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e067      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800699e:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0f0      	beq.n	800698c <HAL_RCC_OscConfig+0x730>
 80069aa:	e05f      	b.n	8006a6c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ac:	4b0d      	ldr	r3, [pc, #52]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a0c      	ldr	r2, [pc, #48]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80069b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b8:	f7fc fdd8 	bl	800356c <HAL_GetTick>
 80069bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069c0:	f7fc fdd4 	bl	800356c <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e04d      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069d2:	4b04      	ldr	r3, [pc, #16]	; (80069e4 <HAL_RCC_OscConfig+0x788>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f0      	bne.n	80069c0 <HAL_RCC_OscConfig+0x764>
 80069de:	e045      	b.n	8006a6c <HAL_RCC_OscConfig+0x810>
 80069e0:	58024800 	.word	0x58024800
 80069e4:	58024400 	.word	0x58024400
 80069e8:	fffffc0c 	.word	0xfffffc0c
 80069ec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80069f0:	4b21      	ldr	r3, [pc, #132]	; (8006a78 <HAL_RCC_OscConfig+0x81c>)
 80069f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80069f6:	4b20      	ldr	r3, [pc, #128]	; (8006a78 <HAL_RCC_OscConfig+0x81c>)
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d031      	beq.n	8006a68 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f003 0203 	and.w	r2, r3, #3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d12a      	bne.n	8006a68 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	091b      	lsrs	r3, r3, #4
 8006a16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d122      	bne.n	8006a68 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d11a      	bne.n	8006a68 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	0a5b      	lsrs	r3, r3, #9
 8006a36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a3e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d111      	bne.n	8006a68 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	0c1b      	lsrs	r3, r3, #16
 8006a48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a50:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d108      	bne.n	8006a68 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	0e1b      	lsrs	r3, r3, #24
 8006a5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a62:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d001      	beq.n	8006a6c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e000      	b.n	8006a6e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3730      	adds	r7, #48	; 0x30
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	58024400 	.word	0x58024400

08006a7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e19c      	b.n	8006dca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a90:	4b8a      	ldr	r3, [pc, #552]	; (8006cbc <HAL_RCC_ClockConfig+0x240>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 030f 	and.w	r3, r3, #15
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d910      	bls.n	8006ac0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a9e:	4b87      	ldr	r3, [pc, #540]	; (8006cbc <HAL_RCC_ClockConfig+0x240>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f023 020f 	bic.w	r2, r3, #15
 8006aa6:	4985      	ldr	r1, [pc, #532]	; (8006cbc <HAL_RCC_ClockConfig+0x240>)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aae:	4b83      	ldr	r3, [pc, #524]	; (8006cbc <HAL_RCC_ClockConfig+0x240>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d001      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e184      	b.n	8006dca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d010      	beq.n	8006aee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	4b7b      	ldr	r3, [pc, #492]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d908      	bls.n	8006aee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006adc:	4b78      	ldr	r3, [pc, #480]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	4975      	ldr	r1, [pc, #468]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0308 	and.w	r3, r3, #8
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d010      	beq.n	8006b1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	695a      	ldr	r2, [r3, #20]
 8006afe:	4b70      	ldr	r3, [pc, #448]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d908      	bls.n	8006b1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006b0a:	4b6d      	ldr	r3, [pc, #436]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	496a      	ldr	r1, [pc, #424]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d010      	beq.n	8006b4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	699a      	ldr	r2, [r3, #24]
 8006b2c:	4b64      	ldr	r3, [pc, #400]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d908      	bls.n	8006b4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b38:	4b61      	ldr	r3, [pc, #388]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006b3a:	69db      	ldr	r3, [r3, #28]
 8006b3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	495e      	ldr	r1, [pc, #376]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d010      	beq.n	8006b78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	69da      	ldr	r2, [r3, #28]
 8006b5a:	4b59      	ldr	r3, [pc, #356]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d908      	bls.n	8006b78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006b66:	4b56      	ldr	r3, [pc, #344]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	4953      	ldr	r1, [pc, #332]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d010      	beq.n	8006ba6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68da      	ldr	r2, [r3, #12]
 8006b88:	4b4d      	ldr	r3, [pc, #308]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	f003 030f 	and.w	r3, r3, #15
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d908      	bls.n	8006ba6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b94:	4b4a      	ldr	r3, [pc, #296]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	f023 020f 	bic.w	r2, r3, #15
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	4947      	ldr	r1, [pc, #284]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d055      	beq.n	8006c5e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006bb2:	4b43      	ldr	r3, [pc, #268]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	4940      	ldr	r1, [pc, #256]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d107      	bne.n	8006bdc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bcc:	4b3c      	ldr	r3, [pc, #240]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d121      	bne.n	8006c1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e0f6      	b.n	8006dca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d107      	bne.n	8006bf4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006be4:	4b36      	ldr	r3, [pc, #216]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d115      	bne.n	8006c1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e0ea      	b.n	8006dca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d107      	bne.n	8006c0c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006bfc:	4b30      	ldr	r3, [pc, #192]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d109      	bne.n	8006c1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e0de      	b.n	8006dca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006c0c:	4b2c      	ldr	r3, [pc, #176]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0304 	and.w	r3, r3, #4
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e0d6      	b.n	8006dca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c1c:	4b28      	ldr	r3, [pc, #160]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	f023 0207 	bic.w	r2, r3, #7
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	4925      	ldr	r1, [pc, #148]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c2e:	f7fc fc9d 	bl	800356c <HAL_GetTick>
 8006c32:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c34:	e00a      	b.n	8006c4c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c36:	f7fc fc99 	bl	800356c <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e0be      	b.n	8006dca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c4c:	4b1c      	ldr	r3, [pc, #112]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d1eb      	bne.n	8006c36 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d010      	beq.n	8006c8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	4b14      	ldr	r3, [pc, #80]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	f003 030f 	and.w	r3, r3, #15
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d208      	bcs.n	8006c8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c7a:	4b11      	ldr	r3, [pc, #68]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	f023 020f 	bic.w	r2, r3, #15
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	490e      	ldr	r1, [pc, #56]	; (8006cc0 <HAL_RCC_ClockConfig+0x244>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c8c:	4b0b      	ldr	r3, [pc, #44]	; (8006cbc <HAL_RCC_ClockConfig+0x240>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 030f 	and.w	r3, r3, #15
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d214      	bcs.n	8006cc4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c9a:	4b08      	ldr	r3, [pc, #32]	; (8006cbc <HAL_RCC_ClockConfig+0x240>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f023 020f 	bic.w	r2, r3, #15
 8006ca2:	4906      	ldr	r1, [pc, #24]	; (8006cbc <HAL_RCC_ClockConfig+0x240>)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006caa:	4b04      	ldr	r3, [pc, #16]	; (8006cbc <HAL_RCC_ClockConfig+0x240>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 030f 	and.w	r3, r3, #15
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d005      	beq.n	8006cc4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e086      	b.n	8006dca <HAL_RCC_ClockConfig+0x34e>
 8006cbc:	52002000 	.word	0x52002000
 8006cc0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d010      	beq.n	8006cf2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	4b3f      	ldr	r3, [pc, #252]	; (8006dd4 <HAL_RCC_ClockConfig+0x358>)
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d208      	bcs.n	8006cf2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ce0:	4b3c      	ldr	r3, [pc, #240]	; (8006dd4 <HAL_RCC_ClockConfig+0x358>)
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	4939      	ldr	r1, [pc, #228]	; (8006dd4 <HAL_RCC_ClockConfig+0x358>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0308 	and.w	r3, r3, #8
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d010      	beq.n	8006d20 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695a      	ldr	r2, [r3, #20]
 8006d02:	4b34      	ldr	r3, [pc, #208]	; (8006dd4 <HAL_RCC_ClockConfig+0x358>)
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d208      	bcs.n	8006d20 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006d0e:	4b31      	ldr	r3, [pc, #196]	; (8006dd4 <HAL_RCC_ClockConfig+0x358>)
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	492e      	ldr	r1, [pc, #184]	; (8006dd4 <HAL_RCC_ClockConfig+0x358>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0310 	and.w	r3, r3, #16
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d010      	beq.n	8006d4e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	699a      	ldr	r2, [r3, #24]
 8006d30:	4b28      	ldr	r3, [pc, #160]	; (8006dd4 <HAL_RCC_ClockConfig+0x358>)
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d208      	bcs.n	8006d4e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d3c:	4b25      	ldr	r3, [pc, #148]	; (8006dd4 <HAL_RCC_ClockConfig+0x358>)
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	4922      	ldr	r1, [pc, #136]	; (8006dd4 <HAL_RCC_ClockConfig+0x358>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0320 	and.w	r3, r3, #32
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d010      	beq.n	8006d7c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	69da      	ldr	r2, [r3, #28]
 8006d5e:	4b1d      	ldr	r3, [pc, #116]	; (8006dd4 <HAL_RCC_ClockConfig+0x358>)
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d208      	bcs.n	8006d7c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006d6a:	4b1a      	ldr	r3, [pc, #104]	; (8006dd4 <HAL_RCC_ClockConfig+0x358>)
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	4917      	ldr	r1, [pc, #92]	; (8006dd4 <HAL_RCC_ClockConfig+0x358>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d7c:	f000 f834 	bl	8006de8 <HAL_RCC_GetSysClockFreq>
 8006d80:	4602      	mov	r2, r0
 8006d82:	4b14      	ldr	r3, [pc, #80]	; (8006dd4 <HAL_RCC_ClockConfig+0x358>)
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	0a1b      	lsrs	r3, r3, #8
 8006d88:	f003 030f 	and.w	r3, r3, #15
 8006d8c:	4912      	ldr	r1, [pc, #72]	; (8006dd8 <HAL_RCC_ClockConfig+0x35c>)
 8006d8e:	5ccb      	ldrb	r3, [r1, r3]
 8006d90:	f003 031f 	and.w	r3, r3, #31
 8006d94:	fa22 f303 	lsr.w	r3, r2, r3
 8006d98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d9a:	4b0e      	ldr	r3, [pc, #56]	; (8006dd4 <HAL_RCC_ClockConfig+0x358>)
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	f003 030f 	and.w	r3, r3, #15
 8006da2:	4a0d      	ldr	r2, [pc, #52]	; (8006dd8 <HAL_RCC_ClockConfig+0x35c>)
 8006da4:	5cd3      	ldrb	r3, [r2, r3]
 8006da6:	f003 031f 	and.w	r3, r3, #31
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	fa22 f303 	lsr.w	r3, r2, r3
 8006db0:	4a0a      	ldr	r2, [pc, #40]	; (8006ddc <HAL_RCC_ClockConfig+0x360>)
 8006db2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006db4:	4a0a      	ldr	r2, [pc, #40]	; (8006de0 <HAL_RCC_ClockConfig+0x364>)
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006dba:	4b0a      	ldr	r3, [pc, #40]	; (8006de4 <HAL_RCC_ClockConfig+0x368>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fc fb8a 	bl	80034d8 <HAL_InitTick>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	58024400 	.word	0x58024400
 8006dd8:	0800fc94 	.word	0x0800fc94
 8006ddc:	2000000c 	.word	0x2000000c
 8006de0:	20000008 	.word	0x20000008
 8006de4:	20000010 	.word	0x20000010

08006de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b089      	sub	sp, #36	; 0x24
 8006dec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dee:	4bb3      	ldr	r3, [pc, #716]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006df6:	2b18      	cmp	r3, #24
 8006df8:	f200 8155 	bhi.w	80070a6 <HAL_RCC_GetSysClockFreq+0x2be>
 8006dfc:	a201      	add	r2, pc, #4	; (adr r2, 8006e04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e02:	bf00      	nop
 8006e04:	08006e69 	.word	0x08006e69
 8006e08:	080070a7 	.word	0x080070a7
 8006e0c:	080070a7 	.word	0x080070a7
 8006e10:	080070a7 	.word	0x080070a7
 8006e14:	080070a7 	.word	0x080070a7
 8006e18:	080070a7 	.word	0x080070a7
 8006e1c:	080070a7 	.word	0x080070a7
 8006e20:	080070a7 	.word	0x080070a7
 8006e24:	08006e8f 	.word	0x08006e8f
 8006e28:	080070a7 	.word	0x080070a7
 8006e2c:	080070a7 	.word	0x080070a7
 8006e30:	080070a7 	.word	0x080070a7
 8006e34:	080070a7 	.word	0x080070a7
 8006e38:	080070a7 	.word	0x080070a7
 8006e3c:	080070a7 	.word	0x080070a7
 8006e40:	080070a7 	.word	0x080070a7
 8006e44:	08006e95 	.word	0x08006e95
 8006e48:	080070a7 	.word	0x080070a7
 8006e4c:	080070a7 	.word	0x080070a7
 8006e50:	080070a7 	.word	0x080070a7
 8006e54:	080070a7 	.word	0x080070a7
 8006e58:	080070a7 	.word	0x080070a7
 8006e5c:	080070a7 	.word	0x080070a7
 8006e60:	080070a7 	.word	0x080070a7
 8006e64:	08006e9b 	.word	0x08006e9b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e68:	4b94      	ldr	r3, [pc, #592]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0320 	and.w	r3, r3, #32
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d009      	beq.n	8006e88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e74:	4b91      	ldr	r3, [pc, #580]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	08db      	lsrs	r3, r3, #3
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	4a90      	ldr	r2, [pc, #576]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e80:	fa22 f303 	lsr.w	r3, r2, r3
 8006e84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006e86:	e111      	b.n	80070ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006e88:	4b8d      	ldr	r3, [pc, #564]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e8a:	61bb      	str	r3, [r7, #24]
    break;
 8006e8c:	e10e      	b.n	80070ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006e8e:	4b8d      	ldr	r3, [pc, #564]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e90:	61bb      	str	r3, [r7, #24]
    break;
 8006e92:	e10b      	b.n	80070ac <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006e94:	4b8c      	ldr	r3, [pc, #560]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006e96:	61bb      	str	r3, [r7, #24]
    break;
 8006e98:	e108      	b.n	80070ac <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e9a:	4b88      	ldr	r3, [pc, #544]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006ea4:	4b85      	ldr	r3, [pc, #532]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea8:	091b      	lsrs	r3, r3, #4
 8006eaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006eb0:	4b82      	ldr	r3, [pc, #520]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006eba:	4b80      	ldr	r3, [pc, #512]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ebe:	08db      	lsrs	r3, r3, #3
 8006ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	fb02 f303 	mul.w	r3, r2, r3
 8006eca:	ee07 3a90 	vmov	s15, r3
 8006ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	f000 80e1 	beq.w	80070a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	f000 8083 	beq.w	8006fec <HAL_RCC_GetSysClockFreq+0x204>
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	f200 80a1 	bhi.w	8007030 <HAL_RCC_GetSysClockFreq+0x248>
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <HAL_RCC_GetSysClockFreq+0x114>
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d056      	beq.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006efa:	e099      	b.n	8007030 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006efc:	4b6f      	ldr	r3, [pc, #444]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0320 	and.w	r3, r3, #32
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d02d      	beq.n	8006f64 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f08:	4b6c      	ldr	r3, [pc, #432]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	08db      	lsrs	r3, r3, #3
 8006f0e:	f003 0303 	and.w	r3, r3, #3
 8006f12:	4a6b      	ldr	r2, [pc, #428]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f14:	fa22 f303 	lsr.w	r3, r2, r3
 8006f18:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	ee07 3a90 	vmov	s15, r3
 8006f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f32:	4b62      	ldr	r3, [pc, #392]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f46:	eddf 5a61 	vldr	s11, [pc, #388]	; 80070cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006f62:	e087      	b.n	8007074 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80070d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f76:	4b51      	ldr	r3, [pc, #324]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f8a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80070cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fa6:	e065      	b.n	8007074 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	ee07 3a90 	vmov	s15, r3
 8006fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fb2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80070d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fba:	4b40      	ldr	r3, [pc, #256]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc2:	ee07 3a90 	vmov	s15, r3
 8006fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80070cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fea:	e043      	b.n	8007074 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80070d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffe:	4b2f      	ldr	r3, [pc, #188]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007012:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80070cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8007016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800701a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800702a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800702e:	e021      	b.n	8007074 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	ee07 3a90 	vmov	s15, r3
 8007036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80070d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800703e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007042:	4b1e      	ldr	r3, [pc, #120]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007052:	ed97 6a02 	vldr	s12, [r7, #8]
 8007056:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80070cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800705a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800706a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007072:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007074:	4b11      	ldr	r3, [pc, #68]	; (80070bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007078:	0a5b      	lsrs	r3, r3, #9
 800707a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800707e:	3301      	adds	r3, #1
 8007080:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	ee07 3a90 	vmov	s15, r3
 8007088:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800708c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007090:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007098:	ee17 3a90 	vmov	r3, s15
 800709c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800709e:	e005      	b.n	80070ac <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	61bb      	str	r3, [r7, #24]
    break;
 80070a4:	e002      	b.n	80070ac <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80070a6:	4b07      	ldr	r3, [pc, #28]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80070a8:	61bb      	str	r3, [r7, #24]
    break;
 80070aa:	bf00      	nop
  }

  return sysclockfreq;
 80070ac:	69bb      	ldr	r3, [r7, #24]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3724      	adds	r7, #36	; 0x24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	58024400 	.word	0x58024400
 80070c0:	03d09000 	.word	0x03d09000
 80070c4:	003d0900 	.word	0x003d0900
 80070c8:	02dc6c00 	.word	0x02dc6c00
 80070cc:	46000000 	.word	0x46000000
 80070d0:	4c742400 	.word	0x4c742400
 80070d4:	4a742400 	.word	0x4a742400
 80070d8:	4c371b00 	.word	0x4c371b00

080070dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80070e2:	f7ff fe81 	bl	8006de8 <HAL_RCC_GetSysClockFreq>
 80070e6:	4602      	mov	r2, r0
 80070e8:	4b10      	ldr	r3, [pc, #64]	; (800712c <HAL_RCC_GetHCLKFreq+0x50>)
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	0a1b      	lsrs	r3, r3, #8
 80070ee:	f003 030f 	and.w	r3, r3, #15
 80070f2:	490f      	ldr	r1, [pc, #60]	; (8007130 <HAL_RCC_GetHCLKFreq+0x54>)
 80070f4:	5ccb      	ldrb	r3, [r1, r3]
 80070f6:	f003 031f 	and.w	r3, r3, #31
 80070fa:	fa22 f303 	lsr.w	r3, r2, r3
 80070fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007100:	4b0a      	ldr	r3, [pc, #40]	; (800712c <HAL_RCC_GetHCLKFreq+0x50>)
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	f003 030f 	and.w	r3, r3, #15
 8007108:	4a09      	ldr	r2, [pc, #36]	; (8007130 <HAL_RCC_GetHCLKFreq+0x54>)
 800710a:	5cd3      	ldrb	r3, [r2, r3]
 800710c:	f003 031f 	and.w	r3, r3, #31
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	fa22 f303 	lsr.w	r3, r2, r3
 8007116:	4a07      	ldr	r2, [pc, #28]	; (8007134 <HAL_RCC_GetHCLKFreq+0x58>)
 8007118:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800711a:	4a07      	ldr	r2, [pc, #28]	; (8007138 <HAL_RCC_GetHCLKFreq+0x5c>)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007120:	4b04      	ldr	r3, [pc, #16]	; (8007134 <HAL_RCC_GetHCLKFreq+0x58>)
 8007122:	681b      	ldr	r3, [r3, #0]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	58024400 	.word	0x58024400
 8007130:	0800fc94 	.word	0x0800fc94
 8007134:	2000000c 	.word	0x2000000c
 8007138:	20000008 	.word	0x20000008

0800713c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007140:	f7ff ffcc 	bl	80070dc <HAL_RCC_GetHCLKFreq>
 8007144:	4602      	mov	r2, r0
 8007146:	4b06      	ldr	r3, [pc, #24]	; (8007160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	091b      	lsrs	r3, r3, #4
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	4904      	ldr	r1, [pc, #16]	; (8007164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007152:	5ccb      	ldrb	r3, [r1, r3]
 8007154:	f003 031f 	and.w	r3, r3, #31
 8007158:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800715c:	4618      	mov	r0, r3
 800715e:	bd80      	pop	{r7, pc}
 8007160:	58024400 	.word	0x58024400
 8007164:	0800fc94 	.word	0x0800fc94

08007168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800716c:	f7ff ffb6 	bl	80070dc <HAL_RCC_GetHCLKFreq>
 8007170:	4602      	mov	r2, r0
 8007172:	4b06      	ldr	r3, [pc, #24]	; (800718c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007174:	69db      	ldr	r3, [r3, #28]
 8007176:	0a1b      	lsrs	r3, r3, #8
 8007178:	f003 0307 	and.w	r3, r3, #7
 800717c:	4904      	ldr	r1, [pc, #16]	; (8007190 <HAL_RCC_GetPCLK2Freq+0x28>)
 800717e:	5ccb      	ldrb	r3, [r1, r3]
 8007180:	f003 031f 	and.w	r3, r3, #31
 8007184:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007188:	4618      	mov	r0, r3
 800718a:	bd80      	pop	{r7, pc}
 800718c:	58024400 	.word	0x58024400
 8007190:	0800fc94 	.word	0x0800fc94

08007194 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800719c:	2300      	movs	r3, #0
 800719e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80071a0:	2300      	movs	r3, #0
 80071a2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d03f      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071b8:	d02a      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80071ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071be:	d824      	bhi.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80071c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071c4:	d018      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80071c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071ca:	d81e      	bhi.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80071d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071d4:	d007      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80071d6:	e018      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071d8:	4bab      	ldr	r3, [pc, #684]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	4aaa      	ldr	r2, [pc, #680]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071e4:	e015      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	3304      	adds	r3, #4
 80071ea:	2102      	movs	r1, #2
 80071ec:	4618      	mov	r0, r3
 80071ee:	f001 f9cf 	bl	8008590 <RCCEx_PLL2_Config>
 80071f2:	4603      	mov	r3, r0
 80071f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80071f6:	e00c      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3324      	adds	r3, #36	; 0x24
 80071fc:	2102      	movs	r1, #2
 80071fe:	4618      	mov	r0, r3
 8007200:	f001 fa78 	bl	80086f4 <RCCEx_PLL3_Config>
 8007204:	4603      	mov	r3, r0
 8007206:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007208:	e003      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	75fb      	strb	r3, [r7, #23]
      break;
 800720e:	e000      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d109      	bne.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007218:	4b9b      	ldr	r3, [pc, #620]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800721a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007224:	4998      	ldr	r1, [pc, #608]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007226:	4313      	orrs	r3, r2
 8007228:	650b      	str	r3, [r1, #80]	; 0x50
 800722a:	e001      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722c:	7dfb      	ldrb	r3, [r7, #23]
 800722e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007238:	2b00      	cmp	r3, #0
 800723a:	d03d      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007240:	2b04      	cmp	r3, #4
 8007242:	d826      	bhi.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007244:	a201      	add	r2, pc, #4	; (adr r2, 800724c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724a:	bf00      	nop
 800724c:	08007261 	.word	0x08007261
 8007250:	0800726f 	.word	0x0800726f
 8007254:	08007281 	.word	0x08007281
 8007258:	08007299 	.word	0x08007299
 800725c:	08007299 	.word	0x08007299
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007260:	4b89      	ldr	r3, [pc, #548]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007264:	4a88      	ldr	r2, [pc, #544]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800726a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800726c:	e015      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	3304      	adds	r3, #4
 8007272:	2100      	movs	r1, #0
 8007274:	4618      	mov	r0, r3
 8007276:	f001 f98b 	bl	8008590 <RCCEx_PLL2_Config>
 800727a:	4603      	mov	r3, r0
 800727c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800727e:	e00c      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	3324      	adds	r3, #36	; 0x24
 8007284:	2100      	movs	r1, #0
 8007286:	4618      	mov	r0, r3
 8007288:	f001 fa34 	bl	80086f4 <RCCEx_PLL3_Config>
 800728c:	4603      	mov	r3, r0
 800728e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007290:	e003      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	75fb      	strb	r3, [r7, #23]
      break;
 8007296:	e000      	b.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800729a:	7dfb      	ldrb	r3, [r7, #23]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d109      	bne.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80072a0:	4b79      	ldr	r3, [pc, #484]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a4:	f023 0207 	bic.w	r2, r3, #7
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ac:	4976      	ldr	r1, [pc, #472]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072ae:	4313      	orrs	r3, r2
 80072b0:	650b      	str	r3, [r1, #80]	; 0x50
 80072b2:	e001      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
 80072b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d042      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072cc:	d02b      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80072ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d2:	d825      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80072d4:	2bc0      	cmp	r3, #192	; 0xc0
 80072d6:	d028      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80072d8:	2bc0      	cmp	r3, #192	; 0xc0
 80072da:	d821      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80072dc:	2b80      	cmp	r3, #128	; 0x80
 80072de:	d016      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80072e0:	2b80      	cmp	r3, #128	; 0x80
 80072e2:	d81d      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80072e8:	2b40      	cmp	r3, #64	; 0x40
 80072ea:	d007      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x168>
 80072ec:	e018      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ee:	4b66      	ldr	r3, [pc, #408]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f2:	4a65      	ldr	r2, [pc, #404]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80072fa:	e017      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3304      	adds	r3, #4
 8007300:	2100      	movs	r1, #0
 8007302:	4618      	mov	r0, r3
 8007304:	f001 f944 	bl	8008590 <RCCEx_PLL2_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800730c:	e00e      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	3324      	adds	r3, #36	; 0x24
 8007312:	2100      	movs	r1, #0
 8007314:	4618      	mov	r0, r3
 8007316:	f001 f9ed 	bl	80086f4 <RCCEx_PLL3_Config>
 800731a:	4603      	mov	r3, r0
 800731c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800731e:	e005      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	75fb      	strb	r3, [r7, #23]
      break;
 8007324:	e002      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007326:	bf00      	nop
 8007328:	e000      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800732a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800732c:	7dfb      	ldrb	r3, [r7, #23]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d109      	bne.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007332:	4b55      	ldr	r3, [pc, #340]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007336:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800733e:	4952      	ldr	r1, [pc, #328]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007340:	4313      	orrs	r3, r2
 8007342:	650b      	str	r3, [r1, #80]	; 0x50
 8007344:	e001      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007346:	7dfb      	ldrb	r3, [r7, #23]
 8007348:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007352:	2b00      	cmp	r3, #0
 8007354:	d049      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800735c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007360:	d030      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007362:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007366:	d82a      	bhi.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007368:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800736c:	d02c      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800736e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007372:	d824      	bhi.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007374:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007378:	d018      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x218>
 800737a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800737e:	d81e      	bhi.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007384:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007388:	d007      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800738a:	e018      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800738c:	4b3e      	ldr	r3, [pc, #248]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	4a3d      	ldr	r2, [pc, #244]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007396:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007398:	e017      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	3304      	adds	r3, #4
 800739e:	2100      	movs	r1, #0
 80073a0:	4618      	mov	r0, r3
 80073a2:	f001 f8f5 	bl	8008590 <RCCEx_PLL2_Config>
 80073a6:	4603      	mov	r3, r0
 80073a8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80073aa:	e00e      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	3324      	adds	r3, #36	; 0x24
 80073b0:	2100      	movs	r1, #0
 80073b2:	4618      	mov	r0, r3
 80073b4:	f001 f99e 	bl	80086f4 <RCCEx_PLL3_Config>
 80073b8:	4603      	mov	r3, r0
 80073ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073bc:	e005      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	75fb      	strb	r3, [r7, #23]
      break;
 80073c2:	e002      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80073c4:	bf00      	nop
 80073c6:	e000      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80073c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073ca:	7dfb      	ldrb	r3, [r7, #23]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10a      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80073d0:	4b2d      	ldr	r3, [pc, #180]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073d4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80073de:	492a      	ldr	r1, [pc, #168]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	658b      	str	r3, [r1, #88]	; 0x58
 80073e4:	e001      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
 80073e8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d04c      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80073fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007400:	d030      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007402:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007406:	d82a      	bhi.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007408:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800740c:	d02c      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800740e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007412:	d824      	bhi.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007414:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007418:	d018      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800741a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800741e:	d81e      	bhi.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007428:	d007      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800742a:	e018      	b.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800742c:	4b16      	ldr	r3, [pc, #88]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800742e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007430:	4a15      	ldr	r2, [pc, #84]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007436:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007438:	e017      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3304      	adds	r3, #4
 800743e:	2100      	movs	r1, #0
 8007440:	4618      	mov	r0, r3
 8007442:	f001 f8a5 	bl	8008590 <RCCEx_PLL2_Config>
 8007446:	4603      	mov	r3, r0
 8007448:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800744a:	e00e      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3324      	adds	r3, #36	; 0x24
 8007450:	2100      	movs	r1, #0
 8007452:	4618      	mov	r0, r3
 8007454:	f001 f94e 	bl	80086f4 <RCCEx_PLL3_Config>
 8007458:	4603      	mov	r3, r0
 800745a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800745c:	e005      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	75fb      	strb	r3, [r7, #23]
      break;
 8007462:	e002      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007464:	bf00      	nop
 8007466:	e000      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800746a:	7dfb      	ldrb	r3, [r7, #23]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10d      	bne.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007470:	4b05      	ldr	r3, [pc, #20]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007474:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800747e:	4902      	ldr	r1, [pc, #8]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007480:	4313      	orrs	r3, r2
 8007482:	658b      	str	r3, [r1, #88]	; 0x58
 8007484:	e004      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007486:	bf00      	nop
 8007488:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800748c:	7dfb      	ldrb	r3, [r7, #23]
 800748e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d032      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074a0:	2b30      	cmp	r3, #48	; 0x30
 80074a2:	d01c      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80074a4:	2b30      	cmp	r3, #48	; 0x30
 80074a6:	d817      	bhi.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80074a8:	2b20      	cmp	r3, #32
 80074aa:	d00c      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80074ac:	2b20      	cmp	r3, #32
 80074ae:	d813      	bhi.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d016      	beq.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80074b4:	2b10      	cmp	r3, #16
 80074b6:	d10f      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074b8:	4baf      	ldr	r3, [pc, #700]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	4aae      	ldr	r2, [pc, #696]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80074c4:	e00e      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3304      	adds	r3, #4
 80074ca:	2102      	movs	r1, #2
 80074cc:	4618      	mov	r0, r3
 80074ce:	f001 f85f 	bl	8008590 <RCCEx_PLL2_Config>
 80074d2:	4603      	mov	r3, r0
 80074d4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80074d6:	e005      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	75fb      	strb	r3, [r7, #23]
      break;
 80074dc:	e002      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80074de:	bf00      	nop
 80074e0:	e000      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80074e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d109      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80074ea:	4ba3      	ldr	r3, [pc, #652]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f6:	49a0      	ldr	r1, [pc, #640]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80074fc:	e001      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
 8007500:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d047      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007512:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007516:	d030      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007518:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800751c:	d82a      	bhi.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800751e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007522:	d02c      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007524:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007528:	d824      	bhi.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800752a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800752e:	d018      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007534:	d81e      	bhi.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800753a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800753e:	d007      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007540:	e018      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007542:	4b8d      	ldr	r3, [pc, #564]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007546:	4a8c      	ldr	r2, [pc, #560]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800754c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800754e:	e017      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3304      	adds	r3, #4
 8007554:	2100      	movs	r1, #0
 8007556:	4618      	mov	r0, r3
 8007558:	f001 f81a 	bl	8008590 <RCCEx_PLL2_Config>
 800755c:	4603      	mov	r3, r0
 800755e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007560:	e00e      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	3324      	adds	r3, #36	; 0x24
 8007566:	2100      	movs	r1, #0
 8007568:	4618      	mov	r0, r3
 800756a:	f001 f8c3 	bl	80086f4 <RCCEx_PLL3_Config>
 800756e:	4603      	mov	r3, r0
 8007570:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007572:	e005      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	75fb      	strb	r3, [r7, #23]
      break;
 8007578:	e002      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800757a:	bf00      	nop
 800757c:	e000      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800757e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007580:	7dfb      	ldrb	r3, [r7, #23]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d109      	bne.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007586:	4b7c      	ldr	r3, [pc, #496]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800758a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007592:	4979      	ldr	r1, [pc, #484]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007594:	4313      	orrs	r3, r2
 8007596:	650b      	str	r3, [r1, #80]	; 0x50
 8007598:	e001      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d049      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075b2:	d02e      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80075b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075b8:	d828      	bhi.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80075ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075be:	d02a      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80075c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80075c4:	d822      	bhi.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80075c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80075ca:	d026      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80075cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80075d0:	d81c      	bhi.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80075d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075d6:	d010      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x466>
 80075d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075dc:	d816      	bhi.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d01d      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80075e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075e6:	d111      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3304      	adds	r3, #4
 80075ec:	2101      	movs	r1, #1
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 ffce 	bl	8008590 <RCCEx_PLL2_Config>
 80075f4:	4603      	mov	r3, r0
 80075f6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80075f8:	e012      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	3324      	adds	r3, #36	; 0x24
 80075fe:	2101      	movs	r1, #1
 8007600:	4618      	mov	r0, r3
 8007602:	f001 f877 	bl	80086f4 <RCCEx_PLL3_Config>
 8007606:	4603      	mov	r3, r0
 8007608:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800760a:	e009      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	75fb      	strb	r3, [r7, #23]
      break;
 8007610:	e006      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007612:	bf00      	nop
 8007614:	e004      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007616:	bf00      	nop
 8007618:	e002      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800761a:	bf00      	nop
 800761c:	e000      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800761e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d109      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007626:	4b54      	ldr	r3, [pc, #336]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800762a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007632:	4951      	ldr	r1, [pc, #324]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007634:	4313      	orrs	r3, r2
 8007636:	650b      	str	r3, [r1, #80]	; 0x50
 8007638:	e001      	b.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763a:	7dfb      	ldrb	r3, [r7, #23]
 800763c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d04b      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007650:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007654:	d02e      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007656:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800765a:	d828      	bhi.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800765c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007660:	d02a      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007666:	d822      	bhi.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007668:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800766c:	d026      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800766e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007672:	d81c      	bhi.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007678:	d010      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800767a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800767e:	d816      	bhi.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007680:	2b00      	cmp	r3, #0
 8007682:	d01d      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007684:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007688:	d111      	bne.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3304      	adds	r3, #4
 800768e:	2101      	movs	r1, #1
 8007690:	4618      	mov	r0, r3
 8007692:	f000 ff7d 	bl	8008590 <RCCEx_PLL2_Config>
 8007696:	4603      	mov	r3, r0
 8007698:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800769a:	e012      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	3324      	adds	r3, #36	; 0x24
 80076a0:	2101      	movs	r1, #1
 80076a2:	4618      	mov	r0, r3
 80076a4:	f001 f826 	bl	80086f4 <RCCEx_PLL3_Config>
 80076a8:	4603      	mov	r3, r0
 80076aa:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80076ac:	e009      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	75fb      	strb	r3, [r7, #23]
      break;
 80076b2:	e006      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80076b4:	bf00      	nop
 80076b6:	e004      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80076b8:	bf00      	nop
 80076ba:	e002      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80076bc:	bf00      	nop
 80076be:	e000      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80076c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80076c8:	4b2b      	ldr	r3, [pc, #172]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076cc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80076d6:	4928      	ldr	r1, [pc, #160]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	658b      	str	r3, [r1, #88]	; 0x58
 80076dc:	e001      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076de:	7dfb      	ldrb	r3, [r7, #23]
 80076e0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d02f      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076f6:	d00e      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80076f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076fc:	d814      	bhi.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d015      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007706:	d10f      	bne.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007708:	4b1b      	ldr	r3, [pc, #108]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800770a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770c:	4a1a      	ldr	r2, [pc, #104]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800770e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007712:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007714:	e00c      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	3304      	adds	r3, #4
 800771a:	2101      	movs	r1, #1
 800771c:	4618      	mov	r0, r3
 800771e:	f000 ff37 	bl	8008590 <RCCEx_PLL2_Config>
 8007722:	4603      	mov	r3, r0
 8007724:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007726:	e003      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	75fb      	strb	r3, [r7, #23]
      break;
 800772c:	e000      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800772e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d109      	bne.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007736:	4b10      	ldr	r3, [pc, #64]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800773a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007742:	490d      	ldr	r1, [pc, #52]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007744:	4313      	orrs	r3, r2
 8007746:	650b      	str	r3, [r1, #80]	; 0x50
 8007748:	e001      	b.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774a:	7dfb      	ldrb	r3, [r7, #23]
 800774c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d033      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800775e:	2b03      	cmp	r3, #3
 8007760:	d81c      	bhi.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007762:	a201      	add	r2, pc, #4	; (adr r2, 8007768 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007768:	080077a3 	.word	0x080077a3
 800776c:	0800777d 	.word	0x0800777d
 8007770:	0800778b 	.word	0x0800778b
 8007774:	080077a3 	.word	0x080077a3
 8007778:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800777c:	4bb8      	ldr	r3, [pc, #736]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	4ab7      	ldr	r2, [pc, #732]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007786:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007788:	e00c      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	3304      	adds	r3, #4
 800778e:	2102      	movs	r1, #2
 8007790:	4618      	mov	r0, r3
 8007792:	f000 fefd 	bl	8008590 <RCCEx_PLL2_Config>
 8007796:	4603      	mov	r3, r0
 8007798:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800779a:	e003      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	75fb      	strb	r3, [r7, #23]
      break;
 80077a0:	e000      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80077a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d109      	bne.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80077aa:	4bad      	ldr	r3, [pc, #692]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ae:	f023 0203 	bic.w	r2, r3, #3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b6:	49aa      	ldr	r1, [pc, #680]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80077bc:	e001      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077be:	7dfb      	ldrb	r3, [r7, #23]
 80077c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 8086 	beq.w	80078dc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077d0:	4ba4      	ldr	r3, [pc, #656]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4aa3      	ldr	r2, [pc, #652]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80077d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077dc:	f7fb fec6 	bl	800356c <HAL_GetTick>
 80077e0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077e2:	e009      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077e4:	f7fb fec2 	bl	800356c <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b64      	cmp	r3, #100	; 0x64
 80077f0:	d902      	bls.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	75fb      	strb	r3, [r7, #23]
        break;
 80077f6:	e005      	b.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077f8:	4b9a      	ldr	r3, [pc, #616]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007800:	2b00      	cmp	r3, #0
 8007802:	d0ef      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007804:	7dfb      	ldrb	r3, [r7, #23]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d166      	bne.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800780a:	4b95      	ldr	r3, [pc, #596]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800780c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007814:	4053      	eors	r3, r2
 8007816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800781a:	2b00      	cmp	r3, #0
 800781c:	d013      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800781e:	4b90      	ldr	r3, [pc, #576]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007826:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007828:	4b8d      	ldr	r3, [pc, #564]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800782a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782c:	4a8c      	ldr	r2, [pc, #560]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800782e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007832:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007834:	4b8a      	ldr	r3, [pc, #552]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007838:	4a89      	ldr	r2, [pc, #548]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800783a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800783e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007840:	4a87      	ldr	r2, [pc, #540]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800784c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007850:	d115      	bne.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007852:	f7fb fe8b 	bl	800356c <HAL_GetTick>
 8007856:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007858:	e00b      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800785a:	f7fb fe87 	bl	800356c <HAL_GetTick>
 800785e:	4602      	mov	r2, r0
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	f241 3288 	movw	r2, #5000	; 0x1388
 8007868:	4293      	cmp	r3, r2
 800786a:	d902      	bls.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	75fb      	strb	r3, [r7, #23]
            break;
 8007870:	e005      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007872:	4b7b      	ldr	r3, [pc, #492]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d0ed      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800787e:	7dfb      	ldrb	r3, [r7, #23]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d126      	bne.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800788a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800788e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007892:	d10d      	bne.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007894:	4b72      	ldr	r3, [pc, #456]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078a2:	0919      	lsrs	r1, r3, #4
 80078a4:	4b70      	ldr	r3, [pc, #448]	; (8007a68 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80078a6:	400b      	ands	r3, r1
 80078a8:	496d      	ldr	r1, [pc, #436]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	610b      	str	r3, [r1, #16]
 80078ae:	e005      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80078b0:	4b6b      	ldr	r3, [pc, #428]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	4a6a      	ldr	r2, [pc, #424]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80078ba:	6113      	str	r3, [r2, #16]
 80078bc:	4b68      	ldr	r3, [pc, #416]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078ca:	4965      	ldr	r1, [pc, #404]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	670b      	str	r3, [r1, #112]	; 0x70
 80078d0:	e004      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80078d2:	7dfb      	ldrb	r3, [r7, #23]
 80078d4:	75bb      	strb	r3, [r7, #22]
 80078d6:	e001      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
 80078da:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d07e      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078ec:	2b28      	cmp	r3, #40	; 0x28
 80078ee:	d867      	bhi.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80078f0:	a201      	add	r2, pc, #4	; (adr r2, 80078f8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80078f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f6:	bf00      	nop
 80078f8:	080079c7 	.word	0x080079c7
 80078fc:	080079c1 	.word	0x080079c1
 8007900:	080079c1 	.word	0x080079c1
 8007904:	080079c1 	.word	0x080079c1
 8007908:	080079c1 	.word	0x080079c1
 800790c:	080079c1 	.word	0x080079c1
 8007910:	080079c1 	.word	0x080079c1
 8007914:	080079c1 	.word	0x080079c1
 8007918:	0800799d 	.word	0x0800799d
 800791c:	080079c1 	.word	0x080079c1
 8007920:	080079c1 	.word	0x080079c1
 8007924:	080079c1 	.word	0x080079c1
 8007928:	080079c1 	.word	0x080079c1
 800792c:	080079c1 	.word	0x080079c1
 8007930:	080079c1 	.word	0x080079c1
 8007934:	080079c1 	.word	0x080079c1
 8007938:	080079af 	.word	0x080079af
 800793c:	080079c1 	.word	0x080079c1
 8007940:	080079c1 	.word	0x080079c1
 8007944:	080079c1 	.word	0x080079c1
 8007948:	080079c1 	.word	0x080079c1
 800794c:	080079c1 	.word	0x080079c1
 8007950:	080079c1 	.word	0x080079c1
 8007954:	080079c1 	.word	0x080079c1
 8007958:	080079c7 	.word	0x080079c7
 800795c:	080079c1 	.word	0x080079c1
 8007960:	080079c1 	.word	0x080079c1
 8007964:	080079c1 	.word	0x080079c1
 8007968:	080079c1 	.word	0x080079c1
 800796c:	080079c1 	.word	0x080079c1
 8007970:	080079c1 	.word	0x080079c1
 8007974:	080079c1 	.word	0x080079c1
 8007978:	080079c7 	.word	0x080079c7
 800797c:	080079c1 	.word	0x080079c1
 8007980:	080079c1 	.word	0x080079c1
 8007984:	080079c1 	.word	0x080079c1
 8007988:	080079c1 	.word	0x080079c1
 800798c:	080079c1 	.word	0x080079c1
 8007990:	080079c1 	.word	0x080079c1
 8007994:	080079c1 	.word	0x080079c1
 8007998:	080079c7 	.word	0x080079c7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	3304      	adds	r3, #4
 80079a0:	2101      	movs	r1, #1
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 fdf4 	bl	8008590 <RCCEx_PLL2_Config>
 80079a8:	4603      	mov	r3, r0
 80079aa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80079ac:	e00c      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	3324      	adds	r3, #36	; 0x24
 80079b2:	2101      	movs	r1, #1
 80079b4:	4618      	mov	r0, r3
 80079b6:	f000 fe9d 	bl	80086f4 <RCCEx_PLL3_Config>
 80079ba:	4603      	mov	r3, r0
 80079bc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80079be:	e003      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	75fb      	strb	r3, [r7, #23]
      break;
 80079c4:	e000      	b.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80079c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079c8:	7dfb      	ldrb	r3, [r7, #23]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d109      	bne.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80079ce:	4b24      	ldr	r3, [pc, #144]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079da:	4921      	ldr	r1, [pc, #132]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	654b      	str	r3, [r1, #84]	; 0x54
 80079e0:	e001      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d03e      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079f6:	2b05      	cmp	r3, #5
 80079f8:	d820      	bhi.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80079fa:	a201      	add	r2, pc, #4	; (adr r2, 8007a00 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80079fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a00:	08007a43 	.word	0x08007a43
 8007a04:	08007a19 	.word	0x08007a19
 8007a08:	08007a2b 	.word	0x08007a2b
 8007a0c:	08007a43 	.word	0x08007a43
 8007a10:	08007a43 	.word	0x08007a43
 8007a14:	08007a43 	.word	0x08007a43
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f000 fdb6 	bl	8008590 <RCCEx_PLL2_Config>
 8007a24:	4603      	mov	r3, r0
 8007a26:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007a28:	e00c      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	3324      	adds	r3, #36	; 0x24
 8007a2e:	2101      	movs	r1, #1
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 fe5f 	bl	80086f4 <RCCEx_PLL3_Config>
 8007a36:	4603      	mov	r3, r0
 8007a38:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007a3a:	e003      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a40:	e000      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007a42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a44:	7dfb      	ldrb	r3, [r7, #23]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d110      	bne.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a4a:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4e:	f023 0207 	bic.w	r2, r3, #7
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a56:	4902      	ldr	r1, [pc, #8]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	654b      	str	r3, [r1, #84]	; 0x54
 8007a5c:	e008      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007a5e:	bf00      	nop
 8007a60:	58024400 	.word	0x58024400
 8007a64:	58024800 	.word	0x58024800
 8007a68:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
 8007a6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d039      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a82:	2b05      	cmp	r3, #5
 8007a84:	d820      	bhi.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007a86:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007acf 	.word	0x08007acf
 8007a90:	08007aa5 	.word	0x08007aa5
 8007a94:	08007ab7 	.word	0x08007ab7
 8007a98:	08007acf 	.word	0x08007acf
 8007a9c:	08007acf 	.word	0x08007acf
 8007aa0:	08007acf 	.word	0x08007acf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fd70 	bl	8008590 <RCCEx_PLL2_Config>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007ab4:	e00c      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3324      	adds	r3, #36	; 0x24
 8007aba:	2101      	movs	r1, #1
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 fe19 	bl	80086f4 <RCCEx_PLL3_Config>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007ac6:	e003      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	75fb      	strb	r3, [r7, #23]
      break;
 8007acc:	e000      	b.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10a      	bne.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007ad6:	4bb7      	ldr	r3, [pc, #732]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ada:	f023 0207 	bic.w	r2, r3, #7
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae4:	49b3      	ldr	r1, [pc, #716]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	658b      	str	r3, [r1, #88]	; 0x58
 8007aea:	e001      	b.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0320 	and.w	r3, r3, #32
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d04b      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b06:	d02e      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b0c:	d828      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b12:	d02a      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b18:	d822      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007b1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b1e:	d026      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007b20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b24:	d81c      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b2a:	d010      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b30:	d816      	bhi.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d01d      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007b36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b3a:	d111      	bne.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	2100      	movs	r1, #0
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fd24 	bl	8008590 <RCCEx_PLL2_Config>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007b4c:	e012      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	3324      	adds	r3, #36	; 0x24
 8007b52:	2102      	movs	r1, #2
 8007b54:	4618      	mov	r0, r3
 8007b56:	f000 fdcd 	bl	80086f4 <RCCEx_PLL3_Config>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007b5e:	e009      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	75fb      	strb	r3, [r7, #23]
      break;
 8007b64:	e006      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007b66:	bf00      	nop
 8007b68:	e004      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007b6a:	bf00      	nop
 8007b6c:	e002      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007b6e:	bf00      	nop
 8007b70:	e000      	b.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007b72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d10a      	bne.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b7a:	4b8e      	ldr	r3, [pc, #568]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b7e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b88:	498a      	ldr	r1, [pc, #552]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	654b      	str	r3, [r1, #84]	; 0x54
 8007b8e:	e001      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b90:	7dfb      	ldrb	r3, [r7, #23]
 8007b92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d04b      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ba6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007baa:	d02e      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007bac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007bb0:	d828      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb6:	d02a      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bbc:	d822      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007bbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bc2:	d026      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007bc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bc8:	d81c      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007bca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bce:	d010      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bd4:	d816      	bhi.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d01d      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bde:	d111      	bne.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3304      	adds	r3, #4
 8007be4:	2100      	movs	r1, #0
 8007be6:	4618      	mov	r0, r3
 8007be8:	f000 fcd2 	bl	8008590 <RCCEx_PLL2_Config>
 8007bec:	4603      	mov	r3, r0
 8007bee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007bf0:	e012      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	3324      	adds	r3, #36	; 0x24
 8007bf6:	2102      	movs	r1, #2
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 fd7b 	bl	80086f4 <RCCEx_PLL3_Config>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007c02:	e009      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	75fb      	strb	r3, [r7, #23]
      break;
 8007c08:	e006      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007c0a:	bf00      	nop
 8007c0c:	e004      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007c0e:	bf00      	nop
 8007c10:	e002      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007c12:	bf00      	nop
 8007c14:	e000      	b.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007c16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c18:	7dfb      	ldrb	r3, [r7, #23]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c1e:	4b65      	ldr	r3, [pc, #404]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c22:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c2c:	4961      	ldr	r1, [pc, #388]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	658b      	str	r3, [r1, #88]	; 0x58
 8007c32:	e001      	b.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
 8007c36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d04b      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c4a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007c4e:	d02e      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007c50:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007c54:	d828      	bhi.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c5a:	d02a      	beq.n	8007cb2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c60:	d822      	bhi.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007c62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007c66:	d026      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007c68:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007c6c:	d81c      	bhi.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007c6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c72:	d010      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c78:	d816      	bhi.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d01d      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c82:	d111      	bne.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3304      	adds	r3, #4
 8007c88:	2100      	movs	r1, #0
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f000 fc80 	bl	8008590 <RCCEx_PLL2_Config>
 8007c90:	4603      	mov	r3, r0
 8007c92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007c94:	e012      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	3324      	adds	r3, #36	; 0x24
 8007c9a:	2102      	movs	r1, #2
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 fd29 	bl	80086f4 <RCCEx_PLL3_Config>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007ca6:	e009      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	75fb      	strb	r3, [r7, #23]
      break;
 8007cac:	e006      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007cae:	bf00      	nop
 8007cb0:	e004      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007cb2:	bf00      	nop
 8007cb4:	e002      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007cb6:	bf00      	nop
 8007cb8:	e000      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cbc:	7dfb      	ldrb	r3, [r7, #23]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10a      	bne.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007cc2:	4b3c      	ldr	r3, [pc, #240]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cd0:	4938      	ldr	r1, [pc, #224]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	658b      	str	r3, [r1, #88]	; 0x58
 8007cd6:	e001      	b.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cd8:	7dfb      	ldrb	r3, [r7, #23]
 8007cda:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0308 	and.w	r3, r3, #8
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d01a      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cf2:	d10a      	bne.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3324      	adds	r3, #36	; 0x24
 8007cf8:	2102      	movs	r1, #2
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 fcfa 	bl	80086f4 <RCCEx_PLL3_Config>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007d0a:	4b2a      	ldr	r3, [pc, #168]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d18:	4926      	ldr	r1, [pc, #152]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0310 	and.w	r3, r3, #16
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d01a      	beq.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d34:	d10a      	bne.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	3324      	adds	r3, #36	; 0x24
 8007d3a:	2102      	movs	r1, #2
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 fcd9 	bl	80086f4 <RCCEx_PLL3_Config>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d4c:	4b19      	ldr	r3, [pc, #100]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d5a:	4916      	ldr	r1, [pc, #88]	; (8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d036      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d76:	d01f      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d7c:	d817      	bhi.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d86:	d009      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007d88:	e011      	b.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3304      	adds	r3, #4
 8007d8e:	2100      	movs	r1, #0
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 fbfd 	bl	8008590 <RCCEx_PLL2_Config>
 8007d96:	4603      	mov	r3, r0
 8007d98:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d9a:	e00e      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3324      	adds	r3, #36	; 0x24
 8007da0:	2102      	movs	r1, #2
 8007da2:	4618      	mov	r0, r3
 8007da4:	f000 fca6 	bl	80086f4 <RCCEx_PLL3_Config>
 8007da8:	4603      	mov	r3, r0
 8007daa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007dac:	e005      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	75fb      	strb	r3, [r7, #23]
      break;
 8007db2:	e002      	b.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007db4:	58024400 	.word	0x58024400
      break;
 8007db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dba:	7dfb      	ldrb	r3, [r7, #23]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10a      	bne.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007dc0:	4b93      	ldr	r3, [pc, #588]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007dce:	4990      	ldr	r1, [pc, #576]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	658b      	str	r3, [r1, #88]	; 0x58
 8007dd4:	e001      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
 8007dd8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d033      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007df0:	d01c      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007df2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007df6:	d816      	bhi.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007df8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dfc:	d003      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007dfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e02:	d007      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007e04:	e00f      	b.n	8007e26 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e06:	4b82      	ldr	r3, [pc, #520]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0a:	4a81      	ldr	r2, [pc, #516]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007e12:	e00c      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3324      	adds	r3, #36	; 0x24
 8007e18:	2101      	movs	r1, #1
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 fc6a 	bl	80086f4 <RCCEx_PLL3_Config>
 8007e20:	4603      	mov	r3, r0
 8007e22:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007e24:	e003      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	75fb      	strb	r3, [r7, #23]
      break;
 8007e2a:	e000      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007e2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10a      	bne.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e34:	4b76      	ldr	r3, [pc, #472]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e42:	4973      	ldr	r1, [pc, #460]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	654b      	str	r3, [r1, #84]	; 0x54
 8007e48:	e001      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e4a:	7dfb      	ldrb	r3, [r7, #23]
 8007e4c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d029      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d003      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e66:	d007      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007e68:	e00f      	b.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e6a:	4b69      	ldr	r3, [pc, #420]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6e:	4a68      	ldr	r2, [pc, #416]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007e76:	e00b      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	2102      	movs	r1, #2
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 fb86 	bl	8008590 <RCCEx_PLL2_Config>
 8007e84:	4603      	mov	r3, r0
 8007e86:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007e88:	e002      	b.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8007e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e90:	7dfb      	ldrb	r3, [r7, #23]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d109      	bne.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007e96:	4b5e      	ldr	r3, [pc, #376]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ea2:	495b      	ldr	r1, [pc, #364]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007ea8:	e001      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eaa:	7dfb      	ldrb	r3, [r7, #23]
 8007eac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00a      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3324      	adds	r3, #36	; 0x24
 8007ebe:	2102      	movs	r1, #2
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 fc17 	bl	80086f4 <RCCEx_PLL3_Config>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d030      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ee0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ee4:	d017      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eea:	d811      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef0:	d013      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef6:	d80b      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d010      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f00:	d106      	bne.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f02:	4b43      	ldr	r3, [pc, #268]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f06:	4a42      	ldr	r2, [pc, #264]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007f0e:	e007      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	75fb      	strb	r3, [r7, #23]
      break;
 8007f14:	e004      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007f16:	bf00      	nop
 8007f18:	e002      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007f1a:	bf00      	nop
 8007f1c:	e000      	b.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f20:	7dfb      	ldrb	r3, [r7, #23]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d109      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f26:	4b3a      	ldr	r3, [pc, #232]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f32:	4937      	ldr	r1, [pc, #220]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f34:	4313      	orrs	r3, r2
 8007f36:	654b      	str	r3, [r1, #84]	; 0x54
 8007f38:	e001      	b.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
 8007f3c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d008      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f4a:	4b31      	ldr	r3, [pc, #196]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f56:	492e      	ldr	r1, [pc, #184]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d009      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007f68:	4b29      	ldr	r3, [pc, #164]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f76:	4926      	ldr	r1, [pc, #152]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d008      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f88:	4b21      	ldr	r3, [pc, #132]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f94:	491e      	ldr	r1, [pc, #120]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f96:	4313      	orrs	r3, r2
 8007f98:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00d      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fa6:	4b1a      	ldr	r3, [pc, #104]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	4a19      	ldr	r2, [pc, #100]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007fb0:	6113      	str	r3, [r2, #16]
 8007fb2:	4b17      	ldr	r3, [pc, #92]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fb4:	691a      	ldr	r2, [r3, #16]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007fbc:	4914      	ldr	r1, [pc, #80]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	da08      	bge.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007fca:	4b11      	ldr	r3, [pc, #68]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd6:	490e      	ldr	r1, [pc, #56]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d009      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007fe8:	4b09      	ldr	r3, [pc, #36]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff6:	4906      	ldr	r1, [pc, #24]	; (8008010 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007ffc:	7dbb      	ldrb	r3, [r7, #22]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	e000      	b.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
}
 8008008:	4618      	mov	r0, r3
 800800a:	3718      	adds	r7, #24
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	58024400 	.word	0x58024400

08008014 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008018:	f7ff f860 	bl	80070dc <HAL_RCC_GetHCLKFreq>
 800801c:	4602      	mov	r2, r0
 800801e:	4b06      	ldr	r3, [pc, #24]	; (8008038 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	091b      	lsrs	r3, r3, #4
 8008024:	f003 0307 	and.w	r3, r3, #7
 8008028:	4904      	ldr	r1, [pc, #16]	; (800803c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800802a:	5ccb      	ldrb	r3, [r1, r3]
 800802c:	f003 031f 	and.w	r3, r3, #31
 8008030:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008034:	4618      	mov	r0, r3
 8008036:	bd80      	pop	{r7, pc}
 8008038:	58024400 	.word	0x58024400
 800803c:	0800fc94 	.word	0x0800fc94

08008040 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008040:	b480      	push	{r7}
 8008042:	b089      	sub	sp, #36	; 0x24
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008048:	4ba1      	ldr	r3, [pc, #644]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800804a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804c:	f003 0303 	and.w	r3, r3, #3
 8008050:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008052:	4b9f      	ldr	r3, [pc, #636]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008056:	0b1b      	lsrs	r3, r3, #12
 8008058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800805c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800805e:	4b9c      	ldr	r3, [pc, #624]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008062:	091b      	lsrs	r3, r3, #4
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800806a:	4b99      	ldr	r3, [pc, #612]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800806c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800806e:	08db      	lsrs	r3, r3, #3
 8008070:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008074:	693a      	ldr	r2, [r7, #16]
 8008076:	fb02 f303 	mul.w	r3, r2, r3
 800807a:	ee07 3a90 	vmov	s15, r3
 800807e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008082:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 8111 	beq.w	80082b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	2b02      	cmp	r3, #2
 8008092:	f000 8083 	beq.w	800819c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	2b02      	cmp	r3, #2
 800809a:	f200 80a1 	bhi.w	80081e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d056      	beq.n	8008158 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80080aa:	e099      	b.n	80081e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080ac:	4b88      	ldr	r3, [pc, #544]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0320 	and.w	r3, r3, #32
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d02d      	beq.n	8008114 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80080b8:	4b85      	ldr	r3, [pc, #532]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	08db      	lsrs	r3, r3, #3
 80080be:	f003 0303 	and.w	r3, r3, #3
 80080c2:	4a84      	ldr	r2, [pc, #528]	; (80082d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80080c4:	fa22 f303 	lsr.w	r3, r2, r3
 80080c8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	ee07 3a90 	vmov	s15, r3
 80080d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	ee07 3a90 	vmov	s15, r3
 80080da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080e2:	4b7b      	ldr	r3, [pc, #492]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ea:	ee07 3a90 	vmov	s15, r3
 80080ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80080f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80082d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800810a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008112:	e087      	b.n	8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	ee07 3a90 	vmov	s15, r3
 800811a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80082dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008126:	4b6a      	ldr	r3, [pc, #424]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800812e:	ee07 3a90 	vmov	s15, r3
 8008132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008136:	ed97 6a03 	vldr	s12, [r7, #12]
 800813a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80082d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800813e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800814a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800814e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008152:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008156:	e065      	b.n	8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	ee07 3a90 	vmov	s15, r3
 800815e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008162:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80082e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800816a:	4b59      	ldr	r3, [pc, #356]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800816c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008172:	ee07 3a90 	vmov	s15, r3
 8008176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800817a:	ed97 6a03 	vldr	s12, [r7, #12]
 800817e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80082d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800818a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800818e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008196:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800819a:	e043      	b.n	8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	ee07 3a90 	vmov	s15, r3
 80081a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80082e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80081aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ae:	4b48      	ldr	r3, [pc, #288]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b6:	ee07 3a90 	vmov	s15, r3
 80081ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081be:	ed97 6a03 	vldr	s12, [r7, #12]
 80081c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80082d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80081de:	e021      	b.n	8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	ee07 3a90 	vmov	s15, r3
 80081e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80082e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80081ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081f2:	4b37      	ldr	r3, [pc, #220]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081fa:	ee07 3a90 	vmov	s15, r3
 80081fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008202:	ed97 6a03 	vldr	s12, [r7, #12]
 8008206:	eddf 5a34 	vldr	s11, [pc, #208]	; 80082d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800820a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800820e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800821a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800821e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008222:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008224:	4b2a      	ldr	r3, [pc, #168]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008228:	0a5b      	lsrs	r3, r3, #9
 800822a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800822e:	ee07 3a90 	vmov	s15, r3
 8008232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008236:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800823a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800823e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800824a:	ee17 2a90 	vmov	r2, s15
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008252:	4b1f      	ldr	r3, [pc, #124]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008256:	0c1b      	lsrs	r3, r3, #16
 8008258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800825c:	ee07 3a90 	vmov	s15, r3
 8008260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008264:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008268:	ee37 7a87 	vadd.f32	s14, s15, s14
 800826c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008274:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008278:	ee17 2a90 	vmov	r2, s15
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008280:	4b13      	ldr	r3, [pc, #76]	; (80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008284:	0e1b      	lsrs	r3, r3, #24
 8008286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800828a:	ee07 3a90 	vmov	s15, r3
 800828e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008292:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008296:	ee37 7a87 	vadd.f32	s14, s15, s14
 800829a:	edd7 6a07 	vldr	s13, [r7, #28]
 800829e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082a6:	ee17 2a90 	vmov	r2, s15
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80082ae:	e008      	b.n	80082c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	609a      	str	r2, [r3, #8]
}
 80082c2:	bf00      	nop
 80082c4:	3724      	adds	r7, #36	; 0x24
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	58024400 	.word	0x58024400
 80082d4:	03d09000 	.word	0x03d09000
 80082d8:	46000000 	.word	0x46000000
 80082dc:	4c742400 	.word	0x4c742400
 80082e0:	4a742400 	.word	0x4a742400
 80082e4:	4c371b00 	.word	0x4c371b00

080082e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b089      	sub	sp, #36	; 0x24
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082f0:	4ba1      	ldr	r3, [pc, #644]	; (8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f4:	f003 0303 	and.w	r3, r3, #3
 80082f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80082fa:	4b9f      	ldr	r3, [pc, #636]	; (8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fe:	0d1b      	lsrs	r3, r3, #20
 8008300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008304:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008306:	4b9c      	ldr	r3, [pc, #624]	; (8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830a:	0a1b      	lsrs	r3, r3, #8
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008312:	4b99      	ldr	r3, [pc, #612]	; (8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008316:	08db      	lsrs	r3, r3, #3
 8008318:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	fb02 f303 	mul.w	r3, r2, r3
 8008322:	ee07 3a90 	vmov	s15, r3
 8008326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 8111 	beq.w	8008558 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	2b02      	cmp	r3, #2
 800833a:	f000 8083 	beq.w	8008444 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	2b02      	cmp	r3, #2
 8008342:	f200 80a1 	bhi.w	8008488 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d056      	beq.n	8008400 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008352:	e099      	b.n	8008488 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008354:	4b88      	ldr	r3, [pc, #544]	; (8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b00      	cmp	r3, #0
 800835e:	d02d      	beq.n	80083bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008360:	4b85      	ldr	r3, [pc, #532]	; (8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	08db      	lsrs	r3, r3, #3
 8008366:	f003 0303 	and.w	r3, r3, #3
 800836a:	4a84      	ldr	r2, [pc, #528]	; (800857c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800836c:	fa22 f303 	lsr.w	r3, r2, r3
 8008370:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	ee07 3a90 	vmov	s15, r3
 8008378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	ee07 3a90 	vmov	s15, r3
 8008382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800838a:	4b7b      	ldr	r3, [pc, #492]	; (8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800838c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008392:	ee07 3a90 	vmov	s15, r3
 8008396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800839a:	ed97 6a03 	vldr	s12, [r7, #12]
 800839e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008580 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80083ba:	e087      	b.n	80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	ee07 3a90 	vmov	s15, r3
 80083c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80083ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ce:	4b6a      	ldr	r3, [pc, #424]	; (8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d6:	ee07 3a90 	vmov	s15, r3
 80083da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083de:	ed97 6a03 	vldr	s12, [r7, #12]
 80083e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008580 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083fe:	e065      	b.n	80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	ee07 3a90 	vmov	s15, r3
 8008406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800840e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008412:	4b59      	ldr	r3, [pc, #356]	; (8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800841a:	ee07 3a90 	vmov	s15, r3
 800841e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008422:	ed97 6a03 	vldr	s12, [r7, #12]
 8008426:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008580 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800842a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800842e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800843a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008442:	e043      	b.n	80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	ee07 3a90 	vmov	s15, r3
 800844a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800858c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008456:	4b48      	ldr	r3, [pc, #288]	; (8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845e:	ee07 3a90 	vmov	s15, r3
 8008462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008466:	ed97 6a03 	vldr	s12, [r7, #12]
 800846a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008580 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800846e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800847a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800847e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008482:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008486:	e021      	b.n	80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	ee07 3a90 	vmov	s15, r3
 800848e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008492:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008588 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800849a:	4b37      	ldr	r3, [pc, #220]	; (8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800849c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a2:	ee07 3a90 	vmov	s15, r3
 80084a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008580 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80084cc:	4b2a      	ldr	r3, [pc, #168]	; (8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d0:	0a5b      	lsrs	r3, r3, #9
 80084d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084d6:	ee07 3a90 	vmov	s15, r3
 80084da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80084e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80084ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084f2:	ee17 2a90 	vmov	r2, s15
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80084fa:	4b1f      	ldr	r3, [pc, #124]	; (8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fe:	0c1b      	lsrs	r3, r3, #16
 8008500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008504:	ee07 3a90 	vmov	s15, r3
 8008508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008510:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008514:	edd7 6a07 	vldr	s13, [r7, #28]
 8008518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800851c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008520:	ee17 2a90 	vmov	r2, s15
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008528:	4b13      	ldr	r3, [pc, #76]	; (8008578 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800852a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852c:	0e1b      	lsrs	r3, r3, #24
 800852e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008532:	ee07 3a90 	vmov	s15, r3
 8008536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800853e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008542:	edd7 6a07 	vldr	s13, [r7, #28]
 8008546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800854a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800854e:	ee17 2a90 	vmov	r2, s15
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008556:	e008      	b.n	800856a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	609a      	str	r2, [r3, #8]
}
 800856a:	bf00      	nop
 800856c:	3724      	adds	r7, #36	; 0x24
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	58024400 	.word	0x58024400
 800857c:	03d09000 	.word	0x03d09000
 8008580:	46000000 	.word	0x46000000
 8008584:	4c742400 	.word	0x4c742400
 8008588:	4a742400 	.word	0x4a742400
 800858c:	4c371b00 	.word	0x4c371b00

08008590 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800859e:	4b53      	ldr	r3, [pc, #332]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a2:	f003 0303 	and.w	r3, r3, #3
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d101      	bne.n	80085ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e099      	b.n	80086e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80085ae:	4b4f      	ldr	r3, [pc, #316]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a4e      	ldr	r2, [pc, #312]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80085b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085ba:	f7fa ffd7 	bl	800356c <HAL_GetTick>
 80085be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085c0:	e008      	b.n	80085d4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80085c2:	f7fa ffd3 	bl	800356c <HAL_GetTick>
 80085c6:	4602      	mov	r2, r0
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d901      	bls.n	80085d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e086      	b.n	80086e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80085d4:	4b45      	ldr	r3, [pc, #276]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1f0      	bne.n	80085c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80085e0:	4b42      	ldr	r3, [pc, #264]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	031b      	lsls	r3, r3, #12
 80085ee:	493f      	ldr	r1, [pc, #252]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	628b      	str	r3, [r1, #40]	; 0x28
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	3b01      	subs	r3, #1
 80085fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	3b01      	subs	r3, #1
 8008604:	025b      	lsls	r3, r3, #9
 8008606:	b29b      	uxth	r3, r3
 8008608:	431a      	orrs	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	3b01      	subs	r3, #1
 8008610:	041b      	lsls	r3, r3, #16
 8008612:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008616:	431a      	orrs	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	3b01      	subs	r3, #1
 800861e:	061b      	lsls	r3, r3, #24
 8008620:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008624:	4931      	ldr	r1, [pc, #196]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008626:	4313      	orrs	r3, r2
 8008628:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800862a:	4b30      	ldr	r3, [pc, #192]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 800862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	492d      	ldr	r1, [pc, #180]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008638:	4313      	orrs	r3, r2
 800863a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800863c:	4b2b      	ldr	r3, [pc, #172]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	f023 0220 	bic.w	r2, r3, #32
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	4928      	ldr	r1, [pc, #160]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 800864a:	4313      	orrs	r3, r2
 800864c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800864e:	4b27      	ldr	r3, [pc, #156]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008652:	4a26      	ldr	r2, [pc, #152]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008654:	f023 0310 	bic.w	r3, r3, #16
 8008658:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800865a:	4b24      	ldr	r3, [pc, #144]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 800865c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800865e:	4b24      	ldr	r3, [pc, #144]	; (80086f0 <RCCEx_PLL2_Config+0x160>)
 8008660:	4013      	ands	r3, r2
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	69d2      	ldr	r2, [r2, #28]
 8008666:	00d2      	lsls	r2, r2, #3
 8008668:	4920      	ldr	r1, [pc, #128]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 800866a:	4313      	orrs	r3, r2
 800866c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800866e:	4b1f      	ldr	r3, [pc, #124]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008672:	4a1e      	ldr	r2, [pc, #120]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008674:	f043 0310 	orr.w	r3, r3, #16
 8008678:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d106      	bne.n	800868e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008680:	4b1a      	ldr	r3, [pc, #104]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	4a19      	ldr	r2, [pc, #100]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008686:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800868a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800868c:	e00f      	b.n	80086ae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d106      	bne.n	80086a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008694:	4b15      	ldr	r3, [pc, #84]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	4a14      	ldr	r2, [pc, #80]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 800869a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800869e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086a0:	e005      	b.n	80086ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80086a2:	4b12      	ldr	r3, [pc, #72]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80086a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a6:	4a11      	ldr	r2, [pc, #68]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80086a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80086ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80086ae:	4b0f      	ldr	r3, [pc, #60]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a0e      	ldr	r2, [pc, #56]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80086b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80086b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086ba:	f7fa ff57 	bl	800356c <HAL_GetTick>
 80086be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086c0:	e008      	b.n	80086d4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80086c2:	f7fa ff53 	bl	800356c <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d901      	bls.n	80086d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e006      	b.n	80086e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80086d4:	4b05      	ldr	r3, [pc, #20]	; (80086ec <RCCEx_PLL2_Config+0x15c>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0f0      	beq.n	80086c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	58024400 	.word	0x58024400
 80086f0:	ffff0007 	.word	0xffff0007

080086f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008702:	4b53      	ldr	r3, [pc, #332]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008706:	f003 0303 	and.w	r3, r3, #3
 800870a:	2b03      	cmp	r3, #3
 800870c:	d101      	bne.n	8008712 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e099      	b.n	8008846 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008712:	4b4f      	ldr	r3, [pc, #316]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a4e      	ldr	r2, [pc, #312]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800871c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800871e:	f7fa ff25 	bl	800356c <HAL_GetTick>
 8008722:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008724:	e008      	b.n	8008738 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008726:	f7fa ff21 	bl	800356c <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d901      	bls.n	8008738 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e086      	b.n	8008846 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008738:	4b45      	ldr	r3, [pc, #276]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d1f0      	bne.n	8008726 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008744:	4b42      	ldr	r3, [pc, #264]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008748:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	051b      	lsls	r3, r3, #20
 8008752:	493f      	ldr	r1, [pc, #252]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008754:	4313      	orrs	r3, r2
 8008756:	628b      	str	r3, [r1, #40]	; 0x28
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	3b01      	subs	r3, #1
 800875e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	3b01      	subs	r3, #1
 8008768:	025b      	lsls	r3, r3, #9
 800876a:	b29b      	uxth	r3, r3
 800876c:	431a      	orrs	r2, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	3b01      	subs	r3, #1
 8008774:	041b      	lsls	r3, r3, #16
 8008776:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	3b01      	subs	r3, #1
 8008782:	061b      	lsls	r3, r3, #24
 8008784:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008788:	4931      	ldr	r1, [pc, #196]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 800878a:	4313      	orrs	r3, r2
 800878c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800878e:	4b30      	ldr	r3, [pc, #192]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008792:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	492d      	ldr	r1, [pc, #180]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 800879c:	4313      	orrs	r3, r2
 800879e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80087a0:	4b2b      	ldr	r3, [pc, #172]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	4928      	ldr	r1, [pc, #160]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80087b2:	4b27      	ldr	r3, [pc, #156]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b6:	4a26      	ldr	r2, [pc, #152]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80087be:	4b24      	ldr	r3, [pc, #144]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087c2:	4b24      	ldr	r3, [pc, #144]	; (8008854 <RCCEx_PLL3_Config+0x160>)
 80087c4:	4013      	ands	r3, r2
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	69d2      	ldr	r2, [r2, #28]
 80087ca:	00d2      	lsls	r2, r2, #3
 80087cc:	4920      	ldr	r1, [pc, #128]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80087d2:	4b1f      	ldr	r3, [pc, #124]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d6:	4a1e      	ldr	r2, [pc, #120]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d106      	bne.n	80087f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80087e4:	4b1a      	ldr	r3, [pc, #104]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e8:	4a19      	ldr	r2, [pc, #100]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80087ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087f0:	e00f      	b.n	8008812 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d106      	bne.n	8008806 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80087f8:	4b15      	ldr	r3, [pc, #84]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fc:	4a14      	ldr	r2, [pc, #80]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 80087fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008802:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008804:	e005      	b.n	8008812 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008806:	4b12      	ldr	r3, [pc, #72]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880a:	4a11      	ldr	r2, [pc, #68]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 800880c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008810:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008812:	4b0f      	ldr	r3, [pc, #60]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a0e      	ldr	r2, [pc, #56]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 8008818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800881c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800881e:	f7fa fea5 	bl	800356c <HAL_GetTick>
 8008822:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008824:	e008      	b.n	8008838 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008826:	f7fa fea1 	bl	800356c <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	2b02      	cmp	r3, #2
 8008832:	d901      	bls.n	8008838 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e006      	b.n	8008846 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008838:	4b05      	ldr	r3, [pc, #20]	; (8008850 <RCCEx_PLL3_Config+0x15c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d0f0      	beq.n	8008826 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008844:	7bfb      	ldrb	r3, [r7, #15]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	58024400 	.word	0x58024400
 8008854:	ffff0007 	.word	0xffff0007

08008858 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8008860:	2300      	movs	r3, #0
 8008862:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e0eb      	b.n	8008a46 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a75      	ldr	r2, [pc, #468]	; (8008a50 <HAL_SPI_Init+0x1f8>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d00f      	beq.n	800889e <HAL_SPI_Init+0x46>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a74      	ldr	r2, [pc, #464]	; (8008a54 <HAL_SPI_Init+0x1fc>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d00a      	beq.n	800889e <HAL_SPI_Init+0x46>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a72      	ldr	r2, [pc, #456]	; (8008a58 <HAL_SPI_Init+0x200>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d005      	beq.n	800889e <HAL_SPI_Init+0x46>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	2b0f      	cmp	r3, #15
 8008898:	d901      	bls.n	800889e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e0d3      	b.n	8008a46 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f8dc 	bl	8008a5c <SPI_GetPacketSize>
 80088a4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a69      	ldr	r2, [pc, #420]	; (8008a50 <HAL_SPI_Init+0x1f8>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d00c      	beq.n	80088ca <HAL_SPI_Init+0x72>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a67      	ldr	r2, [pc, #412]	; (8008a54 <HAL_SPI_Init+0x1fc>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d007      	beq.n	80088ca <HAL_SPI_Init+0x72>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a66      	ldr	r2, [pc, #408]	; (8008a58 <HAL_SPI_Init+0x200>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d002      	beq.n	80088ca <HAL_SPI_Init+0x72>
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2b08      	cmp	r3, #8
 80088c8:	d811      	bhi.n	80088ee <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80088ce:	4a60      	ldr	r2, [pc, #384]	; (8008a50 <HAL_SPI_Init+0x1f8>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d009      	beq.n	80088e8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a5e      	ldr	r2, [pc, #376]	; (8008a54 <HAL_SPI_Init+0x1fc>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d004      	beq.n	80088e8 <HAL_SPI_Init+0x90>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a5d      	ldr	r2, [pc, #372]	; (8008a58 <HAL_SPI_Init+0x200>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d104      	bne.n	80088f2 <HAL_SPI_Init+0x9a>
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2b10      	cmp	r3, #16
 80088ec:	d901      	bls.n	80088f2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e0a9      	b.n	8008a46 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d106      	bne.n	800890c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7f9 ff4e 	bl	80027a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2202      	movs	r2, #2
 8008910:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 0201 	bic.w	r2, r2, #1
 8008922:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800892c:	d119      	bne.n	8008962 <HAL_SPI_Init+0x10a>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008936:	d103      	bne.n	8008940 <HAL_SPI_Init+0xe8>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893c:	2b00      	cmp	r3, #0
 800893e:	d008      	beq.n	8008952 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10c      	bne.n	8008962 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800894c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008950:	d107      	bne.n	8008962 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008960:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	69da      	ldr	r2, [r3, #28]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896a:	431a      	orrs	r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	431a      	orrs	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008974:	ea42 0103 	orr.w	r1, r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68da      	ldr	r2, [r3, #12]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	430a      	orrs	r2, r1
 8008982:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898c:	431a      	orrs	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008992:	431a      	orrs	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	431a      	orrs	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	431a      	orrs	r2, r3
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	431a      	orrs	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	431a      	orrs	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	431a      	orrs	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089b6:	431a      	orrs	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	431a      	orrs	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089c2:	ea42 0103 	orr.w	r1, r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d113      	bne.n	8008a02 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089ec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a00:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f022 0201 	bic.w	r2, r2, #1
 8008a10:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00a      	beq.n	8008a34 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	40013000 	.word	0x40013000
 8008a54:	40003800 	.word	0x40003800
 8008a58:	40003c00 	.word	0x40003c00

08008a5c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a68:	095b      	lsrs	r3, r3, #5
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	3301      	adds	r3, #1
 8008a74:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	3307      	adds	r3, #7
 8008a7a:	08db      	lsrs	r3, r3, #3
 8008a7c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	fb02 f303 	mul.w	r3, r2, r3
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b082      	sub	sp, #8
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e049      	b.n	8008b38 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d106      	bne.n	8008abe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f7f9 fedb 	bl	8002874 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2202      	movs	r2, #2
 8008ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	3304      	adds	r3, #4
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	f000 fdaf 	bl	8009634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2201      	movs	r2, #1
 8008b22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	68da      	ldr	r2, [r3, #12]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f022 0201 	bic.w	r2, r2, #1
 8008b56:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6a1a      	ldr	r2, [r3, #32]
 8008b5e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008b62:	4013      	ands	r3, r2
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10f      	bne.n	8008b88 <HAL_TIM_Base_Stop_IT+0x48>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	6a1a      	ldr	r2, [r3, #32]
 8008b6e:	f240 4344 	movw	r3, #1092	; 0x444
 8008b72:	4013      	ands	r3, r2
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d107      	bne.n	8008b88 <HAL_TIM_Base_Stop_IT+0x48>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f022 0201 	bic.w	r2, r2, #1
 8008b86:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr

08008b9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b082      	sub	sp, #8
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e049      	b.n	8008c44 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d106      	bne.n	8008bca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f841 	bl	8008c4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2202      	movs	r2, #2
 8008bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	3304      	adds	r3, #4
 8008bda:	4619      	mov	r1, r3
 8008bdc:	4610      	mov	r0, r2
 8008bde:	f000 fd29 	bl	8009634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2201      	movs	r2, #1
 8008c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d109      	bne.n	8008c84 <HAL_TIM_PWM_Start+0x24>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	bf14      	ite	ne
 8008c7c:	2301      	movne	r3, #1
 8008c7e:	2300      	moveq	r3, #0
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	e03c      	b.n	8008cfe <HAL_TIM_PWM_Start+0x9e>
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	2b04      	cmp	r3, #4
 8008c88:	d109      	bne.n	8008c9e <HAL_TIM_PWM_Start+0x3e>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	bf14      	ite	ne
 8008c96:	2301      	movne	r3, #1
 8008c98:	2300      	moveq	r3, #0
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	e02f      	b.n	8008cfe <HAL_TIM_PWM_Start+0x9e>
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	2b08      	cmp	r3, #8
 8008ca2:	d109      	bne.n	8008cb8 <HAL_TIM_PWM_Start+0x58>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	bf14      	ite	ne
 8008cb0:	2301      	movne	r3, #1
 8008cb2:	2300      	moveq	r3, #0
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	e022      	b.n	8008cfe <HAL_TIM_PWM_Start+0x9e>
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2b0c      	cmp	r3, #12
 8008cbc:	d109      	bne.n	8008cd2 <HAL_TIM_PWM_Start+0x72>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	bf14      	ite	ne
 8008cca:	2301      	movne	r3, #1
 8008ccc:	2300      	moveq	r3, #0
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	e015      	b.n	8008cfe <HAL_TIM_PWM_Start+0x9e>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	2b10      	cmp	r3, #16
 8008cd6:	d109      	bne.n	8008cec <HAL_TIM_PWM_Start+0x8c>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	bf14      	ite	ne
 8008ce4:	2301      	movne	r3, #1
 8008ce6:	2300      	moveq	r3, #0
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	e008      	b.n	8008cfe <HAL_TIM_PWM_Start+0x9e>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	bf14      	ite	ne
 8008cf8:	2301      	movne	r3, #1
 8008cfa:	2300      	moveq	r3, #0
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e09c      	b.n	8008e40 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d104      	bne.n	8008d16 <HAL_TIM_PWM_Start+0xb6>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d14:	e023      	b.n	8008d5e <HAL_TIM_PWM_Start+0xfe>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b04      	cmp	r3, #4
 8008d1a:	d104      	bne.n	8008d26 <HAL_TIM_PWM_Start+0xc6>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d24:	e01b      	b.n	8008d5e <HAL_TIM_PWM_Start+0xfe>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b08      	cmp	r3, #8
 8008d2a:	d104      	bne.n	8008d36 <HAL_TIM_PWM_Start+0xd6>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d34:	e013      	b.n	8008d5e <HAL_TIM_PWM_Start+0xfe>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b0c      	cmp	r3, #12
 8008d3a:	d104      	bne.n	8008d46 <HAL_TIM_PWM_Start+0xe6>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d44:	e00b      	b.n	8008d5e <HAL_TIM_PWM_Start+0xfe>
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b10      	cmp	r3, #16
 8008d4a:	d104      	bne.n	8008d56 <HAL_TIM_PWM_Start+0xf6>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2202      	movs	r2, #2
 8008d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d54:	e003      	b.n	8008d5e <HAL_TIM_PWM_Start+0xfe>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2202      	movs	r2, #2
 8008d5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2201      	movs	r2, #1
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f001 f86a 	bl	8009e40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a35      	ldr	r2, [pc, #212]	; (8008e48 <HAL_TIM_PWM_Start+0x1e8>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d013      	beq.n	8008d9e <HAL_TIM_PWM_Start+0x13e>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a34      	ldr	r2, [pc, #208]	; (8008e4c <HAL_TIM_PWM_Start+0x1ec>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d00e      	beq.n	8008d9e <HAL_TIM_PWM_Start+0x13e>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a32      	ldr	r2, [pc, #200]	; (8008e50 <HAL_TIM_PWM_Start+0x1f0>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d009      	beq.n	8008d9e <HAL_TIM_PWM_Start+0x13e>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a31      	ldr	r2, [pc, #196]	; (8008e54 <HAL_TIM_PWM_Start+0x1f4>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d004      	beq.n	8008d9e <HAL_TIM_PWM_Start+0x13e>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a2f      	ldr	r2, [pc, #188]	; (8008e58 <HAL_TIM_PWM_Start+0x1f8>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d101      	bne.n	8008da2 <HAL_TIM_PWM_Start+0x142>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e000      	b.n	8008da4 <HAL_TIM_PWM_Start+0x144>
 8008da2:	2300      	movs	r3, #0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d007      	beq.n	8008db8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008db6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a22      	ldr	r2, [pc, #136]	; (8008e48 <HAL_TIM_PWM_Start+0x1e8>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d01d      	beq.n	8008dfe <HAL_TIM_PWM_Start+0x19e>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dca:	d018      	beq.n	8008dfe <HAL_TIM_PWM_Start+0x19e>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a22      	ldr	r2, [pc, #136]	; (8008e5c <HAL_TIM_PWM_Start+0x1fc>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d013      	beq.n	8008dfe <HAL_TIM_PWM_Start+0x19e>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a21      	ldr	r2, [pc, #132]	; (8008e60 <HAL_TIM_PWM_Start+0x200>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d00e      	beq.n	8008dfe <HAL_TIM_PWM_Start+0x19e>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a1f      	ldr	r2, [pc, #124]	; (8008e64 <HAL_TIM_PWM_Start+0x204>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d009      	beq.n	8008dfe <HAL_TIM_PWM_Start+0x19e>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a17      	ldr	r2, [pc, #92]	; (8008e4c <HAL_TIM_PWM_Start+0x1ec>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d004      	beq.n	8008dfe <HAL_TIM_PWM_Start+0x19e>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a1b      	ldr	r2, [pc, #108]	; (8008e68 <HAL_TIM_PWM_Start+0x208>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d115      	bne.n	8008e2a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689a      	ldr	r2, [r3, #8]
 8008e04:	4b19      	ldr	r3, [pc, #100]	; (8008e6c <HAL_TIM_PWM_Start+0x20c>)
 8008e06:	4013      	ands	r3, r2
 8008e08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2b06      	cmp	r3, #6
 8008e0e:	d015      	beq.n	8008e3c <HAL_TIM_PWM_Start+0x1dc>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e16:	d011      	beq.n	8008e3c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f042 0201 	orr.w	r2, r2, #1
 8008e26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e28:	e008      	b.n	8008e3c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f042 0201 	orr.w	r2, r2, #1
 8008e38:	601a      	str	r2, [r3, #0]
 8008e3a:	e000      	b.n	8008e3e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	40010000 	.word	0x40010000
 8008e4c:	40010400 	.word	0x40010400
 8008e50:	40014000 	.word	0x40014000
 8008e54:	40014400 	.word	0x40014400
 8008e58:	40014800 	.word	0x40014800
 8008e5c:	40000400 	.word	0x40000400
 8008e60:	40000800 	.word	0x40000800
 8008e64:	40000c00 	.word	0x40000c00
 8008e68:	40001800 	.word	0x40001800
 8008e6c:	00010007 	.word	0x00010007

08008e70 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 ffdc 	bl	8009e40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a3e      	ldr	r2, [pc, #248]	; (8008f88 <HAL_TIM_PWM_Stop+0x118>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d013      	beq.n	8008eba <HAL_TIM_PWM_Stop+0x4a>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a3d      	ldr	r2, [pc, #244]	; (8008f8c <HAL_TIM_PWM_Stop+0x11c>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d00e      	beq.n	8008eba <HAL_TIM_PWM_Stop+0x4a>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a3b      	ldr	r2, [pc, #236]	; (8008f90 <HAL_TIM_PWM_Stop+0x120>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d009      	beq.n	8008eba <HAL_TIM_PWM_Stop+0x4a>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a3a      	ldr	r2, [pc, #232]	; (8008f94 <HAL_TIM_PWM_Stop+0x124>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d004      	beq.n	8008eba <HAL_TIM_PWM_Stop+0x4a>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a38      	ldr	r2, [pc, #224]	; (8008f98 <HAL_TIM_PWM_Stop+0x128>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d101      	bne.n	8008ebe <HAL_TIM_PWM_Stop+0x4e>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e000      	b.n	8008ec0 <HAL_TIM_PWM_Stop+0x50>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d017      	beq.n	8008ef4 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6a1a      	ldr	r2, [r3, #32]
 8008eca:	f241 1311 	movw	r3, #4369	; 0x1111
 8008ece:	4013      	ands	r3, r2
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10f      	bne.n	8008ef4 <HAL_TIM_PWM_Stop+0x84>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	6a1a      	ldr	r2, [r3, #32]
 8008eda:	f240 4344 	movw	r3, #1092	; 0x444
 8008ede:	4013      	ands	r3, r2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d107      	bne.n	8008ef4 <HAL_TIM_PWM_Stop+0x84>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ef2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6a1a      	ldr	r2, [r3, #32]
 8008efa:	f241 1311 	movw	r3, #4369	; 0x1111
 8008efe:	4013      	ands	r3, r2
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10f      	bne.n	8008f24 <HAL_TIM_PWM_Stop+0xb4>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6a1a      	ldr	r2, [r3, #32]
 8008f0a:	f240 4344 	movw	r3, #1092	; 0x444
 8008f0e:	4013      	ands	r3, r2
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d107      	bne.n	8008f24 <HAL_TIM_PWM_Stop+0xb4>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 0201 	bic.w	r2, r2, #1
 8008f22:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d104      	bne.n	8008f34 <HAL_TIM_PWM_Stop+0xc4>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f32:	e023      	b.n	8008f7c <HAL_TIM_PWM_Stop+0x10c>
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	2b04      	cmp	r3, #4
 8008f38:	d104      	bne.n	8008f44 <HAL_TIM_PWM_Stop+0xd4>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f42:	e01b      	b.n	8008f7c <HAL_TIM_PWM_Stop+0x10c>
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	2b08      	cmp	r3, #8
 8008f48:	d104      	bne.n	8008f54 <HAL_TIM_PWM_Stop+0xe4>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f52:	e013      	b.n	8008f7c <HAL_TIM_PWM_Stop+0x10c>
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	2b0c      	cmp	r3, #12
 8008f58:	d104      	bne.n	8008f64 <HAL_TIM_PWM_Stop+0xf4>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f62:	e00b      	b.n	8008f7c <HAL_TIM_PWM_Stop+0x10c>
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	2b10      	cmp	r3, #16
 8008f68:	d104      	bne.n	8008f74 <HAL_TIM_PWM_Stop+0x104>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f72:	e003      	b.n	8008f7c <HAL_TIM_PWM_Stop+0x10c>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	40010000 	.word	0x40010000
 8008f8c:	40010400 	.word	0x40010400
 8008f90:	40014000 	.word	0x40014000
 8008f94:	40014400 	.word	0x40014400
 8008f98:	40014800 	.word	0x40014800

08008f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	f003 0302 	and.w	r3, r3, #2
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d122      	bne.n	8008ff8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	f003 0302 	and.w	r3, r3, #2
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	d11b      	bne.n	8008ff8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f06f 0202 	mvn.w	r2, #2
 8008fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2201      	movs	r2, #1
 8008fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	699b      	ldr	r3, [r3, #24]
 8008fd6:	f003 0303 	and.w	r3, r3, #3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d003      	beq.n	8008fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fb0a 	bl	80095f8 <HAL_TIM_IC_CaptureCallback>
 8008fe4:	e005      	b.n	8008ff2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fafc 	bl	80095e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fb0d 	bl	800960c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	f003 0304 	and.w	r3, r3, #4
 8009002:	2b04      	cmp	r3, #4
 8009004:	d122      	bne.n	800904c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	f003 0304 	and.w	r3, r3, #4
 8009010:	2b04      	cmp	r3, #4
 8009012:	d11b      	bne.n	800904c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f06f 0204 	mvn.w	r2, #4
 800901c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2202      	movs	r2, #2
 8009022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800902e:	2b00      	cmp	r3, #0
 8009030:	d003      	beq.n	800903a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fae0 	bl	80095f8 <HAL_TIM_IC_CaptureCallback>
 8009038:	e005      	b.n	8009046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fad2 	bl	80095e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 fae3 	bl	800960c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	f003 0308 	and.w	r3, r3, #8
 8009056:	2b08      	cmp	r3, #8
 8009058:	d122      	bne.n	80090a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	f003 0308 	and.w	r3, r3, #8
 8009064:	2b08      	cmp	r3, #8
 8009066:	d11b      	bne.n	80090a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f06f 0208 	mvn.w	r2, #8
 8009070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2204      	movs	r2, #4
 8009076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	f003 0303 	and.w	r3, r3, #3
 8009082:	2b00      	cmp	r3, #0
 8009084:	d003      	beq.n	800908e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fab6 	bl	80095f8 <HAL_TIM_IC_CaptureCallback>
 800908c:	e005      	b.n	800909a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 faa8 	bl	80095e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fab9 	bl	800960c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	691b      	ldr	r3, [r3, #16]
 80090a6:	f003 0310 	and.w	r3, r3, #16
 80090aa:	2b10      	cmp	r3, #16
 80090ac:	d122      	bne.n	80090f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f003 0310 	and.w	r3, r3, #16
 80090b8:	2b10      	cmp	r3, #16
 80090ba:	d11b      	bne.n	80090f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f06f 0210 	mvn.w	r2, #16
 80090c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2208      	movs	r2, #8
 80090ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	69db      	ldr	r3, [r3, #28]
 80090d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 fa8c 	bl	80095f8 <HAL_TIM_IC_CaptureCallback>
 80090e0:	e005      	b.n	80090ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fa7e 	bl	80095e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fa8f 	bl	800960c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d10e      	bne.n	8009120 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	2b01      	cmp	r3, #1
 800910e:	d107      	bne.n	8009120 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f06f 0201 	mvn.w	r2, #1
 8009118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7f9 f926 	bl	800236c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800912a:	2b80      	cmp	r3, #128	; 0x80
 800912c:	d10e      	bne.n	800914c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009138:	2b80      	cmp	r3, #128	; 0x80
 800913a:	d107      	bne.n	800914c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 ffb0 	bl	800a0ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	691b      	ldr	r3, [r3, #16]
 8009152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800915a:	d10e      	bne.n	800917a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009166:	2b80      	cmp	r3, #128	; 0x80
 8009168:	d107      	bne.n	800917a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 ffa3 	bl	800a0c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009184:	2b40      	cmp	r3, #64	; 0x40
 8009186:	d10e      	bne.n	80091a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009192:	2b40      	cmp	r3, #64	; 0x40
 8009194:	d107      	bne.n	80091a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800919e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fa3d 	bl	8009620 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	f003 0320 	and.w	r3, r3, #32
 80091b0:	2b20      	cmp	r3, #32
 80091b2:	d10e      	bne.n	80091d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	f003 0320 	and.w	r3, r3, #32
 80091be:	2b20      	cmp	r3, #32
 80091c0:	d107      	bne.n	80091d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f06f 0220 	mvn.w	r2, #32
 80091ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 ff63 	bl	800a098 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091d2:	bf00      	nop
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d101      	bne.n	80091f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80091f2:	2302      	movs	r3, #2
 80091f4:	e0fd      	b.n	80093f2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2201      	movs	r2, #1
 80091fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b14      	cmp	r3, #20
 8009202:	f200 80f0 	bhi.w	80093e6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8009206:	a201      	add	r2, pc, #4	; (adr r2, 800920c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920c:	08009261 	.word	0x08009261
 8009210:	080093e7 	.word	0x080093e7
 8009214:	080093e7 	.word	0x080093e7
 8009218:	080093e7 	.word	0x080093e7
 800921c:	080092a1 	.word	0x080092a1
 8009220:	080093e7 	.word	0x080093e7
 8009224:	080093e7 	.word	0x080093e7
 8009228:	080093e7 	.word	0x080093e7
 800922c:	080092e3 	.word	0x080092e3
 8009230:	080093e7 	.word	0x080093e7
 8009234:	080093e7 	.word	0x080093e7
 8009238:	080093e7 	.word	0x080093e7
 800923c:	08009323 	.word	0x08009323
 8009240:	080093e7 	.word	0x080093e7
 8009244:	080093e7 	.word	0x080093e7
 8009248:	080093e7 	.word	0x080093e7
 800924c:	08009365 	.word	0x08009365
 8009250:	080093e7 	.word	0x080093e7
 8009254:	080093e7 	.word	0x080093e7
 8009258:	080093e7 	.word	0x080093e7
 800925c:	080093a5 	.word	0x080093a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68b9      	ldr	r1, [r7, #8]
 8009266:	4618      	mov	r0, r3
 8009268:	f000 fa7e 	bl	8009768 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	699a      	ldr	r2, [r3, #24]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0208 	orr.w	r2, r2, #8
 800927a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	699a      	ldr	r2, [r3, #24]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f022 0204 	bic.w	r2, r2, #4
 800928a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6999      	ldr	r1, [r3, #24]
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	691a      	ldr	r2, [r3, #16]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	430a      	orrs	r2, r1
 800929c:	619a      	str	r2, [r3, #24]
      break;
 800929e:	e0a3      	b.n	80093e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68b9      	ldr	r1, [r7, #8]
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 faee 	bl	8009888 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	699a      	ldr	r2, [r3, #24]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	699a      	ldr	r2, [r3, #24]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	6999      	ldr	r1, [r3, #24]
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	021a      	lsls	r2, r3, #8
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	430a      	orrs	r2, r1
 80092de:	619a      	str	r2, [r3, #24]
      break;
 80092e0:	e082      	b.n	80093e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	68b9      	ldr	r1, [r7, #8]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 fb57 	bl	800999c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	69da      	ldr	r2, [r3, #28]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f042 0208 	orr.w	r2, r2, #8
 80092fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	69da      	ldr	r2, [r3, #28]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f022 0204 	bic.w	r2, r2, #4
 800930c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	69d9      	ldr	r1, [r3, #28]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	691a      	ldr	r2, [r3, #16]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	430a      	orrs	r2, r1
 800931e:	61da      	str	r2, [r3, #28]
      break;
 8009320:	e062      	b.n	80093e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68b9      	ldr	r1, [r7, #8]
 8009328:	4618      	mov	r0, r3
 800932a:	f000 fbbd 	bl	8009aa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	69da      	ldr	r2, [r3, #28]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800933c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	69da      	ldr	r2, [r3, #28]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800934c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	69d9      	ldr	r1, [r3, #28]
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	021a      	lsls	r2, r3, #8
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	430a      	orrs	r2, r1
 8009360:	61da      	str	r2, [r3, #28]
      break;
 8009362:	e041      	b.n	80093e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68b9      	ldr	r1, [r7, #8]
 800936a:	4618      	mov	r0, r3
 800936c:	f000 fc04 	bl	8009b78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f042 0208 	orr.w	r2, r2, #8
 800937e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f022 0204 	bic.w	r2, r2, #4
 800938e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	691a      	ldr	r2, [r3, #16]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	430a      	orrs	r2, r1
 80093a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093a2:	e021      	b.n	80093e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68b9      	ldr	r1, [r7, #8]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 fc46 	bl	8009c3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	021a      	lsls	r2, r3, #8
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	430a      	orrs	r2, r1
 80093e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093e4:	e000      	b.n	80093e8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80093e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop

080093fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800940c:	2b01      	cmp	r3, #1
 800940e:	d101      	bne.n	8009414 <HAL_TIM_ConfigClockSource+0x18>
 8009410:	2302      	movs	r3, #2
 8009412:	e0db      	b.n	80095cc <HAL_TIM_ConfigClockSource+0x1d0>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2202      	movs	r2, #2
 8009420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	4b69      	ldr	r3, [pc, #420]	; (80095d4 <HAL_TIM_ConfigClockSource+0x1d8>)
 8009430:	4013      	ands	r3, r2
 8009432:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800943a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a63      	ldr	r2, [pc, #396]	; (80095d8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800944a:	4293      	cmp	r3, r2
 800944c:	f000 80a9 	beq.w	80095a2 <HAL_TIM_ConfigClockSource+0x1a6>
 8009450:	4a61      	ldr	r2, [pc, #388]	; (80095d8 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009452:	4293      	cmp	r3, r2
 8009454:	f200 80ae 	bhi.w	80095b4 <HAL_TIM_ConfigClockSource+0x1b8>
 8009458:	4a60      	ldr	r2, [pc, #384]	; (80095dc <HAL_TIM_ConfigClockSource+0x1e0>)
 800945a:	4293      	cmp	r3, r2
 800945c:	f000 80a1 	beq.w	80095a2 <HAL_TIM_ConfigClockSource+0x1a6>
 8009460:	4a5e      	ldr	r2, [pc, #376]	; (80095dc <HAL_TIM_ConfigClockSource+0x1e0>)
 8009462:	4293      	cmp	r3, r2
 8009464:	f200 80a6 	bhi.w	80095b4 <HAL_TIM_ConfigClockSource+0x1b8>
 8009468:	4a5d      	ldr	r2, [pc, #372]	; (80095e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800946a:	4293      	cmp	r3, r2
 800946c:	f000 8099 	beq.w	80095a2 <HAL_TIM_ConfigClockSource+0x1a6>
 8009470:	4a5b      	ldr	r2, [pc, #364]	; (80095e0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009472:	4293      	cmp	r3, r2
 8009474:	f200 809e 	bhi.w	80095b4 <HAL_TIM_ConfigClockSource+0x1b8>
 8009478:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800947c:	f000 8091 	beq.w	80095a2 <HAL_TIM_ConfigClockSource+0x1a6>
 8009480:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009484:	f200 8096 	bhi.w	80095b4 <HAL_TIM_ConfigClockSource+0x1b8>
 8009488:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800948c:	f000 8089 	beq.w	80095a2 <HAL_TIM_ConfigClockSource+0x1a6>
 8009490:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009494:	f200 808e 	bhi.w	80095b4 <HAL_TIM_ConfigClockSource+0x1b8>
 8009498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800949c:	d03e      	beq.n	800951c <HAL_TIM_ConfigClockSource+0x120>
 800949e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094a2:	f200 8087 	bhi.w	80095b4 <HAL_TIM_ConfigClockSource+0x1b8>
 80094a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094aa:	f000 8085 	beq.w	80095b8 <HAL_TIM_ConfigClockSource+0x1bc>
 80094ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094b2:	d87f      	bhi.n	80095b4 <HAL_TIM_ConfigClockSource+0x1b8>
 80094b4:	2b70      	cmp	r3, #112	; 0x70
 80094b6:	d01a      	beq.n	80094ee <HAL_TIM_ConfigClockSource+0xf2>
 80094b8:	2b70      	cmp	r3, #112	; 0x70
 80094ba:	d87b      	bhi.n	80095b4 <HAL_TIM_ConfigClockSource+0x1b8>
 80094bc:	2b60      	cmp	r3, #96	; 0x60
 80094be:	d050      	beq.n	8009562 <HAL_TIM_ConfigClockSource+0x166>
 80094c0:	2b60      	cmp	r3, #96	; 0x60
 80094c2:	d877      	bhi.n	80095b4 <HAL_TIM_ConfigClockSource+0x1b8>
 80094c4:	2b50      	cmp	r3, #80	; 0x50
 80094c6:	d03c      	beq.n	8009542 <HAL_TIM_ConfigClockSource+0x146>
 80094c8:	2b50      	cmp	r3, #80	; 0x50
 80094ca:	d873      	bhi.n	80095b4 <HAL_TIM_ConfigClockSource+0x1b8>
 80094cc:	2b40      	cmp	r3, #64	; 0x40
 80094ce:	d058      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0x186>
 80094d0:	2b40      	cmp	r3, #64	; 0x40
 80094d2:	d86f      	bhi.n	80095b4 <HAL_TIM_ConfigClockSource+0x1b8>
 80094d4:	2b30      	cmp	r3, #48	; 0x30
 80094d6:	d064      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0x1a6>
 80094d8:	2b30      	cmp	r3, #48	; 0x30
 80094da:	d86b      	bhi.n	80095b4 <HAL_TIM_ConfigClockSource+0x1b8>
 80094dc:	2b20      	cmp	r3, #32
 80094de:	d060      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0x1a6>
 80094e0:	2b20      	cmp	r3, #32
 80094e2:	d867      	bhi.n	80095b4 <HAL_TIM_ConfigClockSource+0x1b8>
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d05c      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0x1a6>
 80094e8:	2b10      	cmp	r3, #16
 80094ea:	d05a      	beq.n	80095a2 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80094ec:	e062      	b.n	80095b4 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6818      	ldr	r0, [r3, #0]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	6899      	ldr	r1, [r3, #8]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	685a      	ldr	r2, [r3, #4]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	f000 fc7f 	bl	8009e00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009510:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	609a      	str	r2, [r3, #8]
      break;
 800951a:	e04e      	b.n	80095ba <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6818      	ldr	r0, [r3, #0]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	6899      	ldr	r1, [r3, #8]
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	685a      	ldr	r2, [r3, #4]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	f000 fc68 	bl	8009e00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	689a      	ldr	r2, [r3, #8]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800953e:	609a      	str	r2, [r3, #8]
      break;
 8009540:	e03b      	b.n	80095ba <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6818      	ldr	r0, [r3, #0]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	6859      	ldr	r1, [r3, #4]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	68db      	ldr	r3, [r3, #12]
 800954e:	461a      	mov	r2, r3
 8009550:	f000 fbd8 	bl	8009d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2150      	movs	r1, #80	; 0x50
 800955a:	4618      	mov	r0, r3
 800955c:	f000 fc32 	bl	8009dc4 <TIM_ITRx_SetConfig>
      break;
 8009560:	e02b      	b.n	80095ba <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	6859      	ldr	r1, [r3, #4]
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	461a      	mov	r2, r3
 8009570:	f000 fbf7 	bl	8009d62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2160      	movs	r1, #96	; 0x60
 800957a:	4618      	mov	r0, r3
 800957c:	f000 fc22 	bl	8009dc4 <TIM_ITRx_SetConfig>
      break;
 8009580:	e01b      	b.n	80095ba <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6818      	ldr	r0, [r3, #0]
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	6859      	ldr	r1, [r3, #4]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	461a      	mov	r2, r3
 8009590:	f000 fbb8 	bl	8009d04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2140      	movs	r1, #64	; 0x40
 800959a:	4618      	mov	r0, r3
 800959c:	f000 fc12 	bl	8009dc4 <TIM_ITRx_SetConfig>
      break;
 80095a0:	e00b      	b.n	80095ba <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4619      	mov	r1, r3
 80095ac:	4610      	mov	r0, r2
 80095ae:	f000 fc09 	bl	8009dc4 <TIM_ITRx_SetConfig>
        break;
 80095b2:	e002      	b.n	80095ba <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80095b4:	bf00      	nop
 80095b6:	e000      	b.n	80095ba <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80095b8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2201      	movs	r2, #1
 80095be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	ffceff88 	.word	0xffceff88
 80095d8:	00100040 	.word	0x00100040
 80095dc:	00100030 	.word	0x00100030
 80095e0:	00100020 	.word	0x00100020

080095e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095ec:	bf00      	nop
 80095ee:	370c      	adds	r7, #12
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009614:	bf00      	nop
 8009616:	370c      	adds	r7, #12
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a40      	ldr	r2, [pc, #256]	; (8009748 <TIM_Base_SetConfig+0x114>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d013      	beq.n	8009674 <TIM_Base_SetConfig+0x40>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009652:	d00f      	beq.n	8009674 <TIM_Base_SetConfig+0x40>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a3d      	ldr	r2, [pc, #244]	; (800974c <TIM_Base_SetConfig+0x118>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d00b      	beq.n	8009674 <TIM_Base_SetConfig+0x40>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a3c      	ldr	r2, [pc, #240]	; (8009750 <TIM_Base_SetConfig+0x11c>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d007      	beq.n	8009674 <TIM_Base_SetConfig+0x40>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a3b      	ldr	r2, [pc, #236]	; (8009754 <TIM_Base_SetConfig+0x120>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d003      	beq.n	8009674 <TIM_Base_SetConfig+0x40>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	4a3a      	ldr	r2, [pc, #232]	; (8009758 <TIM_Base_SetConfig+0x124>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d108      	bne.n	8009686 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800967a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	4313      	orrs	r3, r2
 8009684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a2f      	ldr	r2, [pc, #188]	; (8009748 <TIM_Base_SetConfig+0x114>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d01f      	beq.n	80096ce <TIM_Base_SetConfig+0x9a>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009694:	d01b      	beq.n	80096ce <TIM_Base_SetConfig+0x9a>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a2c      	ldr	r2, [pc, #176]	; (800974c <TIM_Base_SetConfig+0x118>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d017      	beq.n	80096ce <TIM_Base_SetConfig+0x9a>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a2b      	ldr	r2, [pc, #172]	; (8009750 <TIM_Base_SetConfig+0x11c>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d013      	beq.n	80096ce <TIM_Base_SetConfig+0x9a>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a2a      	ldr	r2, [pc, #168]	; (8009754 <TIM_Base_SetConfig+0x120>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d00f      	beq.n	80096ce <TIM_Base_SetConfig+0x9a>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a29      	ldr	r2, [pc, #164]	; (8009758 <TIM_Base_SetConfig+0x124>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d00b      	beq.n	80096ce <TIM_Base_SetConfig+0x9a>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a28      	ldr	r2, [pc, #160]	; (800975c <TIM_Base_SetConfig+0x128>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d007      	beq.n	80096ce <TIM_Base_SetConfig+0x9a>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a27      	ldr	r2, [pc, #156]	; (8009760 <TIM_Base_SetConfig+0x12c>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d003      	beq.n	80096ce <TIM_Base_SetConfig+0x9a>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a26      	ldr	r2, [pc, #152]	; (8009764 <TIM_Base_SetConfig+0x130>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d108      	bne.n	80096e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	4313      	orrs	r3, r2
 80096de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	689a      	ldr	r2, [r3, #8]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681a      	ldr	r2, [r3, #0]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a10      	ldr	r2, [pc, #64]	; (8009748 <TIM_Base_SetConfig+0x114>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d00f      	beq.n	800972c <TIM_Base_SetConfig+0xf8>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a12      	ldr	r2, [pc, #72]	; (8009758 <TIM_Base_SetConfig+0x124>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d00b      	beq.n	800972c <TIM_Base_SetConfig+0xf8>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a11      	ldr	r2, [pc, #68]	; (800975c <TIM_Base_SetConfig+0x128>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d007      	beq.n	800972c <TIM_Base_SetConfig+0xf8>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a10      	ldr	r2, [pc, #64]	; (8009760 <TIM_Base_SetConfig+0x12c>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d003      	beq.n	800972c <TIM_Base_SetConfig+0xf8>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a0f      	ldr	r2, [pc, #60]	; (8009764 <TIM_Base_SetConfig+0x130>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d103      	bne.n	8009734 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	691a      	ldr	r2, [r3, #16]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	615a      	str	r2, [r3, #20]
}
 800973a:	bf00      	nop
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	40010000 	.word	0x40010000
 800974c:	40000400 	.word	0x40000400
 8009750:	40000800 	.word	0x40000800
 8009754:	40000c00 	.word	0x40000c00
 8009758:	40010400 	.word	0x40010400
 800975c:	40014000 	.word	0x40014000
 8009760:	40014400 	.word	0x40014400
 8009764:	40014800 	.word	0x40014800

08009768 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009768:	b480      	push	{r7}
 800976a:	b087      	sub	sp, #28
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	f023 0201 	bic.w	r2, r3, #1
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	4b37      	ldr	r3, [pc, #220]	; (8009870 <TIM_OC1_SetConfig+0x108>)
 8009794:	4013      	ands	r3, r2
 8009796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f023 0303 	bic.w	r3, r3, #3
 800979e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	f023 0302 	bic.w	r3, r3, #2
 80097b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a2d      	ldr	r2, [pc, #180]	; (8009874 <TIM_OC1_SetConfig+0x10c>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d00f      	beq.n	80097e4 <TIM_OC1_SetConfig+0x7c>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a2c      	ldr	r2, [pc, #176]	; (8009878 <TIM_OC1_SetConfig+0x110>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d00b      	beq.n	80097e4 <TIM_OC1_SetConfig+0x7c>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a2b      	ldr	r2, [pc, #172]	; (800987c <TIM_OC1_SetConfig+0x114>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d007      	beq.n	80097e4 <TIM_OC1_SetConfig+0x7c>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a2a      	ldr	r2, [pc, #168]	; (8009880 <TIM_OC1_SetConfig+0x118>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d003      	beq.n	80097e4 <TIM_OC1_SetConfig+0x7c>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a29      	ldr	r2, [pc, #164]	; (8009884 <TIM_OC1_SetConfig+0x11c>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d10c      	bne.n	80097fe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	f023 0308 	bic.w	r3, r3, #8
 80097ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	697a      	ldr	r2, [r7, #20]
 80097f2:	4313      	orrs	r3, r2
 80097f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f023 0304 	bic.w	r3, r3, #4
 80097fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a1c      	ldr	r2, [pc, #112]	; (8009874 <TIM_OC1_SetConfig+0x10c>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d00f      	beq.n	8009826 <TIM_OC1_SetConfig+0xbe>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a1b      	ldr	r2, [pc, #108]	; (8009878 <TIM_OC1_SetConfig+0x110>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d00b      	beq.n	8009826 <TIM_OC1_SetConfig+0xbe>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4a1a      	ldr	r2, [pc, #104]	; (800987c <TIM_OC1_SetConfig+0x114>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d007      	beq.n	8009826 <TIM_OC1_SetConfig+0xbe>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a19      	ldr	r2, [pc, #100]	; (8009880 <TIM_OC1_SetConfig+0x118>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d003      	beq.n	8009826 <TIM_OC1_SetConfig+0xbe>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	4a18      	ldr	r2, [pc, #96]	; (8009884 <TIM_OC1_SetConfig+0x11c>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d111      	bne.n	800984a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800982c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009834:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	693a      	ldr	r2, [r7, #16]
 800983c:	4313      	orrs	r3, r2
 800983e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	4313      	orrs	r3, r2
 8009848:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	693a      	ldr	r2, [r7, #16]
 800984e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	621a      	str	r2, [r3, #32]
}
 8009864:	bf00      	nop
 8009866:	371c      	adds	r7, #28
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr
 8009870:	fffeff8f 	.word	0xfffeff8f
 8009874:	40010000 	.word	0x40010000
 8009878:	40010400 	.word	0x40010400
 800987c:	40014000 	.word	0x40014000
 8009880:	40014400 	.word	0x40014400
 8009884:	40014800 	.word	0x40014800

08009888 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009888:	b480      	push	{r7}
 800988a:	b087      	sub	sp, #28
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	f023 0210 	bic.w	r2, r3, #16
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	4b34      	ldr	r3, [pc, #208]	; (8009984 <TIM_OC2_SetConfig+0xfc>)
 80098b4:	4013      	ands	r3, r2
 80098b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	021b      	lsls	r3, r3, #8
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	f023 0320 	bic.w	r3, r3, #32
 80098d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	011b      	lsls	r3, r3, #4
 80098da:	697a      	ldr	r2, [r7, #20]
 80098dc:	4313      	orrs	r3, r2
 80098de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a29      	ldr	r2, [pc, #164]	; (8009988 <TIM_OC2_SetConfig+0x100>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d003      	beq.n	80098f0 <TIM_OC2_SetConfig+0x68>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a28      	ldr	r2, [pc, #160]	; (800998c <TIM_OC2_SetConfig+0x104>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d10d      	bne.n	800990c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	011b      	lsls	r3, r3, #4
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	4313      	orrs	r3, r2
 8009902:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800990a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a1e      	ldr	r2, [pc, #120]	; (8009988 <TIM_OC2_SetConfig+0x100>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d00f      	beq.n	8009934 <TIM_OC2_SetConfig+0xac>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a1d      	ldr	r2, [pc, #116]	; (800998c <TIM_OC2_SetConfig+0x104>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d00b      	beq.n	8009934 <TIM_OC2_SetConfig+0xac>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a1c      	ldr	r2, [pc, #112]	; (8009990 <TIM_OC2_SetConfig+0x108>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d007      	beq.n	8009934 <TIM_OC2_SetConfig+0xac>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a1b      	ldr	r2, [pc, #108]	; (8009994 <TIM_OC2_SetConfig+0x10c>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d003      	beq.n	8009934 <TIM_OC2_SetConfig+0xac>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a1a      	ldr	r2, [pc, #104]	; (8009998 <TIM_OC2_SetConfig+0x110>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d113      	bne.n	800995c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800993a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009942:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	693a      	ldr	r2, [r7, #16]
 800994c:	4313      	orrs	r3, r2
 800994e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	693a      	ldr	r2, [r7, #16]
 8009958:	4313      	orrs	r3, r2
 800995a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	685a      	ldr	r2, [r3, #4]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	697a      	ldr	r2, [r7, #20]
 8009974:	621a      	str	r2, [r3, #32]
}
 8009976:	bf00      	nop
 8009978:	371c      	adds	r7, #28
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	feff8fff 	.word	0xfeff8fff
 8009988:	40010000 	.word	0x40010000
 800998c:	40010400 	.word	0x40010400
 8009990:	40014000 	.word	0x40014000
 8009994:	40014400 	.word	0x40014400
 8009998:	40014800 	.word	0x40014800

0800999c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800999c:	b480      	push	{r7}
 800999e:	b087      	sub	sp, #28
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	69db      	ldr	r3, [r3, #28]
 80099c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f023 0303 	bic.w	r3, r3, #3
 80099d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	4313      	orrs	r3, r2
 80099dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	689b      	ldr	r3, [r3, #8]
 80099ea:	021b      	lsls	r3, r3, #8
 80099ec:	697a      	ldr	r2, [r7, #20]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a27      	ldr	r2, [pc, #156]	; (8009a94 <TIM_OC3_SetConfig+0xf8>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d003      	beq.n	8009a02 <TIM_OC3_SetConfig+0x66>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a26      	ldr	r2, [pc, #152]	; (8009a98 <TIM_OC3_SetConfig+0xfc>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d10d      	bne.n	8009a1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	021b      	lsls	r3, r3, #8
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4a1c      	ldr	r2, [pc, #112]	; (8009a94 <TIM_OC3_SetConfig+0xf8>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d00f      	beq.n	8009a46 <TIM_OC3_SetConfig+0xaa>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a1b      	ldr	r2, [pc, #108]	; (8009a98 <TIM_OC3_SetConfig+0xfc>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d00b      	beq.n	8009a46 <TIM_OC3_SetConfig+0xaa>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a1a      	ldr	r2, [pc, #104]	; (8009a9c <TIM_OC3_SetConfig+0x100>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d007      	beq.n	8009a46 <TIM_OC3_SetConfig+0xaa>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a19      	ldr	r2, [pc, #100]	; (8009aa0 <TIM_OC3_SetConfig+0x104>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d003      	beq.n	8009a46 <TIM_OC3_SetConfig+0xaa>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a18      	ldr	r2, [pc, #96]	; (8009aa4 <TIM_OC3_SetConfig+0x108>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d113      	bne.n	8009a6e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	011b      	lsls	r3, r3, #4
 8009a5c:	693a      	ldr	r2, [r7, #16]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	011b      	lsls	r3, r3, #4
 8009a68:	693a      	ldr	r2, [r7, #16]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	697a      	ldr	r2, [r7, #20]
 8009a86:	621a      	str	r2, [r3, #32]
}
 8009a88:	bf00      	nop
 8009a8a:	371c      	adds	r7, #28
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	40010000 	.word	0x40010000
 8009a98:	40010400 	.word	0x40010400
 8009a9c:	40014000 	.word	0x40014000
 8009aa0:	40014400 	.word	0x40014400
 8009aa4:	40014800 	.word	0x40014800

08009aa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b087      	sub	sp, #28
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	021b      	lsls	r3, r3, #8
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009af2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	031b      	lsls	r3, r3, #12
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	4a18      	ldr	r2, [pc, #96]	; (8009b64 <TIM_OC4_SetConfig+0xbc>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d00f      	beq.n	8009b28 <TIM_OC4_SetConfig+0x80>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4a17      	ldr	r2, [pc, #92]	; (8009b68 <TIM_OC4_SetConfig+0xc0>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d00b      	beq.n	8009b28 <TIM_OC4_SetConfig+0x80>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a16      	ldr	r2, [pc, #88]	; (8009b6c <TIM_OC4_SetConfig+0xc4>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d007      	beq.n	8009b28 <TIM_OC4_SetConfig+0x80>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a15      	ldr	r2, [pc, #84]	; (8009b70 <TIM_OC4_SetConfig+0xc8>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d003      	beq.n	8009b28 <TIM_OC4_SetConfig+0x80>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a14      	ldr	r2, [pc, #80]	; (8009b74 <TIM_OC4_SetConfig+0xcc>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d109      	bne.n	8009b3c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	019b      	lsls	r3, r3, #6
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	697a      	ldr	r2, [r7, #20]
 8009b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	621a      	str	r2, [r3, #32]
}
 8009b56:	bf00      	nop
 8009b58:	371c      	adds	r7, #28
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	40010000 	.word	0x40010000
 8009b68:	40010400 	.word	0x40010400
 8009b6c:	40014000 	.word	0x40014000
 8009b70:	40014400 	.word	0x40014400
 8009b74:	40014800 	.word	0x40014800

08009b78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b087      	sub	sp, #28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009bb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	041b      	lsls	r3, r3, #16
 8009bc0:	693a      	ldr	r2, [r7, #16]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a17      	ldr	r2, [pc, #92]	; (8009c28 <TIM_OC5_SetConfig+0xb0>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d00f      	beq.n	8009bee <TIM_OC5_SetConfig+0x76>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4a16      	ldr	r2, [pc, #88]	; (8009c2c <TIM_OC5_SetConfig+0xb4>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d00b      	beq.n	8009bee <TIM_OC5_SetConfig+0x76>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4a15      	ldr	r2, [pc, #84]	; (8009c30 <TIM_OC5_SetConfig+0xb8>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d007      	beq.n	8009bee <TIM_OC5_SetConfig+0x76>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4a14      	ldr	r2, [pc, #80]	; (8009c34 <TIM_OC5_SetConfig+0xbc>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d003      	beq.n	8009bee <TIM_OC5_SetConfig+0x76>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4a13      	ldr	r2, [pc, #76]	; (8009c38 <TIM_OC5_SetConfig+0xc0>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d109      	bne.n	8009c02 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	021b      	lsls	r3, r3, #8
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	693a      	ldr	r2, [r7, #16]
 8009c1a:	621a      	str	r2, [r3, #32]
}
 8009c1c:	bf00      	nop
 8009c1e:	371c      	adds	r7, #28
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr
 8009c28:	40010000 	.word	0x40010000
 8009c2c:	40010400 	.word	0x40010400
 8009c30:	40014000 	.word	0x40014000
 8009c34:	40014400 	.word	0x40014400
 8009c38:	40014800 	.word	0x40014800

08009c3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b087      	sub	sp, #28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a1b      	ldr	r3, [r3, #32]
 8009c4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a1b      	ldr	r3, [r3, #32]
 8009c56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	021b      	lsls	r3, r3, #8
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	051b      	lsls	r3, r3, #20
 8009c86:	693a      	ldr	r2, [r7, #16]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a18      	ldr	r2, [pc, #96]	; (8009cf0 <TIM_OC6_SetConfig+0xb4>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d00f      	beq.n	8009cb4 <TIM_OC6_SetConfig+0x78>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a17      	ldr	r2, [pc, #92]	; (8009cf4 <TIM_OC6_SetConfig+0xb8>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d00b      	beq.n	8009cb4 <TIM_OC6_SetConfig+0x78>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a16      	ldr	r2, [pc, #88]	; (8009cf8 <TIM_OC6_SetConfig+0xbc>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d007      	beq.n	8009cb4 <TIM_OC6_SetConfig+0x78>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a15      	ldr	r2, [pc, #84]	; (8009cfc <TIM_OC6_SetConfig+0xc0>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d003      	beq.n	8009cb4 <TIM_OC6_SetConfig+0x78>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a14      	ldr	r2, [pc, #80]	; (8009d00 <TIM_OC6_SetConfig+0xc4>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d109      	bne.n	8009cc8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009cba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	029b      	lsls	r3, r3, #10
 8009cc2:	697a      	ldr	r2, [r7, #20]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	697a      	ldr	r2, [r7, #20]
 8009ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	621a      	str	r2, [r3, #32]
}
 8009ce2:	bf00      	nop
 8009ce4:	371c      	adds	r7, #28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	40010000 	.word	0x40010000
 8009cf4:	40010400 	.word	0x40010400
 8009cf8:	40014000 	.word	0x40014000
 8009cfc:	40014400 	.word	0x40014400
 8009d00:	40014800 	.word	0x40014800

08009d04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b087      	sub	sp, #28
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6a1b      	ldr	r3, [r3, #32]
 8009d14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	f023 0201 	bic.w	r2, r3, #1
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	011b      	lsls	r3, r3, #4
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	f023 030a 	bic.w	r3, r3, #10
 8009d40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	693a      	ldr	r2, [r7, #16]
 8009d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	621a      	str	r2, [r3, #32]
}
 8009d56:	bf00      	nop
 8009d58:	371c      	adds	r7, #28
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b087      	sub	sp, #28
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	60f8      	str	r0, [r7, #12]
 8009d6a:	60b9      	str	r1, [r7, #8]
 8009d6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	f023 0210 	bic.w	r2, r3, #16
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6a1b      	ldr	r3, [r3, #32]
 8009d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	031b      	lsls	r3, r3, #12
 8009d92:	697a      	ldr	r2, [r7, #20]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d9e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	011b      	lsls	r3, r3, #4
 8009da4:	693a      	ldr	r2, [r7, #16]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	621a      	str	r2, [r3, #32]
}
 8009db6:	bf00      	nop
 8009db8:	371c      	adds	r7, #28
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr
	...

08009dc4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	4b09      	ldr	r3, [pc, #36]	; (8009dfc <TIM_ITRx_SetConfig+0x38>)
 8009dd8:	4013      	ands	r3, r2
 8009dda:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	f043 0307 	orr.w	r3, r3, #7
 8009de6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	609a      	str	r2, [r3, #8]
}
 8009dee:	bf00      	nop
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	ffcfff8f 	.word	0xffcfff8f

08009e00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b087      	sub	sp, #28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	607a      	str	r2, [r7, #4]
 8009e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e14:	697b      	ldr	r3, [r7, #20]
 8009e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	021a      	lsls	r2, r3, #8
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	431a      	orrs	r2, r3
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	697a      	ldr	r2, [r7, #20]
 8009e32:	609a      	str	r2, [r3, #8]
}
 8009e34:	bf00      	nop
 8009e36:	371c      	adds	r7, #28
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	f003 031f 	and.w	r3, r3, #31
 8009e52:	2201      	movs	r2, #1
 8009e54:	fa02 f303 	lsl.w	r3, r2, r3
 8009e58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6a1a      	ldr	r2, [r3, #32]
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	43db      	mvns	r3, r3
 8009e62:	401a      	ands	r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6a1a      	ldr	r2, [r3, #32]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	f003 031f 	and.w	r3, r3, #31
 8009e72:	6879      	ldr	r1, [r7, #4]
 8009e74:	fa01 f303 	lsl.w	r3, r1, r3
 8009e78:	431a      	orrs	r2, r3
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	621a      	str	r2, [r3, #32]
}
 8009e7e:	bf00      	nop
 8009e80:	371c      	adds	r7, #28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
	...

08009e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d101      	bne.n	8009ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	e068      	b.n	8009f76 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a2e      	ldr	r2, [pc, #184]	; (8009f84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d004      	beq.n	8009ed8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a2d      	ldr	r2, [pc, #180]	; (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d108      	bne.n	8009eea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009ede:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ef0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	68fa      	ldr	r2, [r7, #12]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a1e      	ldr	r2, [pc, #120]	; (8009f84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d01d      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f16:	d018      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a1b      	ldr	r2, [pc, #108]	; (8009f8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d013      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a1a      	ldr	r2, [pc, #104]	; (8009f90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d00e      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a18      	ldr	r2, [pc, #96]	; (8009f94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d009      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a13      	ldr	r2, [pc, #76]	; (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d004      	beq.n	8009f4a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a14      	ldr	r2, [pc, #80]	; (8009f98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d10c      	bne.n	8009f64 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68ba      	ldr	r2, [r7, #8]
 8009f62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3714      	adds	r7, #20
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	40010000 	.word	0x40010000
 8009f88:	40010400 	.word	0x40010400
 8009f8c:	40000400 	.word	0x40000400
 8009f90:	40000800 	.word	0x40000800
 8009f94:	40000c00 	.word	0x40000c00
 8009f98:	40001800 	.word	0x40001800

08009f9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d101      	bne.n	8009fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	e065      	b.n	800a084 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	4313      	orrs	r3, r2
 800a004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	695b      	ldr	r3, [r3, #20]
 800a010:	4313      	orrs	r3, r2
 800a012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a01e:	4313      	orrs	r3, r2
 800a020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	699b      	ldr	r3, [r3, #24]
 800a02c:	041b      	lsls	r3, r3, #16
 800a02e:	4313      	orrs	r3, r2
 800a030:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a16      	ldr	r2, [pc, #88]	; (800a090 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d004      	beq.n	800a046 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a14      	ldr	r2, [pc, #80]	; (800a094 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d115      	bne.n	800a072 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a050:	051b      	lsls	r3, r3, #20
 800a052:	4313      	orrs	r3, r2
 800a054:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	69db      	ldr	r3, [r3, #28]
 800a060:	4313      	orrs	r3, r2
 800a062:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	4313      	orrs	r3, r2
 800a070:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	40010000 	.word	0x40010000
 800a094:	40010400 	.word	0x40010400

0800a098 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e042      	b.n	800a16c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d106      	bne.n	800a0fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f7f8 fd4f 	bl	8002b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2224      	movs	r2, #36	; 0x24
 800a102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f022 0201 	bic.w	r2, r2, #1
 800a114:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fcb6 	bl	800aa88 <UART_SetConfig>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d101      	bne.n	800a126 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e022      	b.n	800a16c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d002      	beq.n	800a134 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f001 fa0a 	bl	800b548 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	685a      	ldr	r2, [r3, #4]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	689a      	ldr	r2, [r3, #8]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a152:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f042 0201 	orr.w	r2, r2, #1
 800a162:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f001 fa91 	bl	800b68c <UART_CheckIdleState>
 800a16a:	4603      	mov	r3, r0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b08a      	sub	sp, #40	; 0x28
 800a178:	af02      	add	r7, sp, #8
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	603b      	str	r3, [r7, #0]
 800a180:	4613      	mov	r3, r2
 800a182:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a18a:	2b20      	cmp	r3, #32
 800a18c:	f040 8083 	bne.w	800a296 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d002      	beq.n	800a19c <HAL_UART_Transmit+0x28>
 800a196:	88fb      	ldrh	r3, [r7, #6]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e07b      	b.n	800a298 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d101      	bne.n	800a1ae <HAL_UART_Transmit+0x3a>
 800a1aa:	2302      	movs	r3, #2
 800a1ac:	e074      	b.n	800a298 <HAL_UART_Transmit+0x124>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2221      	movs	r2, #33	; 0x21
 800a1c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1c6:	f7f9 f9d1 	bl	800356c <HAL_GetTick>
 800a1ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	88fa      	ldrh	r2, [r7, #6]
 800a1d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	88fa      	ldrh	r2, [r7, #6]
 800a1d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1e4:	d108      	bne.n	800a1f8 <HAL_UART_Transmit+0x84>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d104      	bne.n	800a1f8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	61bb      	str	r3, [r7, #24]
 800a1f6:	e003      	b.n	800a200 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a208:	e02c      	b.n	800a264 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	2200      	movs	r2, #0
 800a212:	2180      	movs	r1, #128	; 0x80
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f001 fa84 	bl	800b722 <UART_WaitOnFlagUntilTimeout>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d001      	beq.n	800a224 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a220:	2303      	movs	r3, #3
 800a222:	e039      	b.n	800a298 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d10b      	bne.n	800a242 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	881b      	ldrh	r3, [r3, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a238:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	3302      	adds	r3, #2
 800a23e:	61bb      	str	r3, [r7, #24]
 800a240:	e007      	b.n	800a252 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	781a      	ldrb	r2, [r3, #0]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	3301      	adds	r3, #1
 800a250:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a258:	b29b      	uxth	r3, r3
 800a25a:	3b01      	subs	r3, #1
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1cc      	bne.n	800a20a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	2200      	movs	r2, #0
 800a278:	2140      	movs	r1, #64	; 0x40
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f001 fa51 	bl	800b722 <UART_WaitOnFlagUntilTimeout>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d001      	beq.n	800a28a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e006      	b.n	800a298 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2220      	movs	r2, #32
 800a28e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	e000      	b.n	800a298 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a296:	2302      	movs	r3, #2
  }
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3720      	adds	r7, #32
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b08a      	sub	sp, #40	; 0x28
 800a2a4:	af02      	add	r7, sp, #8
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	603b      	str	r3, [r7, #0]
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2b6:	2b20      	cmp	r3, #32
 800a2b8:	f040 80c0 	bne.w	800a43c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d002      	beq.n	800a2c8 <HAL_UART_Receive+0x28>
 800a2c2:	88fb      	ldrh	r3, [r7, #6]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d101      	bne.n	800a2cc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e0b8      	b.n	800a43e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d101      	bne.n	800a2da <HAL_UART_Receive+0x3a>
 800a2d6:	2302      	movs	r3, #2
 800a2d8:	e0b1      	b.n	800a43e <HAL_UART_Receive+0x19e>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2222      	movs	r2, #34	; 0x22
 800a2ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2f8:	f7f9 f938 	bl	800356c <HAL_GetTick>
 800a2fc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	88fa      	ldrh	r2, [r7, #6]
 800a302:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	88fa      	ldrh	r2, [r7, #6]
 800a30a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a316:	d10e      	bne.n	800a336 <HAL_UART_Receive+0x96>
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d105      	bne.n	800a32c <HAL_UART_Receive+0x8c>
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a326:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a32a:	e02d      	b.n	800a388 <HAL_UART_Receive+0xe8>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	22ff      	movs	r2, #255	; 0xff
 800a330:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a334:	e028      	b.n	800a388 <HAL_UART_Receive+0xe8>
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10d      	bne.n	800a35a <HAL_UART_Receive+0xba>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d104      	bne.n	800a350 <HAL_UART_Receive+0xb0>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	22ff      	movs	r2, #255	; 0xff
 800a34a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a34e:	e01b      	b.n	800a388 <HAL_UART_Receive+0xe8>
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	227f      	movs	r2, #127	; 0x7f
 800a354:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a358:	e016      	b.n	800a388 <HAL_UART_Receive+0xe8>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a362:	d10d      	bne.n	800a380 <HAL_UART_Receive+0xe0>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d104      	bne.n	800a376 <HAL_UART_Receive+0xd6>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	227f      	movs	r2, #127	; 0x7f
 800a370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a374:	e008      	b.n	800a388 <HAL_UART_Receive+0xe8>
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	223f      	movs	r2, #63	; 0x3f
 800a37a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a37e:	e003      	b.n	800a388 <HAL_UART_Receive+0xe8>
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a38e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a398:	d108      	bne.n	800a3ac <HAL_UART_Receive+0x10c>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d104      	bne.n	800a3ac <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	61bb      	str	r3, [r7, #24]
 800a3aa:	e003      	b.n	800a3b4 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a3bc:	e032      	b.n	800a424 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	2120      	movs	r1, #32
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f001 f9aa 	bl	800b722 <UART_WaitOnFlagUntilTimeout>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e032      	b.n	800a43e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10c      	bne.n	800a3f8 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	8a7b      	ldrh	r3, [r7, #18]
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	3302      	adds	r3, #2
 800a3f4:	61bb      	str	r3, [r7, #24]
 800a3f6:	e00c      	b.n	800a412 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	8a7b      	ldrh	r3, [r7, #18]
 800a402:	b2db      	uxtb	r3, r3
 800a404:	4013      	ands	r3, r2
 800a406:	b2da      	uxtb	r2, r3
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	3301      	adds	r3, #1
 800a410:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a418:	b29b      	uxth	r3, r3
 800a41a:	3b01      	subs	r3, #1
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1c6      	bne.n	800a3be <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2220      	movs	r2, #32
 800a434:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a438:	2300      	movs	r3, #0
 800a43a:	e000      	b.n	800a43e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800a43c:	2302      	movs	r3, #2
  }
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3720      	adds	r7, #32
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
	...

0800a448 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	4613      	mov	r3, r2
 800a454:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a45c:	2b20      	cmp	r3, #32
 800a45e:	d131      	bne.n	800a4c4 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d002      	beq.n	800a46c <HAL_UART_Receive_IT+0x24>
 800a466:	88fb      	ldrh	r3, [r7, #6]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d101      	bne.n	800a470 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	e02a      	b.n	800a4c6 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a476:	2b01      	cmp	r3, #1
 800a478:	d101      	bne.n	800a47e <HAL_UART_Receive_IT+0x36>
 800a47a:	2302      	movs	r3, #2
 800a47c:	e023      	b.n	800a4c6 <HAL_UART_Receive_IT+0x7e>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2201      	movs	r2, #1
 800a482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a0f      	ldr	r2, [pc, #60]	; (800a4d0 <HAL_UART_Receive_IT+0x88>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d00e      	beq.n	800a4b4 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d007      	beq.n	800a4b4 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a4b2:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a4b4:	88fb      	ldrh	r3, [r7, #6]
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	68b9      	ldr	r1, [r7, #8]
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f001 f9b2 	bl	800b824 <UART_Start_Receive_IT>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	e000      	b.n	800a4c6 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800a4c4:	2302      	movs	r3, #2
  }
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	58000c00 	.word	0x58000c00

0800a4d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b088      	sub	sp, #32
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	69db      	ldr	r3, [r3, #28]
 800a4e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a4f4:	69fa      	ldr	r2, [r7, #28]
 800a4f6:	f640 030f 	movw	r3, #2063	; 0x80f
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d118      	bne.n	800a536 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	f003 0320 	and.w	r3, r3, #32
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d013      	beq.n	800a536 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	f003 0320 	and.w	r3, r3, #32
 800a514:	2b00      	cmp	r3, #0
 800a516:	d104      	bne.n	800a522 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d009      	beq.n	800a536 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a526:	2b00      	cmp	r3, #0
 800a528:	f000 8282 	beq.w	800aa30 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	4798      	blx	r3
      }
      return;
 800a534:	e27c      	b.n	800aa30 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f000 80ef 	beq.w	800a71c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	4b73      	ldr	r3, [pc, #460]	; (800a710 <HAL_UART_IRQHandler+0x23c>)
 800a542:	4013      	ands	r3, r2
 800a544:	2b00      	cmp	r3, #0
 800a546:	d105      	bne.n	800a554 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a548:	69ba      	ldr	r2, [r7, #24]
 800a54a:	4b72      	ldr	r3, [pc, #456]	; (800a714 <HAL_UART_IRQHandler+0x240>)
 800a54c:	4013      	ands	r3, r2
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f000 80e4 	beq.w	800a71c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	f003 0301 	and.w	r3, r3, #1
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d010      	beq.n	800a580 <HAL_UART_IRQHandler+0xac>
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a564:	2b00      	cmp	r3, #0
 800a566:	d00b      	beq.n	800a580 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2201      	movs	r2, #1
 800a56e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a576:	f043 0201 	orr.w	r2, r3, #1
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	f003 0302 	and.w	r3, r3, #2
 800a586:	2b00      	cmp	r3, #0
 800a588:	d010      	beq.n	800a5ac <HAL_UART_IRQHandler+0xd8>
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f003 0301 	and.w	r3, r3, #1
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00b      	beq.n	800a5ac <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2202      	movs	r2, #2
 800a59a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5a2:	f043 0204 	orr.w	r2, r3, #4
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	f003 0304 	and.w	r3, r3, #4
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d010      	beq.n	800a5d8 <HAL_UART_IRQHandler+0x104>
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00b      	beq.n	800a5d8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2204      	movs	r2, #4
 800a5c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a5ce:	f043 0202 	orr.w	r2, r3, #2
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	f003 0308 	and.w	r3, r3, #8
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d015      	beq.n	800a60e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	f003 0320 	and.w	r3, r3, #32
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d104      	bne.n	800a5f6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	4b48      	ldr	r3, [pc, #288]	; (800a710 <HAL_UART_IRQHandler+0x23c>)
 800a5f0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00b      	beq.n	800a60e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2208      	movs	r2, #8
 800a5fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a604:	f043 0208 	orr.w	r2, r3, #8
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a60e:	69fb      	ldr	r3, [r7, #28]
 800a610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a614:	2b00      	cmp	r3, #0
 800a616:	d011      	beq.n	800a63c <HAL_UART_IRQHandler+0x168>
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00c      	beq.n	800a63c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a62a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a632:	f043 0220 	orr.w	r2, r3, #32
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 81f6 	beq.w	800aa34 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a648:	69fb      	ldr	r3, [r7, #28]
 800a64a:	f003 0320 	and.w	r3, r3, #32
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d011      	beq.n	800a676 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	f003 0320 	and.w	r3, r3, #32
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d104      	bne.n	800a666 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a662:	2b00      	cmp	r3, #0
 800a664:	d007      	beq.n	800a676 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d003      	beq.n	800a676 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a67c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a688:	2b40      	cmp	r3, #64	; 0x40
 800a68a:	d004      	beq.n	800a696 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a692:	2b00      	cmp	r3, #0
 800a694:	d031      	beq.n	800a6fa <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f001 f982 	bl	800b9a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6a6:	2b40      	cmp	r3, #64	; 0x40
 800a6a8:	d123      	bne.n	800a6f2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	689a      	ldr	r2, [r3, #8]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6b8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d013      	beq.n	800a6ea <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6c6:	4a14      	ldr	r2, [pc, #80]	; (800a718 <HAL_UART_IRQHandler+0x244>)
 800a6c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7f9 fffc 	bl	80046cc <HAL_DMA_Abort_IT>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d017      	beq.n	800a70a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a6e4:	4610      	mov	r0, r2
 800a6e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6e8:	e00f      	b.n	800a70a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 f9b6 	bl	800aa5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6f0:	e00b      	b.n	800a70a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f000 f9b2 	bl	800aa5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6f8:	e007      	b.n	800a70a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f9ae 	bl	800aa5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a708:	e194      	b.n	800aa34 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a70a:	bf00      	nop
    return;
 800a70c:	e192      	b.n	800aa34 <HAL_UART_IRQHandler+0x560>
 800a70e:	bf00      	nop
 800a710:	10000001 	.word	0x10000001
 800a714:	04000120 	.word	0x04000120
 800a718:	0800ba05 	.word	0x0800ba05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a720:	2b01      	cmp	r3, #1
 800a722:	f040 810f 	bne.w	800a944 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	f003 0310 	and.w	r3, r3, #16
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f000 8109 	beq.w	800a944 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	f003 0310 	and.w	r3, r3, #16
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f000 8103 	beq.w	800a944 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2210      	movs	r2, #16
 800a744:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a750:	2b40      	cmp	r3, #64	; 0x40
 800a752:	f040 80bb 	bne.w	800a8cc <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a96      	ldr	r2, [pc, #600]	; (800a9b8 <HAL_UART_IRQHandler+0x4e4>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d059      	beq.n	800a816 <HAL_UART_IRQHandler+0x342>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a94      	ldr	r2, [pc, #592]	; (800a9bc <HAL_UART_IRQHandler+0x4e8>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d053      	beq.n	800a816 <HAL_UART_IRQHandler+0x342>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a92      	ldr	r2, [pc, #584]	; (800a9c0 <HAL_UART_IRQHandler+0x4ec>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d04d      	beq.n	800a816 <HAL_UART_IRQHandler+0x342>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a90      	ldr	r2, [pc, #576]	; (800a9c4 <HAL_UART_IRQHandler+0x4f0>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d047      	beq.n	800a816 <HAL_UART_IRQHandler+0x342>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a8e      	ldr	r2, [pc, #568]	; (800a9c8 <HAL_UART_IRQHandler+0x4f4>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d041      	beq.n	800a816 <HAL_UART_IRQHandler+0x342>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a8c      	ldr	r2, [pc, #560]	; (800a9cc <HAL_UART_IRQHandler+0x4f8>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d03b      	beq.n	800a816 <HAL_UART_IRQHandler+0x342>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a8a      	ldr	r2, [pc, #552]	; (800a9d0 <HAL_UART_IRQHandler+0x4fc>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d035      	beq.n	800a816 <HAL_UART_IRQHandler+0x342>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a88      	ldr	r2, [pc, #544]	; (800a9d4 <HAL_UART_IRQHandler+0x500>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d02f      	beq.n	800a816 <HAL_UART_IRQHandler+0x342>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a86      	ldr	r2, [pc, #536]	; (800a9d8 <HAL_UART_IRQHandler+0x504>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d029      	beq.n	800a816 <HAL_UART_IRQHandler+0x342>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a84      	ldr	r2, [pc, #528]	; (800a9dc <HAL_UART_IRQHandler+0x508>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d023      	beq.n	800a816 <HAL_UART_IRQHandler+0x342>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a82      	ldr	r2, [pc, #520]	; (800a9e0 <HAL_UART_IRQHandler+0x50c>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d01d      	beq.n	800a816 <HAL_UART_IRQHandler+0x342>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a80      	ldr	r2, [pc, #512]	; (800a9e4 <HAL_UART_IRQHandler+0x510>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d017      	beq.n	800a816 <HAL_UART_IRQHandler+0x342>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a7e      	ldr	r2, [pc, #504]	; (800a9e8 <HAL_UART_IRQHandler+0x514>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d011      	beq.n	800a816 <HAL_UART_IRQHandler+0x342>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a7c      	ldr	r2, [pc, #496]	; (800a9ec <HAL_UART_IRQHandler+0x518>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d00b      	beq.n	800a816 <HAL_UART_IRQHandler+0x342>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a7a      	ldr	r2, [pc, #488]	; (800a9f0 <HAL_UART_IRQHandler+0x51c>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d005      	beq.n	800a816 <HAL_UART_IRQHandler+0x342>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a78      	ldr	r2, [pc, #480]	; (800a9f4 <HAL_UART_IRQHandler+0x520>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d105      	bne.n	800a822 <HAL_UART_IRQHandler+0x34e>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	b29b      	uxth	r3, r3
 800a820:	e004      	b.n	800a82c <HAL_UART_IRQHandler+0x358>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800a82e:	893b      	ldrh	r3, [r7, #8]
 800a830:	2b00      	cmp	r3, #0
 800a832:	f000 8101 	beq.w	800aa38 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a83c:	893a      	ldrh	r2, [r7, #8]
 800a83e:	429a      	cmp	r2, r3
 800a840:	f080 80fa 	bcs.w	800aa38 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	893a      	ldrh	r2, [r7, #8]
 800a848:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a850:	69db      	ldr	r3, [r3, #28]
 800a852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a856:	d02b      	beq.n	800a8b0 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a866:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	689a      	ldr	r2, [r3, #8]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f022 0201 	bic.w	r2, r2, #1
 800a876:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	689a      	ldr	r2, [r3, #8]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a886:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2220      	movs	r2, #32
 800a88c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f022 0210 	bic.w	r2, r2, #16
 800a8a4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7f9 fbf0 	bl	8004090 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	1ad3      	subs	r3, r2, r3
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 f8d3 	bl	800aa70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a8ca:	e0b5      	b.n	800aa38 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f000 80a8 	beq.w	800aa3c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800a8ec:	897b      	ldrh	r3, [r7, #10]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 80a4 	beq.w	800aa3c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a902:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	6899      	ldr	r1, [r3, #8]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	4b3a      	ldr	r3, [pc, #232]	; (800a9f8 <HAL_UART_IRQHandler+0x524>)
 800a910:	400b      	ands	r3, r1
 800a912:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2220      	movs	r2, #32
 800a918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f022 0210 	bic.w	r2, r2, #16
 800a936:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a938:	897b      	ldrh	r3, [r7, #10]
 800a93a:	4619      	mov	r1, r3
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 f897 	bl	800aa70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a942:	e07b      	b.n	800aa3c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00d      	beq.n	800a96a <HAL_UART_IRQHandler+0x496>
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d008      	beq.n	800a96a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a960:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f001 fb5a 	bl	800c01c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a968:	e06b      	b.n	800aa42 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a970:	2b00      	cmp	r3, #0
 800a972:	d012      	beq.n	800a99a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a974:	69bb      	ldr	r3, [r7, #24]
 800a976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d104      	bne.n	800a988 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a984:	2b00      	cmp	r3, #0
 800a986:	d008      	beq.n	800a99a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d057      	beq.n	800aa40 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	4798      	blx	r3
    }
    return;
 800a998:	e052      	b.n	800aa40 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d02b      	beq.n	800a9fc <HAL_UART_IRQHandler+0x528>
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d026      	beq.n	800a9fc <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f001 f83e 	bl	800ba30 <UART_EndTransmit_IT>
    return;
 800a9b4:	e045      	b.n	800aa42 <HAL_UART_IRQHandler+0x56e>
 800a9b6:	bf00      	nop
 800a9b8:	40020010 	.word	0x40020010
 800a9bc:	40020028 	.word	0x40020028
 800a9c0:	40020040 	.word	0x40020040
 800a9c4:	40020058 	.word	0x40020058
 800a9c8:	40020070 	.word	0x40020070
 800a9cc:	40020088 	.word	0x40020088
 800a9d0:	400200a0 	.word	0x400200a0
 800a9d4:	400200b8 	.word	0x400200b8
 800a9d8:	40020410 	.word	0x40020410
 800a9dc:	40020428 	.word	0x40020428
 800a9e0:	40020440 	.word	0x40020440
 800a9e4:	40020458 	.word	0x40020458
 800a9e8:	40020470 	.word	0x40020470
 800a9ec:	40020488 	.word	0x40020488
 800a9f0:	400204a0 	.word	0x400204a0
 800a9f4:	400204b8 	.word	0x400204b8
 800a9f8:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d008      	beq.n	800aa18 <HAL_UART_IRQHandler+0x544>
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d003      	beq.n	800aa18 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f001 fb17 	bl	800c044 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa16:	e014      	b.n	800aa42 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00f      	beq.n	800aa42 <HAL_UART_IRQHandler+0x56e>
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	da0c      	bge.n	800aa42 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f001 fb01 	bl	800c030 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa2e:	e008      	b.n	800aa42 <HAL_UART_IRQHandler+0x56e>
      return;
 800aa30:	bf00      	nop
 800aa32:	e006      	b.n	800aa42 <HAL_UART_IRQHandler+0x56e>
    return;
 800aa34:	bf00      	nop
 800aa36:	e004      	b.n	800aa42 <HAL_UART_IRQHandler+0x56e>
      return;
 800aa38:	bf00      	nop
 800aa3a:	e002      	b.n	800aa42 <HAL_UART_IRQHandler+0x56e>
      return;
 800aa3c:	bf00      	nop
 800aa3e:	e000      	b.n	800aa42 <HAL_UART_IRQHandler+0x56e>
    return;
 800aa40:	bf00      	nop
  }
}
 800aa42:	3720      	adds	r7, #32
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aa50:	bf00      	nop
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aa64:	bf00      	nop
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	460b      	mov	r3, r1
 800aa7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa7c:	bf00      	nop
 800aa7e:	370c      	adds	r7, #12
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aa88:	b5b0      	push	{r4, r5, r7, lr}
 800aa8a:	b08e      	sub	sp, #56	; 0x38
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aa90:	2300      	movs	r3, #0
 800aa92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	689a      	ldr	r2, [r3, #8]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	431a      	orrs	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	695b      	ldr	r3, [r3, #20]
 800aaa4:	431a      	orrs	r2, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	4bbf      	ldr	r3, [pc, #764]	; (800adb4 <UART_SetConfig+0x32c>)
 800aab6:	4013      	ands	r3, r2
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	6812      	ldr	r2, [r2, #0]
 800aabc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aabe:	430b      	orrs	r3, r1
 800aac0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	68da      	ldr	r2, [r3, #12]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	430a      	orrs	r2, r1
 800aad6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	699b      	ldr	r3, [r3, #24]
 800aadc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4ab5      	ldr	r2, [pc, #724]	; (800adb8 <UART_SetConfig+0x330>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d004      	beq.n	800aaf2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a1b      	ldr	r3, [r3, #32]
 800aaec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	689a      	ldr	r2, [r3, #8]
 800aaf8:	4bb0      	ldr	r3, [pc, #704]	; (800adbc <UART_SetConfig+0x334>)
 800aafa:	4013      	ands	r3, r2
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	6812      	ldr	r2, [r2, #0]
 800ab00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab02:	430b      	orrs	r3, r1
 800ab04:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab0c:	f023 010f 	bic.w	r1, r3, #15
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	430a      	orrs	r2, r1
 800ab1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4aa7      	ldr	r2, [pc, #668]	; (800adc0 <UART_SetConfig+0x338>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d176      	bne.n	800ac14 <UART_SetConfig+0x18c>
 800ab26:	4ba7      	ldr	r3, [pc, #668]	; (800adc4 <UART_SetConfig+0x33c>)
 800ab28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab2e:	2b28      	cmp	r3, #40	; 0x28
 800ab30:	d86c      	bhi.n	800ac0c <UART_SetConfig+0x184>
 800ab32:	a201      	add	r2, pc, #4	; (adr r2, 800ab38 <UART_SetConfig+0xb0>)
 800ab34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab38:	0800abdd 	.word	0x0800abdd
 800ab3c:	0800ac0d 	.word	0x0800ac0d
 800ab40:	0800ac0d 	.word	0x0800ac0d
 800ab44:	0800ac0d 	.word	0x0800ac0d
 800ab48:	0800ac0d 	.word	0x0800ac0d
 800ab4c:	0800ac0d 	.word	0x0800ac0d
 800ab50:	0800ac0d 	.word	0x0800ac0d
 800ab54:	0800ac0d 	.word	0x0800ac0d
 800ab58:	0800abe5 	.word	0x0800abe5
 800ab5c:	0800ac0d 	.word	0x0800ac0d
 800ab60:	0800ac0d 	.word	0x0800ac0d
 800ab64:	0800ac0d 	.word	0x0800ac0d
 800ab68:	0800ac0d 	.word	0x0800ac0d
 800ab6c:	0800ac0d 	.word	0x0800ac0d
 800ab70:	0800ac0d 	.word	0x0800ac0d
 800ab74:	0800ac0d 	.word	0x0800ac0d
 800ab78:	0800abed 	.word	0x0800abed
 800ab7c:	0800ac0d 	.word	0x0800ac0d
 800ab80:	0800ac0d 	.word	0x0800ac0d
 800ab84:	0800ac0d 	.word	0x0800ac0d
 800ab88:	0800ac0d 	.word	0x0800ac0d
 800ab8c:	0800ac0d 	.word	0x0800ac0d
 800ab90:	0800ac0d 	.word	0x0800ac0d
 800ab94:	0800ac0d 	.word	0x0800ac0d
 800ab98:	0800abf5 	.word	0x0800abf5
 800ab9c:	0800ac0d 	.word	0x0800ac0d
 800aba0:	0800ac0d 	.word	0x0800ac0d
 800aba4:	0800ac0d 	.word	0x0800ac0d
 800aba8:	0800ac0d 	.word	0x0800ac0d
 800abac:	0800ac0d 	.word	0x0800ac0d
 800abb0:	0800ac0d 	.word	0x0800ac0d
 800abb4:	0800ac0d 	.word	0x0800ac0d
 800abb8:	0800abfd 	.word	0x0800abfd
 800abbc:	0800ac0d 	.word	0x0800ac0d
 800abc0:	0800ac0d 	.word	0x0800ac0d
 800abc4:	0800ac0d 	.word	0x0800ac0d
 800abc8:	0800ac0d 	.word	0x0800ac0d
 800abcc:	0800ac0d 	.word	0x0800ac0d
 800abd0:	0800ac0d 	.word	0x0800ac0d
 800abd4:	0800ac0d 	.word	0x0800ac0d
 800abd8:	0800ac05 	.word	0x0800ac05
 800abdc:	2301      	movs	r3, #1
 800abde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abe2:	e222      	b.n	800b02a <UART_SetConfig+0x5a2>
 800abe4:	2304      	movs	r3, #4
 800abe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abea:	e21e      	b.n	800b02a <UART_SetConfig+0x5a2>
 800abec:	2308      	movs	r3, #8
 800abee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abf2:	e21a      	b.n	800b02a <UART_SetConfig+0x5a2>
 800abf4:	2310      	movs	r3, #16
 800abf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800abfa:	e216      	b.n	800b02a <UART_SetConfig+0x5a2>
 800abfc:	2320      	movs	r3, #32
 800abfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac02:	e212      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ac04:	2340      	movs	r3, #64	; 0x40
 800ac06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac0a:	e20e      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ac0c:	2380      	movs	r3, #128	; 0x80
 800ac0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac12:	e20a      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a6b      	ldr	r2, [pc, #428]	; (800adc8 <UART_SetConfig+0x340>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d130      	bne.n	800ac80 <UART_SetConfig+0x1f8>
 800ac1e:	4b69      	ldr	r3, [pc, #420]	; (800adc4 <UART_SetConfig+0x33c>)
 800ac20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac22:	f003 0307 	and.w	r3, r3, #7
 800ac26:	2b05      	cmp	r3, #5
 800ac28:	d826      	bhi.n	800ac78 <UART_SetConfig+0x1f0>
 800ac2a:	a201      	add	r2, pc, #4	; (adr r2, 800ac30 <UART_SetConfig+0x1a8>)
 800ac2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac30:	0800ac49 	.word	0x0800ac49
 800ac34:	0800ac51 	.word	0x0800ac51
 800ac38:	0800ac59 	.word	0x0800ac59
 800ac3c:	0800ac61 	.word	0x0800ac61
 800ac40:	0800ac69 	.word	0x0800ac69
 800ac44:	0800ac71 	.word	0x0800ac71
 800ac48:	2300      	movs	r3, #0
 800ac4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac4e:	e1ec      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ac50:	2304      	movs	r3, #4
 800ac52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac56:	e1e8      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ac58:	2308      	movs	r3, #8
 800ac5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac5e:	e1e4      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ac60:	2310      	movs	r3, #16
 800ac62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac66:	e1e0      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ac68:	2320      	movs	r3, #32
 800ac6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac6e:	e1dc      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ac70:	2340      	movs	r3, #64	; 0x40
 800ac72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac76:	e1d8      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ac78:	2380      	movs	r3, #128	; 0x80
 800ac7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac7e:	e1d4      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a51      	ldr	r2, [pc, #324]	; (800adcc <UART_SetConfig+0x344>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d130      	bne.n	800acec <UART_SetConfig+0x264>
 800ac8a:	4b4e      	ldr	r3, [pc, #312]	; (800adc4 <UART_SetConfig+0x33c>)
 800ac8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac8e:	f003 0307 	and.w	r3, r3, #7
 800ac92:	2b05      	cmp	r3, #5
 800ac94:	d826      	bhi.n	800ace4 <UART_SetConfig+0x25c>
 800ac96:	a201      	add	r2, pc, #4	; (adr r2, 800ac9c <UART_SetConfig+0x214>)
 800ac98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac9c:	0800acb5 	.word	0x0800acb5
 800aca0:	0800acbd 	.word	0x0800acbd
 800aca4:	0800acc5 	.word	0x0800acc5
 800aca8:	0800accd 	.word	0x0800accd
 800acac:	0800acd5 	.word	0x0800acd5
 800acb0:	0800acdd 	.word	0x0800acdd
 800acb4:	2300      	movs	r3, #0
 800acb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acba:	e1b6      	b.n	800b02a <UART_SetConfig+0x5a2>
 800acbc:	2304      	movs	r3, #4
 800acbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acc2:	e1b2      	b.n	800b02a <UART_SetConfig+0x5a2>
 800acc4:	2308      	movs	r3, #8
 800acc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acca:	e1ae      	b.n	800b02a <UART_SetConfig+0x5a2>
 800accc:	2310      	movs	r3, #16
 800acce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acd2:	e1aa      	b.n	800b02a <UART_SetConfig+0x5a2>
 800acd4:	2320      	movs	r3, #32
 800acd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acda:	e1a6      	b.n	800b02a <UART_SetConfig+0x5a2>
 800acdc:	2340      	movs	r3, #64	; 0x40
 800acde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ace2:	e1a2      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ace4:	2380      	movs	r3, #128	; 0x80
 800ace6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acea:	e19e      	b.n	800b02a <UART_SetConfig+0x5a2>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a37      	ldr	r2, [pc, #220]	; (800add0 <UART_SetConfig+0x348>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d130      	bne.n	800ad58 <UART_SetConfig+0x2d0>
 800acf6:	4b33      	ldr	r3, [pc, #204]	; (800adc4 <UART_SetConfig+0x33c>)
 800acf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acfa:	f003 0307 	and.w	r3, r3, #7
 800acfe:	2b05      	cmp	r3, #5
 800ad00:	d826      	bhi.n	800ad50 <UART_SetConfig+0x2c8>
 800ad02:	a201      	add	r2, pc, #4	; (adr r2, 800ad08 <UART_SetConfig+0x280>)
 800ad04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad08:	0800ad21 	.word	0x0800ad21
 800ad0c:	0800ad29 	.word	0x0800ad29
 800ad10:	0800ad31 	.word	0x0800ad31
 800ad14:	0800ad39 	.word	0x0800ad39
 800ad18:	0800ad41 	.word	0x0800ad41
 800ad1c:	0800ad49 	.word	0x0800ad49
 800ad20:	2300      	movs	r3, #0
 800ad22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad26:	e180      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ad28:	2304      	movs	r3, #4
 800ad2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad2e:	e17c      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ad30:	2308      	movs	r3, #8
 800ad32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad36:	e178      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ad38:	2310      	movs	r3, #16
 800ad3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad3e:	e174      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ad40:	2320      	movs	r3, #32
 800ad42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad46:	e170      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ad48:	2340      	movs	r3, #64	; 0x40
 800ad4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad4e:	e16c      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ad50:	2380      	movs	r3, #128	; 0x80
 800ad52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad56:	e168      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a1d      	ldr	r2, [pc, #116]	; (800add4 <UART_SetConfig+0x34c>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d142      	bne.n	800ade8 <UART_SetConfig+0x360>
 800ad62:	4b18      	ldr	r3, [pc, #96]	; (800adc4 <UART_SetConfig+0x33c>)
 800ad64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad66:	f003 0307 	and.w	r3, r3, #7
 800ad6a:	2b05      	cmp	r3, #5
 800ad6c:	d838      	bhi.n	800ade0 <UART_SetConfig+0x358>
 800ad6e:	a201      	add	r2, pc, #4	; (adr r2, 800ad74 <UART_SetConfig+0x2ec>)
 800ad70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad74:	0800ad8d 	.word	0x0800ad8d
 800ad78:	0800ad95 	.word	0x0800ad95
 800ad7c:	0800ad9d 	.word	0x0800ad9d
 800ad80:	0800ada5 	.word	0x0800ada5
 800ad84:	0800adad 	.word	0x0800adad
 800ad88:	0800add9 	.word	0x0800add9
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad92:	e14a      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ad94:	2304      	movs	r3, #4
 800ad96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad9a:	e146      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ad9c:	2308      	movs	r3, #8
 800ad9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ada2:	e142      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ada4:	2310      	movs	r3, #16
 800ada6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adaa:	e13e      	b.n	800b02a <UART_SetConfig+0x5a2>
 800adac:	2320      	movs	r3, #32
 800adae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adb2:	e13a      	b.n	800b02a <UART_SetConfig+0x5a2>
 800adb4:	cfff69f3 	.word	0xcfff69f3
 800adb8:	58000c00 	.word	0x58000c00
 800adbc:	11fff4ff 	.word	0x11fff4ff
 800adc0:	40011000 	.word	0x40011000
 800adc4:	58024400 	.word	0x58024400
 800adc8:	40004400 	.word	0x40004400
 800adcc:	40004800 	.word	0x40004800
 800add0:	40004c00 	.word	0x40004c00
 800add4:	40005000 	.word	0x40005000
 800add8:	2340      	movs	r3, #64	; 0x40
 800adda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adde:	e124      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ade0:	2380      	movs	r3, #128	; 0x80
 800ade2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ade6:	e120      	b.n	800b02a <UART_SetConfig+0x5a2>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4acc      	ldr	r2, [pc, #816]	; (800b120 <UART_SetConfig+0x698>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d176      	bne.n	800aee0 <UART_SetConfig+0x458>
 800adf2:	4bcc      	ldr	r3, [pc, #816]	; (800b124 <UART_SetConfig+0x69c>)
 800adf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adfa:	2b28      	cmp	r3, #40	; 0x28
 800adfc:	d86c      	bhi.n	800aed8 <UART_SetConfig+0x450>
 800adfe:	a201      	add	r2, pc, #4	; (adr r2, 800ae04 <UART_SetConfig+0x37c>)
 800ae00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae04:	0800aea9 	.word	0x0800aea9
 800ae08:	0800aed9 	.word	0x0800aed9
 800ae0c:	0800aed9 	.word	0x0800aed9
 800ae10:	0800aed9 	.word	0x0800aed9
 800ae14:	0800aed9 	.word	0x0800aed9
 800ae18:	0800aed9 	.word	0x0800aed9
 800ae1c:	0800aed9 	.word	0x0800aed9
 800ae20:	0800aed9 	.word	0x0800aed9
 800ae24:	0800aeb1 	.word	0x0800aeb1
 800ae28:	0800aed9 	.word	0x0800aed9
 800ae2c:	0800aed9 	.word	0x0800aed9
 800ae30:	0800aed9 	.word	0x0800aed9
 800ae34:	0800aed9 	.word	0x0800aed9
 800ae38:	0800aed9 	.word	0x0800aed9
 800ae3c:	0800aed9 	.word	0x0800aed9
 800ae40:	0800aed9 	.word	0x0800aed9
 800ae44:	0800aeb9 	.word	0x0800aeb9
 800ae48:	0800aed9 	.word	0x0800aed9
 800ae4c:	0800aed9 	.word	0x0800aed9
 800ae50:	0800aed9 	.word	0x0800aed9
 800ae54:	0800aed9 	.word	0x0800aed9
 800ae58:	0800aed9 	.word	0x0800aed9
 800ae5c:	0800aed9 	.word	0x0800aed9
 800ae60:	0800aed9 	.word	0x0800aed9
 800ae64:	0800aec1 	.word	0x0800aec1
 800ae68:	0800aed9 	.word	0x0800aed9
 800ae6c:	0800aed9 	.word	0x0800aed9
 800ae70:	0800aed9 	.word	0x0800aed9
 800ae74:	0800aed9 	.word	0x0800aed9
 800ae78:	0800aed9 	.word	0x0800aed9
 800ae7c:	0800aed9 	.word	0x0800aed9
 800ae80:	0800aed9 	.word	0x0800aed9
 800ae84:	0800aec9 	.word	0x0800aec9
 800ae88:	0800aed9 	.word	0x0800aed9
 800ae8c:	0800aed9 	.word	0x0800aed9
 800ae90:	0800aed9 	.word	0x0800aed9
 800ae94:	0800aed9 	.word	0x0800aed9
 800ae98:	0800aed9 	.word	0x0800aed9
 800ae9c:	0800aed9 	.word	0x0800aed9
 800aea0:	0800aed9 	.word	0x0800aed9
 800aea4:	0800aed1 	.word	0x0800aed1
 800aea8:	2301      	movs	r3, #1
 800aeaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeae:	e0bc      	b.n	800b02a <UART_SetConfig+0x5a2>
 800aeb0:	2304      	movs	r3, #4
 800aeb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeb6:	e0b8      	b.n	800b02a <UART_SetConfig+0x5a2>
 800aeb8:	2308      	movs	r3, #8
 800aeba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aebe:	e0b4      	b.n	800b02a <UART_SetConfig+0x5a2>
 800aec0:	2310      	movs	r3, #16
 800aec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aec6:	e0b0      	b.n	800b02a <UART_SetConfig+0x5a2>
 800aec8:	2320      	movs	r3, #32
 800aeca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aece:	e0ac      	b.n	800b02a <UART_SetConfig+0x5a2>
 800aed0:	2340      	movs	r3, #64	; 0x40
 800aed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aed6:	e0a8      	b.n	800b02a <UART_SetConfig+0x5a2>
 800aed8:	2380      	movs	r3, #128	; 0x80
 800aeda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aede:	e0a4      	b.n	800b02a <UART_SetConfig+0x5a2>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a90      	ldr	r2, [pc, #576]	; (800b128 <UART_SetConfig+0x6a0>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d130      	bne.n	800af4c <UART_SetConfig+0x4c4>
 800aeea:	4b8e      	ldr	r3, [pc, #568]	; (800b124 <UART_SetConfig+0x69c>)
 800aeec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeee:	f003 0307 	and.w	r3, r3, #7
 800aef2:	2b05      	cmp	r3, #5
 800aef4:	d826      	bhi.n	800af44 <UART_SetConfig+0x4bc>
 800aef6:	a201      	add	r2, pc, #4	; (adr r2, 800aefc <UART_SetConfig+0x474>)
 800aef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefc:	0800af15 	.word	0x0800af15
 800af00:	0800af1d 	.word	0x0800af1d
 800af04:	0800af25 	.word	0x0800af25
 800af08:	0800af2d 	.word	0x0800af2d
 800af0c:	0800af35 	.word	0x0800af35
 800af10:	0800af3d 	.word	0x0800af3d
 800af14:	2300      	movs	r3, #0
 800af16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af1a:	e086      	b.n	800b02a <UART_SetConfig+0x5a2>
 800af1c:	2304      	movs	r3, #4
 800af1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af22:	e082      	b.n	800b02a <UART_SetConfig+0x5a2>
 800af24:	2308      	movs	r3, #8
 800af26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af2a:	e07e      	b.n	800b02a <UART_SetConfig+0x5a2>
 800af2c:	2310      	movs	r3, #16
 800af2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af32:	e07a      	b.n	800b02a <UART_SetConfig+0x5a2>
 800af34:	2320      	movs	r3, #32
 800af36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af3a:	e076      	b.n	800b02a <UART_SetConfig+0x5a2>
 800af3c:	2340      	movs	r3, #64	; 0x40
 800af3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af42:	e072      	b.n	800b02a <UART_SetConfig+0x5a2>
 800af44:	2380      	movs	r3, #128	; 0x80
 800af46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af4a:	e06e      	b.n	800b02a <UART_SetConfig+0x5a2>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a76      	ldr	r2, [pc, #472]	; (800b12c <UART_SetConfig+0x6a4>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d130      	bne.n	800afb8 <UART_SetConfig+0x530>
 800af56:	4b73      	ldr	r3, [pc, #460]	; (800b124 <UART_SetConfig+0x69c>)
 800af58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af5a:	f003 0307 	and.w	r3, r3, #7
 800af5e:	2b05      	cmp	r3, #5
 800af60:	d826      	bhi.n	800afb0 <UART_SetConfig+0x528>
 800af62:	a201      	add	r2, pc, #4	; (adr r2, 800af68 <UART_SetConfig+0x4e0>)
 800af64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af68:	0800af81 	.word	0x0800af81
 800af6c:	0800af89 	.word	0x0800af89
 800af70:	0800af91 	.word	0x0800af91
 800af74:	0800af99 	.word	0x0800af99
 800af78:	0800afa1 	.word	0x0800afa1
 800af7c:	0800afa9 	.word	0x0800afa9
 800af80:	2300      	movs	r3, #0
 800af82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af86:	e050      	b.n	800b02a <UART_SetConfig+0x5a2>
 800af88:	2304      	movs	r3, #4
 800af8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af8e:	e04c      	b.n	800b02a <UART_SetConfig+0x5a2>
 800af90:	2308      	movs	r3, #8
 800af92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af96:	e048      	b.n	800b02a <UART_SetConfig+0x5a2>
 800af98:	2310      	movs	r3, #16
 800af9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af9e:	e044      	b.n	800b02a <UART_SetConfig+0x5a2>
 800afa0:	2320      	movs	r3, #32
 800afa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afa6:	e040      	b.n	800b02a <UART_SetConfig+0x5a2>
 800afa8:	2340      	movs	r3, #64	; 0x40
 800afaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afae:	e03c      	b.n	800b02a <UART_SetConfig+0x5a2>
 800afb0:	2380      	movs	r3, #128	; 0x80
 800afb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afb6:	e038      	b.n	800b02a <UART_SetConfig+0x5a2>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a5c      	ldr	r2, [pc, #368]	; (800b130 <UART_SetConfig+0x6a8>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d130      	bne.n	800b024 <UART_SetConfig+0x59c>
 800afc2:	4b58      	ldr	r3, [pc, #352]	; (800b124 <UART_SetConfig+0x69c>)
 800afc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afc6:	f003 0307 	and.w	r3, r3, #7
 800afca:	2b05      	cmp	r3, #5
 800afcc:	d826      	bhi.n	800b01c <UART_SetConfig+0x594>
 800afce:	a201      	add	r2, pc, #4	; (adr r2, 800afd4 <UART_SetConfig+0x54c>)
 800afd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd4:	0800afed 	.word	0x0800afed
 800afd8:	0800aff5 	.word	0x0800aff5
 800afdc:	0800affd 	.word	0x0800affd
 800afe0:	0800b005 	.word	0x0800b005
 800afe4:	0800b00d 	.word	0x0800b00d
 800afe8:	0800b015 	.word	0x0800b015
 800afec:	2302      	movs	r3, #2
 800afee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aff2:	e01a      	b.n	800b02a <UART_SetConfig+0x5a2>
 800aff4:	2304      	movs	r3, #4
 800aff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800affa:	e016      	b.n	800b02a <UART_SetConfig+0x5a2>
 800affc:	2308      	movs	r3, #8
 800affe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b002:	e012      	b.n	800b02a <UART_SetConfig+0x5a2>
 800b004:	2310      	movs	r3, #16
 800b006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b00a:	e00e      	b.n	800b02a <UART_SetConfig+0x5a2>
 800b00c:	2320      	movs	r3, #32
 800b00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b012:	e00a      	b.n	800b02a <UART_SetConfig+0x5a2>
 800b014:	2340      	movs	r3, #64	; 0x40
 800b016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b01a:	e006      	b.n	800b02a <UART_SetConfig+0x5a2>
 800b01c:	2380      	movs	r3, #128	; 0x80
 800b01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b022:	e002      	b.n	800b02a <UART_SetConfig+0x5a2>
 800b024:	2380      	movs	r3, #128	; 0x80
 800b026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a40      	ldr	r2, [pc, #256]	; (800b130 <UART_SetConfig+0x6a8>)
 800b030:	4293      	cmp	r3, r2
 800b032:	f040 80ef 	bne.w	800b214 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b036:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b03a:	2b20      	cmp	r3, #32
 800b03c:	dc46      	bgt.n	800b0cc <UART_SetConfig+0x644>
 800b03e:	2b02      	cmp	r3, #2
 800b040:	f2c0 8081 	blt.w	800b146 <UART_SetConfig+0x6be>
 800b044:	3b02      	subs	r3, #2
 800b046:	2b1e      	cmp	r3, #30
 800b048:	d87d      	bhi.n	800b146 <UART_SetConfig+0x6be>
 800b04a:	a201      	add	r2, pc, #4	; (adr r2, 800b050 <UART_SetConfig+0x5c8>)
 800b04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b050:	0800b0d3 	.word	0x0800b0d3
 800b054:	0800b147 	.word	0x0800b147
 800b058:	0800b0db 	.word	0x0800b0db
 800b05c:	0800b147 	.word	0x0800b147
 800b060:	0800b147 	.word	0x0800b147
 800b064:	0800b147 	.word	0x0800b147
 800b068:	0800b0eb 	.word	0x0800b0eb
 800b06c:	0800b147 	.word	0x0800b147
 800b070:	0800b147 	.word	0x0800b147
 800b074:	0800b147 	.word	0x0800b147
 800b078:	0800b147 	.word	0x0800b147
 800b07c:	0800b147 	.word	0x0800b147
 800b080:	0800b147 	.word	0x0800b147
 800b084:	0800b147 	.word	0x0800b147
 800b088:	0800b0fb 	.word	0x0800b0fb
 800b08c:	0800b147 	.word	0x0800b147
 800b090:	0800b147 	.word	0x0800b147
 800b094:	0800b147 	.word	0x0800b147
 800b098:	0800b147 	.word	0x0800b147
 800b09c:	0800b147 	.word	0x0800b147
 800b0a0:	0800b147 	.word	0x0800b147
 800b0a4:	0800b147 	.word	0x0800b147
 800b0a8:	0800b147 	.word	0x0800b147
 800b0ac:	0800b147 	.word	0x0800b147
 800b0b0:	0800b147 	.word	0x0800b147
 800b0b4:	0800b147 	.word	0x0800b147
 800b0b8:	0800b147 	.word	0x0800b147
 800b0bc:	0800b147 	.word	0x0800b147
 800b0c0:	0800b147 	.word	0x0800b147
 800b0c4:	0800b147 	.word	0x0800b147
 800b0c8:	0800b139 	.word	0x0800b139
 800b0cc:	2b40      	cmp	r3, #64	; 0x40
 800b0ce:	d036      	beq.n	800b13e <UART_SetConfig+0x6b6>
 800b0d0:	e039      	b.n	800b146 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b0d2:	f7fc ff9f 	bl	8008014 <HAL_RCCEx_GetD3PCLK1Freq>
 800b0d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b0d8:	e03b      	b.n	800b152 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0da:	f107 0314 	add.w	r3, r7, #20
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fc ffae 	bl	8008040 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0e8:	e033      	b.n	800b152 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0ea:	f107 0308 	add.w	r3, r7, #8
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fd f8fa 	bl	80082e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0f8:	e02b      	b.n	800b152 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0fa:	4b0a      	ldr	r3, [pc, #40]	; (800b124 <UART_SetConfig+0x69c>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f003 0320 	and.w	r3, r3, #32
 800b102:	2b00      	cmp	r3, #0
 800b104:	d009      	beq.n	800b11a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b106:	4b07      	ldr	r3, [pc, #28]	; (800b124 <UART_SetConfig+0x69c>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	08db      	lsrs	r3, r3, #3
 800b10c:	f003 0303 	and.w	r3, r3, #3
 800b110:	4a08      	ldr	r2, [pc, #32]	; (800b134 <UART_SetConfig+0x6ac>)
 800b112:	fa22 f303 	lsr.w	r3, r2, r3
 800b116:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b118:	e01b      	b.n	800b152 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b11a:	4b06      	ldr	r3, [pc, #24]	; (800b134 <UART_SetConfig+0x6ac>)
 800b11c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b11e:	e018      	b.n	800b152 <UART_SetConfig+0x6ca>
 800b120:	40011400 	.word	0x40011400
 800b124:	58024400 	.word	0x58024400
 800b128:	40007800 	.word	0x40007800
 800b12c:	40007c00 	.word	0x40007c00
 800b130:	58000c00 	.word	0x58000c00
 800b134:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b138:	4bc4      	ldr	r3, [pc, #784]	; (800b44c <UART_SetConfig+0x9c4>)
 800b13a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b13c:	e009      	b.n	800b152 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b13e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b142:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b144:	e005      	b.n	800b152 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b146:	2300      	movs	r3, #0
 800b148:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b150:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b154:	2b00      	cmp	r3, #0
 800b156:	f000 81da 	beq.w	800b50e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15e:	4abc      	ldr	r2, [pc, #752]	; (800b450 <UART_SetConfig+0x9c8>)
 800b160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b164:	461a      	mov	r2, r3
 800b166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b168:	fbb3 f3f2 	udiv	r3, r3, r2
 800b16c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	685a      	ldr	r2, [r3, #4]
 800b172:	4613      	mov	r3, r2
 800b174:	005b      	lsls	r3, r3, #1
 800b176:	4413      	add	r3, r2
 800b178:	6a3a      	ldr	r2, [r7, #32]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d305      	bcc.n	800b18a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b184:	6a3a      	ldr	r2, [r7, #32]
 800b186:	429a      	cmp	r2, r3
 800b188:	d903      	bls.n	800b192 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b18a:	2301      	movs	r3, #1
 800b18c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b190:	e1bd      	b.n	800b50e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b194:	4618      	mov	r0, r3
 800b196:	f04f 0100 	mov.w	r1, #0
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19e:	4aac      	ldr	r2, [pc, #688]	; (800b450 <UART_SetConfig+0x9c8>)
 800b1a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1a4:	b29a      	uxth	r2, r3
 800b1a6:	f04f 0300 	mov.w	r3, #0
 800b1aa:	f7f5 f8f1 	bl	8000390 <__aeabi_uldivmod>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	460b      	mov	r3, r1
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	f04f 0200 	mov.w	r2, #0
 800b1ba:	f04f 0300 	mov.w	r3, #0
 800b1be:	020b      	lsls	r3, r1, #8
 800b1c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b1c4:	0202      	lsls	r2, r0, #8
 800b1c6:	6879      	ldr	r1, [r7, #4]
 800b1c8:	6849      	ldr	r1, [r1, #4]
 800b1ca:	0849      	lsrs	r1, r1, #1
 800b1cc:	4608      	mov	r0, r1
 800b1ce:	f04f 0100 	mov.w	r1, #0
 800b1d2:	1814      	adds	r4, r2, r0
 800b1d4:	eb43 0501 	adc.w	r5, r3, r1
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	461a      	mov	r2, r3
 800b1de:	f04f 0300 	mov.w	r3, #0
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	f7f5 f8d3 	bl	8000390 <__aeabi_uldivmod>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1f8:	d308      	bcc.n	800b20c <UART_SetConfig+0x784>
 800b1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b200:	d204      	bcs.n	800b20c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b208:	60da      	str	r2, [r3, #12]
 800b20a:	e180      	b.n	800b50e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
 800b20e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b212:	e17c      	b.n	800b50e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	69db      	ldr	r3, [r3, #28]
 800b218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b21c:	f040 80bf 	bne.w	800b39e <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800b220:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b224:	2b20      	cmp	r3, #32
 800b226:	dc49      	bgt.n	800b2bc <UART_SetConfig+0x834>
 800b228:	2b00      	cmp	r3, #0
 800b22a:	db7c      	blt.n	800b326 <UART_SetConfig+0x89e>
 800b22c:	2b20      	cmp	r3, #32
 800b22e:	d87a      	bhi.n	800b326 <UART_SetConfig+0x89e>
 800b230:	a201      	add	r2, pc, #4	; (adr r2, 800b238 <UART_SetConfig+0x7b0>)
 800b232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b236:	bf00      	nop
 800b238:	0800b2c3 	.word	0x0800b2c3
 800b23c:	0800b2cb 	.word	0x0800b2cb
 800b240:	0800b327 	.word	0x0800b327
 800b244:	0800b327 	.word	0x0800b327
 800b248:	0800b2d3 	.word	0x0800b2d3
 800b24c:	0800b327 	.word	0x0800b327
 800b250:	0800b327 	.word	0x0800b327
 800b254:	0800b327 	.word	0x0800b327
 800b258:	0800b2e3 	.word	0x0800b2e3
 800b25c:	0800b327 	.word	0x0800b327
 800b260:	0800b327 	.word	0x0800b327
 800b264:	0800b327 	.word	0x0800b327
 800b268:	0800b327 	.word	0x0800b327
 800b26c:	0800b327 	.word	0x0800b327
 800b270:	0800b327 	.word	0x0800b327
 800b274:	0800b327 	.word	0x0800b327
 800b278:	0800b2f3 	.word	0x0800b2f3
 800b27c:	0800b327 	.word	0x0800b327
 800b280:	0800b327 	.word	0x0800b327
 800b284:	0800b327 	.word	0x0800b327
 800b288:	0800b327 	.word	0x0800b327
 800b28c:	0800b327 	.word	0x0800b327
 800b290:	0800b327 	.word	0x0800b327
 800b294:	0800b327 	.word	0x0800b327
 800b298:	0800b327 	.word	0x0800b327
 800b29c:	0800b327 	.word	0x0800b327
 800b2a0:	0800b327 	.word	0x0800b327
 800b2a4:	0800b327 	.word	0x0800b327
 800b2a8:	0800b327 	.word	0x0800b327
 800b2ac:	0800b327 	.word	0x0800b327
 800b2b0:	0800b327 	.word	0x0800b327
 800b2b4:	0800b327 	.word	0x0800b327
 800b2b8:	0800b319 	.word	0x0800b319
 800b2bc:	2b40      	cmp	r3, #64	; 0x40
 800b2be:	d02e      	beq.n	800b31e <UART_SetConfig+0x896>
 800b2c0:	e031      	b.n	800b326 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2c2:	f7fb ff3b 	bl	800713c <HAL_RCC_GetPCLK1Freq>
 800b2c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b2c8:	e033      	b.n	800b332 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2ca:	f7fb ff4d 	bl	8007168 <HAL_RCC_GetPCLK2Freq>
 800b2ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b2d0:	e02f      	b.n	800b332 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2d2:	f107 0314 	add.w	r3, r7, #20
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fc feb2 	bl	8008040 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b2dc:	69bb      	ldr	r3, [r7, #24]
 800b2de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2e0:	e027      	b.n	800b332 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2e2:	f107 0308 	add.w	r3, r7, #8
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7fc fffe 	bl	80082e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b2f0:	e01f      	b.n	800b332 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2f2:	4b58      	ldr	r3, [pc, #352]	; (800b454 <UART_SetConfig+0x9cc>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f003 0320 	and.w	r3, r3, #32
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d009      	beq.n	800b312 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b2fe:	4b55      	ldr	r3, [pc, #340]	; (800b454 <UART_SetConfig+0x9cc>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	08db      	lsrs	r3, r3, #3
 800b304:	f003 0303 	and.w	r3, r3, #3
 800b308:	4a53      	ldr	r2, [pc, #332]	; (800b458 <UART_SetConfig+0x9d0>)
 800b30a:	fa22 f303 	lsr.w	r3, r2, r3
 800b30e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b310:	e00f      	b.n	800b332 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b312:	4b51      	ldr	r3, [pc, #324]	; (800b458 <UART_SetConfig+0x9d0>)
 800b314:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b316:	e00c      	b.n	800b332 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b318:	4b4c      	ldr	r3, [pc, #304]	; (800b44c <UART_SetConfig+0x9c4>)
 800b31a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b31c:	e009      	b.n	800b332 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b31e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b322:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b324:	e005      	b.n	800b332 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b326:	2300      	movs	r3, #0
 800b328:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b32a:	2301      	movs	r3, #1
 800b32c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b330:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b334:	2b00      	cmp	r3, #0
 800b336:	f000 80ea 	beq.w	800b50e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b33e:	4a44      	ldr	r2, [pc, #272]	; (800b450 <UART_SetConfig+0x9c8>)
 800b340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b344:	461a      	mov	r2, r3
 800b346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b348:	fbb3 f3f2 	udiv	r3, r3, r2
 800b34c:	005a      	lsls	r2, r3, #1
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	085b      	lsrs	r3, r3, #1
 800b354:	441a      	add	r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b35e:	b29b      	uxth	r3, r3
 800b360:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b364:	2b0f      	cmp	r3, #15
 800b366:	d916      	bls.n	800b396 <UART_SetConfig+0x90e>
 800b368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b36e:	d212      	bcs.n	800b396 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b372:	b29b      	uxth	r3, r3
 800b374:	f023 030f 	bic.w	r3, r3, #15
 800b378:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37c:	085b      	lsrs	r3, r3, #1
 800b37e:	b29b      	uxth	r3, r3
 800b380:	f003 0307 	and.w	r3, r3, #7
 800b384:	b29a      	uxth	r2, r3
 800b386:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b388:	4313      	orrs	r3, r2
 800b38a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b392:	60da      	str	r2, [r3, #12]
 800b394:	e0bb      	b.n	800b50e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b39c:	e0b7      	b.n	800b50e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b39e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b3a2:	2b20      	cmp	r3, #32
 800b3a4:	dc4a      	bgt.n	800b43c <UART_SetConfig+0x9b4>
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	f2c0 8086 	blt.w	800b4b8 <UART_SetConfig+0xa30>
 800b3ac:	2b20      	cmp	r3, #32
 800b3ae:	f200 8083 	bhi.w	800b4b8 <UART_SetConfig+0xa30>
 800b3b2:	a201      	add	r2, pc, #4	; (adr r2, 800b3b8 <UART_SetConfig+0x930>)
 800b3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b8:	0800b443 	.word	0x0800b443
 800b3bc:	0800b45d 	.word	0x0800b45d
 800b3c0:	0800b4b9 	.word	0x0800b4b9
 800b3c4:	0800b4b9 	.word	0x0800b4b9
 800b3c8:	0800b465 	.word	0x0800b465
 800b3cc:	0800b4b9 	.word	0x0800b4b9
 800b3d0:	0800b4b9 	.word	0x0800b4b9
 800b3d4:	0800b4b9 	.word	0x0800b4b9
 800b3d8:	0800b475 	.word	0x0800b475
 800b3dc:	0800b4b9 	.word	0x0800b4b9
 800b3e0:	0800b4b9 	.word	0x0800b4b9
 800b3e4:	0800b4b9 	.word	0x0800b4b9
 800b3e8:	0800b4b9 	.word	0x0800b4b9
 800b3ec:	0800b4b9 	.word	0x0800b4b9
 800b3f0:	0800b4b9 	.word	0x0800b4b9
 800b3f4:	0800b4b9 	.word	0x0800b4b9
 800b3f8:	0800b485 	.word	0x0800b485
 800b3fc:	0800b4b9 	.word	0x0800b4b9
 800b400:	0800b4b9 	.word	0x0800b4b9
 800b404:	0800b4b9 	.word	0x0800b4b9
 800b408:	0800b4b9 	.word	0x0800b4b9
 800b40c:	0800b4b9 	.word	0x0800b4b9
 800b410:	0800b4b9 	.word	0x0800b4b9
 800b414:	0800b4b9 	.word	0x0800b4b9
 800b418:	0800b4b9 	.word	0x0800b4b9
 800b41c:	0800b4b9 	.word	0x0800b4b9
 800b420:	0800b4b9 	.word	0x0800b4b9
 800b424:	0800b4b9 	.word	0x0800b4b9
 800b428:	0800b4b9 	.word	0x0800b4b9
 800b42c:	0800b4b9 	.word	0x0800b4b9
 800b430:	0800b4b9 	.word	0x0800b4b9
 800b434:	0800b4b9 	.word	0x0800b4b9
 800b438:	0800b4ab 	.word	0x0800b4ab
 800b43c:	2b40      	cmp	r3, #64	; 0x40
 800b43e:	d037      	beq.n	800b4b0 <UART_SetConfig+0xa28>
 800b440:	e03a      	b.n	800b4b8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b442:	f7fb fe7b 	bl	800713c <HAL_RCC_GetPCLK1Freq>
 800b446:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b448:	e03c      	b.n	800b4c4 <UART_SetConfig+0xa3c>
 800b44a:	bf00      	nop
 800b44c:	003d0900 	.word	0x003d0900
 800b450:	0800fcac 	.word	0x0800fcac
 800b454:	58024400 	.word	0x58024400
 800b458:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b45c:	f7fb fe84 	bl	8007168 <HAL_RCC_GetPCLK2Freq>
 800b460:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b462:	e02f      	b.n	800b4c4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b464:	f107 0314 	add.w	r3, r7, #20
 800b468:	4618      	mov	r0, r3
 800b46a:	f7fc fde9 	bl	8008040 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b46e:	69bb      	ldr	r3, [r7, #24]
 800b470:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b472:	e027      	b.n	800b4c4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b474:	f107 0308 	add.w	r3, r7, #8
 800b478:	4618      	mov	r0, r3
 800b47a:	f7fc ff35 	bl	80082e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b482:	e01f      	b.n	800b4c4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b484:	4b2c      	ldr	r3, [pc, #176]	; (800b538 <UART_SetConfig+0xab0>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f003 0320 	and.w	r3, r3, #32
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d009      	beq.n	800b4a4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b490:	4b29      	ldr	r3, [pc, #164]	; (800b538 <UART_SetConfig+0xab0>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	08db      	lsrs	r3, r3, #3
 800b496:	f003 0303 	and.w	r3, r3, #3
 800b49a:	4a28      	ldr	r2, [pc, #160]	; (800b53c <UART_SetConfig+0xab4>)
 800b49c:	fa22 f303 	lsr.w	r3, r2, r3
 800b4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b4a2:	e00f      	b.n	800b4c4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b4a4:	4b25      	ldr	r3, [pc, #148]	; (800b53c <UART_SetConfig+0xab4>)
 800b4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4a8:	e00c      	b.n	800b4c4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b4aa:	4b25      	ldr	r3, [pc, #148]	; (800b540 <UART_SetConfig+0xab8>)
 800b4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4ae:	e009      	b.n	800b4c4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4b6:	e005      	b.n	800b4c4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b4c2:	bf00      	nop
    }

    if (pclk != 0U)
 800b4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d021      	beq.n	800b50e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ce:	4a1d      	ldr	r2, [pc, #116]	; (800b544 <UART_SetConfig+0xabc>)
 800b4d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d8:	fbb3 f2f2 	udiv	r2, r3, r2
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	085b      	lsrs	r3, r3, #1
 800b4e2:	441a      	add	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f2:	2b0f      	cmp	r3, #15
 800b4f4:	d908      	bls.n	800b508 <UART_SetConfig+0xa80>
 800b4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4fc:	d204      	bcs.n	800b508 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b504:	60da      	str	r2, [r3, #12]
 800b506:	e002      	b.n	800b50e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b508:	2301      	movs	r3, #1
 800b50a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2201      	movs	r2, #1
 800b512:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2201      	movs	r2, #1
 800b51a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b52a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3738      	adds	r7, #56	; 0x38
 800b532:	46bd      	mov	sp, r7
 800b534:	bdb0      	pop	{r4, r5, r7, pc}
 800b536:	bf00      	nop
 800b538:	58024400 	.word	0x58024400
 800b53c:	03d09000 	.word	0x03d09000
 800b540:	003d0900 	.word	0x003d0900
 800b544:	0800fcac 	.word	0x0800fcac

0800b548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b554:	f003 0301 	and.w	r3, r3, #1
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00a      	beq.n	800b572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	430a      	orrs	r2, r1
 800b570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b576:	f003 0302 	and.w	r3, r3, #2
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d00a      	beq.n	800b594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	430a      	orrs	r2, r1
 800b592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b598:	f003 0304 	and.w	r3, r3, #4
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d00a      	beq.n	800b5b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	430a      	orrs	r2, r1
 800b5b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ba:	f003 0308 	and.w	r3, r3, #8
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d00a      	beq.n	800b5d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	430a      	orrs	r2, r1
 800b5d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5dc:	f003 0310 	and.w	r3, r3, #16
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00a      	beq.n	800b5fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	430a      	orrs	r2, r1
 800b5f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fe:	f003 0320 	and.w	r3, r3, #32
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00a      	beq.n	800b61c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	430a      	orrs	r2, r1
 800b61a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b624:	2b00      	cmp	r3, #0
 800b626:	d01a      	beq.n	800b65e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	430a      	orrs	r2, r1
 800b63c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b646:	d10a      	bne.n	800b65e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	430a      	orrs	r2, r1
 800b65c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00a      	beq.n	800b680 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	430a      	orrs	r2, r1
 800b67e:	605a      	str	r2, [r3, #4]
  }
}
 800b680:	bf00      	nop
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af02      	add	r7, sp, #8
 800b692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b69c:	f7f7 ff66 	bl	800356c <HAL_GetTick>
 800b6a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 0308 	and.w	r3, r3, #8
 800b6ac:	2b08      	cmp	r3, #8
 800b6ae:	d10e      	bne.n	800b6ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f82f 	bl	800b722 <UART_WaitOnFlagUntilTimeout>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d001      	beq.n	800b6ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	e025      	b.n	800b71a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f003 0304 	and.w	r3, r3, #4
 800b6d8:	2b04      	cmp	r3, #4
 800b6da:	d10e      	bne.n	800b6fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f819 	bl	800b722 <UART_WaitOnFlagUntilTimeout>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d001      	beq.n	800b6fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6f6:	2303      	movs	r3, #3
 800b6f8:	e00f      	b.n	800b71a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2220      	movs	r2, #32
 800b6fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2220      	movs	r2, #32
 800b706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b084      	sub	sp, #16
 800b726:	af00      	add	r7, sp, #0
 800b728:	60f8      	str	r0, [r7, #12]
 800b72a:	60b9      	str	r1, [r7, #8]
 800b72c:	603b      	str	r3, [r7, #0]
 800b72e:	4613      	mov	r3, r2
 800b730:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b732:	e062      	b.n	800b7fa <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b73a:	d05e      	beq.n	800b7fa <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b73c:	f7f7 ff16 	bl	800356c <HAL_GetTick>
 800b740:	4602      	mov	r2, r0
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	1ad3      	subs	r3, r2, r3
 800b746:	69ba      	ldr	r2, [r7, #24]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d302      	bcc.n	800b752 <UART_WaitOnFlagUntilTimeout+0x30>
 800b74c:	69bb      	ldr	r3, [r7, #24]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d11d      	bne.n	800b78e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b760:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	689a      	ldr	r2, [r3, #8]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f022 0201 	bic.w	r2, r2, #1
 800b770:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2220      	movs	r2, #32
 800b776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2220      	movs	r2, #32
 800b77e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2200      	movs	r2, #0
 800b786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b78a:	2303      	movs	r3, #3
 800b78c:	e045      	b.n	800b81a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f003 0304 	and.w	r3, r3, #4
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d02e      	beq.n	800b7fa <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	69db      	ldr	r3, [r3, #28]
 800b7a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b7a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7aa:	d126      	bne.n	800b7fa <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b7b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b7c4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	689a      	ldr	r2, [r3, #8]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f022 0201 	bic.w	r2, r2, #1
 800b7d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2220      	movs	r2, #32
 800b7da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	2220      	movs	r2, #32
 800b7e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2220      	movs	r2, #32
 800b7ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b7f6:	2303      	movs	r3, #3
 800b7f8:	e00f      	b.n	800b81a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	69da      	ldr	r2, [r3, #28]
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	4013      	ands	r3, r2
 800b804:	68ba      	ldr	r2, [r7, #8]
 800b806:	429a      	cmp	r2, r3
 800b808:	bf0c      	ite	eq
 800b80a:	2301      	moveq	r3, #1
 800b80c:	2300      	movne	r3, #0
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	461a      	mov	r2, r3
 800b812:	79fb      	ldrb	r3, [r7, #7]
 800b814:	429a      	cmp	r2, r3
 800b816:	d08d      	beq.n	800b734 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
	...

0800b824 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	60b9      	str	r1, [r7, #8]
 800b82e:	4613      	mov	r3, r2
 800b830:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	88fa      	ldrh	r2, [r7, #6]
 800b83c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	88fa      	ldrh	r2, [r7, #6]
 800b844:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2200      	movs	r2, #0
 800b84c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b856:	d10e      	bne.n	800b876 <UART_Start_Receive_IT+0x52>
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	691b      	ldr	r3, [r3, #16]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d105      	bne.n	800b86c <UART_Start_Receive_IT+0x48>
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b866:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b86a:	e02d      	b.n	800b8c8 <UART_Start_Receive_IT+0xa4>
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	22ff      	movs	r2, #255	; 0xff
 800b870:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b874:	e028      	b.n	800b8c8 <UART_Start_Receive_IT+0xa4>
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10d      	bne.n	800b89a <UART_Start_Receive_IT+0x76>
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d104      	bne.n	800b890 <UART_Start_Receive_IT+0x6c>
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	22ff      	movs	r2, #255	; 0xff
 800b88a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b88e:	e01b      	b.n	800b8c8 <UART_Start_Receive_IT+0xa4>
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	227f      	movs	r2, #127	; 0x7f
 800b894:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b898:	e016      	b.n	800b8c8 <UART_Start_Receive_IT+0xa4>
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8a2:	d10d      	bne.n	800b8c0 <UART_Start_Receive_IT+0x9c>
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d104      	bne.n	800b8b6 <UART_Start_Receive_IT+0x92>
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	227f      	movs	r2, #127	; 0x7f
 800b8b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8b4:	e008      	b.n	800b8c8 <UART_Start_Receive_IT+0xa4>
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	223f      	movs	r2, #63	; 0x3f
 800b8ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b8be:	e003      	b.n	800b8c8 <UART_Start_Receive_IT+0xa4>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2222      	movs	r2, #34	; 0x22
 800b8d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	689a      	ldr	r2, [r3, #8]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f042 0201 	orr.w	r2, r2, #1
 800b8e6:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8f0:	d12a      	bne.n	800b948 <UART_Start_Receive_IT+0x124>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b8f8:	88fa      	ldrh	r2, [r7, #6]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d324      	bcc.n	800b948 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b906:	d107      	bne.n	800b918 <UART_Start_Receive_IT+0xf4>
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	691b      	ldr	r3, [r3, #16]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d103      	bne.n	800b918 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	4a1f      	ldr	r2, [pc, #124]	; (800b990 <UART_Start_Receive_IT+0x16c>)
 800b914:	671a      	str	r2, [r3, #112]	; 0x70
 800b916:	e002      	b.n	800b91e <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	4a1e      	ldr	r2, [pc, #120]	; (800b994 <UART_Start_Receive_IT+0x170>)
 800b91c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	681a      	ldr	r2, [r3, #0]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b934:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	689a      	ldr	r2, [r3, #8]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b944:	609a      	str	r2, [r3, #8]
 800b946:	e01b      	b.n	800b980 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b950:	d107      	bne.n	800b962 <UART_Start_Receive_IT+0x13e>
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	691b      	ldr	r3, [r3, #16]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d103      	bne.n	800b962 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	4a0e      	ldr	r2, [pc, #56]	; (800b998 <UART_Start_Receive_IT+0x174>)
 800b95e:	671a      	str	r2, [r3, #112]	; 0x70
 800b960:	e002      	b.n	800b968 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	4a0d      	ldr	r2, [pc, #52]	; (800b99c <UART_Start_Receive_IT+0x178>)
 800b966:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800b97e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3714      	adds	r7, #20
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr
 800b98e:	bf00      	nop
 800b990:	0800be19 	.word	0x0800be19
 800b994:	0800bc15 	.word	0x0800bc15
 800b998:	0800bb3d 	.word	0x0800bb3d
 800b99c:	0800ba65 	.word	0x0800ba65

0800b9a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b9b6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6899      	ldr	r1, [r3, #8]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	4b0f      	ldr	r3, [pc, #60]	; (800ba00 <UART_EndRxTransfer+0x60>)
 800b9c4:	400b      	ands	r3, r1
 800b9c6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d107      	bne.n	800b9e0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f022 0210 	bic.w	r2, r2, #16
 800b9de:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2220      	movs	r2, #32
 800b9e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b9f4:	bf00      	nop
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr
 800ba00:	effffffe 	.word	0xeffffffe

0800ba04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f7ff f81a 	bl	800aa5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba28:	bf00      	nop
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba46:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2220      	movs	r2, #32
 800ba4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7fe fff6 	bl	800aa48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba5c:	bf00      	nop
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba72:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba7a:	2b22      	cmp	r3, #34	; 0x22
 800ba7c:	d152      	bne.n	800bb24 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba84:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ba86:	89bb      	ldrh	r3, [r7, #12]
 800ba88:	b2d9      	uxtb	r1, r3
 800ba8a:	89fb      	ldrh	r3, [r7, #14]
 800ba8c:	b2da      	uxtb	r2, r3
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba92:	400a      	ands	r2, r1
 800ba94:	b2d2      	uxtb	r2, r2
 800ba96:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba9c:	1c5a      	adds	r2, r3, #1
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	3b01      	subs	r3, #1
 800baac:	b29a      	uxth	r2, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800baba:	b29b      	uxth	r3, r3
 800babc:	2b00      	cmp	r3, #0
 800babe:	d139      	bne.n	800bb34 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bace:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	689a      	ldr	r2, [r3, #8]
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f022 0201 	bic.w	r2, r2, #1
 800bade:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2220      	movs	r2, #32
 800bae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d10f      	bne.n	800bb16 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f022 0210 	bic.w	r2, r2, #16
 800bb04:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7fe ffae 	bl	800aa70 <HAL_UARTEx_RxEventCallback>
 800bb14:	e002      	b.n	800bb1c <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f7f6 faec 	bl	80020f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bb22:	e007      	b.n	800bb34 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	699a      	ldr	r2, [r3, #24]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f042 0208 	orr.w	r2, r2, #8
 800bb32:	619a      	str	r2, [r3, #24]
}
 800bb34:	bf00      	nop
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bb4a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb52:	2b22      	cmp	r3, #34	; 0x22
 800bb54:	d152      	bne.n	800bbfc <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb62:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800bb64:	89ba      	ldrh	r2, [r7, #12]
 800bb66:	89fb      	ldrh	r3, [r7, #14]
 800bb68:	4013      	ands	r3, r2
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb74:	1c9a      	adds	r2, r3, #2
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	3b01      	subs	r3, #1
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d139      	bne.n	800bc0c <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bba6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	689a      	ldr	r2, [r3, #8]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f022 0201 	bic.w	r2, r2, #1
 800bbb6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2220      	movs	r2, #32
 800bbbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbca:	2b01      	cmp	r3, #1
 800bbcc:	d10f      	bne.n	800bbee <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f022 0210 	bic.w	r2, r2, #16
 800bbdc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7fe ff42 	bl	800aa70 <HAL_UARTEx_RxEventCallback>
 800bbec:	e002      	b.n	800bbf4 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7f6 fa80 	bl	80020f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bbfa:	e007      	b.n	800bc0c <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	699a      	ldr	r2, [r3, #24]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f042 0208 	orr.w	r2, r2, #8
 800bc0a:	619a      	str	r2, [r3, #24]
}
 800bc0c:	bf00      	nop
 800bc0e:	3710      	adds	r7, #16
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b088      	sub	sp, #32
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bc22:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	69db      	ldr	r3, [r3, #28]
 800bc2a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc42:	2b22      	cmp	r3, #34	; 0x22
 800bc44:	f040 80d8 	bne.w	800bdf8 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bc4e:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bc50:	e0a8      	b.n	800bda4 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc58:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bc5a:	89bb      	ldrh	r3, [r7, #12]
 800bc5c:	b2d9      	uxtb	r1, r3
 800bc5e:	8b7b      	ldrh	r3, [r7, #26]
 800bc60:	b2da      	uxtb	r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc66:	400a      	ands	r2, r1
 800bc68:	b2d2      	uxtb	r2, r2
 800bc6a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc70:	1c5a      	adds	r2, r3, #1
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	69db      	ldr	r3, [r3, #28]
 800bc8e:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	f003 0307 	and.w	r3, r3, #7
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d04d      	beq.n	800bd36 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc9a:	69fb      	ldr	r3, [r7, #28]
 800bc9c:	f003 0301 	and.w	r3, r3, #1
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d010      	beq.n	800bcc6 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d00b      	beq.n	800bcc6 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcbc:	f043 0201 	orr.w	r2, r3, #1
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	f003 0302 	and.w	r3, r3, #2
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d010      	beq.n	800bcf2 <UART_RxISR_8BIT_FIFOEN+0xde>
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	f003 0301 	and.w	r3, r3, #1
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d00b      	beq.n	800bcf2 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2202      	movs	r2, #2
 800bce0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bce8:	f043 0204 	orr.w	r2, r3, #4
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	f003 0304 	and.w	r3, r3, #4
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d010      	beq.n	800bd1e <UART_RxISR_8BIT_FIFOEN+0x10a>
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	f003 0301 	and.w	r3, r3, #1
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00b      	beq.n	800bd1e <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	2204      	movs	r2, #4
 800bd0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd14:	f043 0202 	orr.w	r2, r3, #2
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d006      	beq.n	800bd36 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f7fe fe97 	bl	800aa5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2200      	movs	r2, #0
 800bd32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d130      	bne.n	800bda4 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd50:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	6899      	ldr	r1, [r3, #8]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	4b2c      	ldr	r3, [pc, #176]	; (800be10 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800bd5e:	400b      	ands	r3, r1
 800bd60:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2220      	movs	r2, #32
 800bd66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d10f      	bne.n	800bd98 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f022 0210 	bic.w	r2, r2, #16
 800bd86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bd8e:	4619      	mov	r1, r3
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f7fe fe6d 	bl	800aa70 <HAL_UARTEx_RxEventCallback>
 800bd96:	e002      	b.n	800bd9e <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f7f6 f9ab 	bl	80020f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2200      	movs	r2, #0
 800bda2:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bda4:	89fb      	ldrh	r3, [r7, #14]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d005      	beq.n	800bdb6 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800bdaa:	69fb      	ldr	r3, [r7, #28]
 800bdac:	f003 0320 	and.w	r3, r3, #32
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f47f af4e 	bne.w	800bc52 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bdbc:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bdbe:	897b      	ldrh	r3, [r7, #10]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d021      	beq.n	800be08 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bdca:	897a      	ldrh	r2, [r7, #10]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d21b      	bcs.n	800be08 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	689a      	ldr	r2, [r3, #8]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bdde:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4a0c      	ldr	r2, [pc, #48]	; (800be14 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800bde4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f042 0220 	orr.w	r2, r2, #32
 800bdf4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bdf6:	e007      	b.n	800be08 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	699a      	ldr	r2, [r3, #24]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f042 0208 	orr.w	r2, r2, #8
 800be06:	619a      	str	r2, [r3, #24]
}
 800be08:	bf00      	nop
 800be0a:	3720      	adds	r7, #32
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	effffffe 	.word	0xeffffffe
 800be14:	0800ba65 	.word	0x0800ba65

0800be18 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b08a      	sub	sp, #40	; 0x28
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800be26:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	69db      	ldr	r3, [r3, #28]
 800be2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be46:	2b22      	cmp	r3, #34	; 0x22
 800be48:	f040 80d8 	bne.w	800bffc <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800be52:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800be54:	e0a8      	b.n	800bfa8 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be5c:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be62:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800be64:	8aba      	ldrh	r2, [r7, #20]
 800be66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be68:	4013      	ands	r3, r2
 800be6a:	b29a      	uxth	r2, r3
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be74:	1c9a      	adds	r2, r3, #2
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be80:	b29b      	uxth	r3, r3
 800be82:	3b01      	subs	r3, #1
 800be84:	b29a      	uxth	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	69db      	ldr	r3, [r3, #28]
 800be92:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be96:	f003 0307 	and.w	r3, r3, #7
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d04d      	beq.n	800bf3a <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea0:	f003 0301 	and.w	r3, r3, #1
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d010      	beq.n	800beca <UART_RxISR_16BIT_FIFOEN+0xb2>
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00b      	beq.n	800beca <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2201      	movs	r2, #1
 800beb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bec0:	f043 0201 	orr.w	r2, r3, #1
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800becc:	f003 0302 	and.w	r3, r3, #2
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d010      	beq.n	800bef6 <UART_RxISR_16BIT_FIFOEN+0xde>
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	f003 0301 	and.w	r3, r3, #1
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00b      	beq.n	800bef6 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	2202      	movs	r2, #2
 800bee4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beec:	f043 0204 	orr.w	r2, r3, #4
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef8:	f003 0304 	and.w	r3, r3, #4
 800befc:	2b00      	cmp	r3, #0
 800befe:	d010      	beq.n	800bf22 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	f003 0301 	and.w	r3, r3, #1
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00b      	beq.n	800bf22 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2204      	movs	r2, #4
 800bf10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf18:	f043 0202 	orr.w	r2, r3, #2
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d006      	beq.n	800bf3a <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f7fe fd95 	bl	800aa5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf40:	b29b      	uxth	r3, r3
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d130      	bne.n	800bfa8 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bf54:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	6899      	ldr	r1, [r3, #8]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	4b2c      	ldr	r3, [pc, #176]	; (800c014 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800bf62:	400b      	ands	r3, r1
 800bf64:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2220      	movs	r2, #32
 800bf6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d10f      	bne.n	800bf9c <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f022 0210 	bic.w	r2, r2, #16
 800bf8a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf92:	4619      	mov	r1, r3
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f7fe fd6b 	bl	800aa70 <HAL_UARTEx_RxEventCallback>
 800bf9a:	e002      	b.n	800bfa2 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bf9c:	6878      	ldr	r0, [r7, #4]
 800bf9e:	f7f6 f8a9 	bl	80020f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bfa8:	8afb      	ldrh	r3, [r7, #22]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d005      	beq.n	800bfba <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800bfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb0:	f003 0320 	and.w	r3, r3, #32
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f47f af4e 	bne.w	800be56 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bfc0:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bfc2:	89fb      	ldrh	r3, [r7, #14]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d021      	beq.n	800c00c <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bfce:	89fa      	ldrh	r2, [r7, #14]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d21b      	bcs.n	800c00c <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	689a      	ldr	r2, [r3, #8]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800bfe2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a0c      	ldr	r2, [pc, #48]	; (800c018 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800bfe8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f042 0220 	orr.w	r2, r2, #32
 800bff8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bffa:	e007      	b.n	800c00c <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	699a      	ldr	r2, [r3, #24]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f042 0208 	orr.w	r2, r2, #8
 800c00a:	619a      	str	r2, [r3, #24]
}
 800c00c:	bf00      	nop
 800c00e:	3728      	adds	r7, #40	; 0x28
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}
 800c014:	effffffe 	.word	0xeffffffe
 800c018:	0800bb3d 	.word	0x0800bb3d

0800c01c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c024:	bf00      	nop
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr

0800c030 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c038:	bf00      	nop
 800c03a:	370c      	adds	r7, #12
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c044:	b480      	push	{r7}
 800c046:	b083      	sub	sp, #12
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c04c:	bf00      	nop
 800c04e:	370c      	adds	r7, #12
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c058:	b480      	push	{r7}
 800c05a:	b085      	sub	sp, #20
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c066:	2b01      	cmp	r3, #1
 800c068:	d101      	bne.n	800c06e <HAL_UARTEx_DisableFifoMode+0x16>
 800c06a:	2302      	movs	r3, #2
 800c06c:	e027      	b.n	800c0be <HAL_UARTEx_DisableFifoMode+0x66>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2201      	movs	r2, #1
 800c072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2224      	movs	r2, #36	; 0x24
 800c07a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f022 0201 	bic.w	r2, r2, #1
 800c094:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c09c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	68fa      	ldr	r2, [r7, #12]
 800c0aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2220      	movs	r2, #32
 800c0b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c0bc:	2300      	movs	r3, #0
}
 800c0be:	4618      	mov	r0, r3
 800c0c0:	3714      	adds	r7, #20
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr

0800c0ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	b084      	sub	sp, #16
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
 800c0d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d101      	bne.n	800c0e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c0de:	2302      	movs	r3, #2
 800c0e0:	e02d      	b.n	800c13e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2224      	movs	r2, #36	; 0x24
 800c0ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f022 0201 	bic.w	r2, r2, #1
 800c108:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	689b      	ldr	r3, [r3, #8]
 800c110:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	683a      	ldr	r2, [r7, #0]
 800c11a:	430a      	orrs	r2, r1
 800c11c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 f850 	bl	800c1c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	68fa      	ldr	r2, [r7, #12]
 800c12a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2220      	movs	r2, #32
 800c130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c13c:	2300      	movs	r3, #0
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}

0800c146 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c146:	b580      	push	{r7, lr}
 800c148:	b084      	sub	sp, #16
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
 800c14e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c156:	2b01      	cmp	r3, #1
 800c158:	d101      	bne.n	800c15e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c15a:	2302      	movs	r3, #2
 800c15c:	e02d      	b.n	800c1ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2201      	movs	r2, #1
 800c162:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2224      	movs	r2, #36	; 0x24
 800c16a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f022 0201 	bic.w	r2, r2, #1
 800c184:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	683a      	ldr	r2, [r7, #0]
 800c196:	430a      	orrs	r2, r1
 800c198:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 f812 	bl	800c1c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68fa      	ldr	r2, [r7, #12]
 800c1a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2220      	movs	r2, #32
 800c1ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c1b8:	2300      	movs	r3, #0
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
	...

0800c1c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d108      	bne.n	800c1e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c1e4:	e031      	b.n	800c24a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c1e6:	2310      	movs	r3, #16
 800c1e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c1ea:	2310      	movs	r3, #16
 800c1ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	0e5b      	lsrs	r3, r3, #25
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	f003 0307 	and.w	r3, r3, #7
 800c1fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	0f5b      	lsrs	r3, r3, #29
 800c206:	b2db      	uxtb	r3, r3
 800c208:	f003 0307 	and.w	r3, r3, #7
 800c20c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c20e:	7bbb      	ldrb	r3, [r7, #14]
 800c210:	7b3a      	ldrb	r2, [r7, #12]
 800c212:	4911      	ldr	r1, [pc, #68]	; (800c258 <UARTEx_SetNbDataToProcess+0x94>)
 800c214:	5c8a      	ldrb	r2, [r1, r2]
 800c216:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c21a:	7b3a      	ldrb	r2, [r7, #12]
 800c21c:	490f      	ldr	r1, [pc, #60]	; (800c25c <UARTEx_SetNbDataToProcess+0x98>)
 800c21e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c220:	fb93 f3f2 	sdiv	r3, r3, r2
 800c224:	b29a      	uxth	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c22c:	7bfb      	ldrb	r3, [r7, #15]
 800c22e:	7b7a      	ldrb	r2, [r7, #13]
 800c230:	4909      	ldr	r1, [pc, #36]	; (800c258 <UARTEx_SetNbDataToProcess+0x94>)
 800c232:	5c8a      	ldrb	r2, [r1, r2]
 800c234:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c238:	7b7a      	ldrb	r2, [r7, #13]
 800c23a:	4908      	ldr	r1, [pc, #32]	; (800c25c <UARTEx_SetNbDataToProcess+0x98>)
 800c23c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c23e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c242:	b29a      	uxth	r2, r3
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c24a:	bf00      	nop
 800c24c:	3714      	adds	r7, #20
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	0800fcc4 	.word	0x0800fcc4
 800c25c:	0800fccc 	.word	0x0800fccc

0800c260 <cos>:
 800c260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c262:	eeb0 7b40 	vmov.f64	d7, d0
 800c266:	ee17 3a90 	vmov	r3, s15
 800c26a:	4a1f      	ldr	r2, [pc, #124]	; (800c2e8 <cos+0x88>)
 800c26c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c270:	4293      	cmp	r3, r2
 800c272:	dc04      	bgt.n	800c27e <cos+0x1e>
 800c274:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800c2e0 <cos+0x80>
 800c278:	f000 fb0e 	bl	800c898 <__kernel_cos>
 800c27c:	e004      	b.n	800c288 <cos+0x28>
 800c27e:	4a1b      	ldr	r2, [pc, #108]	; (800c2ec <cos+0x8c>)
 800c280:	4293      	cmp	r3, r2
 800c282:	dd04      	ble.n	800c28e <cos+0x2e>
 800c284:	ee30 0b40 	vsub.f64	d0, d0, d0
 800c288:	b005      	add	sp, #20
 800c28a:	f85d fb04 	ldr.w	pc, [sp], #4
 800c28e:	4668      	mov	r0, sp
 800c290:	f000 f9be 	bl	800c610 <__ieee754_rem_pio2>
 800c294:	f000 0003 	and.w	r0, r0, #3
 800c298:	2801      	cmp	r0, #1
 800c29a:	d007      	beq.n	800c2ac <cos+0x4c>
 800c29c:	2802      	cmp	r0, #2
 800c29e:	d00e      	beq.n	800c2be <cos+0x5e>
 800c2a0:	b9a0      	cbnz	r0, 800c2cc <cos+0x6c>
 800c2a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2a6:	ed9d 0b00 	vldr	d0, [sp]
 800c2aa:	e7e5      	b.n	800c278 <cos+0x18>
 800c2ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2b0:	ed9d 0b00 	vldr	d0, [sp]
 800c2b4:	f000 fddc 	bl	800ce70 <__kernel_sin>
 800c2b8:	eeb1 0b40 	vneg.f64	d0, d0
 800c2bc:	e7e4      	b.n	800c288 <cos+0x28>
 800c2be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2c2:	ed9d 0b00 	vldr	d0, [sp]
 800c2c6:	f000 fae7 	bl	800c898 <__kernel_cos>
 800c2ca:	e7f5      	b.n	800c2b8 <cos+0x58>
 800c2cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2d0:	ed9d 0b00 	vldr	d0, [sp]
 800c2d4:	2001      	movs	r0, #1
 800c2d6:	f000 fdcb 	bl	800ce70 <__kernel_sin>
 800c2da:	e7d5      	b.n	800c288 <cos+0x28>
 800c2dc:	f3af 8000 	nop.w
	...
 800c2e8:	3fe921fb 	.word	0x3fe921fb
 800c2ec:	7fefffff 	.word	0x7fefffff

0800c2f0 <round>:
 800c2f0:	ee10 1a90 	vmov	r1, s1
 800c2f4:	f3c1 500a 	ubfx	r0, r1, #20, #11
 800c2f8:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 800c2fc:	2a13      	cmp	r2, #19
 800c2fe:	b510      	push	{r4, lr}
 800c300:	ee10 3a10 	vmov	r3, s0
 800c304:	dc19      	bgt.n	800c33a <round+0x4a>
 800c306:	2a00      	cmp	r2, #0
 800c308:	da09      	bge.n	800c31e <round+0x2e>
 800c30a:	3201      	adds	r2, #1
 800c30c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c310:	d103      	bne.n	800c31a <round+0x2a>
 800c312:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800c316:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c31a:	2000      	movs	r0, #0
 800c31c:	e027      	b.n	800c36e <round+0x7e>
 800c31e:	4816      	ldr	r0, [pc, #88]	; (800c378 <round+0x88>)
 800c320:	4110      	asrs	r0, r2
 800c322:	ea01 0400 	and.w	r4, r1, r0
 800c326:	4323      	orrs	r3, r4
 800c328:	d00e      	beq.n	800c348 <round+0x58>
 800c32a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c32e:	fa43 f202 	asr.w	r2, r3, r2
 800c332:	4411      	add	r1, r2
 800c334:	ea21 0100 	bic.w	r1, r1, r0
 800c338:	e7ef      	b.n	800c31a <round+0x2a>
 800c33a:	2a33      	cmp	r2, #51	; 0x33
 800c33c:	dd05      	ble.n	800c34a <round+0x5a>
 800c33e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c342:	d101      	bne.n	800c348 <round+0x58>
 800c344:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c348:	bd10      	pop	{r4, pc}
 800c34a:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 800c34e:	f04f 30ff 	mov.w	r0, #4294967295
 800c352:	fa20 f404 	lsr.w	r4, r0, r4
 800c356:	4223      	tst	r3, r4
 800c358:	d0f6      	beq.n	800c348 <round+0x58>
 800c35a:	2001      	movs	r0, #1
 800c35c:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800c360:	fa00 f202 	lsl.w	r2, r0, r2
 800c364:	189b      	adds	r3, r3, r2
 800c366:	bf28      	it	cs
 800c368:	1809      	addcs	r1, r1, r0
 800c36a:	ea23 0004 	bic.w	r0, r3, r4
 800c36e:	460b      	mov	r3, r1
 800c370:	4602      	mov	r2, r0
 800c372:	ec43 2b10 	vmov	d0, r2, r3
 800c376:	e7e7      	b.n	800c348 <round+0x58>
 800c378:	000fffff 	.word	0x000fffff
 800c37c:	00000000 	.word	0x00000000

0800c380 <sin>:
 800c380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c382:	eeb0 7b40 	vmov.f64	d7, d0
 800c386:	ee17 3a90 	vmov	r3, s15
 800c38a:	4a1f      	ldr	r2, [pc, #124]	; (800c408 <sin+0x88>)
 800c38c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c390:	4293      	cmp	r3, r2
 800c392:	dc05      	bgt.n	800c3a0 <sin+0x20>
 800c394:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800c400 <sin+0x80>
 800c398:	2000      	movs	r0, #0
 800c39a:	f000 fd69 	bl	800ce70 <__kernel_sin>
 800c39e:	e004      	b.n	800c3aa <sin+0x2a>
 800c3a0:	4a1a      	ldr	r2, [pc, #104]	; (800c40c <sin+0x8c>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	dd04      	ble.n	800c3b0 <sin+0x30>
 800c3a6:	ee30 0b40 	vsub.f64	d0, d0, d0
 800c3aa:	b005      	add	sp, #20
 800c3ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800c3b0:	4668      	mov	r0, sp
 800c3b2:	f000 f92d 	bl	800c610 <__ieee754_rem_pio2>
 800c3b6:	f000 0003 	and.w	r0, r0, #3
 800c3ba:	2801      	cmp	r0, #1
 800c3bc:	d008      	beq.n	800c3d0 <sin+0x50>
 800c3be:	2802      	cmp	r0, #2
 800c3c0:	d00d      	beq.n	800c3de <sin+0x5e>
 800c3c2:	b9b0      	cbnz	r0, 800c3f2 <sin+0x72>
 800c3c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3c8:	ed9d 0b00 	vldr	d0, [sp]
 800c3cc:	2001      	movs	r0, #1
 800c3ce:	e7e4      	b.n	800c39a <sin+0x1a>
 800c3d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3d4:	ed9d 0b00 	vldr	d0, [sp]
 800c3d8:	f000 fa5e 	bl	800c898 <__kernel_cos>
 800c3dc:	e7e5      	b.n	800c3aa <sin+0x2a>
 800c3de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3e2:	ed9d 0b00 	vldr	d0, [sp]
 800c3e6:	2001      	movs	r0, #1
 800c3e8:	f000 fd42 	bl	800ce70 <__kernel_sin>
 800c3ec:	eeb1 0b40 	vneg.f64	d0, d0
 800c3f0:	e7db      	b.n	800c3aa <sin+0x2a>
 800c3f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c3f6:	ed9d 0b00 	vldr	d0, [sp]
 800c3fa:	f000 fa4d 	bl	800c898 <__kernel_cos>
 800c3fe:	e7f5      	b.n	800c3ec <sin+0x6c>
	...
 800c408:	3fe921fb 	.word	0x3fe921fb
 800c40c:	7fefffff 	.word	0x7fefffff

0800c410 <atan2>:
 800c410:	f000 b82e 	b.w	800c470 <__ieee754_atan2>
 800c414:	0000      	movs	r0, r0
	...

0800c418 <sqrt>:
 800c418:	b508      	push	{r3, lr}
 800c41a:	ed2d 8b04 	vpush	{d8-d9}
 800c41e:	eeb0 8b40 	vmov.f64	d8, d0
 800c422:	f000 fa35 	bl	800c890 <__ieee754_sqrt>
 800c426:	4b10      	ldr	r3, [pc, #64]	; (800c468 <sqrt+0x50>)
 800c428:	f993 3000 	ldrsb.w	r3, [r3]
 800c42c:	3301      	adds	r3, #1
 800c42e:	d011      	beq.n	800c454 <sqrt+0x3c>
 800c430:	eeb4 8b48 	vcmp.f64	d8, d8
 800c434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c438:	d60c      	bvs.n	800c454 <sqrt+0x3c>
 800c43a:	ed9f 9b09 	vldr	d9, [pc, #36]	; 800c460 <sqrt+0x48>
 800c43e:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800c442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c446:	d505      	bpl.n	800c454 <sqrt+0x3c>
 800c448:	f000 ff74 	bl	800d334 <__errno>
 800c44c:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800c450:	2321      	movs	r3, #33	; 0x21
 800c452:	6003      	str	r3, [r0, #0]
 800c454:	ecbd 8b04 	vpop	{d8-d9}
 800c458:	bd08      	pop	{r3, pc}
 800c45a:	bf00      	nop
 800c45c:	f3af 8000 	nop.w
	...
 800c468:	20000015 	.word	0x20000015
 800c46c:	00000000 	.word	0x00000000

0800c470 <__ieee754_atan2>:
 800c470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c472:	ee11 6a10 	vmov	r6, s2
 800c476:	ee11 0a90 	vmov	r0, s3
 800c47a:	4273      	negs	r3, r6
 800c47c:	4f60      	ldr	r7, [pc, #384]	; (800c600 <__ieee754_atan2+0x190>)
 800c47e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c482:	4333      	orrs	r3, r6
 800c484:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c488:	42bb      	cmp	r3, r7
 800c48a:	ed8d 0b00 	vstr	d0, [sp]
 800c48e:	d80b      	bhi.n	800c4a8 <__ieee754_atan2+0x38>
 800c490:	e9dd c500 	ldrd	ip, r5, [sp]
 800c494:	f1cc 0100 	rsb	r1, ip, #0
 800c498:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c49c:	ea41 010c 	orr.w	r1, r1, ip
 800c4a0:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800c4a4:	42b9      	cmp	r1, r7
 800c4a6:	d906      	bls.n	800c4b6 <__ieee754_atan2+0x46>
 800c4a8:	ed9d 7b00 	vldr	d7, [sp]
 800c4ac:	ee37 7b01 	vadd.f64	d7, d7, d1
 800c4b0:	ed8d 7b00 	vstr	d7, [sp]
 800c4b4:	e054      	b.n	800c560 <__ieee754_atan2+0xf0>
 800c4b6:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800c4ba:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800c4be:	4331      	orrs	r1, r6
 800c4c0:	d104      	bne.n	800c4cc <__ieee754_atan2+0x5c>
 800c4c2:	b003      	add	sp, #12
 800c4c4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c4c8:	f000 bd2a 	b.w	800cf20 <atan>
 800c4cc:	1784      	asrs	r4, r0, #30
 800c4ce:	f004 0402 	and.w	r4, r4, #2
 800c4d2:	ea53 010c 	orrs.w	r1, r3, ip
 800c4d6:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800c4da:	d109      	bne.n	800c4f0 <__ieee754_atan2+0x80>
 800c4dc:	2c02      	cmp	r4, #2
 800c4de:	d069      	beq.n	800c5b4 <__ieee754_atan2+0x144>
 800c4e0:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800c5c8 <__ieee754_atan2+0x158>
 800c4e4:	ed9d 6b00 	vldr	d6, [sp]
 800c4e8:	2c03      	cmp	r4, #3
 800c4ea:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800c4ee:	e7df      	b.n	800c4b0 <__ieee754_atan2+0x40>
 800c4f0:	ea52 0106 	orrs.w	r1, r2, r6
 800c4f4:	d107      	bne.n	800c506 <__ieee754_atan2+0x96>
 800c4f6:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800c5d0 <__ieee754_atan2+0x160>
 800c4fa:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800c5d8 <__ieee754_atan2+0x168>
 800c4fe:	2d00      	cmp	r5, #0
 800c500:	fe26 7b07 	vselge.f64	d7, d6, d7
 800c504:	e7d4      	b.n	800c4b0 <__ieee754_atan2+0x40>
 800c506:	42ba      	cmp	r2, r7
 800c508:	d10f      	bne.n	800c52a <__ieee754_atan2+0xba>
 800c50a:	4293      	cmp	r3, r2
 800c50c:	f104 34ff 	add.w	r4, r4, #4294967295
 800c510:	d107      	bne.n	800c522 <__ieee754_atan2+0xb2>
 800c512:	2c02      	cmp	r4, #2
 800c514:	d851      	bhi.n	800c5ba <__ieee754_atan2+0x14a>
 800c516:	4b3b      	ldr	r3, [pc, #236]	; (800c604 <__ieee754_atan2+0x194>)
 800c518:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c51c:	ed94 7b00 	vldr	d7, [r4]
 800c520:	e7c6      	b.n	800c4b0 <__ieee754_atan2+0x40>
 800c522:	2c02      	cmp	r4, #2
 800c524:	d84c      	bhi.n	800c5c0 <__ieee754_atan2+0x150>
 800c526:	4b38      	ldr	r3, [pc, #224]	; (800c608 <__ieee754_atan2+0x198>)
 800c528:	e7f6      	b.n	800c518 <__ieee754_atan2+0xa8>
 800c52a:	42bb      	cmp	r3, r7
 800c52c:	d0e3      	beq.n	800c4f6 <__ieee754_atan2+0x86>
 800c52e:	1a9b      	subs	r3, r3, r2
 800c530:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800c534:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c538:	da16      	bge.n	800c568 <__ieee754_atan2+0xf8>
 800c53a:	2800      	cmp	r0, #0
 800c53c:	da01      	bge.n	800c542 <__ieee754_atan2+0xd2>
 800c53e:	323c      	adds	r2, #60	; 0x3c
 800c540:	db17      	blt.n	800c572 <__ieee754_atan2+0x102>
 800c542:	ed9d 7b00 	vldr	d7, [sp]
 800c546:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800c54a:	f000 fde3 	bl	800d114 <fabs>
 800c54e:	f000 fce7 	bl	800cf20 <atan>
 800c552:	ed8d 0b00 	vstr	d0, [sp]
 800c556:	2c01      	cmp	r4, #1
 800c558:	d00e      	beq.n	800c578 <__ieee754_atan2+0x108>
 800c55a:	2c02      	cmp	r4, #2
 800c55c:	d014      	beq.n	800c588 <__ieee754_atan2+0x118>
 800c55e:	b9f4      	cbnz	r4, 800c59e <__ieee754_atan2+0x12e>
 800c560:	ed9d 0b00 	vldr	d0, [sp]
 800c564:	b003      	add	sp, #12
 800c566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c568:	ed9f 7b19 	vldr	d7, [pc, #100]	; 800c5d0 <__ieee754_atan2+0x160>
 800c56c:	ed8d 7b00 	vstr	d7, [sp]
 800c570:	e7f1      	b.n	800c556 <__ieee754_atan2+0xe6>
 800c572:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 800c5e0 <__ieee754_atan2+0x170>
 800c576:	e7f9      	b.n	800c56c <__ieee754_atan2+0xfc>
 800c578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c57c:	9901      	ldr	r1, [sp, #4]
 800c57e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c582:	e9cd 2300 	strd	r2, r3, [sp]
 800c586:	e7eb      	b.n	800c560 <__ieee754_atan2+0xf0>
 800c588:	ed9d 6b00 	vldr	d6, [sp]
 800c58c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800c5e8 <__ieee754_atan2+0x178>
 800c590:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c594:	ed9f 6b16 	vldr	d6, [pc, #88]	; 800c5f0 <__ieee754_atan2+0x180>
 800c598:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c59c:	e788      	b.n	800c4b0 <__ieee754_atan2+0x40>
 800c59e:	ed9d 6b00 	vldr	d6, [sp]
 800c5a2:	ed9f 7b11 	vldr	d7, [pc, #68]	; 800c5e8 <__ieee754_atan2+0x178>
 800c5a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c5aa:	ed9f 6b11 	vldr	d6, [pc, #68]	; 800c5f0 <__ieee754_atan2+0x180>
 800c5ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c5b2:	e77d      	b.n	800c4b0 <__ieee754_atan2+0x40>
 800c5b4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800c5f0 <__ieee754_atan2+0x180>
 800c5b8:	e77a      	b.n	800c4b0 <__ieee754_atan2+0x40>
 800c5ba:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800c5f8 <__ieee754_atan2+0x188>
 800c5be:	e777      	b.n	800c4b0 <__ieee754_atan2+0x40>
 800c5c0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800c5e0 <__ieee754_atan2+0x170>
 800c5c4:	e774      	b.n	800c4b0 <__ieee754_atan2+0x40>
 800c5c6:	bf00      	nop
 800c5c8:	54442d18 	.word	0x54442d18
 800c5cc:	c00921fb 	.word	0xc00921fb
 800c5d0:	54442d18 	.word	0x54442d18
 800c5d4:	3ff921fb 	.word	0x3ff921fb
 800c5d8:	54442d18 	.word	0x54442d18
 800c5dc:	bff921fb 	.word	0xbff921fb
	...
 800c5e8:	33145c07 	.word	0x33145c07
 800c5ec:	3ca1a626 	.word	0x3ca1a626
 800c5f0:	54442d18 	.word	0x54442d18
 800c5f4:	400921fb 	.word	0x400921fb
 800c5f8:	54442d18 	.word	0x54442d18
 800c5fc:	3fe921fb 	.word	0x3fe921fb
 800c600:	7ff00000 	.word	0x7ff00000
 800c604:	0800fcd8 	.word	0x0800fcd8
 800c608:	0800fcf0 	.word	0x0800fcf0
 800c60c:	00000000 	.word	0x00000000

0800c610 <__ieee754_rem_pio2>:
 800c610:	b570      	push	{r4, r5, r6, lr}
 800c612:	eeb0 7b40 	vmov.f64	d7, d0
 800c616:	ee17 5a90 	vmov	r5, s15
 800c61a:	4b97      	ldr	r3, [pc, #604]	; (800c878 <__ieee754_rem_pio2+0x268>)
 800c61c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c620:	429e      	cmp	r6, r3
 800c622:	b088      	sub	sp, #32
 800c624:	4604      	mov	r4, r0
 800c626:	dc07      	bgt.n	800c638 <__ieee754_rem_pio2+0x28>
 800c628:	2200      	movs	r2, #0
 800c62a:	2300      	movs	r3, #0
 800c62c:	ed84 0b00 	vstr	d0, [r4]
 800c630:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c634:	2000      	movs	r0, #0
 800c636:	e01b      	b.n	800c670 <__ieee754_rem_pio2+0x60>
 800c638:	4b90      	ldr	r3, [pc, #576]	; (800c87c <__ieee754_rem_pio2+0x26c>)
 800c63a:	429e      	cmp	r6, r3
 800c63c:	dc3b      	bgt.n	800c6b6 <__ieee754_rem_pio2+0xa6>
 800c63e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800c642:	2d00      	cmp	r5, #0
 800c644:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800c838 <__ieee754_rem_pio2+0x228>
 800c648:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800c64c:	dd19      	ble.n	800c682 <__ieee754_rem_pio2+0x72>
 800c64e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c652:	429e      	cmp	r6, r3
 800c654:	d00e      	beq.n	800c674 <__ieee754_rem_pio2+0x64>
 800c656:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800c840 <__ieee754_rem_pio2+0x230>
 800c65a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800c65e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c662:	ed84 5b00 	vstr	d5, [r4]
 800c666:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c66a:	ed84 7b02 	vstr	d7, [r4, #8]
 800c66e:	2001      	movs	r0, #1
 800c670:	b008      	add	sp, #32
 800c672:	bd70      	pop	{r4, r5, r6, pc}
 800c674:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800c848 <__ieee754_rem_pio2+0x238>
 800c678:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c67c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800c850 <__ieee754_rem_pio2+0x240>
 800c680:	e7eb      	b.n	800c65a <__ieee754_rem_pio2+0x4a>
 800c682:	429e      	cmp	r6, r3
 800c684:	ee30 7b06 	vadd.f64	d7, d0, d6
 800c688:	d00e      	beq.n	800c6a8 <__ieee754_rem_pio2+0x98>
 800c68a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800c840 <__ieee754_rem_pio2+0x230>
 800c68e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800c692:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c696:	ed84 5b00 	vstr	d5, [r4]
 800c69a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c69e:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a2:	ed84 7b02 	vstr	d7, [r4, #8]
 800c6a6:	e7e3      	b.n	800c670 <__ieee754_rem_pio2+0x60>
 800c6a8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800c848 <__ieee754_rem_pio2+0x238>
 800c6ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c6b0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800c850 <__ieee754_rem_pio2+0x240>
 800c6b4:	e7eb      	b.n	800c68e <__ieee754_rem_pio2+0x7e>
 800c6b6:	4b72      	ldr	r3, [pc, #456]	; (800c880 <__ieee754_rem_pio2+0x270>)
 800c6b8:	429e      	cmp	r6, r3
 800c6ba:	dc6e      	bgt.n	800c79a <__ieee754_rem_pio2+0x18a>
 800c6bc:	f000 fd2a 	bl	800d114 <fabs>
 800c6c0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c6c4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800c858 <__ieee754_rem_pio2+0x248>
 800c6c8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800c6cc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c6d0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800c6d4:	ee17 0a90 	vmov	r0, s15
 800c6d8:	eeb1 4b45 	vneg.f64	d4, d5
 800c6dc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800c838 <__ieee754_rem_pio2+0x228>
 800c6e0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800c6e4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800c840 <__ieee754_rem_pio2+0x230>
 800c6e8:	281f      	cmp	r0, #31
 800c6ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c6ee:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c6f2:	dc08      	bgt.n	800c706 <__ieee754_rem_pio2+0xf6>
 800c6f4:	4b63      	ldr	r3, [pc, #396]	; (800c884 <__ieee754_rem_pio2+0x274>)
 800c6f6:	1e42      	subs	r2, r0, #1
 800c6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6fc:	42b3      	cmp	r3, r6
 800c6fe:	d002      	beq.n	800c706 <__ieee754_rem_pio2+0xf6>
 800c700:	ed84 6b00 	vstr	d6, [r4]
 800c704:	e024      	b.n	800c750 <__ieee754_rem_pio2+0x140>
 800c706:	ee16 3a90 	vmov	r3, s13
 800c70a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c70e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800c712:	2b10      	cmp	r3, #16
 800c714:	ea4f 5226 	mov.w	r2, r6, asr #20
 800c718:	ddf2      	ble.n	800c700 <__ieee754_rem_pio2+0xf0>
 800c71a:	eeb0 6b40 	vmov.f64	d6, d0
 800c71e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800c848 <__ieee754_rem_pio2+0x238>
 800c722:	eea4 6b03 	vfma.f64	d6, d4, d3
 800c726:	ee30 7b46 	vsub.f64	d7, d0, d6
 800c72a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800c72e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800c850 <__ieee754_rem_pio2+0x240>
 800c732:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800c736:	ee36 3b47 	vsub.f64	d3, d6, d7
 800c73a:	ee13 3a90 	vmov	r3, s7
 800c73e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800c742:	1ad3      	subs	r3, r2, r3
 800c744:	2b31      	cmp	r3, #49	; 0x31
 800c746:	dc17      	bgt.n	800c778 <__ieee754_rem_pio2+0x168>
 800c748:	eeb0 0b46 	vmov.f64	d0, d6
 800c74c:	ed84 3b00 	vstr	d3, [r4]
 800c750:	ed94 6b00 	vldr	d6, [r4]
 800c754:	2d00      	cmp	r5, #0
 800c756:	ee30 0b46 	vsub.f64	d0, d0, d6
 800c75a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800c75e:	ed84 7b02 	vstr	d7, [r4, #8]
 800c762:	da85      	bge.n	800c670 <__ieee754_rem_pio2+0x60>
 800c764:	eeb1 6b46 	vneg.f64	d6, d6
 800c768:	ed84 6b00 	vstr	d6, [r4]
 800c76c:	eeb1 7b47 	vneg.f64	d7, d7
 800c770:	4240      	negs	r0, r0
 800c772:	ed84 7b02 	vstr	d7, [r4, #8]
 800c776:	e77b      	b.n	800c670 <__ieee754_rem_pio2+0x60>
 800c778:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800c860 <__ieee754_rem_pio2+0x250>
 800c77c:	eeb0 0b46 	vmov.f64	d0, d6
 800c780:	eea4 0b03 	vfma.f64	d0, d4, d3
 800c784:	ee36 7b40 	vsub.f64	d7, d6, d0
 800c788:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800c868 <__ieee754_rem_pio2+0x258>
 800c78c:	eea4 7b03 	vfma.f64	d7, d4, d3
 800c790:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800c794:	ee30 6b47 	vsub.f64	d6, d0, d7
 800c798:	e7b2      	b.n	800c700 <__ieee754_rem_pio2+0xf0>
 800c79a:	4b3b      	ldr	r3, [pc, #236]	; (800c888 <__ieee754_rem_pio2+0x278>)
 800c79c:	429e      	cmp	r6, r3
 800c79e:	dd06      	ble.n	800c7ae <__ieee754_rem_pio2+0x19e>
 800c7a0:	ee30 7b40 	vsub.f64	d7, d0, d0
 800c7a4:	ed80 7b02 	vstr	d7, [r0, #8]
 800c7a8:	ed80 7b00 	vstr	d7, [r0]
 800c7ac:	e742      	b.n	800c634 <__ieee754_rem_pio2+0x24>
 800c7ae:	1532      	asrs	r2, r6, #20
 800c7b0:	ee10 0a10 	vmov	r0, s0
 800c7b4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800c7b8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800c7bc:	ec41 0b17 	vmov	d7, r0, r1
 800c7c0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c7c4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800c870 <__ieee754_rem_pio2+0x260>
 800c7c8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c7cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c7d0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c7d4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c7d8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c7dc:	a902      	add	r1, sp, #8
 800c7de:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c7e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c7e6:	ed8d 6b04 	vstr	d6, [sp, #16]
 800c7ea:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c7ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c7f2:	2603      	movs	r6, #3
 800c7f4:	4608      	mov	r0, r1
 800c7f6:	ed91 7b04 	vldr	d7, [r1, #16]
 800c7fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c802:	4633      	mov	r3, r6
 800c804:	f1a1 0108 	sub.w	r1, r1, #8
 800c808:	f106 36ff 	add.w	r6, r6, #4294967295
 800c80c:	d0f3      	beq.n	800c7f6 <__ieee754_rem_pio2+0x1e6>
 800c80e:	491f      	ldr	r1, [pc, #124]	; (800c88c <__ieee754_rem_pio2+0x27c>)
 800c810:	9101      	str	r1, [sp, #4]
 800c812:	2102      	movs	r1, #2
 800c814:	9100      	str	r1, [sp, #0]
 800c816:	4621      	mov	r1, r4
 800c818:	f000 f8aa 	bl	800c970 <__kernel_rem_pio2>
 800c81c:	2d00      	cmp	r5, #0
 800c81e:	f6bf af27 	bge.w	800c670 <__ieee754_rem_pio2+0x60>
 800c822:	ed94 7b00 	vldr	d7, [r4]
 800c826:	eeb1 7b47 	vneg.f64	d7, d7
 800c82a:	ed84 7b00 	vstr	d7, [r4]
 800c82e:	ed94 7b02 	vldr	d7, [r4, #8]
 800c832:	e79b      	b.n	800c76c <__ieee754_rem_pio2+0x15c>
 800c834:	f3af 8000 	nop.w
 800c838:	54400000 	.word	0x54400000
 800c83c:	3ff921fb 	.word	0x3ff921fb
 800c840:	1a626331 	.word	0x1a626331
 800c844:	3dd0b461 	.word	0x3dd0b461
 800c848:	1a600000 	.word	0x1a600000
 800c84c:	3dd0b461 	.word	0x3dd0b461
 800c850:	2e037073 	.word	0x2e037073
 800c854:	3ba3198a 	.word	0x3ba3198a
 800c858:	6dc9c883 	.word	0x6dc9c883
 800c85c:	3fe45f30 	.word	0x3fe45f30
 800c860:	2e000000 	.word	0x2e000000
 800c864:	3ba3198a 	.word	0x3ba3198a
 800c868:	252049c1 	.word	0x252049c1
 800c86c:	397b839a 	.word	0x397b839a
 800c870:	00000000 	.word	0x00000000
 800c874:	41700000 	.word	0x41700000
 800c878:	3fe921fb 	.word	0x3fe921fb
 800c87c:	4002d97b 	.word	0x4002d97b
 800c880:	413921fb 	.word	0x413921fb
 800c884:	0800fd08 	.word	0x0800fd08
 800c888:	7fefffff 	.word	0x7fefffff
 800c88c:	0800fd88 	.word	0x0800fd88

0800c890 <__ieee754_sqrt>:
 800c890:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800c894:	4770      	bx	lr
	...

0800c898 <__kernel_cos>:
 800c898:	ee10 1a90 	vmov	r1, s1
 800c89c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800c8a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c8a4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800c8a8:	da05      	bge.n	800c8b6 <__kernel_cos+0x1e>
 800c8aa:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800c8ae:	ee17 3a90 	vmov	r3, s15
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d03d      	beq.n	800c932 <__kernel_cos+0x9a>
 800c8b6:	ee20 3b00 	vmul.f64	d3, d0, d0
 800c8ba:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800c938 <__kernel_cos+0xa0>
 800c8be:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c940 <__kernel_cos+0xa8>
 800c8c2:	eea3 6b07 	vfma.f64	d6, d3, d7
 800c8c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c948 <__kernel_cos+0xb0>
 800c8ca:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c8ce:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c950 <__kernel_cos+0xb8>
 800c8d2:	eea7 6b03 	vfma.f64	d6, d7, d3
 800c8d6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c958 <__kernel_cos+0xc0>
 800c8da:	4b23      	ldr	r3, [pc, #140]	; (800c968 <__kernel_cos+0xd0>)
 800c8dc:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c8e0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800c960 <__kernel_cos+0xc8>
 800c8e4:	4299      	cmp	r1, r3
 800c8e6:	eea7 6b03 	vfma.f64	d6, d7, d3
 800c8ea:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c8ee:	ee26 5b03 	vmul.f64	d5, d6, d3
 800c8f2:	ee23 7b07 	vmul.f64	d7, d3, d7
 800c8f6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800c8fa:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c8fe:	dc04      	bgt.n	800c90a <__kernel_cos+0x72>
 800c900:	ee37 6b46 	vsub.f64	d6, d7, d6
 800c904:	ee34 0b46 	vsub.f64	d0, d4, d6
 800c908:	4770      	bx	lr
 800c90a:	4b18      	ldr	r3, [pc, #96]	; (800c96c <__kernel_cos+0xd4>)
 800c90c:	4299      	cmp	r1, r3
 800c90e:	dc0d      	bgt.n	800c92c <__kernel_cos+0x94>
 800c910:	2200      	movs	r2, #0
 800c912:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800c916:	ec43 2b15 	vmov	d5, r2, r3
 800c91a:	ee34 0b45 	vsub.f64	d0, d4, d5
 800c91e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c922:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c926:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c92a:	4770      	bx	lr
 800c92c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800c930:	e7f3      	b.n	800c91a <__kernel_cos+0x82>
 800c932:	eeb0 0b44 	vmov.f64	d0, d4
 800c936:	4770      	bx	lr
 800c938:	be8838d4 	.word	0xbe8838d4
 800c93c:	bda8fae9 	.word	0xbda8fae9
 800c940:	bdb4b1c4 	.word	0xbdb4b1c4
 800c944:	3e21ee9e 	.word	0x3e21ee9e
 800c948:	809c52ad 	.word	0x809c52ad
 800c94c:	be927e4f 	.word	0xbe927e4f
 800c950:	19cb1590 	.word	0x19cb1590
 800c954:	3efa01a0 	.word	0x3efa01a0
 800c958:	16c15177 	.word	0x16c15177
 800c95c:	bf56c16c 	.word	0xbf56c16c
 800c960:	5555554c 	.word	0x5555554c
 800c964:	3fa55555 	.word	0x3fa55555
 800c968:	3fd33332 	.word	0x3fd33332
 800c96c:	3fe90000 	.word	0x3fe90000

0800c970 <__kernel_rem_pio2>:
 800c970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c974:	ed2d 8b06 	vpush	{d8-d10}
 800c978:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800c97c:	469b      	mov	fp, r3
 800c97e:	460f      	mov	r7, r1
 800c980:	4bcf      	ldr	r3, [pc, #828]	; (800ccc0 <__kernel_rem_pio2+0x350>)
 800c982:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800c984:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800c988:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800c98c:	9000      	str	r0, [sp, #0]
 800c98e:	f112 0f14 	cmn.w	r2, #20
 800c992:	bfa8      	it	ge
 800c994:	2318      	movge	r3, #24
 800c996:	f10b 31ff 	add.w	r1, fp, #4294967295
 800c99a:	bfb8      	it	lt
 800c99c:	2300      	movlt	r3, #0
 800c99e:	f06f 0417 	mvn.w	r4, #23
 800c9a2:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800cca8 <__kernel_rem_pio2+0x338>
 800c9a6:	bfa4      	itt	ge
 800c9a8:	f1a2 0a03 	subge.w	sl, r2, #3
 800c9ac:	fb9a f3f3 	sdivge	r3, sl, r3
 800c9b0:	fb03 4404 	mla	r4, r3, r4, r4
 800c9b4:	1a5d      	subs	r5, r3, r1
 800c9b6:	4414      	add	r4, r2
 800c9b8:	eb09 0601 	add.w	r6, r9, r1
 800c9bc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800c9c0:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	42b2      	cmp	r2, r6
 800c9c8:	dd12      	ble.n	800c9f0 <__kernel_rem_pio2+0x80>
 800c9ca:	aa18      	add	r2, sp, #96	; 0x60
 800c9cc:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800c9d0:	460e      	mov	r6, r1
 800c9d2:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800c9d6:	f1cb 0a01 	rsb	sl, fp, #1
 800c9da:	eb0a 0006 	add.w	r0, sl, r6
 800c9de:	4581      	cmp	r9, r0
 800c9e0:	db25      	blt.n	800ca2e <__kernel_rem_pio2+0xbe>
 800c9e2:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800cca8 <__kernel_rem_pio2+0x338>
 800c9e6:	f8dd e000 	ldr.w	lr, [sp]
 800c9ea:	4615      	mov	r5, r2
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	e015      	b.n	800ca1c <__kernel_rem_pio2+0xac>
 800c9f0:	42d5      	cmn	r5, r2
 800c9f2:	d409      	bmi.n	800ca08 <__kernel_rem_pio2+0x98>
 800c9f4:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800c9f8:	ee07 0a90 	vmov	s15, r0
 800c9fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ca00:	eca8 7b02 	vstmia	r8!, {d7}
 800ca04:	3201      	adds	r2, #1
 800ca06:	e7de      	b.n	800c9c6 <__kernel_rem_pio2+0x56>
 800ca08:	eeb0 7b46 	vmov.f64	d7, d6
 800ca0c:	e7f8      	b.n	800ca00 <__kernel_rem_pio2+0x90>
 800ca0e:	ecbe 5b02 	vldmia	lr!, {d5}
 800ca12:	ed95 6b00 	vldr	d6, [r5]
 800ca16:	3001      	adds	r0, #1
 800ca18:	eea5 7b06 	vfma.f64	d7, d5, d6
 800ca1c:	4288      	cmp	r0, r1
 800ca1e:	f1a5 0508 	sub.w	r5, r5, #8
 800ca22:	ddf4      	ble.n	800ca0e <__kernel_rem_pio2+0x9e>
 800ca24:	eca8 7b02 	vstmia	r8!, {d7}
 800ca28:	3208      	adds	r2, #8
 800ca2a:	3601      	adds	r6, #1
 800ca2c:	e7d5      	b.n	800c9da <__kernel_rem_pio2+0x6a>
 800ca2e:	aa04      	add	r2, sp, #16
 800ca30:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800ccb0 <__kernel_rem_pio2+0x340>
 800ca34:	ed9f aba0 	vldr	d10, [pc, #640]	; 800ccb8 <__kernel_rem_pio2+0x348>
 800ca38:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800ca3c:	9201      	str	r2, [sp, #4]
 800ca3e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800ca42:	464e      	mov	r6, r9
 800ca44:	ab90      	add	r3, sp, #576	; 0x240
 800ca46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ca4a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800ca4e:	ab04      	add	r3, sp, #16
 800ca50:	4618      	mov	r0, r3
 800ca52:	4632      	mov	r2, r6
 800ca54:	2a00      	cmp	r2, #0
 800ca56:	dc4e      	bgt.n	800caf6 <__kernel_rem_pio2+0x186>
 800ca58:	4620      	mov	r0, r4
 800ca5a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800ca5e:	f000 fbd7 	bl	800d210 <scalbn>
 800ca62:	eeb0 8b40 	vmov.f64	d8, d0
 800ca66:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800ca6a:	ee28 0b00 	vmul.f64	d0, d8, d0
 800ca6e:	f000 fb5b 	bl	800d128 <floor>
 800ca72:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800ca76:	eea0 8b47 	vfms.f64	d8, d0, d7
 800ca7a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800ca7e:	2c00      	cmp	r4, #0
 800ca80:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800ca84:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800ca88:	ee38 8b40 	vsub.f64	d8, d8, d0
 800ca8c:	ee17 8a90 	vmov	r8, s15
 800ca90:	dd46      	ble.n	800cb20 <__kernel_rem_pio2+0x1b0>
 800ca92:	1e70      	subs	r0, r6, #1
 800ca94:	aa04      	add	r2, sp, #16
 800ca96:	f1c4 0c18 	rsb	ip, r4, #24
 800ca9a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800ca9e:	fa45 f20c 	asr.w	r2, r5, ip
 800caa2:	4490      	add	r8, r2
 800caa4:	fa02 f20c 	lsl.w	r2, r2, ip
 800caa8:	1aad      	subs	r5, r5, r2
 800caaa:	aa04      	add	r2, sp, #16
 800caac:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800cab0:	f1c4 0217 	rsb	r2, r4, #23
 800cab4:	4115      	asrs	r5, r2
 800cab6:	2d00      	cmp	r5, #0
 800cab8:	dd41      	ble.n	800cb3e <__kernel_rem_pio2+0x1ce>
 800caba:	f04f 0c00 	mov.w	ip, #0
 800cabe:	f108 0801 	add.w	r8, r8, #1
 800cac2:	4660      	mov	r0, ip
 800cac4:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800cac8:	4566      	cmp	r6, ip
 800caca:	dc69      	bgt.n	800cba0 <__kernel_rem_pio2+0x230>
 800cacc:	2c00      	cmp	r4, #0
 800cace:	dd03      	ble.n	800cad8 <__kernel_rem_pio2+0x168>
 800cad0:	2c01      	cmp	r4, #1
 800cad2:	d076      	beq.n	800cbc2 <__kernel_rem_pio2+0x252>
 800cad4:	2c02      	cmp	r4, #2
 800cad6:	d07f      	beq.n	800cbd8 <__kernel_rem_pio2+0x268>
 800cad8:	2d02      	cmp	r5, #2
 800cada:	d130      	bne.n	800cb3e <__kernel_rem_pio2+0x1ce>
 800cadc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cae0:	ee30 8b48 	vsub.f64	d8, d0, d8
 800cae4:	b358      	cbz	r0, 800cb3e <__kernel_rem_pio2+0x1ce>
 800cae6:	4620      	mov	r0, r4
 800cae8:	9102      	str	r1, [sp, #8]
 800caea:	f000 fb91 	bl	800d210 <scalbn>
 800caee:	9902      	ldr	r1, [sp, #8]
 800caf0:	ee38 8b40 	vsub.f64	d8, d8, d0
 800caf4:	e023      	b.n	800cb3e <__kernel_rem_pio2+0x1ce>
 800caf6:	ee20 7b09 	vmul.f64	d7, d0, d9
 800cafa:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800cafe:	3a01      	subs	r2, #1
 800cb00:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800cb04:	ad68      	add	r5, sp, #416	; 0x1a0
 800cb06:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800cb0a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800cb0e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800cb12:	eca0 0a01 	vstmia	r0!, {s0}
 800cb16:	ed95 0b00 	vldr	d0, [r5]
 800cb1a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800cb1e:	e799      	b.n	800ca54 <__kernel_rem_pio2+0xe4>
 800cb20:	d105      	bne.n	800cb2e <__kernel_rem_pio2+0x1be>
 800cb22:	1e72      	subs	r2, r6, #1
 800cb24:	a804      	add	r0, sp, #16
 800cb26:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800cb2a:	15ed      	asrs	r5, r5, #23
 800cb2c:	e7c3      	b.n	800cab6 <__kernel_rem_pio2+0x146>
 800cb2e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800cb32:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800cb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb3a:	da2f      	bge.n	800cb9c <__kernel_rem_pio2+0x22c>
 800cb3c:	2500      	movs	r5, #0
 800cb3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cb42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb46:	f040 8087 	bne.w	800cc58 <__kernel_rem_pio2+0x2e8>
 800cb4a:	1e73      	subs	r3, r6, #1
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f04f 0c00 	mov.w	ip, #0
 800cb52:	4548      	cmp	r0, r9
 800cb54:	da47      	bge.n	800cbe6 <__kernel_rem_pio2+0x276>
 800cb56:	f1bc 0f00 	cmp.w	ip, #0
 800cb5a:	d070      	beq.n	800cc3e <__kernel_rem_pio2+0x2ce>
 800cb5c:	aa04      	add	r2, sp, #16
 800cb5e:	3c18      	subs	r4, #24
 800cb60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cb64:	2a00      	cmp	r2, #0
 800cb66:	d075      	beq.n	800cc54 <__kernel_rem_pio2+0x2e4>
 800cb68:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	9300      	str	r3, [sp, #0]
 800cb70:	f000 fb4e 	bl	800d210 <scalbn>
 800cb74:	9b00      	ldr	r3, [sp, #0]
 800cb76:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800ccb0 <__kernel_rem_pio2+0x340>
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	2a00      	cmp	r2, #0
 800cb7e:	f280 80ac 	bge.w	800ccda <__kernel_rem_pio2+0x36a>
 800cb82:	4619      	mov	r1, r3
 800cb84:	2000      	movs	r0, #0
 800cb86:	2900      	cmp	r1, #0
 800cb88:	f2c0 80cd 	blt.w	800cd26 <__kernel_rem_pio2+0x3b6>
 800cb8c:	aa68      	add	r2, sp, #416	; 0x1a0
 800cb8e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800cb92:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800cca8 <__kernel_rem_pio2+0x338>
 800cb96:	4e4b      	ldr	r6, [pc, #300]	; (800ccc4 <__kernel_rem_pio2+0x354>)
 800cb98:	2200      	movs	r2, #0
 800cb9a:	e0b8      	b.n	800cd0e <__kernel_rem_pio2+0x39e>
 800cb9c:	2502      	movs	r5, #2
 800cb9e:	e78c      	b.n	800caba <__kernel_rem_pio2+0x14a>
 800cba0:	681a      	ldr	r2, [r3, #0]
 800cba2:	b948      	cbnz	r0, 800cbb8 <__kernel_rem_pio2+0x248>
 800cba4:	b11a      	cbz	r2, 800cbae <__kernel_rem_pio2+0x23e>
 800cba6:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800cbaa:	601a      	str	r2, [r3, #0]
 800cbac:	2201      	movs	r2, #1
 800cbae:	f10c 0c01 	add.w	ip, ip, #1
 800cbb2:	3304      	adds	r3, #4
 800cbb4:	4610      	mov	r0, r2
 800cbb6:	e787      	b.n	800cac8 <__kernel_rem_pio2+0x158>
 800cbb8:	ebae 0202 	sub.w	r2, lr, r2
 800cbbc:	601a      	str	r2, [r3, #0]
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	e7f5      	b.n	800cbae <__kernel_rem_pio2+0x23e>
 800cbc2:	1e72      	subs	r2, r6, #1
 800cbc4:	ab04      	add	r3, sp, #16
 800cbc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbca:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cbce:	f10d 0c10 	add.w	ip, sp, #16
 800cbd2:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800cbd6:	e77f      	b.n	800cad8 <__kernel_rem_pio2+0x168>
 800cbd8:	1e72      	subs	r2, r6, #1
 800cbda:	ab04      	add	r3, sp, #16
 800cbdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbe0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cbe4:	e7f3      	b.n	800cbce <__kernel_rem_pio2+0x25e>
 800cbe6:	aa04      	add	r2, sp, #16
 800cbe8:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800cbec:	3801      	subs	r0, #1
 800cbee:	ea4c 0c02 	orr.w	ip, ip, r2
 800cbf2:	e7ae      	b.n	800cb52 <__kernel_rem_pio2+0x1e2>
 800cbf4:	3001      	adds	r0, #1
 800cbf6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cbfa:	2a00      	cmp	r2, #0
 800cbfc:	d0fa      	beq.n	800cbf4 <__kernel_rem_pio2+0x284>
 800cbfe:	eb06 020b 	add.w	r2, r6, fp
 800cc02:	ad18      	add	r5, sp, #96	; 0x60
 800cc04:	1c73      	adds	r3, r6, #1
 800cc06:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800cc0a:	4406      	add	r6, r0
 800cc0c:	429e      	cmp	r6, r3
 800cc0e:	f6ff af19 	blt.w	800ca44 <__kernel_rem_pio2+0xd4>
 800cc12:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800cc16:	9d00      	ldr	r5, [sp, #0]
 800cc18:	ee07 0a90 	vmov	s15, r0
 800cc1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800cc20:	2000      	movs	r0, #0
 800cc22:	eca2 7b02 	vstmia	r2!, {d7}
 800cc26:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800cca8 <__kernel_rem_pio2+0x338>
 800cc2a:	4694      	mov	ip, r2
 800cc2c:	4288      	cmp	r0, r1
 800cc2e:	dd09      	ble.n	800cc44 <__kernel_rem_pio2+0x2d4>
 800cc30:	a868      	add	r0, sp, #416	; 0x1a0
 800cc32:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800cc36:	ed80 7b00 	vstr	d7, [r0]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	e7e6      	b.n	800cc0c <__kernel_rem_pio2+0x29c>
 800cc3e:	9b01      	ldr	r3, [sp, #4]
 800cc40:	2001      	movs	r0, #1
 800cc42:	e7d8      	b.n	800cbf6 <__kernel_rem_pio2+0x286>
 800cc44:	ecb5 5b02 	vldmia	r5!, {d5}
 800cc48:	ed3c 6b02 	vldmdb	ip!, {d6}
 800cc4c:	3001      	adds	r0, #1
 800cc4e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cc52:	e7eb      	b.n	800cc2c <__kernel_rem_pio2+0x2bc>
 800cc54:	3b01      	subs	r3, #1
 800cc56:	e781      	b.n	800cb5c <__kernel_rem_pio2+0x1ec>
 800cc58:	4260      	negs	r0, r4
 800cc5a:	eeb0 0b48 	vmov.f64	d0, d8
 800cc5e:	f000 fad7 	bl	800d210 <scalbn>
 800cc62:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800ccb8 <__kernel_rem_pio2+0x348>
 800cc66:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800cc6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc6e:	db2b      	blt.n	800ccc8 <__kernel_rem_pio2+0x358>
 800cc70:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800ccb0 <__kernel_rem_pio2+0x340>
 800cc74:	ee20 7b07 	vmul.f64	d7, d0, d7
 800cc78:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800cc7c:	aa04      	add	r2, sp, #16
 800cc7e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800cc82:	eea5 0b46 	vfms.f64	d0, d5, d6
 800cc86:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800cc8a:	a904      	add	r1, sp, #16
 800cc8c:	ee10 3a10 	vmov	r3, s0
 800cc90:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800cc94:	ee17 2a10 	vmov	r2, s14
 800cc98:	1c73      	adds	r3, r6, #1
 800cc9a:	3418      	adds	r4, #24
 800cc9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800cca0:	e762      	b.n	800cb68 <__kernel_rem_pio2+0x1f8>
 800cca2:	bf00      	nop
 800cca4:	f3af 8000 	nop.w
	...
 800ccb4:	3e700000 	.word	0x3e700000
 800ccb8:	00000000 	.word	0x00000000
 800ccbc:	41700000 	.word	0x41700000
 800ccc0:	0800fed0 	.word	0x0800fed0
 800ccc4:	0800fe90 	.word	0x0800fe90
 800ccc8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800cccc:	aa04      	add	r2, sp, #16
 800ccce:	ee10 3a10 	vmov	r3, s0
 800ccd2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ccd6:	4633      	mov	r3, r6
 800ccd8:	e746      	b.n	800cb68 <__kernel_rem_pio2+0x1f8>
 800ccda:	a804      	add	r0, sp, #16
 800ccdc:	a968      	add	r1, sp, #416	; 0x1a0
 800ccde:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800cce2:	9000      	str	r0, [sp, #0]
 800cce4:	ee07 0a90 	vmov	s15, r0
 800cce8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ccec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ccf0:	3a01      	subs	r2, #1
 800ccf2:	ee27 7b00 	vmul.f64	d7, d7, d0
 800ccf6:	ee20 0b06 	vmul.f64	d0, d0, d6
 800ccfa:	ed81 7b00 	vstr	d7, [r1]
 800ccfe:	e73d      	b.n	800cb7c <__kernel_rem_pio2+0x20c>
 800cd00:	ecb6 5b02 	vldmia	r6!, {d5}
 800cd04:	ecb4 6b02 	vldmia	r4!, {d6}
 800cd08:	3201      	adds	r2, #1
 800cd0a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cd0e:	454a      	cmp	r2, r9
 800cd10:	dc01      	bgt.n	800cd16 <__kernel_rem_pio2+0x3a6>
 800cd12:	4290      	cmp	r0, r2
 800cd14:	daf4      	bge.n	800cd00 <__kernel_rem_pio2+0x390>
 800cd16:	aa40      	add	r2, sp, #256	; 0x100
 800cd18:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cd1c:	ed82 7b00 	vstr	d7, [r2]
 800cd20:	3901      	subs	r1, #1
 800cd22:	3001      	adds	r0, #1
 800cd24:	e72f      	b.n	800cb86 <__kernel_rem_pio2+0x216>
 800cd26:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800cd28:	2a02      	cmp	r2, #2
 800cd2a:	dc0a      	bgt.n	800cd42 <__kernel_rem_pio2+0x3d2>
 800cd2c:	2a00      	cmp	r2, #0
 800cd2e:	dc5a      	bgt.n	800cde6 <__kernel_rem_pio2+0x476>
 800cd30:	d039      	beq.n	800cda6 <__kernel_rem_pio2+0x436>
 800cd32:	f008 0007 	and.w	r0, r8, #7
 800cd36:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800cd3a:	ecbd 8b06 	vpop	{d8-d10}
 800cd3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd42:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800cd44:	2a03      	cmp	r2, #3
 800cd46:	d1f4      	bne.n	800cd32 <__kernel_rem_pio2+0x3c2>
 800cd48:	aa40      	add	r2, sp, #256	; 0x100
 800cd4a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cd4e:	4611      	mov	r1, r2
 800cd50:	4618      	mov	r0, r3
 800cd52:	2800      	cmp	r0, #0
 800cd54:	f1a1 0108 	sub.w	r1, r1, #8
 800cd58:	dc52      	bgt.n	800ce00 <__kernel_rem_pio2+0x490>
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	2901      	cmp	r1, #1
 800cd5e:	f1a2 0208 	sub.w	r2, r2, #8
 800cd62:	dc5d      	bgt.n	800ce20 <__kernel_rem_pio2+0x4b0>
 800cd64:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800ce68 <__kernel_rem_pio2+0x4f8>
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	dc69      	bgt.n	800ce40 <__kernel_rem_pio2+0x4d0>
 800cd6c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800cd70:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800cd74:	2d00      	cmp	r5, #0
 800cd76:	d16c      	bne.n	800ce52 <__kernel_rem_pio2+0x4e2>
 800cd78:	ed87 5b00 	vstr	d5, [r7]
 800cd7c:	ed87 6b02 	vstr	d6, [r7, #8]
 800cd80:	ed87 7b04 	vstr	d7, [r7, #16]
 800cd84:	e7d5      	b.n	800cd32 <__kernel_rem_pio2+0x3c2>
 800cd86:	aa40      	add	r2, sp, #256	; 0x100
 800cd88:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800cd8c:	ed92 6b00 	vldr	d6, [r2]
 800cd90:	3b01      	subs	r3, #1
 800cd92:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	daf5      	bge.n	800cd86 <__kernel_rem_pio2+0x416>
 800cd9a:	b10d      	cbz	r5, 800cda0 <__kernel_rem_pio2+0x430>
 800cd9c:	eeb1 7b47 	vneg.f64	d7, d7
 800cda0:	ed87 7b00 	vstr	d7, [r7]
 800cda4:	e7c5      	b.n	800cd32 <__kernel_rem_pio2+0x3c2>
 800cda6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800ce68 <__kernel_rem_pio2+0x4f8>
 800cdaa:	e7f4      	b.n	800cd96 <__kernel_rem_pio2+0x426>
 800cdac:	a940      	add	r1, sp, #256	; 0x100
 800cdae:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800cdb2:	ed91 7b00 	vldr	d7, [r1]
 800cdb6:	3a01      	subs	r2, #1
 800cdb8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cdbc:	2a00      	cmp	r2, #0
 800cdbe:	daf5      	bge.n	800cdac <__kernel_rem_pio2+0x43c>
 800cdc0:	b1ad      	cbz	r5, 800cdee <__kernel_rem_pio2+0x47e>
 800cdc2:	eeb1 7b46 	vneg.f64	d7, d6
 800cdc6:	ed87 7b00 	vstr	d7, [r7]
 800cdca:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800cdce:	a942      	add	r1, sp, #264	; 0x108
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	da0c      	bge.n	800cdf4 <__kernel_rem_pio2+0x484>
 800cdda:	b10d      	cbz	r5, 800cde0 <__kernel_rem_pio2+0x470>
 800cddc:	eeb1 7b47 	vneg.f64	d7, d7
 800cde0:	ed87 7b02 	vstr	d7, [r7, #8]
 800cde4:	e7a5      	b.n	800cd32 <__kernel_rem_pio2+0x3c2>
 800cde6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800ce68 <__kernel_rem_pio2+0x4f8>
 800cdea:	461a      	mov	r2, r3
 800cdec:	e7e6      	b.n	800cdbc <__kernel_rem_pio2+0x44c>
 800cdee:	eeb0 7b46 	vmov.f64	d7, d6
 800cdf2:	e7e8      	b.n	800cdc6 <__kernel_rem_pio2+0x456>
 800cdf4:	ecb1 6b02 	vldmia	r1!, {d6}
 800cdf8:	3201      	adds	r2, #1
 800cdfa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cdfe:	e7ea      	b.n	800cdd6 <__kernel_rem_pio2+0x466>
 800ce00:	ed91 7b00 	vldr	d7, [r1]
 800ce04:	ed91 5b02 	vldr	d5, [r1, #8]
 800ce08:	3801      	subs	r0, #1
 800ce0a:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ce0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ce12:	ed81 6b00 	vstr	d6, [r1]
 800ce16:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ce1a:	ed81 7b02 	vstr	d7, [r1, #8]
 800ce1e:	e798      	b.n	800cd52 <__kernel_rem_pio2+0x3e2>
 800ce20:	ed92 7b00 	vldr	d7, [r2]
 800ce24:	ed92 5b02 	vldr	d5, [r2, #8]
 800ce28:	3901      	subs	r1, #1
 800ce2a:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ce2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ce32:	ed82 6b00 	vstr	d6, [r2]
 800ce36:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ce3a:	ed82 7b02 	vstr	d7, [r2, #8]
 800ce3e:	e78d      	b.n	800cd5c <__kernel_rem_pio2+0x3ec>
 800ce40:	aa40      	add	r2, sp, #256	; 0x100
 800ce42:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ce46:	ed92 6b00 	vldr	d6, [r2]
 800ce4a:	3b01      	subs	r3, #1
 800ce4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ce50:	e78a      	b.n	800cd68 <__kernel_rem_pio2+0x3f8>
 800ce52:	eeb1 5b45 	vneg.f64	d5, d5
 800ce56:	eeb1 6b46 	vneg.f64	d6, d6
 800ce5a:	ed87 5b00 	vstr	d5, [r7]
 800ce5e:	eeb1 7b47 	vneg.f64	d7, d7
 800ce62:	ed87 6b02 	vstr	d6, [r7, #8]
 800ce66:	e78b      	b.n	800cd80 <__kernel_rem_pio2+0x410>
	...

0800ce70 <__kernel_sin>:
 800ce70:	ee10 3a90 	vmov	r3, s1
 800ce74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ce78:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ce7c:	da04      	bge.n	800ce88 <__kernel_sin+0x18>
 800ce7e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800ce82:	ee17 3a90 	vmov	r3, s15
 800ce86:	b35b      	cbz	r3, 800cee0 <__kernel_sin+0x70>
 800ce88:	ee20 6b00 	vmul.f64	d6, d0, d0
 800ce8c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800ce90:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800cee8 <__kernel_sin+0x78>
 800ce94:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800cef0 <__kernel_sin+0x80>
 800ce98:	eea6 4b07 	vfma.f64	d4, d6, d7
 800ce9c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800cef8 <__kernel_sin+0x88>
 800cea0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800cea4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800cf00 <__kernel_sin+0x90>
 800cea8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800ceac:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800cf08 <__kernel_sin+0x98>
 800ceb0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ceb4:	b930      	cbnz	r0, 800cec4 <__kernel_sin+0x54>
 800ceb6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800cf10 <__kernel_sin+0xa0>
 800ceba:	eea6 4b07 	vfma.f64	d4, d6, d7
 800cebe:	eea4 0b05 	vfma.f64	d0, d4, d5
 800cec2:	4770      	bx	lr
 800cec4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800cec8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800cecc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800ced0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800ced4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800cf18 <__kernel_sin+0xa8>
 800ced8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800cedc:	ee30 0b41 	vsub.f64	d0, d0, d1
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	f3af 8000 	nop.w
 800cee8:	5acfd57c 	.word	0x5acfd57c
 800ceec:	3de5d93a 	.word	0x3de5d93a
 800cef0:	8a2b9ceb 	.word	0x8a2b9ceb
 800cef4:	be5ae5e6 	.word	0xbe5ae5e6
 800cef8:	57b1fe7d 	.word	0x57b1fe7d
 800cefc:	3ec71de3 	.word	0x3ec71de3
 800cf00:	19c161d5 	.word	0x19c161d5
 800cf04:	bf2a01a0 	.word	0xbf2a01a0
 800cf08:	1110f8a6 	.word	0x1110f8a6
 800cf0c:	3f811111 	.word	0x3f811111
 800cf10:	55555549 	.word	0x55555549
 800cf14:	bfc55555 	.word	0xbfc55555
 800cf18:	55555549 	.word	0x55555549
 800cf1c:	3fc55555 	.word	0x3fc55555

0800cf20 <atan>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	eeb0 7b40 	vmov.f64	d7, d0
 800cf26:	ee17 5a90 	vmov	r5, s15
 800cf2a:	4b73      	ldr	r3, [pc, #460]	; (800d0f8 <atan+0x1d8>)
 800cf2c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800cf30:	429c      	cmp	r4, r3
 800cf32:	dd13      	ble.n	800cf5c <atan+0x3c>
 800cf34:	4b71      	ldr	r3, [pc, #452]	; (800d0fc <atan+0x1dc>)
 800cf36:	429c      	cmp	r4, r3
 800cf38:	dc03      	bgt.n	800cf42 <atan+0x22>
 800cf3a:	d107      	bne.n	800cf4c <atan+0x2c>
 800cf3c:	ee10 3a10 	vmov	r3, s0
 800cf40:	b123      	cbz	r3, 800cf4c <atan+0x2c>
 800cf42:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cf46:	eeb0 0b47 	vmov.f64	d0, d7
 800cf4a:	bd38      	pop	{r3, r4, r5, pc}
 800cf4c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800d088 <atan+0x168>
 800cf50:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800d090 <atan+0x170>
 800cf54:	2d00      	cmp	r5, #0
 800cf56:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800cf5a:	e7f4      	b.n	800cf46 <atan+0x26>
 800cf5c:	4b68      	ldr	r3, [pc, #416]	; (800d100 <atan+0x1e0>)
 800cf5e:	429c      	cmp	r4, r3
 800cf60:	dc11      	bgt.n	800cf86 <atan+0x66>
 800cf62:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cf66:	429c      	cmp	r4, r3
 800cf68:	dc0a      	bgt.n	800cf80 <atan+0x60>
 800cf6a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800cf6e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800d098 <atan+0x178>
 800cf72:	ee30 6b06 	vadd.f64	d6, d0, d6
 800cf76:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800cf7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf7e:	dce2      	bgt.n	800cf46 <atan+0x26>
 800cf80:	f04f 33ff 	mov.w	r3, #4294967295
 800cf84:	e013      	b.n	800cfae <atan+0x8e>
 800cf86:	f000 f8c5 	bl	800d114 <fabs>
 800cf8a:	4b5e      	ldr	r3, [pc, #376]	; (800d104 <atan+0x1e4>)
 800cf8c:	429c      	cmp	r4, r3
 800cf8e:	dc4f      	bgt.n	800d030 <atan+0x110>
 800cf90:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cf94:	429c      	cmp	r4, r3
 800cf96:	dc41      	bgt.n	800d01c <atan+0xfc>
 800cf98:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800cf9c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	eea0 6b07 	vfma.f64	d6, d0, d7
 800cfa6:	ee30 0b07 	vadd.f64	d0, d0, d7
 800cfaa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800cfae:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800d0a0 <atan+0x180>
 800cfb2:	ee27 4b07 	vmul.f64	d4, d7, d7
 800cfb6:	ee24 5b04 	vmul.f64	d5, d4, d4
 800cfba:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800d0a8 <atan+0x188>
 800cfbe:	eea5 3b06 	vfma.f64	d3, d5, d6
 800cfc2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800d0b0 <atan+0x190>
 800cfc6:	eea3 6b05 	vfma.f64	d6, d3, d5
 800cfca:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800d0b8 <atan+0x198>
 800cfce:	eea6 3b05 	vfma.f64	d3, d6, d5
 800cfd2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800d0c0 <atan+0x1a0>
 800cfd6:	eea3 6b05 	vfma.f64	d6, d3, d5
 800cfda:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800d0c8 <atan+0x1a8>
 800cfde:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800d0d0 <atan+0x1b0>
 800cfe2:	eea6 3b05 	vfma.f64	d3, d6, d5
 800cfe6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800d0d8 <atan+0x1b8>
 800cfea:	eea5 2b06 	vfma.f64	d2, d5, d6
 800cfee:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800d0e0 <atan+0x1c0>
 800cff2:	eea2 6b05 	vfma.f64	d6, d2, d5
 800cff6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800d0e8 <atan+0x1c8>
 800cffa:	eea6 2b05 	vfma.f64	d2, d6, d5
 800cffe:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800d0f0 <atan+0x1d0>
 800d002:	1c5a      	adds	r2, r3, #1
 800d004:	eea2 6b05 	vfma.f64	d6, d2, d5
 800d008:	ee26 6b05 	vmul.f64	d6, d6, d5
 800d00c:	eea3 6b04 	vfma.f64	d6, d3, d4
 800d010:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d014:	d121      	bne.n	800d05a <atan+0x13a>
 800d016:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d01a:	e794      	b.n	800cf46 <atan+0x26>
 800d01c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800d020:	2301      	movs	r3, #1
 800d022:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d026:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d02a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800d02e:	e7be      	b.n	800cfae <atan+0x8e>
 800d030:	4b35      	ldr	r3, [pc, #212]	; (800d108 <atan+0x1e8>)
 800d032:	429c      	cmp	r4, r3
 800d034:	da0b      	bge.n	800d04e <atan+0x12e>
 800d036:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d03a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d03e:	ee30 5b47 	vsub.f64	d5, d0, d7
 800d042:	eea0 6b07 	vfma.f64	d6, d0, d7
 800d046:	2302      	movs	r3, #2
 800d048:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800d04c:	e7af      	b.n	800cfae <atan+0x8e>
 800d04e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800d052:	2303      	movs	r3, #3
 800d054:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800d058:	e7a9      	b.n	800cfae <atan+0x8e>
 800d05a:	4a2c      	ldr	r2, [pc, #176]	; (800d10c <atan+0x1ec>)
 800d05c:	492c      	ldr	r1, [pc, #176]	; (800d110 <atan+0x1f0>)
 800d05e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800d062:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800d066:	ed93 5b00 	vldr	d5, [r3]
 800d06a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d06e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d072:	ed92 6b00 	vldr	d6, [r2]
 800d076:	2d00      	cmp	r5, #0
 800d078:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d07c:	bfb8      	it	lt
 800d07e:	eeb1 7b47 	vneglt.f64	d7, d7
 800d082:	e760      	b.n	800cf46 <atan+0x26>
 800d084:	f3af 8000 	nop.w
 800d088:	54442d18 	.word	0x54442d18
 800d08c:	3ff921fb 	.word	0x3ff921fb
 800d090:	54442d18 	.word	0x54442d18
 800d094:	bff921fb 	.word	0xbff921fb
 800d098:	8800759c 	.word	0x8800759c
 800d09c:	7e37e43c 	.word	0x7e37e43c
 800d0a0:	e322da11 	.word	0xe322da11
 800d0a4:	3f90ad3a 	.word	0x3f90ad3a
 800d0a8:	24760deb 	.word	0x24760deb
 800d0ac:	3fa97b4b 	.word	0x3fa97b4b
 800d0b0:	a0d03d51 	.word	0xa0d03d51
 800d0b4:	3fb10d66 	.word	0x3fb10d66
 800d0b8:	c54c206e 	.word	0xc54c206e
 800d0bc:	3fb745cd 	.word	0x3fb745cd
 800d0c0:	920083ff 	.word	0x920083ff
 800d0c4:	3fc24924 	.word	0x3fc24924
 800d0c8:	5555550d 	.word	0x5555550d
 800d0cc:	3fd55555 	.word	0x3fd55555
 800d0d0:	52defd9a 	.word	0x52defd9a
 800d0d4:	bfadde2d 	.word	0xbfadde2d
 800d0d8:	2c6a6c2f 	.word	0x2c6a6c2f
 800d0dc:	bfa2b444 	.word	0xbfa2b444
 800d0e0:	af749a6d 	.word	0xaf749a6d
 800d0e4:	bfb3b0f2 	.word	0xbfb3b0f2
 800d0e8:	fe231671 	.word	0xfe231671
 800d0ec:	bfbc71c6 	.word	0xbfbc71c6
 800d0f0:	9998ebc4 	.word	0x9998ebc4
 800d0f4:	bfc99999 	.word	0xbfc99999
 800d0f8:	440fffff 	.word	0x440fffff
 800d0fc:	7ff00000 	.word	0x7ff00000
 800d100:	3fdbffff 	.word	0x3fdbffff
 800d104:	3ff2ffff 	.word	0x3ff2ffff
 800d108:	40038000 	.word	0x40038000
 800d10c:	0800fee0 	.word	0x0800fee0
 800d110:	0800ff00 	.word	0x0800ff00

0800d114 <fabs>:
 800d114:	ec51 0b10 	vmov	r0, r1, d0
 800d118:	ee10 2a10 	vmov	r2, s0
 800d11c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d120:	ec43 2b10 	vmov	d0, r2, r3
 800d124:	4770      	bx	lr
	...

0800d128 <floor>:
 800d128:	ee10 1a90 	vmov	r1, s1
 800d12c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d130:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800d134:	2b13      	cmp	r3, #19
 800d136:	b530      	push	{r4, r5, lr}
 800d138:	ee10 0a10 	vmov	r0, s0
 800d13c:	ee10 5a10 	vmov	r5, s0
 800d140:	dc31      	bgt.n	800d1a6 <floor+0x7e>
 800d142:	2b00      	cmp	r3, #0
 800d144:	da15      	bge.n	800d172 <floor+0x4a>
 800d146:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800d200 <floor+0xd8>
 800d14a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d14e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d156:	dd07      	ble.n	800d168 <floor+0x40>
 800d158:	2900      	cmp	r1, #0
 800d15a:	da4e      	bge.n	800d1fa <floor+0xd2>
 800d15c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d160:	4318      	orrs	r0, r3
 800d162:	d001      	beq.n	800d168 <floor+0x40>
 800d164:	4928      	ldr	r1, [pc, #160]	; (800d208 <floor+0xe0>)
 800d166:	2000      	movs	r0, #0
 800d168:	460b      	mov	r3, r1
 800d16a:	4602      	mov	r2, r0
 800d16c:	ec43 2b10 	vmov	d0, r2, r3
 800d170:	e020      	b.n	800d1b4 <floor+0x8c>
 800d172:	4a26      	ldr	r2, [pc, #152]	; (800d20c <floor+0xe4>)
 800d174:	411a      	asrs	r2, r3
 800d176:	ea01 0402 	and.w	r4, r1, r2
 800d17a:	4304      	orrs	r4, r0
 800d17c:	d01a      	beq.n	800d1b4 <floor+0x8c>
 800d17e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800d200 <floor+0xd8>
 800d182:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d186:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d18e:	ddeb      	ble.n	800d168 <floor+0x40>
 800d190:	2900      	cmp	r1, #0
 800d192:	bfbe      	ittt	lt
 800d194:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800d198:	fa40 f303 	asrlt.w	r3, r0, r3
 800d19c:	18c9      	addlt	r1, r1, r3
 800d19e:	ea21 0102 	bic.w	r1, r1, r2
 800d1a2:	2000      	movs	r0, #0
 800d1a4:	e7e0      	b.n	800d168 <floor+0x40>
 800d1a6:	2b33      	cmp	r3, #51	; 0x33
 800d1a8:	dd05      	ble.n	800d1b6 <floor+0x8e>
 800d1aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1ae:	d101      	bne.n	800d1b4 <floor+0x8c>
 800d1b0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800d1b4:	bd30      	pop	{r4, r5, pc}
 800d1b6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800d1ba:	f04f 32ff 	mov.w	r2, #4294967295
 800d1be:	40e2      	lsrs	r2, r4
 800d1c0:	4202      	tst	r2, r0
 800d1c2:	d0f7      	beq.n	800d1b4 <floor+0x8c>
 800d1c4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800d200 <floor+0xd8>
 800d1c8:	ee30 0b07 	vadd.f64	d0, d0, d7
 800d1cc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1d4:	ddc8      	ble.n	800d168 <floor+0x40>
 800d1d6:	2900      	cmp	r1, #0
 800d1d8:	da02      	bge.n	800d1e0 <floor+0xb8>
 800d1da:	2b14      	cmp	r3, #20
 800d1dc:	d103      	bne.n	800d1e6 <floor+0xbe>
 800d1de:	3101      	adds	r1, #1
 800d1e0:	ea20 0002 	bic.w	r0, r0, r2
 800d1e4:	e7c0      	b.n	800d168 <floor+0x40>
 800d1e6:	2401      	movs	r4, #1
 800d1e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d1ec:	fa04 f303 	lsl.w	r3, r4, r3
 800d1f0:	4418      	add	r0, r3
 800d1f2:	42a8      	cmp	r0, r5
 800d1f4:	bf38      	it	cc
 800d1f6:	1909      	addcc	r1, r1, r4
 800d1f8:	e7f2      	b.n	800d1e0 <floor+0xb8>
 800d1fa:	2000      	movs	r0, #0
 800d1fc:	4601      	mov	r1, r0
 800d1fe:	e7b3      	b.n	800d168 <floor+0x40>
 800d200:	8800759c 	.word	0x8800759c
 800d204:	7e37e43c 	.word	0x7e37e43c
 800d208:	bff00000 	.word	0xbff00000
 800d20c:	000fffff 	.word	0x000fffff

0800d210 <scalbn>:
 800d210:	b082      	sub	sp, #8
 800d212:	ed8d 0b00 	vstr	d0, [sp]
 800d216:	9b01      	ldr	r3, [sp, #4]
 800d218:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d21c:	b9a2      	cbnz	r2, 800d248 <scalbn+0x38>
 800d21e:	9a00      	ldr	r2, [sp, #0]
 800d220:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d224:	4313      	orrs	r3, r2
 800d226:	d03a      	beq.n	800d29e <scalbn+0x8e>
 800d228:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800d300 <scalbn+0xf0>
 800d22c:	4b40      	ldr	r3, [pc, #256]	; (800d330 <scalbn+0x120>)
 800d22e:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d232:	4298      	cmp	r0, r3
 800d234:	ed8d 7b00 	vstr	d7, [sp]
 800d238:	da11      	bge.n	800d25e <scalbn+0x4e>
 800d23a:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800d308 <scalbn+0xf8>
 800d23e:	ed9d 6b00 	vldr	d6, [sp]
 800d242:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d246:	e007      	b.n	800d258 <scalbn+0x48>
 800d248:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d24c:	428a      	cmp	r2, r1
 800d24e:	d10a      	bne.n	800d266 <scalbn+0x56>
 800d250:	ed9d 7b00 	vldr	d7, [sp]
 800d254:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d258:	ed8d 7b00 	vstr	d7, [sp]
 800d25c:	e01f      	b.n	800d29e <scalbn+0x8e>
 800d25e:	9b01      	ldr	r3, [sp, #4]
 800d260:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800d264:	3a36      	subs	r2, #54	; 0x36
 800d266:	4402      	add	r2, r0
 800d268:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d26c:	428a      	cmp	r2, r1
 800d26e:	dd0a      	ble.n	800d286 <scalbn+0x76>
 800d270:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800d310 <scalbn+0x100>
 800d274:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800d318 <scalbn+0x108>
 800d278:	eeb0 6b47 	vmov.f64	d6, d7
 800d27c:	9b01      	ldr	r3, [sp, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	fe27 7b05 	vselge.f64	d7, d7, d5
 800d284:	e7dd      	b.n	800d242 <scalbn+0x32>
 800d286:	2a00      	cmp	r2, #0
 800d288:	dd0d      	ble.n	800d2a6 <scalbn+0x96>
 800d28a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d28e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d292:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d296:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d29a:	e9cd 0100 	strd	r0, r1, [sp]
 800d29e:	ed9d 0b00 	vldr	d0, [sp]
 800d2a2:	b002      	add	sp, #8
 800d2a4:	4770      	bx	lr
 800d2a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d2aa:	da18      	bge.n	800d2de <scalbn+0xce>
 800d2ac:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d2b0:	4298      	cmp	r0, r3
 800d2b2:	9b01      	ldr	r3, [sp, #4]
 800d2b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d2b8:	dd09      	ble.n	800d2ce <scalbn+0xbe>
 800d2ba:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800d310 <scalbn+0x100>
 800d2be:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800d318 <scalbn+0x108>
 800d2c2:	eeb0 6b47 	vmov.f64	d6, d7
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800d2cc:	e7b9      	b.n	800d242 <scalbn+0x32>
 800d2ce:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800d308 <scalbn+0xf8>
 800d2d2:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800d320 <scalbn+0x110>
 800d2d6:	eeb0 6b47 	vmov.f64	d6, d7
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	e7f4      	b.n	800d2c8 <scalbn+0xb8>
 800d2de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d2e6:	3236      	adds	r2, #54	; 0x36
 800d2e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d2ec:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d2f0:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800d328 <scalbn+0x118>
 800d2f4:	ec41 0b17 	vmov	d7, r0, r1
 800d2f8:	e7a3      	b.n	800d242 <scalbn+0x32>
 800d2fa:	bf00      	nop
 800d2fc:	f3af 8000 	nop.w
 800d300:	00000000 	.word	0x00000000
 800d304:	43500000 	.word	0x43500000
 800d308:	c2f8f359 	.word	0xc2f8f359
 800d30c:	01a56e1f 	.word	0x01a56e1f
 800d310:	8800759c 	.word	0x8800759c
 800d314:	7e37e43c 	.word	0x7e37e43c
 800d318:	8800759c 	.word	0x8800759c
 800d31c:	fe37e43c 	.word	0xfe37e43c
 800d320:	c2f8f359 	.word	0xc2f8f359
 800d324:	81a56e1f 	.word	0x81a56e1f
 800d328:	00000000 	.word	0x00000000
 800d32c:	3c900000 	.word	0x3c900000
 800d330:	ffff3cb0 	.word	0xffff3cb0

0800d334 <__errno>:
 800d334:	4b01      	ldr	r3, [pc, #4]	; (800d33c <__errno+0x8>)
 800d336:	6818      	ldr	r0, [r3, #0]
 800d338:	4770      	bx	lr
 800d33a:	bf00      	nop
 800d33c:	20000018 	.word	0x20000018

0800d340 <__libc_init_array>:
 800d340:	b570      	push	{r4, r5, r6, lr}
 800d342:	4d0d      	ldr	r5, [pc, #52]	; (800d378 <__libc_init_array+0x38>)
 800d344:	4c0d      	ldr	r4, [pc, #52]	; (800d37c <__libc_init_array+0x3c>)
 800d346:	1b64      	subs	r4, r4, r5
 800d348:	10a4      	asrs	r4, r4, #2
 800d34a:	2600      	movs	r6, #0
 800d34c:	42a6      	cmp	r6, r4
 800d34e:	d109      	bne.n	800d364 <__libc_init_array+0x24>
 800d350:	4d0b      	ldr	r5, [pc, #44]	; (800d380 <__libc_init_array+0x40>)
 800d352:	4c0c      	ldr	r4, [pc, #48]	; (800d384 <__libc_init_array+0x44>)
 800d354:	f002 fc78 	bl	800fc48 <_init>
 800d358:	1b64      	subs	r4, r4, r5
 800d35a:	10a4      	asrs	r4, r4, #2
 800d35c:	2600      	movs	r6, #0
 800d35e:	42a6      	cmp	r6, r4
 800d360:	d105      	bne.n	800d36e <__libc_init_array+0x2e>
 800d362:	bd70      	pop	{r4, r5, r6, pc}
 800d364:	f855 3b04 	ldr.w	r3, [r5], #4
 800d368:	4798      	blx	r3
 800d36a:	3601      	adds	r6, #1
 800d36c:	e7ee      	b.n	800d34c <__libc_init_array+0xc>
 800d36e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d372:	4798      	blx	r3
 800d374:	3601      	adds	r6, #1
 800d376:	e7f2      	b.n	800d35e <__libc_init_array+0x1e>
 800d378:	0801030c 	.word	0x0801030c
 800d37c:	0801030c 	.word	0x0801030c
 800d380:	0801030c 	.word	0x0801030c
 800d384:	08010310 	.word	0x08010310

0800d388 <memset>:
 800d388:	4402      	add	r2, r0
 800d38a:	4603      	mov	r3, r0
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d100      	bne.n	800d392 <memset+0xa>
 800d390:	4770      	bx	lr
 800d392:	f803 1b01 	strb.w	r1, [r3], #1
 800d396:	e7f9      	b.n	800d38c <memset+0x4>

0800d398 <__cvt>:
 800d398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d39a:	ed2d 8b02 	vpush	{d8}
 800d39e:	eeb0 8b40 	vmov.f64	d8, d0
 800d3a2:	b085      	sub	sp, #20
 800d3a4:	4617      	mov	r7, r2
 800d3a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d3a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d3aa:	ee18 2a90 	vmov	r2, s17
 800d3ae:	f025 0520 	bic.w	r5, r5, #32
 800d3b2:	2a00      	cmp	r2, #0
 800d3b4:	bfb6      	itet	lt
 800d3b6:	222d      	movlt	r2, #45	; 0x2d
 800d3b8:	2200      	movge	r2, #0
 800d3ba:	eeb1 8b40 	vneglt.f64	d8, d0
 800d3be:	2d46      	cmp	r5, #70	; 0x46
 800d3c0:	460c      	mov	r4, r1
 800d3c2:	701a      	strb	r2, [r3, #0]
 800d3c4:	d004      	beq.n	800d3d0 <__cvt+0x38>
 800d3c6:	2d45      	cmp	r5, #69	; 0x45
 800d3c8:	d100      	bne.n	800d3cc <__cvt+0x34>
 800d3ca:	3401      	adds	r4, #1
 800d3cc:	2102      	movs	r1, #2
 800d3ce:	e000      	b.n	800d3d2 <__cvt+0x3a>
 800d3d0:	2103      	movs	r1, #3
 800d3d2:	ab03      	add	r3, sp, #12
 800d3d4:	9301      	str	r3, [sp, #4]
 800d3d6:	ab02      	add	r3, sp, #8
 800d3d8:	9300      	str	r3, [sp, #0]
 800d3da:	4622      	mov	r2, r4
 800d3dc:	4633      	mov	r3, r6
 800d3de:	eeb0 0b48 	vmov.f64	d0, d8
 800d3e2:	f000 fcc1 	bl	800dd68 <_dtoa_r>
 800d3e6:	2d47      	cmp	r5, #71	; 0x47
 800d3e8:	d109      	bne.n	800d3fe <__cvt+0x66>
 800d3ea:	07fb      	lsls	r3, r7, #31
 800d3ec:	d407      	bmi.n	800d3fe <__cvt+0x66>
 800d3ee:	9b03      	ldr	r3, [sp, #12]
 800d3f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d3f2:	1a1b      	subs	r3, r3, r0
 800d3f4:	6013      	str	r3, [r2, #0]
 800d3f6:	b005      	add	sp, #20
 800d3f8:	ecbd 8b02 	vpop	{d8}
 800d3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3fe:	2d46      	cmp	r5, #70	; 0x46
 800d400:	eb00 0204 	add.w	r2, r0, r4
 800d404:	d10c      	bne.n	800d420 <__cvt+0x88>
 800d406:	7803      	ldrb	r3, [r0, #0]
 800d408:	2b30      	cmp	r3, #48	; 0x30
 800d40a:	d107      	bne.n	800d41c <__cvt+0x84>
 800d40c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d414:	bf1c      	itt	ne
 800d416:	f1c4 0401 	rsbne	r4, r4, #1
 800d41a:	6034      	strne	r4, [r6, #0]
 800d41c:	6833      	ldr	r3, [r6, #0]
 800d41e:	441a      	add	r2, r3
 800d420:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d428:	bf08      	it	eq
 800d42a:	9203      	streq	r2, [sp, #12]
 800d42c:	2130      	movs	r1, #48	; 0x30
 800d42e:	9b03      	ldr	r3, [sp, #12]
 800d430:	4293      	cmp	r3, r2
 800d432:	d2dc      	bcs.n	800d3ee <__cvt+0x56>
 800d434:	1c5c      	adds	r4, r3, #1
 800d436:	9403      	str	r4, [sp, #12]
 800d438:	7019      	strb	r1, [r3, #0]
 800d43a:	e7f8      	b.n	800d42e <__cvt+0x96>

0800d43c <__exponent>:
 800d43c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d43e:	4603      	mov	r3, r0
 800d440:	2900      	cmp	r1, #0
 800d442:	bfb8      	it	lt
 800d444:	4249      	neglt	r1, r1
 800d446:	f803 2b02 	strb.w	r2, [r3], #2
 800d44a:	bfb4      	ite	lt
 800d44c:	222d      	movlt	r2, #45	; 0x2d
 800d44e:	222b      	movge	r2, #43	; 0x2b
 800d450:	2909      	cmp	r1, #9
 800d452:	7042      	strb	r2, [r0, #1]
 800d454:	dd2a      	ble.n	800d4ac <__exponent+0x70>
 800d456:	f10d 0407 	add.w	r4, sp, #7
 800d45a:	46a4      	mov	ip, r4
 800d45c:	270a      	movs	r7, #10
 800d45e:	46a6      	mov	lr, r4
 800d460:	460a      	mov	r2, r1
 800d462:	fb91 f6f7 	sdiv	r6, r1, r7
 800d466:	fb07 1516 	mls	r5, r7, r6, r1
 800d46a:	3530      	adds	r5, #48	; 0x30
 800d46c:	2a63      	cmp	r2, #99	; 0x63
 800d46e:	f104 34ff 	add.w	r4, r4, #4294967295
 800d472:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d476:	4631      	mov	r1, r6
 800d478:	dcf1      	bgt.n	800d45e <__exponent+0x22>
 800d47a:	3130      	adds	r1, #48	; 0x30
 800d47c:	f1ae 0502 	sub.w	r5, lr, #2
 800d480:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d484:	1c44      	adds	r4, r0, #1
 800d486:	4629      	mov	r1, r5
 800d488:	4561      	cmp	r1, ip
 800d48a:	d30a      	bcc.n	800d4a2 <__exponent+0x66>
 800d48c:	f10d 0209 	add.w	r2, sp, #9
 800d490:	eba2 020e 	sub.w	r2, r2, lr
 800d494:	4565      	cmp	r5, ip
 800d496:	bf88      	it	hi
 800d498:	2200      	movhi	r2, #0
 800d49a:	4413      	add	r3, r2
 800d49c:	1a18      	subs	r0, r3, r0
 800d49e:	b003      	add	sp, #12
 800d4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d4aa:	e7ed      	b.n	800d488 <__exponent+0x4c>
 800d4ac:	2330      	movs	r3, #48	; 0x30
 800d4ae:	3130      	adds	r1, #48	; 0x30
 800d4b0:	7083      	strb	r3, [r0, #2]
 800d4b2:	70c1      	strb	r1, [r0, #3]
 800d4b4:	1d03      	adds	r3, r0, #4
 800d4b6:	e7f1      	b.n	800d49c <__exponent+0x60>

0800d4b8 <_printf_float>:
 800d4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4bc:	b08b      	sub	sp, #44	; 0x2c
 800d4be:	460c      	mov	r4, r1
 800d4c0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d4c4:	4616      	mov	r6, r2
 800d4c6:	461f      	mov	r7, r3
 800d4c8:	4605      	mov	r5, r0
 800d4ca:	f001 fac5 	bl	800ea58 <_localeconv_r>
 800d4ce:	f8d0 b000 	ldr.w	fp, [r0]
 800d4d2:	4658      	mov	r0, fp
 800d4d4:	f7f2 ff04 	bl	80002e0 <strlen>
 800d4d8:	2300      	movs	r3, #0
 800d4da:	9308      	str	r3, [sp, #32]
 800d4dc:	f8d8 3000 	ldr.w	r3, [r8]
 800d4e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d4e4:	6822      	ldr	r2, [r4, #0]
 800d4e6:	3307      	adds	r3, #7
 800d4e8:	f023 0307 	bic.w	r3, r3, #7
 800d4ec:	f103 0108 	add.w	r1, r3, #8
 800d4f0:	f8c8 1000 	str.w	r1, [r8]
 800d4f4:	4682      	mov	sl, r0
 800d4f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d4fa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d4fe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d760 <_printf_float+0x2a8>
 800d502:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d506:	eeb0 6bc0 	vabs.f64	d6, d0
 800d50a:	eeb4 6b47 	vcmp.f64	d6, d7
 800d50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d512:	dd24      	ble.n	800d55e <_printf_float+0xa6>
 800d514:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d51c:	d502      	bpl.n	800d524 <_printf_float+0x6c>
 800d51e:	232d      	movs	r3, #45	; 0x2d
 800d520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d524:	4b90      	ldr	r3, [pc, #576]	; (800d768 <_printf_float+0x2b0>)
 800d526:	4891      	ldr	r0, [pc, #580]	; (800d76c <_printf_float+0x2b4>)
 800d528:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d52c:	bf94      	ite	ls
 800d52e:	4698      	movls	r8, r3
 800d530:	4680      	movhi	r8, r0
 800d532:	2303      	movs	r3, #3
 800d534:	6123      	str	r3, [r4, #16]
 800d536:	f022 0204 	bic.w	r2, r2, #4
 800d53a:	2300      	movs	r3, #0
 800d53c:	6022      	str	r2, [r4, #0]
 800d53e:	9304      	str	r3, [sp, #16]
 800d540:	9700      	str	r7, [sp, #0]
 800d542:	4633      	mov	r3, r6
 800d544:	aa09      	add	r2, sp, #36	; 0x24
 800d546:	4621      	mov	r1, r4
 800d548:	4628      	mov	r0, r5
 800d54a:	f000 f9d3 	bl	800d8f4 <_printf_common>
 800d54e:	3001      	adds	r0, #1
 800d550:	f040 808a 	bne.w	800d668 <_printf_float+0x1b0>
 800d554:	f04f 30ff 	mov.w	r0, #4294967295
 800d558:	b00b      	add	sp, #44	; 0x2c
 800d55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d55e:	eeb4 0b40 	vcmp.f64	d0, d0
 800d562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d566:	d709      	bvc.n	800d57c <_printf_float+0xc4>
 800d568:	ee10 3a90 	vmov	r3, s1
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	bfbc      	itt	lt
 800d570:	232d      	movlt	r3, #45	; 0x2d
 800d572:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d576:	487e      	ldr	r0, [pc, #504]	; (800d770 <_printf_float+0x2b8>)
 800d578:	4b7e      	ldr	r3, [pc, #504]	; (800d774 <_printf_float+0x2bc>)
 800d57a:	e7d5      	b.n	800d528 <_printf_float+0x70>
 800d57c:	6863      	ldr	r3, [r4, #4]
 800d57e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d582:	9104      	str	r1, [sp, #16]
 800d584:	1c59      	adds	r1, r3, #1
 800d586:	d13c      	bne.n	800d602 <_printf_float+0x14a>
 800d588:	2306      	movs	r3, #6
 800d58a:	6063      	str	r3, [r4, #4]
 800d58c:	2300      	movs	r3, #0
 800d58e:	9303      	str	r3, [sp, #12]
 800d590:	ab08      	add	r3, sp, #32
 800d592:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d596:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d59a:	ab07      	add	r3, sp, #28
 800d59c:	6861      	ldr	r1, [r4, #4]
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	6022      	str	r2, [r4, #0]
 800d5a2:	f10d 031b 	add.w	r3, sp, #27
 800d5a6:	4628      	mov	r0, r5
 800d5a8:	f7ff fef6 	bl	800d398 <__cvt>
 800d5ac:	9b04      	ldr	r3, [sp, #16]
 800d5ae:	9907      	ldr	r1, [sp, #28]
 800d5b0:	2b47      	cmp	r3, #71	; 0x47
 800d5b2:	4680      	mov	r8, r0
 800d5b4:	d108      	bne.n	800d5c8 <_printf_float+0x110>
 800d5b6:	1cc8      	adds	r0, r1, #3
 800d5b8:	db02      	blt.n	800d5c0 <_printf_float+0x108>
 800d5ba:	6863      	ldr	r3, [r4, #4]
 800d5bc:	4299      	cmp	r1, r3
 800d5be:	dd41      	ble.n	800d644 <_printf_float+0x18c>
 800d5c0:	f1a9 0902 	sub.w	r9, r9, #2
 800d5c4:	fa5f f989 	uxtb.w	r9, r9
 800d5c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d5cc:	d820      	bhi.n	800d610 <_printf_float+0x158>
 800d5ce:	3901      	subs	r1, #1
 800d5d0:	464a      	mov	r2, r9
 800d5d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d5d6:	9107      	str	r1, [sp, #28]
 800d5d8:	f7ff ff30 	bl	800d43c <__exponent>
 800d5dc:	9a08      	ldr	r2, [sp, #32]
 800d5de:	9004      	str	r0, [sp, #16]
 800d5e0:	1813      	adds	r3, r2, r0
 800d5e2:	2a01      	cmp	r2, #1
 800d5e4:	6123      	str	r3, [r4, #16]
 800d5e6:	dc02      	bgt.n	800d5ee <_printf_float+0x136>
 800d5e8:	6822      	ldr	r2, [r4, #0]
 800d5ea:	07d2      	lsls	r2, r2, #31
 800d5ec:	d501      	bpl.n	800d5f2 <_printf_float+0x13a>
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	6123      	str	r3, [r4, #16]
 800d5f2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d0a2      	beq.n	800d540 <_printf_float+0x88>
 800d5fa:	232d      	movs	r3, #45	; 0x2d
 800d5fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d600:	e79e      	b.n	800d540 <_printf_float+0x88>
 800d602:	9904      	ldr	r1, [sp, #16]
 800d604:	2947      	cmp	r1, #71	; 0x47
 800d606:	d1c1      	bne.n	800d58c <_printf_float+0xd4>
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d1bf      	bne.n	800d58c <_printf_float+0xd4>
 800d60c:	2301      	movs	r3, #1
 800d60e:	e7bc      	b.n	800d58a <_printf_float+0xd2>
 800d610:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d614:	d118      	bne.n	800d648 <_printf_float+0x190>
 800d616:	2900      	cmp	r1, #0
 800d618:	6863      	ldr	r3, [r4, #4]
 800d61a:	dd0b      	ble.n	800d634 <_printf_float+0x17c>
 800d61c:	6121      	str	r1, [r4, #16]
 800d61e:	b913      	cbnz	r3, 800d626 <_printf_float+0x16e>
 800d620:	6822      	ldr	r2, [r4, #0]
 800d622:	07d0      	lsls	r0, r2, #31
 800d624:	d502      	bpl.n	800d62c <_printf_float+0x174>
 800d626:	3301      	adds	r3, #1
 800d628:	440b      	add	r3, r1
 800d62a:	6123      	str	r3, [r4, #16]
 800d62c:	2300      	movs	r3, #0
 800d62e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d630:	9304      	str	r3, [sp, #16]
 800d632:	e7de      	b.n	800d5f2 <_printf_float+0x13a>
 800d634:	b913      	cbnz	r3, 800d63c <_printf_float+0x184>
 800d636:	6822      	ldr	r2, [r4, #0]
 800d638:	07d2      	lsls	r2, r2, #31
 800d63a:	d501      	bpl.n	800d640 <_printf_float+0x188>
 800d63c:	3302      	adds	r3, #2
 800d63e:	e7f4      	b.n	800d62a <_printf_float+0x172>
 800d640:	2301      	movs	r3, #1
 800d642:	e7f2      	b.n	800d62a <_printf_float+0x172>
 800d644:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d648:	9b08      	ldr	r3, [sp, #32]
 800d64a:	4299      	cmp	r1, r3
 800d64c:	db05      	blt.n	800d65a <_printf_float+0x1a2>
 800d64e:	6823      	ldr	r3, [r4, #0]
 800d650:	6121      	str	r1, [r4, #16]
 800d652:	07d8      	lsls	r0, r3, #31
 800d654:	d5ea      	bpl.n	800d62c <_printf_float+0x174>
 800d656:	1c4b      	adds	r3, r1, #1
 800d658:	e7e7      	b.n	800d62a <_printf_float+0x172>
 800d65a:	2900      	cmp	r1, #0
 800d65c:	bfd4      	ite	le
 800d65e:	f1c1 0202 	rsble	r2, r1, #2
 800d662:	2201      	movgt	r2, #1
 800d664:	4413      	add	r3, r2
 800d666:	e7e0      	b.n	800d62a <_printf_float+0x172>
 800d668:	6823      	ldr	r3, [r4, #0]
 800d66a:	055a      	lsls	r2, r3, #21
 800d66c:	d407      	bmi.n	800d67e <_printf_float+0x1c6>
 800d66e:	6923      	ldr	r3, [r4, #16]
 800d670:	4642      	mov	r2, r8
 800d672:	4631      	mov	r1, r6
 800d674:	4628      	mov	r0, r5
 800d676:	47b8      	blx	r7
 800d678:	3001      	adds	r0, #1
 800d67a:	d12a      	bne.n	800d6d2 <_printf_float+0x21a>
 800d67c:	e76a      	b.n	800d554 <_printf_float+0x9c>
 800d67e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d682:	f240 80e2 	bls.w	800d84a <_printf_float+0x392>
 800d686:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d68a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d692:	d133      	bne.n	800d6fc <_printf_float+0x244>
 800d694:	4a38      	ldr	r2, [pc, #224]	; (800d778 <_printf_float+0x2c0>)
 800d696:	2301      	movs	r3, #1
 800d698:	4631      	mov	r1, r6
 800d69a:	4628      	mov	r0, r5
 800d69c:	47b8      	blx	r7
 800d69e:	3001      	adds	r0, #1
 800d6a0:	f43f af58 	beq.w	800d554 <_printf_float+0x9c>
 800d6a4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	db02      	blt.n	800d6b2 <_printf_float+0x1fa>
 800d6ac:	6823      	ldr	r3, [r4, #0]
 800d6ae:	07d8      	lsls	r0, r3, #31
 800d6b0:	d50f      	bpl.n	800d6d2 <_printf_float+0x21a>
 800d6b2:	4653      	mov	r3, sl
 800d6b4:	465a      	mov	r2, fp
 800d6b6:	4631      	mov	r1, r6
 800d6b8:	4628      	mov	r0, r5
 800d6ba:	47b8      	blx	r7
 800d6bc:	3001      	adds	r0, #1
 800d6be:	f43f af49 	beq.w	800d554 <_printf_float+0x9c>
 800d6c2:	f04f 0800 	mov.w	r8, #0
 800d6c6:	f104 091a 	add.w	r9, r4, #26
 800d6ca:	9b08      	ldr	r3, [sp, #32]
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	4543      	cmp	r3, r8
 800d6d0:	dc09      	bgt.n	800d6e6 <_printf_float+0x22e>
 800d6d2:	6823      	ldr	r3, [r4, #0]
 800d6d4:	079b      	lsls	r3, r3, #30
 800d6d6:	f100 8108 	bmi.w	800d8ea <_printf_float+0x432>
 800d6da:	68e0      	ldr	r0, [r4, #12]
 800d6dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6de:	4298      	cmp	r0, r3
 800d6e0:	bfb8      	it	lt
 800d6e2:	4618      	movlt	r0, r3
 800d6e4:	e738      	b.n	800d558 <_printf_float+0xa0>
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	464a      	mov	r2, r9
 800d6ea:	4631      	mov	r1, r6
 800d6ec:	4628      	mov	r0, r5
 800d6ee:	47b8      	blx	r7
 800d6f0:	3001      	adds	r0, #1
 800d6f2:	f43f af2f 	beq.w	800d554 <_printf_float+0x9c>
 800d6f6:	f108 0801 	add.w	r8, r8, #1
 800d6fa:	e7e6      	b.n	800d6ca <_printf_float+0x212>
 800d6fc:	9b07      	ldr	r3, [sp, #28]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	dc3c      	bgt.n	800d77c <_printf_float+0x2c4>
 800d702:	4a1d      	ldr	r2, [pc, #116]	; (800d778 <_printf_float+0x2c0>)
 800d704:	2301      	movs	r3, #1
 800d706:	4631      	mov	r1, r6
 800d708:	4628      	mov	r0, r5
 800d70a:	47b8      	blx	r7
 800d70c:	3001      	adds	r0, #1
 800d70e:	f43f af21 	beq.w	800d554 <_printf_float+0x9c>
 800d712:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d716:	4313      	orrs	r3, r2
 800d718:	d102      	bne.n	800d720 <_printf_float+0x268>
 800d71a:	6823      	ldr	r3, [r4, #0]
 800d71c:	07d9      	lsls	r1, r3, #31
 800d71e:	d5d8      	bpl.n	800d6d2 <_printf_float+0x21a>
 800d720:	4653      	mov	r3, sl
 800d722:	465a      	mov	r2, fp
 800d724:	4631      	mov	r1, r6
 800d726:	4628      	mov	r0, r5
 800d728:	47b8      	blx	r7
 800d72a:	3001      	adds	r0, #1
 800d72c:	f43f af12 	beq.w	800d554 <_printf_float+0x9c>
 800d730:	f04f 0900 	mov.w	r9, #0
 800d734:	f104 0a1a 	add.w	sl, r4, #26
 800d738:	9b07      	ldr	r3, [sp, #28]
 800d73a:	425b      	negs	r3, r3
 800d73c:	454b      	cmp	r3, r9
 800d73e:	dc01      	bgt.n	800d744 <_printf_float+0x28c>
 800d740:	9b08      	ldr	r3, [sp, #32]
 800d742:	e795      	b.n	800d670 <_printf_float+0x1b8>
 800d744:	2301      	movs	r3, #1
 800d746:	4652      	mov	r2, sl
 800d748:	4631      	mov	r1, r6
 800d74a:	4628      	mov	r0, r5
 800d74c:	47b8      	blx	r7
 800d74e:	3001      	adds	r0, #1
 800d750:	f43f af00 	beq.w	800d554 <_printf_float+0x9c>
 800d754:	f109 0901 	add.w	r9, r9, #1
 800d758:	e7ee      	b.n	800d738 <_printf_float+0x280>
 800d75a:	bf00      	nop
 800d75c:	f3af 8000 	nop.w
 800d760:	ffffffff 	.word	0xffffffff
 800d764:	7fefffff 	.word	0x7fefffff
 800d768:	0800ff24 	.word	0x0800ff24
 800d76c:	0800ff28 	.word	0x0800ff28
 800d770:	0800ff30 	.word	0x0800ff30
 800d774:	0800ff2c 	.word	0x0800ff2c
 800d778:	0800ff34 	.word	0x0800ff34
 800d77c:	9a08      	ldr	r2, [sp, #32]
 800d77e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d780:	429a      	cmp	r2, r3
 800d782:	bfa8      	it	ge
 800d784:	461a      	movge	r2, r3
 800d786:	2a00      	cmp	r2, #0
 800d788:	4691      	mov	r9, r2
 800d78a:	dc38      	bgt.n	800d7fe <_printf_float+0x346>
 800d78c:	2300      	movs	r3, #0
 800d78e:	9305      	str	r3, [sp, #20]
 800d790:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d794:	f104 021a 	add.w	r2, r4, #26
 800d798:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d79a:	9905      	ldr	r1, [sp, #20]
 800d79c:	9304      	str	r3, [sp, #16]
 800d79e:	eba3 0309 	sub.w	r3, r3, r9
 800d7a2:	428b      	cmp	r3, r1
 800d7a4:	dc33      	bgt.n	800d80e <_printf_float+0x356>
 800d7a6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	db3c      	blt.n	800d828 <_printf_float+0x370>
 800d7ae:	6823      	ldr	r3, [r4, #0]
 800d7b0:	07da      	lsls	r2, r3, #31
 800d7b2:	d439      	bmi.n	800d828 <_printf_float+0x370>
 800d7b4:	9a08      	ldr	r2, [sp, #32]
 800d7b6:	9b04      	ldr	r3, [sp, #16]
 800d7b8:	9907      	ldr	r1, [sp, #28]
 800d7ba:	1ad3      	subs	r3, r2, r3
 800d7bc:	eba2 0901 	sub.w	r9, r2, r1
 800d7c0:	4599      	cmp	r9, r3
 800d7c2:	bfa8      	it	ge
 800d7c4:	4699      	movge	r9, r3
 800d7c6:	f1b9 0f00 	cmp.w	r9, #0
 800d7ca:	dc35      	bgt.n	800d838 <_printf_float+0x380>
 800d7cc:	f04f 0800 	mov.w	r8, #0
 800d7d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d7d4:	f104 0a1a 	add.w	sl, r4, #26
 800d7d8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d7dc:	1a9b      	subs	r3, r3, r2
 800d7de:	eba3 0309 	sub.w	r3, r3, r9
 800d7e2:	4543      	cmp	r3, r8
 800d7e4:	f77f af75 	ble.w	800d6d2 <_printf_float+0x21a>
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	4652      	mov	r2, sl
 800d7ec:	4631      	mov	r1, r6
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	47b8      	blx	r7
 800d7f2:	3001      	adds	r0, #1
 800d7f4:	f43f aeae 	beq.w	800d554 <_printf_float+0x9c>
 800d7f8:	f108 0801 	add.w	r8, r8, #1
 800d7fc:	e7ec      	b.n	800d7d8 <_printf_float+0x320>
 800d7fe:	4613      	mov	r3, r2
 800d800:	4631      	mov	r1, r6
 800d802:	4642      	mov	r2, r8
 800d804:	4628      	mov	r0, r5
 800d806:	47b8      	blx	r7
 800d808:	3001      	adds	r0, #1
 800d80a:	d1bf      	bne.n	800d78c <_printf_float+0x2d4>
 800d80c:	e6a2      	b.n	800d554 <_printf_float+0x9c>
 800d80e:	2301      	movs	r3, #1
 800d810:	4631      	mov	r1, r6
 800d812:	4628      	mov	r0, r5
 800d814:	9204      	str	r2, [sp, #16]
 800d816:	47b8      	blx	r7
 800d818:	3001      	adds	r0, #1
 800d81a:	f43f ae9b 	beq.w	800d554 <_printf_float+0x9c>
 800d81e:	9b05      	ldr	r3, [sp, #20]
 800d820:	9a04      	ldr	r2, [sp, #16]
 800d822:	3301      	adds	r3, #1
 800d824:	9305      	str	r3, [sp, #20]
 800d826:	e7b7      	b.n	800d798 <_printf_float+0x2e0>
 800d828:	4653      	mov	r3, sl
 800d82a:	465a      	mov	r2, fp
 800d82c:	4631      	mov	r1, r6
 800d82e:	4628      	mov	r0, r5
 800d830:	47b8      	blx	r7
 800d832:	3001      	adds	r0, #1
 800d834:	d1be      	bne.n	800d7b4 <_printf_float+0x2fc>
 800d836:	e68d      	b.n	800d554 <_printf_float+0x9c>
 800d838:	9a04      	ldr	r2, [sp, #16]
 800d83a:	464b      	mov	r3, r9
 800d83c:	4442      	add	r2, r8
 800d83e:	4631      	mov	r1, r6
 800d840:	4628      	mov	r0, r5
 800d842:	47b8      	blx	r7
 800d844:	3001      	adds	r0, #1
 800d846:	d1c1      	bne.n	800d7cc <_printf_float+0x314>
 800d848:	e684      	b.n	800d554 <_printf_float+0x9c>
 800d84a:	9a08      	ldr	r2, [sp, #32]
 800d84c:	2a01      	cmp	r2, #1
 800d84e:	dc01      	bgt.n	800d854 <_printf_float+0x39c>
 800d850:	07db      	lsls	r3, r3, #31
 800d852:	d537      	bpl.n	800d8c4 <_printf_float+0x40c>
 800d854:	2301      	movs	r3, #1
 800d856:	4642      	mov	r2, r8
 800d858:	4631      	mov	r1, r6
 800d85a:	4628      	mov	r0, r5
 800d85c:	47b8      	blx	r7
 800d85e:	3001      	adds	r0, #1
 800d860:	f43f ae78 	beq.w	800d554 <_printf_float+0x9c>
 800d864:	4653      	mov	r3, sl
 800d866:	465a      	mov	r2, fp
 800d868:	4631      	mov	r1, r6
 800d86a:	4628      	mov	r0, r5
 800d86c:	47b8      	blx	r7
 800d86e:	3001      	adds	r0, #1
 800d870:	f43f ae70 	beq.w	800d554 <_printf_float+0x9c>
 800d874:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d878:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d880:	d01b      	beq.n	800d8ba <_printf_float+0x402>
 800d882:	9b08      	ldr	r3, [sp, #32]
 800d884:	f108 0201 	add.w	r2, r8, #1
 800d888:	3b01      	subs	r3, #1
 800d88a:	4631      	mov	r1, r6
 800d88c:	4628      	mov	r0, r5
 800d88e:	47b8      	blx	r7
 800d890:	3001      	adds	r0, #1
 800d892:	d10e      	bne.n	800d8b2 <_printf_float+0x3fa>
 800d894:	e65e      	b.n	800d554 <_printf_float+0x9c>
 800d896:	2301      	movs	r3, #1
 800d898:	464a      	mov	r2, r9
 800d89a:	4631      	mov	r1, r6
 800d89c:	4628      	mov	r0, r5
 800d89e:	47b8      	blx	r7
 800d8a0:	3001      	adds	r0, #1
 800d8a2:	f43f ae57 	beq.w	800d554 <_printf_float+0x9c>
 800d8a6:	f108 0801 	add.w	r8, r8, #1
 800d8aa:	9b08      	ldr	r3, [sp, #32]
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	4543      	cmp	r3, r8
 800d8b0:	dcf1      	bgt.n	800d896 <_printf_float+0x3de>
 800d8b2:	9b04      	ldr	r3, [sp, #16]
 800d8b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d8b8:	e6db      	b.n	800d672 <_printf_float+0x1ba>
 800d8ba:	f04f 0800 	mov.w	r8, #0
 800d8be:	f104 091a 	add.w	r9, r4, #26
 800d8c2:	e7f2      	b.n	800d8aa <_printf_float+0x3f2>
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	4642      	mov	r2, r8
 800d8c8:	e7df      	b.n	800d88a <_printf_float+0x3d2>
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	464a      	mov	r2, r9
 800d8ce:	4631      	mov	r1, r6
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	47b8      	blx	r7
 800d8d4:	3001      	adds	r0, #1
 800d8d6:	f43f ae3d 	beq.w	800d554 <_printf_float+0x9c>
 800d8da:	f108 0801 	add.w	r8, r8, #1
 800d8de:	68e3      	ldr	r3, [r4, #12]
 800d8e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d8e2:	1a5b      	subs	r3, r3, r1
 800d8e4:	4543      	cmp	r3, r8
 800d8e6:	dcf0      	bgt.n	800d8ca <_printf_float+0x412>
 800d8e8:	e6f7      	b.n	800d6da <_printf_float+0x222>
 800d8ea:	f04f 0800 	mov.w	r8, #0
 800d8ee:	f104 0919 	add.w	r9, r4, #25
 800d8f2:	e7f4      	b.n	800d8de <_printf_float+0x426>

0800d8f4 <_printf_common>:
 800d8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8f8:	4616      	mov	r6, r2
 800d8fa:	4699      	mov	r9, r3
 800d8fc:	688a      	ldr	r2, [r1, #8]
 800d8fe:	690b      	ldr	r3, [r1, #16]
 800d900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d904:	4293      	cmp	r3, r2
 800d906:	bfb8      	it	lt
 800d908:	4613      	movlt	r3, r2
 800d90a:	6033      	str	r3, [r6, #0]
 800d90c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d910:	4607      	mov	r7, r0
 800d912:	460c      	mov	r4, r1
 800d914:	b10a      	cbz	r2, 800d91a <_printf_common+0x26>
 800d916:	3301      	adds	r3, #1
 800d918:	6033      	str	r3, [r6, #0]
 800d91a:	6823      	ldr	r3, [r4, #0]
 800d91c:	0699      	lsls	r1, r3, #26
 800d91e:	bf42      	ittt	mi
 800d920:	6833      	ldrmi	r3, [r6, #0]
 800d922:	3302      	addmi	r3, #2
 800d924:	6033      	strmi	r3, [r6, #0]
 800d926:	6825      	ldr	r5, [r4, #0]
 800d928:	f015 0506 	ands.w	r5, r5, #6
 800d92c:	d106      	bne.n	800d93c <_printf_common+0x48>
 800d92e:	f104 0a19 	add.w	sl, r4, #25
 800d932:	68e3      	ldr	r3, [r4, #12]
 800d934:	6832      	ldr	r2, [r6, #0]
 800d936:	1a9b      	subs	r3, r3, r2
 800d938:	42ab      	cmp	r3, r5
 800d93a:	dc26      	bgt.n	800d98a <_printf_common+0x96>
 800d93c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d940:	1e13      	subs	r3, r2, #0
 800d942:	6822      	ldr	r2, [r4, #0]
 800d944:	bf18      	it	ne
 800d946:	2301      	movne	r3, #1
 800d948:	0692      	lsls	r2, r2, #26
 800d94a:	d42b      	bmi.n	800d9a4 <_printf_common+0xb0>
 800d94c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d950:	4649      	mov	r1, r9
 800d952:	4638      	mov	r0, r7
 800d954:	47c0      	blx	r8
 800d956:	3001      	adds	r0, #1
 800d958:	d01e      	beq.n	800d998 <_printf_common+0xa4>
 800d95a:	6823      	ldr	r3, [r4, #0]
 800d95c:	68e5      	ldr	r5, [r4, #12]
 800d95e:	6832      	ldr	r2, [r6, #0]
 800d960:	f003 0306 	and.w	r3, r3, #6
 800d964:	2b04      	cmp	r3, #4
 800d966:	bf08      	it	eq
 800d968:	1aad      	subeq	r5, r5, r2
 800d96a:	68a3      	ldr	r3, [r4, #8]
 800d96c:	6922      	ldr	r2, [r4, #16]
 800d96e:	bf0c      	ite	eq
 800d970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d974:	2500      	movne	r5, #0
 800d976:	4293      	cmp	r3, r2
 800d978:	bfc4      	itt	gt
 800d97a:	1a9b      	subgt	r3, r3, r2
 800d97c:	18ed      	addgt	r5, r5, r3
 800d97e:	2600      	movs	r6, #0
 800d980:	341a      	adds	r4, #26
 800d982:	42b5      	cmp	r5, r6
 800d984:	d11a      	bne.n	800d9bc <_printf_common+0xc8>
 800d986:	2000      	movs	r0, #0
 800d988:	e008      	b.n	800d99c <_printf_common+0xa8>
 800d98a:	2301      	movs	r3, #1
 800d98c:	4652      	mov	r2, sl
 800d98e:	4649      	mov	r1, r9
 800d990:	4638      	mov	r0, r7
 800d992:	47c0      	blx	r8
 800d994:	3001      	adds	r0, #1
 800d996:	d103      	bne.n	800d9a0 <_printf_common+0xac>
 800d998:	f04f 30ff 	mov.w	r0, #4294967295
 800d99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9a0:	3501      	adds	r5, #1
 800d9a2:	e7c6      	b.n	800d932 <_printf_common+0x3e>
 800d9a4:	18e1      	adds	r1, r4, r3
 800d9a6:	1c5a      	adds	r2, r3, #1
 800d9a8:	2030      	movs	r0, #48	; 0x30
 800d9aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d9ae:	4422      	add	r2, r4
 800d9b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d9b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d9b8:	3302      	adds	r3, #2
 800d9ba:	e7c7      	b.n	800d94c <_printf_common+0x58>
 800d9bc:	2301      	movs	r3, #1
 800d9be:	4622      	mov	r2, r4
 800d9c0:	4649      	mov	r1, r9
 800d9c2:	4638      	mov	r0, r7
 800d9c4:	47c0      	blx	r8
 800d9c6:	3001      	adds	r0, #1
 800d9c8:	d0e6      	beq.n	800d998 <_printf_common+0xa4>
 800d9ca:	3601      	adds	r6, #1
 800d9cc:	e7d9      	b.n	800d982 <_printf_common+0x8e>
	...

0800d9d0 <_printf_i>:
 800d9d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9d4:	460c      	mov	r4, r1
 800d9d6:	4691      	mov	r9, r2
 800d9d8:	7e27      	ldrb	r7, [r4, #24]
 800d9da:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d9dc:	2f78      	cmp	r7, #120	; 0x78
 800d9de:	4680      	mov	r8, r0
 800d9e0:	469a      	mov	sl, r3
 800d9e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d9e6:	d807      	bhi.n	800d9f8 <_printf_i+0x28>
 800d9e8:	2f62      	cmp	r7, #98	; 0x62
 800d9ea:	d80a      	bhi.n	800da02 <_printf_i+0x32>
 800d9ec:	2f00      	cmp	r7, #0
 800d9ee:	f000 80d8 	beq.w	800dba2 <_printf_i+0x1d2>
 800d9f2:	2f58      	cmp	r7, #88	; 0x58
 800d9f4:	f000 80a3 	beq.w	800db3e <_printf_i+0x16e>
 800d9f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d9fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da00:	e03a      	b.n	800da78 <_printf_i+0xa8>
 800da02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da06:	2b15      	cmp	r3, #21
 800da08:	d8f6      	bhi.n	800d9f8 <_printf_i+0x28>
 800da0a:	a001      	add	r0, pc, #4	; (adr r0, 800da10 <_printf_i+0x40>)
 800da0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800da10:	0800da69 	.word	0x0800da69
 800da14:	0800da7d 	.word	0x0800da7d
 800da18:	0800d9f9 	.word	0x0800d9f9
 800da1c:	0800d9f9 	.word	0x0800d9f9
 800da20:	0800d9f9 	.word	0x0800d9f9
 800da24:	0800d9f9 	.word	0x0800d9f9
 800da28:	0800da7d 	.word	0x0800da7d
 800da2c:	0800d9f9 	.word	0x0800d9f9
 800da30:	0800d9f9 	.word	0x0800d9f9
 800da34:	0800d9f9 	.word	0x0800d9f9
 800da38:	0800d9f9 	.word	0x0800d9f9
 800da3c:	0800db89 	.word	0x0800db89
 800da40:	0800daad 	.word	0x0800daad
 800da44:	0800db6b 	.word	0x0800db6b
 800da48:	0800d9f9 	.word	0x0800d9f9
 800da4c:	0800d9f9 	.word	0x0800d9f9
 800da50:	0800dbab 	.word	0x0800dbab
 800da54:	0800d9f9 	.word	0x0800d9f9
 800da58:	0800daad 	.word	0x0800daad
 800da5c:	0800d9f9 	.word	0x0800d9f9
 800da60:	0800d9f9 	.word	0x0800d9f9
 800da64:	0800db73 	.word	0x0800db73
 800da68:	680b      	ldr	r3, [r1, #0]
 800da6a:	1d1a      	adds	r2, r3, #4
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	600a      	str	r2, [r1, #0]
 800da70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800da74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da78:	2301      	movs	r3, #1
 800da7a:	e0a3      	b.n	800dbc4 <_printf_i+0x1f4>
 800da7c:	6825      	ldr	r5, [r4, #0]
 800da7e:	6808      	ldr	r0, [r1, #0]
 800da80:	062e      	lsls	r6, r5, #24
 800da82:	f100 0304 	add.w	r3, r0, #4
 800da86:	d50a      	bpl.n	800da9e <_printf_i+0xce>
 800da88:	6805      	ldr	r5, [r0, #0]
 800da8a:	600b      	str	r3, [r1, #0]
 800da8c:	2d00      	cmp	r5, #0
 800da8e:	da03      	bge.n	800da98 <_printf_i+0xc8>
 800da90:	232d      	movs	r3, #45	; 0x2d
 800da92:	426d      	negs	r5, r5
 800da94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da98:	485e      	ldr	r0, [pc, #376]	; (800dc14 <_printf_i+0x244>)
 800da9a:	230a      	movs	r3, #10
 800da9c:	e019      	b.n	800dad2 <_printf_i+0x102>
 800da9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800daa2:	6805      	ldr	r5, [r0, #0]
 800daa4:	600b      	str	r3, [r1, #0]
 800daa6:	bf18      	it	ne
 800daa8:	b22d      	sxthne	r5, r5
 800daaa:	e7ef      	b.n	800da8c <_printf_i+0xbc>
 800daac:	680b      	ldr	r3, [r1, #0]
 800daae:	6825      	ldr	r5, [r4, #0]
 800dab0:	1d18      	adds	r0, r3, #4
 800dab2:	6008      	str	r0, [r1, #0]
 800dab4:	0628      	lsls	r0, r5, #24
 800dab6:	d501      	bpl.n	800dabc <_printf_i+0xec>
 800dab8:	681d      	ldr	r5, [r3, #0]
 800daba:	e002      	b.n	800dac2 <_printf_i+0xf2>
 800dabc:	0669      	lsls	r1, r5, #25
 800dabe:	d5fb      	bpl.n	800dab8 <_printf_i+0xe8>
 800dac0:	881d      	ldrh	r5, [r3, #0]
 800dac2:	4854      	ldr	r0, [pc, #336]	; (800dc14 <_printf_i+0x244>)
 800dac4:	2f6f      	cmp	r7, #111	; 0x6f
 800dac6:	bf0c      	ite	eq
 800dac8:	2308      	moveq	r3, #8
 800daca:	230a      	movne	r3, #10
 800dacc:	2100      	movs	r1, #0
 800dace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dad2:	6866      	ldr	r6, [r4, #4]
 800dad4:	60a6      	str	r6, [r4, #8]
 800dad6:	2e00      	cmp	r6, #0
 800dad8:	bfa2      	ittt	ge
 800dada:	6821      	ldrge	r1, [r4, #0]
 800dadc:	f021 0104 	bicge.w	r1, r1, #4
 800dae0:	6021      	strge	r1, [r4, #0]
 800dae2:	b90d      	cbnz	r5, 800dae8 <_printf_i+0x118>
 800dae4:	2e00      	cmp	r6, #0
 800dae6:	d04d      	beq.n	800db84 <_printf_i+0x1b4>
 800dae8:	4616      	mov	r6, r2
 800daea:	fbb5 f1f3 	udiv	r1, r5, r3
 800daee:	fb03 5711 	mls	r7, r3, r1, r5
 800daf2:	5dc7      	ldrb	r7, [r0, r7]
 800daf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800daf8:	462f      	mov	r7, r5
 800dafa:	42bb      	cmp	r3, r7
 800dafc:	460d      	mov	r5, r1
 800dafe:	d9f4      	bls.n	800daea <_printf_i+0x11a>
 800db00:	2b08      	cmp	r3, #8
 800db02:	d10b      	bne.n	800db1c <_printf_i+0x14c>
 800db04:	6823      	ldr	r3, [r4, #0]
 800db06:	07df      	lsls	r7, r3, #31
 800db08:	d508      	bpl.n	800db1c <_printf_i+0x14c>
 800db0a:	6923      	ldr	r3, [r4, #16]
 800db0c:	6861      	ldr	r1, [r4, #4]
 800db0e:	4299      	cmp	r1, r3
 800db10:	bfde      	ittt	le
 800db12:	2330      	movle	r3, #48	; 0x30
 800db14:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db18:	f106 36ff 	addle.w	r6, r6, #4294967295
 800db1c:	1b92      	subs	r2, r2, r6
 800db1e:	6122      	str	r2, [r4, #16]
 800db20:	f8cd a000 	str.w	sl, [sp]
 800db24:	464b      	mov	r3, r9
 800db26:	aa03      	add	r2, sp, #12
 800db28:	4621      	mov	r1, r4
 800db2a:	4640      	mov	r0, r8
 800db2c:	f7ff fee2 	bl	800d8f4 <_printf_common>
 800db30:	3001      	adds	r0, #1
 800db32:	d14c      	bne.n	800dbce <_printf_i+0x1fe>
 800db34:	f04f 30ff 	mov.w	r0, #4294967295
 800db38:	b004      	add	sp, #16
 800db3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db3e:	4835      	ldr	r0, [pc, #212]	; (800dc14 <_printf_i+0x244>)
 800db40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800db44:	6823      	ldr	r3, [r4, #0]
 800db46:	680e      	ldr	r6, [r1, #0]
 800db48:	061f      	lsls	r7, r3, #24
 800db4a:	f856 5b04 	ldr.w	r5, [r6], #4
 800db4e:	600e      	str	r6, [r1, #0]
 800db50:	d514      	bpl.n	800db7c <_printf_i+0x1ac>
 800db52:	07d9      	lsls	r1, r3, #31
 800db54:	bf44      	itt	mi
 800db56:	f043 0320 	orrmi.w	r3, r3, #32
 800db5a:	6023      	strmi	r3, [r4, #0]
 800db5c:	b91d      	cbnz	r5, 800db66 <_printf_i+0x196>
 800db5e:	6823      	ldr	r3, [r4, #0]
 800db60:	f023 0320 	bic.w	r3, r3, #32
 800db64:	6023      	str	r3, [r4, #0]
 800db66:	2310      	movs	r3, #16
 800db68:	e7b0      	b.n	800dacc <_printf_i+0xfc>
 800db6a:	6823      	ldr	r3, [r4, #0]
 800db6c:	f043 0320 	orr.w	r3, r3, #32
 800db70:	6023      	str	r3, [r4, #0]
 800db72:	2378      	movs	r3, #120	; 0x78
 800db74:	4828      	ldr	r0, [pc, #160]	; (800dc18 <_printf_i+0x248>)
 800db76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800db7a:	e7e3      	b.n	800db44 <_printf_i+0x174>
 800db7c:	065e      	lsls	r6, r3, #25
 800db7e:	bf48      	it	mi
 800db80:	b2ad      	uxthmi	r5, r5
 800db82:	e7e6      	b.n	800db52 <_printf_i+0x182>
 800db84:	4616      	mov	r6, r2
 800db86:	e7bb      	b.n	800db00 <_printf_i+0x130>
 800db88:	680b      	ldr	r3, [r1, #0]
 800db8a:	6826      	ldr	r6, [r4, #0]
 800db8c:	6960      	ldr	r0, [r4, #20]
 800db8e:	1d1d      	adds	r5, r3, #4
 800db90:	600d      	str	r5, [r1, #0]
 800db92:	0635      	lsls	r5, r6, #24
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	d501      	bpl.n	800db9c <_printf_i+0x1cc>
 800db98:	6018      	str	r0, [r3, #0]
 800db9a:	e002      	b.n	800dba2 <_printf_i+0x1d2>
 800db9c:	0671      	lsls	r1, r6, #25
 800db9e:	d5fb      	bpl.n	800db98 <_printf_i+0x1c8>
 800dba0:	8018      	strh	r0, [r3, #0]
 800dba2:	2300      	movs	r3, #0
 800dba4:	6123      	str	r3, [r4, #16]
 800dba6:	4616      	mov	r6, r2
 800dba8:	e7ba      	b.n	800db20 <_printf_i+0x150>
 800dbaa:	680b      	ldr	r3, [r1, #0]
 800dbac:	1d1a      	adds	r2, r3, #4
 800dbae:	600a      	str	r2, [r1, #0]
 800dbb0:	681e      	ldr	r6, [r3, #0]
 800dbb2:	6862      	ldr	r2, [r4, #4]
 800dbb4:	2100      	movs	r1, #0
 800dbb6:	4630      	mov	r0, r6
 800dbb8:	f7f2 fb9a 	bl	80002f0 <memchr>
 800dbbc:	b108      	cbz	r0, 800dbc2 <_printf_i+0x1f2>
 800dbbe:	1b80      	subs	r0, r0, r6
 800dbc0:	6060      	str	r0, [r4, #4]
 800dbc2:	6863      	ldr	r3, [r4, #4]
 800dbc4:	6123      	str	r3, [r4, #16]
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbcc:	e7a8      	b.n	800db20 <_printf_i+0x150>
 800dbce:	6923      	ldr	r3, [r4, #16]
 800dbd0:	4632      	mov	r2, r6
 800dbd2:	4649      	mov	r1, r9
 800dbd4:	4640      	mov	r0, r8
 800dbd6:	47d0      	blx	sl
 800dbd8:	3001      	adds	r0, #1
 800dbda:	d0ab      	beq.n	800db34 <_printf_i+0x164>
 800dbdc:	6823      	ldr	r3, [r4, #0]
 800dbde:	079b      	lsls	r3, r3, #30
 800dbe0:	d413      	bmi.n	800dc0a <_printf_i+0x23a>
 800dbe2:	68e0      	ldr	r0, [r4, #12]
 800dbe4:	9b03      	ldr	r3, [sp, #12]
 800dbe6:	4298      	cmp	r0, r3
 800dbe8:	bfb8      	it	lt
 800dbea:	4618      	movlt	r0, r3
 800dbec:	e7a4      	b.n	800db38 <_printf_i+0x168>
 800dbee:	2301      	movs	r3, #1
 800dbf0:	4632      	mov	r2, r6
 800dbf2:	4649      	mov	r1, r9
 800dbf4:	4640      	mov	r0, r8
 800dbf6:	47d0      	blx	sl
 800dbf8:	3001      	adds	r0, #1
 800dbfa:	d09b      	beq.n	800db34 <_printf_i+0x164>
 800dbfc:	3501      	adds	r5, #1
 800dbfe:	68e3      	ldr	r3, [r4, #12]
 800dc00:	9903      	ldr	r1, [sp, #12]
 800dc02:	1a5b      	subs	r3, r3, r1
 800dc04:	42ab      	cmp	r3, r5
 800dc06:	dcf2      	bgt.n	800dbee <_printf_i+0x21e>
 800dc08:	e7eb      	b.n	800dbe2 <_printf_i+0x212>
 800dc0a:	2500      	movs	r5, #0
 800dc0c:	f104 0619 	add.w	r6, r4, #25
 800dc10:	e7f5      	b.n	800dbfe <_printf_i+0x22e>
 800dc12:	bf00      	nop
 800dc14:	0800ff36 	.word	0x0800ff36
 800dc18:	0800ff47 	.word	0x0800ff47

0800dc1c <iprintf>:
 800dc1c:	b40f      	push	{r0, r1, r2, r3}
 800dc1e:	4b0a      	ldr	r3, [pc, #40]	; (800dc48 <iprintf+0x2c>)
 800dc20:	b513      	push	{r0, r1, r4, lr}
 800dc22:	681c      	ldr	r4, [r3, #0]
 800dc24:	b124      	cbz	r4, 800dc30 <iprintf+0x14>
 800dc26:	69a3      	ldr	r3, [r4, #24]
 800dc28:	b913      	cbnz	r3, 800dc30 <iprintf+0x14>
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	f000 fe76 	bl	800e91c <__sinit>
 800dc30:	ab05      	add	r3, sp, #20
 800dc32:	9a04      	ldr	r2, [sp, #16]
 800dc34:	68a1      	ldr	r1, [r4, #8]
 800dc36:	9301      	str	r3, [sp, #4]
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f001 fb8d 	bl	800f358 <_vfiprintf_r>
 800dc3e:	b002      	add	sp, #8
 800dc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc44:	b004      	add	sp, #16
 800dc46:	4770      	bx	lr
 800dc48:	20000018 	.word	0x20000018

0800dc4c <quorem>:
 800dc4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc50:	6903      	ldr	r3, [r0, #16]
 800dc52:	690c      	ldr	r4, [r1, #16]
 800dc54:	42a3      	cmp	r3, r4
 800dc56:	4607      	mov	r7, r0
 800dc58:	f2c0 8081 	blt.w	800dd5e <quorem+0x112>
 800dc5c:	3c01      	subs	r4, #1
 800dc5e:	f101 0814 	add.w	r8, r1, #20
 800dc62:	f100 0514 	add.w	r5, r0, #20
 800dc66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc6a:	9301      	str	r3, [sp, #4]
 800dc6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc74:	3301      	adds	r3, #1
 800dc76:	429a      	cmp	r2, r3
 800dc78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dc7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc80:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc84:	d331      	bcc.n	800dcea <quorem+0x9e>
 800dc86:	f04f 0e00 	mov.w	lr, #0
 800dc8a:	4640      	mov	r0, r8
 800dc8c:	46ac      	mov	ip, r5
 800dc8e:	46f2      	mov	sl, lr
 800dc90:	f850 2b04 	ldr.w	r2, [r0], #4
 800dc94:	b293      	uxth	r3, r2
 800dc96:	fb06 e303 	mla	r3, r6, r3, lr
 800dc9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	ebaa 0303 	sub.w	r3, sl, r3
 800dca4:	0c12      	lsrs	r2, r2, #16
 800dca6:	f8dc a000 	ldr.w	sl, [ip]
 800dcaa:	fb06 e202 	mla	r2, r6, r2, lr
 800dcae:	fa13 f38a 	uxtah	r3, r3, sl
 800dcb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dcb6:	fa1f fa82 	uxth.w	sl, r2
 800dcba:	f8dc 2000 	ldr.w	r2, [ip]
 800dcbe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800dcc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dccc:	4581      	cmp	r9, r0
 800dcce:	f84c 3b04 	str.w	r3, [ip], #4
 800dcd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dcd6:	d2db      	bcs.n	800dc90 <quorem+0x44>
 800dcd8:	f855 300b 	ldr.w	r3, [r5, fp]
 800dcdc:	b92b      	cbnz	r3, 800dcea <quorem+0x9e>
 800dcde:	9b01      	ldr	r3, [sp, #4]
 800dce0:	3b04      	subs	r3, #4
 800dce2:	429d      	cmp	r5, r3
 800dce4:	461a      	mov	r2, r3
 800dce6:	d32e      	bcc.n	800dd46 <quorem+0xfa>
 800dce8:	613c      	str	r4, [r7, #16]
 800dcea:	4638      	mov	r0, r7
 800dcec:	f001 f950 	bl	800ef90 <__mcmp>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	db24      	blt.n	800dd3e <quorem+0xf2>
 800dcf4:	3601      	adds	r6, #1
 800dcf6:	4628      	mov	r0, r5
 800dcf8:	f04f 0c00 	mov.w	ip, #0
 800dcfc:	f858 2b04 	ldr.w	r2, [r8], #4
 800dd00:	f8d0 e000 	ldr.w	lr, [r0]
 800dd04:	b293      	uxth	r3, r2
 800dd06:	ebac 0303 	sub.w	r3, ip, r3
 800dd0a:	0c12      	lsrs	r2, r2, #16
 800dd0c:	fa13 f38e 	uxtah	r3, r3, lr
 800dd10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dd14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd1e:	45c1      	cmp	r9, r8
 800dd20:	f840 3b04 	str.w	r3, [r0], #4
 800dd24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dd28:	d2e8      	bcs.n	800dcfc <quorem+0xb0>
 800dd2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd32:	b922      	cbnz	r2, 800dd3e <quorem+0xf2>
 800dd34:	3b04      	subs	r3, #4
 800dd36:	429d      	cmp	r5, r3
 800dd38:	461a      	mov	r2, r3
 800dd3a:	d30a      	bcc.n	800dd52 <quorem+0x106>
 800dd3c:	613c      	str	r4, [r7, #16]
 800dd3e:	4630      	mov	r0, r6
 800dd40:	b003      	add	sp, #12
 800dd42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd46:	6812      	ldr	r2, [r2, #0]
 800dd48:	3b04      	subs	r3, #4
 800dd4a:	2a00      	cmp	r2, #0
 800dd4c:	d1cc      	bne.n	800dce8 <quorem+0x9c>
 800dd4e:	3c01      	subs	r4, #1
 800dd50:	e7c7      	b.n	800dce2 <quorem+0x96>
 800dd52:	6812      	ldr	r2, [r2, #0]
 800dd54:	3b04      	subs	r3, #4
 800dd56:	2a00      	cmp	r2, #0
 800dd58:	d1f0      	bne.n	800dd3c <quorem+0xf0>
 800dd5a:	3c01      	subs	r4, #1
 800dd5c:	e7eb      	b.n	800dd36 <quorem+0xea>
 800dd5e:	2000      	movs	r0, #0
 800dd60:	e7ee      	b.n	800dd40 <quorem+0xf4>
 800dd62:	0000      	movs	r0, r0
 800dd64:	0000      	movs	r0, r0
	...

0800dd68 <_dtoa_r>:
 800dd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd6c:	ec59 8b10 	vmov	r8, r9, d0
 800dd70:	b095      	sub	sp, #84	; 0x54
 800dd72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dd74:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800dd76:	9107      	str	r1, [sp, #28]
 800dd78:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800dd7c:	4606      	mov	r6, r0
 800dd7e:	9209      	str	r2, [sp, #36]	; 0x24
 800dd80:	9310      	str	r3, [sp, #64]	; 0x40
 800dd82:	b975      	cbnz	r5, 800dda2 <_dtoa_r+0x3a>
 800dd84:	2010      	movs	r0, #16
 800dd86:	f000 fe6f 	bl	800ea68 <malloc>
 800dd8a:	4602      	mov	r2, r0
 800dd8c:	6270      	str	r0, [r6, #36]	; 0x24
 800dd8e:	b920      	cbnz	r0, 800dd9a <_dtoa_r+0x32>
 800dd90:	4bab      	ldr	r3, [pc, #684]	; (800e040 <_dtoa_r+0x2d8>)
 800dd92:	21ea      	movs	r1, #234	; 0xea
 800dd94:	48ab      	ldr	r0, [pc, #684]	; (800e044 <_dtoa_r+0x2dc>)
 800dd96:	f001 fd35 	bl	800f804 <__assert_func>
 800dd9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dd9e:	6005      	str	r5, [r0, #0]
 800dda0:	60c5      	str	r5, [r0, #12]
 800dda2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dda4:	6819      	ldr	r1, [r3, #0]
 800dda6:	b151      	cbz	r1, 800ddbe <_dtoa_r+0x56>
 800dda8:	685a      	ldr	r2, [r3, #4]
 800ddaa:	604a      	str	r2, [r1, #4]
 800ddac:	2301      	movs	r3, #1
 800ddae:	4093      	lsls	r3, r2
 800ddb0:	608b      	str	r3, [r1, #8]
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	f000 feae 	bl	800eb14 <_Bfree>
 800ddb8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ddba:	2200      	movs	r2, #0
 800ddbc:	601a      	str	r2, [r3, #0]
 800ddbe:	f1b9 0300 	subs.w	r3, r9, #0
 800ddc2:	bfbb      	ittet	lt
 800ddc4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ddc8:	9303      	strlt	r3, [sp, #12]
 800ddca:	2300      	movge	r3, #0
 800ddcc:	2201      	movlt	r2, #1
 800ddce:	bfac      	ite	ge
 800ddd0:	6023      	strge	r3, [r4, #0]
 800ddd2:	6022      	strlt	r2, [r4, #0]
 800ddd4:	4b9c      	ldr	r3, [pc, #624]	; (800e048 <_dtoa_r+0x2e0>)
 800ddd6:	9c03      	ldr	r4, [sp, #12]
 800ddd8:	43a3      	bics	r3, r4
 800ddda:	d11a      	bne.n	800de12 <_dtoa_r+0xaa>
 800dddc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ddde:	f242 730f 	movw	r3, #9999	; 0x270f
 800dde2:	6013      	str	r3, [r2, #0]
 800dde4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800dde8:	ea53 0308 	orrs.w	r3, r3, r8
 800ddec:	f000 8512 	beq.w	800e814 <_dtoa_r+0xaac>
 800ddf0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ddf2:	b953      	cbnz	r3, 800de0a <_dtoa_r+0xa2>
 800ddf4:	4b95      	ldr	r3, [pc, #596]	; (800e04c <_dtoa_r+0x2e4>)
 800ddf6:	e01f      	b.n	800de38 <_dtoa_r+0xd0>
 800ddf8:	4b95      	ldr	r3, [pc, #596]	; (800e050 <_dtoa_r+0x2e8>)
 800ddfa:	9300      	str	r3, [sp, #0]
 800ddfc:	3308      	adds	r3, #8
 800ddfe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800de00:	6013      	str	r3, [r2, #0]
 800de02:	9800      	ldr	r0, [sp, #0]
 800de04:	b015      	add	sp, #84	; 0x54
 800de06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de0a:	4b90      	ldr	r3, [pc, #576]	; (800e04c <_dtoa_r+0x2e4>)
 800de0c:	9300      	str	r3, [sp, #0]
 800de0e:	3303      	adds	r3, #3
 800de10:	e7f5      	b.n	800ddfe <_dtoa_r+0x96>
 800de12:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800de1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de1e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800de22:	d10b      	bne.n	800de3c <_dtoa_r+0xd4>
 800de24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800de26:	2301      	movs	r3, #1
 800de28:	6013      	str	r3, [r2, #0]
 800de2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f000 84ee 	beq.w	800e80e <_dtoa_r+0xaa6>
 800de32:	4888      	ldr	r0, [pc, #544]	; (800e054 <_dtoa_r+0x2ec>)
 800de34:	6018      	str	r0, [r3, #0]
 800de36:	1e43      	subs	r3, r0, #1
 800de38:	9300      	str	r3, [sp, #0]
 800de3a:	e7e2      	b.n	800de02 <_dtoa_r+0x9a>
 800de3c:	a913      	add	r1, sp, #76	; 0x4c
 800de3e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800de42:	aa12      	add	r2, sp, #72	; 0x48
 800de44:	4630      	mov	r0, r6
 800de46:	f001 f947 	bl	800f0d8 <__d2b>
 800de4a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800de4e:	4605      	mov	r5, r0
 800de50:	9812      	ldr	r0, [sp, #72]	; 0x48
 800de52:	2900      	cmp	r1, #0
 800de54:	d047      	beq.n	800dee6 <_dtoa_r+0x17e>
 800de56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800de58:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800de5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800de60:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800de64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800de68:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800de6c:	2400      	movs	r4, #0
 800de6e:	ec43 2b16 	vmov	d6, r2, r3
 800de72:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800de76:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800e028 <_dtoa_r+0x2c0>
 800de7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800de7e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800e030 <_dtoa_r+0x2c8>
 800de82:	eea7 6b05 	vfma.f64	d6, d7, d5
 800de86:	eeb0 7b46 	vmov.f64	d7, d6
 800de8a:	ee06 1a90 	vmov	s13, r1
 800de8e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800de92:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e038 <_dtoa_r+0x2d0>
 800de96:	eea5 7b06 	vfma.f64	d7, d5, d6
 800de9a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800de9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800dea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dea6:	ee16 ba90 	vmov	fp, s13
 800deaa:	9411      	str	r4, [sp, #68]	; 0x44
 800deac:	d508      	bpl.n	800dec0 <_dtoa_r+0x158>
 800deae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800deb2:	eeb4 6b47 	vcmp.f64	d6, d7
 800deb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deba:	bf18      	it	ne
 800debc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800dec0:	f1bb 0f16 	cmp.w	fp, #22
 800dec4:	d832      	bhi.n	800df2c <_dtoa_r+0x1c4>
 800dec6:	4b64      	ldr	r3, [pc, #400]	; (800e058 <_dtoa_r+0x2f0>)
 800dec8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800decc:	ed93 7b00 	vldr	d7, [r3]
 800ded0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800ded4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ded8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dedc:	d501      	bpl.n	800dee2 <_dtoa_r+0x17a>
 800dede:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dee2:	2300      	movs	r3, #0
 800dee4:	e023      	b.n	800df2e <_dtoa_r+0x1c6>
 800dee6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800dee8:	4401      	add	r1, r0
 800deea:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800deee:	2b20      	cmp	r3, #32
 800def0:	bfc3      	ittte	gt
 800def2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800def6:	fa04 f303 	lslgt.w	r3, r4, r3
 800defa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800defe:	f1c3 0320 	rsble	r3, r3, #32
 800df02:	bfc6      	itte	gt
 800df04:	fa28 f804 	lsrgt.w	r8, r8, r4
 800df08:	ea43 0308 	orrgt.w	r3, r3, r8
 800df0c:	fa08 f303 	lslle.w	r3, r8, r3
 800df10:	ee07 3a90 	vmov	s15, r3
 800df14:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800df18:	3901      	subs	r1, #1
 800df1a:	ed8d 7b00 	vstr	d7, [sp]
 800df1e:	9c01      	ldr	r4, [sp, #4]
 800df20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df24:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800df28:	2401      	movs	r4, #1
 800df2a:	e7a0      	b.n	800de6e <_dtoa_r+0x106>
 800df2c:	2301      	movs	r3, #1
 800df2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800df30:	1a43      	subs	r3, r0, r1
 800df32:	1e5a      	subs	r2, r3, #1
 800df34:	bf45      	ittet	mi
 800df36:	f1c3 0301 	rsbmi	r3, r3, #1
 800df3a:	9305      	strmi	r3, [sp, #20]
 800df3c:	2300      	movpl	r3, #0
 800df3e:	2300      	movmi	r3, #0
 800df40:	9206      	str	r2, [sp, #24]
 800df42:	bf54      	ite	pl
 800df44:	9305      	strpl	r3, [sp, #20]
 800df46:	9306      	strmi	r3, [sp, #24]
 800df48:	f1bb 0f00 	cmp.w	fp, #0
 800df4c:	db18      	blt.n	800df80 <_dtoa_r+0x218>
 800df4e:	9b06      	ldr	r3, [sp, #24]
 800df50:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800df54:	445b      	add	r3, fp
 800df56:	9306      	str	r3, [sp, #24]
 800df58:	2300      	movs	r3, #0
 800df5a:	9a07      	ldr	r2, [sp, #28]
 800df5c:	2a09      	cmp	r2, #9
 800df5e:	d849      	bhi.n	800dff4 <_dtoa_r+0x28c>
 800df60:	2a05      	cmp	r2, #5
 800df62:	bfc4      	itt	gt
 800df64:	3a04      	subgt	r2, #4
 800df66:	9207      	strgt	r2, [sp, #28]
 800df68:	9a07      	ldr	r2, [sp, #28]
 800df6a:	f1a2 0202 	sub.w	r2, r2, #2
 800df6e:	bfcc      	ite	gt
 800df70:	2400      	movgt	r4, #0
 800df72:	2401      	movle	r4, #1
 800df74:	2a03      	cmp	r2, #3
 800df76:	d848      	bhi.n	800e00a <_dtoa_r+0x2a2>
 800df78:	e8df f002 	tbb	[pc, r2]
 800df7c:	3a2c2e0b 	.word	0x3a2c2e0b
 800df80:	9b05      	ldr	r3, [sp, #20]
 800df82:	2200      	movs	r2, #0
 800df84:	eba3 030b 	sub.w	r3, r3, fp
 800df88:	9305      	str	r3, [sp, #20]
 800df8a:	920e      	str	r2, [sp, #56]	; 0x38
 800df8c:	f1cb 0300 	rsb	r3, fp, #0
 800df90:	e7e3      	b.n	800df5a <_dtoa_r+0x1f2>
 800df92:	2200      	movs	r2, #0
 800df94:	9208      	str	r2, [sp, #32]
 800df96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df98:	2a00      	cmp	r2, #0
 800df9a:	dc39      	bgt.n	800e010 <_dtoa_r+0x2a8>
 800df9c:	f04f 0a01 	mov.w	sl, #1
 800dfa0:	46d1      	mov	r9, sl
 800dfa2:	4652      	mov	r2, sl
 800dfa4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800dfa8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800dfaa:	2100      	movs	r1, #0
 800dfac:	6079      	str	r1, [r7, #4]
 800dfae:	2004      	movs	r0, #4
 800dfb0:	f100 0c14 	add.w	ip, r0, #20
 800dfb4:	4594      	cmp	ip, r2
 800dfb6:	6879      	ldr	r1, [r7, #4]
 800dfb8:	d92f      	bls.n	800e01a <_dtoa_r+0x2b2>
 800dfba:	4630      	mov	r0, r6
 800dfbc:	930c      	str	r3, [sp, #48]	; 0x30
 800dfbe:	f000 fd69 	bl	800ea94 <_Balloc>
 800dfc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfc4:	9000      	str	r0, [sp, #0]
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	2800      	cmp	r0, #0
 800dfca:	d149      	bne.n	800e060 <_dtoa_r+0x2f8>
 800dfcc:	4b23      	ldr	r3, [pc, #140]	; (800e05c <_dtoa_r+0x2f4>)
 800dfce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dfd2:	e6df      	b.n	800dd94 <_dtoa_r+0x2c>
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	e7dd      	b.n	800df94 <_dtoa_r+0x22c>
 800dfd8:	2200      	movs	r2, #0
 800dfda:	9208      	str	r2, [sp, #32]
 800dfdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfde:	eb0b 0a02 	add.w	sl, fp, r2
 800dfe2:	f10a 0901 	add.w	r9, sl, #1
 800dfe6:	464a      	mov	r2, r9
 800dfe8:	2a01      	cmp	r2, #1
 800dfea:	bfb8      	it	lt
 800dfec:	2201      	movlt	r2, #1
 800dfee:	e7db      	b.n	800dfa8 <_dtoa_r+0x240>
 800dff0:	2201      	movs	r2, #1
 800dff2:	e7f2      	b.n	800dfda <_dtoa_r+0x272>
 800dff4:	2401      	movs	r4, #1
 800dff6:	2200      	movs	r2, #0
 800dff8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800dffc:	f04f 3aff 	mov.w	sl, #4294967295
 800e000:	2100      	movs	r1, #0
 800e002:	46d1      	mov	r9, sl
 800e004:	2212      	movs	r2, #18
 800e006:	9109      	str	r1, [sp, #36]	; 0x24
 800e008:	e7ce      	b.n	800dfa8 <_dtoa_r+0x240>
 800e00a:	2201      	movs	r2, #1
 800e00c:	9208      	str	r2, [sp, #32]
 800e00e:	e7f5      	b.n	800dffc <_dtoa_r+0x294>
 800e010:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800e014:	46d1      	mov	r9, sl
 800e016:	4652      	mov	r2, sl
 800e018:	e7c6      	b.n	800dfa8 <_dtoa_r+0x240>
 800e01a:	3101      	adds	r1, #1
 800e01c:	6079      	str	r1, [r7, #4]
 800e01e:	0040      	lsls	r0, r0, #1
 800e020:	e7c6      	b.n	800dfb0 <_dtoa_r+0x248>
 800e022:	bf00      	nop
 800e024:	f3af 8000 	nop.w
 800e028:	636f4361 	.word	0x636f4361
 800e02c:	3fd287a7 	.word	0x3fd287a7
 800e030:	8b60c8b3 	.word	0x8b60c8b3
 800e034:	3fc68a28 	.word	0x3fc68a28
 800e038:	509f79fb 	.word	0x509f79fb
 800e03c:	3fd34413 	.word	0x3fd34413
 800e040:	0800ff65 	.word	0x0800ff65
 800e044:	0800ff7c 	.word	0x0800ff7c
 800e048:	7ff00000 	.word	0x7ff00000
 800e04c:	0800ff61 	.word	0x0800ff61
 800e050:	0800ff58 	.word	0x0800ff58
 800e054:	0800ff35 	.word	0x0800ff35
 800e058:	080100d8 	.word	0x080100d8
 800e05c:	0800ffdb 	.word	0x0800ffdb
 800e060:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800e062:	9900      	ldr	r1, [sp, #0]
 800e064:	6011      	str	r1, [r2, #0]
 800e066:	f1b9 0f0e 	cmp.w	r9, #14
 800e06a:	d872      	bhi.n	800e152 <_dtoa_r+0x3ea>
 800e06c:	2c00      	cmp	r4, #0
 800e06e:	d070      	beq.n	800e152 <_dtoa_r+0x3ea>
 800e070:	f1bb 0f00 	cmp.w	fp, #0
 800e074:	f340 80a6 	ble.w	800e1c4 <_dtoa_r+0x45c>
 800e078:	49ca      	ldr	r1, [pc, #808]	; (800e3a4 <_dtoa_r+0x63c>)
 800e07a:	f00b 020f 	and.w	r2, fp, #15
 800e07e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e082:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e086:	ed92 7b00 	vldr	d7, [r2]
 800e08a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800e08e:	f000 808d 	beq.w	800e1ac <_dtoa_r+0x444>
 800e092:	4ac5      	ldr	r2, [pc, #788]	; (800e3a8 <_dtoa_r+0x640>)
 800e094:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e098:	ed92 6b08 	vldr	d6, [r2, #32]
 800e09c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800e0a0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e0a4:	f001 010f 	and.w	r1, r1, #15
 800e0a8:	2203      	movs	r2, #3
 800e0aa:	48bf      	ldr	r0, [pc, #764]	; (800e3a8 <_dtoa_r+0x640>)
 800e0ac:	2900      	cmp	r1, #0
 800e0ae:	d17f      	bne.n	800e1b0 <_dtoa_r+0x448>
 800e0b0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e0b4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e0b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e0bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e0be:	2900      	cmp	r1, #0
 800e0c0:	f000 80b2 	beq.w	800e228 <_dtoa_r+0x4c0>
 800e0c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e0c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e0cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0d4:	f140 80a8 	bpl.w	800e228 <_dtoa_r+0x4c0>
 800e0d8:	f1b9 0f00 	cmp.w	r9, #0
 800e0dc:	f000 80a4 	beq.w	800e228 <_dtoa_r+0x4c0>
 800e0e0:	f1ba 0f00 	cmp.w	sl, #0
 800e0e4:	dd31      	ble.n	800e14a <_dtoa_r+0x3e2>
 800e0e6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e0ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e0ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e0f2:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e0f6:	3201      	adds	r2, #1
 800e0f8:	4650      	mov	r0, sl
 800e0fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e0fe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e102:	ee07 2a90 	vmov	s15, r2
 800e106:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e10a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e10e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800e112:	9c03      	ldr	r4, [sp, #12]
 800e114:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e118:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800e11c:	2800      	cmp	r0, #0
 800e11e:	f040 8086 	bne.w	800e22e <_dtoa_r+0x4c6>
 800e122:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e126:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e12a:	ec42 1b17 	vmov	d7, r1, r2
 800e12e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e136:	f300 8272 	bgt.w	800e61e <_dtoa_r+0x8b6>
 800e13a:	eeb1 7b47 	vneg.f64	d7, d7
 800e13e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e146:	f100 8267 	bmi.w	800e618 <_dtoa_r+0x8b0>
 800e14a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800e14e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800e152:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e154:	2a00      	cmp	r2, #0
 800e156:	f2c0 8129 	blt.w	800e3ac <_dtoa_r+0x644>
 800e15a:	f1bb 0f0e 	cmp.w	fp, #14
 800e15e:	f300 8125 	bgt.w	800e3ac <_dtoa_r+0x644>
 800e162:	4b90      	ldr	r3, [pc, #576]	; (800e3a4 <_dtoa_r+0x63c>)
 800e164:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e168:	ed93 6b00 	vldr	d6, [r3]
 800e16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e16e:	2b00      	cmp	r3, #0
 800e170:	f280 80c3 	bge.w	800e2fa <_dtoa_r+0x592>
 800e174:	f1b9 0f00 	cmp.w	r9, #0
 800e178:	f300 80bf 	bgt.w	800e2fa <_dtoa_r+0x592>
 800e17c:	f040 824c 	bne.w	800e618 <_dtoa_r+0x8b0>
 800e180:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e184:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e188:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e18c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e194:	464c      	mov	r4, r9
 800e196:	464f      	mov	r7, r9
 800e198:	f280 8222 	bge.w	800e5e0 <_dtoa_r+0x878>
 800e19c:	f8dd 8000 	ldr.w	r8, [sp]
 800e1a0:	2331      	movs	r3, #49	; 0x31
 800e1a2:	f808 3b01 	strb.w	r3, [r8], #1
 800e1a6:	f10b 0b01 	add.w	fp, fp, #1
 800e1aa:	e21e      	b.n	800e5ea <_dtoa_r+0x882>
 800e1ac:	2202      	movs	r2, #2
 800e1ae:	e77c      	b.n	800e0aa <_dtoa_r+0x342>
 800e1b0:	07cc      	lsls	r4, r1, #31
 800e1b2:	d504      	bpl.n	800e1be <_dtoa_r+0x456>
 800e1b4:	ed90 6b00 	vldr	d6, [r0]
 800e1b8:	3201      	adds	r2, #1
 800e1ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e1be:	1049      	asrs	r1, r1, #1
 800e1c0:	3008      	adds	r0, #8
 800e1c2:	e773      	b.n	800e0ac <_dtoa_r+0x344>
 800e1c4:	d02e      	beq.n	800e224 <_dtoa_r+0x4bc>
 800e1c6:	f1cb 0100 	rsb	r1, fp, #0
 800e1ca:	4a76      	ldr	r2, [pc, #472]	; (800e3a4 <_dtoa_r+0x63c>)
 800e1cc:	f001 000f 	and.w	r0, r1, #15
 800e1d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e1d4:	ed92 7b00 	vldr	d7, [r2]
 800e1d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800e1dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e1e0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e1e4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800e1e8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800e1ec:	486e      	ldr	r0, [pc, #440]	; (800e3a8 <_dtoa_r+0x640>)
 800e1ee:	1109      	asrs	r1, r1, #4
 800e1f0:	2400      	movs	r4, #0
 800e1f2:	2202      	movs	r2, #2
 800e1f4:	b939      	cbnz	r1, 800e206 <_dtoa_r+0x49e>
 800e1f6:	2c00      	cmp	r4, #0
 800e1f8:	f43f af60 	beq.w	800e0bc <_dtoa_r+0x354>
 800e1fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e200:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e204:	e75a      	b.n	800e0bc <_dtoa_r+0x354>
 800e206:	07cf      	lsls	r7, r1, #31
 800e208:	d509      	bpl.n	800e21e <_dtoa_r+0x4b6>
 800e20a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800e20e:	ed90 7b00 	vldr	d7, [r0]
 800e212:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e216:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800e21a:	3201      	adds	r2, #1
 800e21c:	2401      	movs	r4, #1
 800e21e:	1049      	asrs	r1, r1, #1
 800e220:	3008      	adds	r0, #8
 800e222:	e7e7      	b.n	800e1f4 <_dtoa_r+0x48c>
 800e224:	2202      	movs	r2, #2
 800e226:	e749      	b.n	800e0bc <_dtoa_r+0x354>
 800e228:	465f      	mov	r7, fp
 800e22a:	4648      	mov	r0, r9
 800e22c:	e765      	b.n	800e0fa <_dtoa_r+0x392>
 800e22e:	ec42 1b17 	vmov	d7, r1, r2
 800e232:	4a5c      	ldr	r2, [pc, #368]	; (800e3a4 <_dtoa_r+0x63c>)
 800e234:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e238:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e23c:	9a00      	ldr	r2, [sp, #0]
 800e23e:	1814      	adds	r4, r2, r0
 800e240:	9a08      	ldr	r2, [sp, #32]
 800e242:	b352      	cbz	r2, 800e29a <_dtoa_r+0x532>
 800e244:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e248:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e24c:	f8dd 8000 	ldr.w	r8, [sp]
 800e250:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e254:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e258:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e25c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e260:	ee14 2a90 	vmov	r2, s9
 800e264:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e268:	3230      	adds	r2, #48	; 0x30
 800e26a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e26e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e276:	f808 2b01 	strb.w	r2, [r8], #1
 800e27a:	d439      	bmi.n	800e2f0 <_dtoa_r+0x588>
 800e27c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e280:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e288:	d472      	bmi.n	800e370 <_dtoa_r+0x608>
 800e28a:	45a0      	cmp	r8, r4
 800e28c:	f43f af5d 	beq.w	800e14a <_dtoa_r+0x3e2>
 800e290:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e294:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e298:	e7e0      	b.n	800e25c <_dtoa_r+0x4f4>
 800e29a:	f8dd 8000 	ldr.w	r8, [sp]
 800e29e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e2a2:	4621      	mov	r1, r4
 800e2a4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e2a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e2ac:	ee14 2a90 	vmov	r2, s9
 800e2b0:	3230      	adds	r2, #48	; 0x30
 800e2b2:	f808 2b01 	strb.w	r2, [r8], #1
 800e2b6:	45a0      	cmp	r8, r4
 800e2b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e2bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e2c0:	d118      	bne.n	800e2f4 <_dtoa_r+0x58c>
 800e2c2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e2c6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e2ca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2d2:	dc4d      	bgt.n	800e370 <_dtoa_r+0x608>
 800e2d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e2d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2e0:	f57f af33 	bpl.w	800e14a <_dtoa_r+0x3e2>
 800e2e4:	4688      	mov	r8, r1
 800e2e6:	3901      	subs	r1, #1
 800e2e8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e2ec:	2b30      	cmp	r3, #48	; 0x30
 800e2ee:	d0f9      	beq.n	800e2e4 <_dtoa_r+0x57c>
 800e2f0:	46bb      	mov	fp, r7
 800e2f2:	e02a      	b.n	800e34a <_dtoa_r+0x5e2>
 800e2f4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e2f8:	e7d6      	b.n	800e2a8 <_dtoa_r+0x540>
 800e2fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e2fe:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e302:	f8dd 8000 	ldr.w	r8, [sp]
 800e306:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e30a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e30e:	ee15 3a10 	vmov	r3, s10
 800e312:	3330      	adds	r3, #48	; 0x30
 800e314:	f808 3b01 	strb.w	r3, [r8], #1
 800e318:	9b00      	ldr	r3, [sp, #0]
 800e31a:	eba8 0303 	sub.w	r3, r8, r3
 800e31e:	4599      	cmp	r9, r3
 800e320:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e324:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e328:	d133      	bne.n	800e392 <_dtoa_r+0x62a>
 800e32a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e32e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e336:	dc1a      	bgt.n	800e36e <_dtoa_r+0x606>
 800e338:	eeb4 7b46 	vcmp.f64	d7, d6
 800e33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e340:	d103      	bne.n	800e34a <_dtoa_r+0x5e2>
 800e342:	ee15 3a10 	vmov	r3, s10
 800e346:	07d9      	lsls	r1, r3, #31
 800e348:	d411      	bmi.n	800e36e <_dtoa_r+0x606>
 800e34a:	4629      	mov	r1, r5
 800e34c:	4630      	mov	r0, r6
 800e34e:	f000 fbe1 	bl	800eb14 <_Bfree>
 800e352:	2300      	movs	r3, #0
 800e354:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e356:	f888 3000 	strb.w	r3, [r8]
 800e35a:	f10b 0301 	add.w	r3, fp, #1
 800e35e:	6013      	str	r3, [r2, #0]
 800e360:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e362:	2b00      	cmp	r3, #0
 800e364:	f43f ad4d 	beq.w	800de02 <_dtoa_r+0x9a>
 800e368:	f8c3 8000 	str.w	r8, [r3]
 800e36c:	e549      	b.n	800de02 <_dtoa_r+0x9a>
 800e36e:	465f      	mov	r7, fp
 800e370:	4643      	mov	r3, r8
 800e372:	4698      	mov	r8, r3
 800e374:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e378:	2a39      	cmp	r2, #57	; 0x39
 800e37a:	d106      	bne.n	800e38a <_dtoa_r+0x622>
 800e37c:	9a00      	ldr	r2, [sp, #0]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d1f7      	bne.n	800e372 <_dtoa_r+0x60a>
 800e382:	9900      	ldr	r1, [sp, #0]
 800e384:	2230      	movs	r2, #48	; 0x30
 800e386:	3701      	adds	r7, #1
 800e388:	700a      	strb	r2, [r1, #0]
 800e38a:	781a      	ldrb	r2, [r3, #0]
 800e38c:	3201      	adds	r2, #1
 800e38e:	701a      	strb	r2, [r3, #0]
 800e390:	e7ae      	b.n	800e2f0 <_dtoa_r+0x588>
 800e392:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e396:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e39e:	d1b2      	bne.n	800e306 <_dtoa_r+0x59e>
 800e3a0:	e7d3      	b.n	800e34a <_dtoa_r+0x5e2>
 800e3a2:	bf00      	nop
 800e3a4:	080100d8 	.word	0x080100d8
 800e3a8:	080100b0 	.word	0x080100b0
 800e3ac:	9908      	ldr	r1, [sp, #32]
 800e3ae:	2900      	cmp	r1, #0
 800e3b0:	f000 80d1 	beq.w	800e556 <_dtoa_r+0x7ee>
 800e3b4:	9907      	ldr	r1, [sp, #28]
 800e3b6:	2901      	cmp	r1, #1
 800e3b8:	f300 80b4 	bgt.w	800e524 <_dtoa_r+0x7bc>
 800e3bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e3be:	2900      	cmp	r1, #0
 800e3c0:	f000 80ac 	beq.w	800e51c <_dtoa_r+0x7b4>
 800e3c4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e3c8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e3cc:	461c      	mov	r4, r3
 800e3ce:	930a      	str	r3, [sp, #40]	; 0x28
 800e3d0:	9b05      	ldr	r3, [sp, #20]
 800e3d2:	4413      	add	r3, r2
 800e3d4:	9305      	str	r3, [sp, #20]
 800e3d6:	9b06      	ldr	r3, [sp, #24]
 800e3d8:	2101      	movs	r1, #1
 800e3da:	4413      	add	r3, r2
 800e3dc:	4630      	mov	r0, r6
 800e3de:	9306      	str	r3, [sp, #24]
 800e3e0:	f000 fc54 	bl	800ec8c <__i2b>
 800e3e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3e6:	4607      	mov	r7, r0
 800e3e8:	f1b8 0f00 	cmp.w	r8, #0
 800e3ec:	dd0d      	ble.n	800e40a <_dtoa_r+0x6a2>
 800e3ee:	9a06      	ldr	r2, [sp, #24]
 800e3f0:	2a00      	cmp	r2, #0
 800e3f2:	dd0a      	ble.n	800e40a <_dtoa_r+0x6a2>
 800e3f4:	4542      	cmp	r2, r8
 800e3f6:	9905      	ldr	r1, [sp, #20]
 800e3f8:	bfa8      	it	ge
 800e3fa:	4642      	movge	r2, r8
 800e3fc:	1a89      	subs	r1, r1, r2
 800e3fe:	9105      	str	r1, [sp, #20]
 800e400:	9906      	ldr	r1, [sp, #24]
 800e402:	eba8 0802 	sub.w	r8, r8, r2
 800e406:	1a8a      	subs	r2, r1, r2
 800e408:	9206      	str	r2, [sp, #24]
 800e40a:	b303      	cbz	r3, 800e44e <_dtoa_r+0x6e6>
 800e40c:	9a08      	ldr	r2, [sp, #32]
 800e40e:	2a00      	cmp	r2, #0
 800e410:	f000 80a6 	beq.w	800e560 <_dtoa_r+0x7f8>
 800e414:	2c00      	cmp	r4, #0
 800e416:	dd13      	ble.n	800e440 <_dtoa_r+0x6d8>
 800e418:	4639      	mov	r1, r7
 800e41a:	4622      	mov	r2, r4
 800e41c:	4630      	mov	r0, r6
 800e41e:	930c      	str	r3, [sp, #48]	; 0x30
 800e420:	f000 fcf0 	bl	800ee04 <__pow5mult>
 800e424:	462a      	mov	r2, r5
 800e426:	4601      	mov	r1, r0
 800e428:	4607      	mov	r7, r0
 800e42a:	4630      	mov	r0, r6
 800e42c:	f000 fc44 	bl	800ecb8 <__multiply>
 800e430:	4629      	mov	r1, r5
 800e432:	900a      	str	r0, [sp, #40]	; 0x28
 800e434:	4630      	mov	r0, r6
 800e436:	f000 fb6d 	bl	800eb14 <_Bfree>
 800e43a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e43c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e43e:	4615      	mov	r5, r2
 800e440:	1b1a      	subs	r2, r3, r4
 800e442:	d004      	beq.n	800e44e <_dtoa_r+0x6e6>
 800e444:	4629      	mov	r1, r5
 800e446:	4630      	mov	r0, r6
 800e448:	f000 fcdc 	bl	800ee04 <__pow5mult>
 800e44c:	4605      	mov	r5, r0
 800e44e:	2101      	movs	r1, #1
 800e450:	4630      	mov	r0, r6
 800e452:	f000 fc1b 	bl	800ec8c <__i2b>
 800e456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e458:	2b00      	cmp	r3, #0
 800e45a:	4604      	mov	r4, r0
 800e45c:	f340 8082 	ble.w	800e564 <_dtoa_r+0x7fc>
 800e460:	461a      	mov	r2, r3
 800e462:	4601      	mov	r1, r0
 800e464:	4630      	mov	r0, r6
 800e466:	f000 fccd 	bl	800ee04 <__pow5mult>
 800e46a:	9b07      	ldr	r3, [sp, #28]
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	4604      	mov	r4, r0
 800e470:	dd7b      	ble.n	800e56a <_dtoa_r+0x802>
 800e472:	2300      	movs	r3, #0
 800e474:	930a      	str	r3, [sp, #40]	; 0x28
 800e476:	6922      	ldr	r2, [r4, #16]
 800e478:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e47c:	6910      	ldr	r0, [r2, #16]
 800e47e:	f000 fbb5 	bl	800ebec <__hi0bits>
 800e482:	f1c0 0020 	rsb	r0, r0, #32
 800e486:	9b06      	ldr	r3, [sp, #24]
 800e488:	4418      	add	r0, r3
 800e48a:	f010 001f 	ands.w	r0, r0, #31
 800e48e:	f000 808d 	beq.w	800e5ac <_dtoa_r+0x844>
 800e492:	f1c0 0220 	rsb	r2, r0, #32
 800e496:	2a04      	cmp	r2, #4
 800e498:	f340 8086 	ble.w	800e5a8 <_dtoa_r+0x840>
 800e49c:	f1c0 001c 	rsb	r0, r0, #28
 800e4a0:	9b05      	ldr	r3, [sp, #20]
 800e4a2:	4403      	add	r3, r0
 800e4a4:	9305      	str	r3, [sp, #20]
 800e4a6:	9b06      	ldr	r3, [sp, #24]
 800e4a8:	4403      	add	r3, r0
 800e4aa:	4480      	add	r8, r0
 800e4ac:	9306      	str	r3, [sp, #24]
 800e4ae:	9b05      	ldr	r3, [sp, #20]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	dd05      	ble.n	800e4c0 <_dtoa_r+0x758>
 800e4b4:	4629      	mov	r1, r5
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	4630      	mov	r0, r6
 800e4ba:	f000 fcfd 	bl	800eeb8 <__lshift>
 800e4be:	4605      	mov	r5, r0
 800e4c0:	9b06      	ldr	r3, [sp, #24]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	dd05      	ble.n	800e4d2 <_dtoa_r+0x76a>
 800e4c6:	4621      	mov	r1, r4
 800e4c8:	461a      	mov	r2, r3
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	f000 fcf4 	bl	800eeb8 <__lshift>
 800e4d0:	4604      	mov	r4, r0
 800e4d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d06b      	beq.n	800e5b0 <_dtoa_r+0x848>
 800e4d8:	4621      	mov	r1, r4
 800e4da:	4628      	mov	r0, r5
 800e4dc:	f000 fd58 	bl	800ef90 <__mcmp>
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	da65      	bge.n	800e5b0 <_dtoa_r+0x848>
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	4629      	mov	r1, r5
 800e4e8:	220a      	movs	r2, #10
 800e4ea:	4630      	mov	r0, r6
 800e4ec:	f000 fb34 	bl	800eb58 <__multadd>
 800e4f0:	9b08      	ldr	r3, [sp, #32]
 800e4f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e4f6:	4605      	mov	r5, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	f000 8192 	beq.w	800e822 <_dtoa_r+0xaba>
 800e4fe:	4639      	mov	r1, r7
 800e500:	2300      	movs	r3, #0
 800e502:	220a      	movs	r2, #10
 800e504:	4630      	mov	r0, r6
 800e506:	f000 fb27 	bl	800eb58 <__multadd>
 800e50a:	f1ba 0f00 	cmp.w	sl, #0
 800e50e:	4607      	mov	r7, r0
 800e510:	f300 808e 	bgt.w	800e630 <_dtoa_r+0x8c8>
 800e514:	9b07      	ldr	r3, [sp, #28]
 800e516:	2b02      	cmp	r3, #2
 800e518:	dc51      	bgt.n	800e5be <_dtoa_r+0x856>
 800e51a:	e089      	b.n	800e630 <_dtoa_r+0x8c8>
 800e51c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e51e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e522:	e751      	b.n	800e3c8 <_dtoa_r+0x660>
 800e524:	f109 34ff 	add.w	r4, r9, #4294967295
 800e528:	42a3      	cmp	r3, r4
 800e52a:	bfbf      	itttt	lt
 800e52c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800e52e:	1ae3      	sublt	r3, r4, r3
 800e530:	18d2      	addlt	r2, r2, r3
 800e532:	4613      	movlt	r3, r2
 800e534:	bfb7      	itett	lt
 800e536:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e538:	1b1c      	subge	r4, r3, r4
 800e53a:	4623      	movlt	r3, r4
 800e53c:	2400      	movlt	r4, #0
 800e53e:	f1b9 0f00 	cmp.w	r9, #0
 800e542:	bfb5      	itete	lt
 800e544:	9a05      	ldrlt	r2, [sp, #20]
 800e546:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800e54a:	eba2 0809 	sublt.w	r8, r2, r9
 800e54e:	464a      	movge	r2, r9
 800e550:	bfb8      	it	lt
 800e552:	2200      	movlt	r2, #0
 800e554:	e73b      	b.n	800e3ce <_dtoa_r+0x666>
 800e556:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e55a:	9f08      	ldr	r7, [sp, #32]
 800e55c:	461c      	mov	r4, r3
 800e55e:	e743      	b.n	800e3e8 <_dtoa_r+0x680>
 800e560:	461a      	mov	r2, r3
 800e562:	e76f      	b.n	800e444 <_dtoa_r+0x6dc>
 800e564:	9b07      	ldr	r3, [sp, #28]
 800e566:	2b01      	cmp	r3, #1
 800e568:	dc18      	bgt.n	800e59c <_dtoa_r+0x834>
 800e56a:	9b02      	ldr	r3, [sp, #8]
 800e56c:	b9b3      	cbnz	r3, 800e59c <_dtoa_r+0x834>
 800e56e:	9b03      	ldr	r3, [sp, #12]
 800e570:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e574:	b9a2      	cbnz	r2, 800e5a0 <_dtoa_r+0x838>
 800e576:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e57a:	0d12      	lsrs	r2, r2, #20
 800e57c:	0512      	lsls	r2, r2, #20
 800e57e:	b18a      	cbz	r2, 800e5a4 <_dtoa_r+0x83c>
 800e580:	9b05      	ldr	r3, [sp, #20]
 800e582:	3301      	adds	r3, #1
 800e584:	9305      	str	r3, [sp, #20]
 800e586:	9b06      	ldr	r3, [sp, #24]
 800e588:	3301      	adds	r3, #1
 800e58a:	9306      	str	r3, [sp, #24]
 800e58c:	2301      	movs	r3, #1
 800e58e:	930a      	str	r3, [sp, #40]	; 0x28
 800e590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e592:	2b00      	cmp	r3, #0
 800e594:	f47f af6f 	bne.w	800e476 <_dtoa_r+0x70e>
 800e598:	2001      	movs	r0, #1
 800e59a:	e774      	b.n	800e486 <_dtoa_r+0x71e>
 800e59c:	2300      	movs	r3, #0
 800e59e:	e7f6      	b.n	800e58e <_dtoa_r+0x826>
 800e5a0:	9b02      	ldr	r3, [sp, #8]
 800e5a2:	e7f4      	b.n	800e58e <_dtoa_r+0x826>
 800e5a4:	920a      	str	r2, [sp, #40]	; 0x28
 800e5a6:	e7f3      	b.n	800e590 <_dtoa_r+0x828>
 800e5a8:	d081      	beq.n	800e4ae <_dtoa_r+0x746>
 800e5aa:	4610      	mov	r0, r2
 800e5ac:	301c      	adds	r0, #28
 800e5ae:	e777      	b.n	800e4a0 <_dtoa_r+0x738>
 800e5b0:	f1b9 0f00 	cmp.w	r9, #0
 800e5b4:	dc37      	bgt.n	800e626 <_dtoa_r+0x8be>
 800e5b6:	9b07      	ldr	r3, [sp, #28]
 800e5b8:	2b02      	cmp	r3, #2
 800e5ba:	dd34      	ble.n	800e626 <_dtoa_r+0x8be>
 800e5bc:	46ca      	mov	sl, r9
 800e5be:	f1ba 0f00 	cmp.w	sl, #0
 800e5c2:	d10d      	bne.n	800e5e0 <_dtoa_r+0x878>
 800e5c4:	4621      	mov	r1, r4
 800e5c6:	4653      	mov	r3, sl
 800e5c8:	2205      	movs	r2, #5
 800e5ca:	4630      	mov	r0, r6
 800e5cc:	f000 fac4 	bl	800eb58 <__multadd>
 800e5d0:	4601      	mov	r1, r0
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	4628      	mov	r0, r5
 800e5d6:	f000 fcdb 	bl	800ef90 <__mcmp>
 800e5da:	2800      	cmp	r0, #0
 800e5dc:	f73f adde 	bgt.w	800e19c <_dtoa_r+0x434>
 800e5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5e2:	f8dd 8000 	ldr.w	r8, [sp]
 800e5e6:	ea6f 0b03 	mvn.w	fp, r3
 800e5ea:	f04f 0900 	mov.w	r9, #0
 800e5ee:	4621      	mov	r1, r4
 800e5f0:	4630      	mov	r0, r6
 800e5f2:	f000 fa8f 	bl	800eb14 <_Bfree>
 800e5f6:	2f00      	cmp	r7, #0
 800e5f8:	f43f aea7 	beq.w	800e34a <_dtoa_r+0x5e2>
 800e5fc:	f1b9 0f00 	cmp.w	r9, #0
 800e600:	d005      	beq.n	800e60e <_dtoa_r+0x8a6>
 800e602:	45b9      	cmp	r9, r7
 800e604:	d003      	beq.n	800e60e <_dtoa_r+0x8a6>
 800e606:	4649      	mov	r1, r9
 800e608:	4630      	mov	r0, r6
 800e60a:	f000 fa83 	bl	800eb14 <_Bfree>
 800e60e:	4639      	mov	r1, r7
 800e610:	4630      	mov	r0, r6
 800e612:	f000 fa7f 	bl	800eb14 <_Bfree>
 800e616:	e698      	b.n	800e34a <_dtoa_r+0x5e2>
 800e618:	2400      	movs	r4, #0
 800e61a:	4627      	mov	r7, r4
 800e61c:	e7e0      	b.n	800e5e0 <_dtoa_r+0x878>
 800e61e:	46bb      	mov	fp, r7
 800e620:	4604      	mov	r4, r0
 800e622:	4607      	mov	r7, r0
 800e624:	e5ba      	b.n	800e19c <_dtoa_r+0x434>
 800e626:	9b08      	ldr	r3, [sp, #32]
 800e628:	46ca      	mov	sl, r9
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	f000 8100 	beq.w	800e830 <_dtoa_r+0xac8>
 800e630:	f1b8 0f00 	cmp.w	r8, #0
 800e634:	dd05      	ble.n	800e642 <_dtoa_r+0x8da>
 800e636:	4639      	mov	r1, r7
 800e638:	4642      	mov	r2, r8
 800e63a:	4630      	mov	r0, r6
 800e63c:	f000 fc3c 	bl	800eeb8 <__lshift>
 800e640:	4607      	mov	r7, r0
 800e642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e644:	2b00      	cmp	r3, #0
 800e646:	d05d      	beq.n	800e704 <_dtoa_r+0x99c>
 800e648:	6879      	ldr	r1, [r7, #4]
 800e64a:	4630      	mov	r0, r6
 800e64c:	f000 fa22 	bl	800ea94 <_Balloc>
 800e650:	4680      	mov	r8, r0
 800e652:	b928      	cbnz	r0, 800e660 <_dtoa_r+0x8f8>
 800e654:	4b82      	ldr	r3, [pc, #520]	; (800e860 <_dtoa_r+0xaf8>)
 800e656:	4602      	mov	r2, r0
 800e658:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e65c:	f7ff bb9a 	b.w	800dd94 <_dtoa_r+0x2c>
 800e660:	693a      	ldr	r2, [r7, #16]
 800e662:	3202      	adds	r2, #2
 800e664:	0092      	lsls	r2, r2, #2
 800e666:	f107 010c 	add.w	r1, r7, #12
 800e66a:	300c      	adds	r0, #12
 800e66c:	f000 fa04 	bl	800ea78 <memcpy>
 800e670:	2201      	movs	r2, #1
 800e672:	4641      	mov	r1, r8
 800e674:	4630      	mov	r0, r6
 800e676:	f000 fc1f 	bl	800eeb8 <__lshift>
 800e67a:	9b00      	ldr	r3, [sp, #0]
 800e67c:	3301      	adds	r3, #1
 800e67e:	9305      	str	r3, [sp, #20]
 800e680:	9b00      	ldr	r3, [sp, #0]
 800e682:	4453      	add	r3, sl
 800e684:	9309      	str	r3, [sp, #36]	; 0x24
 800e686:	9b02      	ldr	r3, [sp, #8]
 800e688:	f003 0301 	and.w	r3, r3, #1
 800e68c:	46b9      	mov	r9, r7
 800e68e:	9308      	str	r3, [sp, #32]
 800e690:	4607      	mov	r7, r0
 800e692:	9b05      	ldr	r3, [sp, #20]
 800e694:	4621      	mov	r1, r4
 800e696:	3b01      	subs	r3, #1
 800e698:	4628      	mov	r0, r5
 800e69a:	9302      	str	r3, [sp, #8]
 800e69c:	f7ff fad6 	bl	800dc4c <quorem>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	3330      	adds	r3, #48	; 0x30
 800e6a4:	9006      	str	r0, [sp, #24]
 800e6a6:	4649      	mov	r1, r9
 800e6a8:	4628      	mov	r0, r5
 800e6aa:	930a      	str	r3, [sp, #40]	; 0x28
 800e6ac:	f000 fc70 	bl	800ef90 <__mcmp>
 800e6b0:	463a      	mov	r2, r7
 800e6b2:	4682      	mov	sl, r0
 800e6b4:	4621      	mov	r1, r4
 800e6b6:	4630      	mov	r0, r6
 800e6b8:	f000 fc86 	bl	800efc8 <__mdiff>
 800e6bc:	68c2      	ldr	r2, [r0, #12]
 800e6be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6c0:	4680      	mov	r8, r0
 800e6c2:	bb0a      	cbnz	r2, 800e708 <_dtoa_r+0x9a0>
 800e6c4:	4601      	mov	r1, r0
 800e6c6:	4628      	mov	r0, r5
 800e6c8:	f000 fc62 	bl	800ef90 <__mcmp>
 800e6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	4641      	mov	r1, r8
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	920e      	str	r2, [sp, #56]	; 0x38
 800e6d6:	930a      	str	r3, [sp, #40]	; 0x28
 800e6d8:	f000 fa1c 	bl	800eb14 <_Bfree>
 800e6dc:	9b07      	ldr	r3, [sp, #28]
 800e6de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e6e4:	ea43 0102 	orr.w	r1, r3, r2
 800e6e8:	9b08      	ldr	r3, [sp, #32]
 800e6ea:	430b      	orrs	r3, r1
 800e6ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6ee:	d10d      	bne.n	800e70c <_dtoa_r+0x9a4>
 800e6f0:	2b39      	cmp	r3, #57	; 0x39
 800e6f2:	d029      	beq.n	800e748 <_dtoa_r+0x9e0>
 800e6f4:	f1ba 0f00 	cmp.w	sl, #0
 800e6f8:	dd01      	ble.n	800e6fe <_dtoa_r+0x996>
 800e6fa:	9b06      	ldr	r3, [sp, #24]
 800e6fc:	3331      	adds	r3, #49	; 0x31
 800e6fe:	9a02      	ldr	r2, [sp, #8]
 800e700:	7013      	strb	r3, [r2, #0]
 800e702:	e774      	b.n	800e5ee <_dtoa_r+0x886>
 800e704:	4638      	mov	r0, r7
 800e706:	e7b8      	b.n	800e67a <_dtoa_r+0x912>
 800e708:	2201      	movs	r2, #1
 800e70a:	e7e1      	b.n	800e6d0 <_dtoa_r+0x968>
 800e70c:	f1ba 0f00 	cmp.w	sl, #0
 800e710:	db06      	blt.n	800e720 <_dtoa_r+0x9b8>
 800e712:	9907      	ldr	r1, [sp, #28]
 800e714:	ea41 0a0a 	orr.w	sl, r1, sl
 800e718:	9908      	ldr	r1, [sp, #32]
 800e71a:	ea5a 0101 	orrs.w	r1, sl, r1
 800e71e:	d120      	bne.n	800e762 <_dtoa_r+0x9fa>
 800e720:	2a00      	cmp	r2, #0
 800e722:	ddec      	ble.n	800e6fe <_dtoa_r+0x996>
 800e724:	4629      	mov	r1, r5
 800e726:	2201      	movs	r2, #1
 800e728:	4630      	mov	r0, r6
 800e72a:	9305      	str	r3, [sp, #20]
 800e72c:	f000 fbc4 	bl	800eeb8 <__lshift>
 800e730:	4621      	mov	r1, r4
 800e732:	4605      	mov	r5, r0
 800e734:	f000 fc2c 	bl	800ef90 <__mcmp>
 800e738:	2800      	cmp	r0, #0
 800e73a:	9b05      	ldr	r3, [sp, #20]
 800e73c:	dc02      	bgt.n	800e744 <_dtoa_r+0x9dc>
 800e73e:	d1de      	bne.n	800e6fe <_dtoa_r+0x996>
 800e740:	07da      	lsls	r2, r3, #31
 800e742:	d5dc      	bpl.n	800e6fe <_dtoa_r+0x996>
 800e744:	2b39      	cmp	r3, #57	; 0x39
 800e746:	d1d8      	bne.n	800e6fa <_dtoa_r+0x992>
 800e748:	9a02      	ldr	r2, [sp, #8]
 800e74a:	2339      	movs	r3, #57	; 0x39
 800e74c:	7013      	strb	r3, [r2, #0]
 800e74e:	4643      	mov	r3, r8
 800e750:	4698      	mov	r8, r3
 800e752:	3b01      	subs	r3, #1
 800e754:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e758:	2a39      	cmp	r2, #57	; 0x39
 800e75a:	d051      	beq.n	800e800 <_dtoa_r+0xa98>
 800e75c:	3201      	adds	r2, #1
 800e75e:	701a      	strb	r2, [r3, #0]
 800e760:	e745      	b.n	800e5ee <_dtoa_r+0x886>
 800e762:	2a00      	cmp	r2, #0
 800e764:	dd03      	ble.n	800e76e <_dtoa_r+0xa06>
 800e766:	2b39      	cmp	r3, #57	; 0x39
 800e768:	d0ee      	beq.n	800e748 <_dtoa_r+0x9e0>
 800e76a:	3301      	adds	r3, #1
 800e76c:	e7c7      	b.n	800e6fe <_dtoa_r+0x996>
 800e76e:	9a05      	ldr	r2, [sp, #20]
 800e770:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e772:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e776:	428a      	cmp	r2, r1
 800e778:	d02b      	beq.n	800e7d2 <_dtoa_r+0xa6a>
 800e77a:	4629      	mov	r1, r5
 800e77c:	2300      	movs	r3, #0
 800e77e:	220a      	movs	r2, #10
 800e780:	4630      	mov	r0, r6
 800e782:	f000 f9e9 	bl	800eb58 <__multadd>
 800e786:	45b9      	cmp	r9, r7
 800e788:	4605      	mov	r5, r0
 800e78a:	f04f 0300 	mov.w	r3, #0
 800e78e:	f04f 020a 	mov.w	r2, #10
 800e792:	4649      	mov	r1, r9
 800e794:	4630      	mov	r0, r6
 800e796:	d107      	bne.n	800e7a8 <_dtoa_r+0xa40>
 800e798:	f000 f9de 	bl	800eb58 <__multadd>
 800e79c:	4681      	mov	r9, r0
 800e79e:	4607      	mov	r7, r0
 800e7a0:	9b05      	ldr	r3, [sp, #20]
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	9305      	str	r3, [sp, #20]
 800e7a6:	e774      	b.n	800e692 <_dtoa_r+0x92a>
 800e7a8:	f000 f9d6 	bl	800eb58 <__multadd>
 800e7ac:	4639      	mov	r1, r7
 800e7ae:	4681      	mov	r9, r0
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	220a      	movs	r2, #10
 800e7b4:	4630      	mov	r0, r6
 800e7b6:	f000 f9cf 	bl	800eb58 <__multadd>
 800e7ba:	4607      	mov	r7, r0
 800e7bc:	e7f0      	b.n	800e7a0 <_dtoa_r+0xa38>
 800e7be:	f1ba 0f00 	cmp.w	sl, #0
 800e7c2:	9a00      	ldr	r2, [sp, #0]
 800e7c4:	bfcc      	ite	gt
 800e7c6:	46d0      	movgt	r8, sl
 800e7c8:	f04f 0801 	movle.w	r8, #1
 800e7cc:	4490      	add	r8, r2
 800e7ce:	f04f 0900 	mov.w	r9, #0
 800e7d2:	4629      	mov	r1, r5
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	4630      	mov	r0, r6
 800e7d8:	9302      	str	r3, [sp, #8]
 800e7da:	f000 fb6d 	bl	800eeb8 <__lshift>
 800e7de:	4621      	mov	r1, r4
 800e7e0:	4605      	mov	r5, r0
 800e7e2:	f000 fbd5 	bl	800ef90 <__mcmp>
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	dcb1      	bgt.n	800e74e <_dtoa_r+0x9e6>
 800e7ea:	d102      	bne.n	800e7f2 <_dtoa_r+0xa8a>
 800e7ec:	9b02      	ldr	r3, [sp, #8]
 800e7ee:	07db      	lsls	r3, r3, #31
 800e7f0:	d4ad      	bmi.n	800e74e <_dtoa_r+0x9e6>
 800e7f2:	4643      	mov	r3, r8
 800e7f4:	4698      	mov	r8, r3
 800e7f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7fa:	2a30      	cmp	r2, #48	; 0x30
 800e7fc:	d0fa      	beq.n	800e7f4 <_dtoa_r+0xa8c>
 800e7fe:	e6f6      	b.n	800e5ee <_dtoa_r+0x886>
 800e800:	9a00      	ldr	r2, [sp, #0]
 800e802:	429a      	cmp	r2, r3
 800e804:	d1a4      	bne.n	800e750 <_dtoa_r+0x9e8>
 800e806:	f10b 0b01 	add.w	fp, fp, #1
 800e80a:	2331      	movs	r3, #49	; 0x31
 800e80c:	e778      	b.n	800e700 <_dtoa_r+0x998>
 800e80e:	4b15      	ldr	r3, [pc, #84]	; (800e864 <_dtoa_r+0xafc>)
 800e810:	f7ff bb12 	b.w	800de38 <_dtoa_r+0xd0>
 800e814:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e816:	2b00      	cmp	r3, #0
 800e818:	f47f aaee 	bne.w	800ddf8 <_dtoa_r+0x90>
 800e81c:	4b12      	ldr	r3, [pc, #72]	; (800e868 <_dtoa_r+0xb00>)
 800e81e:	f7ff bb0b 	b.w	800de38 <_dtoa_r+0xd0>
 800e822:	f1ba 0f00 	cmp.w	sl, #0
 800e826:	dc03      	bgt.n	800e830 <_dtoa_r+0xac8>
 800e828:	9b07      	ldr	r3, [sp, #28]
 800e82a:	2b02      	cmp	r3, #2
 800e82c:	f73f aec7 	bgt.w	800e5be <_dtoa_r+0x856>
 800e830:	f8dd 8000 	ldr.w	r8, [sp]
 800e834:	4621      	mov	r1, r4
 800e836:	4628      	mov	r0, r5
 800e838:	f7ff fa08 	bl	800dc4c <quorem>
 800e83c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e840:	f808 3b01 	strb.w	r3, [r8], #1
 800e844:	9a00      	ldr	r2, [sp, #0]
 800e846:	eba8 0202 	sub.w	r2, r8, r2
 800e84a:	4592      	cmp	sl, r2
 800e84c:	ddb7      	ble.n	800e7be <_dtoa_r+0xa56>
 800e84e:	4629      	mov	r1, r5
 800e850:	2300      	movs	r3, #0
 800e852:	220a      	movs	r2, #10
 800e854:	4630      	mov	r0, r6
 800e856:	f000 f97f 	bl	800eb58 <__multadd>
 800e85a:	4605      	mov	r5, r0
 800e85c:	e7ea      	b.n	800e834 <_dtoa_r+0xacc>
 800e85e:	bf00      	nop
 800e860:	0800ffdb 	.word	0x0800ffdb
 800e864:	0800ff34 	.word	0x0800ff34
 800e868:	0800ff58 	.word	0x0800ff58

0800e86c <std>:
 800e86c:	2300      	movs	r3, #0
 800e86e:	b510      	push	{r4, lr}
 800e870:	4604      	mov	r4, r0
 800e872:	e9c0 3300 	strd	r3, r3, [r0]
 800e876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e87a:	6083      	str	r3, [r0, #8]
 800e87c:	8181      	strh	r1, [r0, #12]
 800e87e:	6643      	str	r3, [r0, #100]	; 0x64
 800e880:	81c2      	strh	r2, [r0, #14]
 800e882:	6183      	str	r3, [r0, #24]
 800e884:	4619      	mov	r1, r3
 800e886:	2208      	movs	r2, #8
 800e888:	305c      	adds	r0, #92	; 0x5c
 800e88a:	f7fe fd7d 	bl	800d388 <memset>
 800e88e:	4b05      	ldr	r3, [pc, #20]	; (800e8a4 <std+0x38>)
 800e890:	6263      	str	r3, [r4, #36]	; 0x24
 800e892:	4b05      	ldr	r3, [pc, #20]	; (800e8a8 <std+0x3c>)
 800e894:	62a3      	str	r3, [r4, #40]	; 0x28
 800e896:	4b05      	ldr	r3, [pc, #20]	; (800e8ac <std+0x40>)
 800e898:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e89a:	4b05      	ldr	r3, [pc, #20]	; (800e8b0 <std+0x44>)
 800e89c:	6224      	str	r4, [r4, #32]
 800e89e:	6323      	str	r3, [r4, #48]	; 0x30
 800e8a0:	bd10      	pop	{r4, pc}
 800e8a2:	bf00      	nop
 800e8a4:	0800f5d9 	.word	0x0800f5d9
 800e8a8:	0800f5fb 	.word	0x0800f5fb
 800e8ac:	0800f633 	.word	0x0800f633
 800e8b0:	0800f657 	.word	0x0800f657

0800e8b4 <_cleanup_r>:
 800e8b4:	4901      	ldr	r1, [pc, #4]	; (800e8bc <_cleanup_r+0x8>)
 800e8b6:	f000 b8af 	b.w	800ea18 <_fwalk_reent>
 800e8ba:	bf00      	nop
 800e8bc:	0800f96d 	.word	0x0800f96d

0800e8c0 <__sfmoreglue>:
 800e8c0:	b570      	push	{r4, r5, r6, lr}
 800e8c2:	1e4a      	subs	r2, r1, #1
 800e8c4:	2568      	movs	r5, #104	; 0x68
 800e8c6:	4355      	muls	r5, r2
 800e8c8:	460e      	mov	r6, r1
 800e8ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e8ce:	f000 fcbf 	bl	800f250 <_malloc_r>
 800e8d2:	4604      	mov	r4, r0
 800e8d4:	b140      	cbz	r0, 800e8e8 <__sfmoreglue+0x28>
 800e8d6:	2100      	movs	r1, #0
 800e8d8:	e9c0 1600 	strd	r1, r6, [r0]
 800e8dc:	300c      	adds	r0, #12
 800e8de:	60a0      	str	r0, [r4, #8]
 800e8e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e8e4:	f7fe fd50 	bl	800d388 <memset>
 800e8e8:	4620      	mov	r0, r4
 800e8ea:	bd70      	pop	{r4, r5, r6, pc}

0800e8ec <__sfp_lock_acquire>:
 800e8ec:	4801      	ldr	r0, [pc, #4]	; (800e8f4 <__sfp_lock_acquire+0x8>)
 800e8ee:	f000 b8b8 	b.w	800ea62 <__retarget_lock_acquire_recursive>
 800e8f2:	bf00      	nop
 800e8f4:	20000b04 	.word	0x20000b04

0800e8f8 <__sfp_lock_release>:
 800e8f8:	4801      	ldr	r0, [pc, #4]	; (800e900 <__sfp_lock_release+0x8>)
 800e8fa:	f000 b8b3 	b.w	800ea64 <__retarget_lock_release_recursive>
 800e8fe:	bf00      	nop
 800e900:	20000b04 	.word	0x20000b04

0800e904 <__sinit_lock_acquire>:
 800e904:	4801      	ldr	r0, [pc, #4]	; (800e90c <__sinit_lock_acquire+0x8>)
 800e906:	f000 b8ac 	b.w	800ea62 <__retarget_lock_acquire_recursive>
 800e90a:	bf00      	nop
 800e90c:	20000aff 	.word	0x20000aff

0800e910 <__sinit_lock_release>:
 800e910:	4801      	ldr	r0, [pc, #4]	; (800e918 <__sinit_lock_release+0x8>)
 800e912:	f000 b8a7 	b.w	800ea64 <__retarget_lock_release_recursive>
 800e916:	bf00      	nop
 800e918:	20000aff 	.word	0x20000aff

0800e91c <__sinit>:
 800e91c:	b510      	push	{r4, lr}
 800e91e:	4604      	mov	r4, r0
 800e920:	f7ff fff0 	bl	800e904 <__sinit_lock_acquire>
 800e924:	69a3      	ldr	r3, [r4, #24]
 800e926:	b11b      	cbz	r3, 800e930 <__sinit+0x14>
 800e928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e92c:	f7ff bff0 	b.w	800e910 <__sinit_lock_release>
 800e930:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e934:	6523      	str	r3, [r4, #80]	; 0x50
 800e936:	4b13      	ldr	r3, [pc, #76]	; (800e984 <__sinit+0x68>)
 800e938:	4a13      	ldr	r2, [pc, #76]	; (800e988 <__sinit+0x6c>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e93e:	42a3      	cmp	r3, r4
 800e940:	bf04      	itt	eq
 800e942:	2301      	moveq	r3, #1
 800e944:	61a3      	streq	r3, [r4, #24]
 800e946:	4620      	mov	r0, r4
 800e948:	f000 f820 	bl	800e98c <__sfp>
 800e94c:	6060      	str	r0, [r4, #4]
 800e94e:	4620      	mov	r0, r4
 800e950:	f000 f81c 	bl	800e98c <__sfp>
 800e954:	60a0      	str	r0, [r4, #8]
 800e956:	4620      	mov	r0, r4
 800e958:	f000 f818 	bl	800e98c <__sfp>
 800e95c:	2200      	movs	r2, #0
 800e95e:	60e0      	str	r0, [r4, #12]
 800e960:	2104      	movs	r1, #4
 800e962:	6860      	ldr	r0, [r4, #4]
 800e964:	f7ff ff82 	bl	800e86c <std>
 800e968:	68a0      	ldr	r0, [r4, #8]
 800e96a:	2201      	movs	r2, #1
 800e96c:	2109      	movs	r1, #9
 800e96e:	f7ff ff7d 	bl	800e86c <std>
 800e972:	68e0      	ldr	r0, [r4, #12]
 800e974:	2202      	movs	r2, #2
 800e976:	2112      	movs	r1, #18
 800e978:	f7ff ff78 	bl	800e86c <std>
 800e97c:	2301      	movs	r3, #1
 800e97e:	61a3      	str	r3, [r4, #24]
 800e980:	e7d2      	b.n	800e928 <__sinit+0xc>
 800e982:	bf00      	nop
 800e984:	0800ff20 	.word	0x0800ff20
 800e988:	0800e8b5 	.word	0x0800e8b5

0800e98c <__sfp>:
 800e98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e98e:	4607      	mov	r7, r0
 800e990:	f7ff ffac 	bl	800e8ec <__sfp_lock_acquire>
 800e994:	4b1e      	ldr	r3, [pc, #120]	; (800ea10 <__sfp+0x84>)
 800e996:	681e      	ldr	r6, [r3, #0]
 800e998:	69b3      	ldr	r3, [r6, #24]
 800e99a:	b913      	cbnz	r3, 800e9a2 <__sfp+0x16>
 800e99c:	4630      	mov	r0, r6
 800e99e:	f7ff ffbd 	bl	800e91c <__sinit>
 800e9a2:	3648      	adds	r6, #72	; 0x48
 800e9a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e9a8:	3b01      	subs	r3, #1
 800e9aa:	d503      	bpl.n	800e9b4 <__sfp+0x28>
 800e9ac:	6833      	ldr	r3, [r6, #0]
 800e9ae:	b30b      	cbz	r3, 800e9f4 <__sfp+0x68>
 800e9b0:	6836      	ldr	r6, [r6, #0]
 800e9b2:	e7f7      	b.n	800e9a4 <__sfp+0x18>
 800e9b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e9b8:	b9d5      	cbnz	r5, 800e9f0 <__sfp+0x64>
 800e9ba:	4b16      	ldr	r3, [pc, #88]	; (800ea14 <__sfp+0x88>)
 800e9bc:	60e3      	str	r3, [r4, #12]
 800e9be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e9c2:	6665      	str	r5, [r4, #100]	; 0x64
 800e9c4:	f000 f84c 	bl	800ea60 <__retarget_lock_init_recursive>
 800e9c8:	f7ff ff96 	bl	800e8f8 <__sfp_lock_release>
 800e9cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e9d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e9d4:	6025      	str	r5, [r4, #0]
 800e9d6:	61a5      	str	r5, [r4, #24]
 800e9d8:	2208      	movs	r2, #8
 800e9da:	4629      	mov	r1, r5
 800e9dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e9e0:	f7fe fcd2 	bl	800d388 <memset>
 800e9e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e9e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9f0:	3468      	adds	r4, #104	; 0x68
 800e9f2:	e7d9      	b.n	800e9a8 <__sfp+0x1c>
 800e9f4:	2104      	movs	r1, #4
 800e9f6:	4638      	mov	r0, r7
 800e9f8:	f7ff ff62 	bl	800e8c0 <__sfmoreglue>
 800e9fc:	4604      	mov	r4, r0
 800e9fe:	6030      	str	r0, [r6, #0]
 800ea00:	2800      	cmp	r0, #0
 800ea02:	d1d5      	bne.n	800e9b0 <__sfp+0x24>
 800ea04:	f7ff ff78 	bl	800e8f8 <__sfp_lock_release>
 800ea08:	230c      	movs	r3, #12
 800ea0a:	603b      	str	r3, [r7, #0]
 800ea0c:	e7ee      	b.n	800e9ec <__sfp+0x60>
 800ea0e:	bf00      	nop
 800ea10:	0800ff20 	.word	0x0800ff20
 800ea14:	ffff0001 	.word	0xffff0001

0800ea18 <_fwalk_reent>:
 800ea18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea1c:	4606      	mov	r6, r0
 800ea1e:	4688      	mov	r8, r1
 800ea20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ea24:	2700      	movs	r7, #0
 800ea26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea2a:	f1b9 0901 	subs.w	r9, r9, #1
 800ea2e:	d505      	bpl.n	800ea3c <_fwalk_reent+0x24>
 800ea30:	6824      	ldr	r4, [r4, #0]
 800ea32:	2c00      	cmp	r4, #0
 800ea34:	d1f7      	bne.n	800ea26 <_fwalk_reent+0xe>
 800ea36:	4638      	mov	r0, r7
 800ea38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea3c:	89ab      	ldrh	r3, [r5, #12]
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d907      	bls.n	800ea52 <_fwalk_reent+0x3a>
 800ea42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea46:	3301      	adds	r3, #1
 800ea48:	d003      	beq.n	800ea52 <_fwalk_reent+0x3a>
 800ea4a:	4629      	mov	r1, r5
 800ea4c:	4630      	mov	r0, r6
 800ea4e:	47c0      	blx	r8
 800ea50:	4307      	orrs	r7, r0
 800ea52:	3568      	adds	r5, #104	; 0x68
 800ea54:	e7e9      	b.n	800ea2a <_fwalk_reent+0x12>
	...

0800ea58 <_localeconv_r>:
 800ea58:	4800      	ldr	r0, [pc, #0]	; (800ea5c <_localeconv_r+0x4>)
 800ea5a:	4770      	bx	lr
 800ea5c:	2000016c 	.word	0x2000016c

0800ea60 <__retarget_lock_init_recursive>:
 800ea60:	4770      	bx	lr

0800ea62 <__retarget_lock_acquire_recursive>:
 800ea62:	4770      	bx	lr

0800ea64 <__retarget_lock_release_recursive>:
 800ea64:	4770      	bx	lr
	...

0800ea68 <malloc>:
 800ea68:	4b02      	ldr	r3, [pc, #8]	; (800ea74 <malloc+0xc>)
 800ea6a:	4601      	mov	r1, r0
 800ea6c:	6818      	ldr	r0, [r3, #0]
 800ea6e:	f000 bbef 	b.w	800f250 <_malloc_r>
 800ea72:	bf00      	nop
 800ea74:	20000018 	.word	0x20000018

0800ea78 <memcpy>:
 800ea78:	440a      	add	r2, r1
 800ea7a:	4291      	cmp	r1, r2
 800ea7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea80:	d100      	bne.n	800ea84 <memcpy+0xc>
 800ea82:	4770      	bx	lr
 800ea84:	b510      	push	{r4, lr}
 800ea86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea8e:	4291      	cmp	r1, r2
 800ea90:	d1f9      	bne.n	800ea86 <memcpy+0xe>
 800ea92:	bd10      	pop	{r4, pc}

0800ea94 <_Balloc>:
 800ea94:	b570      	push	{r4, r5, r6, lr}
 800ea96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ea98:	4604      	mov	r4, r0
 800ea9a:	460d      	mov	r5, r1
 800ea9c:	b976      	cbnz	r6, 800eabc <_Balloc+0x28>
 800ea9e:	2010      	movs	r0, #16
 800eaa0:	f7ff ffe2 	bl	800ea68 <malloc>
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	6260      	str	r0, [r4, #36]	; 0x24
 800eaa8:	b920      	cbnz	r0, 800eab4 <_Balloc+0x20>
 800eaaa:	4b18      	ldr	r3, [pc, #96]	; (800eb0c <_Balloc+0x78>)
 800eaac:	4818      	ldr	r0, [pc, #96]	; (800eb10 <_Balloc+0x7c>)
 800eaae:	2166      	movs	r1, #102	; 0x66
 800eab0:	f000 fea8 	bl	800f804 <__assert_func>
 800eab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eab8:	6006      	str	r6, [r0, #0]
 800eaba:	60c6      	str	r6, [r0, #12]
 800eabc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eabe:	68f3      	ldr	r3, [r6, #12]
 800eac0:	b183      	cbz	r3, 800eae4 <_Balloc+0x50>
 800eac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eac4:	68db      	ldr	r3, [r3, #12]
 800eac6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eaca:	b9b8      	cbnz	r0, 800eafc <_Balloc+0x68>
 800eacc:	2101      	movs	r1, #1
 800eace:	fa01 f605 	lsl.w	r6, r1, r5
 800ead2:	1d72      	adds	r2, r6, #5
 800ead4:	0092      	lsls	r2, r2, #2
 800ead6:	4620      	mov	r0, r4
 800ead8:	f000 fb5a 	bl	800f190 <_calloc_r>
 800eadc:	b160      	cbz	r0, 800eaf8 <_Balloc+0x64>
 800eade:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eae2:	e00e      	b.n	800eb02 <_Balloc+0x6e>
 800eae4:	2221      	movs	r2, #33	; 0x21
 800eae6:	2104      	movs	r1, #4
 800eae8:	4620      	mov	r0, r4
 800eaea:	f000 fb51 	bl	800f190 <_calloc_r>
 800eaee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eaf0:	60f0      	str	r0, [r6, #12]
 800eaf2:	68db      	ldr	r3, [r3, #12]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d1e4      	bne.n	800eac2 <_Balloc+0x2e>
 800eaf8:	2000      	movs	r0, #0
 800eafa:	bd70      	pop	{r4, r5, r6, pc}
 800eafc:	6802      	ldr	r2, [r0, #0]
 800eafe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eb02:	2300      	movs	r3, #0
 800eb04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb08:	e7f7      	b.n	800eafa <_Balloc+0x66>
 800eb0a:	bf00      	nop
 800eb0c:	0800ff65 	.word	0x0800ff65
 800eb10:	0801004c 	.word	0x0801004c

0800eb14 <_Bfree>:
 800eb14:	b570      	push	{r4, r5, r6, lr}
 800eb16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eb18:	4605      	mov	r5, r0
 800eb1a:	460c      	mov	r4, r1
 800eb1c:	b976      	cbnz	r6, 800eb3c <_Bfree+0x28>
 800eb1e:	2010      	movs	r0, #16
 800eb20:	f7ff ffa2 	bl	800ea68 <malloc>
 800eb24:	4602      	mov	r2, r0
 800eb26:	6268      	str	r0, [r5, #36]	; 0x24
 800eb28:	b920      	cbnz	r0, 800eb34 <_Bfree+0x20>
 800eb2a:	4b09      	ldr	r3, [pc, #36]	; (800eb50 <_Bfree+0x3c>)
 800eb2c:	4809      	ldr	r0, [pc, #36]	; (800eb54 <_Bfree+0x40>)
 800eb2e:	218a      	movs	r1, #138	; 0x8a
 800eb30:	f000 fe68 	bl	800f804 <__assert_func>
 800eb34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb38:	6006      	str	r6, [r0, #0]
 800eb3a:	60c6      	str	r6, [r0, #12]
 800eb3c:	b13c      	cbz	r4, 800eb4e <_Bfree+0x3a>
 800eb3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eb40:	6862      	ldr	r2, [r4, #4]
 800eb42:	68db      	ldr	r3, [r3, #12]
 800eb44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb48:	6021      	str	r1, [r4, #0]
 800eb4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb4e:	bd70      	pop	{r4, r5, r6, pc}
 800eb50:	0800ff65 	.word	0x0800ff65
 800eb54:	0801004c 	.word	0x0801004c

0800eb58 <__multadd>:
 800eb58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb5c:	690e      	ldr	r6, [r1, #16]
 800eb5e:	4607      	mov	r7, r0
 800eb60:	4698      	mov	r8, r3
 800eb62:	460c      	mov	r4, r1
 800eb64:	f101 0014 	add.w	r0, r1, #20
 800eb68:	2300      	movs	r3, #0
 800eb6a:	6805      	ldr	r5, [r0, #0]
 800eb6c:	b2a9      	uxth	r1, r5
 800eb6e:	fb02 8101 	mla	r1, r2, r1, r8
 800eb72:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800eb76:	0c2d      	lsrs	r5, r5, #16
 800eb78:	fb02 c505 	mla	r5, r2, r5, ip
 800eb7c:	b289      	uxth	r1, r1
 800eb7e:	3301      	adds	r3, #1
 800eb80:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800eb84:	429e      	cmp	r6, r3
 800eb86:	f840 1b04 	str.w	r1, [r0], #4
 800eb8a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800eb8e:	dcec      	bgt.n	800eb6a <__multadd+0x12>
 800eb90:	f1b8 0f00 	cmp.w	r8, #0
 800eb94:	d022      	beq.n	800ebdc <__multadd+0x84>
 800eb96:	68a3      	ldr	r3, [r4, #8]
 800eb98:	42b3      	cmp	r3, r6
 800eb9a:	dc19      	bgt.n	800ebd0 <__multadd+0x78>
 800eb9c:	6861      	ldr	r1, [r4, #4]
 800eb9e:	4638      	mov	r0, r7
 800eba0:	3101      	adds	r1, #1
 800eba2:	f7ff ff77 	bl	800ea94 <_Balloc>
 800eba6:	4605      	mov	r5, r0
 800eba8:	b928      	cbnz	r0, 800ebb6 <__multadd+0x5e>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	4b0d      	ldr	r3, [pc, #52]	; (800ebe4 <__multadd+0x8c>)
 800ebae:	480e      	ldr	r0, [pc, #56]	; (800ebe8 <__multadd+0x90>)
 800ebb0:	21b5      	movs	r1, #181	; 0xb5
 800ebb2:	f000 fe27 	bl	800f804 <__assert_func>
 800ebb6:	6922      	ldr	r2, [r4, #16]
 800ebb8:	3202      	adds	r2, #2
 800ebba:	f104 010c 	add.w	r1, r4, #12
 800ebbe:	0092      	lsls	r2, r2, #2
 800ebc0:	300c      	adds	r0, #12
 800ebc2:	f7ff ff59 	bl	800ea78 <memcpy>
 800ebc6:	4621      	mov	r1, r4
 800ebc8:	4638      	mov	r0, r7
 800ebca:	f7ff ffa3 	bl	800eb14 <_Bfree>
 800ebce:	462c      	mov	r4, r5
 800ebd0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ebd4:	3601      	adds	r6, #1
 800ebd6:	f8c3 8014 	str.w	r8, [r3, #20]
 800ebda:	6126      	str	r6, [r4, #16]
 800ebdc:	4620      	mov	r0, r4
 800ebde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebe2:	bf00      	nop
 800ebe4:	0800ffdb 	.word	0x0800ffdb
 800ebe8:	0801004c 	.word	0x0801004c

0800ebec <__hi0bits>:
 800ebec:	0c03      	lsrs	r3, r0, #16
 800ebee:	041b      	lsls	r3, r3, #16
 800ebf0:	b9d3      	cbnz	r3, 800ec28 <__hi0bits+0x3c>
 800ebf2:	0400      	lsls	r0, r0, #16
 800ebf4:	2310      	movs	r3, #16
 800ebf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ebfa:	bf04      	itt	eq
 800ebfc:	0200      	lsleq	r0, r0, #8
 800ebfe:	3308      	addeq	r3, #8
 800ec00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ec04:	bf04      	itt	eq
 800ec06:	0100      	lsleq	r0, r0, #4
 800ec08:	3304      	addeq	r3, #4
 800ec0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ec0e:	bf04      	itt	eq
 800ec10:	0080      	lsleq	r0, r0, #2
 800ec12:	3302      	addeq	r3, #2
 800ec14:	2800      	cmp	r0, #0
 800ec16:	db05      	blt.n	800ec24 <__hi0bits+0x38>
 800ec18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ec1c:	f103 0301 	add.w	r3, r3, #1
 800ec20:	bf08      	it	eq
 800ec22:	2320      	moveq	r3, #32
 800ec24:	4618      	mov	r0, r3
 800ec26:	4770      	bx	lr
 800ec28:	2300      	movs	r3, #0
 800ec2a:	e7e4      	b.n	800ebf6 <__hi0bits+0xa>

0800ec2c <__lo0bits>:
 800ec2c:	6803      	ldr	r3, [r0, #0]
 800ec2e:	f013 0207 	ands.w	r2, r3, #7
 800ec32:	4601      	mov	r1, r0
 800ec34:	d00b      	beq.n	800ec4e <__lo0bits+0x22>
 800ec36:	07da      	lsls	r2, r3, #31
 800ec38:	d424      	bmi.n	800ec84 <__lo0bits+0x58>
 800ec3a:	0798      	lsls	r0, r3, #30
 800ec3c:	bf49      	itett	mi
 800ec3e:	085b      	lsrmi	r3, r3, #1
 800ec40:	089b      	lsrpl	r3, r3, #2
 800ec42:	2001      	movmi	r0, #1
 800ec44:	600b      	strmi	r3, [r1, #0]
 800ec46:	bf5c      	itt	pl
 800ec48:	600b      	strpl	r3, [r1, #0]
 800ec4a:	2002      	movpl	r0, #2
 800ec4c:	4770      	bx	lr
 800ec4e:	b298      	uxth	r0, r3
 800ec50:	b9b0      	cbnz	r0, 800ec80 <__lo0bits+0x54>
 800ec52:	0c1b      	lsrs	r3, r3, #16
 800ec54:	2010      	movs	r0, #16
 800ec56:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ec5a:	bf04      	itt	eq
 800ec5c:	0a1b      	lsreq	r3, r3, #8
 800ec5e:	3008      	addeq	r0, #8
 800ec60:	071a      	lsls	r2, r3, #28
 800ec62:	bf04      	itt	eq
 800ec64:	091b      	lsreq	r3, r3, #4
 800ec66:	3004      	addeq	r0, #4
 800ec68:	079a      	lsls	r2, r3, #30
 800ec6a:	bf04      	itt	eq
 800ec6c:	089b      	lsreq	r3, r3, #2
 800ec6e:	3002      	addeq	r0, #2
 800ec70:	07da      	lsls	r2, r3, #31
 800ec72:	d403      	bmi.n	800ec7c <__lo0bits+0x50>
 800ec74:	085b      	lsrs	r3, r3, #1
 800ec76:	f100 0001 	add.w	r0, r0, #1
 800ec7a:	d005      	beq.n	800ec88 <__lo0bits+0x5c>
 800ec7c:	600b      	str	r3, [r1, #0]
 800ec7e:	4770      	bx	lr
 800ec80:	4610      	mov	r0, r2
 800ec82:	e7e8      	b.n	800ec56 <__lo0bits+0x2a>
 800ec84:	2000      	movs	r0, #0
 800ec86:	4770      	bx	lr
 800ec88:	2020      	movs	r0, #32
 800ec8a:	4770      	bx	lr

0800ec8c <__i2b>:
 800ec8c:	b510      	push	{r4, lr}
 800ec8e:	460c      	mov	r4, r1
 800ec90:	2101      	movs	r1, #1
 800ec92:	f7ff feff 	bl	800ea94 <_Balloc>
 800ec96:	4602      	mov	r2, r0
 800ec98:	b928      	cbnz	r0, 800eca6 <__i2b+0x1a>
 800ec9a:	4b05      	ldr	r3, [pc, #20]	; (800ecb0 <__i2b+0x24>)
 800ec9c:	4805      	ldr	r0, [pc, #20]	; (800ecb4 <__i2b+0x28>)
 800ec9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800eca2:	f000 fdaf 	bl	800f804 <__assert_func>
 800eca6:	2301      	movs	r3, #1
 800eca8:	6144      	str	r4, [r0, #20]
 800ecaa:	6103      	str	r3, [r0, #16]
 800ecac:	bd10      	pop	{r4, pc}
 800ecae:	bf00      	nop
 800ecb0:	0800ffdb 	.word	0x0800ffdb
 800ecb4:	0801004c 	.word	0x0801004c

0800ecb8 <__multiply>:
 800ecb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecbc:	4614      	mov	r4, r2
 800ecbe:	690a      	ldr	r2, [r1, #16]
 800ecc0:	6923      	ldr	r3, [r4, #16]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	bfb8      	it	lt
 800ecc6:	460b      	movlt	r3, r1
 800ecc8:	460d      	mov	r5, r1
 800ecca:	bfbc      	itt	lt
 800eccc:	4625      	movlt	r5, r4
 800ecce:	461c      	movlt	r4, r3
 800ecd0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ecd4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ecd8:	68ab      	ldr	r3, [r5, #8]
 800ecda:	6869      	ldr	r1, [r5, #4]
 800ecdc:	eb0a 0709 	add.w	r7, sl, r9
 800ece0:	42bb      	cmp	r3, r7
 800ece2:	b085      	sub	sp, #20
 800ece4:	bfb8      	it	lt
 800ece6:	3101      	addlt	r1, #1
 800ece8:	f7ff fed4 	bl	800ea94 <_Balloc>
 800ecec:	b930      	cbnz	r0, 800ecfc <__multiply+0x44>
 800ecee:	4602      	mov	r2, r0
 800ecf0:	4b42      	ldr	r3, [pc, #264]	; (800edfc <__multiply+0x144>)
 800ecf2:	4843      	ldr	r0, [pc, #268]	; (800ee00 <__multiply+0x148>)
 800ecf4:	f240 115d 	movw	r1, #349	; 0x15d
 800ecf8:	f000 fd84 	bl	800f804 <__assert_func>
 800ecfc:	f100 0614 	add.w	r6, r0, #20
 800ed00:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ed04:	4633      	mov	r3, r6
 800ed06:	2200      	movs	r2, #0
 800ed08:	4543      	cmp	r3, r8
 800ed0a:	d31e      	bcc.n	800ed4a <__multiply+0x92>
 800ed0c:	f105 0c14 	add.w	ip, r5, #20
 800ed10:	f104 0314 	add.w	r3, r4, #20
 800ed14:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ed18:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ed1c:	9202      	str	r2, [sp, #8]
 800ed1e:	ebac 0205 	sub.w	r2, ip, r5
 800ed22:	3a15      	subs	r2, #21
 800ed24:	f022 0203 	bic.w	r2, r2, #3
 800ed28:	3204      	adds	r2, #4
 800ed2a:	f105 0115 	add.w	r1, r5, #21
 800ed2e:	458c      	cmp	ip, r1
 800ed30:	bf38      	it	cc
 800ed32:	2204      	movcc	r2, #4
 800ed34:	9201      	str	r2, [sp, #4]
 800ed36:	9a02      	ldr	r2, [sp, #8]
 800ed38:	9303      	str	r3, [sp, #12]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d808      	bhi.n	800ed50 <__multiply+0x98>
 800ed3e:	2f00      	cmp	r7, #0
 800ed40:	dc55      	bgt.n	800edee <__multiply+0x136>
 800ed42:	6107      	str	r7, [r0, #16]
 800ed44:	b005      	add	sp, #20
 800ed46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed4a:	f843 2b04 	str.w	r2, [r3], #4
 800ed4e:	e7db      	b.n	800ed08 <__multiply+0x50>
 800ed50:	f8b3 a000 	ldrh.w	sl, [r3]
 800ed54:	f1ba 0f00 	cmp.w	sl, #0
 800ed58:	d020      	beq.n	800ed9c <__multiply+0xe4>
 800ed5a:	f105 0e14 	add.w	lr, r5, #20
 800ed5e:	46b1      	mov	r9, r6
 800ed60:	2200      	movs	r2, #0
 800ed62:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ed66:	f8d9 b000 	ldr.w	fp, [r9]
 800ed6a:	b2a1      	uxth	r1, r4
 800ed6c:	fa1f fb8b 	uxth.w	fp, fp
 800ed70:	fb0a b101 	mla	r1, sl, r1, fp
 800ed74:	4411      	add	r1, r2
 800ed76:	f8d9 2000 	ldr.w	r2, [r9]
 800ed7a:	0c24      	lsrs	r4, r4, #16
 800ed7c:	0c12      	lsrs	r2, r2, #16
 800ed7e:	fb0a 2404 	mla	r4, sl, r4, r2
 800ed82:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ed86:	b289      	uxth	r1, r1
 800ed88:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ed8c:	45f4      	cmp	ip, lr
 800ed8e:	f849 1b04 	str.w	r1, [r9], #4
 800ed92:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ed96:	d8e4      	bhi.n	800ed62 <__multiply+0xaa>
 800ed98:	9901      	ldr	r1, [sp, #4]
 800ed9a:	5072      	str	r2, [r6, r1]
 800ed9c:	9a03      	ldr	r2, [sp, #12]
 800ed9e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eda2:	3304      	adds	r3, #4
 800eda4:	f1b9 0f00 	cmp.w	r9, #0
 800eda8:	d01f      	beq.n	800edea <__multiply+0x132>
 800edaa:	6834      	ldr	r4, [r6, #0]
 800edac:	f105 0114 	add.w	r1, r5, #20
 800edb0:	46b6      	mov	lr, r6
 800edb2:	f04f 0a00 	mov.w	sl, #0
 800edb6:	880a      	ldrh	r2, [r1, #0]
 800edb8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800edbc:	fb09 b202 	mla	r2, r9, r2, fp
 800edc0:	4492      	add	sl, r2
 800edc2:	b2a4      	uxth	r4, r4
 800edc4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800edc8:	f84e 4b04 	str.w	r4, [lr], #4
 800edcc:	f851 4b04 	ldr.w	r4, [r1], #4
 800edd0:	f8be 2000 	ldrh.w	r2, [lr]
 800edd4:	0c24      	lsrs	r4, r4, #16
 800edd6:	fb09 2404 	mla	r4, r9, r4, r2
 800edda:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800edde:	458c      	cmp	ip, r1
 800ede0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ede4:	d8e7      	bhi.n	800edb6 <__multiply+0xfe>
 800ede6:	9a01      	ldr	r2, [sp, #4]
 800ede8:	50b4      	str	r4, [r6, r2]
 800edea:	3604      	adds	r6, #4
 800edec:	e7a3      	b.n	800ed36 <__multiply+0x7e>
 800edee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d1a5      	bne.n	800ed42 <__multiply+0x8a>
 800edf6:	3f01      	subs	r7, #1
 800edf8:	e7a1      	b.n	800ed3e <__multiply+0x86>
 800edfa:	bf00      	nop
 800edfc:	0800ffdb 	.word	0x0800ffdb
 800ee00:	0801004c 	.word	0x0801004c

0800ee04 <__pow5mult>:
 800ee04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee08:	4615      	mov	r5, r2
 800ee0a:	f012 0203 	ands.w	r2, r2, #3
 800ee0e:	4606      	mov	r6, r0
 800ee10:	460f      	mov	r7, r1
 800ee12:	d007      	beq.n	800ee24 <__pow5mult+0x20>
 800ee14:	4c25      	ldr	r4, [pc, #148]	; (800eeac <__pow5mult+0xa8>)
 800ee16:	3a01      	subs	r2, #1
 800ee18:	2300      	movs	r3, #0
 800ee1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee1e:	f7ff fe9b 	bl	800eb58 <__multadd>
 800ee22:	4607      	mov	r7, r0
 800ee24:	10ad      	asrs	r5, r5, #2
 800ee26:	d03d      	beq.n	800eea4 <__pow5mult+0xa0>
 800ee28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ee2a:	b97c      	cbnz	r4, 800ee4c <__pow5mult+0x48>
 800ee2c:	2010      	movs	r0, #16
 800ee2e:	f7ff fe1b 	bl	800ea68 <malloc>
 800ee32:	4602      	mov	r2, r0
 800ee34:	6270      	str	r0, [r6, #36]	; 0x24
 800ee36:	b928      	cbnz	r0, 800ee44 <__pow5mult+0x40>
 800ee38:	4b1d      	ldr	r3, [pc, #116]	; (800eeb0 <__pow5mult+0xac>)
 800ee3a:	481e      	ldr	r0, [pc, #120]	; (800eeb4 <__pow5mult+0xb0>)
 800ee3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ee40:	f000 fce0 	bl	800f804 <__assert_func>
 800ee44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee48:	6004      	str	r4, [r0, #0]
 800ee4a:	60c4      	str	r4, [r0, #12]
 800ee4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ee50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee54:	b94c      	cbnz	r4, 800ee6a <__pow5mult+0x66>
 800ee56:	f240 2171 	movw	r1, #625	; 0x271
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	f7ff ff16 	bl	800ec8c <__i2b>
 800ee60:	2300      	movs	r3, #0
 800ee62:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee66:	4604      	mov	r4, r0
 800ee68:	6003      	str	r3, [r0, #0]
 800ee6a:	f04f 0900 	mov.w	r9, #0
 800ee6e:	07eb      	lsls	r3, r5, #31
 800ee70:	d50a      	bpl.n	800ee88 <__pow5mult+0x84>
 800ee72:	4639      	mov	r1, r7
 800ee74:	4622      	mov	r2, r4
 800ee76:	4630      	mov	r0, r6
 800ee78:	f7ff ff1e 	bl	800ecb8 <__multiply>
 800ee7c:	4639      	mov	r1, r7
 800ee7e:	4680      	mov	r8, r0
 800ee80:	4630      	mov	r0, r6
 800ee82:	f7ff fe47 	bl	800eb14 <_Bfree>
 800ee86:	4647      	mov	r7, r8
 800ee88:	106d      	asrs	r5, r5, #1
 800ee8a:	d00b      	beq.n	800eea4 <__pow5mult+0xa0>
 800ee8c:	6820      	ldr	r0, [r4, #0]
 800ee8e:	b938      	cbnz	r0, 800eea0 <__pow5mult+0x9c>
 800ee90:	4622      	mov	r2, r4
 800ee92:	4621      	mov	r1, r4
 800ee94:	4630      	mov	r0, r6
 800ee96:	f7ff ff0f 	bl	800ecb8 <__multiply>
 800ee9a:	6020      	str	r0, [r4, #0]
 800ee9c:	f8c0 9000 	str.w	r9, [r0]
 800eea0:	4604      	mov	r4, r0
 800eea2:	e7e4      	b.n	800ee6e <__pow5mult+0x6a>
 800eea4:	4638      	mov	r0, r7
 800eea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eeaa:	bf00      	nop
 800eeac:	080101a0 	.word	0x080101a0
 800eeb0:	0800ff65 	.word	0x0800ff65
 800eeb4:	0801004c 	.word	0x0801004c

0800eeb8 <__lshift>:
 800eeb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eebc:	460c      	mov	r4, r1
 800eebe:	6849      	ldr	r1, [r1, #4]
 800eec0:	6923      	ldr	r3, [r4, #16]
 800eec2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eec6:	68a3      	ldr	r3, [r4, #8]
 800eec8:	4607      	mov	r7, r0
 800eeca:	4691      	mov	r9, r2
 800eecc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eed0:	f108 0601 	add.w	r6, r8, #1
 800eed4:	42b3      	cmp	r3, r6
 800eed6:	db0b      	blt.n	800eef0 <__lshift+0x38>
 800eed8:	4638      	mov	r0, r7
 800eeda:	f7ff fddb 	bl	800ea94 <_Balloc>
 800eede:	4605      	mov	r5, r0
 800eee0:	b948      	cbnz	r0, 800eef6 <__lshift+0x3e>
 800eee2:	4602      	mov	r2, r0
 800eee4:	4b28      	ldr	r3, [pc, #160]	; (800ef88 <__lshift+0xd0>)
 800eee6:	4829      	ldr	r0, [pc, #164]	; (800ef8c <__lshift+0xd4>)
 800eee8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800eeec:	f000 fc8a 	bl	800f804 <__assert_func>
 800eef0:	3101      	adds	r1, #1
 800eef2:	005b      	lsls	r3, r3, #1
 800eef4:	e7ee      	b.n	800eed4 <__lshift+0x1c>
 800eef6:	2300      	movs	r3, #0
 800eef8:	f100 0114 	add.w	r1, r0, #20
 800eefc:	f100 0210 	add.w	r2, r0, #16
 800ef00:	4618      	mov	r0, r3
 800ef02:	4553      	cmp	r3, sl
 800ef04:	db33      	blt.n	800ef6e <__lshift+0xb6>
 800ef06:	6920      	ldr	r0, [r4, #16]
 800ef08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef0c:	f104 0314 	add.w	r3, r4, #20
 800ef10:	f019 091f 	ands.w	r9, r9, #31
 800ef14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ef1c:	d02b      	beq.n	800ef76 <__lshift+0xbe>
 800ef1e:	f1c9 0e20 	rsb	lr, r9, #32
 800ef22:	468a      	mov	sl, r1
 800ef24:	2200      	movs	r2, #0
 800ef26:	6818      	ldr	r0, [r3, #0]
 800ef28:	fa00 f009 	lsl.w	r0, r0, r9
 800ef2c:	4302      	orrs	r2, r0
 800ef2e:	f84a 2b04 	str.w	r2, [sl], #4
 800ef32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef36:	459c      	cmp	ip, r3
 800ef38:	fa22 f20e 	lsr.w	r2, r2, lr
 800ef3c:	d8f3      	bhi.n	800ef26 <__lshift+0x6e>
 800ef3e:	ebac 0304 	sub.w	r3, ip, r4
 800ef42:	3b15      	subs	r3, #21
 800ef44:	f023 0303 	bic.w	r3, r3, #3
 800ef48:	3304      	adds	r3, #4
 800ef4a:	f104 0015 	add.w	r0, r4, #21
 800ef4e:	4584      	cmp	ip, r0
 800ef50:	bf38      	it	cc
 800ef52:	2304      	movcc	r3, #4
 800ef54:	50ca      	str	r2, [r1, r3]
 800ef56:	b10a      	cbz	r2, 800ef5c <__lshift+0xa4>
 800ef58:	f108 0602 	add.w	r6, r8, #2
 800ef5c:	3e01      	subs	r6, #1
 800ef5e:	4638      	mov	r0, r7
 800ef60:	612e      	str	r6, [r5, #16]
 800ef62:	4621      	mov	r1, r4
 800ef64:	f7ff fdd6 	bl	800eb14 <_Bfree>
 800ef68:	4628      	mov	r0, r5
 800ef6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef6e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef72:	3301      	adds	r3, #1
 800ef74:	e7c5      	b.n	800ef02 <__lshift+0x4a>
 800ef76:	3904      	subs	r1, #4
 800ef78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef7c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef80:	459c      	cmp	ip, r3
 800ef82:	d8f9      	bhi.n	800ef78 <__lshift+0xc0>
 800ef84:	e7ea      	b.n	800ef5c <__lshift+0xa4>
 800ef86:	bf00      	nop
 800ef88:	0800ffdb 	.word	0x0800ffdb
 800ef8c:	0801004c 	.word	0x0801004c

0800ef90 <__mcmp>:
 800ef90:	b530      	push	{r4, r5, lr}
 800ef92:	6902      	ldr	r2, [r0, #16]
 800ef94:	690c      	ldr	r4, [r1, #16]
 800ef96:	1b12      	subs	r2, r2, r4
 800ef98:	d10e      	bne.n	800efb8 <__mcmp+0x28>
 800ef9a:	f100 0314 	add.w	r3, r0, #20
 800ef9e:	3114      	adds	r1, #20
 800efa0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800efa4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800efa8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800efac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800efb0:	42a5      	cmp	r5, r4
 800efb2:	d003      	beq.n	800efbc <__mcmp+0x2c>
 800efb4:	d305      	bcc.n	800efc2 <__mcmp+0x32>
 800efb6:	2201      	movs	r2, #1
 800efb8:	4610      	mov	r0, r2
 800efba:	bd30      	pop	{r4, r5, pc}
 800efbc:	4283      	cmp	r3, r0
 800efbe:	d3f3      	bcc.n	800efa8 <__mcmp+0x18>
 800efc0:	e7fa      	b.n	800efb8 <__mcmp+0x28>
 800efc2:	f04f 32ff 	mov.w	r2, #4294967295
 800efc6:	e7f7      	b.n	800efb8 <__mcmp+0x28>

0800efc8 <__mdiff>:
 800efc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efcc:	460c      	mov	r4, r1
 800efce:	4606      	mov	r6, r0
 800efd0:	4611      	mov	r1, r2
 800efd2:	4620      	mov	r0, r4
 800efd4:	4617      	mov	r7, r2
 800efd6:	f7ff ffdb 	bl	800ef90 <__mcmp>
 800efda:	1e05      	subs	r5, r0, #0
 800efdc:	d110      	bne.n	800f000 <__mdiff+0x38>
 800efde:	4629      	mov	r1, r5
 800efe0:	4630      	mov	r0, r6
 800efe2:	f7ff fd57 	bl	800ea94 <_Balloc>
 800efe6:	b930      	cbnz	r0, 800eff6 <__mdiff+0x2e>
 800efe8:	4b39      	ldr	r3, [pc, #228]	; (800f0d0 <__mdiff+0x108>)
 800efea:	4602      	mov	r2, r0
 800efec:	f240 2132 	movw	r1, #562	; 0x232
 800eff0:	4838      	ldr	r0, [pc, #224]	; (800f0d4 <__mdiff+0x10c>)
 800eff2:	f000 fc07 	bl	800f804 <__assert_func>
 800eff6:	2301      	movs	r3, #1
 800eff8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800effc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f000:	bfa4      	itt	ge
 800f002:	463b      	movge	r3, r7
 800f004:	4627      	movge	r7, r4
 800f006:	4630      	mov	r0, r6
 800f008:	6879      	ldr	r1, [r7, #4]
 800f00a:	bfa6      	itte	ge
 800f00c:	461c      	movge	r4, r3
 800f00e:	2500      	movge	r5, #0
 800f010:	2501      	movlt	r5, #1
 800f012:	f7ff fd3f 	bl	800ea94 <_Balloc>
 800f016:	b920      	cbnz	r0, 800f022 <__mdiff+0x5a>
 800f018:	4b2d      	ldr	r3, [pc, #180]	; (800f0d0 <__mdiff+0x108>)
 800f01a:	4602      	mov	r2, r0
 800f01c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f020:	e7e6      	b.n	800eff0 <__mdiff+0x28>
 800f022:	693e      	ldr	r6, [r7, #16]
 800f024:	60c5      	str	r5, [r0, #12]
 800f026:	6925      	ldr	r5, [r4, #16]
 800f028:	f107 0114 	add.w	r1, r7, #20
 800f02c:	f104 0914 	add.w	r9, r4, #20
 800f030:	f100 0e14 	add.w	lr, r0, #20
 800f034:	f107 0210 	add.w	r2, r7, #16
 800f038:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f03c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f040:	46f2      	mov	sl, lr
 800f042:	2700      	movs	r7, #0
 800f044:	f859 3b04 	ldr.w	r3, [r9], #4
 800f048:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f04c:	fa1f f883 	uxth.w	r8, r3
 800f050:	fa17 f78b 	uxtah	r7, r7, fp
 800f054:	0c1b      	lsrs	r3, r3, #16
 800f056:	eba7 0808 	sub.w	r8, r7, r8
 800f05a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f05e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f062:	fa1f f888 	uxth.w	r8, r8
 800f066:	141f      	asrs	r7, r3, #16
 800f068:	454d      	cmp	r5, r9
 800f06a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f06e:	f84a 3b04 	str.w	r3, [sl], #4
 800f072:	d8e7      	bhi.n	800f044 <__mdiff+0x7c>
 800f074:	1b2b      	subs	r3, r5, r4
 800f076:	3b15      	subs	r3, #21
 800f078:	f023 0303 	bic.w	r3, r3, #3
 800f07c:	3304      	adds	r3, #4
 800f07e:	3415      	adds	r4, #21
 800f080:	42a5      	cmp	r5, r4
 800f082:	bf38      	it	cc
 800f084:	2304      	movcc	r3, #4
 800f086:	4419      	add	r1, r3
 800f088:	4473      	add	r3, lr
 800f08a:	469e      	mov	lr, r3
 800f08c:	460d      	mov	r5, r1
 800f08e:	4565      	cmp	r5, ip
 800f090:	d30e      	bcc.n	800f0b0 <__mdiff+0xe8>
 800f092:	f10c 0203 	add.w	r2, ip, #3
 800f096:	1a52      	subs	r2, r2, r1
 800f098:	f022 0203 	bic.w	r2, r2, #3
 800f09c:	3903      	subs	r1, #3
 800f09e:	458c      	cmp	ip, r1
 800f0a0:	bf38      	it	cc
 800f0a2:	2200      	movcc	r2, #0
 800f0a4:	441a      	add	r2, r3
 800f0a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f0aa:	b17b      	cbz	r3, 800f0cc <__mdiff+0x104>
 800f0ac:	6106      	str	r6, [r0, #16]
 800f0ae:	e7a5      	b.n	800effc <__mdiff+0x34>
 800f0b0:	f855 8b04 	ldr.w	r8, [r5], #4
 800f0b4:	fa17 f488 	uxtah	r4, r7, r8
 800f0b8:	1422      	asrs	r2, r4, #16
 800f0ba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f0be:	b2a4      	uxth	r4, r4
 800f0c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f0c4:	f84e 4b04 	str.w	r4, [lr], #4
 800f0c8:	1417      	asrs	r7, r2, #16
 800f0ca:	e7e0      	b.n	800f08e <__mdiff+0xc6>
 800f0cc:	3e01      	subs	r6, #1
 800f0ce:	e7ea      	b.n	800f0a6 <__mdiff+0xde>
 800f0d0:	0800ffdb 	.word	0x0800ffdb
 800f0d4:	0801004c 	.word	0x0801004c

0800f0d8 <__d2b>:
 800f0d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f0dc:	4689      	mov	r9, r1
 800f0de:	2101      	movs	r1, #1
 800f0e0:	ec57 6b10 	vmov	r6, r7, d0
 800f0e4:	4690      	mov	r8, r2
 800f0e6:	f7ff fcd5 	bl	800ea94 <_Balloc>
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	b930      	cbnz	r0, 800f0fc <__d2b+0x24>
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	4b25      	ldr	r3, [pc, #148]	; (800f188 <__d2b+0xb0>)
 800f0f2:	4826      	ldr	r0, [pc, #152]	; (800f18c <__d2b+0xb4>)
 800f0f4:	f240 310a 	movw	r1, #778	; 0x30a
 800f0f8:	f000 fb84 	bl	800f804 <__assert_func>
 800f0fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f100:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f104:	bb35      	cbnz	r5, 800f154 <__d2b+0x7c>
 800f106:	2e00      	cmp	r6, #0
 800f108:	9301      	str	r3, [sp, #4]
 800f10a:	d028      	beq.n	800f15e <__d2b+0x86>
 800f10c:	4668      	mov	r0, sp
 800f10e:	9600      	str	r6, [sp, #0]
 800f110:	f7ff fd8c 	bl	800ec2c <__lo0bits>
 800f114:	9900      	ldr	r1, [sp, #0]
 800f116:	b300      	cbz	r0, 800f15a <__d2b+0x82>
 800f118:	9a01      	ldr	r2, [sp, #4]
 800f11a:	f1c0 0320 	rsb	r3, r0, #32
 800f11e:	fa02 f303 	lsl.w	r3, r2, r3
 800f122:	430b      	orrs	r3, r1
 800f124:	40c2      	lsrs	r2, r0
 800f126:	6163      	str	r3, [r4, #20]
 800f128:	9201      	str	r2, [sp, #4]
 800f12a:	9b01      	ldr	r3, [sp, #4]
 800f12c:	61a3      	str	r3, [r4, #24]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	bf14      	ite	ne
 800f132:	2202      	movne	r2, #2
 800f134:	2201      	moveq	r2, #1
 800f136:	6122      	str	r2, [r4, #16]
 800f138:	b1d5      	cbz	r5, 800f170 <__d2b+0x98>
 800f13a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f13e:	4405      	add	r5, r0
 800f140:	f8c9 5000 	str.w	r5, [r9]
 800f144:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f148:	f8c8 0000 	str.w	r0, [r8]
 800f14c:	4620      	mov	r0, r4
 800f14e:	b003      	add	sp, #12
 800f150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f154:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f158:	e7d5      	b.n	800f106 <__d2b+0x2e>
 800f15a:	6161      	str	r1, [r4, #20]
 800f15c:	e7e5      	b.n	800f12a <__d2b+0x52>
 800f15e:	a801      	add	r0, sp, #4
 800f160:	f7ff fd64 	bl	800ec2c <__lo0bits>
 800f164:	9b01      	ldr	r3, [sp, #4]
 800f166:	6163      	str	r3, [r4, #20]
 800f168:	2201      	movs	r2, #1
 800f16a:	6122      	str	r2, [r4, #16]
 800f16c:	3020      	adds	r0, #32
 800f16e:	e7e3      	b.n	800f138 <__d2b+0x60>
 800f170:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f174:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f178:	f8c9 0000 	str.w	r0, [r9]
 800f17c:	6918      	ldr	r0, [r3, #16]
 800f17e:	f7ff fd35 	bl	800ebec <__hi0bits>
 800f182:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f186:	e7df      	b.n	800f148 <__d2b+0x70>
 800f188:	0800ffdb 	.word	0x0800ffdb
 800f18c:	0801004c 	.word	0x0801004c

0800f190 <_calloc_r>:
 800f190:	b513      	push	{r0, r1, r4, lr}
 800f192:	434a      	muls	r2, r1
 800f194:	4611      	mov	r1, r2
 800f196:	9201      	str	r2, [sp, #4]
 800f198:	f000 f85a 	bl	800f250 <_malloc_r>
 800f19c:	4604      	mov	r4, r0
 800f19e:	b118      	cbz	r0, 800f1a8 <_calloc_r+0x18>
 800f1a0:	9a01      	ldr	r2, [sp, #4]
 800f1a2:	2100      	movs	r1, #0
 800f1a4:	f7fe f8f0 	bl	800d388 <memset>
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	b002      	add	sp, #8
 800f1ac:	bd10      	pop	{r4, pc}
	...

0800f1b0 <_free_r>:
 800f1b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1b2:	2900      	cmp	r1, #0
 800f1b4:	d048      	beq.n	800f248 <_free_r+0x98>
 800f1b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1ba:	9001      	str	r0, [sp, #4]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	f1a1 0404 	sub.w	r4, r1, #4
 800f1c2:	bfb8      	it	lt
 800f1c4:	18e4      	addlt	r4, r4, r3
 800f1c6:	f000 fca7 	bl	800fb18 <__malloc_lock>
 800f1ca:	4a20      	ldr	r2, [pc, #128]	; (800f24c <_free_r+0x9c>)
 800f1cc:	9801      	ldr	r0, [sp, #4]
 800f1ce:	6813      	ldr	r3, [r2, #0]
 800f1d0:	4615      	mov	r5, r2
 800f1d2:	b933      	cbnz	r3, 800f1e2 <_free_r+0x32>
 800f1d4:	6063      	str	r3, [r4, #4]
 800f1d6:	6014      	str	r4, [r2, #0]
 800f1d8:	b003      	add	sp, #12
 800f1da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1de:	f000 bca1 	b.w	800fb24 <__malloc_unlock>
 800f1e2:	42a3      	cmp	r3, r4
 800f1e4:	d90b      	bls.n	800f1fe <_free_r+0x4e>
 800f1e6:	6821      	ldr	r1, [r4, #0]
 800f1e8:	1862      	adds	r2, r4, r1
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	bf04      	itt	eq
 800f1ee:	681a      	ldreq	r2, [r3, #0]
 800f1f0:	685b      	ldreq	r3, [r3, #4]
 800f1f2:	6063      	str	r3, [r4, #4]
 800f1f4:	bf04      	itt	eq
 800f1f6:	1852      	addeq	r2, r2, r1
 800f1f8:	6022      	streq	r2, [r4, #0]
 800f1fa:	602c      	str	r4, [r5, #0]
 800f1fc:	e7ec      	b.n	800f1d8 <_free_r+0x28>
 800f1fe:	461a      	mov	r2, r3
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	b10b      	cbz	r3, 800f208 <_free_r+0x58>
 800f204:	42a3      	cmp	r3, r4
 800f206:	d9fa      	bls.n	800f1fe <_free_r+0x4e>
 800f208:	6811      	ldr	r1, [r2, #0]
 800f20a:	1855      	adds	r5, r2, r1
 800f20c:	42a5      	cmp	r5, r4
 800f20e:	d10b      	bne.n	800f228 <_free_r+0x78>
 800f210:	6824      	ldr	r4, [r4, #0]
 800f212:	4421      	add	r1, r4
 800f214:	1854      	adds	r4, r2, r1
 800f216:	42a3      	cmp	r3, r4
 800f218:	6011      	str	r1, [r2, #0]
 800f21a:	d1dd      	bne.n	800f1d8 <_free_r+0x28>
 800f21c:	681c      	ldr	r4, [r3, #0]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	6053      	str	r3, [r2, #4]
 800f222:	4421      	add	r1, r4
 800f224:	6011      	str	r1, [r2, #0]
 800f226:	e7d7      	b.n	800f1d8 <_free_r+0x28>
 800f228:	d902      	bls.n	800f230 <_free_r+0x80>
 800f22a:	230c      	movs	r3, #12
 800f22c:	6003      	str	r3, [r0, #0]
 800f22e:	e7d3      	b.n	800f1d8 <_free_r+0x28>
 800f230:	6825      	ldr	r5, [r4, #0]
 800f232:	1961      	adds	r1, r4, r5
 800f234:	428b      	cmp	r3, r1
 800f236:	bf04      	itt	eq
 800f238:	6819      	ldreq	r1, [r3, #0]
 800f23a:	685b      	ldreq	r3, [r3, #4]
 800f23c:	6063      	str	r3, [r4, #4]
 800f23e:	bf04      	itt	eq
 800f240:	1949      	addeq	r1, r1, r5
 800f242:	6021      	streq	r1, [r4, #0]
 800f244:	6054      	str	r4, [r2, #4]
 800f246:	e7c7      	b.n	800f1d8 <_free_r+0x28>
 800f248:	b003      	add	sp, #12
 800f24a:	bd30      	pop	{r4, r5, pc}
 800f24c:	20000220 	.word	0x20000220

0800f250 <_malloc_r>:
 800f250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f252:	1ccd      	adds	r5, r1, #3
 800f254:	f025 0503 	bic.w	r5, r5, #3
 800f258:	3508      	adds	r5, #8
 800f25a:	2d0c      	cmp	r5, #12
 800f25c:	bf38      	it	cc
 800f25e:	250c      	movcc	r5, #12
 800f260:	2d00      	cmp	r5, #0
 800f262:	4606      	mov	r6, r0
 800f264:	db01      	blt.n	800f26a <_malloc_r+0x1a>
 800f266:	42a9      	cmp	r1, r5
 800f268:	d903      	bls.n	800f272 <_malloc_r+0x22>
 800f26a:	230c      	movs	r3, #12
 800f26c:	6033      	str	r3, [r6, #0]
 800f26e:	2000      	movs	r0, #0
 800f270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f272:	f000 fc51 	bl	800fb18 <__malloc_lock>
 800f276:	4921      	ldr	r1, [pc, #132]	; (800f2fc <_malloc_r+0xac>)
 800f278:	680a      	ldr	r2, [r1, #0]
 800f27a:	4614      	mov	r4, r2
 800f27c:	b99c      	cbnz	r4, 800f2a6 <_malloc_r+0x56>
 800f27e:	4f20      	ldr	r7, [pc, #128]	; (800f300 <_malloc_r+0xb0>)
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	b923      	cbnz	r3, 800f28e <_malloc_r+0x3e>
 800f284:	4621      	mov	r1, r4
 800f286:	4630      	mov	r0, r6
 800f288:	f000 f996 	bl	800f5b8 <_sbrk_r>
 800f28c:	6038      	str	r0, [r7, #0]
 800f28e:	4629      	mov	r1, r5
 800f290:	4630      	mov	r0, r6
 800f292:	f000 f991 	bl	800f5b8 <_sbrk_r>
 800f296:	1c43      	adds	r3, r0, #1
 800f298:	d123      	bne.n	800f2e2 <_malloc_r+0x92>
 800f29a:	230c      	movs	r3, #12
 800f29c:	6033      	str	r3, [r6, #0]
 800f29e:	4630      	mov	r0, r6
 800f2a0:	f000 fc40 	bl	800fb24 <__malloc_unlock>
 800f2a4:	e7e3      	b.n	800f26e <_malloc_r+0x1e>
 800f2a6:	6823      	ldr	r3, [r4, #0]
 800f2a8:	1b5b      	subs	r3, r3, r5
 800f2aa:	d417      	bmi.n	800f2dc <_malloc_r+0x8c>
 800f2ac:	2b0b      	cmp	r3, #11
 800f2ae:	d903      	bls.n	800f2b8 <_malloc_r+0x68>
 800f2b0:	6023      	str	r3, [r4, #0]
 800f2b2:	441c      	add	r4, r3
 800f2b4:	6025      	str	r5, [r4, #0]
 800f2b6:	e004      	b.n	800f2c2 <_malloc_r+0x72>
 800f2b8:	6863      	ldr	r3, [r4, #4]
 800f2ba:	42a2      	cmp	r2, r4
 800f2bc:	bf0c      	ite	eq
 800f2be:	600b      	streq	r3, [r1, #0]
 800f2c0:	6053      	strne	r3, [r2, #4]
 800f2c2:	4630      	mov	r0, r6
 800f2c4:	f000 fc2e 	bl	800fb24 <__malloc_unlock>
 800f2c8:	f104 000b 	add.w	r0, r4, #11
 800f2cc:	1d23      	adds	r3, r4, #4
 800f2ce:	f020 0007 	bic.w	r0, r0, #7
 800f2d2:	1ac2      	subs	r2, r0, r3
 800f2d4:	d0cc      	beq.n	800f270 <_malloc_r+0x20>
 800f2d6:	1a1b      	subs	r3, r3, r0
 800f2d8:	50a3      	str	r3, [r4, r2]
 800f2da:	e7c9      	b.n	800f270 <_malloc_r+0x20>
 800f2dc:	4622      	mov	r2, r4
 800f2de:	6864      	ldr	r4, [r4, #4]
 800f2e0:	e7cc      	b.n	800f27c <_malloc_r+0x2c>
 800f2e2:	1cc4      	adds	r4, r0, #3
 800f2e4:	f024 0403 	bic.w	r4, r4, #3
 800f2e8:	42a0      	cmp	r0, r4
 800f2ea:	d0e3      	beq.n	800f2b4 <_malloc_r+0x64>
 800f2ec:	1a21      	subs	r1, r4, r0
 800f2ee:	4630      	mov	r0, r6
 800f2f0:	f000 f962 	bl	800f5b8 <_sbrk_r>
 800f2f4:	3001      	adds	r0, #1
 800f2f6:	d1dd      	bne.n	800f2b4 <_malloc_r+0x64>
 800f2f8:	e7cf      	b.n	800f29a <_malloc_r+0x4a>
 800f2fa:	bf00      	nop
 800f2fc:	20000220 	.word	0x20000220
 800f300:	20000224 	.word	0x20000224

0800f304 <__sfputc_r>:
 800f304:	6893      	ldr	r3, [r2, #8]
 800f306:	3b01      	subs	r3, #1
 800f308:	2b00      	cmp	r3, #0
 800f30a:	b410      	push	{r4}
 800f30c:	6093      	str	r3, [r2, #8]
 800f30e:	da08      	bge.n	800f322 <__sfputc_r+0x1e>
 800f310:	6994      	ldr	r4, [r2, #24]
 800f312:	42a3      	cmp	r3, r4
 800f314:	db01      	blt.n	800f31a <__sfputc_r+0x16>
 800f316:	290a      	cmp	r1, #10
 800f318:	d103      	bne.n	800f322 <__sfputc_r+0x1e>
 800f31a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f31e:	f000 b99f 	b.w	800f660 <__swbuf_r>
 800f322:	6813      	ldr	r3, [r2, #0]
 800f324:	1c58      	adds	r0, r3, #1
 800f326:	6010      	str	r0, [r2, #0]
 800f328:	7019      	strb	r1, [r3, #0]
 800f32a:	4608      	mov	r0, r1
 800f32c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f330:	4770      	bx	lr

0800f332 <__sfputs_r>:
 800f332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f334:	4606      	mov	r6, r0
 800f336:	460f      	mov	r7, r1
 800f338:	4614      	mov	r4, r2
 800f33a:	18d5      	adds	r5, r2, r3
 800f33c:	42ac      	cmp	r4, r5
 800f33e:	d101      	bne.n	800f344 <__sfputs_r+0x12>
 800f340:	2000      	movs	r0, #0
 800f342:	e007      	b.n	800f354 <__sfputs_r+0x22>
 800f344:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f348:	463a      	mov	r2, r7
 800f34a:	4630      	mov	r0, r6
 800f34c:	f7ff ffda 	bl	800f304 <__sfputc_r>
 800f350:	1c43      	adds	r3, r0, #1
 800f352:	d1f3      	bne.n	800f33c <__sfputs_r+0xa>
 800f354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f358 <_vfiprintf_r>:
 800f358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f35c:	460d      	mov	r5, r1
 800f35e:	b09d      	sub	sp, #116	; 0x74
 800f360:	4614      	mov	r4, r2
 800f362:	4698      	mov	r8, r3
 800f364:	4606      	mov	r6, r0
 800f366:	b118      	cbz	r0, 800f370 <_vfiprintf_r+0x18>
 800f368:	6983      	ldr	r3, [r0, #24]
 800f36a:	b90b      	cbnz	r3, 800f370 <_vfiprintf_r+0x18>
 800f36c:	f7ff fad6 	bl	800e91c <__sinit>
 800f370:	4b89      	ldr	r3, [pc, #548]	; (800f598 <_vfiprintf_r+0x240>)
 800f372:	429d      	cmp	r5, r3
 800f374:	d11b      	bne.n	800f3ae <_vfiprintf_r+0x56>
 800f376:	6875      	ldr	r5, [r6, #4]
 800f378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f37a:	07d9      	lsls	r1, r3, #31
 800f37c:	d405      	bmi.n	800f38a <_vfiprintf_r+0x32>
 800f37e:	89ab      	ldrh	r3, [r5, #12]
 800f380:	059a      	lsls	r2, r3, #22
 800f382:	d402      	bmi.n	800f38a <_vfiprintf_r+0x32>
 800f384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f386:	f7ff fb6c 	bl	800ea62 <__retarget_lock_acquire_recursive>
 800f38a:	89ab      	ldrh	r3, [r5, #12]
 800f38c:	071b      	lsls	r3, r3, #28
 800f38e:	d501      	bpl.n	800f394 <_vfiprintf_r+0x3c>
 800f390:	692b      	ldr	r3, [r5, #16]
 800f392:	b9eb      	cbnz	r3, 800f3d0 <_vfiprintf_r+0x78>
 800f394:	4629      	mov	r1, r5
 800f396:	4630      	mov	r0, r6
 800f398:	f000 f9c6 	bl	800f728 <__swsetup_r>
 800f39c:	b1c0      	cbz	r0, 800f3d0 <_vfiprintf_r+0x78>
 800f39e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3a0:	07dc      	lsls	r4, r3, #31
 800f3a2:	d50e      	bpl.n	800f3c2 <_vfiprintf_r+0x6a>
 800f3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a8:	b01d      	add	sp, #116	; 0x74
 800f3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ae:	4b7b      	ldr	r3, [pc, #492]	; (800f59c <_vfiprintf_r+0x244>)
 800f3b0:	429d      	cmp	r5, r3
 800f3b2:	d101      	bne.n	800f3b8 <_vfiprintf_r+0x60>
 800f3b4:	68b5      	ldr	r5, [r6, #8]
 800f3b6:	e7df      	b.n	800f378 <_vfiprintf_r+0x20>
 800f3b8:	4b79      	ldr	r3, [pc, #484]	; (800f5a0 <_vfiprintf_r+0x248>)
 800f3ba:	429d      	cmp	r5, r3
 800f3bc:	bf08      	it	eq
 800f3be:	68f5      	ldreq	r5, [r6, #12]
 800f3c0:	e7da      	b.n	800f378 <_vfiprintf_r+0x20>
 800f3c2:	89ab      	ldrh	r3, [r5, #12]
 800f3c4:	0598      	lsls	r0, r3, #22
 800f3c6:	d4ed      	bmi.n	800f3a4 <_vfiprintf_r+0x4c>
 800f3c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3ca:	f7ff fb4b 	bl	800ea64 <__retarget_lock_release_recursive>
 800f3ce:	e7e9      	b.n	800f3a4 <_vfiprintf_r+0x4c>
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	9309      	str	r3, [sp, #36]	; 0x24
 800f3d4:	2320      	movs	r3, #32
 800f3d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3da:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3de:	2330      	movs	r3, #48	; 0x30
 800f3e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f5a4 <_vfiprintf_r+0x24c>
 800f3e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3e8:	f04f 0901 	mov.w	r9, #1
 800f3ec:	4623      	mov	r3, r4
 800f3ee:	469a      	mov	sl, r3
 800f3f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3f4:	b10a      	cbz	r2, 800f3fa <_vfiprintf_r+0xa2>
 800f3f6:	2a25      	cmp	r2, #37	; 0x25
 800f3f8:	d1f9      	bne.n	800f3ee <_vfiprintf_r+0x96>
 800f3fa:	ebba 0b04 	subs.w	fp, sl, r4
 800f3fe:	d00b      	beq.n	800f418 <_vfiprintf_r+0xc0>
 800f400:	465b      	mov	r3, fp
 800f402:	4622      	mov	r2, r4
 800f404:	4629      	mov	r1, r5
 800f406:	4630      	mov	r0, r6
 800f408:	f7ff ff93 	bl	800f332 <__sfputs_r>
 800f40c:	3001      	adds	r0, #1
 800f40e:	f000 80aa 	beq.w	800f566 <_vfiprintf_r+0x20e>
 800f412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f414:	445a      	add	r2, fp
 800f416:	9209      	str	r2, [sp, #36]	; 0x24
 800f418:	f89a 3000 	ldrb.w	r3, [sl]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	f000 80a2 	beq.w	800f566 <_vfiprintf_r+0x20e>
 800f422:	2300      	movs	r3, #0
 800f424:	f04f 32ff 	mov.w	r2, #4294967295
 800f428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f42c:	f10a 0a01 	add.w	sl, sl, #1
 800f430:	9304      	str	r3, [sp, #16]
 800f432:	9307      	str	r3, [sp, #28]
 800f434:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f438:	931a      	str	r3, [sp, #104]	; 0x68
 800f43a:	4654      	mov	r4, sl
 800f43c:	2205      	movs	r2, #5
 800f43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f442:	4858      	ldr	r0, [pc, #352]	; (800f5a4 <_vfiprintf_r+0x24c>)
 800f444:	f7f0 ff54 	bl	80002f0 <memchr>
 800f448:	9a04      	ldr	r2, [sp, #16]
 800f44a:	b9d8      	cbnz	r0, 800f484 <_vfiprintf_r+0x12c>
 800f44c:	06d1      	lsls	r1, r2, #27
 800f44e:	bf44      	itt	mi
 800f450:	2320      	movmi	r3, #32
 800f452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f456:	0713      	lsls	r3, r2, #28
 800f458:	bf44      	itt	mi
 800f45a:	232b      	movmi	r3, #43	; 0x2b
 800f45c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f460:	f89a 3000 	ldrb.w	r3, [sl]
 800f464:	2b2a      	cmp	r3, #42	; 0x2a
 800f466:	d015      	beq.n	800f494 <_vfiprintf_r+0x13c>
 800f468:	9a07      	ldr	r2, [sp, #28]
 800f46a:	4654      	mov	r4, sl
 800f46c:	2000      	movs	r0, #0
 800f46e:	f04f 0c0a 	mov.w	ip, #10
 800f472:	4621      	mov	r1, r4
 800f474:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f478:	3b30      	subs	r3, #48	; 0x30
 800f47a:	2b09      	cmp	r3, #9
 800f47c:	d94e      	bls.n	800f51c <_vfiprintf_r+0x1c4>
 800f47e:	b1b0      	cbz	r0, 800f4ae <_vfiprintf_r+0x156>
 800f480:	9207      	str	r2, [sp, #28]
 800f482:	e014      	b.n	800f4ae <_vfiprintf_r+0x156>
 800f484:	eba0 0308 	sub.w	r3, r0, r8
 800f488:	fa09 f303 	lsl.w	r3, r9, r3
 800f48c:	4313      	orrs	r3, r2
 800f48e:	9304      	str	r3, [sp, #16]
 800f490:	46a2      	mov	sl, r4
 800f492:	e7d2      	b.n	800f43a <_vfiprintf_r+0xe2>
 800f494:	9b03      	ldr	r3, [sp, #12]
 800f496:	1d19      	adds	r1, r3, #4
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	9103      	str	r1, [sp, #12]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	bfbb      	ittet	lt
 800f4a0:	425b      	neglt	r3, r3
 800f4a2:	f042 0202 	orrlt.w	r2, r2, #2
 800f4a6:	9307      	strge	r3, [sp, #28]
 800f4a8:	9307      	strlt	r3, [sp, #28]
 800f4aa:	bfb8      	it	lt
 800f4ac:	9204      	strlt	r2, [sp, #16]
 800f4ae:	7823      	ldrb	r3, [r4, #0]
 800f4b0:	2b2e      	cmp	r3, #46	; 0x2e
 800f4b2:	d10c      	bne.n	800f4ce <_vfiprintf_r+0x176>
 800f4b4:	7863      	ldrb	r3, [r4, #1]
 800f4b6:	2b2a      	cmp	r3, #42	; 0x2a
 800f4b8:	d135      	bne.n	800f526 <_vfiprintf_r+0x1ce>
 800f4ba:	9b03      	ldr	r3, [sp, #12]
 800f4bc:	1d1a      	adds	r2, r3, #4
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	9203      	str	r2, [sp, #12]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	bfb8      	it	lt
 800f4c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4ca:	3402      	adds	r4, #2
 800f4cc:	9305      	str	r3, [sp, #20]
 800f4ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f5b4 <_vfiprintf_r+0x25c>
 800f4d2:	7821      	ldrb	r1, [r4, #0]
 800f4d4:	2203      	movs	r2, #3
 800f4d6:	4650      	mov	r0, sl
 800f4d8:	f7f0 ff0a 	bl	80002f0 <memchr>
 800f4dc:	b140      	cbz	r0, 800f4f0 <_vfiprintf_r+0x198>
 800f4de:	2340      	movs	r3, #64	; 0x40
 800f4e0:	eba0 000a 	sub.w	r0, r0, sl
 800f4e4:	fa03 f000 	lsl.w	r0, r3, r0
 800f4e8:	9b04      	ldr	r3, [sp, #16]
 800f4ea:	4303      	orrs	r3, r0
 800f4ec:	3401      	adds	r4, #1
 800f4ee:	9304      	str	r3, [sp, #16]
 800f4f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4f4:	482c      	ldr	r0, [pc, #176]	; (800f5a8 <_vfiprintf_r+0x250>)
 800f4f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4fa:	2206      	movs	r2, #6
 800f4fc:	f7f0 fef8 	bl	80002f0 <memchr>
 800f500:	2800      	cmp	r0, #0
 800f502:	d03f      	beq.n	800f584 <_vfiprintf_r+0x22c>
 800f504:	4b29      	ldr	r3, [pc, #164]	; (800f5ac <_vfiprintf_r+0x254>)
 800f506:	bb1b      	cbnz	r3, 800f550 <_vfiprintf_r+0x1f8>
 800f508:	9b03      	ldr	r3, [sp, #12]
 800f50a:	3307      	adds	r3, #7
 800f50c:	f023 0307 	bic.w	r3, r3, #7
 800f510:	3308      	adds	r3, #8
 800f512:	9303      	str	r3, [sp, #12]
 800f514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f516:	443b      	add	r3, r7
 800f518:	9309      	str	r3, [sp, #36]	; 0x24
 800f51a:	e767      	b.n	800f3ec <_vfiprintf_r+0x94>
 800f51c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f520:	460c      	mov	r4, r1
 800f522:	2001      	movs	r0, #1
 800f524:	e7a5      	b.n	800f472 <_vfiprintf_r+0x11a>
 800f526:	2300      	movs	r3, #0
 800f528:	3401      	adds	r4, #1
 800f52a:	9305      	str	r3, [sp, #20]
 800f52c:	4619      	mov	r1, r3
 800f52e:	f04f 0c0a 	mov.w	ip, #10
 800f532:	4620      	mov	r0, r4
 800f534:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f538:	3a30      	subs	r2, #48	; 0x30
 800f53a:	2a09      	cmp	r2, #9
 800f53c:	d903      	bls.n	800f546 <_vfiprintf_r+0x1ee>
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d0c5      	beq.n	800f4ce <_vfiprintf_r+0x176>
 800f542:	9105      	str	r1, [sp, #20]
 800f544:	e7c3      	b.n	800f4ce <_vfiprintf_r+0x176>
 800f546:	fb0c 2101 	mla	r1, ip, r1, r2
 800f54a:	4604      	mov	r4, r0
 800f54c:	2301      	movs	r3, #1
 800f54e:	e7f0      	b.n	800f532 <_vfiprintf_r+0x1da>
 800f550:	ab03      	add	r3, sp, #12
 800f552:	9300      	str	r3, [sp, #0]
 800f554:	462a      	mov	r2, r5
 800f556:	4b16      	ldr	r3, [pc, #88]	; (800f5b0 <_vfiprintf_r+0x258>)
 800f558:	a904      	add	r1, sp, #16
 800f55a:	4630      	mov	r0, r6
 800f55c:	f7fd ffac 	bl	800d4b8 <_printf_float>
 800f560:	4607      	mov	r7, r0
 800f562:	1c78      	adds	r0, r7, #1
 800f564:	d1d6      	bne.n	800f514 <_vfiprintf_r+0x1bc>
 800f566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f568:	07d9      	lsls	r1, r3, #31
 800f56a:	d405      	bmi.n	800f578 <_vfiprintf_r+0x220>
 800f56c:	89ab      	ldrh	r3, [r5, #12]
 800f56e:	059a      	lsls	r2, r3, #22
 800f570:	d402      	bmi.n	800f578 <_vfiprintf_r+0x220>
 800f572:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f574:	f7ff fa76 	bl	800ea64 <__retarget_lock_release_recursive>
 800f578:	89ab      	ldrh	r3, [r5, #12]
 800f57a:	065b      	lsls	r3, r3, #25
 800f57c:	f53f af12 	bmi.w	800f3a4 <_vfiprintf_r+0x4c>
 800f580:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f582:	e711      	b.n	800f3a8 <_vfiprintf_r+0x50>
 800f584:	ab03      	add	r3, sp, #12
 800f586:	9300      	str	r3, [sp, #0]
 800f588:	462a      	mov	r2, r5
 800f58a:	4b09      	ldr	r3, [pc, #36]	; (800f5b0 <_vfiprintf_r+0x258>)
 800f58c:	a904      	add	r1, sp, #16
 800f58e:	4630      	mov	r0, r6
 800f590:	f7fe fa1e 	bl	800d9d0 <_printf_i>
 800f594:	e7e4      	b.n	800f560 <_vfiprintf_r+0x208>
 800f596:	bf00      	nop
 800f598:	0801000c 	.word	0x0801000c
 800f59c:	0801002c 	.word	0x0801002c
 800f5a0:	0800ffec 	.word	0x0800ffec
 800f5a4:	080101ac 	.word	0x080101ac
 800f5a8:	080101b6 	.word	0x080101b6
 800f5ac:	0800d4b9 	.word	0x0800d4b9
 800f5b0:	0800f333 	.word	0x0800f333
 800f5b4:	080101b2 	.word	0x080101b2

0800f5b8 <_sbrk_r>:
 800f5b8:	b538      	push	{r3, r4, r5, lr}
 800f5ba:	4d06      	ldr	r5, [pc, #24]	; (800f5d4 <_sbrk_r+0x1c>)
 800f5bc:	2300      	movs	r3, #0
 800f5be:	4604      	mov	r4, r0
 800f5c0:	4608      	mov	r0, r1
 800f5c2:	602b      	str	r3, [r5, #0]
 800f5c4:	f7f3 fe60 	bl	8003288 <_sbrk>
 800f5c8:	1c43      	adds	r3, r0, #1
 800f5ca:	d102      	bne.n	800f5d2 <_sbrk_r+0x1a>
 800f5cc:	682b      	ldr	r3, [r5, #0]
 800f5ce:	b103      	cbz	r3, 800f5d2 <_sbrk_r+0x1a>
 800f5d0:	6023      	str	r3, [r4, #0]
 800f5d2:	bd38      	pop	{r3, r4, r5, pc}
 800f5d4:	20000b08 	.word	0x20000b08

0800f5d8 <__sread>:
 800f5d8:	b510      	push	{r4, lr}
 800f5da:	460c      	mov	r4, r1
 800f5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5e0:	f000 faa6 	bl	800fb30 <_read_r>
 800f5e4:	2800      	cmp	r0, #0
 800f5e6:	bfab      	itete	ge
 800f5e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f5ea:	89a3      	ldrhlt	r3, [r4, #12]
 800f5ec:	181b      	addge	r3, r3, r0
 800f5ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f5f2:	bfac      	ite	ge
 800f5f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f5f6:	81a3      	strhlt	r3, [r4, #12]
 800f5f8:	bd10      	pop	{r4, pc}

0800f5fa <__swrite>:
 800f5fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5fe:	461f      	mov	r7, r3
 800f600:	898b      	ldrh	r3, [r1, #12]
 800f602:	05db      	lsls	r3, r3, #23
 800f604:	4605      	mov	r5, r0
 800f606:	460c      	mov	r4, r1
 800f608:	4616      	mov	r6, r2
 800f60a:	d505      	bpl.n	800f618 <__swrite+0x1e>
 800f60c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f610:	2302      	movs	r3, #2
 800f612:	2200      	movs	r2, #0
 800f614:	f000 f9f8 	bl	800fa08 <_lseek_r>
 800f618:	89a3      	ldrh	r3, [r4, #12]
 800f61a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f61e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f622:	81a3      	strh	r3, [r4, #12]
 800f624:	4632      	mov	r2, r6
 800f626:	463b      	mov	r3, r7
 800f628:	4628      	mov	r0, r5
 800f62a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f62e:	f000 b869 	b.w	800f704 <_write_r>

0800f632 <__sseek>:
 800f632:	b510      	push	{r4, lr}
 800f634:	460c      	mov	r4, r1
 800f636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f63a:	f000 f9e5 	bl	800fa08 <_lseek_r>
 800f63e:	1c43      	adds	r3, r0, #1
 800f640:	89a3      	ldrh	r3, [r4, #12]
 800f642:	bf15      	itete	ne
 800f644:	6560      	strne	r0, [r4, #84]	; 0x54
 800f646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f64a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f64e:	81a3      	strheq	r3, [r4, #12]
 800f650:	bf18      	it	ne
 800f652:	81a3      	strhne	r3, [r4, #12]
 800f654:	bd10      	pop	{r4, pc}

0800f656 <__sclose>:
 800f656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f65a:	f000 b8f1 	b.w	800f840 <_close_r>
	...

0800f660 <__swbuf_r>:
 800f660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f662:	460e      	mov	r6, r1
 800f664:	4614      	mov	r4, r2
 800f666:	4605      	mov	r5, r0
 800f668:	b118      	cbz	r0, 800f672 <__swbuf_r+0x12>
 800f66a:	6983      	ldr	r3, [r0, #24]
 800f66c:	b90b      	cbnz	r3, 800f672 <__swbuf_r+0x12>
 800f66e:	f7ff f955 	bl	800e91c <__sinit>
 800f672:	4b21      	ldr	r3, [pc, #132]	; (800f6f8 <__swbuf_r+0x98>)
 800f674:	429c      	cmp	r4, r3
 800f676:	d12b      	bne.n	800f6d0 <__swbuf_r+0x70>
 800f678:	686c      	ldr	r4, [r5, #4]
 800f67a:	69a3      	ldr	r3, [r4, #24]
 800f67c:	60a3      	str	r3, [r4, #8]
 800f67e:	89a3      	ldrh	r3, [r4, #12]
 800f680:	071a      	lsls	r2, r3, #28
 800f682:	d52f      	bpl.n	800f6e4 <__swbuf_r+0x84>
 800f684:	6923      	ldr	r3, [r4, #16]
 800f686:	b36b      	cbz	r3, 800f6e4 <__swbuf_r+0x84>
 800f688:	6923      	ldr	r3, [r4, #16]
 800f68a:	6820      	ldr	r0, [r4, #0]
 800f68c:	1ac0      	subs	r0, r0, r3
 800f68e:	6963      	ldr	r3, [r4, #20]
 800f690:	b2f6      	uxtb	r6, r6
 800f692:	4283      	cmp	r3, r0
 800f694:	4637      	mov	r7, r6
 800f696:	dc04      	bgt.n	800f6a2 <__swbuf_r+0x42>
 800f698:	4621      	mov	r1, r4
 800f69a:	4628      	mov	r0, r5
 800f69c:	f000 f966 	bl	800f96c <_fflush_r>
 800f6a0:	bb30      	cbnz	r0, 800f6f0 <__swbuf_r+0x90>
 800f6a2:	68a3      	ldr	r3, [r4, #8]
 800f6a4:	3b01      	subs	r3, #1
 800f6a6:	60a3      	str	r3, [r4, #8]
 800f6a8:	6823      	ldr	r3, [r4, #0]
 800f6aa:	1c5a      	adds	r2, r3, #1
 800f6ac:	6022      	str	r2, [r4, #0]
 800f6ae:	701e      	strb	r6, [r3, #0]
 800f6b0:	6963      	ldr	r3, [r4, #20]
 800f6b2:	3001      	adds	r0, #1
 800f6b4:	4283      	cmp	r3, r0
 800f6b6:	d004      	beq.n	800f6c2 <__swbuf_r+0x62>
 800f6b8:	89a3      	ldrh	r3, [r4, #12]
 800f6ba:	07db      	lsls	r3, r3, #31
 800f6bc:	d506      	bpl.n	800f6cc <__swbuf_r+0x6c>
 800f6be:	2e0a      	cmp	r6, #10
 800f6c0:	d104      	bne.n	800f6cc <__swbuf_r+0x6c>
 800f6c2:	4621      	mov	r1, r4
 800f6c4:	4628      	mov	r0, r5
 800f6c6:	f000 f951 	bl	800f96c <_fflush_r>
 800f6ca:	b988      	cbnz	r0, 800f6f0 <__swbuf_r+0x90>
 800f6cc:	4638      	mov	r0, r7
 800f6ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6d0:	4b0a      	ldr	r3, [pc, #40]	; (800f6fc <__swbuf_r+0x9c>)
 800f6d2:	429c      	cmp	r4, r3
 800f6d4:	d101      	bne.n	800f6da <__swbuf_r+0x7a>
 800f6d6:	68ac      	ldr	r4, [r5, #8]
 800f6d8:	e7cf      	b.n	800f67a <__swbuf_r+0x1a>
 800f6da:	4b09      	ldr	r3, [pc, #36]	; (800f700 <__swbuf_r+0xa0>)
 800f6dc:	429c      	cmp	r4, r3
 800f6de:	bf08      	it	eq
 800f6e0:	68ec      	ldreq	r4, [r5, #12]
 800f6e2:	e7ca      	b.n	800f67a <__swbuf_r+0x1a>
 800f6e4:	4621      	mov	r1, r4
 800f6e6:	4628      	mov	r0, r5
 800f6e8:	f000 f81e 	bl	800f728 <__swsetup_r>
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	d0cb      	beq.n	800f688 <__swbuf_r+0x28>
 800f6f0:	f04f 37ff 	mov.w	r7, #4294967295
 800f6f4:	e7ea      	b.n	800f6cc <__swbuf_r+0x6c>
 800f6f6:	bf00      	nop
 800f6f8:	0801000c 	.word	0x0801000c
 800f6fc:	0801002c 	.word	0x0801002c
 800f700:	0800ffec 	.word	0x0800ffec

0800f704 <_write_r>:
 800f704:	b538      	push	{r3, r4, r5, lr}
 800f706:	4d07      	ldr	r5, [pc, #28]	; (800f724 <_write_r+0x20>)
 800f708:	4604      	mov	r4, r0
 800f70a:	4608      	mov	r0, r1
 800f70c:	4611      	mov	r1, r2
 800f70e:	2200      	movs	r2, #0
 800f710:	602a      	str	r2, [r5, #0]
 800f712:	461a      	mov	r2, r3
 800f714:	f7f3 fd67 	bl	80031e6 <_write>
 800f718:	1c43      	adds	r3, r0, #1
 800f71a:	d102      	bne.n	800f722 <_write_r+0x1e>
 800f71c:	682b      	ldr	r3, [r5, #0]
 800f71e:	b103      	cbz	r3, 800f722 <_write_r+0x1e>
 800f720:	6023      	str	r3, [r4, #0]
 800f722:	bd38      	pop	{r3, r4, r5, pc}
 800f724:	20000b08 	.word	0x20000b08

0800f728 <__swsetup_r>:
 800f728:	4b32      	ldr	r3, [pc, #200]	; (800f7f4 <__swsetup_r+0xcc>)
 800f72a:	b570      	push	{r4, r5, r6, lr}
 800f72c:	681d      	ldr	r5, [r3, #0]
 800f72e:	4606      	mov	r6, r0
 800f730:	460c      	mov	r4, r1
 800f732:	b125      	cbz	r5, 800f73e <__swsetup_r+0x16>
 800f734:	69ab      	ldr	r3, [r5, #24]
 800f736:	b913      	cbnz	r3, 800f73e <__swsetup_r+0x16>
 800f738:	4628      	mov	r0, r5
 800f73a:	f7ff f8ef 	bl	800e91c <__sinit>
 800f73e:	4b2e      	ldr	r3, [pc, #184]	; (800f7f8 <__swsetup_r+0xd0>)
 800f740:	429c      	cmp	r4, r3
 800f742:	d10f      	bne.n	800f764 <__swsetup_r+0x3c>
 800f744:	686c      	ldr	r4, [r5, #4]
 800f746:	89a3      	ldrh	r3, [r4, #12]
 800f748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f74c:	0719      	lsls	r1, r3, #28
 800f74e:	d42c      	bmi.n	800f7aa <__swsetup_r+0x82>
 800f750:	06dd      	lsls	r5, r3, #27
 800f752:	d411      	bmi.n	800f778 <__swsetup_r+0x50>
 800f754:	2309      	movs	r3, #9
 800f756:	6033      	str	r3, [r6, #0]
 800f758:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f75c:	81a3      	strh	r3, [r4, #12]
 800f75e:	f04f 30ff 	mov.w	r0, #4294967295
 800f762:	e03e      	b.n	800f7e2 <__swsetup_r+0xba>
 800f764:	4b25      	ldr	r3, [pc, #148]	; (800f7fc <__swsetup_r+0xd4>)
 800f766:	429c      	cmp	r4, r3
 800f768:	d101      	bne.n	800f76e <__swsetup_r+0x46>
 800f76a:	68ac      	ldr	r4, [r5, #8]
 800f76c:	e7eb      	b.n	800f746 <__swsetup_r+0x1e>
 800f76e:	4b24      	ldr	r3, [pc, #144]	; (800f800 <__swsetup_r+0xd8>)
 800f770:	429c      	cmp	r4, r3
 800f772:	bf08      	it	eq
 800f774:	68ec      	ldreq	r4, [r5, #12]
 800f776:	e7e6      	b.n	800f746 <__swsetup_r+0x1e>
 800f778:	0758      	lsls	r0, r3, #29
 800f77a:	d512      	bpl.n	800f7a2 <__swsetup_r+0x7a>
 800f77c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f77e:	b141      	cbz	r1, 800f792 <__swsetup_r+0x6a>
 800f780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f784:	4299      	cmp	r1, r3
 800f786:	d002      	beq.n	800f78e <__swsetup_r+0x66>
 800f788:	4630      	mov	r0, r6
 800f78a:	f7ff fd11 	bl	800f1b0 <_free_r>
 800f78e:	2300      	movs	r3, #0
 800f790:	6363      	str	r3, [r4, #52]	; 0x34
 800f792:	89a3      	ldrh	r3, [r4, #12]
 800f794:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f798:	81a3      	strh	r3, [r4, #12]
 800f79a:	2300      	movs	r3, #0
 800f79c:	6063      	str	r3, [r4, #4]
 800f79e:	6923      	ldr	r3, [r4, #16]
 800f7a0:	6023      	str	r3, [r4, #0]
 800f7a2:	89a3      	ldrh	r3, [r4, #12]
 800f7a4:	f043 0308 	orr.w	r3, r3, #8
 800f7a8:	81a3      	strh	r3, [r4, #12]
 800f7aa:	6923      	ldr	r3, [r4, #16]
 800f7ac:	b94b      	cbnz	r3, 800f7c2 <__swsetup_r+0x9a>
 800f7ae:	89a3      	ldrh	r3, [r4, #12]
 800f7b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f7b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7b8:	d003      	beq.n	800f7c2 <__swsetup_r+0x9a>
 800f7ba:	4621      	mov	r1, r4
 800f7bc:	4630      	mov	r0, r6
 800f7be:	f000 f959 	bl	800fa74 <__smakebuf_r>
 800f7c2:	89a0      	ldrh	r0, [r4, #12]
 800f7c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7c8:	f010 0301 	ands.w	r3, r0, #1
 800f7cc:	d00a      	beq.n	800f7e4 <__swsetup_r+0xbc>
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	60a3      	str	r3, [r4, #8]
 800f7d2:	6963      	ldr	r3, [r4, #20]
 800f7d4:	425b      	negs	r3, r3
 800f7d6:	61a3      	str	r3, [r4, #24]
 800f7d8:	6923      	ldr	r3, [r4, #16]
 800f7da:	b943      	cbnz	r3, 800f7ee <__swsetup_r+0xc6>
 800f7dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f7e0:	d1ba      	bne.n	800f758 <__swsetup_r+0x30>
 800f7e2:	bd70      	pop	{r4, r5, r6, pc}
 800f7e4:	0781      	lsls	r1, r0, #30
 800f7e6:	bf58      	it	pl
 800f7e8:	6963      	ldrpl	r3, [r4, #20]
 800f7ea:	60a3      	str	r3, [r4, #8]
 800f7ec:	e7f4      	b.n	800f7d8 <__swsetup_r+0xb0>
 800f7ee:	2000      	movs	r0, #0
 800f7f0:	e7f7      	b.n	800f7e2 <__swsetup_r+0xba>
 800f7f2:	bf00      	nop
 800f7f4:	20000018 	.word	0x20000018
 800f7f8:	0801000c 	.word	0x0801000c
 800f7fc:	0801002c 	.word	0x0801002c
 800f800:	0800ffec 	.word	0x0800ffec

0800f804 <__assert_func>:
 800f804:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f806:	4614      	mov	r4, r2
 800f808:	461a      	mov	r2, r3
 800f80a:	4b09      	ldr	r3, [pc, #36]	; (800f830 <__assert_func+0x2c>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	4605      	mov	r5, r0
 800f810:	68d8      	ldr	r0, [r3, #12]
 800f812:	b14c      	cbz	r4, 800f828 <__assert_func+0x24>
 800f814:	4b07      	ldr	r3, [pc, #28]	; (800f834 <__assert_func+0x30>)
 800f816:	9100      	str	r1, [sp, #0]
 800f818:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f81c:	4906      	ldr	r1, [pc, #24]	; (800f838 <__assert_func+0x34>)
 800f81e:	462b      	mov	r3, r5
 800f820:	f000 f8e0 	bl	800f9e4 <fiprintf>
 800f824:	f000 f9a3 	bl	800fb6e <abort>
 800f828:	4b04      	ldr	r3, [pc, #16]	; (800f83c <__assert_func+0x38>)
 800f82a:	461c      	mov	r4, r3
 800f82c:	e7f3      	b.n	800f816 <__assert_func+0x12>
 800f82e:	bf00      	nop
 800f830:	20000018 	.word	0x20000018
 800f834:	080101bd 	.word	0x080101bd
 800f838:	080101ca 	.word	0x080101ca
 800f83c:	080101f8 	.word	0x080101f8

0800f840 <_close_r>:
 800f840:	b538      	push	{r3, r4, r5, lr}
 800f842:	4d06      	ldr	r5, [pc, #24]	; (800f85c <_close_r+0x1c>)
 800f844:	2300      	movs	r3, #0
 800f846:	4604      	mov	r4, r0
 800f848:	4608      	mov	r0, r1
 800f84a:	602b      	str	r3, [r5, #0]
 800f84c:	f7f3 fce7 	bl	800321e <_close>
 800f850:	1c43      	adds	r3, r0, #1
 800f852:	d102      	bne.n	800f85a <_close_r+0x1a>
 800f854:	682b      	ldr	r3, [r5, #0]
 800f856:	b103      	cbz	r3, 800f85a <_close_r+0x1a>
 800f858:	6023      	str	r3, [r4, #0]
 800f85a:	bd38      	pop	{r3, r4, r5, pc}
 800f85c:	20000b08 	.word	0x20000b08

0800f860 <__sflush_r>:
 800f860:	898a      	ldrh	r2, [r1, #12]
 800f862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f866:	4605      	mov	r5, r0
 800f868:	0710      	lsls	r0, r2, #28
 800f86a:	460c      	mov	r4, r1
 800f86c:	d458      	bmi.n	800f920 <__sflush_r+0xc0>
 800f86e:	684b      	ldr	r3, [r1, #4]
 800f870:	2b00      	cmp	r3, #0
 800f872:	dc05      	bgt.n	800f880 <__sflush_r+0x20>
 800f874:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f876:	2b00      	cmp	r3, #0
 800f878:	dc02      	bgt.n	800f880 <__sflush_r+0x20>
 800f87a:	2000      	movs	r0, #0
 800f87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f880:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f882:	2e00      	cmp	r6, #0
 800f884:	d0f9      	beq.n	800f87a <__sflush_r+0x1a>
 800f886:	2300      	movs	r3, #0
 800f888:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f88c:	682f      	ldr	r7, [r5, #0]
 800f88e:	602b      	str	r3, [r5, #0]
 800f890:	d032      	beq.n	800f8f8 <__sflush_r+0x98>
 800f892:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f894:	89a3      	ldrh	r3, [r4, #12]
 800f896:	075a      	lsls	r2, r3, #29
 800f898:	d505      	bpl.n	800f8a6 <__sflush_r+0x46>
 800f89a:	6863      	ldr	r3, [r4, #4]
 800f89c:	1ac0      	subs	r0, r0, r3
 800f89e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f8a0:	b10b      	cbz	r3, 800f8a6 <__sflush_r+0x46>
 800f8a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f8a4:	1ac0      	subs	r0, r0, r3
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f8ac:	6a21      	ldr	r1, [r4, #32]
 800f8ae:	4628      	mov	r0, r5
 800f8b0:	47b0      	blx	r6
 800f8b2:	1c43      	adds	r3, r0, #1
 800f8b4:	89a3      	ldrh	r3, [r4, #12]
 800f8b6:	d106      	bne.n	800f8c6 <__sflush_r+0x66>
 800f8b8:	6829      	ldr	r1, [r5, #0]
 800f8ba:	291d      	cmp	r1, #29
 800f8bc:	d82c      	bhi.n	800f918 <__sflush_r+0xb8>
 800f8be:	4a2a      	ldr	r2, [pc, #168]	; (800f968 <__sflush_r+0x108>)
 800f8c0:	40ca      	lsrs	r2, r1
 800f8c2:	07d6      	lsls	r6, r2, #31
 800f8c4:	d528      	bpl.n	800f918 <__sflush_r+0xb8>
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	6062      	str	r2, [r4, #4]
 800f8ca:	04d9      	lsls	r1, r3, #19
 800f8cc:	6922      	ldr	r2, [r4, #16]
 800f8ce:	6022      	str	r2, [r4, #0]
 800f8d0:	d504      	bpl.n	800f8dc <__sflush_r+0x7c>
 800f8d2:	1c42      	adds	r2, r0, #1
 800f8d4:	d101      	bne.n	800f8da <__sflush_r+0x7a>
 800f8d6:	682b      	ldr	r3, [r5, #0]
 800f8d8:	b903      	cbnz	r3, 800f8dc <__sflush_r+0x7c>
 800f8da:	6560      	str	r0, [r4, #84]	; 0x54
 800f8dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8de:	602f      	str	r7, [r5, #0]
 800f8e0:	2900      	cmp	r1, #0
 800f8e2:	d0ca      	beq.n	800f87a <__sflush_r+0x1a>
 800f8e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f8e8:	4299      	cmp	r1, r3
 800f8ea:	d002      	beq.n	800f8f2 <__sflush_r+0x92>
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	f7ff fc5f 	bl	800f1b0 <_free_r>
 800f8f2:	2000      	movs	r0, #0
 800f8f4:	6360      	str	r0, [r4, #52]	; 0x34
 800f8f6:	e7c1      	b.n	800f87c <__sflush_r+0x1c>
 800f8f8:	6a21      	ldr	r1, [r4, #32]
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	4628      	mov	r0, r5
 800f8fe:	47b0      	blx	r6
 800f900:	1c41      	adds	r1, r0, #1
 800f902:	d1c7      	bne.n	800f894 <__sflush_r+0x34>
 800f904:	682b      	ldr	r3, [r5, #0]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d0c4      	beq.n	800f894 <__sflush_r+0x34>
 800f90a:	2b1d      	cmp	r3, #29
 800f90c:	d001      	beq.n	800f912 <__sflush_r+0xb2>
 800f90e:	2b16      	cmp	r3, #22
 800f910:	d101      	bne.n	800f916 <__sflush_r+0xb6>
 800f912:	602f      	str	r7, [r5, #0]
 800f914:	e7b1      	b.n	800f87a <__sflush_r+0x1a>
 800f916:	89a3      	ldrh	r3, [r4, #12]
 800f918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f91c:	81a3      	strh	r3, [r4, #12]
 800f91e:	e7ad      	b.n	800f87c <__sflush_r+0x1c>
 800f920:	690f      	ldr	r7, [r1, #16]
 800f922:	2f00      	cmp	r7, #0
 800f924:	d0a9      	beq.n	800f87a <__sflush_r+0x1a>
 800f926:	0793      	lsls	r3, r2, #30
 800f928:	680e      	ldr	r6, [r1, #0]
 800f92a:	bf08      	it	eq
 800f92c:	694b      	ldreq	r3, [r1, #20]
 800f92e:	600f      	str	r7, [r1, #0]
 800f930:	bf18      	it	ne
 800f932:	2300      	movne	r3, #0
 800f934:	eba6 0807 	sub.w	r8, r6, r7
 800f938:	608b      	str	r3, [r1, #8]
 800f93a:	f1b8 0f00 	cmp.w	r8, #0
 800f93e:	dd9c      	ble.n	800f87a <__sflush_r+0x1a>
 800f940:	6a21      	ldr	r1, [r4, #32]
 800f942:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f944:	4643      	mov	r3, r8
 800f946:	463a      	mov	r2, r7
 800f948:	4628      	mov	r0, r5
 800f94a:	47b0      	blx	r6
 800f94c:	2800      	cmp	r0, #0
 800f94e:	dc06      	bgt.n	800f95e <__sflush_r+0xfe>
 800f950:	89a3      	ldrh	r3, [r4, #12]
 800f952:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f956:	81a3      	strh	r3, [r4, #12]
 800f958:	f04f 30ff 	mov.w	r0, #4294967295
 800f95c:	e78e      	b.n	800f87c <__sflush_r+0x1c>
 800f95e:	4407      	add	r7, r0
 800f960:	eba8 0800 	sub.w	r8, r8, r0
 800f964:	e7e9      	b.n	800f93a <__sflush_r+0xda>
 800f966:	bf00      	nop
 800f968:	20400001 	.word	0x20400001

0800f96c <_fflush_r>:
 800f96c:	b538      	push	{r3, r4, r5, lr}
 800f96e:	690b      	ldr	r3, [r1, #16]
 800f970:	4605      	mov	r5, r0
 800f972:	460c      	mov	r4, r1
 800f974:	b913      	cbnz	r3, 800f97c <_fflush_r+0x10>
 800f976:	2500      	movs	r5, #0
 800f978:	4628      	mov	r0, r5
 800f97a:	bd38      	pop	{r3, r4, r5, pc}
 800f97c:	b118      	cbz	r0, 800f986 <_fflush_r+0x1a>
 800f97e:	6983      	ldr	r3, [r0, #24]
 800f980:	b90b      	cbnz	r3, 800f986 <_fflush_r+0x1a>
 800f982:	f7fe ffcb 	bl	800e91c <__sinit>
 800f986:	4b14      	ldr	r3, [pc, #80]	; (800f9d8 <_fflush_r+0x6c>)
 800f988:	429c      	cmp	r4, r3
 800f98a:	d11b      	bne.n	800f9c4 <_fflush_r+0x58>
 800f98c:	686c      	ldr	r4, [r5, #4]
 800f98e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d0ef      	beq.n	800f976 <_fflush_r+0xa>
 800f996:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f998:	07d0      	lsls	r0, r2, #31
 800f99a:	d404      	bmi.n	800f9a6 <_fflush_r+0x3a>
 800f99c:	0599      	lsls	r1, r3, #22
 800f99e:	d402      	bmi.n	800f9a6 <_fflush_r+0x3a>
 800f9a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9a2:	f7ff f85e 	bl	800ea62 <__retarget_lock_acquire_recursive>
 800f9a6:	4628      	mov	r0, r5
 800f9a8:	4621      	mov	r1, r4
 800f9aa:	f7ff ff59 	bl	800f860 <__sflush_r>
 800f9ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f9b0:	07da      	lsls	r2, r3, #31
 800f9b2:	4605      	mov	r5, r0
 800f9b4:	d4e0      	bmi.n	800f978 <_fflush_r+0xc>
 800f9b6:	89a3      	ldrh	r3, [r4, #12]
 800f9b8:	059b      	lsls	r3, r3, #22
 800f9ba:	d4dd      	bmi.n	800f978 <_fflush_r+0xc>
 800f9bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f9be:	f7ff f851 	bl	800ea64 <__retarget_lock_release_recursive>
 800f9c2:	e7d9      	b.n	800f978 <_fflush_r+0xc>
 800f9c4:	4b05      	ldr	r3, [pc, #20]	; (800f9dc <_fflush_r+0x70>)
 800f9c6:	429c      	cmp	r4, r3
 800f9c8:	d101      	bne.n	800f9ce <_fflush_r+0x62>
 800f9ca:	68ac      	ldr	r4, [r5, #8]
 800f9cc:	e7df      	b.n	800f98e <_fflush_r+0x22>
 800f9ce:	4b04      	ldr	r3, [pc, #16]	; (800f9e0 <_fflush_r+0x74>)
 800f9d0:	429c      	cmp	r4, r3
 800f9d2:	bf08      	it	eq
 800f9d4:	68ec      	ldreq	r4, [r5, #12]
 800f9d6:	e7da      	b.n	800f98e <_fflush_r+0x22>
 800f9d8:	0801000c 	.word	0x0801000c
 800f9dc:	0801002c 	.word	0x0801002c
 800f9e0:	0800ffec 	.word	0x0800ffec

0800f9e4 <fiprintf>:
 800f9e4:	b40e      	push	{r1, r2, r3}
 800f9e6:	b503      	push	{r0, r1, lr}
 800f9e8:	4601      	mov	r1, r0
 800f9ea:	ab03      	add	r3, sp, #12
 800f9ec:	4805      	ldr	r0, [pc, #20]	; (800fa04 <fiprintf+0x20>)
 800f9ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9f2:	6800      	ldr	r0, [r0, #0]
 800f9f4:	9301      	str	r3, [sp, #4]
 800f9f6:	f7ff fcaf 	bl	800f358 <_vfiprintf_r>
 800f9fa:	b002      	add	sp, #8
 800f9fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fa00:	b003      	add	sp, #12
 800fa02:	4770      	bx	lr
 800fa04:	20000018 	.word	0x20000018

0800fa08 <_lseek_r>:
 800fa08:	b538      	push	{r3, r4, r5, lr}
 800fa0a:	4d07      	ldr	r5, [pc, #28]	; (800fa28 <_lseek_r+0x20>)
 800fa0c:	4604      	mov	r4, r0
 800fa0e:	4608      	mov	r0, r1
 800fa10:	4611      	mov	r1, r2
 800fa12:	2200      	movs	r2, #0
 800fa14:	602a      	str	r2, [r5, #0]
 800fa16:	461a      	mov	r2, r3
 800fa18:	f7f3 fc28 	bl	800326c <_lseek>
 800fa1c:	1c43      	adds	r3, r0, #1
 800fa1e:	d102      	bne.n	800fa26 <_lseek_r+0x1e>
 800fa20:	682b      	ldr	r3, [r5, #0]
 800fa22:	b103      	cbz	r3, 800fa26 <_lseek_r+0x1e>
 800fa24:	6023      	str	r3, [r4, #0]
 800fa26:	bd38      	pop	{r3, r4, r5, pc}
 800fa28:	20000b08 	.word	0x20000b08

0800fa2c <__swhatbuf_r>:
 800fa2c:	b570      	push	{r4, r5, r6, lr}
 800fa2e:	460e      	mov	r6, r1
 800fa30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa34:	2900      	cmp	r1, #0
 800fa36:	b096      	sub	sp, #88	; 0x58
 800fa38:	4614      	mov	r4, r2
 800fa3a:	461d      	mov	r5, r3
 800fa3c:	da07      	bge.n	800fa4e <__swhatbuf_r+0x22>
 800fa3e:	2300      	movs	r3, #0
 800fa40:	602b      	str	r3, [r5, #0]
 800fa42:	89b3      	ldrh	r3, [r6, #12]
 800fa44:	061a      	lsls	r2, r3, #24
 800fa46:	d410      	bmi.n	800fa6a <__swhatbuf_r+0x3e>
 800fa48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa4c:	e00e      	b.n	800fa6c <__swhatbuf_r+0x40>
 800fa4e:	466a      	mov	r2, sp
 800fa50:	f000 f894 	bl	800fb7c <_fstat_r>
 800fa54:	2800      	cmp	r0, #0
 800fa56:	dbf2      	blt.n	800fa3e <__swhatbuf_r+0x12>
 800fa58:	9a01      	ldr	r2, [sp, #4]
 800fa5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fa5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fa62:	425a      	negs	r2, r3
 800fa64:	415a      	adcs	r2, r3
 800fa66:	602a      	str	r2, [r5, #0]
 800fa68:	e7ee      	b.n	800fa48 <__swhatbuf_r+0x1c>
 800fa6a:	2340      	movs	r3, #64	; 0x40
 800fa6c:	2000      	movs	r0, #0
 800fa6e:	6023      	str	r3, [r4, #0]
 800fa70:	b016      	add	sp, #88	; 0x58
 800fa72:	bd70      	pop	{r4, r5, r6, pc}

0800fa74 <__smakebuf_r>:
 800fa74:	898b      	ldrh	r3, [r1, #12]
 800fa76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fa78:	079d      	lsls	r5, r3, #30
 800fa7a:	4606      	mov	r6, r0
 800fa7c:	460c      	mov	r4, r1
 800fa7e:	d507      	bpl.n	800fa90 <__smakebuf_r+0x1c>
 800fa80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fa84:	6023      	str	r3, [r4, #0]
 800fa86:	6123      	str	r3, [r4, #16]
 800fa88:	2301      	movs	r3, #1
 800fa8a:	6163      	str	r3, [r4, #20]
 800fa8c:	b002      	add	sp, #8
 800fa8e:	bd70      	pop	{r4, r5, r6, pc}
 800fa90:	ab01      	add	r3, sp, #4
 800fa92:	466a      	mov	r2, sp
 800fa94:	f7ff ffca 	bl	800fa2c <__swhatbuf_r>
 800fa98:	9900      	ldr	r1, [sp, #0]
 800fa9a:	4605      	mov	r5, r0
 800fa9c:	4630      	mov	r0, r6
 800fa9e:	f7ff fbd7 	bl	800f250 <_malloc_r>
 800faa2:	b948      	cbnz	r0, 800fab8 <__smakebuf_r+0x44>
 800faa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faa8:	059a      	lsls	r2, r3, #22
 800faaa:	d4ef      	bmi.n	800fa8c <__smakebuf_r+0x18>
 800faac:	f023 0303 	bic.w	r3, r3, #3
 800fab0:	f043 0302 	orr.w	r3, r3, #2
 800fab4:	81a3      	strh	r3, [r4, #12]
 800fab6:	e7e3      	b.n	800fa80 <__smakebuf_r+0xc>
 800fab8:	4b0d      	ldr	r3, [pc, #52]	; (800faf0 <__smakebuf_r+0x7c>)
 800faba:	62b3      	str	r3, [r6, #40]	; 0x28
 800fabc:	89a3      	ldrh	r3, [r4, #12]
 800fabe:	6020      	str	r0, [r4, #0]
 800fac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fac4:	81a3      	strh	r3, [r4, #12]
 800fac6:	9b00      	ldr	r3, [sp, #0]
 800fac8:	6163      	str	r3, [r4, #20]
 800faca:	9b01      	ldr	r3, [sp, #4]
 800facc:	6120      	str	r0, [r4, #16]
 800face:	b15b      	cbz	r3, 800fae8 <__smakebuf_r+0x74>
 800fad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fad4:	4630      	mov	r0, r6
 800fad6:	f000 f863 	bl	800fba0 <_isatty_r>
 800fada:	b128      	cbz	r0, 800fae8 <__smakebuf_r+0x74>
 800fadc:	89a3      	ldrh	r3, [r4, #12]
 800fade:	f023 0303 	bic.w	r3, r3, #3
 800fae2:	f043 0301 	orr.w	r3, r3, #1
 800fae6:	81a3      	strh	r3, [r4, #12]
 800fae8:	89a0      	ldrh	r0, [r4, #12]
 800faea:	4305      	orrs	r5, r0
 800faec:	81a5      	strh	r5, [r4, #12]
 800faee:	e7cd      	b.n	800fa8c <__smakebuf_r+0x18>
 800faf0:	0800e8b5 	.word	0x0800e8b5

0800faf4 <__ascii_mbtowc>:
 800faf4:	b082      	sub	sp, #8
 800faf6:	b901      	cbnz	r1, 800fafa <__ascii_mbtowc+0x6>
 800faf8:	a901      	add	r1, sp, #4
 800fafa:	b142      	cbz	r2, 800fb0e <__ascii_mbtowc+0x1a>
 800fafc:	b14b      	cbz	r3, 800fb12 <__ascii_mbtowc+0x1e>
 800fafe:	7813      	ldrb	r3, [r2, #0]
 800fb00:	600b      	str	r3, [r1, #0]
 800fb02:	7812      	ldrb	r2, [r2, #0]
 800fb04:	1e10      	subs	r0, r2, #0
 800fb06:	bf18      	it	ne
 800fb08:	2001      	movne	r0, #1
 800fb0a:	b002      	add	sp, #8
 800fb0c:	4770      	bx	lr
 800fb0e:	4610      	mov	r0, r2
 800fb10:	e7fb      	b.n	800fb0a <__ascii_mbtowc+0x16>
 800fb12:	f06f 0001 	mvn.w	r0, #1
 800fb16:	e7f8      	b.n	800fb0a <__ascii_mbtowc+0x16>

0800fb18 <__malloc_lock>:
 800fb18:	4801      	ldr	r0, [pc, #4]	; (800fb20 <__malloc_lock+0x8>)
 800fb1a:	f7fe bfa2 	b.w	800ea62 <__retarget_lock_acquire_recursive>
 800fb1e:	bf00      	nop
 800fb20:	20000b00 	.word	0x20000b00

0800fb24 <__malloc_unlock>:
 800fb24:	4801      	ldr	r0, [pc, #4]	; (800fb2c <__malloc_unlock+0x8>)
 800fb26:	f7fe bf9d 	b.w	800ea64 <__retarget_lock_release_recursive>
 800fb2a:	bf00      	nop
 800fb2c:	20000b00 	.word	0x20000b00

0800fb30 <_read_r>:
 800fb30:	b538      	push	{r3, r4, r5, lr}
 800fb32:	4d07      	ldr	r5, [pc, #28]	; (800fb50 <_read_r+0x20>)
 800fb34:	4604      	mov	r4, r0
 800fb36:	4608      	mov	r0, r1
 800fb38:	4611      	mov	r1, r2
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	602a      	str	r2, [r5, #0]
 800fb3e:	461a      	mov	r2, r3
 800fb40:	f7f3 fb34 	bl	80031ac <_read>
 800fb44:	1c43      	adds	r3, r0, #1
 800fb46:	d102      	bne.n	800fb4e <_read_r+0x1e>
 800fb48:	682b      	ldr	r3, [r5, #0]
 800fb4a:	b103      	cbz	r3, 800fb4e <_read_r+0x1e>
 800fb4c:	6023      	str	r3, [r4, #0]
 800fb4e:	bd38      	pop	{r3, r4, r5, pc}
 800fb50:	20000b08 	.word	0x20000b08

0800fb54 <__ascii_wctomb>:
 800fb54:	b149      	cbz	r1, 800fb6a <__ascii_wctomb+0x16>
 800fb56:	2aff      	cmp	r2, #255	; 0xff
 800fb58:	bf85      	ittet	hi
 800fb5a:	238a      	movhi	r3, #138	; 0x8a
 800fb5c:	6003      	strhi	r3, [r0, #0]
 800fb5e:	700a      	strbls	r2, [r1, #0]
 800fb60:	f04f 30ff 	movhi.w	r0, #4294967295
 800fb64:	bf98      	it	ls
 800fb66:	2001      	movls	r0, #1
 800fb68:	4770      	bx	lr
 800fb6a:	4608      	mov	r0, r1
 800fb6c:	4770      	bx	lr

0800fb6e <abort>:
 800fb6e:	b508      	push	{r3, lr}
 800fb70:	2006      	movs	r0, #6
 800fb72:	f000 f84d 	bl	800fc10 <raise>
 800fb76:	2001      	movs	r0, #1
 800fb78:	f7f3 fb0e 	bl	8003198 <_exit>

0800fb7c <_fstat_r>:
 800fb7c:	b538      	push	{r3, r4, r5, lr}
 800fb7e:	4d07      	ldr	r5, [pc, #28]	; (800fb9c <_fstat_r+0x20>)
 800fb80:	2300      	movs	r3, #0
 800fb82:	4604      	mov	r4, r0
 800fb84:	4608      	mov	r0, r1
 800fb86:	4611      	mov	r1, r2
 800fb88:	602b      	str	r3, [r5, #0]
 800fb8a:	f7f3 fb54 	bl	8003236 <_fstat>
 800fb8e:	1c43      	adds	r3, r0, #1
 800fb90:	d102      	bne.n	800fb98 <_fstat_r+0x1c>
 800fb92:	682b      	ldr	r3, [r5, #0]
 800fb94:	b103      	cbz	r3, 800fb98 <_fstat_r+0x1c>
 800fb96:	6023      	str	r3, [r4, #0]
 800fb98:	bd38      	pop	{r3, r4, r5, pc}
 800fb9a:	bf00      	nop
 800fb9c:	20000b08 	.word	0x20000b08

0800fba0 <_isatty_r>:
 800fba0:	b538      	push	{r3, r4, r5, lr}
 800fba2:	4d06      	ldr	r5, [pc, #24]	; (800fbbc <_isatty_r+0x1c>)
 800fba4:	2300      	movs	r3, #0
 800fba6:	4604      	mov	r4, r0
 800fba8:	4608      	mov	r0, r1
 800fbaa:	602b      	str	r3, [r5, #0]
 800fbac:	f7f3 fb53 	bl	8003256 <_isatty>
 800fbb0:	1c43      	adds	r3, r0, #1
 800fbb2:	d102      	bne.n	800fbba <_isatty_r+0x1a>
 800fbb4:	682b      	ldr	r3, [r5, #0]
 800fbb6:	b103      	cbz	r3, 800fbba <_isatty_r+0x1a>
 800fbb8:	6023      	str	r3, [r4, #0]
 800fbba:	bd38      	pop	{r3, r4, r5, pc}
 800fbbc:	20000b08 	.word	0x20000b08

0800fbc0 <_raise_r>:
 800fbc0:	291f      	cmp	r1, #31
 800fbc2:	b538      	push	{r3, r4, r5, lr}
 800fbc4:	4604      	mov	r4, r0
 800fbc6:	460d      	mov	r5, r1
 800fbc8:	d904      	bls.n	800fbd4 <_raise_r+0x14>
 800fbca:	2316      	movs	r3, #22
 800fbcc:	6003      	str	r3, [r0, #0]
 800fbce:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd2:	bd38      	pop	{r3, r4, r5, pc}
 800fbd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fbd6:	b112      	cbz	r2, 800fbde <_raise_r+0x1e>
 800fbd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fbdc:	b94b      	cbnz	r3, 800fbf2 <_raise_r+0x32>
 800fbde:	4620      	mov	r0, r4
 800fbe0:	f000 f830 	bl	800fc44 <_getpid_r>
 800fbe4:	462a      	mov	r2, r5
 800fbe6:	4601      	mov	r1, r0
 800fbe8:	4620      	mov	r0, r4
 800fbea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbee:	f000 b817 	b.w	800fc20 <_kill_r>
 800fbf2:	2b01      	cmp	r3, #1
 800fbf4:	d00a      	beq.n	800fc0c <_raise_r+0x4c>
 800fbf6:	1c59      	adds	r1, r3, #1
 800fbf8:	d103      	bne.n	800fc02 <_raise_r+0x42>
 800fbfa:	2316      	movs	r3, #22
 800fbfc:	6003      	str	r3, [r0, #0]
 800fbfe:	2001      	movs	r0, #1
 800fc00:	e7e7      	b.n	800fbd2 <_raise_r+0x12>
 800fc02:	2400      	movs	r4, #0
 800fc04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fc08:	4628      	mov	r0, r5
 800fc0a:	4798      	blx	r3
 800fc0c:	2000      	movs	r0, #0
 800fc0e:	e7e0      	b.n	800fbd2 <_raise_r+0x12>

0800fc10 <raise>:
 800fc10:	4b02      	ldr	r3, [pc, #8]	; (800fc1c <raise+0xc>)
 800fc12:	4601      	mov	r1, r0
 800fc14:	6818      	ldr	r0, [r3, #0]
 800fc16:	f7ff bfd3 	b.w	800fbc0 <_raise_r>
 800fc1a:	bf00      	nop
 800fc1c:	20000018 	.word	0x20000018

0800fc20 <_kill_r>:
 800fc20:	b538      	push	{r3, r4, r5, lr}
 800fc22:	4d07      	ldr	r5, [pc, #28]	; (800fc40 <_kill_r+0x20>)
 800fc24:	2300      	movs	r3, #0
 800fc26:	4604      	mov	r4, r0
 800fc28:	4608      	mov	r0, r1
 800fc2a:	4611      	mov	r1, r2
 800fc2c:	602b      	str	r3, [r5, #0]
 800fc2e:	f7f3 faa3 	bl	8003178 <_kill>
 800fc32:	1c43      	adds	r3, r0, #1
 800fc34:	d102      	bne.n	800fc3c <_kill_r+0x1c>
 800fc36:	682b      	ldr	r3, [r5, #0]
 800fc38:	b103      	cbz	r3, 800fc3c <_kill_r+0x1c>
 800fc3a:	6023      	str	r3, [r4, #0]
 800fc3c:	bd38      	pop	{r3, r4, r5, pc}
 800fc3e:	bf00      	nop
 800fc40:	20000b08 	.word	0x20000b08

0800fc44 <_getpid_r>:
 800fc44:	f7f3 ba90 	b.w	8003168 <_getpid>

0800fc48 <_init>:
 800fc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc4a:	bf00      	nop
 800fc4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc4e:	bc08      	pop	{r3}
 800fc50:	469e      	mov	lr, r3
 800fc52:	4770      	bx	lr

0800fc54 <_fini>:
 800fc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc56:	bf00      	nop
 800fc58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc5a:	bc08      	pop	{r3}
 800fc5c:	469e      	mov	lr, r3
 800fc5e:	4770      	bx	lr
