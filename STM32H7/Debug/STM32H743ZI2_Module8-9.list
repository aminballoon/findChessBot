
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2f0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800f590  0800f590  0001f590  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fbc4  0800fbc4  0001fbc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800fbcc  0800fbcc  0001fbcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0800fbd4  0800fbd4  0001fbd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800fbdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000848  240001e0  0800fdbc  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000a28  0800fdbc  00020a28  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002ff94  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044c3  00000000  00000000  000501a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001530  00000000  00000000  00054668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013f8  00000000  00000000  00055b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cc59  00000000  00000000  00056f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001da39  00000000  00000000  00093be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d144  00000000  00000000  000b1622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0021e766  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a34  00000000  00000000  0021e7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f578 	.word	0x0800f578

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800f578 	.word	0x0800f578

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address){
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	601a      	str	r2, [r3, #0]
	this->address = _address;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	729a      	strb	r2, [r3, #10]
}
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZN5AMT21D1Ev>:

AMT21::~AMT21(){
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

}
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read(){
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f103 010a 	add.w	r1, r3, #10
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	2201      	movs	r2, #1
 80006dc:	f009 fcc8 	bl	800a070 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 010c 	add.w	r1, r3, #12
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2202      	movs	r2, #2
 80006ee:	f009 fd55 	bl	800a19c <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	749a      	strb	r2, [r3, #18]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	899b      	ldrh	r3, [r3, #12]
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	0bdb      	lsrs	r3, r3, #15
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	74da      	strb	r2, [r3, #19]
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZN5AMT2117AMT21_Check_ValueEv>:

HAL_StatusTypeDef AMT21::AMT21_Check_Value(){
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
 8000730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000734:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	899b      	ldrh	r3, [r3, #12]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	105b      	asrs	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	737b      	strb	r3, [r7, #13]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	2b05      	cmp	r3, #5
 8000758:	d820      	bhi.n	800079c <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	899b      	ldrh	r3, [r3, #12]
 800075e:	109b      	asrs	r3, r3, #2
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	899b      	ldrh	r3, [r3, #12]
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b25a      	sxtb	r2, r3
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4053      	eors	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	105b      	asrs	r3, r3, #1
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b25a      	sxtb	r2, r3
 800078a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800078e:	4053      	eors	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	3301      	adds	r3, #1
 8000798:	737b      	strb	r3, [r7, #13]
 800079a:	e7db      	b.n	8000754 <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	2301      	moveq	r3, #1
 80007b2:	2300      	movne	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7c9b      	ldrb	r3, [r3, #18]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d10a      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7cdb      	ldrb	r3, [r3, #19]
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d105      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 80007cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e003      	b.n	80007e0 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
	}
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZN5AMT2112getAngPos180Ev>:
{
	return this->raw_value;
}

int16_t AMT21::getAngPos180()
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
//	uint8_t iii =  (this->raw_value & 0x1FFF);
	return ((((this->raw_value & 0x2000) >> 13) * (-16383)) + (this->raw_value & 0x3FFF) ) * -1;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	135b      	asrs	r3, r3, #13
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b29b      	uxth	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	0392      	lsls	r2, r2, #14
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000814:	b29b      	uxth	r3, r3
 8000816:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800081a:	b29b      	uxth	r3, r3
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	b21b      	sxth	r3, r3
//	return this->raw_value;
//	this->value =
//	return iii;
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	ed87 0a01 	vstr	s0, [r7, #4]
 8000838:	edd7 7a01 	vldr	s15, [r7, #4]
 800083c:	eef0 7ae7 	vabs.f32	s15, s15
 8000840:	eeb0 0a67 	vmov.f32	s0, s15
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	ed87 0a01 	vstr	s0, [r7, #4]
 8000858:	edd7 7a01 	vldr	s15, [r7, #4]
 800085c:	fef8 7a67 	vrinta.f32	s15, s15
 8000860:	eeb0 0a67 	vmov.f32	s0, s15
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8000882:	615a      	str	r2, [r3, #20]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000888:	619a      	str	r2, [r3, #24]
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000890:	61da      	str	r2, [r3, #28]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	4a15      	ldr	r2, [pc, #84]	; (80008ec <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8000896:	621a      	str	r2, [r3, #32]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	22c7      	movs	r2, #199	; 0xc7
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 50.0f;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 80008ba:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 80008c0:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 80008c2:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80008f4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f000 f832 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	60da      	str	r2, [r3, #12]
}
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	41a00000 	.word	0x41a00000
 80008e8:	469c4000 	.word	0x469c4000
 80008ec:	43480000 	.word	0x43480000
 80008f0:	42480000 	.word	0x42480000
 80008f4:	00000000 	.word	0x00000000

080008f8 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
}
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	4619      	mov	r1, r3
 8000920:	4610      	mov	r0, r2
 8000922:	f008 f995 	bl	8008c50 <HAL_TIM_PWM_Start>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8000930:	b580      	push	{r7, lr}
 8000932:	ed2d 8b02 	vpush	{d8}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	edd3 7a04 	vldr	s15, [r3, #16]
 800094c:	eeb0 0a67 	vmov.f32	s0, s15
 8000950:	f7ff ff6d 	bl	800082e <_ZSt4fabsf>
 8000954:	eeb0 7a40 	vmov.f32	s14, s0
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	edd3 7a05 	vldr	s15, [r3, #20]
 800095e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000966:	bf94      	ite	ls
 8000968:	2301      	movls	r3, #1
 800096a:	2300      	movhi	r3, #0
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d003      	beq.n	800097a <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	e01b      	b.n	80009b2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000980:	eeb0 0a67 	vmov.f32	s0, s15
 8000984:	f7ff ff53 	bl	800082e <_ZSt4fabsf>
 8000988:	eeb0 7a40 	vmov.f32	s14, s0
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099a:	bfac      	ite	ge
 800099c:	2301      	movge	r3, #1
 800099e:	2300      	movlt	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e001      	b.n	80009b2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	60fb      	str	r3, [r7, #12]

	if (this->frequency > 0.001f && this->frequency != 0.0f) {
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80009b8:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8000c78 <_ZN7Stepper19StepperSetFrequencyEf+0x348>
 80009bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c4:	f340 80e4 	ble.w	8000b90 <_ZN7Stepper19StepperSetFrequencyEf+0x260>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80009ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80009d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d6:	f000 80db 	beq.w	8000b90 <_ZN7Stepper19StepperSetFrequencyEf+0x260>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6898      	ldr	r0, [r3, #8]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	2201      	movs	r2, #1
 80009e6:	4619      	mov	r1, r3
 80009e8:	f005 fb58 	bl	800609c <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * f)) - 1U);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f4:	3301      	adds	r3, #1
 80009f6:	ee07 3a90 	vmov	s15, r3
 80009fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a06:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8000c7c <_ZN7Stepper19StepperSetFrequencyEf+0x34c>
 8000a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a16:	eeb0 0a67 	vmov.f32	s0, s15
 8000a1a:	f7ff ff18 	bl	800084e <_ZSt5roundf>
 8000a1e:	eef0 7a40 	vmov.f32	s15, s0
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a2c:	ee17 2a90 	vmov	r2, s15
 8000a30:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d113      	bne.n	8000a62 <_ZN7Stepper19StepperSetFrequencyEf+0x132>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a42:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000a44:	085b      	lsrs	r3, r3, #1
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fa33 	bl	8000eb2 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a4c:	eeb0 7b40 	vmov.f64	d7, d0
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a5a:	ee17 2a90 	vmov	r2, s15
 8000a5e:	635a      	str	r2, [r3, #52]	; 0x34
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a60:	e1e8      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	d113      	bne.n	8000a92 <_ZN7Stepper19StepperSetFrequencyEf+0x162>
			this->stepper_htim->Instance->CCR2 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a72:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000a74:	085b      	lsrs	r3, r3, #1
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 fa1b 	bl	8000eb2 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a7c:	eeb0 7b40 	vmov.f64	d7, d0
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a8a:	ee17 2a90 	vmov	r2, s15
 8000a8e:	639a      	str	r2, [r3, #56]	; 0x38
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a90:	e1d0      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	2b08      	cmp	r3, #8
 8000a98:	d113      	bne.n	8000ac2 <_ZN7Stepper19StepperSetFrequencyEf+0x192>
			this->stepper_htim->Instance->CCR3 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa2:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000aa4:	085b      	lsrs	r3, r3, #1
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fa03 	bl	8000eb2 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000aac:	eeb0 7b40 	vmov.f64	d7, d0
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000aba:	ee17 2a90 	vmov	r2, s15
 8000abe:	63da      	str	r2, [r3, #60]	; 0x3c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000ac0:	e1b8      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	2b0c      	cmp	r3, #12
 8000ac8:	d113      	bne.n	8000af2 <_ZN7Stepper19StepperSetFrequencyEf+0x1c2>
			this->stepper_htim->Instance->CCR4 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad2:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000ad4:	085b      	lsrs	r3, r3, #1
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f9eb 	bl	8000eb2 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000adc:	eeb0 7b40 	vmov.f64	d7, d0
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000aea:	ee17 2a90 	vmov	r2, s15
 8000aee:	641a      	str	r2, [r3, #64]	; 0x40
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000af0:	e1a0      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	2b10      	cmp	r3, #16
 8000af8:	d113      	bne.n	8000b22 <_ZN7Stepper19StepperSetFrequencyEf+0x1f2>
			this->stepper_htim->Instance->CCR5 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b02:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000b04:	085b      	lsrs	r3, r3, #1
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f9d3 	bl	8000eb2 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b0c:	eeb0 7b40 	vmov.f64	d7, d0
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b1a:	ee17 2a90 	vmov	r2, s15
 8000b1e:	659a      	str	r2, [r3, #88]	; 0x58
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000b20:	e188      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	2b14      	cmp	r3, #20
 8000b28:	d113      	bne.n	8000b52 <_ZN7Stepper19StepperSetFrequencyEf+0x222>
			this->stepper_htim->Instance->CCR6 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b32:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000b34:	085b      	lsrs	r3, r3, #1
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f9bb 	bl	8000eb2 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b3c:	eeb0 7b40 	vmov.f64	d7, d0
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b4a:	ee17 2a90 	vmov	r2, s15
 8000b4e:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000b50:	e170      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else {
			this->stepper_htim->Instance->CCR1 = 0;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	2200      	movs	r2, #0
 8000b64:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2200      	movs	r2, #0
 8000b78:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2200      	movs	r2, #0
 8000b82:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000b8e:	e151      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

	} else if (this->frequency < 0.001f && this->frequency != 0.0f) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b96:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000c78 <_ZN7Stepper19StepperSetFrequencyEf+0x348>
 8000b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba2:	f140 80ec 	bpl.w	8000d7e <_ZN7Stepper19StepperSetFrequencyEf+0x44e>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	edd3 7a04 	vldr	s15, [r3, #16]
 8000bac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb4:	f000 80e3 	beq.w	8000d7e <_ZN7Stepper19StepperSetFrequencyEf+0x44e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6898      	ldr	r0, [r3, #8]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f005 fa69 	bl	800609c <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	ee07 3a90 	vmov	s15, r3
 8000bd8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000bdc:	ed97 0a03 	vldr	s0, [r7, #12]
 8000be0:	f7ff fe25 	bl	800082e <_ZSt4fabsf>
 8000be4:	eef0 7a40 	vmov.f32	s15, s0
 8000be8:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000bec:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000c7c <_ZN7Stepper19StepperSetFrequencyEf+0x34c>
 8000bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000bf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bf8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000c00:	f7ff fe25 	bl	800084e <_ZSt5roundf>
 8000c04:	eef0 7a40 	vmov.f32	s15, s0
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c12:	ee17 2a90 	vmov	r2, s15
 8000c16:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d113      	bne.n	8000c48 <_ZN7Stepper19StepperSetFrequencyEf+0x318>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c28:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000c2a:	085b      	lsrs	r3, r3, #1
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 f940 	bl	8000eb2 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c32:	eeb0 7b40 	vmov.f64	d7, d0
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c40:	ee17 2a90 	vmov	r2, s15
 8000c44:	635a      	str	r2, [r3, #52]	; 0x34
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000c46:	e0f5      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	d117      	bne.n	8000c80 <_ZN7Stepper19StepperSetFrequencyEf+0x350>
			this->stepper_htim->Instance->CCR2 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c58:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000c5a:	085b      	lsrs	r3, r3, #1
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f000 f928 	bl	8000eb2 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c62:	eeb0 7b40 	vmov.f64	d7, d0
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c70:	ee17 2a90 	vmov	r2, s15
 8000c74:	639a      	str	r2, [r3, #56]	; 0x38
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000c76:	e0dd      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
 8000c78:	3a83126f 	.word	0x3a83126f
 8000c7c:	4d64e1c0 	.word	0x4d64e1c0
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b08      	cmp	r3, #8
 8000c86:	d113      	bne.n	8000cb0 <_ZN7Stepper19StepperSetFrequencyEf+0x380>
			this->stepper_htim->Instance->CCR3 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c90:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000c92:	085b      	lsrs	r3, r3, #1
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f90c 	bl	8000eb2 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c9a:	eeb0 7b40 	vmov.f64	d7, d0
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ca8:	ee17 2a90 	vmov	r2, s15
 8000cac:	63da      	str	r2, [r3, #60]	; 0x3c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000cae:	e0c1      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b0c      	cmp	r3, #12
 8000cb6:	d113      	bne.n	8000ce0 <_ZN7Stepper19StepperSetFrequencyEf+0x3b0>
			this->stepper_htim->Instance->CCR4 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000cc2:	085b      	lsrs	r3, r3, #1
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f8f4 	bl	8000eb2 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000cca:	eeb0 7b40 	vmov.f64	d7, d0
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cd8:	ee17 2a90 	vmov	r2, s15
 8000cdc:	641a      	str	r2, [r3, #64]	; 0x40
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000cde:	e0a9      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b10      	cmp	r3, #16
 8000ce6:	d113      	bne.n	8000d10 <_ZN7Stepper19StepperSetFrequencyEf+0x3e0>
			this->stepper_htim->Instance->CCR5 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000cf2:	085b      	lsrs	r3, r3, #1
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 f8dc 	bl	8000eb2 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000cfa:	eeb0 7b40 	vmov.f64	d7, d0
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d08:	ee17 2a90 	vmov	r2, s15
 8000d0c:	659a      	str	r2, [r3, #88]	; 0x58
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000d0e:	e091      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b14      	cmp	r3, #20
 8000d16:	d113      	bne.n	8000d40 <_ZN7Stepper19StepperSetFrequencyEf+0x410>
			this->stepper_htim->Instance->CCR6 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d20:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000d22:	085b      	lsrs	r3, r3, #1
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f8c4 	bl	8000eb2 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000d2a:	eeb0 7b40 	vmov.f64	d7, d0
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d38:	ee17 2a90 	vmov	r2, s15
 8000d3c:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000d3e:	e079      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else {
			this->stepper_htim->Instance->CCR1 = 0;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	2200      	movs	r2, #0
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2200      	movs	r2, #0
 8000d52:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2200      	movs	r2, #0
 8000d66:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000d7c:	e05a      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}
	} else {
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d105      	bne.n	8000d92 <_ZN7Stepper19StepperSetFrequencyEf+0x462>
			this->stepper_htim->Instance->CCR1 = 0;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8000d90:	e050      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	d105      	bne.n	8000da6 <_ZN7Stepper19StepperSetFrequencyEf+0x476>
			this->stepper_htim->Instance->CCR2 = 0;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2200      	movs	r2, #0
 8000da2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000da4:	e046      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b08      	cmp	r3, #8
 8000dac:	d105      	bne.n	8000dba <_ZN7Stepper19StepperSetFrequencyEf+0x48a>
			this->stepper_htim->Instance->CCR3 = 0;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2200      	movs	r2, #0
 8000db6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000db8:	e03c      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b0c      	cmp	r3, #12
 8000dc0:	d105      	bne.n	8000dce <_ZN7Stepper19StepperSetFrequencyEf+0x49e>
			this->stepper_htim->Instance->CCR4 = 0;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000dcc:	e032      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b10      	cmp	r3, #16
 8000dd4:	d105      	bne.n	8000de2 <_ZN7Stepper19StepperSetFrequencyEf+0x4b2>
			this->stepper_htim->Instance->CCR5 = 0;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000de0:	e028      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b14      	cmp	r3, #20
 8000de8:	d105      	bne.n	8000df6 <_ZN7Stepper19StepperSetFrequencyEf+0x4c6>
			this->stepper_htim->Instance->CCR6 = 0;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000df4:	e01e      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
			this->stepper_htim->Instance->CCR1 = 0;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2200      	movs	r2, #0
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2200      	movs	r2, #0
 8000e12:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2200      	movs	r2, #0
 8000e26:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000e32:	e7ff      	b.n	8000e34 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	ecbd 8b02 	vpop	{d8}
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8000e4c:	ed97 0a00 	vldr	s0, [r7]
 8000e50:	f7ff fced 	bl	800082e <_ZSt4fabsf>
 8000e54:	eef0 7a40 	vmov.f32	s15, s0
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8000e66:	b480      	push	{r7}
 8000e68:	b083      	sub	sp, #12
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	ee07 3a90 	vmov	s15, r3
 8000e76:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e7a:	eeb0 0b47 	vmov.f64	d0, d7
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8000e94:	78fb      	ldrb	r3, [r7, #3]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ffe5 	bl	8000e66 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e9c:	eeb0 7b40 	vmov.f64	d7, d0
 8000ea0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	ee07 3a90 	vmov	s15, r3
 8000ec0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ec4:	eeb0 0b47 	vmov.f64	d0, d7
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	ed87 0a01 	vstr	s0, [r7, #4]
 8000edc:	edc7 0a00 	vstr	s1, [r7]
 8000ee0:	edd7 0a00 	vldr	s1, [r7]
 8000ee4:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ee8:	f00a ff96 	bl	800be18 <atan2f>
 8000eec:	eef0 7a40 	vmov.f32	s15, s0
 8000ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <_ZSt4sqrtf>:
  { return __builtin_sqrtf(__x); }
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f04:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f08:	f00a ff88 	bl	800be1c <sqrtf>
 8000f0c:	eef0 7a40 	vmov.f32	s15, s0
 8000f10:	eeb0 0a67 	vmov.f32	s0, s15
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f20:	f002 fa44 	bl	80033ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f24:	f000 f86c 	bl	8001000 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f28:	f000 ff40 	bl	8001dac <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000f2c:	f000 fefe 	bl	8001d2c <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8000f30:	f000 fe9c 	bl	8001c6c <_ZL19MX_USART3_UART_Initv>
  MX_TIM2_Init();
 8000f34:	f000 fa3c 	bl	80013b0 <_ZL12MX_TIM2_Initv>
  MX_UART4_Init();
 8000f38:	f000 fdd2 	bl	8001ae0 <_ZL13MX_UART4_Initv>
  MX_TIM4_Init();
 8000f3c:	f000 fb5a 	bl	80015f4 <_ZL12MX_TIM4_Initv>
  MX_SPI3_Init();
 8000f40:	f000 f910 	bl	8001164 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 8000f44:	f000 f968 	bl	8001218 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8000f48:	f000 fac2 	bl	80014d0 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8000f4c:	f000 fbe4 	bl	8001718 <_ZL12MX_TIM5_Initv>
  MX_TIM15_Init();
 8000f50:	f000 fd04 	bl	800195c <_ZL13MX_TIM15_Initv>
  MX_TIM12_Init();
 8000f54:	f000 fcbe 	bl	80018d4 <_ZL13MX_TIM12_Initv>
  MX_CRC_Init();
 8000f58:	f000 f8dc 	bl	8001114 <_ZL11MX_CRC_Initv>
  MX_UART7_Init();
 8000f5c:	f000 fe24 	bl	8001ba8 <_ZL13MX_UART7_Initv>
  MX_TIM6_Init();
 8000f60:	f000 fc38 	bl	80017d4 <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init();
 8000f64:	f000 fc76 	bl	8001854 <_ZL12MX_TIM7_Initv>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	481c      	ldr	r0, [pc, #112]	; (8000fe0 <main+0xc4>)
 8000f6e:	f005 f895 	bl	800609c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2102      	movs	r1, #2
 8000f76:	481b      	ldr	r0, [pc, #108]	; (8000fe4 <main+0xc8>)
 8000f78:	f005 f890 	bl	800609c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f82:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <main+0xc4>)
 8000f84:	f005 f88a 	bl	800609c <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.);
 8000f88:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8000fe8 <main+0xcc>
 8000f8c:	4817      	ldr	r0, [pc, #92]	; (8000fec <main+0xd0>)
 8000f8e:	f7ff fccf 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(16);
 8000f92:	2110      	movs	r1, #16
 8000f94:	4815      	ldr	r0, [pc, #84]	; (8000fec <main+0xd0>)
 8000f96:	f7ff ff77 	bl	8000e88 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(1);
 8000f9a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f9e:	4813      	ldr	r0, [pc, #76]	; (8000fec <main+0xd0>)
 8000fa0:	f7ff ff4e 	bl	8000e40 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 8000fa4:	4811      	ldr	r0, [pc, #68]	; (8000fec <main+0xd0>)
 8000fa6:	f7ff fcb2 	bl	800090e <_ZN7Stepper13StepperEnableEv>

//	stepperJ2.StepperSetMicrostep(1);
//	stepperJ2.StepperSetRatio(1);

	stepperJ3.StepperSetFrequency(0.);
 8000faa:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8000fe8 <main+0xcc>
 8000fae:	4810      	ldr	r0, [pc, #64]	; (8000ff0 <main+0xd4>)
 8000fb0:	f7ff fcbe 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 8000fb4:	2110      	movs	r1, #16
 8000fb6:	480e      	ldr	r0, [pc, #56]	; (8000ff0 <main+0xd4>)
 8000fb8:	f7ff ff66 	bl	8000e88 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(1);
 8000fbc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000fc0:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <main+0xd4>)
 8000fc2:	f7ff ff3d 	bl	8000e40 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 8000fc6:	480a      	ldr	r0, [pc, #40]	; (8000ff0 <main+0xd4>)
 8000fc8:	f7ff fca1 	bl	800090e <_ZN7Stepper13StepperEnableEv>

//	stepperJ4.StepperSetMicrostep(1);
//	stepperJ4.StepperSetRatio(1);
#endif

	HAL_TIM_Base_Start_IT(&htim5);
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <main+0xd8>)
 8000fce:	f007 fd65 	bl	8008a9c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8000fd2:	4809      	ldr	r0, [pc, #36]	; (8000ff8 <main+0xdc>)
 8000fd4:	f007 fd62 	bl	8008a9c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8000fd8:	4808      	ldr	r0, [pc, #32]	; (8000ffc <main+0xe0>)
 8000fda:	f007 fd5f 	bl	8008a9c <HAL_TIM_Base_Start_IT>
//	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000fde:	e7fe      	b.n	8000fde <main+0xc2>
 8000fe0:	58020400 	.word	0x58020400
 8000fe4:	58021000 	.word	0x58021000
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	24000984 	.word	0x24000984
 8000ff0:	240009ac 	.word	0x240009ac
 8000ff4:	240003d8 	.word	0x240003d8
 8000ff8:	24000424 	.word	0x24000424
 8000ffc:	24000470 	.word	0x24000470

08001000 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b09c      	sub	sp, #112	; 0x70
 8001004:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100a:	224c      	movs	r2, #76	; 0x4c
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f00b fe6a 	bl	800cce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2220      	movs	r2, #32
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f00b fe64 	bl	800cce8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001020:	2002      	movs	r0, #2
 8001022:	f005 f86f 	bl	8006104 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
 800102a:	4b38      	ldr	r3, [pc, #224]	; (800110c <_Z18SystemClock_Configv+0x10c>)
 800102c:	699b      	ldr	r3, [r3, #24]
 800102e:	4a37      	ldr	r2, [pc, #220]	; (800110c <_Z18SystemClock_Configv+0x10c>)
 8001030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001034:	6193      	str	r3, [r2, #24]
 8001036:	4b35      	ldr	r3, [pc, #212]	; (800110c <_Z18SystemClock_Configv+0x10c>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	4b33      	ldr	r3, [pc, #204]	; (8001110 <_Z18SystemClock_Configv+0x110>)
 8001042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001044:	4a32      	ldr	r2, [pc, #200]	; (8001110 <_Z18SystemClock_Configv+0x110>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800104c:	4b30      	ldr	r3, [pc, #192]	; (8001110 <_Z18SystemClock_Configv+0x110>)
 800104e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001058:	4b2c      	ldr	r3, [pc, #176]	; (800110c <_Z18SystemClock_Configv+0x10c>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001064:	bf14      	ite	ne
 8001066:	2301      	movne	r3, #1
 8001068:	2300      	moveq	r3, #0
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b00      	cmp	r3, #0
 800106e:	d000      	beq.n	8001072 <_Z18SystemClock_Configv+0x72>
 8001070:	e7f2      	b.n	8001058 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001072:	2302      	movs	r3, #2
 8001074:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001076:	2301      	movs	r3, #1
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800107a:	2340      	movs	r3, #64	; 0x40
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107e:	2302      	movs	r3, #2
 8001080:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001082:	2300      	movs	r3, #0
 8001084:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001086:	2304      	movs	r3, #4
 8001088:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800108a:	233c      	movs	r3, #60	; 0x3c
 800108c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800108e:	2302      	movs	r3, #2
 8001090:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001092:	2306      	movs	r3, #6
 8001094:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001096:	2302      	movs	r3, #2
 8001098:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800109a:	230c      	movs	r3, #12
 800109c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800109e:	2300      	movs	r3, #0
 80010a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 f864 	bl	8006178 <HAL_RCC_OscConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	bf14      	ite	ne
 80010b6:	2301      	movne	r3, #1
 80010b8:	2300      	moveq	r3, #0
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80010c0:	f001 fa0e 	bl	80024e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c4:	233f      	movs	r3, #63	; 0x3f
 80010c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c8:	2303      	movs	r3, #3
 80010ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010d0:	2308      	movs	r3, #8
 80010d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010d4:	2340      	movs	r3, #64	; 0x40
 80010d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010d8:	2340      	movs	r3, #64	; 0x40
 80010da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80010e2:	2340      	movs	r3, #64	; 0x40
 80010e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2104      	movs	r1, #4
 80010ea:	4618      	mov	r0, r3
 80010ec:	f005 fc70 	bl	80069d0 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	bf14      	ite	ne
 80010f6:	2301      	movne	r3, #1
 80010f8:	2300      	moveq	r3, #0
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8001100:	f001 f9ee 	bl	80024e0 <Error_Handler>
  }
}
 8001104:	bf00      	nop
 8001106:	3770      	adds	r7, #112	; 0x70
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	58024800 	.word	0x58024800
 8001110:	58000400 	.word	0x58000400

08001114 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001118:	4b10      	ldr	r3, [pc, #64]	; (800115c <_ZL11MX_CRC_Initv+0x48>)
 800111a:	4a11      	ldr	r2, [pc, #68]	; (8001160 <_ZL11MX_CRC_Initv+0x4c>)
 800111c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <_ZL11MX_CRC_Initv+0x48>)
 8001120:	2200      	movs	r2, #0
 8001122:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <_ZL11MX_CRC_Initv+0x48>)
 8001126:	2200      	movs	r2, #0
 8001128:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <_ZL11MX_CRC_Initv+0x48>)
 800112c:	2200      	movs	r2, #0
 800112e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <_ZL11MX_CRC_Initv+0x48>)
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <_ZL11MX_CRC_Initv+0x48>)
 8001138:	2201      	movs	r2, #1
 800113a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800113c:	4807      	ldr	r0, [pc, #28]	; (800115c <_ZL11MX_CRC_Initv+0x48>)
 800113e:	f002 faef 	bl	8003720 <HAL_CRC_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf14      	ite	ne
 8001148:	2301      	movne	r3, #1
 800114a:	2300      	moveq	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8001152:	f001 f9c5 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	240001fc 	.word	0x240001fc
 8001160:	58024c00 	.word	0x58024c00

08001164 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 800116a:	4a2a      	ldr	r2, [pc, #168]	; (8001214 <_ZL12MX_SPI3_Initv+0xb0>)
 800116c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 8001170:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001174:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 8001178:	2200      	movs	r2, #0
 800117a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800117c:	4b24      	ldr	r3, [pc, #144]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 800117e:	2203      	movs	r2, #3
 8001180:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001182:	4b23      	ldr	r3, [pc, #140]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 8001190:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001194:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 8001198:	2200      	movs	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 800119e:	2200      	movs	r2, #0
 80011a0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 80011b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 80011be:	2200      	movs	r2, #0
 80011c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011d4:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 80011dc:	2200      	movs	r2, #0
 80011de:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011f2:	4807      	ldr	r0, [pc, #28]	; (8001210 <_ZL12MX_SPI3_Initv+0xac>)
 80011f4:	f007 fada 	bl	80087ac <HAL_SPI_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	bf14      	ite	ne
 80011fe:	2301      	movne	r3, #1
 8001200:	2300      	moveq	r3, #0
 8001202:	b2db      	uxtb	r3, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <_ZL12MX_SPI3_Initv+0xa8>
  {
    Error_Handler();
 8001208:	f001 f96a 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	24000220 	.word	0x24000220
 8001214:	40003c00 	.word	0x40003c00

08001218 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b09a      	sub	sp, #104	; 0x68
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001238:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	615a      	str	r2, [r3, #20]
 800124a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	222c      	movs	r2, #44	; 0x2c
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f00b fd48 	bl	800cce8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001258:	4b53      	ldr	r3, [pc, #332]	; (80013a8 <_ZL12MX_TIM1_Initv+0x190>)
 800125a:	4a54      	ldr	r2, [pc, #336]	; (80013ac <_ZL12MX_TIM1_Initv+0x194>)
 800125c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 800125e:	4b52      	ldr	r3, [pc, #328]	; (80013a8 <_ZL12MX_TIM1_Initv+0x190>)
 8001260:	22c7      	movs	r2, #199	; 0xc7
 8001262:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b50      	ldr	r3, [pc, #320]	; (80013a8 <_ZL12MX_TIM1_Initv+0x190>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 800126a:	4b4f      	ldr	r3, [pc, #316]	; (80013a8 <_ZL12MX_TIM1_Initv+0x190>)
 800126c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001270:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001272:	4b4d      	ldr	r3, [pc, #308]	; (80013a8 <_ZL12MX_TIM1_Initv+0x190>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001278:	4b4b      	ldr	r3, [pc, #300]	; (80013a8 <_ZL12MX_TIM1_Initv+0x190>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b4a      	ldr	r3, [pc, #296]	; (80013a8 <_ZL12MX_TIM1_Initv+0x190>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001284:	4848      	ldr	r0, [pc, #288]	; (80013a8 <_ZL12MX_TIM1_Initv+0x190>)
 8001286:	f007 fbb2 	bl	80089ee <HAL_TIM_Base_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf14      	ite	ne
 8001290:	2301      	movne	r3, #1
 8001292:	2300      	moveq	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 800129a:	f001 f921 	bl	80024e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012a8:	4619      	mov	r1, r3
 80012aa:	483f      	ldr	r0, [pc, #252]	; (80013a8 <_ZL12MX_TIM1_Initv+0x190>)
 80012ac:	f008 f812 	bl	80092d4 <HAL_TIM_ConfigClockSource>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bf14      	ite	ne
 80012b6:	2301      	movne	r3, #1
 80012b8:	2300      	moveq	r3, #0
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 80012c0:	f001 f90e 	bl	80024e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012c4:	4838      	ldr	r0, [pc, #224]	; (80013a8 <_ZL12MX_TIM1_Initv+0x190>)
 80012c6:	f007 fc61 	bl	8008b8c <HAL_TIM_PWM_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf14      	ite	ne
 80012d0:	2301      	movne	r3, #1
 80012d2:	2300      	moveq	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 80012da:	f001 f901 	bl	80024e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012ee:	4619      	mov	r1, r3
 80012f0:	482d      	ldr	r0, [pc, #180]	; (80013a8 <_ZL12MX_TIM1_Initv+0x190>)
 80012f2:	f008 fd43 	bl	8009d7c <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf14      	ite	ne
 80012fc:	2301      	movne	r3, #1
 80012fe:	2300      	moveq	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 8001306:	f001 f8eb 	bl	80024e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130a:	2360      	movs	r3, #96	; 0x60
 800130c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800130e:	f240 1339 	movw	r3, #313	; 0x139
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001314:	2300      	movs	r3, #0
 8001316:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001318:	2300      	movs	r3, #0
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001324:	2300      	movs	r3, #0
 8001326:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001328:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800132c:	2204      	movs	r2, #4
 800132e:	4619      	mov	r1, r3
 8001330:	481d      	ldr	r0, [pc, #116]	; (80013a8 <_ZL12MX_TIM1_Initv+0x190>)
 8001332:	f007 febb 	bl	80090ac <HAL_TIM_PWM_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	bf14      	ite	ne
 800133c:	2301      	movne	r3, #1
 800133e:	2300      	moveq	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 8001346:	f001 f8cb 	bl	80024e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800135e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001362:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800136c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4619      	mov	r1, r3
 800137e:	480a      	ldr	r0, [pc, #40]	; (80013a8 <_ZL12MX_TIM1_Initv+0x190>)
 8001380:	f008 fd8a 	bl	8009e98 <HAL_TIMEx_ConfigBreakDeadTime>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	bf14      	ite	ne
 800138a:	2301      	movne	r3, #1
 800138c:	2300      	moveq	r3, #0
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <_ZL12MX_TIM1_Initv+0x180>
  {
    Error_Handler();
 8001394:	f001 f8a4 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001398:	4803      	ldr	r0, [pc, #12]	; (80013a8 <_ZL12MX_TIM1_Initv+0x190>)
 800139a:	f001 fab5 	bl	8002908 <HAL_TIM_MspPostInit>

}
 800139e:	bf00      	nop
 80013a0:	3768      	adds	r7, #104	; 0x68
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	240002a8 	.word	0x240002a8
 80013ac:	40010000 	.word	0x40010000

080013b0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	; 0x38
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	f107 031c 	add.w	r3, r7, #28
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d0:	463b      	mov	r3, r7
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]
 80013de:	615a      	str	r2, [r3, #20]
 80013e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013e2:	4b3a      	ldr	r3, [pc, #232]	; (80014cc <_ZL12MX_TIM2_Initv+0x11c>)
 80013e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 80013ea:	4b38      	ldr	r3, [pc, #224]	; (80014cc <_ZL12MX_TIM2_Initv+0x11c>)
 80013ec:	22c7      	movs	r2, #199	; 0xc7
 80013ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b36      	ldr	r3, [pc, #216]	; (80014cc <_ZL12MX_TIM2_Initv+0x11c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 80013f6:	4b35      	ldr	r3, [pc, #212]	; (80014cc <_ZL12MX_TIM2_Initv+0x11c>)
 80013f8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80013fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fe:	4b33      	ldr	r3, [pc, #204]	; (80014cc <_ZL12MX_TIM2_Initv+0x11c>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001404:	4b31      	ldr	r3, [pc, #196]	; (80014cc <_ZL12MX_TIM2_Initv+0x11c>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800140a:	4830      	ldr	r0, [pc, #192]	; (80014cc <_ZL12MX_TIM2_Initv+0x11c>)
 800140c:	f007 faef 	bl	80089ee <HAL_TIM_Base_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	bf14      	ite	ne
 8001416:	2301      	movne	r3, #1
 8001418:	2300      	moveq	r3, #0
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8001420:	f001 f85e 	bl	80024e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800142a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142e:	4619      	mov	r1, r3
 8001430:	4826      	ldr	r0, [pc, #152]	; (80014cc <_ZL12MX_TIM2_Initv+0x11c>)
 8001432:	f007 ff4f 	bl	80092d4 <HAL_TIM_ConfigClockSource>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	bf14      	ite	ne
 800143c:	2301      	movne	r3, #1
 800143e:	2300      	moveq	r3, #0
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 8001446:	f001 f84b 	bl	80024e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800144a:	4820      	ldr	r0, [pc, #128]	; (80014cc <_ZL12MX_TIM2_Initv+0x11c>)
 800144c:	f007 fb9e 	bl	8008b8c <HAL_TIM_PWM_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	bf14      	ite	ne
 8001456:	2301      	movne	r3, #1
 8001458:	2300      	moveq	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8001460:	f001 f83e 	bl	80024e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	4816      	ldr	r0, [pc, #88]	; (80014cc <_ZL12MX_TIM2_Initv+0x11c>)
 8001474:	f008 fc82 	bl	8009d7c <HAL_TIMEx_MasterConfigSynchronization>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	bf14      	ite	ne
 800147e:	2301      	movne	r3, #1
 8001480:	2300      	moveq	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8001488:	f001 f82a 	bl	80024e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148c:	2360      	movs	r3, #96	; 0x60
 800148e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8001490:	f240 1339 	movw	r3, #313	; 0x139
 8001494:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800149e:	463b      	mov	r3, r7
 80014a0:	2208      	movs	r2, #8
 80014a2:	4619      	mov	r1, r3
 80014a4:	4809      	ldr	r0, [pc, #36]	; (80014cc <_ZL12MX_TIM2_Initv+0x11c>)
 80014a6:	f007 fe01 	bl	80090ac <HAL_TIM_PWM_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bf14      	ite	ne
 80014b0:	2301      	movne	r3, #1
 80014b2:	2300      	moveq	r3, #0
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 80014ba:	f001 f811 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014be:	4803      	ldr	r0, [pc, #12]	; (80014cc <_ZL12MX_TIM2_Initv+0x11c>)
 80014c0:	f001 fa22 	bl	8002908 <HAL_TIM_MspPostInit>

}
 80014c4:	bf00      	nop
 80014c6:	3738      	adds	r7, #56	; 0x38
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	240002f4 	.word	0x240002f4

080014d0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08e      	sub	sp, #56	; 0x38
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f0:	463b      	mov	r3, r7
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]
 80014fe:	615a      	str	r2, [r3, #20]
 8001500:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001502:	4b3a      	ldr	r3, [pc, #232]	; (80015ec <_ZL12MX_TIM3_Initv+0x11c>)
 8001504:	4a3a      	ldr	r2, [pc, #232]	; (80015f0 <_ZL12MX_TIM3_Initv+0x120>)
 8001506:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8001508:	4b38      	ldr	r3, [pc, #224]	; (80015ec <_ZL12MX_TIM3_Initv+0x11c>)
 800150a:	22c7      	movs	r2, #199	; 0xc7
 800150c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150e:	4b37      	ldr	r3, [pc, #220]	; (80015ec <_ZL12MX_TIM3_Initv+0x11c>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8001514:	4b35      	ldr	r3, [pc, #212]	; (80015ec <_ZL12MX_TIM3_Initv+0x11c>)
 8001516:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800151a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151c:	4b33      	ldr	r3, [pc, #204]	; (80015ec <_ZL12MX_TIM3_Initv+0x11c>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001522:	4b32      	ldr	r3, [pc, #200]	; (80015ec <_ZL12MX_TIM3_Initv+0x11c>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001528:	4830      	ldr	r0, [pc, #192]	; (80015ec <_ZL12MX_TIM3_Initv+0x11c>)
 800152a:	f007 fa60 	bl	80089ee <HAL_TIM_Base_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	bf14      	ite	ne
 8001534:	2301      	movne	r3, #1
 8001536:	2300      	moveq	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 800153e:	f000 ffcf 	bl	80024e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001548:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154c:	4619      	mov	r1, r3
 800154e:	4827      	ldr	r0, [pc, #156]	; (80015ec <_ZL12MX_TIM3_Initv+0x11c>)
 8001550:	f007 fec0 	bl	80092d4 <HAL_TIM_ConfigClockSource>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	bf14      	ite	ne
 800155a:	2301      	movne	r3, #1
 800155c:	2300      	moveq	r3, #0
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8001564:	f000 ffbc 	bl	80024e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001568:	4820      	ldr	r0, [pc, #128]	; (80015ec <_ZL12MX_TIM3_Initv+0x11c>)
 800156a:	f007 fb0f 	bl	8008b8c <HAL_TIM_PWM_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	bf14      	ite	ne
 8001574:	2301      	movne	r3, #1
 8001576:	2300      	moveq	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 800157e:	f000 ffaf 	bl	80024e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	4619      	mov	r1, r3
 8001590:	4816      	ldr	r0, [pc, #88]	; (80015ec <_ZL12MX_TIM3_Initv+0x11c>)
 8001592:	f008 fbf3 	bl	8009d7c <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf14      	ite	ne
 800159c:	2301      	movne	r3, #1
 800159e:	2300      	moveq	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 80015a6:	f000 ff9b 	bl	80024e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015aa:	2360      	movs	r3, #96	; 0x60
 80015ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80015ae:	f240 1339 	movw	r3, #313	; 0x139
 80015b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015bc:	463b      	mov	r3, r7
 80015be:	2200      	movs	r2, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	480a      	ldr	r0, [pc, #40]	; (80015ec <_ZL12MX_TIM3_Initv+0x11c>)
 80015c4:	f007 fd72 	bl	80090ac <HAL_TIM_PWM_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bf14      	ite	ne
 80015ce:	2301      	movne	r3, #1
 80015d0:	2300      	moveq	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 80015d8:	f000 ff82 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <_ZL12MX_TIM3_Initv+0x11c>)
 80015de:	f001 f993 	bl	8002908 <HAL_TIM_MspPostInit>

}
 80015e2:	bf00      	nop
 80015e4:	3738      	adds	r7, #56	; 0x38
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	24000340 	.word	0x24000340
 80015f0:	40000400 	.word	0x40000400

080015f4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08e      	sub	sp, #56	; 0x38
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	f107 031c 	add.w	r3, r7, #28
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001614:	463b      	mov	r3, r7
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]
 8001622:	615a      	str	r2, [r3, #20]
 8001624:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001626:	4b3a      	ldr	r3, [pc, #232]	; (8001710 <_ZL12MX_TIM4_Initv+0x11c>)
 8001628:	4a3a      	ldr	r2, [pc, #232]	; (8001714 <_ZL12MX_TIM4_Initv+0x120>)
 800162a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 800162c:	4b38      	ldr	r3, [pc, #224]	; (8001710 <_ZL12MX_TIM4_Initv+0x11c>)
 800162e:	22c7      	movs	r2, #199	; 0xc7
 8001630:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b37      	ldr	r3, [pc, #220]	; (8001710 <_ZL12MX_TIM4_Initv+0x11c>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 8001638:	4b35      	ldr	r3, [pc, #212]	; (8001710 <_ZL12MX_TIM4_Initv+0x11c>)
 800163a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800163e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b33      	ldr	r3, [pc, #204]	; (8001710 <_ZL12MX_TIM4_Initv+0x11c>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001646:	4b32      	ldr	r3, [pc, #200]	; (8001710 <_ZL12MX_TIM4_Initv+0x11c>)
 8001648:	2280      	movs	r2, #128	; 0x80
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800164c:	4830      	ldr	r0, [pc, #192]	; (8001710 <_ZL12MX_TIM4_Initv+0x11c>)
 800164e:	f007 f9ce 	bl	80089ee <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	bf14      	ite	ne
 8001658:	2301      	movne	r3, #1
 800165a:	2300      	moveq	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 8001662:	f000 ff3d 	bl	80024e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800166c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001670:	4619      	mov	r1, r3
 8001672:	4827      	ldr	r0, [pc, #156]	; (8001710 <_ZL12MX_TIM4_Initv+0x11c>)
 8001674:	f007 fe2e 	bl	80092d4 <HAL_TIM_ConfigClockSource>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	bf14      	ite	ne
 800167e:	2301      	movne	r3, #1
 8001680:	2300      	moveq	r3, #0
 8001682:	b2db      	uxtb	r3, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 8001688:	f000 ff2a 	bl	80024e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800168c:	4820      	ldr	r0, [pc, #128]	; (8001710 <_ZL12MX_TIM4_Initv+0x11c>)
 800168e:	f007 fa7d 	bl	8008b8c <HAL_TIM_PWM_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	bf14      	ite	ne
 8001698:	2301      	movne	r3, #1
 800169a:	2300      	moveq	r3, #0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 80016a2:	f000 ff1d 	bl	80024e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4816      	ldr	r0, [pc, #88]	; (8001710 <_ZL12MX_TIM4_Initv+0x11c>)
 80016b6:	f008 fb61 	bl	8009d7c <HAL_TIMEx_MasterConfigSynchronization>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf14      	ite	ne
 80016c0:	2301      	movne	r3, #1
 80016c2:	2300      	moveq	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 80016ca:	f000 ff09 	bl	80024e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ce:	2360      	movs	r3, #96	; 0x60
 80016d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80016d2:	f240 1339 	movw	r3, #313	; 0x139
 80016d6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016dc:	2300      	movs	r3, #0
 80016de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016e0:	463b      	mov	r3, r7
 80016e2:	2208      	movs	r2, #8
 80016e4:	4619      	mov	r1, r3
 80016e6:	480a      	ldr	r0, [pc, #40]	; (8001710 <_ZL12MX_TIM4_Initv+0x11c>)
 80016e8:	f007 fce0 	bl	80090ac <HAL_TIM_PWM_ConfigChannel>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	bf14      	ite	ne
 80016f2:	2301      	movne	r3, #1
 80016f4:	2300      	moveq	r3, #0
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <_ZL12MX_TIM4_Initv+0x10c>
  {
    Error_Handler();
 80016fc:	f000 fef0 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <_ZL12MX_TIM4_Initv+0x11c>)
 8001702:	f001 f901 	bl	8002908 <HAL_TIM_MspPostInit>

}
 8001706:	bf00      	nop
 8001708:	3738      	adds	r7, #56	; 0x38
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2400038c 	.word	0x2400038c
 8001714:	40000800 	.word	0x40000800

08001718 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171e:	f107 0310 	add.w	r3, r7, #16
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001736:	4b25      	ldr	r3, [pc, #148]	; (80017cc <_ZL12MX_TIM5_Initv+0xb4>)
 8001738:	4a25      	ldr	r2, [pc, #148]	; (80017d0 <_ZL12MX_TIM5_Initv+0xb8>)
 800173a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 800173c:	4b23      	ldr	r3, [pc, #140]	; (80017cc <_ZL12MX_TIM5_Initv+0xb4>)
 800173e:	22c7      	movs	r2, #199	; 0xc7
 8001740:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <_ZL12MX_TIM5_Initv+0xb4>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8001748:	4b20      	ldr	r3, [pc, #128]	; (80017cc <_ZL12MX_TIM5_Initv+0xb4>)
 800174a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800174e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <_ZL12MX_TIM5_Initv+0xb4>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001756:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <_ZL12MX_TIM5_Initv+0xb4>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800175c:	481b      	ldr	r0, [pc, #108]	; (80017cc <_ZL12MX_TIM5_Initv+0xb4>)
 800175e:	f007 f946 	bl	80089ee <HAL_TIM_Base_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf14      	ite	ne
 8001768:	2301      	movne	r3, #1
 800176a:	2300      	moveq	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <_ZL12MX_TIM5_Initv+0x5e>
  {
    Error_Handler();
 8001772:	f000 feb5 	bl	80024e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4619      	mov	r1, r3
 8001782:	4812      	ldr	r0, [pc, #72]	; (80017cc <_ZL12MX_TIM5_Initv+0xb4>)
 8001784:	f007 fda6 	bl	80092d4 <HAL_TIM_ConfigClockSource>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	bf14      	ite	ne
 800178e:	2301      	movne	r3, #1
 8001790:	2300      	moveq	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <_ZL12MX_TIM5_Initv+0x84>
  {
    Error_Handler();
 8001798:	f000 fea2 	bl	80024e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	4808      	ldr	r0, [pc, #32]	; (80017cc <_ZL12MX_TIM5_Initv+0xb4>)
 80017aa:	f008 fae7 	bl	8009d7c <HAL_TIMEx_MasterConfigSynchronization>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	bf14      	ite	ne
 80017b4:	2301      	movne	r3, #1
 80017b6:	2300      	moveq	r3, #0
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <_ZL12MX_TIM5_Initv+0xaa>
  {
    Error_Handler();
 80017be:	f000 fe8f 	bl	80024e0 <Error_Handler>
  /* USER CODE BEGIN TIM5_Init 2 */
//  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE END TIM5_Init 2 */

}
 80017c2:	bf00      	nop
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	240003d8 	.word	0x240003d8
 80017d0:	40000c00 	.word	0x40000c00

080017d4 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <_ZL12MX_TIM6_Initv+0x78>)
 80017e6:	4a1a      	ldr	r2, [pc, #104]	; (8001850 <_ZL12MX_TIM6_Initv+0x7c>)
 80017e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <_ZL12MX_TIM6_Initv+0x78>)
 80017ec:	22c7      	movs	r2, #199	; 0xc7
 80017ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f0:	4b16      	ldr	r3, [pc, #88]	; (800184c <_ZL12MX_TIM6_Initv+0x78>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1200-1;
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <_ZL12MX_TIM6_Initv+0x78>)
 80017f8:	f240 42af 	movw	r2, #1199	; 0x4af
 80017fc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <_ZL12MX_TIM6_Initv+0x78>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001804:	4811      	ldr	r0, [pc, #68]	; (800184c <_ZL12MX_TIM6_Initv+0x78>)
 8001806:	f007 f8f2 	bl	80089ee <HAL_TIM_Base_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf14      	ite	ne
 8001810:	2301      	movne	r3, #1
 8001812:	2300      	moveq	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800181a:	f000 fe61 	bl	80024e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	4619      	mov	r1, r3
 800182a:	4808      	ldr	r0, [pc, #32]	; (800184c <_ZL12MX_TIM6_Initv+0x78>)
 800182c:	f008 faa6 	bl	8009d7c <HAL_TIMEx_MasterConfigSynchronization>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	bf14      	ite	ne
 8001836:	2301      	movne	r3, #1
 8001838:	2300      	moveq	r3, #0
 800183a:	b2db      	uxtb	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8001840:	f000 fe4e 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	24000424 	.word	0x24000424
 8001850:	40001000 	.word	0x40001000

08001854 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001864:	4b19      	ldr	r3, [pc, #100]	; (80018cc <_ZL12MX_TIM7_Initv+0x78>)
 8001866:	4a1a      	ldr	r2, [pc, #104]	; (80018d0 <_ZL12MX_TIM7_Initv+0x7c>)
 8001868:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <_ZL12MX_TIM7_Initv+0x78>)
 800186c:	22c7      	movs	r2, #199	; 0xc7
 800186e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <_ZL12MX_TIM7_Initv+0x78>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000-1;
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <_ZL12MX_TIM7_Initv+0x78>)
 8001878:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800187c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <_ZL12MX_TIM7_Initv+0x78>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001884:	4811      	ldr	r0, [pc, #68]	; (80018cc <_ZL12MX_TIM7_Initv+0x78>)
 8001886:	f007 f8b2 	bl	80089ee <HAL_TIM_Base_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 800189a:	f000 fe21 	bl	80024e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	4619      	mov	r1, r3
 80018aa:	4808      	ldr	r0, [pc, #32]	; (80018cc <_ZL12MX_TIM7_Initv+0x78>)
 80018ac:	f008 fa66 	bl	8009d7c <HAL_TIMEx_MasterConfigSynchronization>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf14      	ite	ne
 80018b6:	2301      	movne	r3, #1
 80018b8:	2300      	moveq	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 80018c0:	f000 fe0e 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	24000470 	.word	0x24000470
 80018d0:	40001400 	.word	0x40001400

080018d4 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018da:	463b      	mov	r3, r7
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <_ZL13MX_TIM12_Initv+0x80>)
 80018e8:	4a1b      	ldr	r2, [pc, #108]	; (8001958 <_ZL13MX_TIM12_Initv+0x84>)
 80018ea:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <_ZL13MX_TIM12_Initv+0x80>)
 80018ee:	22c7      	movs	r2, #199	; 0xc7
 80018f0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f2:	4b18      	ldr	r3, [pc, #96]	; (8001954 <_ZL13MX_TIM12_Initv+0x80>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 12000-1;
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <_ZL13MX_TIM12_Initv+0x80>)
 80018fa:	f642 62df 	movw	r2, #11999	; 0x2edf
 80018fe:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001900:	4b14      	ldr	r3, [pc, #80]	; (8001954 <_ZL13MX_TIM12_Initv+0x80>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <_ZL13MX_TIM12_Initv+0x80>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800190c:	4811      	ldr	r0, [pc, #68]	; (8001954 <_ZL13MX_TIM12_Initv+0x80>)
 800190e:	f007 f86e 	bl	80089ee <HAL_TIM_Base_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	bf14      	ite	ne
 8001918:	2301      	movne	r3, #1
 800191a:	2300      	moveq	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <_ZL13MX_TIM12_Initv+0x52>
  {
    Error_Handler();
 8001922:	f000 fddd 	bl	80024e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800192c:	463b      	mov	r3, r7
 800192e:	4619      	mov	r1, r3
 8001930:	4808      	ldr	r0, [pc, #32]	; (8001954 <_ZL13MX_TIM12_Initv+0x80>)
 8001932:	f007 fccf 	bl	80092d4 <HAL_TIM_ConfigClockSource>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf14      	ite	ne
 800193c:	2301      	movne	r3, #1
 800193e:	2300      	moveq	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <_ZL13MX_TIM12_Initv+0x76>
  {
    Error_Handler();
 8001946:	f000 fdcb 	bl	80024e0 <Error_Handler>
  /* USER CODE BEGIN TIM12_Init 2 */
//  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE END TIM12_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	240004bc 	.word	0x240004bc
 8001958:	40001800 	.word	0x40001800

0800195c <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b09a      	sub	sp, #104	; 0x68
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001962:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001970:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800197c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
 800198c:	615a      	str	r2, [r3, #20]
 800198e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	222c      	movs	r2, #44	; 0x2c
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f00b f9a6 	bl	800cce8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800199c:	4b4e      	ldr	r3, [pc, #312]	; (8001ad8 <_ZL13MX_TIM15_Initv+0x17c>)
 800199e:	4a4f      	ldr	r2, [pc, #316]	; (8001adc <_ZL13MX_TIM15_Initv+0x180>)
 80019a0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 80019a2:	4b4d      	ldr	r3, [pc, #308]	; (8001ad8 <_ZL13MX_TIM15_Initv+0x17c>)
 80019a4:	22ef      	movs	r2, #239	; 0xef
 80019a6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a8:	4b4b      	ldr	r3, [pc, #300]	; (8001ad8 <_ZL13MX_TIM15_Initv+0x17c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 80019ae:	4b4a      	ldr	r3, [pc, #296]	; (8001ad8 <_ZL13MX_TIM15_Initv+0x17c>)
 80019b0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80019b4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b6:	4b48      	ldr	r3, [pc, #288]	; (8001ad8 <_ZL13MX_TIM15_Initv+0x17c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80019bc:	4b46      	ldr	r3, [pc, #280]	; (8001ad8 <_ZL13MX_TIM15_Initv+0x17c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c2:	4b45      	ldr	r3, [pc, #276]	; (8001ad8 <_ZL13MX_TIM15_Initv+0x17c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80019c8:	4843      	ldr	r0, [pc, #268]	; (8001ad8 <_ZL13MX_TIM15_Initv+0x17c>)
 80019ca:	f007 f810 	bl	80089ee <HAL_TIM_Base_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bf14      	ite	ne
 80019d4:	2301      	movne	r3, #1
 80019d6:	2300      	moveq	r3, #0
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <_ZL13MX_TIM15_Initv+0x86>
  {
    Error_Handler();
 80019de:	f000 fd7f 	bl	80024e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80019e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019ec:	4619      	mov	r1, r3
 80019ee:	483a      	ldr	r0, [pc, #232]	; (8001ad8 <_ZL13MX_TIM15_Initv+0x17c>)
 80019f0:	f007 fc70 	bl	80092d4 <HAL_TIM_ConfigClockSource>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	bf14      	ite	ne
 80019fa:	2301      	movne	r3, #1
 80019fc:	2300      	moveq	r3, #0
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <_ZL13MX_TIM15_Initv+0xac>
  {
    Error_Handler();
 8001a04:	f000 fd6c 	bl	80024e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001a08:	4833      	ldr	r0, [pc, #204]	; (8001ad8 <_ZL13MX_TIM15_Initv+0x17c>)
 8001a0a:	f007 f8bf 	bl	8008b8c <HAL_TIM_PWM_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	bf14      	ite	ne
 8001a14:	2301      	movne	r3, #1
 8001a16:	2300      	moveq	r3, #0
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <_ZL13MX_TIM15_Initv+0xc6>
  {
    Error_Handler();
 8001a1e:	f000 fd5f 	bl	80024e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001a2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4829      	ldr	r0, [pc, #164]	; (8001ad8 <_ZL13MX_TIM15_Initv+0x17c>)
 8001a32:	f008 f9a3 	bl	8009d7c <HAL_TIMEx_MasterConfigSynchronization>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf14      	ite	ne
 8001a3c:	2301      	movne	r3, #1
 8001a3e:	2300      	moveq	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <_ZL13MX_TIM15_Initv+0xee>
  {
    Error_Handler();
 8001a46:	f000 fd4b 	bl	80024e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4a:	2360      	movs	r3, #96	; 0x60
 8001a4c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8001a4e:	f240 1339 	movw	r3, #313	; 0x139
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a54:	2300      	movs	r3, #0
 8001a56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4819      	ldr	r0, [pc, #100]	; (8001ad8 <_ZL13MX_TIM15_Initv+0x17c>)
 8001a72:	f007 fb1b 	bl	80090ac <HAL_TIM_PWM_ConfigChannel>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	bf14      	ite	ne
 8001a7c:	2301      	movne	r3, #1
 8001a7e:	2300      	moveq	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <_ZL13MX_TIM15_Initv+0x12e>
  {
    Error_Handler();
 8001a86:	f000 fd2b 	bl	80024e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <_ZL13MX_TIM15_Initv+0x17c>)
 8001ab2:	f008 f9f1 	bl	8009e98 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	bf14      	ite	ne
 8001abc:	2301      	movne	r3, #1
 8001abe:	2300      	moveq	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <_ZL13MX_TIM15_Initv+0x16e>
  {
    Error_Handler();
 8001ac6:	f000 fd0b 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001aca:	4803      	ldr	r0, [pc, #12]	; (8001ad8 <_ZL13MX_TIM15_Initv+0x17c>)
 8001acc:	f000 ff1c 	bl	8002908 <HAL_TIM_MspPostInit>

}
 8001ad0:	bf00      	nop
 8001ad2:	3768      	adds	r7, #104	; 0x68
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	24000508 	.word	0x24000508
 8001adc:	40014000 	.word	0x40014000

08001ae0 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <_ZL13MX_UART4_Initv+0xbc>)
 8001ae6:	4a2e      	ldr	r2, [pc, #184]	; (8001ba0 <_ZL13MX_UART4_Initv+0xc0>)
 8001ae8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8001aea:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <_ZL13MX_UART4_Initv+0xbc>)
 8001aec:	4a2d      	ldr	r2, [pc, #180]	; (8001ba4 <_ZL13MX_UART4_Initv+0xc4>)
 8001aee:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001af0:	4b2a      	ldr	r3, [pc, #168]	; (8001b9c <_ZL13MX_UART4_Initv+0xbc>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001af6:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <_ZL13MX_UART4_Initv+0xbc>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001afc:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <_ZL13MX_UART4_Initv+0xbc>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b02:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <_ZL13MX_UART4_Initv+0xbc>)
 8001b04:	220c      	movs	r2, #12
 8001b06:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b08:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <_ZL13MX_UART4_Initv+0xbc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0e:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <_ZL13MX_UART4_Initv+0xbc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b14:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <_ZL13MX_UART4_Initv+0xbc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b1a:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <_ZL13MX_UART4_Initv+0xbc>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <_ZL13MX_UART4_Initv+0xbc>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b26:	481d      	ldr	r0, [pc, #116]	; (8001b9c <_ZL13MX_UART4_Initv+0xbc>)
 8001b28:	f008 fa52 	bl	8009fd0 <HAL_UART_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	bf14      	ite	ne
 8001b32:	2301      	movne	r3, #1
 8001b34:	2300      	moveq	r3, #0
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <_ZL13MX_UART4_Initv+0x60>
  {
    Error_Handler();
 8001b3c:	f000 fcd0 	bl	80024e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001b40:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8001b44:	4815      	ldr	r0, [pc, #84]	; (8001b9c <_ZL13MX_UART4_Initv+0xbc>)
 8001b46:	f00a f80a 	bl	800bb5e <HAL_UARTEx_SetTxFifoThreshold>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	bf14      	ite	ne
 8001b50:	2301      	movne	r3, #1
 8001b52:	2300      	moveq	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 8001b5a:	f000 fcc1 	bl	80024e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001b5e:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001b62:	480e      	ldr	r0, [pc, #56]	; (8001b9c <_ZL13MX_UART4_Initv+0xbc>)
 8001b64:	f00a f839 	bl	800bbda <HAL_UARTEx_SetRxFifoThreshold>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	bf14      	ite	ne
 8001b6e:	2301      	movne	r3, #1
 8001b70:	2300      	moveq	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <_ZL13MX_UART4_Initv+0x9c>
  {
    Error_Handler();
 8001b78:	f000 fcb2 	bl	80024e0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8001b7c:	4807      	ldr	r0, [pc, #28]	; (8001b9c <_ZL13MX_UART4_Initv+0xbc>)
 8001b7e:	f009 ff7a 	bl	800ba76 <HAL_UARTEx_EnableFifoMode>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf14      	ite	ne
 8001b88:	2301      	movne	r3, #1
 8001b8a:	2300      	moveq	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <_ZL13MX_UART4_Initv+0xb6>
  {
    Error_Handler();
 8001b92:	f000 fca5 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	24000554 	.word	0x24000554
 8001ba0:	40004c00 	.word	0x40004c00
 8001ba4:	001e8480 	.word	0x001e8480

08001ba8 <_ZL13MX_UART7_Initv>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001bac:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <_ZL13MX_UART7_Initv+0xbc>)
 8001bae:	4a2e      	ldr	r2, [pc, #184]	; (8001c68 <_ZL13MX_UART7_Initv+0xc0>)
 8001bb0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001bb2:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <_ZL13MX_UART7_Initv+0xbc>)
 8001bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bb8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001bba:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <_ZL13MX_UART7_Initv+0xbc>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001bc0:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <_ZL13MX_UART7_Initv+0xbc>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001bc6:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <_ZL13MX_UART7_Initv+0xbc>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001bcc:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <_ZL13MX_UART7_Initv+0xbc>)
 8001bce:	220c      	movs	r2, #12
 8001bd0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <_ZL13MX_UART7_Initv+0xbc>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd8:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <_ZL13MX_UART7_Initv+0xbc>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bde:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <_ZL13MX_UART7_Initv+0xbc>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001be4:	4b1f      	ldr	r3, [pc, #124]	; (8001c64 <_ZL13MX_UART7_Initv+0xbc>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bea:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <_ZL13MX_UART7_Initv+0xbc>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001bf0:	481c      	ldr	r0, [pc, #112]	; (8001c64 <_ZL13MX_UART7_Initv+0xbc>)
 8001bf2:	f008 f9ed 	bl	8009fd0 <HAL_UART_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf14      	ite	ne
 8001bfc:	2301      	movne	r3, #1
 8001bfe:	2300      	moveq	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <_ZL13MX_UART7_Initv+0x62>
  {
    Error_Handler();
 8001c06:	f000 fc6b 	bl	80024e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001c0a:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8001c0e:	4815      	ldr	r0, [pc, #84]	; (8001c64 <_ZL13MX_UART7_Initv+0xbc>)
 8001c10:	f009 ffa5 	bl	800bb5e <HAL_UARTEx_SetTxFifoThreshold>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	bf14      	ite	ne
 8001c1a:	2301      	movne	r3, #1
 8001c1c:	2300      	moveq	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <_ZL13MX_UART7_Initv+0x80>
  {
    Error_Handler();
 8001c24:	f000 fc5c 	bl	80024e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001c28:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001c2c:	480d      	ldr	r0, [pc, #52]	; (8001c64 <_ZL13MX_UART7_Initv+0xbc>)
 8001c2e:	f009 ffd4 	bl	800bbda <HAL_UARTEx_SetRxFifoThreshold>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	bf14      	ite	ne
 8001c38:	2301      	movne	r3, #1
 8001c3a:	2300      	moveq	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <_ZL13MX_UART7_Initv+0x9e>
  {
    Error_Handler();
 8001c42:	f000 fc4d 	bl	80024e0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8001c46:	4807      	ldr	r0, [pc, #28]	; (8001c64 <_ZL13MX_UART7_Initv+0xbc>)
 8001c48:	f009 ff15 	bl	800ba76 <HAL_UARTEx_EnableFifoMode>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	bf14      	ite	ne
 8001c52:	2301      	movne	r3, #1
 8001c54:	2300      	moveq	r3, #0
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <_ZL13MX_UART7_Initv+0xb8>
  {
    Error_Handler();
 8001c5c:	f000 fc40 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	240005e4 	.word	0x240005e4
 8001c68:	40007800 	.word	0x40007800

08001c6c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c70:	4b2c      	ldr	r3, [pc, #176]	; (8001d24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c72:	4a2d      	ldr	r2, [pc, #180]	; (8001d28 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001c74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c76:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7e:	4b29      	ldr	r3, [pc, #164]	; (8001d24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c84:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c8a:	4b26      	ldr	r3, [pc, #152]	; (8001d24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c92:	220c      	movs	r2, #12
 8001c94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c96:	4b23      	ldr	r3, [pc, #140]	; (8001d24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c9c:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ca2:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cb4:	481b      	ldr	r0, [pc, #108]	; (8001d24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001cb6:	f008 f98b 	bl	8009fd0 <HAL_UART_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf14      	ite	ne
 8001cc0:	2301      	movne	r3, #1
 8001cc2:	2300      	moveq	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8001cca:	f000 fc09 	bl	80024e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4814      	ldr	r0, [pc, #80]	; (8001d24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001cd2:	f009 ff44 	bl	800bb5e <HAL_UARTEx_SetTxFifoThreshold>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bf14      	ite	ne
 8001cdc:	2301      	movne	r3, #1
 8001cde:	2300      	moveq	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8001ce6:	f000 fbfb 	bl	80024e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cea:	2100      	movs	r1, #0
 8001cec:	480d      	ldr	r0, [pc, #52]	; (8001d24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001cee:	f009 ff74 	bl	800bbda <HAL_UARTEx_SetRxFifoThreshold>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf14      	ite	ne
 8001cf8:	2301      	movne	r3, #1
 8001cfa:	2300      	moveq	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8001d02:	f000 fbed 	bl	80024e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d06:	4807      	ldr	r0, [pc, #28]	; (8001d24 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001d08:	f009 fef0 	bl	800baec <HAL_UARTEx_DisableFifoMode>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	bf14      	ite	ne
 8001d12:	2301      	movne	r3, #1
 8001d14:	2300      	moveq	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001d1c:	f000 fbe0 	bl	80024e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	24000674 	.word	0x24000674
 8001d28:	40004800 	.word	0x40004800

08001d2c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <_ZL11MX_DMA_Initv+0x7c>)
 8001d34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d38:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <_ZL11MX_DMA_Initv+0x7c>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d42:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <_ZL11MX_DMA_Initv+0x7c>)
 8001d44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2100      	movs	r1, #0
 8001d54:	200b      	movs	r0, #11
 8001d56:	f001 fca2 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d5a:	200b      	movs	r0, #11
 8001d5c:	f001 fcb9 	bl	80036d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	200c      	movs	r0, #12
 8001d66:	f001 fc9a 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d6a:	200c      	movs	r0, #12
 8001d6c:	f001 fcb1 	bl	80036d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	200d      	movs	r0, #13
 8001d76:	f001 fc92 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d7a:	200d      	movs	r0, #13
 8001d7c:	f001 fca9 	bl	80036d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	200e      	movs	r0, #14
 8001d86:	f001 fc8a 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001d8a:	200e      	movs	r0, #14
 8001d8c:	f001 fca1 	bl	80036d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	200f      	movs	r0, #15
 8001d96:	f001 fc82 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001d9a:	200f      	movs	r0, #15
 8001d9c:	f001 fc99 	bl	80036d2 <HAL_NVIC_EnableIRQ>

}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	58024400 	.word	0x58024400

08001dac <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08c      	sub	sp, #48	; 0x30
 8001db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
 8001dc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dc2:	4b8e      	ldr	r3, [pc, #568]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc8:	4a8c      	ldr	r2, [pc, #560]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001dca:	f043 0310 	orr.w	r3, r3, #16
 8001dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd2:	4b8a      	ldr	r3, [pc, #552]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de0:	4b86      	ldr	r3, [pc, #536]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de6:	4a85      	ldr	r2, [pc, #532]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df0:	4b82      	ldr	r3, [pc, #520]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfe:	4b7f      	ldr	r3, [pc, #508]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e04:	4a7d      	ldr	r2, [pc, #500]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0e:	4b7b      	ldr	r3, [pc, #492]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1c:	4b77      	ldr	r3, [pc, #476]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e22:	4a76      	ldr	r2, [pc, #472]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e2c:	4b73      	ldr	r3, [pc, #460]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3a:	4b70      	ldr	r3, [pc, #448]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e40:	4a6e      	ldr	r2, [pc, #440]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001e42:	f043 0302 	orr.w	r3, r3, #2
 8001e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e4a:	4b6c      	ldr	r3, [pc, #432]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e58:	4b68      	ldr	r3, [pc, #416]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5e:	4a67      	ldr	r2, [pc, #412]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001e60:	f043 0308 	orr.w	r3, r3, #8
 8001e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e68:	4b64      	ldr	r3, [pc, #400]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e76:	4b61      	ldr	r3, [pc, #388]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7c:	4a5f      	ldr	r2, [pc, #380]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e86:	4b5d      	ldr	r3, [pc, #372]	; (8001ffc <_ZL12MX_GPIO_Initv+0x250>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e90:	603b      	str	r3, [r7, #0]
 8001e92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001e94:	2200      	movs	r2, #0
 8001e96:	f644 2121 	movw	r1, #18977	; 0x4a21
 8001e9a:	4859      	ldr	r0, [pc, #356]	; (8002000 <_ZL12MX_GPIO_Initv+0x254>)
 8001e9c:	f004 f8fe 	bl	800609c <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f24c 0102 	movw	r1, #49154	; 0xc002
 8001ea6:	4857      	ldr	r0, [pc, #348]	; (8002004 <_ZL12MX_GPIO_Initv+0x258>)
 8001ea8:	f004 f8f8 	bl	800609c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001eac:	2200      	movs	r2, #0
 8001eae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eb2:	4855      	ldr	r0, [pc, #340]	; (8002008 <_ZL12MX_GPIO_Initv+0x25c>)
 8001eb4:	f004 f8f2 	bl	800609c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ebe:	4853      	ldr	r0, [pc, #332]	; (800200c <_ZL12MX_GPIO_Initv+0x260>)
 8001ec0:	f004 f8ec 	bl	800609c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eca:	4851      	ldr	r0, [pc, #324]	; (8002010 <_ZL12MX_GPIO_Initv+0x264>)
 8001ecc:	f004 f8e6 	bl	800609c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 8001ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ed6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4849      	ldr	r0, [pc, #292]	; (800200c <_ZL12MX_GPIO_Initv+0x260>)
 8001ee8:	f003 ff28 	bl	8005d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001eec:	f644 2321 	movw	r3, #18977	; 0x4a21
 8001ef0:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efe:	f107 031c 	add.w	r3, r7, #28
 8001f02:	4619      	mov	r1, r3
 8001f04:	483e      	ldr	r0, [pc, #248]	; (8002000 <_ZL12MX_GPIO_Initv+0x254>)
 8001f06:	f003 ff19 	bl	8005d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8001f0a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f1a:	f107 031c 	add.w	r3, r7, #28
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4838      	ldr	r0, [pc, #224]	; (8002004 <_ZL12MX_GPIO_Initv+0x258>)
 8001f22:	f003 ff0b 	bl	8005d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001f26:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001f2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4831      	ldr	r0, [pc, #196]	; (8002004 <_ZL12MX_GPIO_Initv+0x258>)
 8001f40:	f003 fefc 	bl	8005d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	482a      	ldr	r0, [pc, #168]	; (8002008 <_ZL12MX_GPIO_Initv+0x25c>)
 8001f5e:	f003 feed 	bl	8005d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4824      	ldr	r0, [pc, #144]	; (800200c <_ZL12MX_GPIO_Initv+0x260>)
 8001f7c:	f003 fede 	bl	8005d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : UART4_DE_Pin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8001f80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f86:	2301      	movs	r3, #1
 8001f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8001f92:	f107 031c 	add.w	r3, r7, #28
 8001f96:	4619      	mov	r1, r3
 8001f98:	481d      	ldr	r0, [pc, #116]	; (8002010 <_ZL12MX_GPIO_Initv+0x264>)
 8001f9a:	f003 fecf 	bl	8005d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8001f9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fa4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001fae:	f107 031c 	add.w	r3, r7, #28
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4817      	ldr	r0, [pc, #92]	; (8002014 <_ZL12MX_GPIO_Initv+0x268>)
 8001fb6:	f003 fec1 	bl	8005d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001fba:	23c0      	movs	r3, #192	; 0xc0
 8001fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fbe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	4619      	mov	r1, r3
 8001fce:	480c      	ldr	r0, [pc, #48]	; (8002000 <_ZL12MX_GPIO_Initv+0x254>)
 8001fd0:	f003 feb4 	bl	8005d3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	2017      	movs	r0, #23
 8001fda:	f001 fb60 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fde:	2017      	movs	r0, #23
 8001fe0:	f001 fb77 	bl	80036d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	2028      	movs	r0, #40	; 0x28
 8001fea:	f001 fb58 	bl	800369e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fee:	2028      	movs	r0, #40	; 0x28
 8001ff0:	f001 fb6f 	bl	80036d2 <HAL_NVIC_EnableIRQ>

}
 8001ff4:	bf00      	nop
 8001ff6:	3730      	adds	r7, #48	; 0x30
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	58024400 	.word	0x58024400
 8002000:	58020400 	.word	0x58020400
 8002004:	58021000 	.word	0x58021000
 8002008:	58020c00 	.word	0x58020c00
 800200c:	58020800 	.word	0x58020800
 8002010:	58020000 	.word	0x58020000
 8002014:	58021800 	.word	0x58021800

08002018 <_Z7find_IKffff>:

/* USER CODE BEGIN 4 */

joint_config find_IK(float gripper_linear_x, float gripper_linear_y, float gripper_linear_z, float gripper_angular_yaw)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b09b      	sub	sp, #108	; 0x6c
 800201c:	af00      	add	r7, sp, #0
 800201e:	ed87 0a07 	vstr	s0, [r7, #28]
 8002022:	edc7 0a06 	vstr	s1, [r7, #24]
 8002026:	ed87 1a05 	vstr	s2, [r7, #20]
 800202a:	edc7 1a04 	vstr	s3, [r7, #16]
	float C3 = (gripper_linear_x*gripper_linear_x)+(gripper_linear_y*gripper_linear_y)-(L12*L12)-(L3*L3) / (2*L12*L3);
 800202e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002032:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002036:	edd7 7a06 	vldr	s15, [r7, #24]
 800203a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800203e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002042:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002046:	ed9f 6b58 	vldr	d6, [pc, #352]	; 80021a8 <_Z7find_IKffff+0x190>
 800204a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800204e:	ed9f 6b58 	vldr	d6, [pc, #352]	; 80021b0 <_Z7find_IKffff+0x198>
 8002052:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002056:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800205a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float S3 = sqrt(1-(C3*C3));
 800205e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002062:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002066:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800206a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800206e:	eeb0 0a67 	vmov.f32	s0, s15
 8002072:	f7fe ff42 	bl	8000efa <_ZSt4sqrtf>
 8002076:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
	float q3 =  atan2(S3,C3);
 800207a:	edd7 0a19 	vldr	s1, [r7, #100]	; 0x64
 800207e:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8002082:	f7fe ff26 	bl	8000ed2 <_ZSt5atan2ff>
 8002086:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c

	float L3S3 = L3*S3;
 800208a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800208e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002092:	ed9f 6b49 	vldr	d6, [pc, #292]	; 80021b8 <_Z7find_IKffff+0x1a0>
 8002096:	ee27 7b06 	vmul.f64	d7, d7, d6
 800209a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800209e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float L123C3 = L12 + (L3*C3);
 80020a2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80020a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020aa:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80021b8 <_Z7find_IKffff+0x1a0>
 80020ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020b2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80021c0 <_Z7find_IKffff+0x1a8>
 80020b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020be:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	float S1 = (-L3S3*gripper_linear_x) + (L123C3*gripper_linear_y);
 80020c2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80020c6:	eeb1 7a67 	vneg.f32	s14, s15
 80020ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80020ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d2:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80020d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80020da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	float C1 = (L3S3*gripper_linear_y) + (L123C3*gripper_linear_x);
 80020e6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80020ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80020ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f2:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80020f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80020fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002102:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	float q1 = atan2(S1,C1);
 8002106:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 800210a:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 800210e:	f7fe fee0 	bl	8000ed2 <_ZSt5atan2ff>
 8002112:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
	float q4 = gripper_angular_yaw - q1 - q3;
 8002116:	ed97 7a04 	vldr	s14, [r7, #16]
 800211a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800211e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002122:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800212a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float q2 = gripper_linear_z + H4 - H3 - H1;
 800212e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002132:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002136:	ed9f 6b24 	vldr	d6, [pc, #144]	; 80021c8 <_Z7find_IKffff+0x1b0>
 800213a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800213e:	ed9f 6b24 	vldr	d6, [pc, #144]	; 80021d0 <_Z7find_IKffff+0x1b8>
 8002142:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002146:	eeb4 6b00 	vmov.f64	d6, #64	; 0x3e000000  0.125
 800214a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800214e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002152:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	joint_config buff;
	buff.q1 = q1;
 8002156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002158:	623b      	str	r3, [r7, #32]
	buff.q2 = 0;
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
	buff.q3 = q3;
 8002160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
	buff.q4 = 0;
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	62fb      	str	r3, [r7, #44]	; 0x2c

    return buff;
 800216a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800216e:	f107 0320 	add.w	r3, r7, #32
 8002172:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002174:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800217a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800217c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800217e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002180:	ee06 0a10 	vmov	s12, r0
 8002184:	ee06 1a90 	vmov	s13, r1
 8002188:	ee07 2a10 	vmov	s14, r2
 800218c:	ee07 3a90 	vmov	s15, r3
}
 8002190:	eeb0 0a46 	vmov.f32	s0, s12
 8002194:	eef0 0a66 	vmov.f32	s1, s13
 8002198:	eeb0 1a47 	vmov.f32	s2, s14
 800219c:	eef0 1a67 	vmov.f32	s3, s15
 80021a0:	376c      	adds	r7, #108	; 0x6c
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd90      	pop	{r4, r7, pc}
 80021a6:	bf00      	nop
 80021a8:	50001a18 	.word	0x50001a18
 80021ac:	3fc2ccdb 	.word	0x3fc2ccdb
 80021b0:	103a83db 	.word	0x103a83db
 80021b4:	3fda4d3d 	.word	0x3fda4d3d
 80021b8:	c28f5c29 	.word	0xc28f5c29
 80021bc:	3fd428f5 	.word	0x3fd428f5
 80021c0:	0956c0d7 	.word	0x0956c0d7
 80021c4:	3fd88716 	.word	0x3fd88716
 80021c8:	851eb852 	.word	0x851eb852
 80021cc:	3fc851eb 	.word	0x3fc851eb
 80021d0:	0a3d70a4 	.word	0x0a3d70a4
 80021d4:	3fb0a3d7 	.word	0x3fb0a3d7

080021d8 <HAL_GPIO_EXTI_Callback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
//	if (huart == &huart3) {
//		HAL_UART_Transmit_DMA(&huart3, UART3_RXBUFFER, 9);
//	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	80fb      	strh	r3, [r7, #6]
//
//	}
//	if (GPIO_Pin == Blue_Button_Pin_Pin) {
//		HAL_GPIO_WritePin(LD1_GPIO_Port, GPIO_Pin, PinState)
//	}
}
 80021e2:	bf00      	nop
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	ed2d 8b02 	vpush	{d8}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
	 * HAL_TIM_Base_Stop_IT(&htim5);
	 *
	 */
	/* Timer5 Interrupt for PID Position Control.*/

	if (htim == &htim6) {
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4aa0      	ldr	r2, [pc, #640]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d129      	bne.n	8002258 <HAL_TIM_PeriodElapsedCallback+0x68>
		encoderJ1.AMT21_Read();
 8002204:	489f      	ldr	r0, [pc, #636]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002206:	f7fe fa5e 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 800220a:	489e      	ldr	r0, [pc, #632]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800220c:	f7fe fa8a 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8002210:	4603      	mov	r3, r0
 8002212:	461a      	mov	r2, r3
 8002214:	4b9c      	ldr	r3, [pc, #624]	; (8002488 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002216:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8002218:	4b9b      	ldr	r3, [pc, #620]	; (8002488 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d106      	bne.n	800222e <HAL_TIM_PeriodElapsedCallback+0x3e>
			posJ1 = encoderJ1.getAngPos180();
 8002220:	4898      	ldr	r0, [pc, #608]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002222:	f7fe fae3 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	4b98      	ldr	r3, [pc, #608]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800222c:	801a      	strh	r2, [r3, #0]
		}
		encoderJ3.AMT21_Read();
 800222e:	4898      	ldr	r0, [pc, #608]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002230:	f7fe fa49 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8002234:	4896      	ldr	r0, [pc, #600]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002236:	f7fe fa75 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800223a:	4603      	mov	r3, r0
 800223c:	461a      	mov	r2, r3
 800223e:	4b95      	ldr	r3, [pc, #596]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002240:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8002242:	4b94      	ldr	r3, [pc, #592]	; (8002494 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_TIM_PeriodElapsedCallback+0x68>
			posJ3 = encoderJ3.getAngPos180();
 800224a:	4891      	ldr	r0, [pc, #580]	; (8002490 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800224c:	f7fe face 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8002250:	4603      	mov	r3, r0
 8002252:	461a      	mov	r2, r3
 8002254:	4b90      	ldr	r3, [pc, #576]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8002256:	801a      	strh	r2, [r3, #0]
		}
	}
//	stepperJ1.StepperSetFrequency(200.0f);
//	stepperJ3.StepperSetFrequency(200.0f)		;

	const float KP_J1 = -2;
 8002258:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800225c:	61fb      	str	r3, [r7, #28]
	const float Kp_J3 = -6;
 800225e:	4b8f      	ldr	r3, [pc, #572]	; (800249c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8002260:	61bb      	str	r3, [r7, #24]

	joint_config findchessbot_joint_state;
//	findchessbot_joint_state = find_IK(0.4, 0, 0, 0);
	findchessbot_joint_state = find_IK(
			0.247*cos(chess_board_ang+0.785)+0.42744,
 8002262:	4b8f      	ldr	r3, [pc, #572]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800226c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002458 <HAL_TIM_PeriodElapsedCallback+0x268>
 8002270:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002274:	eeb0 0b47 	vmov.f64	d0, d7
 8002278:	f009 fd3e 	bl	800bcf8 <cos>
 800227c:	eeb0 7b40 	vmov.f64	d7, d0
 8002280:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8002460 <HAL_TIM_PeriodElapsedCallback+0x270>
 8002284:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002288:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8002468 <HAL_TIM_PeriodElapsedCallback+0x278>
 800228c:	ee37 7b06 	vadd.f64	d7, d7, d6
			0.247*sin(chess_board_ang+0.785)+0.00059371,
					0,
					0);
 8002290:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
			0.247*sin(chess_board_ang+0.785)+0.00059371,
 8002294:	4b82      	ldr	r3, [pc, #520]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800229e:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8002458 <HAL_TIM_PeriodElapsedCallback+0x268>
 80022a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022a6:	eeb0 0b47 	vmov.f64	d0, d7
 80022aa:	f009 fd6d 	bl	800bd88 <sin>
 80022ae:	eeb0 7b40 	vmov.f64	d7, d0
 80022b2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8002460 <HAL_TIM_PeriodElapsedCallback+0x270>
 80022b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022ba:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8002470 <HAL_TIM_PeriodElapsedCallback+0x280>
 80022be:	ee37 7b06 	vadd.f64	d7, d7, d6
					0);
 80022c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022c6:	eddf 1a77 	vldr	s3, [pc, #476]	; 80024a4 <HAL_TIM_PeriodElapsedCallback+0x2b4>
 80022ca:	ed9f 1a76 	vldr	s2, [pc, #472]	; 80024a4 <HAL_TIM_PeriodElapsedCallback+0x2b4>
 80022ce:	eef0 0a67 	vmov.f32	s1, s15
 80022d2:	eeb0 0a48 	vmov.f32	s0, s16
 80022d6:	f7ff fe9f 	bl	8002018 <_Z7find_IKffff>
 80022da:	eeb0 6a40 	vmov.f32	s12, s0
 80022de:	eef0 6a60 	vmov.f32	s13, s1
 80022e2:	eeb0 7a41 	vmov.f32	s14, s2
 80022e6:	eef0 7a61 	vmov.f32	s15, s3
 80022ea:	ed87 6a02 	vstr	s12, [r7, #8]
 80022ee:	edc7 6a03 	vstr	s13, [r7, #12]
 80022f2:	ed87 7a04 	vstr	s14, [r7, #16]
 80022f6:	edc7 7a05 	vstr	s15, [r7, #20]
	chess_board_ang = (chess_board_ang + 0.000348) ;
 80022fa:	4b69      	ldr	r3, [pc, #420]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002304:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002478 <HAL_TIM_PeriodElapsedCallback+0x288>
 8002308:	ee37 7b06 	vadd.f64	d7, d7, d6
 800230c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002310:	4b63      	ldr	r3, [pc, #396]	; (80024a0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8002312:	edc3 7a00 	vstr	s15, [r3]
//	printf("%f\t%f\n",findchessbot_joint_state.q1,findchessbot_joint_state.q3);
	setpointJ1 = findchessbot_joint_state.q1 * 2607;
 8002316:	edd7 7a02 	vldr	s15, [r7, #8]
 800231a:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80024a8 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 800231e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002322:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002326:	ee17 2a90 	vmov	r2, s15
 800232a:	4b60      	ldr	r3, [pc, #384]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800232c:	601a      	str	r2, [r3, #0]
	setpointJ3 = findchessbot_joint_state.q3 * 2607;
 800232e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002332:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80024a8 <HAL_TIM_PeriodElapsedCallback+0x2b8>
 8002336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800233a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800233e:	ee17 2a90 	vmov	r2, s15
 8002342:	4b5b      	ldr	r3, [pc, #364]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002344:	601a      	str	r2, [r3, #0]
	b1 = findchessbot_joint_state.q1;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	4a5a      	ldr	r2, [pc, #360]	; (80024b4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800234a:	6013      	str	r3, [r2, #0]
	b2 = findchessbot_joint_state.q2;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4a5a      	ldr	r2, [pc, #360]	; (80024b8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002350:	6013      	str	r3, [r2, #0]
	b3 = findchessbot_joint_state.q3;
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4a59      	ldr	r2, [pc, #356]	; (80024bc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002356:	6013      	str	r3, [r2, #0]
	b4 = findchessbot_joint_state.q4;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	4a59      	ldr	r2, [pc, #356]	; (80024c0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800235c:	6013      	str	r3, [r2, #0]
	errorJ1 = posJ1 - setpointJ1;
 800235e:	4b4b      	ldr	r3, [pc, #300]	; (800248c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b21b      	sxth	r3, r3
 8002364:	461a      	mov	r2, r3
 8002366:	4b51      	ldr	r3, [pc, #324]	; (80024ac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	ee07 3a90 	vmov	s15, r3
 8002370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002374:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002376:	edc3 7a00 	vstr	s15, [r3]
	errorJ3 = posJ3 - setpointJ3 ;
 800237a:	4b47      	ldr	r3, [pc, #284]	; (8002498 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	b21b      	sxth	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	4b4b      	ldr	r3, [pc, #300]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	ee07 3a90 	vmov	s15, r3
 800238c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002390:	4b4d      	ldr	r3, [pc, #308]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002392:	edc3 7a00 	vstr	s15, [r3]


	uJ1 = (KP_J1 * errorJ1);
 8002396:	4b4b      	ldr	r3, [pc, #300]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80023a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023a4:	4b49      	ldr	r3, [pc, #292]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80023a6:	edc3 7a00 	vstr	s15, [r3]
	uJ3 = (Kp_J3 * errorJ3);
 80023aa:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 80023b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b8:	4b45      	ldr	r3, [pc, #276]	; (80024d0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80023ba:	edc3 7a00 	vstr	s15, [r3]
//	stepperJ3.StepperSetFrequency(-1200.0f);

	#ifdef __cplusplus
	if (fabs(errorJ1)> 50.0)
 80023be:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	eeb0 0a67 	vmov.f32	s0, s15
 80023c8:	f7fe fa31 	bl	800082e <_ZSt4fabsf>
 80023cc:	eef0 7a40 	vmov.f32	s15, s0
 80023d0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80024d4 <HAL_TIM_PeriodElapsedCallback+0x2e4>
 80023d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023dc:	bfcc      	ite	gt
 80023de:	2301      	movgt	r3, #1
 80023e0:	2300      	movle	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d008      	beq.n	80023fa <HAL_TIM_PeriodElapsedCallback+0x20a>
	{
		stepperJ1.StepperSetFrequency(uJ1);
 80023e8:	4b38      	ldr	r3, [pc, #224]	; (80024cc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80023ea:	edd3 7a00 	vldr	s15, [r3]
 80023ee:	eeb0 0a67 	vmov.f32	s0, s15
 80023f2:	4839      	ldr	r0, [pc, #228]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80023f4:	f7fe fa9c 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
 80023f8:	e004      	b.n	8002404 <HAL_TIM_PeriodElapsedCallback+0x214>
	}
	else
	{
		stepperJ1.StepperSetFrequency(0);
 80023fa:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80024a4 <HAL_TIM_PeriodElapsedCallback+0x2b4>
 80023fe:	4836      	ldr	r0, [pc, #216]	; (80024d8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002400:	f7fe fa96 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	}
	if (fabs(errorJ3) > 50.0)
 8002404:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	f7fe fa0e 	bl	800082e <_ZSt4fabsf>
 8002412:	eef0 7a40 	vmov.f32	s15, s0
 8002416:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80024d4 <HAL_TIM_PeriodElapsedCallback+0x2e4>
 800241a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800241e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002422:	bfcc      	ite	gt
 8002424:	2301      	movgt	r3, #1
 8002426:	2300      	movle	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_TIM_PeriodElapsedCallback+0x250>
	{
		stepperJ3.StepperSetFrequency(uJ3);
 800242e:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8002430:	edd3 7a00 	vldr	s15, [r3]
 8002434:	eeb0 0a67 	vmov.f32	s0, s15
 8002438:	4828      	ldr	r0, [pc, #160]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800243a:	f7fe fa79 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	{
	stepperJ3.StepperSetFrequency(0);
	}
	#endif

}
 800243e:	e004      	b.n	800244a <HAL_TIM_PeriodElapsedCallback+0x25a>
	stepperJ3.StepperSetFrequency(0);
 8002440:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80024a4 <HAL_TIM_PeriodElapsedCallback+0x2b4>
 8002444:	4825      	ldr	r0, [pc, #148]	; (80024dc <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002446:	f7fe fa73 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
}
 800244a:	bf00      	nop
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	ecbd 8b02 	vpop	{d8}
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	51eb851f 	.word	0x51eb851f
 800245c:	3fe91eb8 	.word	0x3fe91eb8
 8002460:	2d0e5604 	.word	0x2d0e5604
 8002464:	3fcf9db2 	.word	0x3fcf9db2
 8002468:	4d4024b3 	.word	0x4d4024b3
 800246c:	3fdb5b2d 	.word	0x3fdb5b2d
 8002470:	84437119 	.word	0x84437119
 8002474:	3f437466 	.word	0x3f437466
 8002478:	9e774eec 	.word	0x9e774eec
 800247c:	3f36ce78 	.word	0x3f36ce78
 8002480:	24000424 	.word	0x24000424
 8002484:	2400095c 	.word	0x2400095c
 8002488:	240009d4 	.word	0x240009d4
 800248c:	240009e8 	.word	0x240009e8
 8002490:	24000970 	.word	0x24000970
 8002494:	240009d5 	.word	0x240009d5
 8002498:	240009ea 	.word	0x240009ea
 800249c:	c0c00000 	.word	0xc0c00000
 80024a0:	24000a04 	.word	0x24000a04
 80024a4:	00000000 	.word	0x00000000
 80024a8:	4522f000 	.word	0x4522f000
 80024ac:	240009ec 	.word	0x240009ec
 80024b0:	240009f0 	.word	0x240009f0
 80024b4:	240009d8 	.word	0x240009d8
 80024b8:	240009dc 	.word	0x240009dc
 80024bc:	240009e0 	.word	0x240009e0
 80024c0:	240009e4 	.word	0x240009e4
 80024c4:	240009f4 	.word	0x240009f4
 80024c8:	240009f8 	.word	0x240009f8
 80024cc:	240009fc 	.word	0x240009fc
 80024d0:	24000a00 	.word	0x24000a00
 80024d4:	42480000 	.word	0x42480000
 80024d8:	24000984 	.word	0x24000984
 80024dc:	240009ac 	.word	0x240009ac

080024e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80024e4:	2200      	movs	r2, #0
 80024e6:	2101      	movs	r1, #1
 80024e8:	4808      	ldr	r0, [pc, #32]	; (800250c <Error_Handler+0x2c>)
 80024ea:	f003 fdd7 	bl	800609c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2102      	movs	r1, #2
 80024f2:	4807      	ldr	r0, [pc, #28]	; (8002510 <Error_Handler+0x30>)
 80024f4:	f003 fdd2 	bl	800609c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80024f8:	2201      	movs	r2, #1
 80024fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024fe:	4803      	ldr	r0, [pc, #12]	; (800250c <Error_Handler+0x2c>)
 8002500:	f003 fdcc 	bl	800609c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002504:	b672      	cpsid	i
}
 8002506:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002508:	e7fe      	b.n	8002508 <Error_Handler+0x28>
 800250a:	bf00      	nop
 800250c:	58020400 	.word	0x58020400
 8002510:	58021000 	.word	0x58021000

08002514 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af02      	add	r7, sp, #8
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d11f      	bne.n	8002564 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800252a:	4293      	cmp	r3, r2
 800252c:	d11a      	bne.n	8002564 <_Z41__static_initialization_and_destruction_0ii+0x50>
AMT21 encoderJ1(&huart4, 0xD4);
 800252e:	22d4      	movs	r2, #212	; 0xd4
 8002530:	4918      	ldr	r1, [pc, #96]	; (8002594 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002532:	4819      	ldr	r0, [pc, #100]	; (8002598 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002534:	f7fe f8a8 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8002538:	22c4      	movs	r2, #196	; 0xc4
 800253a:	4916      	ldr	r1, [pc, #88]	; (8002594 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800253c:	4817      	ldr	r0, [pc, #92]	; (800259c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800253e:	f7fe f8a3 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8002542:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800254a:	2204      	movs	r2, #4
 800254c:	4915      	ldr	r1, [pc, #84]	; (80025a4 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800254e:	4816      	ldr	r0, [pc, #88]	; (80025a8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002550:	f7fe f98e 	bl	8000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8002554:	2320      	movs	r3, #32
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800255a:	2200      	movs	r2, #0
 800255c:	4914      	ldr	r1, [pc, #80]	; (80025b0 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800255e:	4815      	ldr	r0, [pc, #84]	; (80025b4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002560:	f7fe f986 	bl	8000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d110      	bne.n	800258c <_Z41__static_initialization_and_destruction_0ii+0x78>
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002570:	4293      	cmp	r3, r2
 8002572:	d10b      	bne.n	800258c <_Z41__static_initialization_and_destruction_0ii+0x78>
 8002574:	480f      	ldr	r0, [pc, #60]	; (80025b4 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002576:	f7fe f9bf 	bl	80008f8 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 800257a:	480b      	ldr	r0, [pc, #44]	; (80025a8 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800257c:	f7fe f9bc 	bl	80008f8 <_ZN7StepperD1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8002580:	4806      	ldr	r0, [pc, #24]	; (800259c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002582:	f7fe f895 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8002586:	4804      	ldr	r0, [pc, #16]	; (8002598 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002588:	f7fe f892 	bl	80006b0 <_ZN5AMT21D1Ev>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	24000554 	.word	0x24000554
 8002598:	2400095c 	.word	0x2400095c
 800259c:	24000970 	.word	0x24000970
 80025a0:	58021000 	.word	0x58021000
 80025a4:	240002a8 	.word	0x240002a8
 80025a8:	24000984 	.word	0x24000984
 80025ac:	58020400 	.word	0x58020400
 80025b0:	24000340 	.word	0x24000340
 80025b4:	240009ac 	.word	0x240009ac

080025b8 <_GLOBAL__sub_I_hcrc>:
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025c0:	2001      	movs	r0, #1
 80025c2:	f7ff ffa7 	bl	8002514 <_Z41__static_initialization_and_destruction_0ii>
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <_GLOBAL__sub_D_hcrc>:
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80025d0:	2000      	movs	r0, #0
 80025d2:	f7ff ff9f 	bl	8002514 <_Z41__static_initialization_and_destruction_0ii>
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <HAL_MspInit+0x30>)
 80025e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025e4:	4a08      	ldr	r2, [pc, #32]	; (8002608 <HAL_MspInit+0x30>)
 80025e6:	f043 0302 	orr.w	r3, r3, #2
 80025ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_MspInit+0x30>)
 80025f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	58024400 	.word	0x58024400

0800260c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <HAL_CRC_MspInit+0x3c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10e      	bne.n	800263c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_CRC_MspInit+0x40>)
 8002620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002624:	4a09      	ldr	r2, [pc, #36]	; (800264c <HAL_CRC_MspInit+0x40>)
 8002626:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800262a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800262e:	4b07      	ldr	r3, [pc, #28]	; (800264c <HAL_CRC_MspInit+0x40>)
 8002630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002634:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	58024c00 	.word	0x58024c00
 800264c:	58024400 	.word	0x58024400

08002650 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b0b8      	sub	sp, #224	; 0xe0
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002668:	f107 0310 	add.w	r3, r7, #16
 800266c:	22bc      	movs	r2, #188	; 0xbc
 800266e:	2100      	movs	r1, #0
 8002670:	4618      	mov	r0, r3
 8002672:	f00a fb39 	bl	800cce8 <memset>
  if(hspi->Instance==SPI3)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a25      	ldr	r2, [pc, #148]	; (8002710 <HAL_SPI_MspInit+0xc0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d142      	bne.n	8002706 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002684:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002686:	2300      	movs	r3, #0
 8002688:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800268a:	f107 0310 	add.w	r3, r7, #16
 800268e:	4618      	mov	r0, r3
 8002690:	f004 fd2a 	bl	80070e8 <HAL_RCCEx_PeriphCLKConfig>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800269a:	f7ff ff21 	bl	80024e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_SPI_MspInit+0xc4>)
 80026a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026a4:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <HAL_SPI_MspInit+0xc4>)
 80026a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026ae:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_SPI_MspInit+0xc4>)
 80026b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026bc:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_SPI_MspInit+0xc4>)
 80026be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c2:	4a14      	ldr	r2, [pc, #80]	; (8002714 <HAL_SPI_MspInit+0xc4>)
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <HAL_SPI_MspInit+0xc4>)
 80026ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80026da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80026de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e2:	2302      	movs	r3, #2
 80026e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ee:	2300      	movs	r3, #0
 80026f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026f4:	2306      	movs	r3, #6
 80026f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026fe:	4619      	mov	r1, r3
 8002700:	4805      	ldr	r0, [pc, #20]	; (8002718 <HAL_SPI_MspInit+0xc8>)
 8002702:	f003 fb1b 	bl	8005d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002706:	bf00      	nop
 8002708:	37e0      	adds	r7, #224	; 0xe0
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40003c00 	.word	0x40003c00
 8002714:	58024400 	.word	0x58024400
 8002718:	58020800 	.word	0x58020800

0800271c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08c      	sub	sp, #48	; 0x30
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a6e      	ldr	r2, [pc, #440]	; (80028e4 <HAL_TIM_Base_MspInit+0x1c8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d10f      	bne.n	800274e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800272e:	4b6e      	ldr	r3, [pc, #440]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 8002730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002734:	4a6c      	ldr	r2, [pc, #432]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800273e:	4b6a      	ldr	r3, [pc, #424]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 8002740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800274c:	e0c6      	b.n	80028dc <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002756:	d10f      	bne.n	8002778 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002758:	4b63      	ldr	r3, [pc, #396]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 800275a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800275e:	4a62      	ldr	r2, [pc, #392]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002768:	4b5f      	ldr	r3, [pc, #380]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 800276a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
 8002774:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002776:	e0b1      	b.n	80028dc <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM3)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a5b      	ldr	r2, [pc, #364]	; (80028ec <HAL_TIM_Base_MspInit+0x1d0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d10f      	bne.n	80027a2 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002782:	4b59      	ldr	r3, [pc, #356]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 8002784:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002788:	4a57      	ldr	r2, [pc, #348]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 800278a:	f043 0302 	orr.w	r3, r3, #2
 800278e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002792:	4b55      	ldr	r3, [pc, #340]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 8002794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80027a0:	e09c      	b.n	80028dc <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM4)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <HAL_TIM_Base_MspInit+0x1d4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d10f      	bne.n	80027cc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027ac:	4b4e      	ldr	r3, [pc, #312]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 80027ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027b2:	4a4d      	ldr	r2, [pc, #308]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027bc:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 80027be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	623b      	str	r3, [r7, #32]
 80027c8:	6a3b      	ldr	r3, [r7, #32]
}
 80027ca:	e087      	b.n	80028dc <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM5)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a48      	ldr	r2, [pc, #288]	; (80028f4 <HAL_TIM_Base_MspInit+0x1d8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d117      	bne.n	8002806 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027d6:	4b44      	ldr	r3, [pc, #272]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 80027d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027dc:	4a42      	ldr	r2, [pc, #264]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 80027de:	f043 0308 	orr.w	r3, r3, #8
 80027e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027e6:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 80027e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	61fb      	str	r3, [r7, #28]
 80027f2:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80027f4:	2200      	movs	r2, #0
 80027f6:	2100      	movs	r1, #0
 80027f8:	2032      	movs	r0, #50	; 0x32
 80027fa:	f000 ff50 	bl	800369e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80027fe:	2032      	movs	r0, #50	; 0x32
 8002800:	f000 ff67 	bl	80036d2 <HAL_NVIC_EnableIRQ>
}
 8002804:	e06a      	b.n	80028dc <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM6)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a3b      	ldr	r2, [pc, #236]	; (80028f8 <HAL_TIM_Base_MspInit+0x1dc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d117      	bne.n	8002840 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002810:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 8002812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002816:	4a34      	ldr	r2, [pc, #208]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 8002818:	f043 0310 	orr.w	r3, r3, #16
 800281c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002820:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 8002822:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	61bb      	str	r3, [r7, #24]
 800282c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2100      	movs	r1, #0
 8002832:	2036      	movs	r0, #54	; 0x36
 8002834:	f000 ff33 	bl	800369e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002838:	2036      	movs	r0, #54	; 0x36
 800283a:	f000 ff4a 	bl	80036d2 <HAL_NVIC_EnableIRQ>
}
 800283e:	e04d      	b.n	80028dc <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM7)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2d      	ldr	r2, [pc, #180]	; (80028fc <HAL_TIM_Base_MspInit+0x1e0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d117      	bne.n	800287a <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800284a:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 800284c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002850:	4a25      	ldr	r2, [pc, #148]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 8002852:	f043 0320 	orr.w	r3, r3, #32
 8002856:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800285a:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 800285c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002868:	2200      	movs	r2, #0
 800286a:	2100      	movs	r1, #0
 800286c:	2037      	movs	r0, #55	; 0x37
 800286e:	f000 ff16 	bl	800369e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002872:	2037      	movs	r0, #55	; 0x37
 8002874:	f000 ff2d 	bl	80036d2 <HAL_NVIC_EnableIRQ>
}
 8002878:	e030      	b.n	80028dc <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM12)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a20      	ldr	r2, [pc, #128]	; (8002900 <HAL_TIM_Base_MspInit+0x1e4>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d117      	bne.n	80028b4 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002884:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 8002886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800288a:	4a17      	ldr	r2, [pc, #92]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 800288c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002890:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002894:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 8002896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2100      	movs	r1, #0
 80028a6:	202b      	movs	r0, #43	; 0x2b
 80028a8:	f000 fef9 	bl	800369e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80028ac:	202b      	movs	r0, #43	; 0x2b
 80028ae:	f000 ff10 	bl	80036d2 <HAL_NVIC_EnableIRQ>
}
 80028b2:	e013      	b.n	80028dc <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM15)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a12      	ldr	r2, [pc, #72]	; (8002904 <HAL_TIM_Base_MspInit+0x1e8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d10e      	bne.n	80028dc <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 80028c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028c4:	4a08      	ldr	r2, [pc, #32]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 80028c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_TIM_Base_MspInit+0x1cc>)
 80028d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80028d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
}
 80028dc:	bf00      	nop
 80028de:	3730      	adds	r7, #48	; 0x30
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40010000 	.word	0x40010000
 80028e8:	58024400 	.word	0x58024400
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40000800 	.word	0x40000800
 80028f4:	40000c00 	.word	0x40000c00
 80028f8:	40001000 	.word	0x40001000
 80028fc:	40001400 	.word	0x40001400
 8002900:	40001800 	.word	0x40001800
 8002904:	40014000 	.word	0x40014000

08002908 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08c      	sub	sp, #48	; 0x30
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	f107 031c 	add.w	r3, r7, #28
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
 800291e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a5e      	ldr	r2, [pc, #376]	; (8002aa0 <HAL_TIM_MspPostInit+0x198>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d120      	bne.n	800296c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800292a:	4b5e      	ldr	r3, [pc, #376]	; (8002aa4 <HAL_TIM_MspPostInit+0x19c>)
 800292c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002930:	4a5c      	ldr	r2, [pc, #368]	; (8002aa4 <HAL_TIM_MspPostInit+0x19c>)
 8002932:	f043 0310 	orr.w	r3, r3, #16
 8002936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800293a:	4b5a      	ldr	r3, [pc, #360]	; (8002aa4 <HAL_TIM_MspPostInit+0x19c>)
 800293c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002940:	f003 0310 	and.w	r3, r3, #16
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8002948:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800294c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294e:	2302      	movs	r3, #2
 8002950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	2300      	movs	r3, #0
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002956:	2300      	movs	r3, #0
 8002958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800295a:	2301      	movs	r3, #1
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 800295e:	f107 031c 	add.w	r3, r7, #28
 8002962:	4619      	mov	r1, r3
 8002964:	4850      	ldr	r0, [pc, #320]	; (8002aa8 <HAL_TIM_MspPostInit+0x1a0>)
 8002966:	f003 f9e9 	bl	8005d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800296a:	e094      	b.n	8002a96 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002974:	d120      	bne.n	80029b8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002976:	4b4b      	ldr	r3, [pc, #300]	; (8002aa4 <HAL_TIM_MspPostInit+0x19c>)
 8002978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800297c:	4a49      	ldr	r2, [pc, #292]	; (8002aa4 <HAL_TIM_MspPostInit+0x19c>)
 800297e:	f043 0302 	orr.w	r3, r3, #2
 8002982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002986:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <HAL_TIM_MspPostInit+0x19c>)
 8002988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8002994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a2:	2300      	movs	r3, #0
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029a6:	2301      	movs	r3, #1
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 80029aa:	f107 031c 	add.w	r3, r7, #28
 80029ae:	4619      	mov	r1, r3
 80029b0:	483e      	ldr	r0, [pc, #248]	; (8002aac <HAL_TIM_MspPostInit+0x1a4>)
 80029b2:	f003 f9c3 	bl	8005d3c <HAL_GPIO_Init>
}
 80029b6:	e06e      	b.n	8002a96 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a3c      	ldr	r2, [pc, #240]	; (8002ab0 <HAL_TIM_MspPostInit+0x1a8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d11f      	bne.n	8002a02 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <HAL_TIM_MspPostInit+0x19c>)
 80029c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c8:	4a36      	ldr	r2, [pc, #216]	; (8002aa4 <HAL_TIM_MspPostInit+0x19c>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029d2:	4b34      	ldr	r3, [pc, #208]	; (8002aa4 <HAL_TIM_MspPostInit+0x19c>)
 80029d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	613b      	str	r3, [r7, #16]
 80029de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 80029e0:	2340      	movs	r3, #64	; 0x40
 80029e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029f0:	2302      	movs	r3, #2
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 80029f4:	f107 031c 	add.w	r3, r7, #28
 80029f8:	4619      	mov	r1, r3
 80029fa:	482e      	ldr	r0, [pc, #184]	; (8002ab4 <HAL_TIM_MspPostInit+0x1ac>)
 80029fc:	f003 f99e 	bl	8005d3c <HAL_GPIO_Init>
}
 8002a00:	e049      	b.n	8002a96 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a2c      	ldr	r2, [pc, #176]	; (8002ab8 <HAL_TIM_MspPostInit+0x1b0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d120      	bne.n	8002a4e <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0c:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <HAL_TIM_MspPostInit+0x19c>)
 8002a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a12:	4a24      	ldr	r2, [pc, #144]	; (8002aa4 <HAL_TIM_MspPostInit+0x19c>)
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a1c:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <HAL_TIM_MspPostInit+0x19c>)
 8002a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8002a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a30:	2302      	movs	r3, #2
 8002a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a34:	2300      	movs	r3, #0
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8002a40:	f107 031c 	add.w	r3, r7, #28
 8002a44:	4619      	mov	r1, r3
 8002a46:	4819      	ldr	r0, [pc, #100]	; (8002aac <HAL_TIM_MspPostInit+0x1a4>)
 8002a48:	f003 f978 	bl	8005d3c <HAL_GPIO_Init>
}
 8002a4c:	e023      	b.n	8002a96 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1a      	ldr	r2, [pc, #104]	; (8002abc <HAL_TIM_MspPostInit+0x1b4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d11e      	bne.n	8002a96 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a58:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <HAL_TIM_MspPostInit+0x19c>)
 8002a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a5e:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <HAL_TIM_MspPostInit+0x19c>)
 8002a60:	f043 0310 	orr.w	r3, r3, #16
 8002a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a68:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <HAL_TIM_MspPostInit+0x19c>)
 8002a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	60bb      	str	r3, [r7, #8]
 8002a74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8002a76:	2340      	movs	r3, #64	; 0x40
 8002a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	2300      	movs	r3, #0
 8002a84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002a86:	2304      	movs	r3, #4
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8002a8a:	f107 031c 	add.w	r3, r7, #28
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4805      	ldr	r0, [pc, #20]	; (8002aa8 <HAL_TIM_MspPostInit+0x1a0>)
 8002a92:	f003 f953 	bl	8005d3c <HAL_GPIO_Init>
}
 8002a96:	bf00      	nop
 8002a98:	3730      	adds	r7, #48	; 0x30
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40010000 	.word	0x40010000
 8002aa4:	58024400 	.word	0x58024400
 8002aa8:	58021000 	.word	0x58021000
 8002aac:	58020400 	.word	0x58020400
 8002ab0:	40000400 	.word	0x40000400
 8002ab4:	58020000 	.word	0x58020000
 8002ab8:	40000800 	.word	0x40000800
 8002abc:	40014000 	.word	0x40014000

08002ac0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b0bc      	sub	sp, #240	; 0xf0
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ad8:	f107 0320 	add.w	r3, r7, #32
 8002adc:	22bc      	movs	r2, #188	; 0xbc
 8002ade:	2100      	movs	r1, #0
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f00a f901 	bl	800cce8 <memset>
  if(huart->Instance==UART4)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4aa1      	ldr	r2, [pc, #644]	; (8002d70 <HAL_UART_MspInit+0x2b0>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	f040 80b7 	bne.w	8002c60 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002af2:	2302      	movs	r3, #2
 8002af4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002afc:	f107 0320 	add.w	r3, r7, #32
 8002b00:	4618      	mov	r0, r3
 8002b02:	f004 faf1 	bl	80070e8 <HAL_RCCEx_PeriphCLKConfig>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002b0c:	f7ff fce8 	bl	80024e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002b10:	4b98      	ldr	r3, [pc, #608]	; (8002d74 <HAL_UART_MspInit+0x2b4>)
 8002b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b16:	4a97      	ldr	r2, [pc, #604]	; (8002d74 <HAL_UART_MspInit+0x2b4>)
 8002b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b20:	4b94      	ldr	r3, [pc, #592]	; (8002d74 <HAL_UART_MspInit+0x2b4>)
 8002b22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b2a:	61fb      	str	r3, [r7, #28]
 8002b2c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b2e:	4b91      	ldr	r3, [pc, #580]	; (8002d74 <HAL_UART_MspInit+0x2b4>)
 8002b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b34:	4a8f      	ldr	r2, [pc, #572]	; (8002d74 <HAL_UART_MspInit+0x2b4>)
 8002b36:	f043 0308 	orr.w	r3, r3, #8
 8002b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b3e:	4b8d      	ldr	r3, [pc, #564]	; (8002d74 <HAL_UART_MspInit+0x2b4>)
 8002b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002b64:	2308      	movs	r3, #8
 8002b66:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b6a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4881      	ldr	r0, [pc, #516]	; (8002d78 <HAL_UART_MspInit+0x2b8>)
 8002b72:	f003 f8e3 	bl	8005d3c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8002b76:	4b81      	ldr	r3, [pc, #516]	; (8002d7c <HAL_UART_MspInit+0x2bc>)
 8002b78:	4a81      	ldr	r2, [pc, #516]	; (8002d80 <HAL_UART_MspInit+0x2c0>)
 8002b7a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002b7c:	4b7f      	ldr	r3, [pc, #508]	; (8002d7c <HAL_UART_MspInit+0x2bc>)
 8002b7e:	223f      	movs	r2, #63	; 0x3f
 8002b80:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b82:	4b7e      	ldr	r3, [pc, #504]	; (8002d7c <HAL_UART_MspInit+0x2bc>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b88:	4b7c      	ldr	r3, [pc, #496]	; (8002d7c <HAL_UART_MspInit+0x2bc>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b8e:	4b7b      	ldr	r3, [pc, #492]	; (8002d7c <HAL_UART_MspInit+0x2bc>)
 8002b90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b94:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b96:	4b79      	ldr	r3, [pc, #484]	; (8002d7c <HAL_UART_MspInit+0x2bc>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b9c:	4b77      	ldr	r3, [pc, #476]	; (8002d7c <HAL_UART_MspInit+0x2bc>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002ba2:	4b76      	ldr	r3, [pc, #472]	; (8002d7c <HAL_UART_MspInit+0x2bc>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ba8:	4b74      	ldr	r3, [pc, #464]	; (8002d7c <HAL_UART_MspInit+0x2bc>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002bae:	4b73      	ldr	r3, [pc, #460]	; (8002d7c <HAL_UART_MspInit+0x2bc>)
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002bb4:	4b71      	ldr	r3, [pc, #452]	; (8002d7c <HAL_UART_MspInit+0x2bc>)
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002bba:	4b70      	ldr	r3, [pc, #448]	; (8002d7c <HAL_UART_MspInit+0x2bc>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002bc0:	4b6e      	ldr	r3, [pc, #440]	; (8002d7c <HAL_UART_MspInit+0x2bc>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002bc6:	486d      	ldr	r0, [pc, #436]	; (8002d7c <HAL_UART_MspInit+0x2bc>)
 8002bc8:	f000 fe94 	bl	80038f4 <HAL_DMA_Init>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8002bd2:	f7ff fc85 	bl	80024e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a68      	ldr	r2, [pc, #416]	; (8002d7c <HAL_UART_MspInit+0x2bc>)
 8002bda:	67da      	str	r2, [r3, #124]	; 0x7c
 8002bdc:	4a67      	ldr	r2, [pc, #412]	; (8002d7c <HAL_UART_MspInit+0x2bc>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002be2:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <HAL_UART_MspInit+0x2c4>)
 8002be4:	4a68      	ldr	r2, [pc, #416]	; (8002d88 <HAL_UART_MspInit+0x2c8>)
 8002be6:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002be8:	4b66      	ldr	r3, [pc, #408]	; (8002d84 <HAL_UART_MspInit+0x2c4>)
 8002bea:	2240      	movs	r2, #64	; 0x40
 8002bec:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bee:	4b65      	ldr	r3, [pc, #404]	; (8002d84 <HAL_UART_MspInit+0x2c4>)
 8002bf0:	2240      	movs	r2, #64	; 0x40
 8002bf2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bf4:	4b63      	ldr	r3, [pc, #396]	; (8002d84 <HAL_UART_MspInit+0x2c4>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002bfa:	4b62      	ldr	r3, [pc, #392]	; (8002d84 <HAL_UART_MspInit+0x2c4>)
 8002bfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c00:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c02:	4b60      	ldr	r3, [pc, #384]	; (8002d84 <HAL_UART_MspInit+0x2c4>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c08:	4b5e      	ldr	r3, [pc, #376]	; (8002d84 <HAL_UART_MspInit+0x2c4>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002c0e:	4b5d      	ldr	r3, [pc, #372]	; (8002d84 <HAL_UART_MspInit+0x2c4>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c14:	4b5b      	ldr	r3, [pc, #364]	; (8002d84 <HAL_UART_MspInit+0x2c4>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002c1a:	4b5a      	ldr	r3, [pc, #360]	; (8002d84 <HAL_UART_MspInit+0x2c4>)
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002c20:	4b58      	ldr	r3, [pc, #352]	; (8002d84 <HAL_UART_MspInit+0x2c4>)
 8002c22:	2203      	movs	r2, #3
 8002c24:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002c26:	4b57      	ldr	r3, [pc, #348]	; (8002d84 <HAL_UART_MspInit+0x2c4>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002c2c:	4b55      	ldr	r3, [pc, #340]	; (8002d84 <HAL_UART_MspInit+0x2c4>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002c32:	4854      	ldr	r0, [pc, #336]	; (8002d84 <HAL_UART_MspInit+0x2c4>)
 8002c34:	f000 fe5e 	bl	80038f4 <HAL_DMA_Init>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 8002c3e:	f7ff fc4f 	bl	80024e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a4f      	ldr	r2, [pc, #316]	; (8002d84 <HAL_UART_MspInit+0x2c4>)
 8002c46:	679a      	str	r2, [r3, #120]	; 0x78
 8002c48:	4a4e      	ldr	r2, [pc, #312]	; (8002d84 <HAL_UART_MspInit+0x2c4>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2100      	movs	r1, #0
 8002c52:	2034      	movs	r0, #52	; 0x34
 8002c54:	f000 fd23 	bl	800369e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002c58:	2034      	movs	r0, #52	; 0x34
 8002c5a:	f000 fd3a 	bl	80036d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c5e:	e154      	b.n	8002f0a <HAL_UART_MspInit+0x44a>
  else if(huart->Instance==UART7)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a49      	ldr	r2, [pc, #292]	; (8002d8c <HAL_UART_MspInit+0x2cc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	f040 8098 	bne.w	8002d9c <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c76:	f107 0320 	add.w	r3, r7, #32
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f004 fa34 	bl	80070e8 <HAL_RCCEx_PeriphCLKConfig>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8002c86:	f7ff fc2b 	bl	80024e0 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002c8a:	4b3a      	ldr	r3, [pc, #232]	; (8002d74 <HAL_UART_MspInit+0x2b4>)
 8002c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c90:	4a38      	ldr	r2, [pc, #224]	; (8002d74 <HAL_UART_MspInit+0x2b4>)
 8002c92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c9a:	4b36      	ldr	r3, [pc, #216]	; (8002d74 <HAL_UART_MspInit+0x2b4>)
 8002c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ca0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ca8:	4b32      	ldr	r3, [pc, #200]	; (8002d74 <HAL_UART_MspInit+0x2b4>)
 8002caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cae:	4a31      	ldr	r2, [pc, #196]	; (8002d74 <HAL_UART_MspInit+0x2b4>)
 8002cb0:	f043 0310 	orr.w	r3, r3, #16
 8002cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cb8:	4b2e      	ldr	r3, [pc, #184]	; (8002d74 <HAL_UART_MspInit+0x2b4>)
 8002cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002cc6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002cca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cce:	2302      	movs	r3, #2
 8002cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002ce0:	2307      	movs	r3, #7
 8002ce2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ce6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002cea:	4619      	mov	r1, r3
 8002cec:	4828      	ldr	r0, [pc, #160]	; (8002d90 <HAL_UART_MspInit+0x2d0>)
 8002cee:	f003 f825 	bl	8005d3c <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 8002cf2:	4b28      	ldr	r3, [pc, #160]	; (8002d94 <HAL_UART_MspInit+0x2d4>)
 8002cf4:	4a28      	ldr	r2, [pc, #160]	; (8002d98 <HAL_UART_MspInit+0x2d8>)
 8002cf6:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8002cf8:	4b26      	ldr	r3, [pc, #152]	; (8002d94 <HAL_UART_MspInit+0x2d4>)
 8002cfa:	2250      	movs	r2, #80	; 0x50
 8002cfc:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cfe:	4b25      	ldr	r3, [pc, #148]	; (8002d94 <HAL_UART_MspInit+0x2d4>)
 8002d00:	2240      	movs	r2, #64	; 0x40
 8002d02:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d04:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <HAL_UART_MspInit+0x2d4>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d0a:	4b22      	ldr	r3, [pc, #136]	; (8002d94 <HAL_UART_MspInit+0x2d4>)
 8002d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d10:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d12:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <HAL_UART_MspInit+0x2d4>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d18:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <HAL_UART_MspInit+0x2d4>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8002d1e:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <HAL_UART_MspInit+0x2d4>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <HAL_UART_MspInit+0x2d4>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	; (8002d94 <HAL_UART_MspInit+0x2d4>)
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002d30:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <HAL_UART_MspInit+0x2d4>)
 8002d32:	2203      	movs	r2, #3
 8002d34:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002d36:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <HAL_UART_MspInit+0x2d4>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002d3c:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <HAL_UART_MspInit+0x2d4>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8002d42:	4814      	ldr	r0, [pc, #80]	; (8002d94 <HAL_UART_MspInit+0x2d4>)
 8002d44:	f000 fdd6 	bl	80038f4 <HAL_DMA_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_UART_MspInit+0x292>
      Error_Handler();
 8002d4e:	f7ff fbc7 	bl	80024e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a0f      	ldr	r2, [pc, #60]	; (8002d94 <HAL_UART_MspInit+0x2d4>)
 8002d56:	679a      	str	r2, [r3, #120]	; 0x78
 8002d58:	4a0e      	ldr	r2, [pc, #56]	; (8002d94 <HAL_UART_MspInit+0x2d4>)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2100      	movs	r1, #0
 8002d62:	2052      	movs	r0, #82	; 0x52
 8002d64:	f000 fc9b 	bl	800369e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002d68:	2052      	movs	r0, #82	; 0x52
 8002d6a:	f000 fcb2 	bl	80036d2 <HAL_NVIC_EnableIRQ>
}
 8002d6e:	e0cc      	b.n	8002f0a <HAL_UART_MspInit+0x44a>
 8002d70:	40004c00 	.word	0x40004c00
 8002d74:	58024400 	.word	0x58024400
 8002d78:	58020c00 	.word	0x58020c00
 8002d7c:	24000704 	.word	0x24000704
 8002d80:	40020058 	.word	0x40020058
 8002d84:	2400077c 	.word	0x2400077c
 8002d88:	40020070 	.word	0x40020070
 8002d8c:	40007800 	.word	0x40007800
 8002d90:	58021000 	.word	0x58021000
 8002d94:	240007f4 	.word	0x240007f4
 8002d98:	40020010 	.word	0x40020010
  else if(huart->Instance==USART3)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a5c      	ldr	r2, [pc, #368]	; (8002f14 <HAL_UART_MspInit+0x454>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	f040 80b1 	bne.w	8002f0a <HAL_UART_MspInit+0x44a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002da8:	2302      	movs	r3, #2
 8002daa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002db2:	f107 0320 	add.w	r3, r7, #32
 8002db6:	4618      	mov	r0, r3
 8002db8:	f004 f996 	bl	80070e8 <HAL_RCCEx_PeriphCLKConfig>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_UART_MspInit+0x306>
      Error_Handler();
 8002dc2:	f7ff fb8d 	bl	80024e0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dc6:	4b54      	ldr	r3, [pc, #336]	; (8002f18 <HAL_UART_MspInit+0x458>)
 8002dc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dcc:	4a52      	ldr	r2, [pc, #328]	; (8002f18 <HAL_UART_MspInit+0x458>)
 8002dce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dd6:	4b50      	ldr	r3, [pc, #320]	; (8002f18 <HAL_UART_MspInit+0x458>)
 8002dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002de4:	4b4c      	ldr	r3, [pc, #304]	; (8002f18 <HAL_UART_MspInit+0x458>)
 8002de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dea:	4a4b      	ldr	r2, [pc, #300]	; (8002f18 <HAL_UART_MspInit+0x458>)
 8002dec:	f043 0308 	orr.w	r3, r3, #8
 8002df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002df4:	4b48      	ldr	r3, [pc, #288]	; (8002f18 <HAL_UART_MspInit+0x458>)
 8002df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e16:	2300      	movs	r3, #0
 8002e18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e1c:	2307      	movs	r3, #7
 8002e1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e22:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002e26:	4619      	mov	r1, r3
 8002e28:	483c      	ldr	r0, [pc, #240]	; (8002f1c <HAL_UART_MspInit+0x45c>)
 8002e2a:	f002 ff87 	bl	8005d3c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002e2e:	4b3c      	ldr	r3, [pc, #240]	; (8002f20 <HAL_UART_MspInit+0x460>)
 8002e30:	4a3c      	ldr	r2, [pc, #240]	; (8002f24 <HAL_UART_MspInit+0x464>)
 8002e32:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002e34:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <HAL_UART_MspInit+0x460>)
 8002e36:	222d      	movs	r2, #45	; 0x2d
 8002e38:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e3a:	4b39      	ldr	r3, [pc, #228]	; (8002f20 <HAL_UART_MspInit+0x460>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e40:	4b37      	ldr	r3, [pc, #220]	; (8002f20 <HAL_UART_MspInit+0x460>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e46:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <HAL_UART_MspInit+0x460>)
 8002e48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e4c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e4e:	4b34      	ldr	r3, [pc, #208]	; (8002f20 <HAL_UART_MspInit+0x460>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e54:	4b32      	ldr	r3, [pc, #200]	; (8002f20 <HAL_UART_MspInit+0x460>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002e5a:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <HAL_UART_MspInit+0x460>)
 8002e5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e60:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002e62:	4b2f      	ldr	r3, [pc, #188]	; (8002f20 <HAL_UART_MspInit+0x460>)
 8002e64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e68:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <HAL_UART_MspInit+0x460>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002e70:	482b      	ldr	r0, [pc, #172]	; (8002f20 <HAL_UART_MspInit+0x460>)
 8002e72:	f000 fd3f 	bl	80038f4 <HAL_DMA_Init>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 8002e7c:	f7ff fb30 	bl	80024e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a27      	ldr	r2, [pc, #156]	; (8002f20 <HAL_UART_MspInit+0x460>)
 8002e84:	67da      	str	r2, [r3, #124]	; 0x7c
 8002e86:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <HAL_UART_MspInit+0x460>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8002e8c:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <HAL_UART_MspInit+0x468>)
 8002e8e:	4a27      	ldr	r2, [pc, #156]	; (8002f2c <HAL_UART_MspInit+0x46c>)
 8002e90:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002e92:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <HAL_UART_MspInit+0x468>)
 8002e94:	222e      	movs	r2, #46	; 0x2e
 8002e96:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e98:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <HAL_UART_MspInit+0x468>)
 8002e9a:	2240      	movs	r2, #64	; 0x40
 8002e9c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e9e:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <HAL_UART_MspInit+0x468>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ea4:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <HAL_UART_MspInit+0x468>)
 8002ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eaa:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002eac:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <HAL_UART_MspInit+0x468>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_UART_MspInit+0x468>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <HAL_UART_MspInit+0x468>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <HAL_UART_MspInit+0x468>)
 8002ec0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ec4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_UART_MspInit+0x468>)
 8002ec8:	2204      	movs	r2, #4
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002ecc:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <HAL_UART_MspInit+0x468>)
 8002ece:	2203      	movs	r2, #3
 8002ed0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <HAL_UART_MspInit+0x468>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002ed8:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <HAL_UART_MspInit+0x468>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002ede:	4812      	ldr	r0, [pc, #72]	; (8002f28 <HAL_UART_MspInit+0x468>)
 8002ee0:	f000 fd08 	bl	80038f4 <HAL_DMA_Init>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_UART_MspInit+0x42e>
      Error_Handler();
 8002eea:	f7ff faf9 	bl	80024e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a0d      	ldr	r2, [pc, #52]	; (8002f28 <HAL_UART_MspInit+0x468>)
 8002ef2:	679a      	str	r2, [r3, #120]	; 0x78
 8002ef4:	4a0c      	ldr	r2, [pc, #48]	; (8002f28 <HAL_UART_MspInit+0x468>)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002efa:	2200      	movs	r2, #0
 8002efc:	2100      	movs	r1, #0
 8002efe:	2027      	movs	r0, #39	; 0x27
 8002f00:	f000 fbcd 	bl	800369e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002f04:	2027      	movs	r0, #39	; 0x27
 8002f06:	f000 fbe4 	bl	80036d2 <HAL_NVIC_EnableIRQ>
}
 8002f0a:	bf00      	nop
 8002f0c:	37f0      	adds	r7, #240	; 0xf0
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40004800 	.word	0x40004800
 8002f18:	58024400 	.word	0x58024400
 8002f1c:	58020c00 	.word	0x58020c00
 8002f20:	2400086c 	.word	0x2400086c
 8002f24:	40020028 	.word	0x40020028
 8002f28:	240008e4 	.word	0x240008e4
 8002f2c:	40020040 	.word	0x40020040

08002f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f34:	e7fe      	b.n	8002f34 <NMI_Handler+0x4>

08002f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f36:	b480      	push	{r7}
 8002f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f3a:	e7fe      	b.n	8002f3a <HardFault_Handler+0x4>

08002f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f40:	e7fe      	b.n	8002f40 <MemManage_Handler+0x4>

08002f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f46:	e7fe      	b.n	8002f46 <BusFault_Handler+0x4>

08002f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f4c:	e7fe      	b.n	8002f4c <UsageFault_Handler+0x4>

08002f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f7c:	f000 fa88 	bl	8003490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002f80:	f000 fbc1 	bl	8003706 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8002f8c:	4802      	ldr	r0, [pc, #8]	; (8002f98 <DMA1_Stream0_IRQHandler+0x10>)
 8002f8e:	f001 fd6f 	bl	8004a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	240007f4 	.word	0x240007f4

08002f9c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002fa0:	4802      	ldr	r0, [pc, #8]	; (8002fac <DMA1_Stream1_IRQHandler+0x10>)
 8002fa2:	f001 fd65 	bl	8004a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	2400086c 	.word	0x2400086c

08002fb0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002fb4:	4802      	ldr	r0, [pc, #8]	; (8002fc0 <DMA1_Stream2_IRQHandler+0x10>)
 8002fb6:	f001 fd5b 	bl	8004a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	240008e4 	.word	0x240008e4

08002fc4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002fc8:	4802      	ldr	r0, [pc, #8]	; (8002fd4 <DMA1_Stream3_IRQHandler+0x10>)
 8002fca:	f001 fd51 	bl	8004a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	24000704 	.word	0x24000704

08002fd8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002fdc:	4802      	ldr	r0, [pc, #8]	; (8002fe8 <DMA1_Stream4_IRQHandler+0x10>)
 8002fde:	f001 fd47 	bl	8004a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	2400077c 	.word	0x2400077c

08002fec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8002ff0:	2040      	movs	r0, #64	; 0x40
 8002ff2:	f003 f86c 	bl	80060ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 8002ff6:	2080      	movs	r0, #128	; 0x80
 8002ff8:	f003 f869 	bl	80060ce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ffc:	bf00      	nop
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003004:	4802      	ldr	r0, [pc, #8]	; (8003010 <USART3_IRQHandler+0x10>)
 8003006:	f007 f99d 	bl	800a344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	24000674 	.word	0x24000674

08003014 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8003018:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800301c:	f003 f857 	bl	80060ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8003020:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003024:	f003 f853 	bl	80060ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8003028:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800302c:	f003 f84f 	bl	80060ce <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8003030:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003034:	f003 f84b 	bl	80060ce <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}

0800303c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003042:	f005 ff13 	bl	8008e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	240004bc 	.word	0x240004bc

08003050 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003054:	4802      	ldr	r0, [pc, #8]	; (8003060 <TIM5_IRQHandler+0x10>)
 8003056:	f005 ff09 	bl	8008e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	240003d8 	.word	0x240003d8

08003064 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003068:	4802      	ldr	r0, [pc, #8]	; (8003074 <UART4_IRQHandler+0x10>)
 800306a:	f007 f96b 	bl	800a344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	24000554 	.word	0x24000554

08003078 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800307c:	4802      	ldr	r0, [pc, #8]	; (8003088 <TIM6_DAC_IRQHandler+0x10>)
 800307e:	f005 fef5 	bl	8008e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	24000424 	.word	0x24000424

0800308c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003090:	4802      	ldr	r0, [pc, #8]	; (800309c <TIM7_IRQHandler+0x10>)
 8003092:	f005 feeb 	bl	8008e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	24000470 	.word	0x24000470

080030a0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80030a4:	4802      	ldr	r0, [pc, #8]	; (80030b0 <UART7_IRQHandler+0x10>)
 80030a6:	f007 f94d 	bl	800a344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	240005e4 	.word	0x240005e4

080030b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
	return 1;
 80030b8:	2301      	movs	r3, #1
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <_kill>:

int _kill(int pid, int sig)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030ce:	f009 fde1 	bl	800cc94 <__errno>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2216      	movs	r2, #22
 80030d6:	601a      	str	r2, [r3, #0]
	return -1;
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <_exit>:

void _exit (int status)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030ec:	f04f 31ff 	mov.w	r1, #4294967295
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff ffe7 	bl	80030c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80030f6:	e7fe      	b.n	80030f6 <_exit+0x12>

080030f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	e00a      	b.n	8003120 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800310a:	f3af 8000 	nop.w
 800310e:	4601      	mov	r1, r0
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	60ba      	str	r2, [r7, #8]
 8003116:	b2ca      	uxtb	r2, r1
 8003118:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	3301      	adds	r3, #1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	dbf0      	blt.n	800310a <_read+0x12>
	}

return len;
 8003128:	687b      	ldr	r3, [r7, #4]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	e009      	b.n	8003158 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	60ba      	str	r2, [r7, #8]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	3301      	adds	r3, #1
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	429a      	cmp	r2, r3
 800315e:	dbf1      	blt.n	8003144 <_write+0x12>
	}
	return len;
 8003160:	687b      	ldr	r3, [r7, #4]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <_close>:

int _close(int file)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
	return -1;
 8003172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003192:	605a      	str	r2, [r3, #4]
	return 0;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <_isatty>:

int _isatty(int file)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
	return 1;
 80031aa:	2301      	movs	r3, #1
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
	return 0;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031dc:	4a14      	ldr	r2, [pc, #80]	; (8003230 <_sbrk+0x5c>)
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <_sbrk+0x60>)
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031e8:	4b13      	ldr	r3, [pc, #76]	; (8003238 <_sbrk+0x64>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d102      	bne.n	80031f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <_sbrk+0x64>)
 80031f2:	4a12      	ldr	r2, [pc, #72]	; (800323c <_sbrk+0x68>)
 80031f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <_sbrk+0x64>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	429a      	cmp	r2, r3
 8003202:	d207      	bcs.n	8003214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003204:	f009 fd46 	bl	800cc94 <__errno>
 8003208:	4603      	mov	r3, r0
 800320a:	220c      	movs	r2, #12
 800320c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800320e:	f04f 33ff 	mov.w	r3, #4294967295
 8003212:	e009      	b.n	8003228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <_sbrk+0x64>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <_sbrk+0x64>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	4a05      	ldr	r2, [pc, #20]	; (8003238 <_sbrk+0x64>)
 8003224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003226:	68fb      	ldr	r3, [r7, #12]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	24001028 	.word	0x24001028
 8003234:	00000400 	.word	0x00000400
 8003238:	24000a08 	.word	0x24000a08
 800323c:	24000a28 	.word	0x24000a28

08003240 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003244:	4b39      	ldr	r3, [pc, #228]	; (800332c <SystemInit+0xec>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	4a38      	ldr	r2, [pc, #224]	; (800332c <SystemInit+0xec>)
 800324c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003254:	4b36      	ldr	r3, [pc, #216]	; (8003330 <SystemInit+0xf0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	2b06      	cmp	r3, #6
 800325e:	d807      	bhi.n	8003270 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003260:	4b33      	ldr	r3, [pc, #204]	; (8003330 <SystemInit+0xf0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f023 030f 	bic.w	r3, r3, #15
 8003268:	4a31      	ldr	r2, [pc, #196]	; (8003330 <SystemInit+0xf0>)
 800326a:	f043 0307 	orr.w	r3, r3, #7
 800326e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003270:	4b30      	ldr	r3, [pc, #192]	; (8003334 <SystemInit+0xf4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a2f      	ldr	r2, [pc, #188]	; (8003334 <SystemInit+0xf4>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800327c:	4b2d      	ldr	r3, [pc, #180]	; (8003334 <SystemInit+0xf4>)
 800327e:	2200      	movs	r2, #0
 8003280:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003282:	4b2c      	ldr	r3, [pc, #176]	; (8003334 <SystemInit+0xf4>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	492b      	ldr	r1, [pc, #172]	; (8003334 <SystemInit+0xf4>)
 8003288:	4b2b      	ldr	r3, [pc, #172]	; (8003338 <SystemInit+0xf8>)
 800328a:	4013      	ands	r3, r2
 800328c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800328e:	4b28      	ldr	r3, [pc, #160]	; (8003330 <SystemInit+0xf0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d007      	beq.n	80032aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800329a:	4b25      	ldr	r3, [pc, #148]	; (8003330 <SystemInit+0xf0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f023 030f 	bic.w	r3, r3, #15
 80032a2:	4a23      	ldr	r2, [pc, #140]	; (8003330 <SystemInit+0xf0>)
 80032a4:	f043 0307 	orr.w	r3, r3, #7
 80032a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <SystemInit+0xf4>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80032b0:	4b20      	ldr	r3, [pc, #128]	; (8003334 <SystemInit+0xf4>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80032b6:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <SystemInit+0xf4>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80032bc:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <SystemInit+0xf4>)
 80032be:	4a1f      	ldr	r2, [pc, #124]	; (800333c <SystemInit+0xfc>)
 80032c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80032c2:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <SystemInit+0xf4>)
 80032c4:	4a1e      	ldr	r2, [pc, #120]	; (8003340 <SystemInit+0x100>)
 80032c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80032c8:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <SystemInit+0xf4>)
 80032ca:	4a1e      	ldr	r2, [pc, #120]	; (8003344 <SystemInit+0x104>)
 80032cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80032ce:	4b19      	ldr	r3, [pc, #100]	; (8003334 <SystemInit+0xf4>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80032d4:	4b17      	ldr	r3, [pc, #92]	; (8003334 <SystemInit+0xf4>)
 80032d6:	4a1b      	ldr	r2, [pc, #108]	; (8003344 <SystemInit+0x104>)
 80032d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80032da:	4b16      	ldr	r3, [pc, #88]	; (8003334 <SystemInit+0xf4>)
 80032dc:	2200      	movs	r2, #0
 80032de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80032e0:	4b14      	ldr	r3, [pc, #80]	; (8003334 <SystemInit+0xf4>)
 80032e2:	4a18      	ldr	r2, [pc, #96]	; (8003344 <SystemInit+0x104>)
 80032e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80032e6:	4b13      	ldr	r3, [pc, #76]	; (8003334 <SystemInit+0xf4>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032ec:	4b11      	ldr	r3, [pc, #68]	; (8003334 <SystemInit+0xf4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a10      	ldr	r2, [pc, #64]	; (8003334 <SystemInit+0xf4>)
 80032f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80032f8:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <SystemInit+0xf4>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80032fe:	4b12      	ldr	r3, [pc, #72]	; (8003348 <SystemInit+0x108>)
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <SystemInit+0x10c>)
 8003304:	4013      	ands	r3, r2
 8003306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800330a:	d202      	bcs.n	8003312 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800330c:	4b10      	ldr	r3, [pc, #64]	; (8003350 <SystemInit+0x110>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003312:	4b10      	ldr	r3, [pc, #64]	; (8003354 <SystemInit+0x114>)
 8003314:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003318:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800331a:	4b04      	ldr	r3, [pc, #16]	; (800332c <SystemInit+0xec>)
 800331c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003320:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	e000ed00 	.word	0xe000ed00
 8003330:	52002000 	.word	0x52002000
 8003334:	58024400 	.word	0x58024400
 8003338:	eaf6ed7f 	.word	0xeaf6ed7f
 800333c:	02020200 	.word	0x02020200
 8003340:	01ff0000 	.word	0x01ff0000
 8003344:	01010280 	.word	0x01010280
 8003348:	5c001000 	.word	0x5c001000
 800334c:	ffff0000 	.word	0xffff0000
 8003350:	51008108 	.word	0x51008108
 8003354:	52004000 	.word	0x52004000

08003358 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003358:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003390 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800335c:	f7ff ff70 	bl	8003240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003360:	480c      	ldr	r0, [pc, #48]	; (8003394 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003362:	490d      	ldr	r1, [pc, #52]	; (8003398 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003364:	4a0d      	ldr	r2, [pc, #52]	; (800339c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003368:	e002      	b.n	8003370 <LoopCopyDataInit>

0800336a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800336a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800336c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800336e:	3304      	adds	r3, #4

08003370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003374:	d3f9      	bcc.n	800336a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003378:	4c0a      	ldr	r4, [pc, #40]	; (80033a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800337a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800337c:	e001      	b.n	8003382 <LoopFillZerobss>

0800337e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800337e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003380:	3204      	adds	r2, #4

08003382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003384:	d3fb      	bcc.n	800337e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003386:	f009 fc8b 	bl	800cca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800338a:	f7fd fdc7 	bl	8000f1c <main>
  bx  lr
 800338e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003390:	24001028 	.word	0x24001028
  ldr r0, =_sdata
 8003394:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003398:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 800339c:	0800fbdc 	.word	0x0800fbdc
  ldr r2, =_sbss
 80033a0:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80033a4:	24000a28 	.word	0x24000a28

080033a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033a8:	e7fe      	b.n	80033a8 <ADC3_IRQHandler>
	...

080033ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033b2:	2003      	movs	r0, #3
 80033b4:	f000 f968 	bl	8003688 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033b8:	f003 fcc0 	bl	8006d3c <HAL_RCC_GetSysClockFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b15      	ldr	r3, [pc, #84]	; (8003414 <HAL_Init+0x68>)
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	4913      	ldr	r1, [pc, #76]	; (8003418 <HAL_Init+0x6c>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	fa22 f303 	lsr.w	r3, r2, r3
 80033d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033d6:	4b0f      	ldr	r3, [pc, #60]	; (8003414 <HAL_Init+0x68>)
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	4a0e      	ldr	r2, [pc, #56]	; (8003418 <HAL_Init+0x6c>)
 80033e0:	5cd3      	ldrb	r3, [r2, r3]
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
 80033ec:	4a0b      	ldr	r2, [pc, #44]	; (800341c <HAL_Init+0x70>)
 80033ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033f0:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <HAL_Init+0x74>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033f6:	2000      	movs	r0, #0
 80033f8:	f000 f814 	bl	8003424 <HAL_InitTick>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e002      	b.n	800340c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003406:	f7ff f8e7 	bl	80025d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	58024400 	.word	0x58024400
 8003418:	0800f590 	.word	0x0800f590
 800341c:	24000004 	.word	0x24000004
 8003420:	24000000 	.word	0x24000000

08003424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800342c:	4b15      	ldr	r3, [pc, #84]	; (8003484 <HAL_InitTick+0x60>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e021      	b.n	800347c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003438:	4b13      	ldr	r3, [pc, #76]	; (8003488 <HAL_InitTick+0x64>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <HAL_InitTick+0x60>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	4619      	mov	r1, r3
 8003442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003446:	fbb3 f3f1 	udiv	r3, r3, r1
 800344a:	fbb2 f3f3 	udiv	r3, r2, r3
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f94d 	bl	80036ee <HAL_SYSTICK_Config>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e00e      	b.n	800347c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2b0f      	cmp	r3, #15
 8003462:	d80a      	bhi.n	800347a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003464:	2200      	movs	r2, #0
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	f04f 30ff 	mov.w	r0, #4294967295
 800346c:	f000 f917 	bl	800369e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003470:	4a06      	ldr	r2, [pc, #24]	; (800348c <HAL_InitTick+0x68>)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	e000      	b.n	800347c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	2400000c 	.word	0x2400000c
 8003488:	24000000 	.word	0x24000000
 800348c:	24000008 	.word	0x24000008

08003490 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_IncTick+0x20>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_IncTick+0x24>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4413      	add	r3, r2
 80034a0:	4a04      	ldr	r2, [pc, #16]	; (80034b4 <HAL_IncTick+0x24>)
 80034a2:	6013      	str	r3, [r2, #0]
}
 80034a4:	bf00      	nop
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	2400000c 	.word	0x2400000c
 80034b4:	24000a14 	.word	0x24000a14

080034b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return uwTick;
 80034bc:	4b03      	ldr	r3, [pc, #12]	; (80034cc <HAL_GetTick+0x14>)
 80034be:	681b      	ldr	r3, [r3, #0]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	24000a14 	.word	0x24000a14

080034d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80034d4:	4b03      	ldr	r3, [pc, #12]	; (80034e4 <HAL_GetREVID+0x14>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	0c1b      	lsrs	r3, r3, #16
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	5c001000 	.word	0x5c001000

080034e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <__NVIC_SetPriorityGrouping+0x40>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003504:	4013      	ands	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <__NVIC_SetPriorityGrouping+0x44>)
 8003512:	4313      	orrs	r3, r2
 8003514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003516:	4a04      	ldr	r2, [pc, #16]	; (8003528 <__NVIC_SetPriorityGrouping+0x40>)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	60d3      	str	r3, [r2, #12]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	e000ed00 	.word	0xe000ed00
 800352c:	05fa0000 	.word	0x05fa0000

08003530 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <__NVIC_GetPriorityGrouping+0x18>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	f003 0307 	and.w	r3, r3, #7
}
 800353e:	4618      	mov	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800355a:	2b00      	cmp	r3, #0
 800355c:	db0b      	blt.n	8003576 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	f003 021f 	and.w	r2, r3, #31
 8003564:	4907      	ldr	r1, [pc, #28]	; (8003584 <__NVIC_EnableIRQ+0x38>)
 8003566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2001      	movs	r0, #1
 800356e:	fa00 f202 	lsl.w	r2, r0, r2
 8003572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	e000e100 	.word	0xe000e100

08003588 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	6039      	str	r1, [r7, #0]
 8003592:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003598:	2b00      	cmp	r3, #0
 800359a:	db0a      	blt.n	80035b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	490c      	ldr	r1, [pc, #48]	; (80035d4 <__NVIC_SetPriority+0x4c>)
 80035a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035a6:	0112      	lsls	r2, r2, #4
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	440b      	add	r3, r1
 80035ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b0:	e00a      	b.n	80035c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	4908      	ldr	r1, [pc, #32]	; (80035d8 <__NVIC_SetPriority+0x50>)
 80035b8:	88fb      	ldrh	r3, [r7, #6]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	3b04      	subs	r3, #4
 80035c0:	0112      	lsls	r2, r2, #4
 80035c2:	b2d2      	uxtb	r2, r2
 80035c4:	440b      	add	r3, r1
 80035c6:	761a      	strb	r2, [r3, #24]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000e100 	.word	0xe000e100
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035dc:	b480      	push	{r7}
 80035de:	b089      	sub	sp, #36	; 0x24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f1c3 0307 	rsb	r3, r3, #7
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	bf28      	it	cs
 80035fa:	2304      	movcs	r3, #4
 80035fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	3304      	adds	r3, #4
 8003602:	2b06      	cmp	r3, #6
 8003604:	d902      	bls.n	800360c <NVIC_EncodePriority+0x30>
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3b03      	subs	r3, #3
 800360a:	e000      	b.n	800360e <NVIC_EncodePriority+0x32>
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003610:	f04f 32ff 	mov.w	r2, #4294967295
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	43da      	mvns	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	401a      	ands	r2, r3
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003624:	f04f 31ff 	mov.w	r1, #4294967295
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	fa01 f303 	lsl.w	r3, r1, r3
 800362e:	43d9      	mvns	r1, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003634:	4313      	orrs	r3, r2
         );
}
 8003636:	4618      	mov	r0, r3
 8003638:	3724      	adds	r7, #36	; 0x24
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3b01      	subs	r3, #1
 8003650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003654:	d301      	bcc.n	800365a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003656:	2301      	movs	r3, #1
 8003658:	e00f      	b.n	800367a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800365a:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <SysTick_Config+0x40>)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3b01      	subs	r3, #1
 8003660:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003662:	210f      	movs	r1, #15
 8003664:	f04f 30ff 	mov.w	r0, #4294967295
 8003668:	f7ff ff8e 	bl	8003588 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <SysTick_Config+0x40>)
 800366e:	2200      	movs	r2, #0
 8003670:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003672:	4b04      	ldr	r3, [pc, #16]	; (8003684 <SysTick_Config+0x40>)
 8003674:	2207      	movs	r2, #7
 8003676:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	e000e010 	.word	0xe000e010

08003688 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff ff29 	bl	80034e8 <__NVIC_SetPriorityGrouping>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b086      	sub	sp, #24
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	4603      	mov	r3, r0
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036ac:	f7ff ff40 	bl	8003530 <__NVIC_GetPriorityGrouping>
 80036b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	6978      	ldr	r0, [r7, #20]
 80036b8:	f7ff ff90 	bl	80035dc <NVIC_EncodePriority>
 80036bc:	4602      	mov	r2, r0
 80036be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff ff5f 	bl	8003588 <__NVIC_SetPriority>
}
 80036ca:	bf00      	nop
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	4603      	mov	r3, r0
 80036da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff ff33 	bl	800354c <__NVIC_EnableIRQ>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff ffa4 	bl	8003644 <SysTick_Config>
 80036fc:	4603      	mov	r3, r0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800370a:	f000 f802 	bl	8003712 <HAL_SYSTICK_Callback>
}
 800370e:	bf00      	nop
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8003712:	b480      	push	{r7}
 8003714:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003716:	bf00      	nop
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e054      	b.n	80037dc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	7f5b      	ldrb	r3, [r3, #29]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fe ff62 	bl	800260c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	791b      	ldrb	r3, [r3, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10c      	bne.n	8003770 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a22      	ldr	r2, [pc, #136]	; (80037e4 <HAL_CRC_Init+0xc4>)
 800375c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0218 	bic.w	r2, r2, #24
 800376c:	609a      	str	r2, [r3, #8]
 800376e:	e00c      	b.n	800378a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6899      	ldr	r1, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	461a      	mov	r2, r3
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 f834 	bl	80037e8 <HAL_CRCEx_Polynomial_Set>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e028      	b.n	80037dc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	795b      	ldrb	r3, [r3, #5]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d105      	bne.n	800379e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f04f 32ff 	mov.w	r2, #4294967295
 800379a:	611a      	str	r2, [r3, #16]
 800379c:	e004      	b.n	80037a8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6912      	ldr	r2, [r2, #16]
 80037a6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699a      	ldr	r2, [r3, #24]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	04c11db7 	.word	0x04c11db7

080037e8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80037f8:	231f      	movs	r3, #31
 80037fa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80037fc:	bf00      	nop
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1e5a      	subs	r2, r3, #1
 8003802:	613a      	str	r2, [r7, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d009      	beq.n	800381c <HAL_CRCEx_Polynomial_Set+0x34>
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_CRCEx_Polynomial_Set+0x16>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b18      	cmp	r3, #24
 8003820:	d846      	bhi.n	80038b0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003822:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	080038b7 	.word	0x080038b7
 800382c:	080038b1 	.word	0x080038b1
 8003830:	080038b1 	.word	0x080038b1
 8003834:	080038b1 	.word	0x080038b1
 8003838:	080038b1 	.word	0x080038b1
 800383c:	080038b1 	.word	0x080038b1
 8003840:	080038b1 	.word	0x080038b1
 8003844:	080038b1 	.word	0x080038b1
 8003848:	080038a5 	.word	0x080038a5
 800384c:	080038b1 	.word	0x080038b1
 8003850:	080038b1 	.word	0x080038b1
 8003854:	080038b1 	.word	0x080038b1
 8003858:	080038b1 	.word	0x080038b1
 800385c:	080038b1 	.word	0x080038b1
 8003860:	080038b1 	.word	0x080038b1
 8003864:	080038b1 	.word	0x080038b1
 8003868:	08003899 	.word	0x08003899
 800386c:	080038b1 	.word	0x080038b1
 8003870:	080038b1 	.word	0x080038b1
 8003874:	080038b1 	.word	0x080038b1
 8003878:	080038b1 	.word	0x080038b1
 800387c:	080038b1 	.word	0x080038b1
 8003880:	080038b1 	.word	0x080038b1
 8003884:	080038b1 	.word	0x080038b1
 8003888:	0800388d 	.word	0x0800388d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b06      	cmp	r3, #6
 8003890:	d913      	bls.n	80038ba <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003896:	e010      	b.n	80038ba <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b07      	cmp	r3, #7
 800389c:	d90f      	bls.n	80038be <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80038a2:	e00c      	b.n	80038be <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	2b0f      	cmp	r3, #15
 80038a8:	d90b      	bls.n	80038c2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80038ae:	e008      	b.n	80038c2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	75fb      	strb	r3, [r7, #23]
      break;
 80038b4:	e006      	b.n	80038c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80038b6:	bf00      	nop
 80038b8:	e004      	b.n	80038c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80038ba:	bf00      	nop
 80038bc:	e002      	b.n	80038c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80038be:	bf00      	nop
 80038c0:	e000      	b.n	80038c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80038c2:	bf00      	nop
  }
  if (status == HAL_OK)
 80038c4:	7dfb      	ldrb	r3, [r7, #23]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10d      	bne.n	80038e6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f023 0118 	bic.w	r1, r3, #24
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80038e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80038fc:	f7ff fddc 	bl	80034b8 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e316      	b.n	8003f3a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a66      	ldr	r2, [pc, #408]	; (8003aac <HAL_DMA_Init+0x1b8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d04a      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a65      	ldr	r2, [pc, #404]	; (8003ab0 <HAL_DMA_Init+0x1bc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d045      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a63      	ldr	r2, [pc, #396]	; (8003ab4 <HAL_DMA_Init+0x1c0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d040      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a62      	ldr	r2, [pc, #392]	; (8003ab8 <HAL_DMA_Init+0x1c4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d03b      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a60      	ldr	r2, [pc, #384]	; (8003abc <HAL_DMA_Init+0x1c8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d036      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a5f      	ldr	r2, [pc, #380]	; (8003ac0 <HAL_DMA_Init+0x1cc>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d031      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a5d      	ldr	r2, [pc, #372]	; (8003ac4 <HAL_DMA_Init+0x1d0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d02c      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a5c      	ldr	r2, [pc, #368]	; (8003ac8 <HAL_DMA_Init+0x1d4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d027      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a5a      	ldr	r2, [pc, #360]	; (8003acc <HAL_DMA_Init+0x1d8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d022      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a59      	ldr	r2, [pc, #356]	; (8003ad0 <HAL_DMA_Init+0x1dc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d01d      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a57      	ldr	r2, [pc, #348]	; (8003ad4 <HAL_DMA_Init+0x1e0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d018      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a56      	ldr	r2, [pc, #344]	; (8003ad8 <HAL_DMA_Init+0x1e4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d013      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a54      	ldr	r2, [pc, #336]	; (8003adc <HAL_DMA_Init+0x1e8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00e      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a53      	ldr	r2, [pc, #332]	; (8003ae0 <HAL_DMA_Init+0x1ec>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d009      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a51      	ldr	r2, [pc, #324]	; (8003ae4 <HAL_DMA_Init+0x1f0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d004      	beq.n	80039ac <HAL_DMA_Init+0xb8>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a50      	ldr	r2, [pc, #320]	; (8003ae8 <HAL_DMA_Init+0x1f4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d101      	bne.n	80039b0 <HAL_DMA_Init+0xbc>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <HAL_DMA_Init+0xbe>
 80039b0:	2300      	movs	r3, #0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 813b 	beq.w	8003c2e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a37      	ldr	r2, [pc, #220]	; (8003aac <HAL_DMA_Init+0x1b8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d04a      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a36      	ldr	r2, [pc, #216]	; (8003ab0 <HAL_DMA_Init+0x1bc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d045      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a34      	ldr	r2, [pc, #208]	; (8003ab4 <HAL_DMA_Init+0x1c0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d040      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a33      	ldr	r2, [pc, #204]	; (8003ab8 <HAL_DMA_Init+0x1c4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d03b      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a31      	ldr	r2, [pc, #196]	; (8003abc <HAL_DMA_Init+0x1c8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d036      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a30      	ldr	r2, [pc, #192]	; (8003ac0 <HAL_DMA_Init+0x1cc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d031      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a2e      	ldr	r2, [pc, #184]	; (8003ac4 <HAL_DMA_Init+0x1d0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d02c      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2d      	ldr	r2, [pc, #180]	; (8003ac8 <HAL_DMA_Init+0x1d4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d027      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a2b      	ldr	r2, [pc, #172]	; (8003acc <HAL_DMA_Init+0x1d8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d022      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a2a      	ldr	r2, [pc, #168]	; (8003ad0 <HAL_DMA_Init+0x1dc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d01d      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a28      	ldr	r2, [pc, #160]	; (8003ad4 <HAL_DMA_Init+0x1e0>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d018      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a27      	ldr	r2, [pc, #156]	; (8003ad8 <HAL_DMA_Init+0x1e4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d013      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a25      	ldr	r2, [pc, #148]	; (8003adc <HAL_DMA_Init+0x1e8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00e      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a24      	ldr	r2, [pc, #144]	; (8003ae0 <HAL_DMA_Init+0x1ec>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d009      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a22      	ldr	r2, [pc, #136]	; (8003ae4 <HAL_DMA_Init+0x1f0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d004      	beq.n	8003a68 <HAL_DMA_Init+0x174>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <HAL_DMA_Init+0x1f4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d108      	bne.n	8003a7a <HAL_DMA_Init+0x186>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0201 	bic.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
 8003a78:	e007      	b.n	8003a8a <HAL_DMA_Init+0x196>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0201 	bic.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a8a:	e02f      	b.n	8003aec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a8c:	f7ff fd14 	bl	80034b8 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b05      	cmp	r3, #5
 8003a98:	d928      	bls.n	8003aec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e246      	b.n	8003f3a <HAL_DMA_Init+0x646>
 8003aac:	40020010 	.word	0x40020010
 8003ab0:	40020028 	.word	0x40020028
 8003ab4:	40020040 	.word	0x40020040
 8003ab8:	40020058 	.word	0x40020058
 8003abc:	40020070 	.word	0x40020070
 8003ac0:	40020088 	.word	0x40020088
 8003ac4:	400200a0 	.word	0x400200a0
 8003ac8:	400200b8 	.word	0x400200b8
 8003acc:	40020410 	.word	0x40020410
 8003ad0:	40020428 	.word	0x40020428
 8003ad4:	40020440 	.word	0x40020440
 8003ad8:	40020458 	.word	0x40020458
 8003adc:	40020470 	.word	0x40020470
 8003ae0:	40020488 	.word	0x40020488
 8003ae4:	400204a0 	.word	0x400204a0
 8003ae8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1c8      	bne.n	8003a8c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4b83      	ldr	r3, [pc, #524]	; (8003d14 <HAL_DMA_Init+0x420>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003b12:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b2a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d107      	bne.n	8003b50 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003b50:	4b71      	ldr	r3, [pc, #452]	; (8003d18 <HAL_DMA_Init+0x424>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	4b71      	ldr	r3, [pc, #452]	; (8003d1c <HAL_DMA_Init+0x428>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b5c:	d328      	bcc.n	8003bb0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b28      	cmp	r3, #40	; 0x28
 8003b64:	d903      	bls.n	8003b6e <HAL_DMA_Init+0x27a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b6c:	d917      	bls.n	8003b9e <HAL_DMA_Init+0x2aa>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b3e      	cmp	r3, #62	; 0x3e
 8003b74:	d903      	bls.n	8003b7e <HAL_DMA_Init+0x28a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b42      	cmp	r3, #66	; 0x42
 8003b7c:	d90f      	bls.n	8003b9e <HAL_DMA_Init+0x2aa>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b46      	cmp	r3, #70	; 0x46
 8003b84:	d903      	bls.n	8003b8e <HAL_DMA_Init+0x29a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b48      	cmp	r3, #72	; 0x48
 8003b8c:	d907      	bls.n	8003b9e <HAL_DMA_Init+0x2aa>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b4e      	cmp	r3, #78	; 0x4e
 8003b94:	d905      	bls.n	8003ba2 <HAL_DMA_Init+0x2ae>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b52      	cmp	r3, #82	; 0x52
 8003b9c:	d801      	bhi.n	8003ba2 <HAL_DMA_Init+0x2ae>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <HAL_DMA_Init+0x2b0>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bae:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f023 0307 	bic.w	r3, r3, #7
 8003bc6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d117      	bne.n	8003c0a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00e      	beq.n	8003c0a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f001 ff1b 	bl	8005a28 <DMA_CheckFifoParam>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2240      	movs	r2, #64	; 0x40
 8003bfc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e197      	b.n	8003f3a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f001 fe56 	bl	80058c4 <DMA_CalcBaseAndBitshift>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	223f      	movs	r2, #63	; 0x3f
 8003c26:	409a      	lsls	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	609a      	str	r2, [r3, #8]
 8003c2c:	e0cd      	b.n	8003dca <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a3b      	ldr	r2, [pc, #236]	; (8003d20 <HAL_DMA_Init+0x42c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d022      	beq.n	8003c7e <HAL_DMA_Init+0x38a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a39      	ldr	r2, [pc, #228]	; (8003d24 <HAL_DMA_Init+0x430>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d01d      	beq.n	8003c7e <HAL_DMA_Init+0x38a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a38      	ldr	r2, [pc, #224]	; (8003d28 <HAL_DMA_Init+0x434>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d018      	beq.n	8003c7e <HAL_DMA_Init+0x38a>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a36      	ldr	r2, [pc, #216]	; (8003d2c <HAL_DMA_Init+0x438>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <HAL_DMA_Init+0x38a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a35      	ldr	r2, [pc, #212]	; (8003d30 <HAL_DMA_Init+0x43c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00e      	beq.n	8003c7e <HAL_DMA_Init+0x38a>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a33      	ldr	r2, [pc, #204]	; (8003d34 <HAL_DMA_Init+0x440>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d009      	beq.n	8003c7e <HAL_DMA_Init+0x38a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a32      	ldr	r2, [pc, #200]	; (8003d38 <HAL_DMA_Init+0x444>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d004      	beq.n	8003c7e <HAL_DMA_Init+0x38a>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a30      	ldr	r2, [pc, #192]	; (8003d3c <HAL_DMA_Init+0x448>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d101      	bne.n	8003c82 <HAL_DMA_Init+0x38e>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <HAL_DMA_Init+0x390>
 8003c82:	2300      	movs	r3, #0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8097 	beq.w	8003db8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a24      	ldr	r2, [pc, #144]	; (8003d20 <HAL_DMA_Init+0x42c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d021      	beq.n	8003cd8 <HAL_DMA_Init+0x3e4>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <HAL_DMA_Init+0x430>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01c      	beq.n	8003cd8 <HAL_DMA_Init+0x3e4>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a21      	ldr	r2, [pc, #132]	; (8003d28 <HAL_DMA_Init+0x434>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d017      	beq.n	8003cd8 <HAL_DMA_Init+0x3e4>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <HAL_DMA_Init+0x438>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d012      	beq.n	8003cd8 <HAL_DMA_Init+0x3e4>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1e      	ldr	r2, [pc, #120]	; (8003d30 <HAL_DMA_Init+0x43c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d00d      	beq.n	8003cd8 <HAL_DMA_Init+0x3e4>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1c      	ldr	r2, [pc, #112]	; (8003d34 <HAL_DMA_Init+0x440>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d008      	beq.n	8003cd8 <HAL_DMA_Init+0x3e4>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a1b      	ldr	r2, [pc, #108]	; (8003d38 <HAL_DMA_Init+0x444>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d003      	beq.n	8003cd8 <HAL_DMA_Init+0x3e4>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a19      	ldr	r2, [pc, #100]	; (8003d3c <HAL_DMA_Init+0x448>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <HAL_DMA_Init+0x44c>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2b40      	cmp	r3, #64	; 0x40
 8003d00:	d020      	beq.n	8003d44 <HAL_DMA_Init+0x450>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b80      	cmp	r3, #128	; 0x80
 8003d08:	d102      	bne.n	8003d10 <HAL_DMA_Init+0x41c>
 8003d0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d0e:	e01a      	b.n	8003d46 <HAL_DMA_Init+0x452>
 8003d10:	2300      	movs	r3, #0
 8003d12:	e018      	b.n	8003d46 <HAL_DMA_Init+0x452>
 8003d14:	fe10803f 	.word	0xfe10803f
 8003d18:	5c001000 	.word	0x5c001000
 8003d1c:	ffff0000 	.word	0xffff0000
 8003d20:	58025408 	.word	0x58025408
 8003d24:	5802541c 	.word	0x5802541c
 8003d28:	58025430 	.word	0x58025430
 8003d2c:	58025444 	.word	0x58025444
 8003d30:	58025458 	.word	0x58025458
 8003d34:	5802546c 	.word	0x5802546c
 8003d38:	58025480 	.word	0x58025480
 8003d3c:	58025494 	.word	0x58025494
 8003d40:	fffe000f 	.word	0xfffe000f
 8003d44:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	68d2      	ldr	r2, [r2, #12]
 8003d4a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d64:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003d74:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b6e      	ldr	r3, [pc, #440]	; (8003f44 <HAL_DMA_Init+0x650>)
 8003d8c:	4413      	add	r3, r2
 8003d8e:	4a6e      	ldr	r2, [pc, #440]	; (8003f48 <HAL_DMA_Init+0x654>)
 8003d90:	fba2 2303 	umull	r2, r3, r2, r3
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	009a      	lsls	r2, r3, #2
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f001 fd91 	bl	80058c4 <DMA_CalcBaseAndBitshift>
 8003da2:	4603      	mov	r3, r0
 8003da4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003daa:	f003 031f 	and.w	r3, r3, #31
 8003dae:	2201      	movs	r2, #1
 8003db0:	409a      	lsls	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	e008      	b.n	8003dca <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2240      	movs	r2, #64	; 0x40
 8003dbc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e0b7      	b.n	8003f3a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a5f      	ldr	r2, [pc, #380]	; (8003f4c <HAL_DMA_Init+0x658>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d072      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a5d      	ldr	r2, [pc, #372]	; (8003f50 <HAL_DMA_Init+0x65c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d06d      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a5c      	ldr	r2, [pc, #368]	; (8003f54 <HAL_DMA_Init+0x660>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d068      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a5a      	ldr	r2, [pc, #360]	; (8003f58 <HAL_DMA_Init+0x664>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d063      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a59      	ldr	r2, [pc, #356]	; (8003f5c <HAL_DMA_Init+0x668>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d05e      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a57      	ldr	r2, [pc, #348]	; (8003f60 <HAL_DMA_Init+0x66c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d059      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a56      	ldr	r2, [pc, #344]	; (8003f64 <HAL_DMA_Init+0x670>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d054      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a54      	ldr	r2, [pc, #336]	; (8003f68 <HAL_DMA_Init+0x674>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d04f      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a53      	ldr	r2, [pc, #332]	; (8003f6c <HAL_DMA_Init+0x678>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d04a      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a51      	ldr	r2, [pc, #324]	; (8003f70 <HAL_DMA_Init+0x67c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d045      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a50      	ldr	r2, [pc, #320]	; (8003f74 <HAL_DMA_Init+0x680>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d040      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a4e      	ldr	r2, [pc, #312]	; (8003f78 <HAL_DMA_Init+0x684>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d03b      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a4d      	ldr	r2, [pc, #308]	; (8003f7c <HAL_DMA_Init+0x688>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d036      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a4b      	ldr	r2, [pc, #300]	; (8003f80 <HAL_DMA_Init+0x68c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d031      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a4a      	ldr	r2, [pc, #296]	; (8003f84 <HAL_DMA_Init+0x690>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d02c      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a48      	ldr	r2, [pc, #288]	; (8003f88 <HAL_DMA_Init+0x694>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d027      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a47      	ldr	r2, [pc, #284]	; (8003f8c <HAL_DMA_Init+0x698>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d022      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a45      	ldr	r2, [pc, #276]	; (8003f90 <HAL_DMA_Init+0x69c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01d      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a44      	ldr	r2, [pc, #272]	; (8003f94 <HAL_DMA_Init+0x6a0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d018      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a42      	ldr	r2, [pc, #264]	; (8003f98 <HAL_DMA_Init+0x6a4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d013      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a41      	ldr	r2, [pc, #260]	; (8003f9c <HAL_DMA_Init+0x6a8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00e      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a3f      	ldr	r2, [pc, #252]	; (8003fa0 <HAL_DMA_Init+0x6ac>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d009      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a3e      	ldr	r2, [pc, #248]	; (8003fa4 <HAL_DMA_Init+0x6b0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d004      	beq.n	8003eba <HAL_DMA_Init+0x5c6>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a3c      	ldr	r2, [pc, #240]	; (8003fa8 <HAL_DMA_Init+0x6b4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d101      	bne.n	8003ebe <HAL_DMA_Init+0x5ca>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <HAL_DMA_Init+0x5cc>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d032      	beq.n	8003f2a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f001 fe2b 	bl	8005b20 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b80      	cmp	r3, #128	; 0x80
 8003ed0:	d102      	bne.n	8003ed8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003eec:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d010      	beq.n	8003f18 <HAL_DMA_Init+0x624>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d80c      	bhi.n	8003f18 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f001 fea8 	bl	8005c54 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f14:	605a      	str	r2, [r3, #4]
 8003f16:	e008      	b.n	8003f2a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	a7fdabf8 	.word	0xa7fdabf8
 8003f48:	cccccccd 	.word	0xcccccccd
 8003f4c:	40020010 	.word	0x40020010
 8003f50:	40020028 	.word	0x40020028
 8003f54:	40020040 	.word	0x40020040
 8003f58:	40020058 	.word	0x40020058
 8003f5c:	40020070 	.word	0x40020070
 8003f60:	40020088 	.word	0x40020088
 8003f64:	400200a0 	.word	0x400200a0
 8003f68:	400200b8 	.word	0x400200b8
 8003f6c:	40020410 	.word	0x40020410
 8003f70:	40020428 	.word	0x40020428
 8003f74:	40020440 	.word	0x40020440
 8003f78:	40020458 	.word	0x40020458
 8003f7c:	40020470 	.word	0x40020470
 8003f80:	40020488 	.word	0x40020488
 8003f84:	400204a0 	.word	0x400204a0
 8003f88:	400204b8 	.word	0x400204b8
 8003f8c:	58025408 	.word	0x58025408
 8003f90:	5802541c 	.word	0x5802541c
 8003f94:	58025430 	.word	0x58025430
 8003f98:	58025444 	.word	0x58025444
 8003f9c:	58025458 	.word	0x58025458
 8003fa0:	5802546c 	.word	0x5802546c
 8003fa4:	58025480 	.word	0x58025480
 8003fa8:	58025494 	.word	0x58025494

08003fac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003fb4:	f7ff fa80 	bl	80034b8 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e2dc      	b.n	800457e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d008      	beq.n	8003fe2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2280      	movs	r2, #128	; 0x80
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e2cd      	b.n	800457e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a76      	ldr	r2, [pc, #472]	; (80041c0 <HAL_DMA_Abort+0x214>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d04a      	beq.n	8004082 <HAL_DMA_Abort+0xd6>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a74      	ldr	r2, [pc, #464]	; (80041c4 <HAL_DMA_Abort+0x218>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d045      	beq.n	8004082 <HAL_DMA_Abort+0xd6>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a73      	ldr	r2, [pc, #460]	; (80041c8 <HAL_DMA_Abort+0x21c>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d040      	beq.n	8004082 <HAL_DMA_Abort+0xd6>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a71      	ldr	r2, [pc, #452]	; (80041cc <HAL_DMA_Abort+0x220>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d03b      	beq.n	8004082 <HAL_DMA_Abort+0xd6>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a70      	ldr	r2, [pc, #448]	; (80041d0 <HAL_DMA_Abort+0x224>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d036      	beq.n	8004082 <HAL_DMA_Abort+0xd6>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a6e      	ldr	r2, [pc, #440]	; (80041d4 <HAL_DMA_Abort+0x228>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d031      	beq.n	8004082 <HAL_DMA_Abort+0xd6>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a6d      	ldr	r2, [pc, #436]	; (80041d8 <HAL_DMA_Abort+0x22c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d02c      	beq.n	8004082 <HAL_DMA_Abort+0xd6>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a6b      	ldr	r2, [pc, #428]	; (80041dc <HAL_DMA_Abort+0x230>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d027      	beq.n	8004082 <HAL_DMA_Abort+0xd6>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a6a      	ldr	r2, [pc, #424]	; (80041e0 <HAL_DMA_Abort+0x234>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d022      	beq.n	8004082 <HAL_DMA_Abort+0xd6>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a68      	ldr	r2, [pc, #416]	; (80041e4 <HAL_DMA_Abort+0x238>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d01d      	beq.n	8004082 <HAL_DMA_Abort+0xd6>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a67      	ldr	r2, [pc, #412]	; (80041e8 <HAL_DMA_Abort+0x23c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d018      	beq.n	8004082 <HAL_DMA_Abort+0xd6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a65      	ldr	r2, [pc, #404]	; (80041ec <HAL_DMA_Abort+0x240>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <HAL_DMA_Abort+0xd6>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a64      	ldr	r2, [pc, #400]	; (80041f0 <HAL_DMA_Abort+0x244>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00e      	beq.n	8004082 <HAL_DMA_Abort+0xd6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a62      	ldr	r2, [pc, #392]	; (80041f4 <HAL_DMA_Abort+0x248>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d009      	beq.n	8004082 <HAL_DMA_Abort+0xd6>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a61      	ldr	r2, [pc, #388]	; (80041f8 <HAL_DMA_Abort+0x24c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d004      	beq.n	8004082 <HAL_DMA_Abort+0xd6>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a5f      	ldr	r2, [pc, #380]	; (80041fc <HAL_DMA_Abort+0x250>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d101      	bne.n	8004086 <HAL_DMA_Abort+0xda>
 8004082:	2301      	movs	r3, #1
 8004084:	e000      	b.n	8004088 <HAL_DMA_Abort+0xdc>
 8004086:	2300      	movs	r3, #0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d013      	beq.n	80040b4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 021e 	bic.w	r2, r2, #30
 800409a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695a      	ldr	r2, [r3, #20]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040aa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	e00a      	b.n	80040ca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 020e 	bic.w	r2, r2, #14
 80040c2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a3c      	ldr	r2, [pc, #240]	; (80041c0 <HAL_DMA_Abort+0x214>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d072      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a3a      	ldr	r2, [pc, #232]	; (80041c4 <HAL_DMA_Abort+0x218>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d06d      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a39      	ldr	r2, [pc, #228]	; (80041c8 <HAL_DMA_Abort+0x21c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d068      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a37      	ldr	r2, [pc, #220]	; (80041cc <HAL_DMA_Abort+0x220>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d063      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a36      	ldr	r2, [pc, #216]	; (80041d0 <HAL_DMA_Abort+0x224>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d05e      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a34      	ldr	r2, [pc, #208]	; (80041d4 <HAL_DMA_Abort+0x228>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d059      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a33      	ldr	r2, [pc, #204]	; (80041d8 <HAL_DMA_Abort+0x22c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d054      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a31      	ldr	r2, [pc, #196]	; (80041dc <HAL_DMA_Abort+0x230>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d04f      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a30      	ldr	r2, [pc, #192]	; (80041e0 <HAL_DMA_Abort+0x234>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d04a      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a2e      	ldr	r2, [pc, #184]	; (80041e4 <HAL_DMA_Abort+0x238>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d045      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a2d      	ldr	r2, [pc, #180]	; (80041e8 <HAL_DMA_Abort+0x23c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d040      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a2b      	ldr	r2, [pc, #172]	; (80041ec <HAL_DMA_Abort+0x240>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d03b      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a2a      	ldr	r2, [pc, #168]	; (80041f0 <HAL_DMA_Abort+0x244>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d036      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a28      	ldr	r2, [pc, #160]	; (80041f4 <HAL_DMA_Abort+0x248>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d031      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a27      	ldr	r2, [pc, #156]	; (80041f8 <HAL_DMA_Abort+0x24c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d02c      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a25      	ldr	r2, [pc, #148]	; (80041fc <HAL_DMA_Abort+0x250>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d027      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a24      	ldr	r2, [pc, #144]	; (8004200 <HAL_DMA_Abort+0x254>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d022      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a22      	ldr	r2, [pc, #136]	; (8004204 <HAL_DMA_Abort+0x258>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d01d      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a21      	ldr	r2, [pc, #132]	; (8004208 <HAL_DMA_Abort+0x25c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d018      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1f      	ldr	r2, [pc, #124]	; (800420c <HAL_DMA_Abort+0x260>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d013      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1e      	ldr	r2, [pc, #120]	; (8004210 <HAL_DMA_Abort+0x264>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00e      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a1c      	ldr	r2, [pc, #112]	; (8004214 <HAL_DMA_Abort+0x268>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d009      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a1b      	ldr	r2, [pc, #108]	; (8004218 <HAL_DMA_Abort+0x26c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_DMA_Abort+0x20e>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a19      	ldr	r2, [pc, #100]	; (800421c <HAL_DMA_Abort+0x270>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d132      	bne.n	8004220 <HAL_DMA_Abort+0x274>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e031      	b.n	8004222 <HAL_DMA_Abort+0x276>
 80041be:	bf00      	nop
 80041c0:	40020010 	.word	0x40020010
 80041c4:	40020028 	.word	0x40020028
 80041c8:	40020040 	.word	0x40020040
 80041cc:	40020058 	.word	0x40020058
 80041d0:	40020070 	.word	0x40020070
 80041d4:	40020088 	.word	0x40020088
 80041d8:	400200a0 	.word	0x400200a0
 80041dc:	400200b8 	.word	0x400200b8
 80041e0:	40020410 	.word	0x40020410
 80041e4:	40020428 	.word	0x40020428
 80041e8:	40020440 	.word	0x40020440
 80041ec:	40020458 	.word	0x40020458
 80041f0:	40020470 	.word	0x40020470
 80041f4:	40020488 	.word	0x40020488
 80041f8:	400204a0 	.word	0x400204a0
 80041fc:	400204b8 	.word	0x400204b8
 8004200:	58025408 	.word	0x58025408
 8004204:	5802541c 	.word	0x5802541c
 8004208:	58025430 	.word	0x58025430
 800420c:	58025444 	.word	0x58025444
 8004210:	58025458 	.word	0x58025458
 8004214:	5802546c 	.word	0x5802546c
 8004218:	58025480 	.word	0x58025480
 800421c:	58025494 	.word	0x58025494
 8004220:	2300      	movs	r3, #0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004230:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004234:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a6d      	ldr	r2, [pc, #436]	; (80043f0 <HAL_DMA_Abort+0x444>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d04a      	beq.n	80042d6 <HAL_DMA_Abort+0x32a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a6b      	ldr	r2, [pc, #428]	; (80043f4 <HAL_DMA_Abort+0x448>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d045      	beq.n	80042d6 <HAL_DMA_Abort+0x32a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6a      	ldr	r2, [pc, #424]	; (80043f8 <HAL_DMA_Abort+0x44c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d040      	beq.n	80042d6 <HAL_DMA_Abort+0x32a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a68      	ldr	r2, [pc, #416]	; (80043fc <HAL_DMA_Abort+0x450>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d03b      	beq.n	80042d6 <HAL_DMA_Abort+0x32a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a67      	ldr	r2, [pc, #412]	; (8004400 <HAL_DMA_Abort+0x454>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d036      	beq.n	80042d6 <HAL_DMA_Abort+0x32a>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a65      	ldr	r2, [pc, #404]	; (8004404 <HAL_DMA_Abort+0x458>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d031      	beq.n	80042d6 <HAL_DMA_Abort+0x32a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a64      	ldr	r2, [pc, #400]	; (8004408 <HAL_DMA_Abort+0x45c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d02c      	beq.n	80042d6 <HAL_DMA_Abort+0x32a>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a62      	ldr	r2, [pc, #392]	; (800440c <HAL_DMA_Abort+0x460>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d027      	beq.n	80042d6 <HAL_DMA_Abort+0x32a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a61      	ldr	r2, [pc, #388]	; (8004410 <HAL_DMA_Abort+0x464>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d022      	beq.n	80042d6 <HAL_DMA_Abort+0x32a>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a5f      	ldr	r2, [pc, #380]	; (8004414 <HAL_DMA_Abort+0x468>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01d      	beq.n	80042d6 <HAL_DMA_Abort+0x32a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a5e      	ldr	r2, [pc, #376]	; (8004418 <HAL_DMA_Abort+0x46c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d018      	beq.n	80042d6 <HAL_DMA_Abort+0x32a>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a5c      	ldr	r2, [pc, #368]	; (800441c <HAL_DMA_Abort+0x470>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <HAL_DMA_Abort+0x32a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a5b      	ldr	r2, [pc, #364]	; (8004420 <HAL_DMA_Abort+0x474>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00e      	beq.n	80042d6 <HAL_DMA_Abort+0x32a>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a59      	ldr	r2, [pc, #356]	; (8004424 <HAL_DMA_Abort+0x478>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d009      	beq.n	80042d6 <HAL_DMA_Abort+0x32a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a58      	ldr	r2, [pc, #352]	; (8004428 <HAL_DMA_Abort+0x47c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d004      	beq.n	80042d6 <HAL_DMA_Abort+0x32a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a56      	ldr	r2, [pc, #344]	; (800442c <HAL_DMA_Abort+0x480>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d108      	bne.n	80042e8 <HAL_DMA_Abort+0x33c>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0201 	bic.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	e007      	b.n	80042f8 <HAL_DMA_Abort+0x34c>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0201 	bic.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80042f8:	e013      	b.n	8004322 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042fa:	f7ff f8dd 	bl	80034b8 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b05      	cmp	r3, #5
 8004306:	d90c      	bls.n	8004322 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2220      	movs	r2, #32
 800430c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2203      	movs	r2, #3
 8004312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e12d      	b.n	800457e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e5      	bne.n	80042fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a2f      	ldr	r2, [pc, #188]	; (80043f0 <HAL_DMA_Abort+0x444>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d04a      	beq.n	80043ce <HAL_DMA_Abort+0x422>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a2d      	ldr	r2, [pc, #180]	; (80043f4 <HAL_DMA_Abort+0x448>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d045      	beq.n	80043ce <HAL_DMA_Abort+0x422>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a2c      	ldr	r2, [pc, #176]	; (80043f8 <HAL_DMA_Abort+0x44c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d040      	beq.n	80043ce <HAL_DMA_Abort+0x422>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a2a      	ldr	r2, [pc, #168]	; (80043fc <HAL_DMA_Abort+0x450>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d03b      	beq.n	80043ce <HAL_DMA_Abort+0x422>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a29      	ldr	r2, [pc, #164]	; (8004400 <HAL_DMA_Abort+0x454>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d036      	beq.n	80043ce <HAL_DMA_Abort+0x422>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a27      	ldr	r2, [pc, #156]	; (8004404 <HAL_DMA_Abort+0x458>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d031      	beq.n	80043ce <HAL_DMA_Abort+0x422>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a26      	ldr	r2, [pc, #152]	; (8004408 <HAL_DMA_Abort+0x45c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d02c      	beq.n	80043ce <HAL_DMA_Abort+0x422>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a24      	ldr	r2, [pc, #144]	; (800440c <HAL_DMA_Abort+0x460>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d027      	beq.n	80043ce <HAL_DMA_Abort+0x422>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a23      	ldr	r2, [pc, #140]	; (8004410 <HAL_DMA_Abort+0x464>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d022      	beq.n	80043ce <HAL_DMA_Abort+0x422>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a21      	ldr	r2, [pc, #132]	; (8004414 <HAL_DMA_Abort+0x468>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d01d      	beq.n	80043ce <HAL_DMA_Abort+0x422>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a20      	ldr	r2, [pc, #128]	; (8004418 <HAL_DMA_Abort+0x46c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d018      	beq.n	80043ce <HAL_DMA_Abort+0x422>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a1e      	ldr	r2, [pc, #120]	; (800441c <HAL_DMA_Abort+0x470>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d013      	beq.n	80043ce <HAL_DMA_Abort+0x422>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1d      	ldr	r2, [pc, #116]	; (8004420 <HAL_DMA_Abort+0x474>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00e      	beq.n	80043ce <HAL_DMA_Abort+0x422>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1b      	ldr	r2, [pc, #108]	; (8004424 <HAL_DMA_Abort+0x478>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d009      	beq.n	80043ce <HAL_DMA_Abort+0x422>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1a      	ldr	r2, [pc, #104]	; (8004428 <HAL_DMA_Abort+0x47c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d004      	beq.n	80043ce <HAL_DMA_Abort+0x422>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a18      	ldr	r2, [pc, #96]	; (800442c <HAL_DMA_Abort+0x480>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d101      	bne.n	80043d2 <HAL_DMA_Abort+0x426>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <HAL_DMA_Abort+0x428>
 80043d2:	2300      	movs	r3, #0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d02b      	beq.n	8004430 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	223f      	movs	r2, #63	; 0x3f
 80043e8:	409a      	lsls	r2, r3
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	609a      	str	r2, [r3, #8]
 80043ee:	e02a      	b.n	8004446 <HAL_DMA_Abort+0x49a>
 80043f0:	40020010 	.word	0x40020010
 80043f4:	40020028 	.word	0x40020028
 80043f8:	40020040 	.word	0x40020040
 80043fc:	40020058 	.word	0x40020058
 8004400:	40020070 	.word	0x40020070
 8004404:	40020088 	.word	0x40020088
 8004408:	400200a0 	.word	0x400200a0
 800440c:	400200b8 	.word	0x400200b8
 8004410:	40020410 	.word	0x40020410
 8004414:	40020428 	.word	0x40020428
 8004418:	40020440 	.word	0x40020440
 800441c:	40020458 	.word	0x40020458
 8004420:	40020470 	.word	0x40020470
 8004424:	40020488 	.word	0x40020488
 8004428:	400204a0 	.word	0x400204a0
 800442c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004434:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	2201      	movs	r2, #1
 8004440:	409a      	lsls	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a4f      	ldr	r2, [pc, #316]	; (8004588 <HAL_DMA_Abort+0x5dc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d072      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a4d      	ldr	r2, [pc, #308]	; (800458c <HAL_DMA_Abort+0x5e0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d06d      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a4c      	ldr	r2, [pc, #304]	; (8004590 <HAL_DMA_Abort+0x5e4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d068      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a4a      	ldr	r2, [pc, #296]	; (8004594 <HAL_DMA_Abort+0x5e8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d063      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a49      	ldr	r2, [pc, #292]	; (8004598 <HAL_DMA_Abort+0x5ec>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d05e      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a47      	ldr	r2, [pc, #284]	; (800459c <HAL_DMA_Abort+0x5f0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d059      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a46      	ldr	r2, [pc, #280]	; (80045a0 <HAL_DMA_Abort+0x5f4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d054      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a44      	ldr	r2, [pc, #272]	; (80045a4 <HAL_DMA_Abort+0x5f8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d04f      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a43      	ldr	r2, [pc, #268]	; (80045a8 <HAL_DMA_Abort+0x5fc>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d04a      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a41      	ldr	r2, [pc, #260]	; (80045ac <HAL_DMA_Abort+0x600>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d045      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a40      	ldr	r2, [pc, #256]	; (80045b0 <HAL_DMA_Abort+0x604>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d040      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a3e      	ldr	r2, [pc, #248]	; (80045b4 <HAL_DMA_Abort+0x608>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d03b      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a3d      	ldr	r2, [pc, #244]	; (80045b8 <HAL_DMA_Abort+0x60c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d036      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a3b      	ldr	r2, [pc, #236]	; (80045bc <HAL_DMA_Abort+0x610>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d031      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a3a      	ldr	r2, [pc, #232]	; (80045c0 <HAL_DMA_Abort+0x614>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d02c      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a38      	ldr	r2, [pc, #224]	; (80045c4 <HAL_DMA_Abort+0x618>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d027      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a37      	ldr	r2, [pc, #220]	; (80045c8 <HAL_DMA_Abort+0x61c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d022      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a35      	ldr	r2, [pc, #212]	; (80045cc <HAL_DMA_Abort+0x620>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d01d      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a34      	ldr	r2, [pc, #208]	; (80045d0 <HAL_DMA_Abort+0x624>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d018      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a32      	ldr	r2, [pc, #200]	; (80045d4 <HAL_DMA_Abort+0x628>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d013      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a31      	ldr	r2, [pc, #196]	; (80045d8 <HAL_DMA_Abort+0x62c>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d00e      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a2f      	ldr	r2, [pc, #188]	; (80045dc <HAL_DMA_Abort+0x630>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d009      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a2e      	ldr	r2, [pc, #184]	; (80045e0 <HAL_DMA_Abort+0x634>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d004      	beq.n	8004536 <HAL_DMA_Abort+0x58a>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a2c      	ldr	r2, [pc, #176]	; (80045e4 <HAL_DMA_Abort+0x638>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d101      	bne.n	800453a <HAL_DMA_Abort+0x58e>
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <HAL_DMA_Abort+0x590>
 800453a:	2300      	movs	r3, #0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d015      	beq.n	800456c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004548:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00c      	beq.n	800456c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800455c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004560:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800456a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	40020010 	.word	0x40020010
 800458c:	40020028 	.word	0x40020028
 8004590:	40020040 	.word	0x40020040
 8004594:	40020058 	.word	0x40020058
 8004598:	40020070 	.word	0x40020070
 800459c:	40020088 	.word	0x40020088
 80045a0:	400200a0 	.word	0x400200a0
 80045a4:	400200b8 	.word	0x400200b8
 80045a8:	40020410 	.word	0x40020410
 80045ac:	40020428 	.word	0x40020428
 80045b0:	40020440 	.word	0x40020440
 80045b4:	40020458 	.word	0x40020458
 80045b8:	40020470 	.word	0x40020470
 80045bc:	40020488 	.word	0x40020488
 80045c0:	400204a0 	.word	0x400204a0
 80045c4:	400204b8 	.word	0x400204b8
 80045c8:	58025408 	.word	0x58025408
 80045cc:	5802541c 	.word	0x5802541c
 80045d0:	58025430 	.word	0x58025430
 80045d4:	58025444 	.word	0x58025444
 80045d8:	58025458 	.word	0x58025458
 80045dc:	5802546c 	.word	0x5802546c
 80045e0:	58025480 	.word	0x58025480
 80045e4:	58025494 	.word	0x58025494

080045e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e205      	b.n	8004a06 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d004      	beq.n	8004610 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2280      	movs	r2, #128	; 0x80
 800460a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e1fa      	b.n	8004a06 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a8c      	ldr	r2, [pc, #560]	; (8004848 <HAL_DMA_Abort_IT+0x260>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d04a      	beq.n	80046b0 <HAL_DMA_Abort_IT+0xc8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a8b      	ldr	r2, [pc, #556]	; (800484c <HAL_DMA_Abort_IT+0x264>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d045      	beq.n	80046b0 <HAL_DMA_Abort_IT+0xc8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a89      	ldr	r2, [pc, #548]	; (8004850 <HAL_DMA_Abort_IT+0x268>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d040      	beq.n	80046b0 <HAL_DMA_Abort_IT+0xc8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a88      	ldr	r2, [pc, #544]	; (8004854 <HAL_DMA_Abort_IT+0x26c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d03b      	beq.n	80046b0 <HAL_DMA_Abort_IT+0xc8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a86      	ldr	r2, [pc, #536]	; (8004858 <HAL_DMA_Abort_IT+0x270>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d036      	beq.n	80046b0 <HAL_DMA_Abort_IT+0xc8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a85      	ldr	r2, [pc, #532]	; (800485c <HAL_DMA_Abort_IT+0x274>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d031      	beq.n	80046b0 <HAL_DMA_Abort_IT+0xc8>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a83      	ldr	r2, [pc, #524]	; (8004860 <HAL_DMA_Abort_IT+0x278>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d02c      	beq.n	80046b0 <HAL_DMA_Abort_IT+0xc8>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a82      	ldr	r2, [pc, #520]	; (8004864 <HAL_DMA_Abort_IT+0x27c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d027      	beq.n	80046b0 <HAL_DMA_Abort_IT+0xc8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a80      	ldr	r2, [pc, #512]	; (8004868 <HAL_DMA_Abort_IT+0x280>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d022      	beq.n	80046b0 <HAL_DMA_Abort_IT+0xc8>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a7f      	ldr	r2, [pc, #508]	; (800486c <HAL_DMA_Abort_IT+0x284>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d01d      	beq.n	80046b0 <HAL_DMA_Abort_IT+0xc8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a7d      	ldr	r2, [pc, #500]	; (8004870 <HAL_DMA_Abort_IT+0x288>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d018      	beq.n	80046b0 <HAL_DMA_Abort_IT+0xc8>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a7c      	ldr	r2, [pc, #496]	; (8004874 <HAL_DMA_Abort_IT+0x28c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d013      	beq.n	80046b0 <HAL_DMA_Abort_IT+0xc8>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a7a      	ldr	r2, [pc, #488]	; (8004878 <HAL_DMA_Abort_IT+0x290>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00e      	beq.n	80046b0 <HAL_DMA_Abort_IT+0xc8>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a79      	ldr	r2, [pc, #484]	; (800487c <HAL_DMA_Abort_IT+0x294>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d009      	beq.n	80046b0 <HAL_DMA_Abort_IT+0xc8>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a77      	ldr	r2, [pc, #476]	; (8004880 <HAL_DMA_Abort_IT+0x298>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d004      	beq.n	80046b0 <HAL_DMA_Abort_IT+0xc8>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a76      	ldr	r2, [pc, #472]	; (8004884 <HAL_DMA_Abort_IT+0x29c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d101      	bne.n	80046b4 <HAL_DMA_Abort_IT+0xcc>
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <HAL_DMA_Abort_IT+0xce>
 80046b4:	2300      	movs	r3, #0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d065      	beq.n	8004786 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2204      	movs	r2, #4
 80046be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a60      	ldr	r2, [pc, #384]	; (8004848 <HAL_DMA_Abort_IT+0x260>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d04a      	beq.n	8004762 <HAL_DMA_Abort_IT+0x17a>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a5e      	ldr	r2, [pc, #376]	; (800484c <HAL_DMA_Abort_IT+0x264>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d045      	beq.n	8004762 <HAL_DMA_Abort_IT+0x17a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a5d      	ldr	r2, [pc, #372]	; (8004850 <HAL_DMA_Abort_IT+0x268>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d040      	beq.n	8004762 <HAL_DMA_Abort_IT+0x17a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a5b      	ldr	r2, [pc, #364]	; (8004854 <HAL_DMA_Abort_IT+0x26c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d03b      	beq.n	8004762 <HAL_DMA_Abort_IT+0x17a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a5a      	ldr	r2, [pc, #360]	; (8004858 <HAL_DMA_Abort_IT+0x270>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d036      	beq.n	8004762 <HAL_DMA_Abort_IT+0x17a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a58      	ldr	r2, [pc, #352]	; (800485c <HAL_DMA_Abort_IT+0x274>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d031      	beq.n	8004762 <HAL_DMA_Abort_IT+0x17a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a57      	ldr	r2, [pc, #348]	; (8004860 <HAL_DMA_Abort_IT+0x278>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d02c      	beq.n	8004762 <HAL_DMA_Abort_IT+0x17a>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a55      	ldr	r2, [pc, #340]	; (8004864 <HAL_DMA_Abort_IT+0x27c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d027      	beq.n	8004762 <HAL_DMA_Abort_IT+0x17a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a54      	ldr	r2, [pc, #336]	; (8004868 <HAL_DMA_Abort_IT+0x280>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d022      	beq.n	8004762 <HAL_DMA_Abort_IT+0x17a>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a52      	ldr	r2, [pc, #328]	; (800486c <HAL_DMA_Abort_IT+0x284>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d01d      	beq.n	8004762 <HAL_DMA_Abort_IT+0x17a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a51      	ldr	r2, [pc, #324]	; (8004870 <HAL_DMA_Abort_IT+0x288>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d018      	beq.n	8004762 <HAL_DMA_Abort_IT+0x17a>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a4f      	ldr	r2, [pc, #316]	; (8004874 <HAL_DMA_Abort_IT+0x28c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <HAL_DMA_Abort_IT+0x17a>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a4e      	ldr	r2, [pc, #312]	; (8004878 <HAL_DMA_Abort_IT+0x290>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00e      	beq.n	8004762 <HAL_DMA_Abort_IT+0x17a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a4c      	ldr	r2, [pc, #304]	; (800487c <HAL_DMA_Abort_IT+0x294>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d009      	beq.n	8004762 <HAL_DMA_Abort_IT+0x17a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a4b      	ldr	r2, [pc, #300]	; (8004880 <HAL_DMA_Abort_IT+0x298>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_DMA_Abort_IT+0x17a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a49      	ldr	r2, [pc, #292]	; (8004884 <HAL_DMA_Abort_IT+0x29c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d108      	bne.n	8004774 <HAL_DMA_Abort_IT+0x18c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0201 	bic.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	e147      	b.n	8004a04 <HAL_DMA_Abort_IT+0x41c>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	e13e      	b.n	8004a04 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 020e 	bic.w	r2, r2, #14
 8004794:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a2b      	ldr	r2, [pc, #172]	; (8004848 <HAL_DMA_Abort_IT+0x260>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d04a      	beq.n	8004836 <HAL_DMA_Abort_IT+0x24e>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a29      	ldr	r2, [pc, #164]	; (800484c <HAL_DMA_Abort_IT+0x264>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d045      	beq.n	8004836 <HAL_DMA_Abort_IT+0x24e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a28      	ldr	r2, [pc, #160]	; (8004850 <HAL_DMA_Abort_IT+0x268>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d040      	beq.n	8004836 <HAL_DMA_Abort_IT+0x24e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a26      	ldr	r2, [pc, #152]	; (8004854 <HAL_DMA_Abort_IT+0x26c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d03b      	beq.n	8004836 <HAL_DMA_Abort_IT+0x24e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a25      	ldr	r2, [pc, #148]	; (8004858 <HAL_DMA_Abort_IT+0x270>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d036      	beq.n	8004836 <HAL_DMA_Abort_IT+0x24e>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a23      	ldr	r2, [pc, #140]	; (800485c <HAL_DMA_Abort_IT+0x274>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d031      	beq.n	8004836 <HAL_DMA_Abort_IT+0x24e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a22      	ldr	r2, [pc, #136]	; (8004860 <HAL_DMA_Abort_IT+0x278>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d02c      	beq.n	8004836 <HAL_DMA_Abort_IT+0x24e>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a20      	ldr	r2, [pc, #128]	; (8004864 <HAL_DMA_Abort_IT+0x27c>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d027      	beq.n	8004836 <HAL_DMA_Abort_IT+0x24e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <HAL_DMA_Abort_IT+0x280>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d022      	beq.n	8004836 <HAL_DMA_Abort_IT+0x24e>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a1d      	ldr	r2, [pc, #116]	; (800486c <HAL_DMA_Abort_IT+0x284>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d01d      	beq.n	8004836 <HAL_DMA_Abort_IT+0x24e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a1c      	ldr	r2, [pc, #112]	; (8004870 <HAL_DMA_Abort_IT+0x288>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d018      	beq.n	8004836 <HAL_DMA_Abort_IT+0x24e>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a1a      	ldr	r2, [pc, #104]	; (8004874 <HAL_DMA_Abort_IT+0x28c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <HAL_DMA_Abort_IT+0x24e>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a19      	ldr	r2, [pc, #100]	; (8004878 <HAL_DMA_Abort_IT+0x290>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00e      	beq.n	8004836 <HAL_DMA_Abort_IT+0x24e>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a17      	ldr	r2, [pc, #92]	; (800487c <HAL_DMA_Abort_IT+0x294>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d009      	beq.n	8004836 <HAL_DMA_Abort_IT+0x24e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a16      	ldr	r2, [pc, #88]	; (8004880 <HAL_DMA_Abort_IT+0x298>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d004      	beq.n	8004836 <HAL_DMA_Abort_IT+0x24e>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a14      	ldr	r2, [pc, #80]	; (8004884 <HAL_DMA_Abort_IT+0x29c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d128      	bne.n	8004888 <HAL_DMA_Abort_IT+0x2a0>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0201 	bic.w	r2, r2, #1
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	e027      	b.n	8004898 <HAL_DMA_Abort_IT+0x2b0>
 8004848:	40020010 	.word	0x40020010
 800484c:	40020028 	.word	0x40020028
 8004850:	40020040 	.word	0x40020040
 8004854:	40020058 	.word	0x40020058
 8004858:	40020070 	.word	0x40020070
 800485c:	40020088 	.word	0x40020088
 8004860:	400200a0 	.word	0x400200a0
 8004864:	400200b8 	.word	0x400200b8
 8004868:	40020410 	.word	0x40020410
 800486c:	40020428 	.word	0x40020428
 8004870:	40020440 	.word	0x40020440
 8004874:	40020458 	.word	0x40020458
 8004878:	40020470 	.word	0x40020470
 800487c:	40020488 	.word	0x40020488
 8004880:	400204a0 	.word	0x400204a0
 8004884:	400204b8 	.word	0x400204b8
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 0201 	bic.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a5c      	ldr	r2, [pc, #368]	; (8004a10 <HAL_DMA_Abort_IT+0x428>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d072      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a5b      	ldr	r2, [pc, #364]	; (8004a14 <HAL_DMA_Abort_IT+0x42c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d06d      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a59      	ldr	r2, [pc, #356]	; (8004a18 <HAL_DMA_Abort_IT+0x430>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d068      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a58      	ldr	r2, [pc, #352]	; (8004a1c <HAL_DMA_Abort_IT+0x434>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d063      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a56      	ldr	r2, [pc, #344]	; (8004a20 <HAL_DMA_Abort_IT+0x438>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d05e      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a55      	ldr	r2, [pc, #340]	; (8004a24 <HAL_DMA_Abort_IT+0x43c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d059      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a53      	ldr	r2, [pc, #332]	; (8004a28 <HAL_DMA_Abort_IT+0x440>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d054      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a52      	ldr	r2, [pc, #328]	; (8004a2c <HAL_DMA_Abort_IT+0x444>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d04f      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a50      	ldr	r2, [pc, #320]	; (8004a30 <HAL_DMA_Abort_IT+0x448>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d04a      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a4f      	ldr	r2, [pc, #316]	; (8004a34 <HAL_DMA_Abort_IT+0x44c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d045      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a4d      	ldr	r2, [pc, #308]	; (8004a38 <HAL_DMA_Abort_IT+0x450>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d040      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a4c      	ldr	r2, [pc, #304]	; (8004a3c <HAL_DMA_Abort_IT+0x454>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d03b      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a4a      	ldr	r2, [pc, #296]	; (8004a40 <HAL_DMA_Abort_IT+0x458>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d036      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a49      	ldr	r2, [pc, #292]	; (8004a44 <HAL_DMA_Abort_IT+0x45c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d031      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a47      	ldr	r2, [pc, #284]	; (8004a48 <HAL_DMA_Abort_IT+0x460>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d02c      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a46      	ldr	r2, [pc, #280]	; (8004a4c <HAL_DMA_Abort_IT+0x464>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d027      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a44      	ldr	r2, [pc, #272]	; (8004a50 <HAL_DMA_Abort_IT+0x468>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d022      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a43      	ldr	r2, [pc, #268]	; (8004a54 <HAL_DMA_Abort_IT+0x46c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d01d      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a41      	ldr	r2, [pc, #260]	; (8004a58 <HAL_DMA_Abort_IT+0x470>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d018      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a40      	ldr	r2, [pc, #256]	; (8004a5c <HAL_DMA_Abort_IT+0x474>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d013      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a3e      	ldr	r2, [pc, #248]	; (8004a60 <HAL_DMA_Abort_IT+0x478>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d00e      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a3d      	ldr	r2, [pc, #244]	; (8004a64 <HAL_DMA_Abort_IT+0x47c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d009      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a3b      	ldr	r2, [pc, #236]	; (8004a68 <HAL_DMA_Abort_IT+0x480>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d004      	beq.n	8004988 <HAL_DMA_Abort_IT+0x3a0>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a3a      	ldr	r2, [pc, #232]	; (8004a6c <HAL_DMA_Abort_IT+0x484>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d101      	bne.n	800498c <HAL_DMA_Abort_IT+0x3a4>
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <HAL_DMA_Abort_IT+0x3a6>
 800498c:	2300      	movs	r3, #0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d028      	beq.n	80049e4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	2201      	movs	r2, #1
 80049b2:	409a      	lsls	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80049c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00c      	beq.n	80049e4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80049e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40020010 	.word	0x40020010
 8004a14:	40020028 	.word	0x40020028
 8004a18:	40020040 	.word	0x40020040
 8004a1c:	40020058 	.word	0x40020058
 8004a20:	40020070 	.word	0x40020070
 8004a24:	40020088 	.word	0x40020088
 8004a28:	400200a0 	.word	0x400200a0
 8004a2c:	400200b8 	.word	0x400200b8
 8004a30:	40020410 	.word	0x40020410
 8004a34:	40020428 	.word	0x40020428
 8004a38:	40020440 	.word	0x40020440
 8004a3c:	40020458 	.word	0x40020458
 8004a40:	40020470 	.word	0x40020470
 8004a44:	40020488 	.word	0x40020488
 8004a48:	400204a0 	.word	0x400204a0
 8004a4c:	400204b8 	.word	0x400204b8
 8004a50:	58025408 	.word	0x58025408
 8004a54:	5802541c 	.word	0x5802541c
 8004a58:	58025430 	.word	0x58025430
 8004a5c:	58025444 	.word	0x58025444
 8004a60:	58025458 	.word	0x58025458
 8004a64:	5802546c 	.word	0x5802546c
 8004a68:	58025480 	.word	0x58025480
 8004a6c:	58025494 	.word	0x58025494

08004a70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004a7c:	4b67      	ldr	r3, [pc, #412]	; (8004c1c <HAL_DMA_IRQHandler+0x1ac>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a67      	ldr	r2, [pc, #412]	; (8004c20 <HAL_DMA_IRQHandler+0x1b0>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	0a9b      	lsrs	r3, r3, #10
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a5f      	ldr	r2, [pc, #380]	; (8004c24 <HAL_DMA_IRQHandler+0x1b4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d04a      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xd2>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a5d      	ldr	r2, [pc, #372]	; (8004c28 <HAL_DMA_IRQHandler+0x1b8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d045      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xd2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a5c      	ldr	r2, [pc, #368]	; (8004c2c <HAL_DMA_IRQHandler+0x1bc>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d040      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xd2>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a5a      	ldr	r2, [pc, #360]	; (8004c30 <HAL_DMA_IRQHandler+0x1c0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d03b      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xd2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a59      	ldr	r2, [pc, #356]	; (8004c34 <HAL_DMA_IRQHandler+0x1c4>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d036      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xd2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a57      	ldr	r2, [pc, #348]	; (8004c38 <HAL_DMA_IRQHandler+0x1c8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d031      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xd2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a56      	ldr	r2, [pc, #344]	; (8004c3c <HAL_DMA_IRQHandler+0x1cc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d02c      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xd2>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a54      	ldr	r2, [pc, #336]	; (8004c40 <HAL_DMA_IRQHandler+0x1d0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d027      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xd2>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a53      	ldr	r2, [pc, #332]	; (8004c44 <HAL_DMA_IRQHandler+0x1d4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d022      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xd2>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a51      	ldr	r2, [pc, #324]	; (8004c48 <HAL_DMA_IRQHandler+0x1d8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01d      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xd2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a50      	ldr	r2, [pc, #320]	; (8004c4c <HAL_DMA_IRQHandler+0x1dc>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d018      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xd2>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a4e      	ldr	r2, [pc, #312]	; (8004c50 <HAL_DMA_IRQHandler+0x1e0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d013      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xd2>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a4d      	ldr	r2, [pc, #308]	; (8004c54 <HAL_DMA_IRQHandler+0x1e4>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00e      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xd2>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a4b      	ldr	r2, [pc, #300]	; (8004c58 <HAL_DMA_IRQHandler+0x1e8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xd2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a4a      	ldr	r2, [pc, #296]	; (8004c5c <HAL_DMA_IRQHandler+0x1ec>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <HAL_DMA_IRQHandler+0xd2>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a48      	ldr	r2, [pc, #288]	; (8004c60 <HAL_DMA_IRQHandler+0x1f0>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d101      	bne.n	8004b46 <HAL_DMA_IRQHandler+0xd6>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <HAL_DMA_IRQHandler+0xd8>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 842b 	beq.w	80053a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	2208      	movs	r2, #8
 8004b58:	409a      	lsls	r2, r3
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 80a2 	beq.w	8004ca8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a2e      	ldr	r2, [pc, #184]	; (8004c24 <HAL_DMA_IRQHandler+0x1b4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d04a      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x194>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a2d      	ldr	r2, [pc, #180]	; (8004c28 <HAL_DMA_IRQHandler+0x1b8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d045      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x194>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a2b      	ldr	r2, [pc, #172]	; (8004c2c <HAL_DMA_IRQHandler+0x1bc>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d040      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x194>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2a      	ldr	r2, [pc, #168]	; (8004c30 <HAL_DMA_IRQHandler+0x1c0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d03b      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x194>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a28      	ldr	r2, [pc, #160]	; (8004c34 <HAL_DMA_IRQHandler+0x1c4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d036      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x194>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a27      	ldr	r2, [pc, #156]	; (8004c38 <HAL_DMA_IRQHandler+0x1c8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d031      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x194>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a25      	ldr	r2, [pc, #148]	; (8004c3c <HAL_DMA_IRQHandler+0x1cc>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d02c      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x194>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a24      	ldr	r2, [pc, #144]	; (8004c40 <HAL_DMA_IRQHandler+0x1d0>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d027      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x194>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a22      	ldr	r2, [pc, #136]	; (8004c44 <HAL_DMA_IRQHandler+0x1d4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d022      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x194>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a21      	ldr	r2, [pc, #132]	; (8004c48 <HAL_DMA_IRQHandler+0x1d8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d01d      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x194>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1f      	ldr	r2, [pc, #124]	; (8004c4c <HAL_DMA_IRQHandler+0x1dc>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d018      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x194>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a1e      	ldr	r2, [pc, #120]	; (8004c50 <HAL_DMA_IRQHandler+0x1e0>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d013      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x194>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a1c      	ldr	r2, [pc, #112]	; (8004c54 <HAL_DMA_IRQHandler+0x1e4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00e      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x194>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a1b      	ldr	r2, [pc, #108]	; (8004c58 <HAL_DMA_IRQHandler+0x1e8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d009      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x194>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a19      	ldr	r2, [pc, #100]	; (8004c5c <HAL_DMA_IRQHandler+0x1ec>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d004      	beq.n	8004c04 <HAL_DMA_IRQHandler+0x194>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a18      	ldr	r2, [pc, #96]	; (8004c60 <HAL_DMA_IRQHandler+0x1f0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d12f      	bne.n	8004c64 <HAL_DMA_IRQHandler+0x1f4>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	bf14      	ite	ne
 8004c12:	2301      	movne	r3, #1
 8004c14:	2300      	moveq	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	e02e      	b.n	8004c78 <HAL_DMA_IRQHandler+0x208>
 8004c1a:	bf00      	nop
 8004c1c:	24000000 	.word	0x24000000
 8004c20:	1b4e81b5 	.word	0x1b4e81b5
 8004c24:	40020010 	.word	0x40020010
 8004c28:	40020028 	.word	0x40020028
 8004c2c:	40020040 	.word	0x40020040
 8004c30:	40020058 	.word	0x40020058
 8004c34:	40020070 	.word	0x40020070
 8004c38:	40020088 	.word	0x40020088
 8004c3c:	400200a0 	.word	0x400200a0
 8004c40:	400200b8 	.word	0x400200b8
 8004c44:	40020410 	.word	0x40020410
 8004c48:	40020428 	.word	0x40020428
 8004c4c:	40020440 	.word	0x40020440
 8004c50:	40020458 	.word	0x40020458
 8004c54:	40020470 	.word	0x40020470
 8004c58:	40020488 	.word	0x40020488
 8004c5c:	400204a0 	.word	0x400204a0
 8004c60:	400204b8 	.word	0x400204b8
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bf14      	ite	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	2300      	moveq	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d015      	beq.n	8004ca8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0204 	bic.w	r2, r2, #4
 8004c8a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c90:	f003 031f 	and.w	r3, r3, #31
 8004c94:	2208      	movs	r2, #8
 8004c96:	409a      	lsls	r2, r3
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca0:	f043 0201 	orr.w	r2, r3, #1
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cac:	f003 031f 	and.w	r3, r3, #31
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d06e      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a69      	ldr	r2, [pc, #420]	; (8004e68 <HAL_DMA_IRQHandler+0x3f8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d04a      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x2ee>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a67      	ldr	r2, [pc, #412]	; (8004e6c <HAL_DMA_IRQHandler+0x3fc>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d045      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x2ee>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a66      	ldr	r2, [pc, #408]	; (8004e70 <HAL_DMA_IRQHandler+0x400>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d040      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x2ee>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a64      	ldr	r2, [pc, #400]	; (8004e74 <HAL_DMA_IRQHandler+0x404>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d03b      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x2ee>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a63      	ldr	r2, [pc, #396]	; (8004e78 <HAL_DMA_IRQHandler+0x408>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d036      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x2ee>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a61      	ldr	r2, [pc, #388]	; (8004e7c <HAL_DMA_IRQHandler+0x40c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d031      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x2ee>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a60      	ldr	r2, [pc, #384]	; (8004e80 <HAL_DMA_IRQHandler+0x410>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d02c      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x2ee>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a5e      	ldr	r2, [pc, #376]	; (8004e84 <HAL_DMA_IRQHandler+0x414>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d027      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x2ee>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a5d      	ldr	r2, [pc, #372]	; (8004e88 <HAL_DMA_IRQHandler+0x418>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d022      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x2ee>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a5b      	ldr	r2, [pc, #364]	; (8004e8c <HAL_DMA_IRQHandler+0x41c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d01d      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x2ee>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a5a      	ldr	r2, [pc, #360]	; (8004e90 <HAL_DMA_IRQHandler+0x420>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d018      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x2ee>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a58      	ldr	r2, [pc, #352]	; (8004e94 <HAL_DMA_IRQHandler+0x424>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d013      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x2ee>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a57      	ldr	r2, [pc, #348]	; (8004e98 <HAL_DMA_IRQHandler+0x428>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00e      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x2ee>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a55      	ldr	r2, [pc, #340]	; (8004e9c <HAL_DMA_IRQHandler+0x42c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d009      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x2ee>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a54      	ldr	r2, [pc, #336]	; (8004ea0 <HAL_DMA_IRQHandler+0x430>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d004      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x2ee>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a52      	ldr	r2, [pc, #328]	; (8004ea4 <HAL_DMA_IRQHandler+0x434>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d10a      	bne.n	8004d74 <HAL_DMA_IRQHandler+0x304>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	bf14      	ite	ne
 8004d6c:	2301      	movne	r3, #1
 8004d6e:	2300      	moveq	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	e003      	b.n	8004d7c <HAL_DMA_IRQHandler+0x30c>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00d      	beq.n	8004d9c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d84:	f003 031f 	and.w	r3, r3, #31
 8004d88:	2201      	movs	r2, #1
 8004d8a:	409a      	lsls	r2, r3
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d94:	f043 0202 	orr.w	r2, r3, #2
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da0:	f003 031f 	and.w	r3, r3, #31
 8004da4:	2204      	movs	r2, #4
 8004da6:	409a      	lsls	r2, r3
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	4013      	ands	r3, r2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 808f 	beq.w	8004ed0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a2c      	ldr	r2, [pc, #176]	; (8004e68 <HAL_DMA_IRQHandler+0x3f8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d04a      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x3e2>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a2a      	ldr	r2, [pc, #168]	; (8004e6c <HAL_DMA_IRQHandler+0x3fc>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d045      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x3e2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a29      	ldr	r2, [pc, #164]	; (8004e70 <HAL_DMA_IRQHandler+0x400>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d040      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x3e2>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a27      	ldr	r2, [pc, #156]	; (8004e74 <HAL_DMA_IRQHandler+0x404>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d03b      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x3e2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a26      	ldr	r2, [pc, #152]	; (8004e78 <HAL_DMA_IRQHandler+0x408>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d036      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x3e2>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a24      	ldr	r2, [pc, #144]	; (8004e7c <HAL_DMA_IRQHandler+0x40c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d031      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x3e2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a23      	ldr	r2, [pc, #140]	; (8004e80 <HAL_DMA_IRQHandler+0x410>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d02c      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x3e2>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a21      	ldr	r2, [pc, #132]	; (8004e84 <HAL_DMA_IRQHandler+0x414>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d027      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x3e2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a20      	ldr	r2, [pc, #128]	; (8004e88 <HAL_DMA_IRQHandler+0x418>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d022      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x3e2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1e      	ldr	r2, [pc, #120]	; (8004e8c <HAL_DMA_IRQHandler+0x41c>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d01d      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x3e2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a1d      	ldr	r2, [pc, #116]	; (8004e90 <HAL_DMA_IRQHandler+0x420>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d018      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x3e2>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1b      	ldr	r2, [pc, #108]	; (8004e94 <HAL_DMA_IRQHandler+0x424>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d013      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x3e2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a1a      	ldr	r2, [pc, #104]	; (8004e98 <HAL_DMA_IRQHandler+0x428>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00e      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x3e2>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a18      	ldr	r2, [pc, #96]	; (8004e9c <HAL_DMA_IRQHandler+0x42c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d009      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x3e2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a17      	ldr	r2, [pc, #92]	; (8004ea0 <HAL_DMA_IRQHandler+0x430>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d004      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x3e2>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a15      	ldr	r2, [pc, #84]	; (8004ea4 <HAL_DMA_IRQHandler+0x434>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d12a      	bne.n	8004ea8 <HAL_DMA_IRQHandler+0x438>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0302 	and.w	r3, r3, #2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	bf14      	ite	ne
 8004e60:	2301      	movne	r3, #1
 8004e62:	2300      	moveq	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	e023      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x440>
 8004e68:	40020010 	.word	0x40020010
 8004e6c:	40020028 	.word	0x40020028
 8004e70:	40020040 	.word	0x40020040
 8004e74:	40020058 	.word	0x40020058
 8004e78:	40020070 	.word	0x40020070
 8004e7c:	40020088 	.word	0x40020088
 8004e80:	400200a0 	.word	0x400200a0
 8004e84:	400200b8 	.word	0x400200b8
 8004e88:	40020410 	.word	0x40020410
 8004e8c:	40020428 	.word	0x40020428
 8004e90:	40020440 	.word	0x40020440
 8004e94:	40020458 	.word	0x40020458
 8004e98:	40020470 	.word	0x40020470
 8004e9c:	40020488 	.word	0x40020488
 8004ea0:	400204a0 	.word	0x400204a0
 8004ea4:	400204b8 	.word	0x400204b8
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d00d      	beq.n	8004ed0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb8:	f003 031f 	and.w	r3, r3, #31
 8004ebc:	2204      	movs	r2, #4
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec8:	f043 0204 	orr.w	r2, r3, #4
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	2210      	movs	r2, #16
 8004eda:	409a      	lsls	r2, r3
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 80a6 	beq.w	8005032 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a85      	ldr	r2, [pc, #532]	; (8005100 <HAL_DMA_IRQHandler+0x690>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d04a      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x516>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a83      	ldr	r2, [pc, #524]	; (8005104 <HAL_DMA_IRQHandler+0x694>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d045      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x516>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a82      	ldr	r2, [pc, #520]	; (8005108 <HAL_DMA_IRQHandler+0x698>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d040      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x516>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a80      	ldr	r2, [pc, #512]	; (800510c <HAL_DMA_IRQHandler+0x69c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d03b      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x516>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a7f      	ldr	r2, [pc, #508]	; (8005110 <HAL_DMA_IRQHandler+0x6a0>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d036      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x516>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a7d      	ldr	r2, [pc, #500]	; (8005114 <HAL_DMA_IRQHandler+0x6a4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d031      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x516>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a7c      	ldr	r2, [pc, #496]	; (8005118 <HAL_DMA_IRQHandler+0x6a8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d02c      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x516>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a7a      	ldr	r2, [pc, #488]	; (800511c <HAL_DMA_IRQHandler+0x6ac>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d027      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x516>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a79      	ldr	r2, [pc, #484]	; (8005120 <HAL_DMA_IRQHandler+0x6b0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d022      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x516>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a77      	ldr	r2, [pc, #476]	; (8005124 <HAL_DMA_IRQHandler+0x6b4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d01d      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x516>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a76      	ldr	r2, [pc, #472]	; (8005128 <HAL_DMA_IRQHandler+0x6b8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d018      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x516>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a74      	ldr	r2, [pc, #464]	; (800512c <HAL_DMA_IRQHandler+0x6bc>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d013      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x516>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a73      	ldr	r2, [pc, #460]	; (8005130 <HAL_DMA_IRQHandler+0x6c0>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00e      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x516>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a71      	ldr	r2, [pc, #452]	; (8005134 <HAL_DMA_IRQHandler+0x6c4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d009      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x516>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a70      	ldr	r2, [pc, #448]	; (8005138 <HAL_DMA_IRQHandler+0x6c8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d004      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x516>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a6e      	ldr	r2, [pc, #440]	; (800513c <HAL_DMA_IRQHandler+0x6cc>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d10a      	bne.n	8004f9c <HAL_DMA_IRQHandler+0x52c>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bf14      	ite	ne
 8004f94:	2301      	movne	r3, #1
 8004f96:	2300      	moveq	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	e009      	b.n	8004fb0 <HAL_DMA_IRQHandler+0x540>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	bf14      	ite	ne
 8004faa:	2301      	movne	r3, #1
 8004fac:	2300      	moveq	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d03e      	beq.n	8005032 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	2210      	movs	r2, #16
 8004fbe:	409a      	lsls	r2, r3
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d018      	beq.n	8005004 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d108      	bne.n	8004ff2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d024      	beq.n	8005032 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	4798      	blx	r3
 8004ff0:	e01f      	b.n	8005032 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01b      	beq.n	8005032 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	4798      	blx	r3
 8005002:	e016      	b.n	8005032 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500e:	2b00      	cmp	r3, #0
 8005010:	d107      	bne.n	8005022 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0208 	bic.w	r2, r2, #8
 8005020:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005036:	f003 031f 	and.w	r3, r3, #31
 800503a:	2220      	movs	r2, #32
 800503c:	409a      	lsls	r2, r3
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	4013      	ands	r3, r2
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 8110 	beq.w	8005268 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a2c      	ldr	r2, [pc, #176]	; (8005100 <HAL_DMA_IRQHandler+0x690>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d04a      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x678>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a2b      	ldr	r2, [pc, #172]	; (8005104 <HAL_DMA_IRQHandler+0x694>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d045      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x678>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a29      	ldr	r2, [pc, #164]	; (8005108 <HAL_DMA_IRQHandler+0x698>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d040      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x678>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a28      	ldr	r2, [pc, #160]	; (800510c <HAL_DMA_IRQHandler+0x69c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d03b      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x678>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a26      	ldr	r2, [pc, #152]	; (8005110 <HAL_DMA_IRQHandler+0x6a0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d036      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x678>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a25      	ldr	r2, [pc, #148]	; (8005114 <HAL_DMA_IRQHandler+0x6a4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d031      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x678>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a23      	ldr	r2, [pc, #140]	; (8005118 <HAL_DMA_IRQHandler+0x6a8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d02c      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x678>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a22      	ldr	r2, [pc, #136]	; (800511c <HAL_DMA_IRQHandler+0x6ac>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d027      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x678>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a20      	ldr	r2, [pc, #128]	; (8005120 <HAL_DMA_IRQHandler+0x6b0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d022      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x678>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1f      	ldr	r2, [pc, #124]	; (8005124 <HAL_DMA_IRQHandler+0x6b4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d01d      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x678>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1d      	ldr	r2, [pc, #116]	; (8005128 <HAL_DMA_IRQHandler+0x6b8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d018      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x678>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1c      	ldr	r2, [pc, #112]	; (800512c <HAL_DMA_IRQHandler+0x6bc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d013      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x678>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1a      	ldr	r2, [pc, #104]	; (8005130 <HAL_DMA_IRQHandler+0x6c0>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d00e      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x678>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a19      	ldr	r2, [pc, #100]	; (8005134 <HAL_DMA_IRQHandler+0x6c4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d009      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x678>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a17      	ldr	r2, [pc, #92]	; (8005138 <HAL_DMA_IRQHandler+0x6c8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <HAL_DMA_IRQHandler+0x678>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a16      	ldr	r2, [pc, #88]	; (800513c <HAL_DMA_IRQHandler+0x6cc>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d12b      	bne.n	8005140 <HAL_DMA_IRQHandler+0x6d0>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0310 	and.w	r3, r3, #16
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	bf14      	ite	ne
 80050f6:	2301      	movne	r3, #1
 80050f8:	2300      	moveq	r3, #0
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	e02a      	b.n	8005154 <HAL_DMA_IRQHandler+0x6e4>
 80050fe:	bf00      	nop
 8005100:	40020010 	.word	0x40020010
 8005104:	40020028 	.word	0x40020028
 8005108:	40020040 	.word	0x40020040
 800510c:	40020058 	.word	0x40020058
 8005110:	40020070 	.word	0x40020070
 8005114:	40020088 	.word	0x40020088
 8005118:	400200a0 	.word	0x400200a0
 800511c:	400200b8 	.word	0x400200b8
 8005120:	40020410 	.word	0x40020410
 8005124:	40020428 	.word	0x40020428
 8005128:	40020440 	.word	0x40020440
 800512c:	40020458 	.word	0x40020458
 8005130:	40020470 	.word	0x40020470
 8005134:	40020488 	.word	0x40020488
 8005138:	400204a0 	.word	0x400204a0
 800513c:	400204b8 	.word	0x400204b8
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	bf14      	ite	ne
 800514e:	2301      	movne	r3, #1
 8005150:	2300      	moveq	r3, #0
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 8087 	beq.w	8005268 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515e:	f003 031f 	and.w	r3, r3, #31
 8005162:	2220      	movs	r2, #32
 8005164:	409a      	lsls	r2, r3
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b04      	cmp	r3, #4
 8005174:	d139      	bne.n	80051ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0216 	bic.w	r2, r2, #22
 8005184:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695a      	ldr	r2, [r3, #20]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005194:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <HAL_DMA_IRQHandler+0x736>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d007      	beq.n	80051b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0208 	bic.w	r2, r2, #8
 80051b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ba:	f003 031f 	and.w	r3, r3, #31
 80051be:	223f      	movs	r2, #63	; 0x3f
 80051c0:	409a      	lsls	r2, r3
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 834a 	beq.w	8005874 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	4798      	blx	r3
          }
          return;
 80051e8:	e344      	b.n	8005874 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d018      	beq.n	800522a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d108      	bne.n	8005218 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520a:	2b00      	cmp	r3, #0
 800520c:	d02c      	beq.n	8005268 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	4798      	blx	r3
 8005216:	e027      	b.n	8005268 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521c:	2b00      	cmp	r3, #0
 800521e:	d023      	beq.n	8005268 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	4798      	blx	r3
 8005228:	e01e      	b.n	8005268 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10f      	bne.n	8005258 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0210 	bic.w	r2, r2, #16
 8005246:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 8306 	beq.w	800587e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	f000 8088 	beq.w	8005390 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2204      	movs	r2, #4
 8005284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a7a      	ldr	r2, [pc, #488]	; (8005478 <HAL_DMA_IRQHandler+0xa08>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d04a      	beq.n	8005328 <HAL_DMA_IRQHandler+0x8b8>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a79      	ldr	r2, [pc, #484]	; (800547c <HAL_DMA_IRQHandler+0xa0c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d045      	beq.n	8005328 <HAL_DMA_IRQHandler+0x8b8>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a77      	ldr	r2, [pc, #476]	; (8005480 <HAL_DMA_IRQHandler+0xa10>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d040      	beq.n	8005328 <HAL_DMA_IRQHandler+0x8b8>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a76      	ldr	r2, [pc, #472]	; (8005484 <HAL_DMA_IRQHandler+0xa14>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d03b      	beq.n	8005328 <HAL_DMA_IRQHandler+0x8b8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a74      	ldr	r2, [pc, #464]	; (8005488 <HAL_DMA_IRQHandler+0xa18>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d036      	beq.n	8005328 <HAL_DMA_IRQHandler+0x8b8>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a73      	ldr	r2, [pc, #460]	; (800548c <HAL_DMA_IRQHandler+0xa1c>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d031      	beq.n	8005328 <HAL_DMA_IRQHandler+0x8b8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a71      	ldr	r2, [pc, #452]	; (8005490 <HAL_DMA_IRQHandler+0xa20>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d02c      	beq.n	8005328 <HAL_DMA_IRQHandler+0x8b8>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a70      	ldr	r2, [pc, #448]	; (8005494 <HAL_DMA_IRQHandler+0xa24>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d027      	beq.n	8005328 <HAL_DMA_IRQHandler+0x8b8>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a6e      	ldr	r2, [pc, #440]	; (8005498 <HAL_DMA_IRQHandler+0xa28>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d022      	beq.n	8005328 <HAL_DMA_IRQHandler+0x8b8>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a6d      	ldr	r2, [pc, #436]	; (800549c <HAL_DMA_IRQHandler+0xa2c>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d01d      	beq.n	8005328 <HAL_DMA_IRQHandler+0x8b8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a6b      	ldr	r2, [pc, #428]	; (80054a0 <HAL_DMA_IRQHandler+0xa30>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d018      	beq.n	8005328 <HAL_DMA_IRQHandler+0x8b8>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a6a      	ldr	r2, [pc, #424]	; (80054a4 <HAL_DMA_IRQHandler+0xa34>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d013      	beq.n	8005328 <HAL_DMA_IRQHandler+0x8b8>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a68      	ldr	r2, [pc, #416]	; (80054a8 <HAL_DMA_IRQHandler+0xa38>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00e      	beq.n	8005328 <HAL_DMA_IRQHandler+0x8b8>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a67      	ldr	r2, [pc, #412]	; (80054ac <HAL_DMA_IRQHandler+0xa3c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d009      	beq.n	8005328 <HAL_DMA_IRQHandler+0x8b8>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a65      	ldr	r2, [pc, #404]	; (80054b0 <HAL_DMA_IRQHandler+0xa40>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d004      	beq.n	8005328 <HAL_DMA_IRQHandler+0x8b8>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a64      	ldr	r2, [pc, #400]	; (80054b4 <HAL_DMA_IRQHandler+0xa44>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d108      	bne.n	800533a <HAL_DMA_IRQHandler+0x8ca>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f022 0201 	bic.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	e007      	b.n	800534a <HAL_DMA_IRQHandler+0x8da>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0201 	bic.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3301      	adds	r3, #1
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005352:	429a      	cmp	r2, r3
 8005354:	d307      	bcc.n	8005366 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f2      	bne.n	800534a <HAL_DMA_IRQHandler+0x8da>
 8005364:	e000      	b.n	8005368 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005366:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d004      	beq.n	8005380 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2203      	movs	r2, #3
 800537a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800537e:	e003      	b.n	8005388 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005394:	2b00      	cmp	r3, #0
 8005396:	f000 8272 	beq.w	800587e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	4798      	blx	r3
 80053a2:	e26c      	b.n	800587e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a43      	ldr	r2, [pc, #268]	; (80054b8 <HAL_DMA_IRQHandler+0xa48>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d022      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x984>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a42      	ldr	r2, [pc, #264]	; (80054bc <HAL_DMA_IRQHandler+0xa4c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d01d      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x984>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a40      	ldr	r2, [pc, #256]	; (80054c0 <HAL_DMA_IRQHandler+0xa50>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d018      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x984>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a3f      	ldr	r2, [pc, #252]	; (80054c4 <HAL_DMA_IRQHandler+0xa54>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d013      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x984>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a3d      	ldr	r2, [pc, #244]	; (80054c8 <HAL_DMA_IRQHandler+0xa58>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00e      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x984>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a3c      	ldr	r2, [pc, #240]	; (80054cc <HAL_DMA_IRQHandler+0xa5c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d009      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x984>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a3a      	ldr	r2, [pc, #232]	; (80054d0 <HAL_DMA_IRQHandler+0xa60>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d004      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x984>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a39      	ldr	r2, [pc, #228]	; (80054d4 <HAL_DMA_IRQHandler+0xa64>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d101      	bne.n	80053f8 <HAL_DMA_IRQHandler+0x988>
 80053f4:	2301      	movs	r3, #1
 80053f6:	e000      	b.n	80053fa <HAL_DMA_IRQHandler+0x98a>
 80053f8:	2300      	movs	r3, #0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 823f 	beq.w	800587e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540c:	f003 031f 	and.w	r3, r3, #31
 8005410:	2204      	movs	r2, #4
 8005412:	409a      	lsls	r2, r3
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	4013      	ands	r3, r2
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 80cd 	beq.w	80055b8 <HAL_DMA_IRQHandler+0xb48>
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 80c7 	beq.w	80055b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542e:	f003 031f 	and.w	r3, r3, #31
 8005432:	2204      	movs	r2, #4
 8005434:	409a      	lsls	r2, r3
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d049      	beq.n	80054d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d109      	bne.n	8005462 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 8210 	beq.w	8005878 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005460:	e20a      	b.n	8005878 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 8206 	beq.w	8005878 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005474:	e200      	b.n	8005878 <HAL_DMA_IRQHandler+0xe08>
 8005476:	bf00      	nop
 8005478:	40020010 	.word	0x40020010
 800547c:	40020028 	.word	0x40020028
 8005480:	40020040 	.word	0x40020040
 8005484:	40020058 	.word	0x40020058
 8005488:	40020070 	.word	0x40020070
 800548c:	40020088 	.word	0x40020088
 8005490:	400200a0 	.word	0x400200a0
 8005494:	400200b8 	.word	0x400200b8
 8005498:	40020410 	.word	0x40020410
 800549c:	40020428 	.word	0x40020428
 80054a0:	40020440 	.word	0x40020440
 80054a4:	40020458 	.word	0x40020458
 80054a8:	40020470 	.word	0x40020470
 80054ac:	40020488 	.word	0x40020488
 80054b0:	400204a0 	.word	0x400204a0
 80054b4:	400204b8 	.word	0x400204b8
 80054b8:	58025408 	.word	0x58025408
 80054bc:	5802541c 	.word	0x5802541c
 80054c0:	58025430 	.word	0x58025430
 80054c4:	58025444 	.word	0x58025444
 80054c8:	58025458 	.word	0x58025458
 80054cc:	5802546c 	.word	0x5802546c
 80054d0:	58025480 	.word	0x58025480
 80054d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d160      	bne.n	80055a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a8c      	ldr	r2, [pc, #560]	; (8005718 <HAL_DMA_IRQHandler+0xca8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d04a      	beq.n	8005582 <HAL_DMA_IRQHandler+0xb12>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a8a      	ldr	r2, [pc, #552]	; (800571c <HAL_DMA_IRQHandler+0xcac>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d045      	beq.n	8005582 <HAL_DMA_IRQHandler+0xb12>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a89      	ldr	r2, [pc, #548]	; (8005720 <HAL_DMA_IRQHandler+0xcb0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d040      	beq.n	8005582 <HAL_DMA_IRQHandler+0xb12>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a87      	ldr	r2, [pc, #540]	; (8005724 <HAL_DMA_IRQHandler+0xcb4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d03b      	beq.n	8005582 <HAL_DMA_IRQHandler+0xb12>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a86      	ldr	r2, [pc, #536]	; (8005728 <HAL_DMA_IRQHandler+0xcb8>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d036      	beq.n	8005582 <HAL_DMA_IRQHandler+0xb12>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a84      	ldr	r2, [pc, #528]	; (800572c <HAL_DMA_IRQHandler+0xcbc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d031      	beq.n	8005582 <HAL_DMA_IRQHandler+0xb12>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a83      	ldr	r2, [pc, #524]	; (8005730 <HAL_DMA_IRQHandler+0xcc0>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d02c      	beq.n	8005582 <HAL_DMA_IRQHandler+0xb12>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a81      	ldr	r2, [pc, #516]	; (8005734 <HAL_DMA_IRQHandler+0xcc4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d027      	beq.n	8005582 <HAL_DMA_IRQHandler+0xb12>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a80      	ldr	r2, [pc, #512]	; (8005738 <HAL_DMA_IRQHandler+0xcc8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d022      	beq.n	8005582 <HAL_DMA_IRQHandler+0xb12>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a7e      	ldr	r2, [pc, #504]	; (800573c <HAL_DMA_IRQHandler+0xccc>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d01d      	beq.n	8005582 <HAL_DMA_IRQHandler+0xb12>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a7d      	ldr	r2, [pc, #500]	; (8005740 <HAL_DMA_IRQHandler+0xcd0>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d018      	beq.n	8005582 <HAL_DMA_IRQHandler+0xb12>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a7b      	ldr	r2, [pc, #492]	; (8005744 <HAL_DMA_IRQHandler+0xcd4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d013      	beq.n	8005582 <HAL_DMA_IRQHandler+0xb12>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a7a      	ldr	r2, [pc, #488]	; (8005748 <HAL_DMA_IRQHandler+0xcd8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00e      	beq.n	8005582 <HAL_DMA_IRQHandler+0xb12>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a78      	ldr	r2, [pc, #480]	; (800574c <HAL_DMA_IRQHandler+0xcdc>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d009      	beq.n	8005582 <HAL_DMA_IRQHandler+0xb12>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a77      	ldr	r2, [pc, #476]	; (8005750 <HAL_DMA_IRQHandler+0xce0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d004      	beq.n	8005582 <HAL_DMA_IRQHandler+0xb12>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a75      	ldr	r2, [pc, #468]	; (8005754 <HAL_DMA_IRQHandler+0xce4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d108      	bne.n	8005594 <HAL_DMA_IRQHandler+0xb24>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0208 	bic.w	r2, r2, #8
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	e007      	b.n	80055a4 <HAL_DMA_IRQHandler+0xb34>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0204 	bic.w	r2, r2, #4
 80055a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 8165 	beq.w	8005878 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055b6:	e15f      	b.n	8005878 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055bc:	f003 031f 	and.w	r3, r3, #31
 80055c0:	2202      	movs	r2, #2
 80055c2:	409a      	lsls	r2, r3
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 80c5 	beq.w	8005758 <HAL_DMA_IRQHandler+0xce8>
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 80bf 	beq.w	8005758 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	2202      	movs	r2, #2
 80055e4:	409a      	lsls	r2, r3
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d018      	beq.n	8005626 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d109      	bne.n	8005612 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 813a 	beq.w	800587c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005610:	e134      	b.n	800587c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 8130 	beq.w	800587c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005624:	e12a      	b.n	800587c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	d168      	bne.n	8005702 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a38      	ldr	r2, [pc, #224]	; (8005718 <HAL_DMA_IRQHandler+0xca8>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d04a      	beq.n	80056d0 <HAL_DMA_IRQHandler+0xc60>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a37      	ldr	r2, [pc, #220]	; (800571c <HAL_DMA_IRQHandler+0xcac>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d045      	beq.n	80056d0 <HAL_DMA_IRQHandler+0xc60>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a35      	ldr	r2, [pc, #212]	; (8005720 <HAL_DMA_IRQHandler+0xcb0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d040      	beq.n	80056d0 <HAL_DMA_IRQHandler+0xc60>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a34      	ldr	r2, [pc, #208]	; (8005724 <HAL_DMA_IRQHandler+0xcb4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d03b      	beq.n	80056d0 <HAL_DMA_IRQHandler+0xc60>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a32      	ldr	r2, [pc, #200]	; (8005728 <HAL_DMA_IRQHandler+0xcb8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d036      	beq.n	80056d0 <HAL_DMA_IRQHandler+0xc60>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a31      	ldr	r2, [pc, #196]	; (800572c <HAL_DMA_IRQHandler+0xcbc>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d031      	beq.n	80056d0 <HAL_DMA_IRQHandler+0xc60>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a2f      	ldr	r2, [pc, #188]	; (8005730 <HAL_DMA_IRQHandler+0xcc0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d02c      	beq.n	80056d0 <HAL_DMA_IRQHandler+0xc60>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a2e      	ldr	r2, [pc, #184]	; (8005734 <HAL_DMA_IRQHandler+0xcc4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d027      	beq.n	80056d0 <HAL_DMA_IRQHandler+0xc60>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a2c      	ldr	r2, [pc, #176]	; (8005738 <HAL_DMA_IRQHandler+0xcc8>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d022      	beq.n	80056d0 <HAL_DMA_IRQHandler+0xc60>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a2b      	ldr	r2, [pc, #172]	; (800573c <HAL_DMA_IRQHandler+0xccc>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d01d      	beq.n	80056d0 <HAL_DMA_IRQHandler+0xc60>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a29      	ldr	r2, [pc, #164]	; (8005740 <HAL_DMA_IRQHandler+0xcd0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d018      	beq.n	80056d0 <HAL_DMA_IRQHandler+0xc60>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a28      	ldr	r2, [pc, #160]	; (8005744 <HAL_DMA_IRQHandler+0xcd4>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d013      	beq.n	80056d0 <HAL_DMA_IRQHandler+0xc60>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a26      	ldr	r2, [pc, #152]	; (8005748 <HAL_DMA_IRQHandler+0xcd8>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00e      	beq.n	80056d0 <HAL_DMA_IRQHandler+0xc60>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a25      	ldr	r2, [pc, #148]	; (800574c <HAL_DMA_IRQHandler+0xcdc>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d009      	beq.n	80056d0 <HAL_DMA_IRQHandler+0xc60>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a23      	ldr	r2, [pc, #140]	; (8005750 <HAL_DMA_IRQHandler+0xce0>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d004      	beq.n	80056d0 <HAL_DMA_IRQHandler+0xc60>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a22      	ldr	r2, [pc, #136]	; (8005754 <HAL_DMA_IRQHandler+0xce4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d108      	bne.n	80056e2 <HAL_DMA_IRQHandler+0xc72>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0214 	bic.w	r2, r2, #20
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	e007      	b.n	80056f2 <HAL_DMA_IRQHandler+0xc82>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 020a 	bic.w	r2, r2, #10
 80056f0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 80b8 	beq.w	800587c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005714:	e0b2      	b.n	800587c <HAL_DMA_IRQHandler+0xe0c>
 8005716:	bf00      	nop
 8005718:	40020010 	.word	0x40020010
 800571c:	40020028 	.word	0x40020028
 8005720:	40020040 	.word	0x40020040
 8005724:	40020058 	.word	0x40020058
 8005728:	40020070 	.word	0x40020070
 800572c:	40020088 	.word	0x40020088
 8005730:	400200a0 	.word	0x400200a0
 8005734:	400200b8 	.word	0x400200b8
 8005738:	40020410 	.word	0x40020410
 800573c:	40020428 	.word	0x40020428
 8005740:	40020440 	.word	0x40020440
 8005744:	40020458 	.word	0x40020458
 8005748:	40020470 	.word	0x40020470
 800574c:	40020488 	.word	0x40020488
 8005750:	400204a0 	.word	0x400204a0
 8005754:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800575c:	f003 031f 	and.w	r3, r3, #31
 8005760:	2208      	movs	r2, #8
 8005762:	409a      	lsls	r2, r3
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	4013      	ands	r3, r2
 8005768:	2b00      	cmp	r3, #0
 800576a:	f000 8088 	beq.w	800587e <HAL_DMA_IRQHandler+0xe0e>
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f003 0308 	and.w	r3, r3, #8
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8082 	beq.w	800587e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a41      	ldr	r2, [pc, #260]	; (8005884 <HAL_DMA_IRQHandler+0xe14>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d04a      	beq.n	800581a <HAL_DMA_IRQHandler+0xdaa>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a3f      	ldr	r2, [pc, #252]	; (8005888 <HAL_DMA_IRQHandler+0xe18>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d045      	beq.n	800581a <HAL_DMA_IRQHandler+0xdaa>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a3e      	ldr	r2, [pc, #248]	; (800588c <HAL_DMA_IRQHandler+0xe1c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d040      	beq.n	800581a <HAL_DMA_IRQHandler+0xdaa>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a3c      	ldr	r2, [pc, #240]	; (8005890 <HAL_DMA_IRQHandler+0xe20>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d03b      	beq.n	800581a <HAL_DMA_IRQHandler+0xdaa>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a3b      	ldr	r2, [pc, #236]	; (8005894 <HAL_DMA_IRQHandler+0xe24>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d036      	beq.n	800581a <HAL_DMA_IRQHandler+0xdaa>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a39      	ldr	r2, [pc, #228]	; (8005898 <HAL_DMA_IRQHandler+0xe28>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d031      	beq.n	800581a <HAL_DMA_IRQHandler+0xdaa>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a38      	ldr	r2, [pc, #224]	; (800589c <HAL_DMA_IRQHandler+0xe2c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d02c      	beq.n	800581a <HAL_DMA_IRQHandler+0xdaa>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a36      	ldr	r2, [pc, #216]	; (80058a0 <HAL_DMA_IRQHandler+0xe30>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d027      	beq.n	800581a <HAL_DMA_IRQHandler+0xdaa>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a35      	ldr	r2, [pc, #212]	; (80058a4 <HAL_DMA_IRQHandler+0xe34>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d022      	beq.n	800581a <HAL_DMA_IRQHandler+0xdaa>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a33      	ldr	r2, [pc, #204]	; (80058a8 <HAL_DMA_IRQHandler+0xe38>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d01d      	beq.n	800581a <HAL_DMA_IRQHandler+0xdaa>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a32      	ldr	r2, [pc, #200]	; (80058ac <HAL_DMA_IRQHandler+0xe3c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d018      	beq.n	800581a <HAL_DMA_IRQHandler+0xdaa>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a30      	ldr	r2, [pc, #192]	; (80058b0 <HAL_DMA_IRQHandler+0xe40>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d013      	beq.n	800581a <HAL_DMA_IRQHandler+0xdaa>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a2f      	ldr	r2, [pc, #188]	; (80058b4 <HAL_DMA_IRQHandler+0xe44>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00e      	beq.n	800581a <HAL_DMA_IRQHandler+0xdaa>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a2d      	ldr	r2, [pc, #180]	; (80058b8 <HAL_DMA_IRQHandler+0xe48>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d009      	beq.n	800581a <HAL_DMA_IRQHandler+0xdaa>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a2c      	ldr	r2, [pc, #176]	; (80058bc <HAL_DMA_IRQHandler+0xe4c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d004      	beq.n	800581a <HAL_DMA_IRQHandler+0xdaa>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a2a      	ldr	r2, [pc, #168]	; (80058c0 <HAL_DMA_IRQHandler+0xe50>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d108      	bne.n	800582c <HAL_DMA_IRQHandler+0xdbc>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 021c 	bic.w	r2, r2, #28
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	e007      	b.n	800583c <HAL_DMA_IRQHandler+0xdcc>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 020e 	bic.w	r2, r2, #14
 800583a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005840:	f003 031f 	and.w	r3, r3, #31
 8005844:	2201      	movs	r2, #1
 8005846:	409a      	lsls	r2, r3
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005866:	2b00      	cmp	r3, #0
 8005868:	d009      	beq.n	800587e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	4798      	blx	r3
 8005872:	e004      	b.n	800587e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005874:	bf00      	nop
 8005876:	e002      	b.n	800587e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005878:	bf00      	nop
 800587a:	e000      	b.n	800587e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800587c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800587e:	3728      	adds	r7, #40	; 0x28
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40020010 	.word	0x40020010
 8005888:	40020028 	.word	0x40020028
 800588c:	40020040 	.word	0x40020040
 8005890:	40020058 	.word	0x40020058
 8005894:	40020070 	.word	0x40020070
 8005898:	40020088 	.word	0x40020088
 800589c:	400200a0 	.word	0x400200a0
 80058a0:	400200b8 	.word	0x400200b8
 80058a4:	40020410 	.word	0x40020410
 80058a8:	40020428 	.word	0x40020428
 80058ac:	40020440 	.word	0x40020440
 80058b0:	40020458 	.word	0x40020458
 80058b4:	40020470 	.word	0x40020470
 80058b8:	40020488 	.word	0x40020488
 80058bc:	400204a0 	.word	0x400204a0
 80058c0:	400204b8 	.word	0x400204b8

080058c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a42      	ldr	r2, [pc, #264]	; (80059dc <DMA_CalcBaseAndBitshift+0x118>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d04a      	beq.n	800596c <DMA_CalcBaseAndBitshift+0xa8>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a41      	ldr	r2, [pc, #260]	; (80059e0 <DMA_CalcBaseAndBitshift+0x11c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d045      	beq.n	800596c <DMA_CalcBaseAndBitshift+0xa8>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a3f      	ldr	r2, [pc, #252]	; (80059e4 <DMA_CalcBaseAndBitshift+0x120>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d040      	beq.n	800596c <DMA_CalcBaseAndBitshift+0xa8>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a3e      	ldr	r2, [pc, #248]	; (80059e8 <DMA_CalcBaseAndBitshift+0x124>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d03b      	beq.n	800596c <DMA_CalcBaseAndBitshift+0xa8>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a3c      	ldr	r2, [pc, #240]	; (80059ec <DMA_CalcBaseAndBitshift+0x128>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d036      	beq.n	800596c <DMA_CalcBaseAndBitshift+0xa8>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a3b      	ldr	r2, [pc, #236]	; (80059f0 <DMA_CalcBaseAndBitshift+0x12c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d031      	beq.n	800596c <DMA_CalcBaseAndBitshift+0xa8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a39      	ldr	r2, [pc, #228]	; (80059f4 <DMA_CalcBaseAndBitshift+0x130>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d02c      	beq.n	800596c <DMA_CalcBaseAndBitshift+0xa8>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a38      	ldr	r2, [pc, #224]	; (80059f8 <DMA_CalcBaseAndBitshift+0x134>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d027      	beq.n	800596c <DMA_CalcBaseAndBitshift+0xa8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a36      	ldr	r2, [pc, #216]	; (80059fc <DMA_CalcBaseAndBitshift+0x138>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d022      	beq.n	800596c <DMA_CalcBaseAndBitshift+0xa8>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a35      	ldr	r2, [pc, #212]	; (8005a00 <DMA_CalcBaseAndBitshift+0x13c>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d01d      	beq.n	800596c <DMA_CalcBaseAndBitshift+0xa8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a33      	ldr	r2, [pc, #204]	; (8005a04 <DMA_CalcBaseAndBitshift+0x140>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d018      	beq.n	800596c <DMA_CalcBaseAndBitshift+0xa8>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a32      	ldr	r2, [pc, #200]	; (8005a08 <DMA_CalcBaseAndBitshift+0x144>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d013      	beq.n	800596c <DMA_CalcBaseAndBitshift+0xa8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a30      	ldr	r2, [pc, #192]	; (8005a0c <DMA_CalcBaseAndBitshift+0x148>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00e      	beq.n	800596c <DMA_CalcBaseAndBitshift+0xa8>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a2f      	ldr	r2, [pc, #188]	; (8005a10 <DMA_CalcBaseAndBitshift+0x14c>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d009      	beq.n	800596c <DMA_CalcBaseAndBitshift+0xa8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a2d      	ldr	r2, [pc, #180]	; (8005a14 <DMA_CalcBaseAndBitshift+0x150>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d004      	beq.n	800596c <DMA_CalcBaseAndBitshift+0xa8>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a2c      	ldr	r2, [pc, #176]	; (8005a18 <DMA_CalcBaseAndBitshift+0x154>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d101      	bne.n	8005970 <DMA_CalcBaseAndBitshift+0xac>
 800596c:	2301      	movs	r3, #1
 800596e:	e000      	b.n	8005972 <DMA_CalcBaseAndBitshift+0xae>
 8005970:	2300      	movs	r3, #0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d024      	beq.n	80059c0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	b2db      	uxtb	r3, r3
 800597c:	3b10      	subs	r3, #16
 800597e:	4a27      	ldr	r2, [pc, #156]	; (8005a1c <DMA_CalcBaseAndBitshift+0x158>)
 8005980:	fba2 2303 	umull	r2, r3, r2, r3
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	4a24      	ldr	r2, [pc, #144]	; (8005a20 <DMA_CalcBaseAndBitshift+0x15c>)
 8005990:	5cd3      	ldrb	r3, [r2, r3]
 8005992:	461a      	mov	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b03      	cmp	r3, #3
 800599c:	d908      	bls.n	80059b0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	4b1f      	ldr	r3, [pc, #124]	; (8005a24 <DMA_CalcBaseAndBitshift+0x160>)
 80059a6:	4013      	ands	r3, r2
 80059a8:	1d1a      	adds	r2, r3, #4
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	659a      	str	r2, [r3, #88]	; 0x58
 80059ae:	e00d      	b.n	80059cc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	4b1b      	ldr	r3, [pc, #108]	; (8005a24 <DMA_CalcBaseAndBitshift+0x160>)
 80059b8:	4013      	ands	r3, r2
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6593      	str	r3, [r2, #88]	; 0x58
 80059be:	e005      	b.n	80059cc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	40020010 	.word	0x40020010
 80059e0:	40020028 	.word	0x40020028
 80059e4:	40020040 	.word	0x40020040
 80059e8:	40020058 	.word	0x40020058
 80059ec:	40020070 	.word	0x40020070
 80059f0:	40020088 	.word	0x40020088
 80059f4:	400200a0 	.word	0x400200a0
 80059f8:	400200b8 	.word	0x400200b8
 80059fc:	40020410 	.word	0x40020410
 8005a00:	40020428 	.word	0x40020428
 8005a04:	40020440 	.word	0x40020440
 8005a08:	40020458 	.word	0x40020458
 8005a0c:	40020470 	.word	0x40020470
 8005a10:	40020488 	.word	0x40020488
 8005a14:	400204a0 	.word	0x400204a0
 8005a18:	400204b8 	.word	0x400204b8
 8005a1c:	aaaaaaab 	.word	0xaaaaaaab
 8005a20:	0800f5a0 	.word	0x0800f5a0
 8005a24:	fffffc00 	.word	0xfffffc00

08005a28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d120      	bne.n	8005a7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d858      	bhi.n	8005af6 <DMA_CheckFifoParam+0xce>
 8005a44:	a201      	add	r2, pc, #4	; (adr r2, 8005a4c <DMA_CheckFifoParam+0x24>)
 8005a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4a:	bf00      	nop
 8005a4c:	08005a5d 	.word	0x08005a5d
 8005a50:	08005a6f 	.word	0x08005a6f
 8005a54:	08005a5d 	.word	0x08005a5d
 8005a58:	08005af7 	.word	0x08005af7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d048      	beq.n	8005afa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a6c:	e045      	b.n	8005afa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a76:	d142      	bne.n	8005afe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a7c:	e03f      	b.n	8005afe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a86:	d123      	bne.n	8005ad0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d838      	bhi.n	8005b02 <DMA_CheckFifoParam+0xda>
 8005a90:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <DMA_CheckFifoParam+0x70>)
 8005a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a96:	bf00      	nop
 8005a98:	08005aa9 	.word	0x08005aa9
 8005a9c:	08005aaf 	.word	0x08005aaf
 8005aa0:	08005aa9 	.word	0x08005aa9
 8005aa4:	08005ac1 	.word	0x08005ac1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
        break;
 8005aac:	e030      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d025      	beq.n	8005b06 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005abe:	e022      	b.n	8005b06 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ac8:	d11f      	bne.n	8005b0a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ace:	e01c      	b.n	8005b0a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d902      	bls.n	8005ade <DMA_CheckFifoParam+0xb6>
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d003      	beq.n	8005ae4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005adc:	e018      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ae2:	e015      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00e      	beq.n	8005b0e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	73fb      	strb	r3, [r7, #15]
    break;
 8005af4:	e00b      	b.n	8005b0e <DMA_CheckFifoParam+0xe6>
        break;
 8005af6:	bf00      	nop
 8005af8:	e00a      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
        break;
 8005afa:	bf00      	nop
 8005afc:	e008      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
        break;
 8005afe:	bf00      	nop
 8005b00:	e006      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
        break;
 8005b02:	bf00      	nop
 8005b04:	e004      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
        break;
 8005b06:	bf00      	nop
 8005b08:	e002      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
        break;
 8005b0a:	bf00      	nop
 8005b0c:	e000      	b.n	8005b10 <DMA_CheckFifoParam+0xe8>
    break;
 8005b0e:	bf00      	nop
    }
  }

  return status;
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop

08005b20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a38      	ldr	r2, [pc, #224]	; (8005c14 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d022      	beq.n	8005b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a36      	ldr	r2, [pc, #216]	; (8005c18 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d01d      	beq.n	8005b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a35      	ldr	r2, [pc, #212]	; (8005c1c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d018      	beq.n	8005b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a33      	ldr	r2, [pc, #204]	; (8005c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d013      	beq.n	8005b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a32      	ldr	r2, [pc, #200]	; (8005c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00e      	beq.n	8005b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a30      	ldr	r2, [pc, #192]	; (8005c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d009      	beq.n	8005b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a2f      	ldr	r2, [pc, #188]	; (8005c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d004      	beq.n	8005b7e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a2d      	ldr	r2, [pc, #180]	; (8005c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d101      	bne.n	8005b82 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005b82:	2300      	movs	r3, #0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d01a      	beq.n	8005bbe <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	3b08      	subs	r3, #8
 8005b90:	4a28      	ldr	r2, [pc, #160]	; (8005c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005b92:	fba2 2303 	umull	r2, r3, r2, r3
 8005b96:	091b      	lsrs	r3, r3, #4
 8005b98:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	4b26      	ldr	r3, [pc, #152]	; (8005c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a24      	ldr	r2, [pc, #144]	; (8005c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005bac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f003 031f 	and.w	r3, r3, #31
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	409a      	lsls	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005bbc:	e024      	b.n	8005c08 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	3b10      	subs	r3, #16
 8005bc6:	4a1e      	ldr	r2, [pc, #120]	; (8005c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bcc:	091b      	lsrs	r3, r3, #4
 8005bce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	4a1c      	ldr	r2, [pc, #112]	; (8005c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d806      	bhi.n	8005be6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	4a1b      	ldr	r2, [pc, #108]	; (8005c48 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d902      	bls.n	8005be6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3308      	adds	r3, #8
 8005be4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	4b18      	ldr	r3, [pc, #96]	; (8005c4c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	461a      	mov	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a16      	ldr	r2, [pc, #88]	; (8005c50 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005bf8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	2201      	movs	r2, #1
 8005c02:	409a      	lsls	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	58025408 	.word	0x58025408
 8005c18:	5802541c 	.word	0x5802541c
 8005c1c:	58025430 	.word	0x58025430
 8005c20:	58025444 	.word	0x58025444
 8005c24:	58025458 	.word	0x58025458
 8005c28:	5802546c 	.word	0x5802546c
 8005c2c:	58025480 	.word	0x58025480
 8005c30:	58025494 	.word	0x58025494
 8005c34:	cccccccd 	.word	0xcccccccd
 8005c38:	16009600 	.word	0x16009600
 8005c3c:	58025880 	.word	0x58025880
 8005c40:	aaaaaaab 	.word	0xaaaaaaab
 8005c44:	400204b8 	.word	0x400204b8
 8005c48:	4002040f 	.word	0x4002040f
 8005c4c:	10008200 	.word	0x10008200
 8005c50:	40020880 	.word	0x40020880

08005c54 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d04a      	beq.n	8005d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d847      	bhi.n	8005d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a25      	ldr	r2, [pc, #148]	; (8005d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d022      	beq.n	8005cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a24      	ldr	r2, [pc, #144]	; (8005d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d01d      	beq.n	8005cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a22      	ldr	r2, [pc, #136]	; (8005d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d018      	beq.n	8005cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a21      	ldr	r2, [pc, #132]	; (8005d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d013      	beq.n	8005cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a1f      	ldr	r2, [pc, #124]	; (8005d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d00e      	beq.n	8005cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a1e      	ldr	r2, [pc, #120]	; (8005d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d009      	beq.n	8005cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a1c      	ldr	r2, [pc, #112]	; (8005d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d004      	beq.n	8005cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1b      	ldr	r2, [pc, #108]	; (8005d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d101      	bne.n	8005cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e000      	b.n	8005cc6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4b17      	ldr	r3, [pc, #92]	; (8005d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a15      	ldr	r2, [pc, #84]	; (8005d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005cdc:	671a      	str	r2, [r3, #112]	; 0x70
 8005cde:	e009      	b.n	8005cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005ce4:	4413      	add	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	461a      	mov	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a11      	ldr	r2, [pc, #68]	; (8005d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005cf2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	409a      	lsls	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	58025408 	.word	0x58025408
 8005d10:	5802541c 	.word	0x5802541c
 8005d14:	58025430 	.word	0x58025430
 8005d18:	58025444 	.word	0x58025444
 8005d1c:	58025458 	.word	0x58025458
 8005d20:	5802546c 	.word	0x5802546c
 8005d24:	58025480 	.word	0x58025480
 8005d28:	58025494 	.word	0x58025494
 8005d2c:	1600963f 	.word	0x1600963f
 8005d30:	58025940 	.word	0x58025940
 8005d34:	1000823f 	.word	0x1000823f
 8005d38:	40020940 	.word	0x40020940

08005d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b089      	sub	sp, #36	; 0x24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005d4a:	4b89      	ldr	r3, [pc, #548]	; (8005f70 <HAL_GPIO_Init+0x234>)
 8005d4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d4e:	e194      	b.n	800607a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	2101      	movs	r1, #1
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f000 8186 	beq.w	8006074 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d005      	beq.n	8005d80 <HAL_GPIO_Init+0x44>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d130      	bne.n	8005de2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	2203      	movs	r2, #3
 8005d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d90:	43db      	mvns	r3, r3
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	4013      	ands	r3, r2
 8005d96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005db6:	2201      	movs	r2, #1
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbe:	43db      	mvns	r3, r3
 8005dc0:	69ba      	ldr	r2, [r7, #24]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	091b      	lsrs	r3, r3, #4
 8005dcc:	f003 0201 	and.w	r2, r3, #1
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d017      	beq.n	8005e1e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	2203      	movs	r2, #3
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	43db      	mvns	r3, r3
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	4013      	ands	r3, r2
 8005e04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d123      	bne.n	8005e72 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	08da      	lsrs	r2, r3, #3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3208      	adds	r2, #8
 8005e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	f003 0307 	and.w	r3, r3, #7
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	220f      	movs	r2, #15
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	43db      	mvns	r3, r3
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	f003 0307 	and.w	r3, r3, #7
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	08da      	lsrs	r2, r3, #3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3208      	adds	r2, #8
 8005e6c:	69b9      	ldr	r1, [r7, #24]
 8005e6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	2203      	movs	r2, #3
 8005e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e82:	43db      	mvns	r3, r3
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	4013      	ands	r3, r2
 8005e88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f003 0203 	and.w	r2, r3, #3
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 80e0 	beq.w	8006074 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eb4:	4b2f      	ldr	r3, [pc, #188]	; (8005f74 <HAL_GPIO_Init+0x238>)
 8005eb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005eba:	4a2e      	ldr	r2, [pc, #184]	; (8005f74 <HAL_GPIO_Init+0x238>)
 8005ebc:	f043 0302 	orr.w	r3, r3, #2
 8005ec0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005ec4:	4b2b      	ldr	r3, [pc, #172]	; (8005f74 <HAL_GPIO_Init+0x238>)
 8005ec6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ed2:	4a29      	ldr	r2, [pc, #164]	; (8005f78 <HAL_GPIO_Init+0x23c>)
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	089b      	lsrs	r3, r3, #2
 8005ed8:	3302      	adds	r3, #2
 8005eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	220f      	movs	r2, #15
 8005eea:	fa02 f303 	lsl.w	r3, r2, r3
 8005eee:	43db      	mvns	r3, r3
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a20      	ldr	r2, [pc, #128]	; (8005f7c <HAL_GPIO_Init+0x240>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d052      	beq.n	8005fa4 <HAL_GPIO_Init+0x268>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a1f      	ldr	r2, [pc, #124]	; (8005f80 <HAL_GPIO_Init+0x244>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d031      	beq.n	8005f6a <HAL_GPIO_Init+0x22e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a1e      	ldr	r2, [pc, #120]	; (8005f84 <HAL_GPIO_Init+0x248>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d02b      	beq.n	8005f66 <HAL_GPIO_Init+0x22a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a1d      	ldr	r2, [pc, #116]	; (8005f88 <HAL_GPIO_Init+0x24c>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d025      	beq.n	8005f62 <HAL_GPIO_Init+0x226>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a1c      	ldr	r2, [pc, #112]	; (8005f8c <HAL_GPIO_Init+0x250>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d01f      	beq.n	8005f5e <HAL_GPIO_Init+0x222>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a1b      	ldr	r2, [pc, #108]	; (8005f90 <HAL_GPIO_Init+0x254>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d019      	beq.n	8005f5a <HAL_GPIO_Init+0x21e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a1a      	ldr	r2, [pc, #104]	; (8005f94 <HAL_GPIO_Init+0x258>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d013      	beq.n	8005f56 <HAL_GPIO_Init+0x21a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a19      	ldr	r2, [pc, #100]	; (8005f98 <HAL_GPIO_Init+0x25c>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00d      	beq.n	8005f52 <HAL_GPIO_Init+0x216>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a18      	ldr	r2, [pc, #96]	; (8005f9c <HAL_GPIO_Init+0x260>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d007      	beq.n	8005f4e <HAL_GPIO_Init+0x212>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a17      	ldr	r2, [pc, #92]	; (8005fa0 <HAL_GPIO_Init+0x264>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d101      	bne.n	8005f4a <HAL_GPIO_Init+0x20e>
 8005f46:	2309      	movs	r3, #9
 8005f48:	e02d      	b.n	8005fa6 <HAL_GPIO_Init+0x26a>
 8005f4a:	230a      	movs	r3, #10
 8005f4c:	e02b      	b.n	8005fa6 <HAL_GPIO_Init+0x26a>
 8005f4e:	2308      	movs	r3, #8
 8005f50:	e029      	b.n	8005fa6 <HAL_GPIO_Init+0x26a>
 8005f52:	2307      	movs	r3, #7
 8005f54:	e027      	b.n	8005fa6 <HAL_GPIO_Init+0x26a>
 8005f56:	2306      	movs	r3, #6
 8005f58:	e025      	b.n	8005fa6 <HAL_GPIO_Init+0x26a>
 8005f5a:	2305      	movs	r3, #5
 8005f5c:	e023      	b.n	8005fa6 <HAL_GPIO_Init+0x26a>
 8005f5e:	2304      	movs	r3, #4
 8005f60:	e021      	b.n	8005fa6 <HAL_GPIO_Init+0x26a>
 8005f62:	2303      	movs	r3, #3
 8005f64:	e01f      	b.n	8005fa6 <HAL_GPIO_Init+0x26a>
 8005f66:	2302      	movs	r3, #2
 8005f68:	e01d      	b.n	8005fa6 <HAL_GPIO_Init+0x26a>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e01b      	b.n	8005fa6 <HAL_GPIO_Init+0x26a>
 8005f6e:	bf00      	nop
 8005f70:	58000080 	.word	0x58000080
 8005f74:	58024400 	.word	0x58024400
 8005f78:	58000400 	.word	0x58000400
 8005f7c:	58020000 	.word	0x58020000
 8005f80:	58020400 	.word	0x58020400
 8005f84:	58020800 	.word	0x58020800
 8005f88:	58020c00 	.word	0x58020c00
 8005f8c:	58021000 	.word	0x58021000
 8005f90:	58021400 	.word	0x58021400
 8005f94:	58021800 	.word	0x58021800
 8005f98:	58021c00 	.word	0x58021c00
 8005f9c:	58022000 	.word	0x58022000
 8005fa0:	58022400 	.word	0x58022400
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	69fa      	ldr	r2, [r7, #28]
 8005fa8:	f002 0203 	and.w	r2, r2, #3
 8005fac:	0092      	lsls	r2, r2, #2
 8005fae:	4093      	lsls	r3, r2
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fb6:	4938      	ldr	r1, [pc, #224]	; (8006098 <HAL_GPIO_Init+0x35c>)
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	089b      	lsrs	r3, r3, #2
 8005fbc:	3302      	adds	r3, #2
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	43db      	mvns	r3, r3
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	43db      	mvns	r3, r3
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	4013      	ands	r3, r2
 8006002:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	4313      	orrs	r3, r2
 8006016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	43db      	mvns	r3, r3
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	4013      	ands	r3, r2
 800602e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	43db      	mvns	r3, r3
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	4013      	ands	r3, r2
 8006058:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	3301      	adds	r3, #1
 8006078:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	fa22 f303 	lsr.w	r3, r2, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	f47f ae63 	bne.w	8005d50 <HAL_GPIO_Init+0x14>
  }
}
 800608a:	bf00      	nop
 800608c:	bf00      	nop
 800608e:	3724      	adds	r7, #36	; 0x24
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	58000400 	.word	0x58000400

0800609c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	807b      	strh	r3, [r7, #2]
 80060a8:	4613      	mov	r3, r2
 80060aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80060ac:	787b      	ldrb	r3, [r7, #1]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060b2:	887a      	ldrh	r2, [r7, #2]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80060b8:	e003      	b.n	80060c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80060ba:	887b      	ldrh	r3, [r7, #2]
 80060bc:	041a      	lsls	r2, r3, #16
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	619a      	str	r2, [r3, #24]
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b082      	sub	sp, #8
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	4603      	mov	r3, r0
 80060d6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80060d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80060e0:	88fb      	ldrh	r3, [r7, #6]
 80060e2:	4013      	ands	r3, r2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d008      	beq.n	80060fa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ec:	88fb      	ldrh	r3, [r7, #6]
 80060ee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060f2:	88fb      	ldrh	r3, [r7, #6]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fc f86f 	bl	80021d8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80060fa:	bf00      	nop
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
	...

08006104 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800610c:	4b19      	ldr	r3, [pc, #100]	; (8006174 <HAL_PWREx_ConfigSupply+0x70>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	f003 0304 	and.w	r3, r3, #4
 8006114:	2b04      	cmp	r3, #4
 8006116:	d00a      	beq.n	800612e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006118:	4b16      	ldr	r3, [pc, #88]	; (8006174 <HAL_PWREx_ConfigSupply+0x70>)
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f003 0307 	and.w	r3, r3, #7
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	429a      	cmp	r2, r3
 8006124:	d001      	beq.n	800612a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e01f      	b.n	800616a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	e01d      	b.n	800616a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800612e:	4b11      	ldr	r3, [pc, #68]	; (8006174 <HAL_PWREx_ConfigSupply+0x70>)
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	f023 0207 	bic.w	r2, r3, #7
 8006136:	490f      	ldr	r1, [pc, #60]	; (8006174 <HAL_PWREx_ConfigSupply+0x70>)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4313      	orrs	r3, r2
 800613c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800613e:	f7fd f9bb 	bl	80034b8 <HAL_GetTick>
 8006142:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006144:	e009      	b.n	800615a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006146:	f7fd f9b7 	bl	80034b8 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006154:	d901      	bls.n	800615a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e007      	b.n	800616a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800615a:	4b06      	ldr	r3, [pc, #24]	; (8006174 <HAL_PWREx_ConfigSupply+0x70>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006166:	d1ee      	bne.n	8006146 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	58024800 	.word	0x58024800

08006178 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b08c      	sub	sp, #48	; 0x30
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d102      	bne.n	800618c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	f000 bc1c 	b.w	80069c4 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 8087 	beq.w	80062a8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800619a:	4b9e      	ldr	r3, [pc, #632]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061a4:	4b9b      	ldr	r3, [pc, #620]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 80061a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	2b10      	cmp	r3, #16
 80061ae:	d007      	beq.n	80061c0 <HAL_RCC_OscConfig+0x48>
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	2b18      	cmp	r3, #24
 80061b4:	d110      	bne.n	80061d8 <HAL_RCC_OscConfig+0x60>
 80061b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d10b      	bne.n	80061d8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c0:	4b94      	ldr	r3, [pc, #592]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d06c      	beq.n	80062a6 <HAL_RCC_OscConfig+0x12e>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d168      	bne.n	80062a6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e3f5      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e0:	d106      	bne.n	80061f0 <HAL_RCC_OscConfig+0x78>
 80061e2:	4b8c      	ldr	r3, [pc, #560]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a8b      	ldr	r2, [pc, #556]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 80061e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061ec:	6013      	str	r3, [r2, #0]
 80061ee:	e02e      	b.n	800624e <HAL_RCC_OscConfig+0xd6>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10c      	bne.n	8006212 <HAL_RCC_OscConfig+0x9a>
 80061f8:	4b86      	ldr	r3, [pc, #536]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a85      	ldr	r2, [pc, #532]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 80061fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	4b83      	ldr	r3, [pc, #524]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a82      	ldr	r2, [pc, #520]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 800620a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	e01d      	b.n	800624e <HAL_RCC_OscConfig+0xd6>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800621a:	d10c      	bne.n	8006236 <HAL_RCC_OscConfig+0xbe>
 800621c:	4b7d      	ldr	r3, [pc, #500]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a7c      	ldr	r2, [pc, #496]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 8006222:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	4b7a      	ldr	r3, [pc, #488]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a79      	ldr	r2, [pc, #484]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 800622e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	e00b      	b.n	800624e <HAL_RCC_OscConfig+0xd6>
 8006236:	4b77      	ldr	r3, [pc, #476]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a76      	ldr	r2, [pc, #472]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 800623c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006240:	6013      	str	r3, [r2, #0]
 8006242:	4b74      	ldr	r3, [pc, #464]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a73      	ldr	r2, [pc, #460]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 8006248:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800624c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d013      	beq.n	800627e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006256:	f7fd f92f 	bl	80034b8 <HAL_GetTick>
 800625a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800625c:	e008      	b.n	8006270 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800625e:	f7fd f92b 	bl	80034b8 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b64      	cmp	r3, #100	; 0x64
 800626a:	d901      	bls.n	8006270 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e3a9      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006270:	4b68      	ldr	r3, [pc, #416]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0f0      	beq.n	800625e <HAL_RCC_OscConfig+0xe6>
 800627c:	e014      	b.n	80062a8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800627e:	f7fd f91b 	bl	80034b8 <HAL_GetTick>
 8006282:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006284:	e008      	b.n	8006298 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006286:	f7fd f917 	bl	80034b8 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	2b64      	cmp	r3, #100	; 0x64
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e395      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006298:	4b5e      	ldr	r3, [pc, #376]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1f0      	bne.n	8006286 <HAL_RCC_OscConfig+0x10e>
 80062a4:	e000      	b.n	80062a8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 80ca 	beq.w	800644a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062b6:	4b57      	ldr	r3, [pc, #348]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062be:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062c0:	4b54      	ldr	r3, [pc, #336]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 80062c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d007      	beq.n	80062dc <HAL_RCC_OscConfig+0x164>
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	2b18      	cmp	r3, #24
 80062d0:	d156      	bne.n	8006380 <HAL_RCC_OscConfig+0x208>
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	f003 0303 	and.w	r3, r3, #3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d151      	bne.n	8006380 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062dc:	4b4d      	ldr	r3, [pc, #308]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d005      	beq.n	80062f4 <HAL_RCC_OscConfig+0x17c>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e367      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062f4:	4b47      	ldr	r3, [pc, #284]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f023 0219 	bic.w	r2, r3, #25
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	4944      	ldr	r1, [pc, #272]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 8006302:	4313      	orrs	r3, r2
 8006304:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006306:	f7fd f8d7 	bl	80034b8 <HAL_GetTick>
 800630a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800630c:	e008      	b.n	8006320 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800630e:	f7fd f8d3 	bl	80034b8 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2b02      	cmp	r3, #2
 800631a:	d901      	bls.n	8006320 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e351      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006320:	4b3c      	ldr	r3, [pc, #240]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0304 	and.w	r3, r3, #4
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0f0      	beq.n	800630e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800632c:	f7fd f8d0 	bl	80034d0 <HAL_GetREVID>
 8006330:	4603      	mov	r3, r0
 8006332:	f241 0203 	movw	r2, #4099	; 0x1003
 8006336:	4293      	cmp	r3, r2
 8006338:	d817      	bhi.n	800636a <HAL_RCC_OscConfig+0x1f2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	2b40      	cmp	r3, #64	; 0x40
 8006340:	d108      	bne.n	8006354 <HAL_RCC_OscConfig+0x1dc>
 8006342:	4b34      	ldr	r3, [pc, #208]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800634a:	4a32      	ldr	r2, [pc, #200]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 800634c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006350:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006352:	e07a      	b.n	800644a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006354:	4b2f      	ldr	r3, [pc, #188]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	031b      	lsls	r3, r3, #12
 8006362:	492c      	ldr	r1, [pc, #176]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 8006364:	4313      	orrs	r3, r2
 8006366:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006368:	e06f      	b.n	800644a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800636a:	4b2a      	ldr	r3, [pc, #168]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	061b      	lsls	r3, r3, #24
 8006378:	4926      	ldr	r1, [pc, #152]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 800637a:	4313      	orrs	r3, r2
 800637c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800637e:	e064      	b.n	800644a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d047      	beq.n	8006418 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006388:	4b22      	ldr	r3, [pc, #136]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f023 0219 	bic.w	r2, r3, #25
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	491f      	ldr	r1, [pc, #124]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 8006396:	4313      	orrs	r3, r2
 8006398:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800639a:	f7fd f88d 	bl	80034b8 <HAL_GetTick>
 800639e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063a0:	e008      	b.n	80063b4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063a2:	f7fd f889 	bl	80034b8 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d901      	bls.n	80063b4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e307      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063b4:	4b17      	ldr	r3, [pc, #92]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0f0      	beq.n	80063a2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063c0:	f7fd f886 	bl	80034d0 <HAL_GetREVID>
 80063c4:	4603      	mov	r3, r0
 80063c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d817      	bhi.n	80063fe <HAL_RCC_OscConfig+0x286>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b40      	cmp	r3, #64	; 0x40
 80063d4:	d108      	bne.n	80063e8 <HAL_RCC_OscConfig+0x270>
 80063d6:	4b0f      	ldr	r3, [pc, #60]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80063de:	4a0d      	ldr	r2, [pc, #52]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 80063e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063e4:	6053      	str	r3, [r2, #4]
 80063e6:	e030      	b.n	800644a <HAL_RCC_OscConfig+0x2d2>
 80063e8:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	031b      	lsls	r3, r3, #12
 80063f6:	4907      	ldr	r1, [pc, #28]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	604b      	str	r3, [r1, #4]
 80063fc:	e025      	b.n	800644a <HAL_RCC_OscConfig+0x2d2>
 80063fe:	4b05      	ldr	r3, [pc, #20]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	061b      	lsls	r3, r3, #24
 800640c:	4901      	ldr	r1, [pc, #4]	; (8006414 <HAL_RCC_OscConfig+0x29c>)
 800640e:	4313      	orrs	r3, r2
 8006410:	604b      	str	r3, [r1, #4]
 8006412:	e01a      	b.n	800644a <HAL_RCC_OscConfig+0x2d2>
 8006414:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006418:	4b9e      	ldr	r3, [pc, #632]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a9d      	ldr	r2, [pc, #628]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 800641e:	f023 0301 	bic.w	r3, r3, #1
 8006422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006424:	f7fd f848 	bl	80034b8 <HAL_GetTick>
 8006428:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800642c:	f7fd f844 	bl	80034b8 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e2c2      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800643e:	4b95      	ldr	r3, [pc, #596]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0304 	and.w	r3, r3, #4
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1f0      	bne.n	800642c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0310 	and.w	r3, r3, #16
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80a9 	beq.w	80065aa <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006458:	4b8e      	ldr	r3, [pc, #568]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006460:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006462:	4b8c      	ldr	r3, [pc, #560]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 8006464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006466:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	2b08      	cmp	r3, #8
 800646c:	d007      	beq.n	800647e <HAL_RCC_OscConfig+0x306>
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	2b18      	cmp	r3, #24
 8006472:	d13a      	bne.n	80064ea <HAL_RCC_OscConfig+0x372>
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f003 0303 	and.w	r3, r3, #3
 800647a:	2b01      	cmp	r3, #1
 800647c:	d135      	bne.n	80064ea <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800647e:	4b85      	ldr	r3, [pc, #532]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006486:	2b00      	cmp	r3, #0
 8006488:	d005      	beq.n	8006496 <HAL_RCC_OscConfig+0x31e>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	69db      	ldr	r3, [r3, #28]
 800648e:	2b80      	cmp	r3, #128	; 0x80
 8006490:	d001      	beq.n	8006496 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e296      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006496:	f7fd f81b 	bl	80034d0 <HAL_GetREVID>
 800649a:	4603      	mov	r3, r0
 800649c:	f241 0203 	movw	r2, #4099	; 0x1003
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d817      	bhi.n	80064d4 <HAL_RCC_OscConfig+0x35c>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d108      	bne.n	80064be <HAL_RCC_OscConfig+0x346>
 80064ac:	4b79      	ldr	r3, [pc, #484]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80064b4:	4a77      	ldr	r2, [pc, #476]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 80064b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064ba:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064bc:	e075      	b.n	80065aa <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064be:	4b75      	ldr	r3, [pc, #468]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	069b      	lsls	r3, r3, #26
 80064cc:	4971      	ldr	r1, [pc, #452]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064d2:	e06a      	b.n	80065aa <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064d4:	4b6f      	ldr	r3, [pc, #444]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	061b      	lsls	r3, r3, #24
 80064e2:	496c      	ldr	r1, [pc, #432]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064e8:	e05f      	b.n	80065aa <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d042      	beq.n	8006578 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80064f2:	4b68      	ldr	r3, [pc, #416]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a67      	ldr	r2, [pc, #412]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 80064f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fe:	f7fc ffdb 	bl	80034b8 <HAL_GetTick>
 8006502:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006504:	e008      	b.n	8006518 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006506:	f7fc ffd7 	bl	80034b8 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e255      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006518:	4b5e      	ldr	r3, [pc, #376]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0f0      	beq.n	8006506 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006524:	f7fc ffd4 	bl	80034d0 <HAL_GetREVID>
 8006528:	4603      	mov	r3, r0
 800652a:	f241 0203 	movw	r2, #4099	; 0x1003
 800652e:	4293      	cmp	r3, r2
 8006530:	d817      	bhi.n	8006562 <HAL_RCC_OscConfig+0x3ea>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	2b20      	cmp	r3, #32
 8006538:	d108      	bne.n	800654c <HAL_RCC_OscConfig+0x3d4>
 800653a:	4b56      	ldr	r3, [pc, #344]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006542:	4a54      	ldr	r2, [pc, #336]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 8006544:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006548:	6053      	str	r3, [r2, #4]
 800654a:	e02e      	b.n	80065aa <HAL_RCC_OscConfig+0x432>
 800654c:	4b51      	ldr	r3, [pc, #324]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	069b      	lsls	r3, r3, #26
 800655a:	494e      	ldr	r1, [pc, #312]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 800655c:	4313      	orrs	r3, r2
 800655e:	604b      	str	r3, [r1, #4]
 8006560:	e023      	b.n	80065aa <HAL_RCC_OscConfig+0x432>
 8006562:	4b4c      	ldr	r3, [pc, #304]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	061b      	lsls	r3, r3, #24
 8006570:	4948      	ldr	r1, [pc, #288]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 8006572:	4313      	orrs	r3, r2
 8006574:	60cb      	str	r3, [r1, #12]
 8006576:	e018      	b.n	80065aa <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006578:	4b46      	ldr	r3, [pc, #280]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a45      	ldr	r2, [pc, #276]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 800657e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006584:	f7fc ff98 	bl	80034b8 <HAL_GetTick>
 8006588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800658c:	f7fc ff94 	bl	80034b8 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b02      	cmp	r3, #2
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e212      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800659e:	4b3d      	ldr	r3, [pc, #244]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1f0      	bne.n	800658c <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0308 	and.w	r3, r3, #8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d036      	beq.n	8006624 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d019      	beq.n	80065f2 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065be:	4b35      	ldr	r3, [pc, #212]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 80065c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065c2:	4a34      	ldr	r2, [pc, #208]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 80065c4:	f043 0301 	orr.w	r3, r3, #1
 80065c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ca:	f7fc ff75 	bl	80034b8 <HAL_GetTick>
 80065ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065d0:	e008      	b.n	80065e4 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065d2:	f7fc ff71 	bl	80034b8 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d901      	bls.n	80065e4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e1ef      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80065e4:	4b2b      	ldr	r3, [pc, #172]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 80065e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d0f0      	beq.n	80065d2 <HAL_RCC_OscConfig+0x45a>
 80065f0:	e018      	b.n	8006624 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065f2:	4b28      	ldr	r3, [pc, #160]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 80065f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065f6:	4a27      	ldr	r2, [pc, #156]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 80065f8:	f023 0301 	bic.w	r3, r3, #1
 80065fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065fe:	f7fc ff5b 	bl	80034b8 <HAL_GetTick>
 8006602:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006604:	e008      	b.n	8006618 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006606:	f7fc ff57 	bl	80034b8 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d901      	bls.n	8006618 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e1d5      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006618:	4b1e      	ldr	r3, [pc, #120]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 800661a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1f0      	bne.n	8006606 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b00      	cmp	r3, #0
 800662e:	d039      	beq.n	80066a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d019      	beq.n	800666c <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006638:	4b16      	ldr	r3, [pc, #88]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a15      	ldr	r2, [pc, #84]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 800663e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006642:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006644:	f7fc ff38 	bl	80034b8 <HAL_GetTick>
 8006648:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800664c:	f7fc ff34 	bl	80034b8 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e1b2      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800665e:	4b0d      	ldr	r3, [pc, #52]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d0f0      	beq.n	800664c <HAL_RCC_OscConfig+0x4d4>
 800666a:	e01b      	b.n	80066a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800666c:	4b09      	ldr	r3, [pc, #36]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a08      	ldr	r2, [pc, #32]	; (8006694 <HAL_RCC_OscConfig+0x51c>)
 8006672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006676:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006678:	f7fc ff1e 	bl	80034b8 <HAL_GetTick>
 800667c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800667e:	e00b      	b.n	8006698 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006680:	f7fc ff1a 	bl	80034b8 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	2b02      	cmp	r3, #2
 800668c:	d904      	bls.n	8006698 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800668e:	2303      	movs	r3, #3
 8006690:	e198      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
 8006692:	bf00      	nop
 8006694:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006698:	4ba3      	ldr	r3, [pc, #652]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1ed      	bne.n	8006680 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8081 	beq.w	80067b4 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80066b2:	4b9e      	ldr	r3, [pc, #632]	; (800692c <HAL_RCC_OscConfig+0x7b4>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a9d      	ldr	r2, [pc, #628]	; (800692c <HAL_RCC_OscConfig+0x7b4>)
 80066b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066be:	f7fc fefb 	bl	80034b8 <HAL_GetTick>
 80066c2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80066c6:	f7fc fef7 	bl	80034b8 <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b64      	cmp	r3, #100	; 0x64
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e175      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066d8:	4b94      	ldr	r3, [pc, #592]	; (800692c <HAL_RCC_OscConfig+0x7b4>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0f0      	beq.n	80066c6 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d106      	bne.n	80066fa <HAL_RCC_OscConfig+0x582>
 80066ec:	4b8e      	ldr	r3, [pc, #568]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 80066ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f0:	4a8d      	ldr	r2, [pc, #564]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 80066f2:	f043 0301 	orr.w	r3, r3, #1
 80066f6:	6713      	str	r3, [r2, #112]	; 0x70
 80066f8:	e02d      	b.n	8006756 <HAL_RCC_OscConfig+0x5de>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10c      	bne.n	800671c <HAL_RCC_OscConfig+0x5a4>
 8006702:	4b89      	ldr	r3, [pc, #548]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 8006704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006706:	4a88      	ldr	r2, [pc, #544]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 8006708:	f023 0301 	bic.w	r3, r3, #1
 800670c:	6713      	str	r3, [r2, #112]	; 0x70
 800670e:	4b86      	ldr	r3, [pc, #536]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 8006710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006712:	4a85      	ldr	r2, [pc, #532]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 8006714:	f023 0304 	bic.w	r3, r3, #4
 8006718:	6713      	str	r3, [r2, #112]	; 0x70
 800671a:	e01c      	b.n	8006756 <HAL_RCC_OscConfig+0x5de>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	2b05      	cmp	r3, #5
 8006722:	d10c      	bne.n	800673e <HAL_RCC_OscConfig+0x5c6>
 8006724:	4b80      	ldr	r3, [pc, #512]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 8006726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006728:	4a7f      	ldr	r2, [pc, #508]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 800672a:	f043 0304 	orr.w	r3, r3, #4
 800672e:	6713      	str	r3, [r2, #112]	; 0x70
 8006730:	4b7d      	ldr	r3, [pc, #500]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 8006732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006734:	4a7c      	ldr	r2, [pc, #496]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 8006736:	f043 0301 	orr.w	r3, r3, #1
 800673a:	6713      	str	r3, [r2, #112]	; 0x70
 800673c:	e00b      	b.n	8006756 <HAL_RCC_OscConfig+0x5de>
 800673e:	4b7a      	ldr	r3, [pc, #488]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 8006740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006742:	4a79      	ldr	r2, [pc, #484]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 8006744:	f023 0301 	bic.w	r3, r3, #1
 8006748:	6713      	str	r3, [r2, #112]	; 0x70
 800674a:	4b77      	ldr	r3, [pc, #476]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	4a76      	ldr	r2, [pc, #472]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 8006750:	f023 0304 	bic.w	r3, r3, #4
 8006754:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d015      	beq.n	800678a <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800675e:	f7fc feab 	bl	80034b8 <HAL_GetTick>
 8006762:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006764:	e00a      	b.n	800677c <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006766:	f7fc fea7 	bl	80034b8 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	f241 3288 	movw	r2, #5000	; 0x1388
 8006774:	4293      	cmp	r3, r2
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e123      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800677c:	4b6a      	ldr	r3, [pc, #424]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 800677e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0ee      	beq.n	8006766 <HAL_RCC_OscConfig+0x5ee>
 8006788:	e014      	b.n	80067b4 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800678a:	f7fc fe95 	bl	80034b8 <HAL_GetTick>
 800678e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006790:	e00a      	b.n	80067a8 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006792:	f7fc fe91 	bl	80034b8 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d901      	bls.n	80067a8 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e10d      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067a8:	4b5f      	ldr	r3, [pc, #380]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 80067aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1ee      	bne.n	8006792 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 8102 	beq.w	80069c2 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80067be:	4b5a      	ldr	r3, [pc, #360]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067c6:	2b18      	cmp	r3, #24
 80067c8:	f000 80bd 	beq.w	8006946 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	f040 8095 	bne.w	8006900 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067d6:	4b54      	ldr	r3, [pc, #336]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a53      	ldr	r2, [pc, #332]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 80067dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e2:	f7fc fe69 	bl	80034b8 <HAL_GetTick>
 80067e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067ea:	f7fc fe65 	bl	80034b8 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e0e3      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80067fc:	4b4a      	ldr	r3, [pc, #296]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1f0      	bne.n	80067ea <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006808:	4b47      	ldr	r3, [pc, #284]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 800680a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800680c:	4b48      	ldr	r3, [pc, #288]	; (8006930 <HAL_RCC_OscConfig+0x7b8>)
 800680e:	4013      	ands	r3, r2
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006818:	0112      	lsls	r2, r2, #4
 800681a:	430a      	orrs	r2, r1
 800681c:	4942      	ldr	r1, [pc, #264]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 800681e:	4313      	orrs	r3, r2
 8006820:	628b      	str	r3, [r1, #40]	; 0x28
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006826:	3b01      	subs	r3, #1
 8006828:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006830:	3b01      	subs	r3, #1
 8006832:	025b      	lsls	r3, r3, #9
 8006834:	b29b      	uxth	r3, r3
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683c:	3b01      	subs	r3, #1
 800683e:	041b      	lsls	r3, r3, #16
 8006840:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006844:	431a      	orrs	r2, r3
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684a:	3b01      	subs	r3, #1
 800684c:	061b      	lsls	r3, r3, #24
 800684e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006852:	4935      	ldr	r1, [pc, #212]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 8006854:	4313      	orrs	r3, r2
 8006856:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006858:	4b33      	ldr	r3, [pc, #204]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	4a32      	ldr	r2, [pc, #200]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 800685e:	f023 0301 	bic.w	r3, r3, #1
 8006862:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006864:	4b30      	ldr	r3, [pc, #192]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 8006866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006868:	4b32      	ldr	r3, [pc, #200]	; (8006934 <HAL_RCC_OscConfig+0x7bc>)
 800686a:	4013      	ands	r3, r2
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006870:	00d2      	lsls	r2, r2, #3
 8006872:	492d      	ldr	r1, [pc, #180]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 8006874:	4313      	orrs	r3, r2
 8006876:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006878:	4b2b      	ldr	r3, [pc, #172]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 800687a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687c:	f023 020c 	bic.w	r2, r3, #12
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006884:	4928      	ldr	r1, [pc, #160]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 8006886:	4313      	orrs	r3, r2
 8006888:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800688a:	4b27      	ldr	r3, [pc, #156]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 800688c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688e:	f023 0202 	bic.w	r2, r3, #2
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006896:	4924      	ldr	r1, [pc, #144]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 8006898:	4313      	orrs	r3, r2
 800689a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800689c:	4b22      	ldr	r3, [pc, #136]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	4a21      	ldr	r2, [pc, #132]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 80068a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a8:	4b1f      	ldr	r3, [pc, #124]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 80068aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ac:	4a1e      	ldr	r2, [pc, #120]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 80068ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80068b4:	4b1c      	ldr	r3, [pc, #112]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	4a1b      	ldr	r2, [pc, #108]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 80068ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80068c0:	4b19      	ldr	r3, [pc, #100]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 80068c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c4:	4a18      	ldr	r2, [pc, #96]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068cc:	4b16      	ldr	r3, [pc, #88]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a15      	ldr	r2, [pc, #84]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 80068d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d8:	f7fc fdee 	bl	80034b8 <HAL_GetTick>
 80068dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80068e0:	f7fc fdea 	bl	80034b8 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e068      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068f2:	4b0d      	ldr	r3, [pc, #52]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d0f0      	beq.n	80068e0 <HAL_RCC_OscConfig+0x768>
 80068fe:	e060      	b.n	80069c2 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006900:	4b09      	ldr	r3, [pc, #36]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a08      	ldr	r2, [pc, #32]	; (8006928 <HAL_RCC_OscConfig+0x7b0>)
 8006906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800690a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800690c:	f7fc fdd4 	bl	80034b8 <HAL_GetTick>
 8006910:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006912:	e011      	b.n	8006938 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006914:	f7fc fdd0 	bl	80034b8 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	2b02      	cmp	r3, #2
 8006920:	d90a      	bls.n	8006938 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e04e      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
 8006926:	bf00      	nop
 8006928:	58024400 	.word	0x58024400
 800692c:	58024800 	.word	0x58024800
 8006930:	fffffc0c 	.word	0xfffffc0c
 8006934:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006938:	4b24      	ldr	r3, [pc, #144]	; (80069cc <HAL_RCC_OscConfig+0x854>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1e7      	bne.n	8006914 <HAL_RCC_OscConfig+0x79c>
 8006944:	e03d      	b.n	80069c2 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006946:	4b21      	ldr	r3, [pc, #132]	; (80069cc <HAL_RCC_OscConfig+0x854>)
 8006948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800694c:	4b1f      	ldr	r3, [pc, #124]	; (80069cc <HAL_RCC_OscConfig+0x854>)
 800694e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006950:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006956:	2b01      	cmp	r3, #1
 8006958:	d031      	beq.n	80069be <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f003 0203 	and.w	r2, r3, #3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006964:	429a      	cmp	r2, r3
 8006966:	d12a      	bne.n	80069be <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	091b      	lsrs	r3, r3, #4
 800696c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006974:	429a      	cmp	r2, r3
 8006976:	d122      	bne.n	80069be <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006982:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006984:	429a      	cmp	r2, r3
 8006986:	d11a      	bne.n	80069be <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	0a5b      	lsrs	r3, r3, #9
 800698c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006994:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006996:	429a      	cmp	r2, r3
 8006998:	d111      	bne.n	80069be <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	0c1b      	lsrs	r3, r3, #16
 800699e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d108      	bne.n	80069be <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	0e1b      	lsrs	r3, r3, #24
 80069b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d001      	beq.n	80069c2 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e000      	b.n	80069c4 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3730      	adds	r7, #48	; 0x30
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	58024400 	.word	0x58024400

080069d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e19c      	b.n	8006d1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069e4:	4b8a      	ldr	r3, [pc, #552]	; (8006c10 <HAL_RCC_ClockConfig+0x240>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d910      	bls.n	8006a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069f2:	4b87      	ldr	r3, [pc, #540]	; (8006c10 <HAL_RCC_ClockConfig+0x240>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f023 020f 	bic.w	r2, r3, #15
 80069fa:	4985      	ldr	r1, [pc, #532]	; (8006c10 <HAL_RCC_ClockConfig+0x240>)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a02:	4b83      	ldr	r3, [pc, #524]	; (8006c10 <HAL_RCC_ClockConfig+0x240>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d001      	beq.n	8006a14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e184      	b.n	8006d1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d010      	beq.n	8006a42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691a      	ldr	r2, [r3, #16]
 8006a24:	4b7b      	ldr	r3, [pc, #492]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d908      	bls.n	8006a42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006a30:	4b78      	ldr	r3, [pc, #480]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	4975      	ldr	r1, [pc, #468]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0308 	and.w	r3, r3, #8
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d010      	beq.n	8006a70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	695a      	ldr	r2, [r3, #20]
 8006a52:	4b70      	ldr	r3, [pc, #448]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d908      	bls.n	8006a70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006a5e:	4b6d      	ldr	r3, [pc, #436]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	496a      	ldr	r1, [pc, #424]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0310 	and.w	r3, r3, #16
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d010      	beq.n	8006a9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	699a      	ldr	r2, [r3, #24]
 8006a80:	4b64      	ldr	r3, [pc, #400]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d908      	bls.n	8006a9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a8c:	4b61      	ldr	r3, [pc, #388]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	495e      	ldr	r1, [pc, #376]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0320 	and.w	r3, r3, #32
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d010      	beq.n	8006acc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	69da      	ldr	r2, [r3, #28]
 8006aae:	4b59      	ldr	r3, [pc, #356]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d908      	bls.n	8006acc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006aba:	4b56      	ldr	r3, [pc, #344]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006abc:	6a1b      	ldr	r3, [r3, #32]
 8006abe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	69db      	ldr	r3, [r3, #28]
 8006ac6:	4953      	ldr	r1, [pc, #332]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d010      	beq.n	8006afa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	4b4d      	ldr	r3, [pc, #308]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	f003 030f 	and.w	r3, r3, #15
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d908      	bls.n	8006afa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ae8:	4b4a      	ldr	r3, [pc, #296]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	f023 020f 	bic.w	r2, r3, #15
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	4947      	ldr	r1, [pc, #284]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006af6:	4313      	orrs	r3, r2
 8006af8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d055      	beq.n	8006bb2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006b06:	4b43      	ldr	r3, [pc, #268]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	4940      	ldr	r1, [pc, #256]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d107      	bne.n	8006b30 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006b20:	4b3c      	ldr	r3, [pc, #240]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d121      	bne.n	8006b70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e0f6      	b.n	8006d1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d107      	bne.n	8006b48 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b38:	4b36      	ldr	r3, [pc, #216]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d115      	bne.n	8006b70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e0ea      	b.n	8006d1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d107      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b50:	4b30      	ldr	r3, [pc, #192]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d109      	bne.n	8006b70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e0de      	b.n	8006d1e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b60:	4b2c      	ldr	r3, [pc, #176]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e0d6      	b.n	8006d1e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b70:	4b28      	ldr	r3, [pc, #160]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	f023 0207 	bic.w	r2, r3, #7
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	4925      	ldr	r1, [pc, #148]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b82:	f7fc fc99 	bl	80034b8 <HAL_GetTick>
 8006b86:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b88:	e00a      	b.n	8006ba0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b8a:	f7fc fc95 	bl	80034b8 <HAL_GetTick>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	1ad3      	subs	r3, r2, r3
 8006b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e0be      	b.n	8006d1e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ba0:	4b1c      	ldr	r3, [pc, #112]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	00db      	lsls	r3, r3, #3
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d1eb      	bne.n	8006b8a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d010      	beq.n	8006be0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	4b14      	ldr	r3, [pc, #80]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	f003 030f 	and.w	r3, r3, #15
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d208      	bcs.n	8006be0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bce:	4b11      	ldr	r3, [pc, #68]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006bd0:	699b      	ldr	r3, [r3, #24]
 8006bd2:	f023 020f 	bic.w	r2, r3, #15
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	490e      	ldr	r1, [pc, #56]	; (8006c14 <HAL_RCC_ClockConfig+0x244>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006be0:	4b0b      	ldr	r3, [pc, #44]	; (8006c10 <HAL_RCC_ClockConfig+0x240>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 030f 	and.w	r3, r3, #15
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d214      	bcs.n	8006c18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bee:	4b08      	ldr	r3, [pc, #32]	; (8006c10 <HAL_RCC_ClockConfig+0x240>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f023 020f 	bic.w	r2, r3, #15
 8006bf6:	4906      	ldr	r1, [pc, #24]	; (8006c10 <HAL_RCC_ClockConfig+0x240>)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bfe:	4b04      	ldr	r3, [pc, #16]	; (8006c10 <HAL_RCC_ClockConfig+0x240>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 030f 	and.w	r3, r3, #15
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d005      	beq.n	8006c18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e086      	b.n	8006d1e <HAL_RCC_ClockConfig+0x34e>
 8006c10:	52002000 	.word	0x52002000
 8006c14:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d010      	beq.n	8006c46 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	691a      	ldr	r2, [r3, #16]
 8006c28:	4b3f      	ldr	r3, [pc, #252]	; (8006d28 <HAL_RCC_ClockConfig+0x358>)
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d208      	bcs.n	8006c46 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c34:	4b3c      	ldr	r3, [pc, #240]	; (8006d28 <HAL_RCC_ClockConfig+0x358>)
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	4939      	ldr	r1, [pc, #228]	; (8006d28 <HAL_RCC_ClockConfig+0x358>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d010      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	695a      	ldr	r2, [r3, #20]
 8006c56:	4b34      	ldr	r3, [pc, #208]	; (8006d28 <HAL_RCC_ClockConfig+0x358>)
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d208      	bcs.n	8006c74 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c62:	4b31      	ldr	r3, [pc, #196]	; (8006d28 <HAL_RCC_ClockConfig+0x358>)
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	492e      	ldr	r1, [pc, #184]	; (8006d28 <HAL_RCC_ClockConfig+0x358>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0310 	and.w	r3, r3, #16
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d010      	beq.n	8006ca2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	699a      	ldr	r2, [r3, #24]
 8006c84:	4b28      	ldr	r3, [pc, #160]	; (8006d28 <HAL_RCC_ClockConfig+0x358>)
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d208      	bcs.n	8006ca2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c90:	4b25      	ldr	r3, [pc, #148]	; (8006d28 <HAL_RCC_ClockConfig+0x358>)
 8006c92:	69db      	ldr	r3, [r3, #28]
 8006c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	4922      	ldr	r1, [pc, #136]	; (8006d28 <HAL_RCC_ClockConfig+0x358>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0320 	and.w	r3, r3, #32
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d010      	beq.n	8006cd0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	69da      	ldr	r2, [r3, #28]
 8006cb2:	4b1d      	ldr	r3, [pc, #116]	; (8006d28 <HAL_RCC_ClockConfig+0x358>)
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d208      	bcs.n	8006cd0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006cbe:	4b1a      	ldr	r3, [pc, #104]	; (8006d28 <HAL_RCC_ClockConfig+0x358>)
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	4917      	ldr	r1, [pc, #92]	; (8006d28 <HAL_RCC_ClockConfig+0x358>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006cd0:	f000 f834 	bl	8006d3c <HAL_RCC_GetSysClockFreq>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	4b14      	ldr	r3, [pc, #80]	; (8006d28 <HAL_RCC_ClockConfig+0x358>)
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	0a1b      	lsrs	r3, r3, #8
 8006cdc:	f003 030f 	and.w	r3, r3, #15
 8006ce0:	4912      	ldr	r1, [pc, #72]	; (8006d2c <HAL_RCC_ClockConfig+0x35c>)
 8006ce2:	5ccb      	ldrb	r3, [r1, r3]
 8006ce4:	f003 031f 	and.w	r3, r3, #31
 8006ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006cee:	4b0e      	ldr	r3, [pc, #56]	; (8006d28 <HAL_RCC_ClockConfig+0x358>)
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	f003 030f 	and.w	r3, r3, #15
 8006cf6:	4a0d      	ldr	r2, [pc, #52]	; (8006d2c <HAL_RCC_ClockConfig+0x35c>)
 8006cf8:	5cd3      	ldrb	r3, [r2, r3]
 8006cfa:	f003 031f 	and.w	r3, r3, #31
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	fa22 f303 	lsr.w	r3, r2, r3
 8006d04:	4a0a      	ldr	r2, [pc, #40]	; (8006d30 <HAL_RCC_ClockConfig+0x360>)
 8006d06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d08:	4a0a      	ldr	r2, [pc, #40]	; (8006d34 <HAL_RCC_ClockConfig+0x364>)
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006d0e:	4b0a      	ldr	r3, [pc, #40]	; (8006d38 <HAL_RCC_ClockConfig+0x368>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fc fb86 	bl	8003424 <HAL_InitTick>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3718      	adds	r7, #24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	58024400 	.word	0x58024400
 8006d2c:	0800f590 	.word	0x0800f590
 8006d30:	24000004 	.word	0x24000004
 8006d34:	24000000 	.word	0x24000000
 8006d38:	24000008 	.word	0x24000008

08006d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b089      	sub	sp, #36	; 0x24
 8006d40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d42:	4bb3      	ldr	r3, [pc, #716]	; (8007010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d4a:	2b18      	cmp	r3, #24
 8006d4c:	f200 8155 	bhi.w	8006ffa <HAL_RCC_GetSysClockFreq+0x2be>
 8006d50:	a201      	add	r2, pc, #4	; (adr r2, 8006d58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d56:	bf00      	nop
 8006d58:	08006dbd 	.word	0x08006dbd
 8006d5c:	08006ffb 	.word	0x08006ffb
 8006d60:	08006ffb 	.word	0x08006ffb
 8006d64:	08006ffb 	.word	0x08006ffb
 8006d68:	08006ffb 	.word	0x08006ffb
 8006d6c:	08006ffb 	.word	0x08006ffb
 8006d70:	08006ffb 	.word	0x08006ffb
 8006d74:	08006ffb 	.word	0x08006ffb
 8006d78:	08006de3 	.word	0x08006de3
 8006d7c:	08006ffb 	.word	0x08006ffb
 8006d80:	08006ffb 	.word	0x08006ffb
 8006d84:	08006ffb 	.word	0x08006ffb
 8006d88:	08006ffb 	.word	0x08006ffb
 8006d8c:	08006ffb 	.word	0x08006ffb
 8006d90:	08006ffb 	.word	0x08006ffb
 8006d94:	08006ffb 	.word	0x08006ffb
 8006d98:	08006de9 	.word	0x08006de9
 8006d9c:	08006ffb 	.word	0x08006ffb
 8006da0:	08006ffb 	.word	0x08006ffb
 8006da4:	08006ffb 	.word	0x08006ffb
 8006da8:	08006ffb 	.word	0x08006ffb
 8006dac:	08006ffb 	.word	0x08006ffb
 8006db0:	08006ffb 	.word	0x08006ffb
 8006db4:	08006ffb 	.word	0x08006ffb
 8006db8:	08006def 	.word	0x08006def
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dbc:	4b94      	ldr	r3, [pc, #592]	; (8007010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0320 	and.w	r3, r3, #32
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d009      	beq.n	8006ddc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006dc8:	4b91      	ldr	r3, [pc, #580]	; (8007010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	08db      	lsrs	r3, r3, #3
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	4a90      	ldr	r2, [pc, #576]	; (8007014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006dda:	e111      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006ddc:	4b8d      	ldr	r3, [pc, #564]	; (8007014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006dde:	61bb      	str	r3, [r7, #24]
    break;
 8006de0:	e10e      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006de2:	4b8d      	ldr	r3, [pc, #564]	; (8007018 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006de4:	61bb      	str	r3, [r7, #24]
    break;
 8006de6:	e10b      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006de8:	4b8c      	ldr	r3, [pc, #560]	; (800701c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006dea:	61bb      	str	r3, [r7, #24]
    break;
 8006dec:	e108      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006dee:	4b88      	ldr	r3, [pc, #544]	; (8007010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df2:	f003 0303 	and.w	r3, r3, #3
 8006df6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006df8:	4b85      	ldr	r3, [pc, #532]	; (8007010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfc:	091b      	lsrs	r3, r3, #4
 8006dfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e02:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006e04:	4b82      	ldr	r3, [pc, #520]	; (8007010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006e0e:	4b80      	ldr	r3, [pc, #512]	; (8007010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e12:	08db      	lsrs	r3, r3, #3
 8006e14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	fb02 f303 	mul.w	r3, r2, r3
 8006e1e:	ee07 3a90 	vmov	s15, r3
 8006e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e26:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 80e1 	beq.w	8006ff4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	f000 8083 	beq.w	8006f40 <HAL_RCC_GetSysClockFreq+0x204>
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	f200 80a1 	bhi.w	8006f84 <HAL_RCC_GetSysClockFreq+0x248>
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <HAL_RCC_GetSysClockFreq+0x114>
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d056      	beq.n	8006efc <HAL_RCC_GetSysClockFreq+0x1c0>
 8006e4e:	e099      	b.n	8006f84 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e50:	4b6f      	ldr	r3, [pc, #444]	; (8007010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0320 	and.w	r3, r3, #32
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d02d      	beq.n	8006eb8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006e5c:	4b6c      	ldr	r3, [pc, #432]	; (8007010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	08db      	lsrs	r3, r3, #3
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	4a6b      	ldr	r2, [pc, #428]	; (8007014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e68:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	ee07 3a90 	vmov	s15, r3
 8006e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	ee07 3a90 	vmov	s15, r3
 8006e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e86:	4b62      	ldr	r3, [pc, #392]	; (8007010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006eb6:	e087      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007024 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eca:	4b51      	ldr	r3, [pc, #324]	; (8007010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ede:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006efa:	e065      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f06:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007028 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f0e:	4b40      	ldr	r3, [pc, #256]	; (8007010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f22:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f3e:	e043      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	ee07 3a90 	vmov	s15, r3
 8006f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800702c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f52:	4b2f      	ldr	r3, [pc, #188]	; (8007010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f66:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f82:	e021      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007028 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f96:	4b1e      	ldr	r3, [pc, #120]	; (8007010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006faa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fc6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006fc8:	4b11      	ldr	r3, [pc, #68]	; (8007010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fcc:	0a5b      	lsrs	r3, r3, #9
 8006fce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	ee07 3a90 	vmov	s15, r3
 8006fdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fe0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fec:	ee17 3a90 	vmov	r3, s15
 8006ff0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006ff2:	e005      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	61bb      	str	r3, [r7, #24]
    break;
 8006ff8:	e002      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006ffa:	4b07      	ldr	r3, [pc, #28]	; (8007018 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006ffc:	61bb      	str	r3, [r7, #24]
    break;
 8006ffe:	bf00      	nop
  }

  return sysclockfreq;
 8007000:	69bb      	ldr	r3, [r7, #24]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3724      	adds	r7, #36	; 0x24
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	58024400 	.word	0x58024400
 8007014:	03d09000 	.word	0x03d09000
 8007018:	003d0900 	.word	0x003d0900
 800701c:	02dc6c00 	.word	0x02dc6c00
 8007020:	46000000 	.word	0x46000000
 8007024:	4c742400 	.word	0x4c742400
 8007028:	4a742400 	.word	0x4a742400
 800702c:	4c371b00 	.word	0x4c371b00

08007030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007036:	f7ff fe81 	bl	8006d3c <HAL_RCC_GetSysClockFreq>
 800703a:	4602      	mov	r2, r0
 800703c:	4b10      	ldr	r3, [pc, #64]	; (8007080 <HAL_RCC_GetHCLKFreq+0x50>)
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	0a1b      	lsrs	r3, r3, #8
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	490f      	ldr	r1, [pc, #60]	; (8007084 <HAL_RCC_GetHCLKFreq+0x54>)
 8007048:	5ccb      	ldrb	r3, [r1, r3]
 800704a:	f003 031f 	and.w	r3, r3, #31
 800704e:	fa22 f303 	lsr.w	r3, r2, r3
 8007052:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007054:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <HAL_RCC_GetHCLKFreq+0x50>)
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	f003 030f 	and.w	r3, r3, #15
 800705c:	4a09      	ldr	r2, [pc, #36]	; (8007084 <HAL_RCC_GetHCLKFreq+0x54>)
 800705e:	5cd3      	ldrb	r3, [r2, r3]
 8007060:	f003 031f 	and.w	r3, r3, #31
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	fa22 f303 	lsr.w	r3, r2, r3
 800706a:	4a07      	ldr	r2, [pc, #28]	; (8007088 <HAL_RCC_GetHCLKFreq+0x58>)
 800706c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800706e:	4a07      	ldr	r2, [pc, #28]	; (800708c <HAL_RCC_GetHCLKFreq+0x5c>)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007074:	4b04      	ldr	r3, [pc, #16]	; (8007088 <HAL_RCC_GetHCLKFreq+0x58>)
 8007076:	681b      	ldr	r3, [r3, #0]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	58024400 	.word	0x58024400
 8007084:	0800f590 	.word	0x0800f590
 8007088:	24000004 	.word	0x24000004
 800708c:	24000000 	.word	0x24000000

08007090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007094:	f7ff ffcc 	bl	8007030 <HAL_RCC_GetHCLKFreq>
 8007098:	4602      	mov	r2, r0
 800709a:	4b06      	ldr	r3, [pc, #24]	; (80070b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	091b      	lsrs	r3, r3, #4
 80070a0:	f003 0307 	and.w	r3, r3, #7
 80070a4:	4904      	ldr	r1, [pc, #16]	; (80070b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80070a6:	5ccb      	ldrb	r3, [r1, r3]
 80070a8:	f003 031f 	and.w	r3, r3, #31
 80070ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	58024400 	.word	0x58024400
 80070b8:	0800f590 	.word	0x0800f590

080070bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80070c0:	f7ff ffb6 	bl	8007030 <HAL_RCC_GetHCLKFreq>
 80070c4:	4602      	mov	r2, r0
 80070c6:	4b06      	ldr	r3, [pc, #24]	; (80070e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	0a1b      	lsrs	r3, r3, #8
 80070cc:	f003 0307 	and.w	r3, r3, #7
 80070d0:	4904      	ldr	r1, [pc, #16]	; (80070e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070d2:	5ccb      	ldrb	r3, [r1, r3]
 80070d4:	f003 031f 	and.w	r3, r3, #31
 80070d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80070dc:	4618      	mov	r0, r3
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	58024400 	.word	0x58024400
 80070e4:	0800f590 	.word	0x0800f590

080070e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070f0:	2300      	movs	r3, #0
 80070f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070f4:	2300      	movs	r3, #0
 80070f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d03f      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007108:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800710c:	d02a      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800710e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007112:	d824      	bhi.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007114:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007118:	d018      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800711a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800711e:	d81e      	bhi.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007128:	d007      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800712a:	e018      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800712c:	4bab      	ldr	r3, [pc, #684]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800712e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007130:	4aaa      	ldr	r2, [pc, #680]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007136:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007138:	e015      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3304      	adds	r3, #4
 800713e:	2102      	movs	r1, #2
 8007140:	4618      	mov	r0, r3
 8007142:	f001 f9cf 	bl	80084e4 <RCCEx_PLL2_Config>
 8007146:	4603      	mov	r3, r0
 8007148:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800714a:	e00c      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	3324      	adds	r3, #36	; 0x24
 8007150:	2102      	movs	r1, #2
 8007152:	4618      	mov	r0, r3
 8007154:	f001 fa78 	bl	8008648 <RCCEx_PLL3_Config>
 8007158:	4603      	mov	r3, r0
 800715a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800715c:	e003      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	75fb      	strb	r3, [r7, #23]
      break;
 8007162:	e000      	b.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007164:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007166:	7dfb      	ldrb	r3, [r7, #23]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d109      	bne.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800716c:	4b9b      	ldr	r3, [pc, #620]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800716e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007170:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007178:	4998      	ldr	r1, [pc, #608]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800717a:	4313      	orrs	r3, r2
 800717c:	650b      	str	r3, [r1, #80]	; 0x50
 800717e:	e001      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007180:	7dfb      	ldrb	r3, [r7, #23]
 8007182:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718c:	2b00      	cmp	r3, #0
 800718e:	d03d      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007194:	2b04      	cmp	r3, #4
 8007196:	d826      	bhi.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007198:	a201      	add	r2, pc, #4	; (adr r2, 80071a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800719a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719e:	bf00      	nop
 80071a0:	080071b5 	.word	0x080071b5
 80071a4:	080071c3 	.word	0x080071c3
 80071a8:	080071d5 	.word	0x080071d5
 80071ac:	080071ed 	.word	0x080071ed
 80071b0:	080071ed 	.word	0x080071ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071b4:	4b89      	ldr	r3, [pc, #548]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	4a88      	ldr	r2, [pc, #544]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071c0:	e015      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	3304      	adds	r3, #4
 80071c6:	2100      	movs	r1, #0
 80071c8:	4618      	mov	r0, r3
 80071ca:	f001 f98b 	bl	80084e4 <RCCEx_PLL2_Config>
 80071ce:	4603      	mov	r3, r0
 80071d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071d2:	e00c      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3324      	adds	r3, #36	; 0x24
 80071d8:	2100      	movs	r1, #0
 80071da:	4618      	mov	r0, r3
 80071dc:	f001 fa34 	bl	8008648 <RCCEx_PLL3_Config>
 80071e0:	4603      	mov	r3, r0
 80071e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80071e4:	e003      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	75fb      	strb	r3, [r7, #23]
      break;
 80071ea:	e000      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80071ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d109      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071f4:	4b79      	ldr	r3, [pc, #484]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071f8:	f023 0207 	bic.w	r2, r3, #7
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007200:	4976      	ldr	r1, [pc, #472]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007202:	4313      	orrs	r3, r2
 8007204:	650b      	str	r3, [r1, #80]	; 0x50
 8007206:	e001      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007208:	7dfb      	ldrb	r3, [r7, #23]
 800720a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007214:	2b00      	cmp	r3, #0
 8007216:	d042      	beq.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007220:	d02b      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007226:	d825      	bhi.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007228:	2bc0      	cmp	r3, #192	; 0xc0
 800722a:	d028      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800722c:	2bc0      	cmp	r3, #192	; 0xc0
 800722e:	d821      	bhi.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007230:	2b80      	cmp	r3, #128	; 0x80
 8007232:	d016      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007234:	2b80      	cmp	r3, #128	; 0x80
 8007236:	d81d      	bhi.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007238:	2b00      	cmp	r3, #0
 800723a:	d002      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800723c:	2b40      	cmp	r3, #64	; 0x40
 800723e:	d007      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007240:	e018      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007242:	4b66      	ldr	r3, [pc, #408]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007246:	4a65      	ldr	r2, [pc, #404]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800724c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800724e:	e017      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3304      	adds	r3, #4
 8007254:	2100      	movs	r1, #0
 8007256:	4618      	mov	r0, r3
 8007258:	f001 f944 	bl	80084e4 <RCCEx_PLL2_Config>
 800725c:	4603      	mov	r3, r0
 800725e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007260:	e00e      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3324      	adds	r3, #36	; 0x24
 8007266:	2100      	movs	r1, #0
 8007268:	4618      	mov	r0, r3
 800726a:	f001 f9ed 	bl	8008648 <RCCEx_PLL3_Config>
 800726e:	4603      	mov	r3, r0
 8007270:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007272:	e005      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	75fb      	strb	r3, [r7, #23]
      break;
 8007278:	e002      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800727a:	bf00      	nop
 800727c:	e000      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800727e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007280:	7dfb      	ldrb	r3, [r7, #23]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d109      	bne.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007286:	4b55      	ldr	r3, [pc, #340]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007292:	4952      	ldr	r1, [pc, #328]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007294:	4313      	orrs	r3, r2
 8007296:	650b      	str	r3, [r1, #80]	; 0x50
 8007298:	e001      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800729a:	7dfb      	ldrb	r3, [r7, #23]
 800729c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d049      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80072b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072b4:	d030      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80072b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80072ba:	d82a      	bhi.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80072bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072c0:	d02c      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80072c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80072c6:	d824      	bhi.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80072c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072cc:	d018      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80072ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072d2:	d81e      	bhi.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80072d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072dc:	d007      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80072de:	e018      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072e0:	4b3e      	ldr	r3, [pc, #248]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e4:	4a3d      	ldr	r2, [pc, #244]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80072ec:	e017      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	3304      	adds	r3, #4
 80072f2:	2100      	movs	r1, #0
 80072f4:	4618      	mov	r0, r3
 80072f6:	f001 f8f5 	bl	80084e4 <RCCEx_PLL2_Config>
 80072fa:	4603      	mov	r3, r0
 80072fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80072fe:	e00e      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	3324      	adds	r3, #36	; 0x24
 8007304:	2100      	movs	r1, #0
 8007306:	4618      	mov	r0, r3
 8007308:	f001 f99e 	bl	8008648 <RCCEx_PLL3_Config>
 800730c:	4603      	mov	r3, r0
 800730e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007310:	e005      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	75fb      	strb	r3, [r7, #23]
      break;
 8007316:	e002      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007318:	bf00      	nop
 800731a:	e000      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800731c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800731e:	7dfb      	ldrb	r3, [r7, #23]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d10a      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007324:	4b2d      	ldr	r3, [pc, #180]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007328:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007332:	492a      	ldr	r1, [pc, #168]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007334:	4313      	orrs	r3, r2
 8007336:	658b      	str	r3, [r1, #88]	; 0x58
 8007338:	e001      	b.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007346:	2b00      	cmp	r3, #0
 8007348:	d04c      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007350:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007354:	d030      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007356:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800735a:	d82a      	bhi.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800735c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007360:	d02c      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007362:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007366:	d824      	bhi.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800736c:	d018      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800736e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007372:	d81e      	bhi.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800737c:	d007      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800737e:	e018      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007380:	4b16      	ldr	r3, [pc, #88]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	4a15      	ldr	r2, [pc, #84]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800738a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800738c:	e017      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	3304      	adds	r3, #4
 8007392:	2100      	movs	r1, #0
 8007394:	4618      	mov	r0, r3
 8007396:	f001 f8a5 	bl	80084e4 <RCCEx_PLL2_Config>
 800739a:	4603      	mov	r3, r0
 800739c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800739e:	e00e      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	3324      	adds	r3, #36	; 0x24
 80073a4:	2100      	movs	r1, #0
 80073a6:	4618      	mov	r0, r3
 80073a8:	f001 f94e 	bl	8008648 <RCCEx_PLL3_Config>
 80073ac:	4603      	mov	r3, r0
 80073ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073b0:	e005      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	75fb      	strb	r3, [r7, #23]
      break;
 80073b6:	e002      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80073b8:	bf00      	nop
 80073ba:	e000      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80073bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073be:	7dfb      	ldrb	r3, [r7, #23]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10d      	bne.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80073c4:	4b05      	ldr	r3, [pc, #20]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80073d2:	4902      	ldr	r1, [pc, #8]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073d4:	4313      	orrs	r3, r2
 80073d6:	658b      	str	r3, [r1, #88]	; 0x58
 80073d8:	e004      	b.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80073da:	bf00      	nop
 80073dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e0:	7dfb      	ldrb	r3, [r7, #23]
 80073e2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d032      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f4:	2b30      	cmp	r3, #48	; 0x30
 80073f6:	d01c      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80073f8:	2b30      	cmp	r3, #48	; 0x30
 80073fa:	d817      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x344>
 80073fc:	2b20      	cmp	r3, #32
 80073fe:	d00c      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007400:	2b20      	cmp	r3, #32
 8007402:	d813      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007404:	2b00      	cmp	r3, #0
 8007406:	d016      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007408:	2b10      	cmp	r3, #16
 800740a:	d10f      	bne.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800740c:	4baf      	ldr	r3, [pc, #700]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800740e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007410:	4aae      	ldr	r2, [pc, #696]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007416:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007418:	e00e      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3304      	adds	r3, #4
 800741e:	2102      	movs	r1, #2
 8007420:	4618      	mov	r0, r3
 8007422:	f001 f85f 	bl	80084e4 <RCCEx_PLL2_Config>
 8007426:	4603      	mov	r3, r0
 8007428:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800742a:	e005      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	75fb      	strb	r3, [r7, #23]
      break;
 8007430:	e002      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007432:	bf00      	nop
 8007434:	e000      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007436:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007438:	7dfb      	ldrb	r3, [r7, #23]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d109      	bne.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800743e:	4ba3      	ldr	r3, [pc, #652]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007442:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800744a:	49a0      	ldr	r1, [pc, #640]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800744c:	4313      	orrs	r3, r2
 800744e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007450:	e001      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d047      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007466:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800746a:	d030      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800746c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007470:	d82a      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007472:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007476:	d02c      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007478:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800747c:	d824      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800747e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007482:	d018      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007488:	d81e      	bhi.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800748e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007492:	d007      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007494:	e018      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007496:	4b8d      	ldr	r3, [pc, #564]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	4a8c      	ldr	r2, [pc, #560]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800749c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074a2:	e017      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3304      	adds	r3, #4
 80074a8:	2100      	movs	r1, #0
 80074aa:	4618      	mov	r0, r3
 80074ac:	f001 f81a 	bl	80084e4 <RCCEx_PLL2_Config>
 80074b0:	4603      	mov	r3, r0
 80074b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074b4:	e00e      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3324      	adds	r3, #36	; 0x24
 80074ba:	2100      	movs	r1, #0
 80074bc:	4618      	mov	r0, r3
 80074be:	f001 f8c3 	bl	8008648 <RCCEx_PLL3_Config>
 80074c2:	4603      	mov	r3, r0
 80074c4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80074c6:	e005      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	75fb      	strb	r3, [r7, #23]
      break;
 80074cc:	e002      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80074ce:	bf00      	nop
 80074d0:	e000      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80074d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d109      	bne.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80074da:	4b7c      	ldr	r3, [pc, #496]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074de:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e6:	4979      	ldr	r1, [pc, #484]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	650b      	str	r3, [r1, #80]	; 0x50
 80074ec:	e001      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
 80074f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d049      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007502:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007506:	d02e      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800750c:	d828      	bhi.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800750e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007512:	d02a      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007514:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007518:	d822      	bhi.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800751a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800751e:	d026      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007520:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007524:	d81c      	bhi.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800752a:	d010      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800752c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007530:	d816      	bhi.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d01d      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800753a:	d111      	bne.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3304      	adds	r3, #4
 8007540:	2101      	movs	r1, #1
 8007542:	4618      	mov	r0, r3
 8007544:	f000 ffce 	bl	80084e4 <RCCEx_PLL2_Config>
 8007548:	4603      	mov	r3, r0
 800754a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800754c:	e012      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3324      	adds	r3, #36	; 0x24
 8007552:	2101      	movs	r1, #1
 8007554:	4618      	mov	r0, r3
 8007556:	f001 f877 	bl	8008648 <RCCEx_PLL3_Config>
 800755a:	4603      	mov	r3, r0
 800755c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800755e:	e009      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	75fb      	strb	r3, [r7, #23]
      break;
 8007564:	e006      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007566:	bf00      	nop
 8007568:	e004      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800756a:	bf00      	nop
 800756c:	e002      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800756e:	bf00      	nop
 8007570:	e000      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007572:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007574:	7dfb      	ldrb	r3, [r7, #23]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d109      	bne.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800757a:	4b54      	ldr	r3, [pc, #336]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800757c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800757e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007586:	4951      	ldr	r1, [pc, #324]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007588:	4313      	orrs	r3, r2
 800758a:	650b      	str	r3, [r1, #80]	; 0x50
 800758c:	e001      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800758e:	7dfb      	ldrb	r3, [r7, #23]
 8007590:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d04b      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80075a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075a8:	d02e      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80075aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075ae:	d828      	bhi.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80075b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b4:	d02a      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80075b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ba:	d822      	bhi.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80075bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075c0:	d026      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80075c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075c6:	d81c      	bhi.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80075c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075cc:	d010      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80075ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075d2:	d816      	bhi.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d01d      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80075d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075dc:	d111      	bne.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3304      	adds	r3, #4
 80075e2:	2101      	movs	r1, #1
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 ff7d 	bl	80084e4 <RCCEx_PLL2_Config>
 80075ea:	4603      	mov	r3, r0
 80075ec:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80075ee:	e012      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3324      	adds	r3, #36	; 0x24
 80075f4:	2101      	movs	r1, #1
 80075f6:	4618      	mov	r0, r3
 80075f8:	f001 f826 	bl	8008648 <RCCEx_PLL3_Config>
 80075fc:	4603      	mov	r3, r0
 80075fe:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007600:	e009      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	75fb      	strb	r3, [r7, #23]
      break;
 8007606:	e006      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007608:	bf00      	nop
 800760a:	e004      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800760c:	bf00      	nop
 800760e:	e002      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007610:	bf00      	nop
 8007612:	e000      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007616:	7dfb      	ldrb	r3, [r7, #23]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800761c:	4b2b      	ldr	r3, [pc, #172]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800761e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007620:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800762a:	4928      	ldr	r1, [pc, #160]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800762c:	4313      	orrs	r3, r2
 800762e:	658b      	str	r3, [r1, #88]	; 0x58
 8007630:	e001      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007632:	7dfb      	ldrb	r3, [r7, #23]
 8007634:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d02f      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800764a:	d00e      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800764c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007650:	d814      	bhi.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d015      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800765a:	d10f      	bne.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800765c:	4b1b      	ldr	r3, [pc, #108]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	4a1a      	ldr	r2, [pc, #104]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007666:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007668:	e00c      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3304      	adds	r3, #4
 800766e:	2101      	movs	r1, #1
 8007670:	4618      	mov	r0, r3
 8007672:	f000 ff37 	bl	80084e4 <RCCEx_PLL2_Config>
 8007676:	4603      	mov	r3, r0
 8007678:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800767a:	e003      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	75fb      	strb	r3, [r7, #23]
      break;
 8007680:	e000      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007682:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d109      	bne.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800768a:	4b10      	ldr	r3, [pc, #64]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800768c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007696:	490d      	ldr	r1, [pc, #52]	; (80076cc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007698:	4313      	orrs	r3, r2
 800769a:	650b      	str	r3, [r1, #80]	; 0x50
 800769c:	e001      	b.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769e:	7dfb      	ldrb	r3, [r7, #23]
 80076a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d033      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076b2:	2b03      	cmp	r3, #3
 80076b4:	d81c      	bhi.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80076b6:	a201      	add	r2, pc, #4	; (adr r2, 80076bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80076b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076bc:	080076f7 	.word	0x080076f7
 80076c0:	080076d1 	.word	0x080076d1
 80076c4:	080076df 	.word	0x080076df
 80076c8:	080076f7 	.word	0x080076f7
 80076cc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d0:	4bb8      	ldr	r3, [pc, #736]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	4ab7      	ldr	r2, [pc, #732]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80076dc:	e00c      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3304      	adds	r3, #4
 80076e2:	2102      	movs	r1, #2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 fefd 	bl	80084e4 <RCCEx_PLL2_Config>
 80076ea:	4603      	mov	r3, r0
 80076ec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80076ee:	e003      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	75fb      	strb	r3, [r7, #23]
      break;
 80076f4:	e000      	b.n	80076f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80076f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d109      	bne.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80076fe:	4bad      	ldr	r3, [pc, #692]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007702:	f023 0203 	bic.w	r2, r3, #3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770a:	49aa      	ldr	r1, [pc, #680]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800770c:	4313      	orrs	r3, r2
 800770e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007710:	e001      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007712:	7dfb      	ldrb	r3, [r7, #23]
 8007714:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800771e:	2b00      	cmp	r3, #0
 8007720:	f000 8086 	beq.w	8007830 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007724:	4ba4      	ldr	r3, [pc, #656]	; (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4aa3      	ldr	r2, [pc, #652]	; (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800772a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800772e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007730:	f7fb fec2 	bl	80034b8 <HAL_GetTick>
 8007734:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007736:	e009      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007738:	f7fb febe 	bl	80034b8 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b64      	cmp	r3, #100	; 0x64
 8007744:	d902      	bls.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	75fb      	strb	r3, [r7, #23]
        break;
 800774a:	e005      	b.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800774c:	4b9a      	ldr	r3, [pc, #616]	; (80079b8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007754:	2b00      	cmp	r3, #0
 8007756:	d0ef      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007758:	7dfb      	ldrb	r3, [r7, #23]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d166      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800775e:	4b95      	ldr	r3, [pc, #596]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007760:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007768:	4053      	eors	r3, r2
 800776a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800776e:	2b00      	cmp	r3, #0
 8007770:	d013      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007772:	4b90      	ldr	r3, [pc, #576]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800777a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800777c:	4b8d      	ldr	r3, [pc, #564]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800777e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007780:	4a8c      	ldr	r2, [pc, #560]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007786:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007788:	4b8a      	ldr	r3, [pc, #552]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800778a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800778c:	4a89      	ldr	r2, [pc, #548]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800778e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007792:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007794:	4a87      	ldr	r2, [pc, #540]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a4:	d115      	bne.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a6:	f7fb fe87 	bl	80034b8 <HAL_GetTick>
 80077aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077ac:	e00b      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077ae:	f7fb fe83 	bl	80034b8 <HAL_GetTick>
 80077b2:	4602      	mov	r2, r0
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80077bc:	4293      	cmp	r3, r2
 80077be:	d902      	bls.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	75fb      	strb	r3, [r7, #23]
            break;
 80077c4:	e005      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80077c6:	4b7b      	ldr	r3, [pc, #492]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ca:	f003 0302 	and.w	r3, r3, #2
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0ed      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d126      	bne.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077e6:	d10d      	bne.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80077e8:	4b72      	ldr	r3, [pc, #456]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80077f6:	0919      	lsrs	r1, r3, #4
 80077f8:	4b70      	ldr	r3, [pc, #448]	; (80079bc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80077fa:	400b      	ands	r3, r1
 80077fc:	496d      	ldr	r1, [pc, #436]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	610b      	str	r3, [r1, #16]
 8007802:	e005      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007804:	4b6b      	ldr	r3, [pc, #428]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	4a6a      	ldr	r2, [pc, #424]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800780a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800780e:	6113      	str	r3, [r2, #16]
 8007810:	4b68      	ldr	r3, [pc, #416]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007812:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800781a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800781e:	4965      	ldr	r1, [pc, #404]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007820:	4313      	orrs	r3, r2
 8007822:	670b      	str	r3, [r1, #112]	; 0x70
 8007824:	e004      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007826:	7dfb      	ldrb	r3, [r7, #23]
 8007828:	75bb      	strb	r3, [r7, #22]
 800782a:	e001      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800782c:	7dfb      	ldrb	r3, [r7, #23]
 800782e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d07e      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007840:	2b28      	cmp	r3, #40	; 0x28
 8007842:	d867      	bhi.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007844:	a201      	add	r2, pc, #4	; (adr r2, 800784c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784a:	bf00      	nop
 800784c:	0800791b 	.word	0x0800791b
 8007850:	08007915 	.word	0x08007915
 8007854:	08007915 	.word	0x08007915
 8007858:	08007915 	.word	0x08007915
 800785c:	08007915 	.word	0x08007915
 8007860:	08007915 	.word	0x08007915
 8007864:	08007915 	.word	0x08007915
 8007868:	08007915 	.word	0x08007915
 800786c:	080078f1 	.word	0x080078f1
 8007870:	08007915 	.word	0x08007915
 8007874:	08007915 	.word	0x08007915
 8007878:	08007915 	.word	0x08007915
 800787c:	08007915 	.word	0x08007915
 8007880:	08007915 	.word	0x08007915
 8007884:	08007915 	.word	0x08007915
 8007888:	08007915 	.word	0x08007915
 800788c:	08007903 	.word	0x08007903
 8007890:	08007915 	.word	0x08007915
 8007894:	08007915 	.word	0x08007915
 8007898:	08007915 	.word	0x08007915
 800789c:	08007915 	.word	0x08007915
 80078a0:	08007915 	.word	0x08007915
 80078a4:	08007915 	.word	0x08007915
 80078a8:	08007915 	.word	0x08007915
 80078ac:	0800791b 	.word	0x0800791b
 80078b0:	08007915 	.word	0x08007915
 80078b4:	08007915 	.word	0x08007915
 80078b8:	08007915 	.word	0x08007915
 80078bc:	08007915 	.word	0x08007915
 80078c0:	08007915 	.word	0x08007915
 80078c4:	08007915 	.word	0x08007915
 80078c8:	08007915 	.word	0x08007915
 80078cc:	0800791b 	.word	0x0800791b
 80078d0:	08007915 	.word	0x08007915
 80078d4:	08007915 	.word	0x08007915
 80078d8:	08007915 	.word	0x08007915
 80078dc:	08007915 	.word	0x08007915
 80078e0:	08007915 	.word	0x08007915
 80078e4:	08007915 	.word	0x08007915
 80078e8:	08007915 	.word	0x08007915
 80078ec:	0800791b 	.word	0x0800791b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3304      	adds	r3, #4
 80078f4:	2101      	movs	r1, #1
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fdf4 	bl	80084e4 <RCCEx_PLL2_Config>
 80078fc:	4603      	mov	r3, r0
 80078fe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007900:	e00c      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3324      	adds	r3, #36	; 0x24
 8007906:	2101      	movs	r1, #1
 8007908:	4618      	mov	r0, r3
 800790a:	f000 fe9d 	bl	8008648 <RCCEx_PLL3_Config>
 800790e:	4603      	mov	r3, r0
 8007910:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007912:	e003      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	75fb      	strb	r3, [r7, #23]
      break;
 8007918:	e000      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800791a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800791c:	7dfb      	ldrb	r3, [r7, #23]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d109      	bne.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007922:	4b24      	ldr	r3, [pc, #144]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007926:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800792e:	4921      	ldr	r1, [pc, #132]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007930:	4313      	orrs	r3, r2
 8007932:	654b      	str	r3, [r1, #84]	; 0x54
 8007934:	e001      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007936:	7dfb      	ldrb	r3, [r7, #23]
 8007938:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d03e      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800794a:	2b05      	cmp	r3, #5
 800794c:	d820      	bhi.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800794e:	a201      	add	r2, pc, #4	; (adr r2, 8007954 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007954:	08007997 	.word	0x08007997
 8007958:	0800796d 	.word	0x0800796d
 800795c:	0800797f 	.word	0x0800797f
 8007960:	08007997 	.word	0x08007997
 8007964:	08007997 	.word	0x08007997
 8007968:	08007997 	.word	0x08007997
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	3304      	adds	r3, #4
 8007970:	2101      	movs	r1, #1
 8007972:	4618      	mov	r0, r3
 8007974:	f000 fdb6 	bl	80084e4 <RCCEx_PLL2_Config>
 8007978:	4603      	mov	r3, r0
 800797a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800797c:	e00c      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	3324      	adds	r3, #36	; 0x24
 8007982:	2101      	movs	r1, #1
 8007984:	4618      	mov	r0, r3
 8007986:	f000 fe5f 	bl	8008648 <RCCEx_PLL3_Config>
 800798a:	4603      	mov	r3, r0
 800798c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800798e:	e003      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	75fb      	strb	r3, [r7, #23]
      break;
 8007994:	e000      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d110      	bne.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800799e:	4b05      	ldr	r3, [pc, #20]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079a2:	f023 0207 	bic.w	r2, r3, #7
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079aa:	4902      	ldr	r1, [pc, #8]	; (80079b4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	654b      	str	r3, [r1, #84]	; 0x54
 80079b0:	e008      	b.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80079b2:	bf00      	nop
 80079b4:	58024400 	.word	0x58024400
 80079b8:	58024800 	.word	0x58024800
 80079bc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
 80079c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d039      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d6:	2b05      	cmp	r3, #5
 80079d8:	d820      	bhi.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x934>
 80079da:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	08007a23 	.word	0x08007a23
 80079e4:	080079f9 	.word	0x080079f9
 80079e8:	08007a0b 	.word	0x08007a0b
 80079ec:	08007a23 	.word	0x08007a23
 80079f0:	08007a23 	.word	0x08007a23
 80079f4:	08007a23 	.word	0x08007a23
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3304      	adds	r3, #4
 80079fc:	2101      	movs	r1, #1
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 fd70 	bl	80084e4 <RCCEx_PLL2_Config>
 8007a04:	4603      	mov	r3, r0
 8007a06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a08:	e00c      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	3324      	adds	r3, #36	; 0x24
 8007a0e:	2101      	movs	r1, #1
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 fe19 	bl	8008648 <RCCEx_PLL3_Config>
 8007a16:	4603      	mov	r3, r0
 8007a18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007a1a:	e003      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a20:	e000      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10a      	bne.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a2a:	4bb7      	ldr	r3, [pc, #732]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2e:	f023 0207 	bic.w	r2, r3, #7
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a38:	49b3      	ldr	r1, [pc, #716]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	658b      	str	r3, [r1, #88]	; 0x58
 8007a3e:	e001      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0320 	and.w	r3, r3, #32
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d04b      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a5a:	d02e      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a60:	d828      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a66:	d02a      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a6c:	d822      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007a6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a72:	d026      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007a74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a78:	d81c      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a7e:	d010      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a84:	d816      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d01d      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007a8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a8e:	d111      	bne.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	3304      	adds	r3, #4
 8007a94:	2100      	movs	r1, #0
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fd24 	bl	80084e4 <RCCEx_PLL2_Config>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007aa0:	e012      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3324      	adds	r3, #36	; 0x24
 8007aa6:	2102      	movs	r1, #2
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 fdcd 	bl	8008648 <RCCEx_PLL3_Config>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007ab2:	e009      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab8:	e006      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007aba:	bf00      	nop
 8007abc:	e004      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007abe:	bf00      	nop
 8007ac0:	e002      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007ac2:	bf00      	nop
 8007ac4:	e000      	b.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007ac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ac8:	7dfb      	ldrb	r3, [r7, #23]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10a      	bne.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ace:	4b8e      	ldr	r3, [pc, #568]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007adc:	498a      	ldr	r1, [pc, #552]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	654b      	str	r3, [r1, #84]	; 0x54
 8007ae2:	e001      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ae4:	7dfb      	ldrb	r3, [r7, #23]
 8007ae6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d04b      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007afa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007afe:	d02e      	beq.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007b00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007b04:	d828      	bhi.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0a:	d02a      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b10:	d822      	bhi.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b16:	d026      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007b18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b1c:	d81c      	bhi.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b22:	d010      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007b24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b28:	d816      	bhi.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d01d      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b32:	d111      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3304      	adds	r3, #4
 8007b38:	2100      	movs	r1, #0
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 fcd2 	bl	80084e4 <RCCEx_PLL2_Config>
 8007b40:	4603      	mov	r3, r0
 8007b42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007b44:	e012      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	3324      	adds	r3, #36	; 0x24
 8007b4a:	2102      	movs	r1, #2
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 fd7b 	bl	8008648 <RCCEx_PLL3_Config>
 8007b52:	4603      	mov	r3, r0
 8007b54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007b56:	e009      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b5c:	e006      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007b5e:	bf00      	nop
 8007b60:	e004      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007b62:	bf00      	nop
 8007b64:	e002      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007b66:	bf00      	nop
 8007b68:	e000      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007b6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b72:	4b65      	ldr	r3, [pc, #404]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b76:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007b80:	4961      	ldr	r1, [pc, #388]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	658b      	str	r3, [r1, #88]	; 0x58
 8007b86:	e001      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b88:	7dfb      	ldrb	r3, [r7, #23]
 8007b8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d04b      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b9e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007ba2:	d02e      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007ba4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007ba8:	d828      	bhi.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bae:	d02a      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb4:	d822      	bhi.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007bb6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007bba:	d026      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007bbc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007bc0:	d81c      	bhi.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bc6:	d010      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bcc:	d816      	bhi.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d01d      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bd6:	d111      	bne.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	3304      	adds	r3, #4
 8007bdc:	2100      	movs	r1, #0
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 fc80 	bl	80084e4 <RCCEx_PLL2_Config>
 8007be4:	4603      	mov	r3, r0
 8007be6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007be8:	e012      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	3324      	adds	r3, #36	; 0x24
 8007bee:	2102      	movs	r1, #2
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 fd29 	bl	8008648 <RCCEx_PLL3_Config>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007bfa:	e009      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8007c00:	e006      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c02:	bf00      	nop
 8007c04:	e004      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c06:	bf00      	nop
 8007c08:	e002      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c0a:	bf00      	nop
 8007c0c:	e000      	b.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007c0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10a      	bne.n	8007c2c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007c16:	4b3c      	ldr	r3, [pc, #240]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c24:	4938      	ldr	r1, [pc, #224]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c26:	4313      	orrs	r3, r2
 8007c28:	658b      	str	r3, [r1, #88]	; 0x58
 8007c2a:	e001      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2c:	7dfb      	ldrb	r3, [r7, #23]
 8007c2e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0308 	and.w	r3, r3, #8
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d01a      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c46:	d10a      	bne.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	3324      	adds	r3, #36	; 0x24
 8007c4c:	2102      	movs	r1, #2
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 fcfa 	bl	8008648 <RCCEx_PLL3_Config>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007c5e:	4b2a      	ldr	r3, [pc, #168]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c6c:	4926      	ldr	r1, [pc, #152]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0310 	and.w	r3, r3, #16
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d01a      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c88:	d10a      	bne.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	3324      	adds	r3, #36	; 0x24
 8007c8e:	2102      	movs	r1, #2
 8007c90:	4618      	mov	r0, r3
 8007c92:	f000 fcd9 	bl	8008648 <RCCEx_PLL3_Config>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ca0:	4b19      	ldr	r3, [pc, #100]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cae:	4916      	ldr	r1, [pc, #88]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d036      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cca:	d01f      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007ccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cd0:	d817      	bhi.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cda:	d009      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007cdc:	e011      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 fbfd 	bl	80084e4 <RCCEx_PLL2_Config>
 8007cea:	4603      	mov	r3, r0
 8007cec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007cee:	e00e      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3324      	adds	r3, #36	; 0x24
 8007cf4:	2102      	movs	r1, #2
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 fca6 	bl	8008648 <RCCEx_PLL3_Config>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007d00:	e005      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	75fb      	strb	r3, [r7, #23]
      break;
 8007d06:	e002      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007d08:	58024400 	.word	0x58024400
      break;
 8007d0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10a      	bne.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d14:	4b93      	ldr	r3, [pc, #588]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007d22:	4990      	ldr	r1, [pc, #576]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	658b      	str	r3, [r1, #88]	; 0x58
 8007d28:	e001      	b.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2a:	7dfb      	ldrb	r3, [r7, #23]
 8007d2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d033      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d44:	d01c      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007d46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d4a:	d816      	bhi.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d50:	d003      	beq.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007d52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d56:	d007      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007d58:	e00f      	b.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d5a:	4b82      	ldr	r3, [pc, #520]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5e:	4a81      	ldr	r2, [pc, #516]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007d66:	e00c      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3324      	adds	r3, #36	; 0x24
 8007d6c:	2101      	movs	r1, #1
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 fc6a 	bl	8008648 <RCCEx_PLL3_Config>
 8007d74:	4603      	mov	r3, r0
 8007d76:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007d78:	e003      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d7e:	e000      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10a      	bne.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007d88:	4b76      	ldr	r3, [pc, #472]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d96:	4973      	ldr	r1, [pc, #460]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	654b      	str	r3, [r1, #84]	; 0x54
 8007d9c:	e001      	b.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d029      	beq.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dba:	d007      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007dbc:	e00f      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dbe:	4b69      	ldr	r3, [pc, #420]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc2:	4a68      	ldr	r2, [pc, #416]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007dca:	e00b      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	3304      	adds	r3, #4
 8007dd0:	2102      	movs	r1, #2
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fb86 	bl	80084e4 <RCCEx_PLL2_Config>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007ddc:	e002      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007dde:	2301      	movs	r3, #1
 8007de0:	75fb      	strb	r3, [r7, #23]
      break;
 8007de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d109      	bne.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007dea:	4b5e      	ldr	r3, [pc, #376]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df6:	495b      	ldr	r1, [pc, #364]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007dfc:	e001      	b.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dfe:	7dfb      	ldrb	r3, [r7, #23]
 8007e00:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00a      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3324      	adds	r3, #36	; 0x24
 8007e12:	2102      	movs	r1, #2
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 fc17 	bl	8008648 <RCCEx_PLL3_Config>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d030      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e38:	d017      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e3e:	d811      	bhi.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e44:	d013      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e4a:	d80b      	bhi.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d010      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e54:	d106      	bne.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e56:	4b43      	ldr	r3, [pc, #268]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5a:	4a42      	ldr	r2, [pc, #264]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007e62:	e007      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	75fb      	strb	r3, [r7, #23]
      break;
 8007e68:	e004      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007e6a:	bf00      	nop
 8007e6c:	e002      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007e6e:	bf00      	nop
 8007e70:	e000      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007e72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d109      	bne.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007e7a:	4b3a      	ldr	r3, [pc, #232]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e86:	4937      	ldr	r1, [pc, #220]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	654b      	str	r3, [r1, #84]	; 0x54
 8007e8c:	e001      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
 8007e90:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d008      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e9e:	4b31      	ldr	r3, [pc, #196]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ea2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eaa:	492e      	ldr	r1, [pc, #184]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d009      	beq.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007ebc:	4b29      	ldr	r3, [pc, #164]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007eca:	4926      	ldr	r1, [pc, #152]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d008      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007edc:	4b21      	ldr	r3, [pc, #132]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ee8:	491e      	ldr	r1, [pc, #120]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00d      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007efa:	4b1a      	ldr	r3, [pc, #104]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	4a19      	ldr	r2, [pc, #100]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007f04:	6113      	str	r3, [r2, #16]
 8007f06:	4b17      	ldr	r3, [pc, #92]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f08:	691a      	ldr	r2, [r3, #16]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007f10:	4914      	ldr	r1, [pc, #80]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	da08      	bge.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f1e:	4b11      	ldr	r3, [pc, #68]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f2a:	490e      	ldr	r1, [pc, #56]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d009      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f3c:	4b09      	ldr	r3, [pc, #36]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f4a:	4906      	ldr	r1, [pc, #24]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007f50:	7dbb      	ldrb	r3, [r7, #22]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007f56:	2300      	movs	r3, #0
 8007f58:	e000      	b.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	58024400 	.word	0x58024400

08007f68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f6c:	f7ff f860 	bl	8007030 <HAL_RCC_GetHCLKFreq>
 8007f70:	4602      	mov	r2, r0
 8007f72:	4b06      	ldr	r3, [pc, #24]	; (8007f8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	091b      	lsrs	r3, r3, #4
 8007f78:	f003 0307 	and.w	r3, r3, #7
 8007f7c:	4904      	ldr	r1, [pc, #16]	; (8007f90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f7e:	5ccb      	ldrb	r3, [r1, r3]
 8007f80:	f003 031f 	and.w	r3, r3, #31
 8007f84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	58024400 	.word	0x58024400
 8007f90:	0800f590 	.word	0x0800f590

08007f94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b089      	sub	sp, #36	; 0x24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f9c:	4ba1      	ldr	r3, [pc, #644]	; (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa0:	f003 0303 	and.w	r3, r3, #3
 8007fa4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007fa6:	4b9f      	ldr	r3, [pc, #636]	; (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007faa:	0b1b      	lsrs	r3, r3, #12
 8007fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fb0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007fb2:	4b9c      	ldr	r3, [pc, #624]	; (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb6:	091b      	lsrs	r3, r3, #4
 8007fb8:	f003 0301 	and.w	r3, r3, #1
 8007fbc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007fbe:	4b99      	ldr	r3, [pc, #612]	; (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc2:	08db      	lsrs	r3, r3, #3
 8007fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	fb02 f303 	mul.w	r3, r2, r3
 8007fce:	ee07 3a90 	vmov	s15, r3
 8007fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 8111 	beq.w	8008204 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	f000 8083 	beq.w	80080f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	f200 80a1 	bhi.w	8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d003      	beq.n	8008000 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d056      	beq.n	80080ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007ffe:	e099      	b.n	8008134 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008000:	4b88      	ldr	r3, [pc, #544]	; (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0320 	and.w	r3, r3, #32
 8008008:	2b00      	cmp	r3, #0
 800800a:	d02d      	beq.n	8008068 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800800c:	4b85      	ldr	r3, [pc, #532]	; (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	08db      	lsrs	r3, r3, #3
 8008012:	f003 0303 	and.w	r3, r3, #3
 8008016:	4a84      	ldr	r2, [pc, #528]	; (8008228 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008018:	fa22 f303 	lsr.w	r3, r2, r3
 800801c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	ee07 3a90 	vmov	s15, r3
 8008024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	ee07 3a90 	vmov	s15, r3
 800802e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008036:	4b7b      	ldr	r3, [pc, #492]	; (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803e:	ee07 3a90 	vmov	s15, r3
 8008042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008046:	ed97 6a03 	vldr	s12, [r7, #12]
 800804a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800822c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800804e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800805a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800805e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008062:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008066:	e087      	b.n	8008178 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	ee07 3a90 	vmov	s15, r3
 800806e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008072:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800807a:	4b6a      	ldr	r3, [pc, #424]	; (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800807c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008082:	ee07 3a90 	vmov	s15, r3
 8008086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800808a:	ed97 6a03 	vldr	s12, [r7, #12]
 800808e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800822c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800809a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800809e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080aa:	e065      	b.n	8008178 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	ee07 3a90 	vmov	s15, r3
 80080b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080be:	4b59      	ldr	r3, [pc, #356]	; (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c6:	ee07 3a90 	vmov	s15, r3
 80080ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80080d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800822c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080ee:	e043      	b.n	8008178 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	ee07 3a90 	vmov	s15, r3
 80080f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008238 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80080fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008102:	4b48      	ldr	r3, [pc, #288]	; (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008112:	ed97 6a03 	vldr	s12, [r7, #12]
 8008116:	eddf 5a45 	vldr	s11, [pc, #276]	; 800822c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800811a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800811e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800812a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800812e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008132:	e021      	b.n	8008178 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	ee07 3a90 	vmov	s15, r3
 800813a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800813e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008146:	4b37      	ldr	r3, [pc, #220]	; (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800814e:	ee07 3a90 	vmov	s15, r3
 8008152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008156:	ed97 6a03 	vldr	s12, [r7, #12]
 800815a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800822c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800815e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800816a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800816e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008172:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008176:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008178:	4b2a      	ldr	r3, [pc, #168]	; (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800817a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817c:	0a5b      	lsrs	r3, r3, #9
 800817e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008182:	ee07 3a90 	vmov	s15, r3
 8008186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800818e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008192:	edd7 6a07 	vldr	s13, [r7, #28]
 8008196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800819a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800819e:	ee17 2a90 	vmov	r2, s15
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80081a6:	4b1f      	ldr	r3, [pc, #124]	; (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081aa:	0c1b      	lsrs	r3, r3, #16
 80081ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081b0:	ee07 3a90 	vmov	s15, r3
 80081b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80081c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081cc:	ee17 2a90 	vmov	r2, s15
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80081d4:	4b13      	ldr	r3, [pc, #76]	; (8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d8:	0e1b      	lsrs	r3, r3, #24
 80081da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081de:	ee07 3a90 	vmov	s15, r3
 80081e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80081f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081fa:	ee17 2a90 	vmov	r2, s15
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008202:	e008      	b.n	8008216 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	609a      	str	r2, [r3, #8]
}
 8008216:	bf00      	nop
 8008218:	3724      	adds	r7, #36	; 0x24
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	58024400 	.word	0x58024400
 8008228:	03d09000 	.word	0x03d09000
 800822c:	46000000 	.word	0x46000000
 8008230:	4c742400 	.word	0x4c742400
 8008234:	4a742400 	.word	0x4a742400
 8008238:	4c371b00 	.word	0x4c371b00

0800823c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800823c:	b480      	push	{r7}
 800823e:	b089      	sub	sp, #36	; 0x24
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008244:	4ba1      	ldr	r3, [pc, #644]	; (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008248:	f003 0303 	and.w	r3, r3, #3
 800824c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800824e:	4b9f      	ldr	r3, [pc, #636]	; (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008252:	0d1b      	lsrs	r3, r3, #20
 8008254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008258:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800825a:	4b9c      	ldr	r3, [pc, #624]	; (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800825c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825e:	0a1b      	lsrs	r3, r3, #8
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008266:	4b99      	ldr	r3, [pc, #612]	; (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800826a:	08db      	lsrs	r3, r3, #3
 800826c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	fb02 f303 	mul.w	r3, r2, r3
 8008276:	ee07 3a90 	vmov	s15, r3
 800827a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 8111 	beq.w	80084ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	2b02      	cmp	r3, #2
 800828e:	f000 8083 	beq.w	8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	2b02      	cmp	r3, #2
 8008296:	f200 80a1 	bhi.w	80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d003      	beq.n	80082a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80082a0:	69bb      	ldr	r3, [r7, #24]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d056      	beq.n	8008354 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80082a6:	e099      	b.n	80083dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082a8:	4b88      	ldr	r3, [pc, #544]	; (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0320 	and.w	r3, r3, #32
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d02d      	beq.n	8008310 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082b4:	4b85      	ldr	r3, [pc, #532]	; (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	08db      	lsrs	r3, r3, #3
 80082ba:	f003 0303 	and.w	r3, r3, #3
 80082be:	4a84      	ldr	r2, [pc, #528]	; (80084d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80082c0:	fa22 f303 	lsr.w	r3, r2, r3
 80082c4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	ee07 3a90 	vmov	s15, r3
 80082cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	ee07 3a90 	vmov	s15, r3
 80082d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082de:	4b7b      	ldr	r3, [pc, #492]	; (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e6:	ee07 3a90 	vmov	s15, r3
 80082ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80082f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80082f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800830a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800830e:	e087      	b.n	8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	ee07 3a90 	vmov	s15, r3
 8008316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800831e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008322:	4b6a      	ldr	r3, [pc, #424]	; (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800832a:	ee07 3a90 	vmov	s15, r3
 800832e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008332:	ed97 6a03 	vldr	s12, [r7, #12]
 8008336:	eddf 5a67 	vldr	s11, [pc, #412]	; 80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800833a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800833e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800834a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800834e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008352:	e065      	b.n	8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	ee07 3a90 	vmov	s15, r3
 800835a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800835e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80084dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008366:	4b59      	ldr	r3, [pc, #356]	; (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836e:	ee07 3a90 	vmov	s15, r3
 8008372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008376:	ed97 6a03 	vldr	s12, [r7, #12]
 800837a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800837e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800838a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800838e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008392:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008396:	e043      	b.n	8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	ee07 3a90 	vmov	s15, r3
 800839e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80083a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083aa:	4b48      	ldr	r3, [pc, #288]	; (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b2:	ee07 3a90 	vmov	s15, r3
 80083b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80083be:	eddf 5a45 	vldr	s11, [pc, #276]	; 80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083da:	e021      	b.n	8008420 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80084dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80083ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ee:	4b37      	ldr	r3, [pc, #220]	; (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008402:	eddf 5a34 	vldr	s11, [pc, #208]	; 80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800840a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800840e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800841a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800841e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008420:	4b2a      	ldr	r3, [pc, #168]	; (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008424:	0a5b      	lsrs	r3, r3, #9
 8008426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800842a:	ee07 3a90 	vmov	s15, r3
 800842e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008436:	ee37 7a87 	vadd.f32	s14, s15, s14
 800843a:	edd7 6a07 	vldr	s13, [r7, #28]
 800843e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008446:	ee17 2a90 	vmov	r2, s15
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800844e:	4b1f      	ldr	r3, [pc, #124]	; (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008452:	0c1b      	lsrs	r3, r3, #16
 8008454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008458:	ee07 3a90 	vmov	s15, r3
 800845c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008464:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008468:	edd7 6a07 	vldr	s13, [r7, #28]
 800846c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008474:	ee17 2a90 	vmov	r2, s15
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800847c:	4b13      	ldr	r3, [pc, #76]	; (80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800847e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008480:	0e1b      	lsrs	r3, r3, #24
 8008482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008496:	edd7 6a07 	vldr	s13, [r7, #28]
 800849a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800849e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084a2:	ee17 2a90 	vmov	r2, s15
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80084aa:	e008      	b.n	80084be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	609a      	str	r2, [r3, #8]
}
 80084be:	bf00      	nop
 80084c0:	3724      	adds	r7, #36	; 0x24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	58024400 	.word	0x58024400
 80084d0:	03d09000 	.word	0x03d09000
 80084d4:	46000000 	.word	0x46000000
 80084d8:	4c742400 	.word	0x4c742400
 80084dc:	4a742400 	.word	0x4a742400
 80084e0:	4c371b00 	.word	0x4c371b00

080084e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80084f2:	4b53      	ldr	r3, [pc, #332]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80084f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d101      	bne.n	8008502 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e099      	b.n	8008636 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008502:	4b4f      	ldr	r3, [pc, #316]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a4e      	ldr	r2, [pc, #312]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 8008508:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800850c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800850e:	f7fa ffd3 	bl	80034b8 <HAL_GetTick>
 8008512:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008514:	e008      	b.n	8008528 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008516:	f7fa ffcf 	bl	80034b8 <HAL_GetTick>
 800851a:	4602      	mov	r2, r0
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	1ad3      	subs	r3, r2, r3
 8008520:	2b02      	cmp	r3, #2
 8008522:	d901      	bls.n	8008528 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008524:	2303      	movs	r3, #3
 8008526:	e086      	b.n	8008636 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008528:	4b45      	ldr	r3, [pc, #276]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1f0      	bne.n	8008516 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008534:	4b42      	ldr	r3, [pc, #264]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 8008536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008538:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	031b      	lsls	r3, r3, #12
 8008542:	493f      	ldr	r1, [pc, #252]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 8008544:	4313      	orrs	r3, r2
 8008546:	628b      	str	r3, [r1, #40]	; 0x28
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	3b01      	subs	r3, #1
 800854e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	3b01      	subs	r3, #1
 8008558:	025b      	lsls	r3, r3, #9
 800855a:	b29b      	uxth	r3, r3
 800855c:	431a      	orrs	r2, r3
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	3b01      	subs	r3, #1
 8008564:	041b      	lsls	r3, r3, #16
 8008566:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800856a:	431a      	orrs	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	3b01      	subs	r3, #1
 8008572:	061b      	lsls	r3, r3, #24
 8008574:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008578:	4931      	ldr	r1, [pc, #196]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 800857a:	4313      	orrs	r3, r2
 800857c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800857e:	4b30      	ldr	r3, [pc, #192]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 8008580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008582:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	492d      	ldr	r1, [pc, #180]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 800858c:	4313      	orrs	r3, r2
 800858e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008590:	4b2b      	ldr	r3, [pc, #172]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	f023 0220 	bic.w	r2, r3, #32
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	4928      	ldr	r1, [pc, #160]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80085a2:	4b27      	ldr	r3, [pc, #156]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a6:	4a26      	ldr	r2, [pc, #152]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085a8:	f023 0310 	bic.w	r3, r3, #16
 80085ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80085ae:	4b24      	ldr	r3, [pc, #144]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085b2:	4b24      	ldr	r3, [pc, #144]	; (8008644 <RCCEx_PLL2_Config+0x160>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	69d2      	ldr	r2, [r2, #28]
 80085ba:	00d2      	lsls	r2, r2, #3
 80085bc:	4920      	ldr	r1, [pc, #128]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80085c2:	4b1f      	ldr	r3, [pc, #124]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c6:	4a1e      	ldr	r2, [pc, #120]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085c8:	f043 0310 	orr.w	r3, r3, #16
 80085cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d106      	bne.n	80085e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80085d4:	4b1a      	ldr	r3, [pc, #104]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	4a19      	ldr	r2, [pc, #100]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80085de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085e0:	e00f      	b.n	8008602 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d106      	bne.n	80085f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80085e8:	4b15      	ldr	r3, [pc, #84]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ec:	4a14      	ldr	r2, [pc, #80]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80085f4:	e005      	b.n	8008602 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80085f6:	4b12      	ldr	r3, [pc, #72]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fa:	4a11      	ldr	r2, [pc, #68]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 80085fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008600:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008602:	4b0f      	ldr	r3, [pc, #60]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a0e      	ldr	r2, [pc, #56]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 8008608:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800860c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800860e:	f7fa ff53 	bl	80034b8 <HAL_GetTick>
 8008612:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008614:	e008      	b.n	8008628 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008616:	f7fa ff4f 	bl	80034b8 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	2b02      	cmp	r3, #2
 8008622:	d901      	bls.n	8008628 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e006      	b.n	8008636 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008628:	4b05      	ldr	r3, [pc, #20]	; (8008640 <RCCEx_PLL2_Config+0x15c>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0f0      	beq.n	8008616 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008634:	7bfb      	ldrb	r3, [r7, #15]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	58024400 	.word	0x58024400
 8008644:	ffff0007 	.word	0xffff0007

08008648 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008656:	4b53      	ldr	r3, [pc, #332]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	f003 0303 	and.w	r3, r3, #3
 800865e:	2b03      	cmp	r3, #3
 8008660:	d101      	bne.n	8008666 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e099      	b.n	800879a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008666:	4b4f      	ldr	r3, [pc, #316]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a4e      	ldr	r2, [pc, #312]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800866c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008672:	f7fa ff21 	bl	80034b8 <HAL_GetTick>
 8008676:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008678:	e008      	b.n	800868c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800867a:	f7fa ff1d 	bl	80034b8 <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	2b02      	cmp	r3, #2
 8008686:	d901      	bls.n	800868c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e086      	b.n	800879a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800868c:	4b45      	ldr	r3, [pc, #276]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1f0      	bne.n	800867a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008698:	4b42      	ldr	r3, [pc, #264]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800869a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	051b      	lsls	r3, r3, #20
 80086a6:	493f      	ldr	r1, [pc, #252]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	628b      	str	r3, [r1, #40]	; 0x28
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	3b01      	subs	r3, #1
 80086b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	025b      	lsls	r3, r3, #9
 80086be:	b29b      	uxth	r3, r3
 80086c0:	431a      	orrs	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	041b      	lsls	r3, r3, #16
 80086ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80086ce:	431a      	orrs	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	3b01      	subs	r3, #1
 80086d6:	061b      	lsls	r3, r3, #24
 80086d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80086dc:	4931      	ldr	r1, [pc, #196]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 80086de:	4313      	orrs	r3, r2
 80086e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80086e2:	4b30      	ldr	r3, [pc, #192]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 80086e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	492d      	ldr	r1, [pc, #180]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80086f4:	4b2b      	ldr	r3, [pc, #172]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 80086f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	4928      	ldr	r1, [pc, #160]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008702:	4313      	orrs	r3, r2
 8008704:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008706:	4b27      	ldr	r3, [pc, #156]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870a:	4a26      	ldr	r2, [pc, #152]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800870c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008710:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008712:	4b24      	ldr	r3, [pc, #144]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008714:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008716:	4b24      	ldr	r3, [pc, #144]	; (80087a8 <RCCEx_PLL3_Config+0x160>)
 8008718:	4013      	ands	r3, r2
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	69d2      	ldr	r2, [r2, #28]
 800871e:	00d2      	lsls	r2, r2, #3
 8008720:	4920      	ldr	r1, [pc, #128]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008722:	4313      	orrs	r3, r2
 8008724:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008726:	4b1f      	ldr	r3, [pc, #124]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872a:	4a1e      	ldr	r2, [pc, #120]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800872c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008730:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d106      	bne.n	8008746 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008738:	4b1a      	ldr	r3, [pc, #104]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	4a19      	ldr	r2, [pc, #100]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800873e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008742:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008744:	e00f      	b.n	8008766 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d106      	bne.n	800875a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800874c:	4b15      	ldr	r3, [pc, #84]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800874e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008750:	4a14      	ldr	r2, [pc, #80]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008752:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008756:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008758:	e005      	b.n	8008766 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800875a:	4b12      	ldr	r3, [pc, #72]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800875c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875e:	4a11      	ldr	r2, [pc, #68]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008760:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008764:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008766:	4b0f      	ldr	r3, [pc, #60]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a0e      	ldr	r2, [pc, #56]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800876c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008772:	f7fa fea1 	bl	80034b8 <HAL_GetTick>
 8008776:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008778:	e008      	b.n	800878c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800877a:	f7fa fe9d 	bl	80034b8 <HAL_GetTick>
 800877e:	4602      	mov	r2, r0
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	2b02      	cmp	r3, #2
 8008786:	d901      	bls.n	800878c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	e006      	b.n	800879a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800878c:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <RCCEx_PLL3_Config+0x15c>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0f0      	beq.n	800877a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008798:	7bfb      	ldrb	r3, [r7, #15]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	58024400 	.word	0x58024400
 80087a8:	ffff0007 	.word	0xffff0007

080087ac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e0f1      	b.n	80089a2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a78      	ldr	r2, [pc, #480]	; (80089ac <HAL_SPI_Init+0x200>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d00f      	beq.n	80087ee <HAL_SPI_Init+0x42>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a77      	ldr	r2, [pc, #476]	; (80089b0 <HAL_SPI_Init+0x204>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d00a      	beq.n	80087ee <HAL_SPI_Init+0x42>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a75      	ldr	r2, [pc, #468]	; (80089b4 <HAL_SPI_Init+0x208>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d005      	beq.n	80087ee <HAL_SPI_Init+0x42>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	2b0f      	cmp	r3, #15
 80087e8:	d901      	bls.n	80087ee <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e0d9      	b.n	80089a2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f8e2 	bl	80089b8 <SPI_GetPacketSize>
 80087f4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a6c      	ldr	r2, [pc, #432]	; (80089ac <HAL_SPI_Init+0x200>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d00c      	beq.n	800881a <HAL_SPI_Init+0x6e>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a6a      	ldr	r2, [pc, #424]	; (80089b0 <HAL_SPI_Init+0x204>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d007      	beq.n	800881a <HAL_SPI_Init+0x6e>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a69      	ldr	r2, [pc, #420]	; (80089b4 <HAL_SPI_Init+0x208>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d002      	beq.n	800881a <HAL_SPI_Init+0x6e>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2b08      	cmp	r3, #8
 8008818:	d811      	bhi.n	800883e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800881e:	4a63      	ldr	r2, [pc, #396]	; (80089ac <HAL_SPI_Init+0x200>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d009      	beq.n	8008838 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a61      	ldr	r2, [pc, #388]	; (80089b0 <HAL_SPI_Init+0x204>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d004      	beq.n	8008838 <HAL_SPI_Init+0x8c>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a60      	ldr	r2, [pc, #384]	; (80089b4 <HAL_SPI_Init+0x208>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d104      	bne.n	8008842 <HAL_SPI_Init+0x96>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2b10      	cmp	r3, #16
 800883c:	d901      	bls.n	8008842 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e0af      	b.n	80089a2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d106      	bne.n	800885c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7f9 fefa 	bl	8002650 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2202      	movs	r2, #2
 8008860:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 0201 	bic.w	r2, r2, #1
 8008872:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800887e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008888:	d119      	bne.n	80088be <HAL_SPI_Init+0x112>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008892:	d103      	bne.n	800889c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008898:	2b00      	cmp	r3, #0
 800889a:	d008      	beq.n	80088ae <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10c      	bne.n	80088be <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80088a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088ac:	d107      	bne.n	80088be <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80088bc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	69da      	ldr	r2, [r3, #28]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c6:	431a      	orrs	r2, r3
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	431a      	orrs	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d0:	ea42 0103 	orr.w	r1, r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	68da      	ldr	r2, [r3, #12]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	430a      	orrs	r2, r1
 80088de:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	431a      	orrs	r2, r3
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ee:	431a      	orrs	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	431a      	orrs	r2, r3
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	431a      	orrs	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	695b      	ldr	r3, [r3, #20]
 8008900:	431a      	orrs	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	431a      	orrs	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	431a      	orrs	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008912:	431a      	orrs	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	431a      	orrs	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800891e:	ea42 0103 	orr.w	r1, r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	430a      	orrs	r2, r1
 800892c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d113      	bne.n	800895e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008948:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800895c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 0201 	bic.w	r2, r2, #1
 800896c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	40013000 	.word	0x40013000
 80089b0:	40003800 	.word	0x40003800
 80089b4:	40003c00 	.word	0x40003c00

080089b8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c4:	095b      	lsrs	r3, r3, #5
 80089c6:	3301      	adds	r3, #1
 80089c8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	3301      	adds	r3, #1
 80089d0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	3307      	adds	r3, #7
 80089d6:	08db      	lsrs	r3, r3, #3
 80089d8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	fb02 f303 	mul.w	r3, r2, r3
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3714      	adds	r7, #20
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e049      	b.n	8008a94 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d106      	bne.n	8008a1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7f9 fe81 	bl	800271c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3304      	adds	r3, #4
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	4610      	mov	r0, r2
 8008a2e:	f000 fd71 	bl	8009514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d001      	beq.n	8008ab4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e054      	b.n	8008b5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f042 0201 	orr.w	r2, r2, #1
 8008aca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a26      	ldr	r2, [pc, #152]	; (8008b6c <HAL_TIM_Base_Start_IT+0xd0>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d022      	beq.n	8008b1c <HAL_TIM_Base_Start_IT+0x80>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ade:	d01d      	beq.n	8008b1c <HAL_TIM_Base_Start_IT+0x80>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a22      	ldr	r2, [pc, #136]	; (8008b70 <HAL_TIM_Base_Start_IT+0xd4>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d018      	beq.n	8008b1c <HAL_TIM_Base_Start_IT+0x80>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a21      	ldr	r2, [pc, #132]	; (8008b74 <HAL_TIM_Base_Start_IT+0xd8>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d013      	beq.n	8008b1c <HAL_TIM_Base_Start_IT+0x80>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a1f      	ldr	r2, [pc, #124]	; (8008b78 <HAL_TIM_Base_Start_IT+0xdc>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d00e      	beq.n	8008b1c <HAL_TIM_Base_Start_IT+0x80>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a1e      	ldr	r2, [pc, #120]	; (8008b7c <HAL_TIM_Base_Start_IT+0xe0>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d009      	beq.n	8008b1c <HAL_TIM_Base_Start_IT+0x80>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a1c      	ldr	r2, [pc, #112]	; (8008b80 <HAL_TIM_Base_Start_IT+0xe4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d004      	beq.n	8008b1c <HAL_TIM_Base_Start_IT+0x80>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a1b      	ldr	r2, [pc, #108]	; (8008b84 <HAL_TIM_Base_Start_IT+0xe8>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d115      	bne.n	8008b48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	689a      	ldr	r2, [r3, #8]
 8008b22:	4b19      	ldr	r3, [pc, #100]	; (8008b88 <HAL_TIM_Base_Start_IT+0xec>)
 8008b24:	4013      	ands	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2b06      	cmp	r3, #6
 8008b2c:	d015      	beq.n	8008b5a <HAL_TIM_Base_Start_IT+0xbe>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b34:	d011      	beq.n	8008b5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f042 0201 	orr.w	r2, r2, #1
 8008b44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b46:	e008      	b.n	8008b5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f042 0201 	orr.w	r2, r2, #1
 8008b56:	601a      	str	r2, [r3, #0]
 8008b58:	e000      	b.n	8008b5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
 8008b6a:	bf00      	nop
 8008b6c:	40010000 	.word	0x40010000
 8008b70:	40000400 	.word	0x40000400
 8008b74:	40000800 	.word	0x40000800
 8008b78:	40000c00 	.word	0x40000c00
 8008b7c:	40010400 	.word	0x40010400
 8008b80:	40001800 	.word	0x40001800
 8008b84:	40014000 	.word	0x40014000
 8008b88:	00010007 	.word	0x00010007

08008b8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d101      	bne.n	8008b9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e049      	b.n	8008c32 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d106      	bne.n	8008bb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f841 	bl	8008c3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2202      	movs	r2, #2
 8008bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4610      	mov	r0, r2
 8008bcc:	f000 fca2 	bl	8009514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b083      	sub	sp, #12
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c42:	bf00      	nop
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
	...

08008c50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d109      	bne.n	8008c74 <HAL_TIM_PWM_Start+0x24>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	bf14      	ite	ne
 8008c6c:	2301      	movne	r3, #1
 8008c6e:	2300      	moveq	r3, #0
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	e03c      	b.n	8008cee <HAL_TIM_PWM_Start+0x9e>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	2b04      	cmp	r3, #4
 8008c78:	d109      	bne.n	8008c8e <HAL_TIM_PWM_Start+0x3e>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	bf14      	ite	ne
 8008c86:	2301      	movne	r3, #1
 8008c88:	2300      	moveq	r3, #0
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	e02f      	b.n	8008cee <HAL_TIM_PWM_Start+0x9e>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d109      	bne.n	8008ca8 <HAL_TIM_PWM_Start+0x58>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	bf14      	ite	ne
 8008ca0:	2301      	movne	r3, #1
 8008ca2:	2300      	moveq	r3, #0
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	e022      	b.n	8008cee <HAL_TIM_PWM_Start+0x9e>
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	2b0c      	cmp	r3, #12
 8008cac:	d109      	bne.n	8008cc2 <HAL_TIM_PWM_Start+0x72>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	bf14      	ite	ne
 8008cba:	2301      	movne	r3, #1
 8008cbc:	2300      	moveq	r3, #0
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	e015      	b.n	8008cee <HAL_TIM_PWM_Start+0x9e>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b10      	cmp	r3, #16
 8008cc6:	d109      	bne.n	8008cdc <HAL_TIM_PWM_Start+0x8c>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	bf14      	ite	ne
 8008cd4:	2301      	movne	r3, #1
 8008cd6:	2300      	moveq	r3, #0
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	e008      	b.n	8008cee <HAL_TIM_PWM_Start+0x9e>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	bf14      	ite	ne
 8008ce8:	2301      	movne	r3, #1
 8008cea:	2300      	moveq	r3, #0
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e0a1      	b.n	8008e3a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d104      	bne.n	8008d06 <HAL_TIM_PWM_Start+0xb6>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d04:	e023      	b.n	8008d4e <HAL_TIM_PWM_Start+0xfe>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b04      	cmp	r3, #4
 8008d0a:	d104      	bne.n	8008d16 <HAL_TIM_PWM_Start+0xc6>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d14:	e01b      	b.n	8008d4e <HAL_TIM_PWM_Start+0xfe>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b08      	cmp	r3, #8
 8008d1a:	d104      	bne.n	8008d26 <HAL_TIM_PWM_Start+0xd6>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d24:	e013      	b.n	8008d4e <HAL_TIM_PWM_Start+0xfe>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	2b0c      	cmp	r3, #12
 8008d2a:	d104      	bne.n	8008d36 <HAL_TIM_PWM_Start+0xe6>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d34:	e00b      	b.n	8008d4e <HAL_TIM_PWM_Start+0xfe>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	2b10      	cmp	r3, #16
 8008d3a:	d104      	bne.n	8008d46 <HAL_TIM_PWM_Start+0xf6>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2202      	movs	r2, #2
 8008d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d44:	e003      	b.n	8008d4e <HAL_TIM_PWM_Start+0xfe>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2202      	movs	r2, #2
 8008d4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2201      	movs	r2, #1
 8008d54:	6839      	ldr	r1, [r7, #0]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 ffea 	bl	8009d30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a38      	ldr	r2, [pc, #224]	; (8008e44 <HAL_TIM_PWM_Start+0x1f4>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d013      	beq.n	8008d8e <HAL_TIM_PWM_Start+0x13e>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a37      	ldr	r2, [pc, #220]	; (8008e48 <HAL_TIM_PWM_Start+0x1f8>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d00e      	beq.n	8008d8e <HAL_TIM_PWM_Start+0x13e>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a35      	ldr	r2, [pc, #212]	; (8008e4c <HAL_TIM_PWM_Start+0x1fc>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d009      	beq.n	8008d8e <HAL_TIM_PWM_Start+0x13e>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a34      	ldr	r2, [pc, #208]	; (8008e50 <HAL_TIM_PWM_Start+0x200>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d004      	beq.n	8008d8e <HAL_TIM_PWM_Start+0x13e>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a32      	ldr	r2, [pc, #200]	; (8008e54 <HAL_TIM_PWM_Start+0x204>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d101      	bne.n	8008d92 <HAL_TIM_PWM_Start+0x142>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e000      	b.n	8008d94 <HAL_TIM_PWM_Start+0x144>
 8008d92:	2300      	movs	r3, #0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d007      	beq.n	8008da8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008da6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a25      	ldr	r2, [pc, #148]	; (8008e44 <HAL_TIM_PWM_Start+0x1f4>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d022      	beq.n	8008df8 <HAL_TIM_PWM_Start+0x1a8>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dba:	d01d      	beq.n	8008df8 <HAL_TIM_PWM_Start+0x1a8>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a25      	ldr	r2, [pc, #148]	; (8008e58 <HAL_TIM_PWM_Start+0x208>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d018      	beq.n	8008df8 <HAL_TIM_PWM_Start+0x1a8>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a24      	ldr	r2, [pc, #144]	; (8008e5c <HAL_TIM_PWM_Start+0x20c>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d013      	beq.n	8008df8 <HAL_TIM_PWM_Start+0x1a8>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a22      	ldr	r2, [pc, #136]	; (8008e60 <HAL_TIM_PWM_Start+0x210>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d00e      	beq.n	8008df8 <HAL_TIM_PWM_Start+0x1a8>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a1a      	ldr	r2, [pc, #104]	; (8008e48 <HAL_TIM_PWM_Start+0x1f8>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d009      	beq.n	8008df8 <HAL_TIM_PWM_Start+0x1a8>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a1e      	ldr	r2, [pc, #120]	; (8008e64 <HAL_TIM_PWM_Start+0x214>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d004      	beq.n	8008df8 <HAL_TIM_PWM_Start+0x1a8>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a16      	ldr	r2, [pc, #88]	; (8008e4c <HAL_TIM_PWM_Start+0x1fc>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d115      	bne.n	8008e24 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	4b1a      	ldr	r3, [pc, #104]	; (8008e68 <HAL_TIM_PWM_Start+0x218>)
 8008e00:	4013      	ands	r3, r2
 8008e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2b06      	cmp	r3, #6
 8008e08:	d015      	beq.n	8008e36 <HAL_TIM_PWM_Start+0x1e6>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e10:	d011      	beq.n	8008e36 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f042 0201 	orr.w	r2, r2, #1
 8008e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e22:	e008      	b.n	8008e36 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f042 0201 	orr.w	r2, r2, #1
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	e000      	b.n	8008e38 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	40010000 	.word	0x40010000
 8008e48:	40010400 	.word	0x40010400
 8008e4c:	40014000 	.word	0x40014000
 8008e50:	40014400 	.word	0x40014400
 8008e54:	40014800 	.word	0x40014800
 8008e58:	40000400 	.word	0x40000400
 8008e5c:	40000800 	.word	0x40000800
 8008e60:	40000c00 	.word	0x40000c00
 8008e64:	40001800 	.word	0x40001800
 8008e68:	00010007 	.word	0x00010007

08008e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	f003 0302 	and.w	r3, r3, #2
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d122      	bne.n	8008ec8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	f003 0302 	and.w	r3, r3, #2
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d11b      	bne.n	8008ec8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f06f 0202 	mvn.w	r2, #2
 8008e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	f003 0303 	and.w	r3, r3, #3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 fb12 	bl	80094d8 <HAL_TIM_IC_CaptureCallback>
 8008eb4:	e005      	b.n	8008ec2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fb04 	bl	80094c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 fb15 	bl	80094ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	f003 0304 	and.w	r3, r3, #4
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d122      	bne.n	8008f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	f003 0304 	and.w	r3, r3, #4
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	d11b      	bne.n	8008f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f06f 0204 	mvn.w	r2, #4
 8008eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2202      	movs	r2, #2
 8008ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d003      	beq.n	8008f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fae8 	bl	80094d8 <HAL_TIM_IC_CaptureCallback>
 8008f08:	e005      	b.n	8008f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fada 	bl	80094c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 faeb 	bl	80094ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	f003 0308 	and.w	r3, r3, #8
 8008f26:	2b08      	cmp	r3, #8
 8008f28:	d122      	bne.n	8008f70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	f003 0308 	and.w	r3, r3, #8
 8008f34:	2b08      	cmp	r3, #8
 8008f36:	d11b      	bne.n	8008f70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f06f 0208 	mvn.w	r2, #8
 8008f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2204      	movs	r2, #4
 8008f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	f003 0303 	and.w	r3, r3, #3
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fabe 	bl	80094d8 <HAL_TIM_IC_CaptureCallback>
 8008f5c:	e005      	b.n	8008f6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fab0 	bl	80094c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 fac1 	bl	80094ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	f003 0310 	and.w	r3, r3, #16
 8008f7a:	2b10      	cmp	r3, #16
 8008f7c:	d122      	bne.n	8008fc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	f003 0310 	and.w	r3, r3, #16
 8008f88:	2b10      	cmp	r3, #16
 8008f8a:	d11b      	bne.n	8008fc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f06f 0210 	mvn.w	r2, #16
 8008f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2208      	movs	r2, #8
 8008f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fa94 	bl	80094d8 <HAL_TIM_IC_CaptureCallback>
 8008fb0:	e005      	b.n	8008fbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fa86 	bl	80094c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fa97 	bl	80094ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	f003 0301 	and.w	r3, r3, #1
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d10e      	bne.n	8008ff0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f003 0301 	and.w	r3, r3, #1
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d107      	bne.n	8008ff0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f06f 0201 	mvn.w	r2, #1
 8008fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7f9 f900 	bl	80021f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ffa:	2b80      	cmp	r3, #128	; 0x80
 8008ffc:	d10e      	bne.n	800901c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009008:	2b80      	cmp	r3, #128	; 0x80
 800900a:	d107      	bne.n	800901c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 ffc6 	bl	8009fa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800902a:	d10e      	bne.n	800904a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009036:	2b80      	cmp	r3, #128	; 0x80
 8009038:	d107      	bne.n	800904a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 ffb9 	bl	8009fbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009054:	2b40      	cmp	r3, #64	; 0x40
 8009056:	d10e      	bne.n	8009076 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009062:	2b40      	cmp	r3, #64	; 0x40
 8009064:	d107      	bne.n	8009076 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800906e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fa45 	bl	8009500 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	f003 0320 	and.w	r3, r3, #32
 8009080:	2b20      	cmp	r3, #32
 8009082:	d10e      	bne.n	80090a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	f003 0320 	and.w	r3, r3, #32
 800908e:	2b20      	cmp	r3, #32
 8009090:	d107      	bne.n	80090a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f06f 0220 	mvn.w	r2, #32
 800909a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 ff79 	bl	8009f94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090a2:	bf00      	nop
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d101      	bne.n	80090ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80090c6:	2302      	movs	r3, #2
 80090c8:	e0ff      	b.n	80092ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b14      	cmp	r3, #20
 80090d6:	f200 80f0 	bhi.w	80092ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80090da:	a201      	add	r2, pc, #4	; (adr r2, 80090e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80090dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e0:	08009135 	.word	0x08009135
 80090e4:	080092bb 	.word	0x080092bb
 80090e8:	080092bb 	.word	0x080092bb
 80090ec:	080092bb 	.word	0x080092bb
 80090f0:	08009175 	.word	0x08009175
 80090f4:	080092bb 	.word	0x080092bb
 80090f8:	080092bb 	.word	0x080092bb
 80090fc:	080092bb 	.word	0x080092bb
 8009100:	080091b7 	.word	0x080091b7
 8009104:	080092bb 	.word	0x080092bb
 8009108:	080092bb 	.word	0x080092bb
 800910c:	080092bb 	.word	0x080092bb
 8009110:	080091f7 	.word	0x080091f7
 8009114:	080092bb 	.word	0x080092bb
 8009118:	080092bb 	.word	0x080092bb
 800911c:	080092bb 	.word	0x080092bb
 8009120:	08009239 	.word	0x08009239
 8009124:	080092bb 	.word	0x080092bb
 8009128:	080092bb 	.word	0x080092bb
 800912c:	080092bb 	.word	0x080092bb
 8009130:	08009279 	.word	0x08009279
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68b9      	ldr	r1, [r7, #8]
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fa84 	bl	8009648 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	699a      	ldr	r2, [r3, #24]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f042 0208 	orr.w	r2, r2, #8
 800914e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	699a      	ldr	r2, [r3, #24]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f022 0204 	bic.w	r2, r2, #4
 800915e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	6999      	ldr	r1, [r3, #24]
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	691a      	ldr	r2, [r3, #16]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	430a      	orrs	r2, r1
 8009170:	619a      	str	r2, [r3, #24]
      break;
 8009172:	e0a5      	b.n	80092c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68b9      	ldr	r1, [r7, #8]
 800917a:	4618      	mov	r0, r3
 800917c:	f000 faf4 	bl	8009768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	699a      	ldr	r2, [r3, #24]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800918e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	699a      	ldr	r2, [r3, #24]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800919e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	6999      	ldr	r1, [r3, #24]
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	691b      	ldr	r3, [r3, #16]
 80091aa:	021a      	lsls	r2, r3, #8
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	430a      	orrs	r2, r1
 80091b2:	619a      	str	r2, [r3, #24]
      break;
 80091b4:	e084      	b.n	80092c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68b9      	ldr	r1, [r7, #8]
 80091bc:	4618      	mov	r0, r3
 80091be:	f000 fb5d 	bl	800987c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	69da      	ldr	r2, [r3, #28]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f042 0208 	orr.w	r2, r2, #8
 80091d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	69da      	ldr	r2, [r3, #28]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f022 0204 	bic.w	r2, r2, #4
 80091e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	69d9      	ldr	r1, [r3, #28]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	691a      	ldr	r2, [r3, #16]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	430a      	orrs	r2, r1
 80091f2:	61da      	str	r2, [r3, #28]
      break;
 80091f4:	e064      	b.n	80092c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68b9      	ldr	r1, [r7, #8]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 fbc5 	bl	800998c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	69da      	ldr	r2, [r3, #28]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	69da      	ldr	r2, [r3, #28]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	69d9      	ldr	r1, [r3, #28]
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	021a      	lsls	r2, r3, #8
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	430a      	orrs	r2, r1
 8009234:	61da      	str	r2, [r3, #28]
      break;
 8009236:	e043      	b.n	80092c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68b9      	ldr	r1, [r7, #8]
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fc0e 	bl	8009a60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f042 0208 	orr.w	r2, r2, #8
 8009252:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f022 0204 	bic.w	r2, r2, #4
 8009262:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	691a      	ldr	r2, [r3, #16]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	430a      	orrs	r2, r1
 8009274:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009276:	e023      	b.n	80092c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68b9      	ldr	r1, [r7, #8]
 800927e:	4618      	mov	r0, r3
 8009280:	f000 fc52 	bl	8009b28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009292:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	021a      	lsls	r2, r3, #8
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80092b8:	e002      	b.n	80092c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	75fb      	strb	r3, [r7, #23]
      break;
 80092be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop

080092d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d101      	bne.n	80092f0 <HAL_TIM_ConfigClockSource+0x1c>
 80092ec:	2302      	movs	r3, #2
 80092ee:	e0dc      	b.n	80094aa <HAL_TIM_ConfigClockSource+0x1d6>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2202      	movs	r2, #2
 80092fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009308:	68ba      	ldr	r2, [r7, #8]
 800930a:	4b6a      	ldr	r3, [pc, #424]	; (80094b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800930c:	4013      	ands	r3, r2
 800930e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a64      	ldr	r2, [pc, #400]	; (80094b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009326:	4293      	cmp	r3, r2
 8009328:	f000 80a9 	beq.w	800947e <HAL_TIM_ConfigClockSource+0x1aa>
 800932c:	4a62      	ldr	r2, [pc, #392]	; (80094b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800932e:	4293      	cmp	r3, r2
 8009330:	f200 80ae 	bhi.w	8009490 <HAL_TIM_ConfigClockSource+0x1bc>
 8009334:	4a61      	ldr	r2, [pc, #388]	; (80094bc <HAL_TIM_ConfigClockSource+0x1e8>)
 8009336:	4293      	cmp	r3, r2
 8009338:	f000 80a1 	beq.w	800947e <HAL_TIM_ConfigClockSource+0x1aa>
 800933c:	4a5f      	ldr	r2, [pc, #380]	; (80094bc <HAL_TIM_ConfigClockSource+0x1e8>)
 800933e:	4293      	cmp	r3, r2
 8009340:	f200 80a6 	bhi.w	8009490 <HAL_TIM_ConfigClockSource+0x1bc>
 8009344:	4a5e      	ldr	r2, [pc, #376]	; (80094c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009346:	4293      	cmp	r3, r2
 8009348:	f000 8099 	beq.w	800947e <HAL_TIM_ConfigClockSource+0x1aa>
 800934c:	4a5c      	ldr	r2, [pc, #368]	; (80094c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800934e:	4293      	cmp	r3, r2
 8009350:	f200 809e 	bhi.w	8009490 <HAL_TIM_ConfigClockSource+0x1bc>
 8009354:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009358:	f000 8091 	beq.w	800947e <HAL_TIM_ConfigClockSource+0x1aa>
 800935c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009360:	f200 8096 	bhi.w	8009490 <HAL_TIM_ConfigClockSource+0x1bc>
 8009364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009368:	f000 8089 	beq.w	800947e <HAL_TIM_ConfigClockSource+0x1aa>
 800936c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009370:	f200 808e 	bhi.w	8009490 <HAL_TIM_ConfigClockSource+0x1bc>
 8009374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009378:	d03e      	beq.n	80093f8 <HAL_TIM_ConfigClockSource+0x124>
 800937a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800937e:	f200 8087 	bhi.w	8009490 <HAL_TIM_ConfigClockSource+0x1bc>
 8009382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009386:	f000 8086 	beq.w	8009496 <HAL_TIM_ConfigClockSource+0x1c2>
 800938a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800938e:	d87f      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x1bc>
 8009390:	2b70      	cmp	r3, #112	; 0x70
 8009392:	d01a      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0xf6>
 8009394:	2b70      	cmp	r3, #112	; 0x70
 8009396:	d87b      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x1bc>
 8009398:	2b60      	cmp	r3, #96	; 0x60
 800939a:	d050      	beq.n	800943e <HAL_TIM_ConfigClockSource+0x16a>
 800939c:	2b60      	cmp	r3, #96	; 0x60
 800939e:	d877      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x1bc>
 80093a0:	2b50      	cmp	r3, #80	; 0x50
 80093a2:	d03c      	beq.n	800941e <HAL_TIM_ConfigClockSource+0x14a>
 80093a4:	2b50      	cmp	r3, #80	; 0x50
 80093a6:	d873      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x1bc>
 80093a8:	2b40      	cmp	r3, #64	; 0x40
 80093aa:	d058      	beq.n	800945e <HAL_TIM_ConfigClockSource+0x18a>
 80093ac:	2b40      	cmp	r3, #64	; 0x40
 80093ae:	d86f      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x1bc>
 80093b0:	2b30      	cmp	r3, #48	; 0x30
 80093b2:	d064      	beq.n	800947e <HAL_TIM_ConfigClockSource+0x1aa>
 80093b4:	2b30      	cmp	r3, #48	; 0x30
 80093b6:	d86b      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x1bc>
 80093b8:	2b20      	cmp	r3, #32
 80093ba:	d060      	beq.n	800947e <HAL_TIM_ConfigClockSource+0x1aa>
 80093bc:	2b20      	cmp	r3, #32
 80093be:	d867      	bhi.n	8009490 <HAL_TIM_ConfigClockSource+0x1bc>
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d05c      	beq.n	800947e <HAL_TIM_ConfigClockSource+0x1aa>
 80093c4:	2b10      	cmp	r3, #16
 80093c6:	d05a      	beq.n	800947e <HAL_TIM_ConfigClockSource+0x1aa>
 80093c8:	e062      	b.n	8009490 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6818      	ldr	r0, [r3, #0]
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	6899      	ldr	r1, [r3, #8]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	f000 fc89 	bl	8009cf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80093ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	609a      	str	r2, [r3, #8]
      break;
 80093f6:	e04f      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6818      	ldr	r0, [r3, #0]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	6899      	ldr	r1, [r3, #8]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	68db      	ldr	r3, [r3, #12]
 8009408:	f000 fc72 	bl	8009cf0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	689a      	ldr	r2, [r3, #8]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800941a:	609a      	str	r2, [r3, #8]
      break;
 800941c:	e03c      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6818      	ldr	r0, [r3, #0]
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	6859      	ldr	r1, [r3, #4]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	461a      	mov	r2, r3
 800942c:	f000 fbe2 	bl	8009bf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2150      	movs	r1, #80	; 0x50
 8009436:	4618      	mov	r0, r3
 8009438:	f000 fc3c 	bl	8009cb4 <TIM_ITRx_SetConfig>
      break;
 800943c:	e02c      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	6859      	ldr	r1, [r3, #4]
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	461a      	mov	r2, r3
 800944c:	f000 fc01 	bl	8009c52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2160      	movs	r1, #96	; 0x60
 8009456:	4618      	mov	r0, r3
 8009458:	f000 fc2c 	bl	8009cb4 <TIM_ITRx_SetConfig>
      break;
 800945c:	e01c      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6818      	ldr	r0, [r3, #0]
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	6859      	ldr	r1, [r3, #4]
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	461a      	mov	r2, r3
 800946c:	f000 fbc2 	bl	8009bf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2140      	movs	r1, #64	; 0x40
 8009476:	4618      	mov	r0, r3
 8009478:	f000 fc1c 	bl	8009cb4 <TIM_ITRx_SetConfig>
      break;
 800947c:	e00c      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4619      	mov	r1, r3
 8009488:	4610      	mov	r0, r2
 800948a:	f000 fc13 	bl	8009cb4 <TIM_ITRx_SetConfig>
      break;
 800948e:	e003      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	73fb      	strb	r3, [r7, #15]
      break;
 8009494:	e000      	b.n	8009498 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009496:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	ffceff88 	.word	0xffceff88
 80094b8:	00100040 	.word	0x00100040
 80094bc:	00100030 	.word	0x00100030
 80094c0:	00100020 	.word	0x00100020

080094c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr

080094d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094d8:	b480      	push	{r7}
 80094da:	b083      	sub	sp, #12
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a40      	ldr	r2, [pc, #256]	; (8009628 <TIM_Base_SetConfig+0x114>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d013      	beq.n	8009554 <TIM_Base_SetConfig+0x40>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009532:	d00f      	beq.n	8009554 <TIM_Base_SetConfig+0x40>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a3d      	ldr	r2, [pc, #244]	; (800962c <TIM_Base_SetConfig+0x118>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d00b      	beq.n	8009554 <TIM_Base_SetConfig+0x40>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a3c      	ldr	r2, [pc, #240]	; (8009630 <TIM_Base_SetConfig+0x11c>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d007      	beq.n	8009554 <TIM_Base_SetConfig+0x40>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a3b      	ldr	r2, [pc, #236]	; (8009634 <TIM_Base_SetConfig+0x120>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d003      	beq.n	8009554 <TIM_Base_SetConfig+0x40>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a3a      	ldr	r2, [pc, #232]	; (8009638 <TIM_Base_SetConfig+0x124>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d108      	bne.n	8009566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800955a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	4313      	orrs	r3, r2
 8009564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a2f      	ldr	r2, [pc, #188]	; (8009628 <TIM_Base_SetConfig+0x114>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d01f      	beq.n	80095ae <TIM_Base_SetConfig+0x9a>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009574:	d01b      	beq.n	80095ae <TIM_Base_SetConfig+0x9a>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a2c      	ldr	r2, [pc, #176]	; (800962c <TIM_Base_SetConfig+0x118>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d017      	beq.n	80095ae <TIM_Base_SetConfig+0x9a>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a2b      	ldr	r2, [pc, #172]	; (8009630 <TIM_Base_SetConfig+0x11c>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d013      	beq.n	80095ae <TIM_Base_SetConfig+0x9a>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a2a      	ldr	r2, [pc, #168]	; (8009634 <TIM_Base_SetConfig+0x120>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d00f      	beq.n	80095ae <TIM_Base_SetConfig+0x9a>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a29      	ldr	r2, [pc, #164]	; (8009638 <TIM_Base_SetConfig+0x124>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d00b      	beq.n	80095ae <TIM_Base_SetConfig+0x9a>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a28      	ldr	r2, [pc, #160]	; (800963c <TIM_Base_SetConfig+0x128>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d007      	beq.n	80095ae <TIM_Base_SetConfig+0x9a>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4a27      	ldr	r2, [pc, #156]	; (8009640 <TIM_Base_SetConfig+0x12c>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d003      	beq.n	80095ae <TIM_Base_SetConfig+0x9a>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4a26      	ldr	r2, [pc, #152]	; (8009644 <TIM_Base_SetConfig+0x130>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d108      	bne.n	80095c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	4313      	orrs	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	689a      	ldr	r2, [r3, #8]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a10      	ldr	r2, [pc, #64]	; (8009628 <TIM_Base_SetConfig+0x114>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d00f      	beq.n	800960c <TIM_Base_SetConfig+0xf8>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a12      	ldr	r2, [pc, #72]	; (8009638 <TIM_Base_SetConfig+0x124>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d00b      	beq.n	800960c <TIM_Base_SetConfig+0xf8>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	4a11      	ldr	r2, [pc, #68]	; (800963c <TIM_Base_SetConfig+0x128>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d007      	beq.n	800960c <TIM_Base_SetConfig+0xf8>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a10      	ldr	r2, [pc, #64]	; (8009640 <TIM_Base_SetConfig+0x12c>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d003      	beq.n	800960c <TIM_Base_SetConfig+0xf8>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a0f      	ldr	r2, [pc, #60]	; (8009644 <TIM_Base_SetConfig+0x130>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d103      	bne.n	8009614 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	691a      	ldr	r2, [r3, #16]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2201      	movs	r2, #1
 8009618:	615a      	str	r2, [r3, #20]
}
 800961a:	bf00      	nop
 800961c:	3714      	adds	r7, #20
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr
 8009626:	bf00      	nop
 8009628:	40010000 	.word	0x40010000
 800962c:	40000400 	.word	0x40000400
 8009630:	40000800 	.word	0x40000800
 8009634:	40000c00 	.word	0x40000c00
 8009638:	40010400 	.word	0x40010400
 800963c:	40014000 	.word	0x40014000
 8009640:	40014400 	.word	0x40014400
 8009644:	40014800 	.word	0x40014800

08009648 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009648:	b480      	push	{r7}
 800964a:	b087      	sub	sp, #28
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a1b      	ldr	r3, [r3, #32]
 8009656:	f023 0201 	bic.w	r2, r3, #1
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	699b      	ldr	r3, [r3, #24]
 800966e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	4b37      	ldr	r3, [pc, #220]	; (8009750 <TIM_OC1_SetConfig+0x108>)
 8009674:	4013      	ands	r3, r2
 8009676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f023 0303 	bic.w	r3, r3, #3
 800967e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	4313      	orrs	r3, r2
 8009688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f023 0302 	bic.w	r3, r3, #2
 8009690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	697a      	ldr	r2, [r7, #20]
 8009698:	4313      	orrs	r3, r2
 800969a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a2d      	ldr	r2, [pc, #180]	; (8009754 <TIM_OC1_SetConfig+0x10c>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d00f      	beq.n	80096c4 <TIM_OC1_SetConfig+0x7c>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	4a2c      	ldr	r2, [pc, #176]	; (8009758 <TIM_OC1_SetConfig+0x110>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d00b      	beq.n	80096c4 <TIM_OC1_SetConfig+0x7c>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a2b      	ldr	r2, [pc, #172]	; (800975c <TIM_OC1_SetConfig+0x114>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d007      	beq.n	80096c4 <TIM_OC1_SetConfig+0x7c>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a2a      	ldr	r2, [pc, #168]	; (8009760 <TIM_OC1_SetConfig+0x118>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d003      	beq.n	80096c4 <TIM_OC1_SetConfig+0x7c>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a29      	ldr	r2, [pc, #164]	; (8009764 <TIM_OC1_SetConfig+0x11c>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d10c      	bne.n	80096de <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	f023 0308 	bic.w	r3, r3, #8
 80096ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	697a      	ldr	r2, [r7, #20]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	f023 0304 	bic.w	r3, r3, #4
 80096dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a1c      	ldr	r2, [pc, #112]	; (8009754 <TIM_OC1_SetConfig+0x10c>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d00f      	beq.n	8009706 <TIM_OC1_SetConfig+0xbe>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a1b      	ldr	r2, [pc, #108]	; (8009758 <TIM_OC1_SetConfig+0x110>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d00b      	beq.n	8009706 <TIM_OC1_SetConfig+0xbe>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a1a      	ldr	r2, [pc, #104]	; (800975c <TIM_OC1_SetConfig+0x114>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d007      	beq.n	8009706 <TIM_OC1_SetConfig+0xbe>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a19      	ldr	r2, [pc, #100]	; (8009760 <TIM_OC1_SetConfig+0x118>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d003      	beq.n	8009706 <TIM_OC1_SetConfig+0xbe>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4a18      	ldr	r2, [pc, #96]	; (8009764 <TIM_OC1_SetConfig+0x11c>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d111      	bne.n	800972a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800970c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	693a      	ldr	r2, [r7, #16]
 800971c:	4313      	orrs	r3, r2
 800971e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	4313      	orrs	r3, r2
 8009728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	693a      	ldr	r2, [r7, #16]
 800972e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	697a      	ldr	r2, [r7, #20]
 8009742:	621a      	str	r2, [r3, #32]
}
 8009744:	bf00      	nop
 8009746:	371c      	adds	r7, #28
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	fffeff8f 	.word	0xfffeff8f
 8009754:	40010000 	.word	0x40010000
 8009758:	40010400 	.word	0x40010400
 800975c:	40014000 	.word	0x40014000
 8009760:	40014400 	.word	0x40014400
 8009764:	40014800 	.word	0x40014800

08009768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009768:	b480      	push	{r7}
 800976a:	b087      	sub	sp, #28
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a1b      	ldr	r3, [r3, #32]
 8009776:	f023 0210 	bic.w	r2, r3, #16
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a1b      	ldr	r3, [r3, #32]
 8009782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	4b34      	ldr	r3, [pc, #208]	; (8009864 <TIM_OC2_SetConfig+0xfc>)
 8009794:	4013      	ands	r3, r2
 8009796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800979e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	021b      	lsls	r3, r3, #8
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	f023 0320 	bic.w	r3, r3, #32
 80097b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	011b      	lsls	r3, r3, #4
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	4313      	orrs	r3, r2
 80097be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a29      	ldr	r2, [pc, #164]	; (8009868 <TIM_OC2_SetConfig+0x100>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d003      	beq.n	80097d0 <TIM_OC2_SetConfig+0x68>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a28      	ldr	r2, [pc, #160]	; (800986c <TIM_OC2_SetConfig+0x104>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d10d      	bne.n	80097ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	011b      	lsls	r3, r3, #4
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a1e      	ldr	r2, [pc, #120]	; (8009868 <TIM_OC2_SetConfig+0x100>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d00f      	beq.n	8009814 <TIM_OC2_SetConfig+0xac>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a1d      	ldr	r2, [pc, #116]	; (800986c <TIM_OC2_SetConfig+0x104>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d00b      	beq.n	8009814 <TIM_OC2_SetConfig+0xac>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a1c      	ldr	r2, [pc, #112]	; (8009870 <TIM_OC2_SetConfig+0x108>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d007      	beq.n	8009814 <TIM_OC2_SetConfig+0xac>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a1b      	ldr	r2, [pc, #108]	; (8009874 <TIM_OC2_SetConfig+0x10c>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d003      	beq.n	8009814 <TIM_OC2_SetConfig+0xac>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a1a      	ldr	r2, [pc, #104]	; (8009878 <TIM_OC2_SetConfig+0x110>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d113      	bne.n	800983c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800981a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009822:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	4313      	orrs	r3, r2
 800982e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	4313      	orrs	r3, r2
 800983a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	693a      	ldr	r2, [r7, #16]
 8009840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	621a      	str	r2, [r3, #32]
}
 8009856:	bf00      	nop
 8009858:	371c      	adds	r7, #28
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	feff8fff 	.word	0xfeff8fff
 8009868:	40010000 	.word	0x40010000
 800986c:	40010400 	.word	0x40010400
 8009870:	40014000 	.word	0x40014000
 8009874:	40014400 	.word	0x40014400
 8009878:	40014800 	.word	0x40014800

0800987c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800987c:	b480      	push	{r7}
 800987e:	b087      	sub	sp, #28
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	69db      	ldr	r3, [r3, #28]
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	4b33      	ldr	r3, [pc, #204]	; (8009974 <TIM_OC3_SetConfig+0xf8>)
 80098a8:	4013      	ands	r3, r2
 80098aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f023 0303 	bic.w	r3, r3, #3
 80098b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80098c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	021b      	lsls	r3, r3, #8
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a28      	ldr	r2, [pc, #160]	; (8009978 <TIM_OC3_SetConfig+0xfc>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d003      	beq.n	80098e2 <TIM_OC3_SetConfig+0x66>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a27      	ldr	r2, [pc, #156]	; (800997c <TIM_OC3_SetConfig+0x100>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d10d      	bne.n	80098fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	021b      	lsls	r3, r3, #8
 80098f0:	697a      	ldr	r2, [r7, #20]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a1d      	ldr	r2, [pc, #116]	; (8009978 <TIM_OC3_SetConfig+0xfc>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d00f      	beq.n	8009926 <TIM_OC3_SetConfig+0xaa>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a1c      	ldr	r2, [pc, #112]	; (800997c <TIM_OC3_SetConfig+0x100>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d00b      	beq.n	8009926 <TIM_OC3_SetConfig+0xaa>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4a1b      	ldr	r2, [pc, #108]	; (8009980 <TIM_OC3_SetConfig+0x104>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d007      	beq.n	8009926 <TIM_OC3_SetConfig+0xaa>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a1a      	ldr	r2, [pc, #104]	; (8009984 <TIM_OC3_SetConfig+0x108>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d003      	beq.n	8009926 <TIM_OC3_SetConfig+0xaa>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a19      	ldr	r2, [pc, #100]	; (8009988 <TIM_OC3_SetConfig+0x10c>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d113      	bne.n	800994e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800992c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	695b      	ldr	r3, [r3, #20]
 800993a:	011b      	lsls	r3, r3, #4
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	4313      	orrs	r3, r2
 8009940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	699b      	ldr	r3, [r3, #24]
 8009946:	011b      	lsls	r3, r3, #4
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	4313      	orrs	r3, r2
 800994c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	693a      	ldr	r2, [r7, #16]
 8009952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	685a      	ldr	r2, [r3, #4]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	621a      	str	r2, [r3, #32]
}
 8009968:	bf00      	nop
 800996a:	371c      	adds	r7, #28
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	fffeff8f 	.word	0xfffeff8f
 8009978:	40010000 	.word	0x40010000
 800997c:	40010400 	.word	0x40010400
 8009980:	40014000 	.word	0x40014000
 8009984:	40014400 	.word	0x40014400
 8009988:	40014800 	.word	0x40014800

0800998c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800998c:	b480      	push	{r7}
 800998e:	b087      	sub	sp, #28
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	69db      	ldr	r3, [r3, #28]
 80099b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	4b24      	ldr	r3, [pc, #144]	; (8009a48 <TIM_OC4_SetConfig+0xbc>)
 80099b8:	4013      	ands	r3, r2
 80099ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	021b      	lsls	r3, r3, #8
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	031b      	lsls	r3, r3, #12
 80099de:	693a      	ldr	r2, [r7, #16]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4a19      	ldr	r2, [pc, #100]	; (8009a4c <TIM_OC4_SetConfig+0xc0>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d00f      	beq.n	8009a0c <TIM_OC4_SetConfig+0x80>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a18      	ldr	r2, [pc, #96]	; (8009a50 <TIM_OC4_SetConfig+0xc4>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d00b      	beq.n	8009a0c <TIM_OC4_SetConfig+0x80>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a17      	ldr	r2, [pc, #92]	; (8009a54 <TIM_OC4_SetConfig+0xc8>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d007      	beq.n	8009a0c <TIM_OC4_SetConfig+0x80>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a16      	ldr	r2, [pc, #88]	; (8009a58 <TIM_OC4_SetConfig+0xcc>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d003      	beq.n	8009a0c <TIM_OC4_SetConfig+0x80>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a15      	ldr	r2, [pc, #84]	; (8009a5c <TIM_OC4_SetConfig+0xd0>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d109      	bne.n	8009a20 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	695b      	ldr	r3, [r3, #20]
 8009a18:	019b      	lsls	r3, r3, #6
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	693a      	ldr	r2, [r7, #16]
 8009a38:	621a      	str	r2, [r3, #32]
}
 8009a3a:	bf00      	nop
 8009a3c:	371c      	adds	r7, #28
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	feff8fff 	.word	0xfeff8fff
 8009a4c:	40010000 	.word	0x40010000
 8009a50:	40010400 	.word	0x40010400
 8009a54:	40014000 	.word	0x40014000
 8009a58:	40014400 	.word	0x40014400
 8009a5c:	40014800 	.word	0x40014800

08009a60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b087      	sub	sp, #28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a1b      	ldr	r3, [r3, #32]
 8009a6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009a88:	68fa      	ldr	r2, [r7, #12]
 8009a8a:	4b21      	ldr	r3, [pc, #132]	; (8009b10 <TIM_OC5_SetConfig+0xb0>)
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009aa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	041b      	lsls	r3, r3, #16
 8009aa8:	693a      	ldr	r2, [r7, #16]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4a18      	ldr	r2, [pc, #96]	; (8009b14 <TIM_OC5_SetConfig+0xb4>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d00f      	beq.n	8009ad6 <TIM_OC5_SetConfig+0x76>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4a17      	ldr	r2, [pc, #92]	; (8009b18 <TIM_OC5_SetConfig+0xb8>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d00b      	beq.n	8009ad6 <TIM_OC5_SetConfig+0x76>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4a16      	ldr	r2, [pc, #88]	; (8009b1c <TIM_OC5_SetConfig+0xbc>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d007      	beq.n	8009ad6 <TIM_OC5_SetConfig+0x76>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a15      	ldr	r2, [pc, #84]	; (8009b20 <TIM_OC5_SetConfig+0xc0>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d003      	beq.n	8009ad6 <TIM_OC5_SetConfig+0x76>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a14      	ldr	r2, [pc, #80]	; (8009b24 <TIM_OC5_SetConfig+0xc4>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d109      	bne.n	8009aea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009adc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	695b      	ldr	r3, [r3, #20]
 8009ae2:	021b      	lsls	r3, r3, #8
 8009ae4:	697a      	ldr	r2, [r7, #20]
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	685a      	ldr	r2, [r3, #4]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	693a      	ldr	r2, [r7, #16]
 8009b02:	621a      	str	r2, [r3, #32]
}
 8009b04:	bf00      	nop
 8009b06:	371c      	adds	r7, #28
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	fffeff8f 	.word	0xfffeff8f
 8009b14:	40010000 	.word	0x40010000
 8009b18:	40010400 	.word	0x40010400
 8009b1c:	40014000 	.word	0x40014000
 8009b20:	40014400 	.word	0x40014400
 8009b24:	40014800 	.word	0x40014800

08009b28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b087      	sub	sp, #28
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a1b      	ldr	r3, [r3, #32]
 8009b36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	4b22      	ldr	r3, [pc, #136]	; (8009bdc <TIM_OC6_SetConfig+0xb4>)
 8009b54:	4013      	ands	r3, r2
 8009b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	021b      	lsls	r3, r3, #8
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	051b      	lsls	r3, r3, #20
 8009b72:	693a      	ldr	r2, [r7, #16]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4a19      	ldr	r2, [pc, #100]	; (8009be0 <TIM_OC6_SetConfig+0xb8>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d00f      	beq.n	8009ba0 <TIM_OC6_SetConfig+0x78>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4a18      	ldr	r2, [pc, #96]	; (8009be4 <TIM_OC6_SetConfig+0xbc>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d00b      	beq.n	8009ba0 <TIM_OC6_SetConfig+0x78>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a17      	ldr	r2, [pc, #92]	; (8009be8 <TIM_OC6_SetConfig+0xc0>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d007      	beq.n	8009ba0 <TIM_OC6_SetConfig+0x78>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a16      	ldr	r2, [pc, #88]	; (8009bec <TIM_OC6_SetConfig+0xc4>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d003      	beq.n	8009ba0 <TIM_OC6_SetConfig+0x78>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a15      	ldr	r2, [pc, #84]	; (8009bf0 <TIM_OC6_SetConfig+0xc8>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d109      	bne.n	8009bb4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	695b      	ldr	r3, [r3, #20]
 8009bac:	029b      	lsls	r3, r3, #10
 8009bae:	697a      	ldr	r2, [r7, #20]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	697a      	ldr	r2, [r7, #20]
 8009bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685a      	ldr	r2, [r3, #4]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	621a      	str	r2, [r3, #32]
}
 8009bce:	bf00      	nop
 8009bd0:	371c      	adds	r7, #28
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	feff8fff 	.word	0xfeff8fff
 8009be0:	40010000 	.word	0x40010000
 8009be4:	40010400 	.word	0x40010400
 8009be8:	40014000 	.word	0x40014000
 8009bec:	40014400 	.word	0x40014400
 8009bf0:	40014800 	.word	0x40014800

08009bf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b087      	sub	sp, #28
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6a1b      	ldr	r3, [r3, #32]
 8009c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	f023 0201 	bic.w	r2, r3, #1
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	011b      	lsls	r3, r3, #4
 8009c24:	693a      	ldr	r2, [r7, #16]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	f023 030a 	bic.w	r3, r3, #10
 8009c30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	693a      	ldr	r2, [r7, #16]
 8009c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	621a      	str	r2, [r3, #32]
}
 8009c46:	bf00      	nop
 8009c48:	371c      	adds	r7, #28
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b087      	sub	sp, #28
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	60f8      	str	r0, [r7, #12]
 8009c5a:	60b9      	str	r1, [r7, #8]
 8009c5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	f023 0210 	bic.w	r2, r3, #16
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6a1b      	ldr	r3, [r3, #32]
 8009c74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	031b      	lsls	r3, r3, #12
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	011b      	lsls	r3, r3, #4
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	697a      	ldr	r2, [r7, #20]
 8009c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	693a      	ldr	r2, [r7, #16]
 8009ca4:	621a      	str	r2, [r3, #32]
}
 8009ca6:	bf00      	nop
 8009ca8:	371c      	adds	r7, #28
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
	...

08009cb4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b085      	sub	sp, #20
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	4b09      	ldr	r3, [pc, #36]	; (8009cec <TIM_ITRx_SetConfig+0x38>)
 8009cc8:	4013      	ands	r3, r2
 8009cca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	f043 0307 	orr.w	r3, r3, #7
 8009cd6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	609a      	str	r2, [r3, #8]
}
 8009cde:	bf00      	nop
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	ffcfff8f 	.word	0xffcfff8f

08009cf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b087      	sub	sp, #28
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
 8009cfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	021a      	lsls	r2, r3, #8
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	431a      	orrs	r2, r3
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	4313      	orrs	r3, r2
 8009d18:	697a      	ldr	r2, [r7, #20]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	609a      	str	r2, [r3, #8]
}
 8009d24:	bf00      	nop
 8009d26:	371c      	adds	r7, #28
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b087      	sub	sp, #28
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f003 031f 	and.w	r3, r3, #31
 8009d42:	2201      	movs	r2, #1
 8009d44:	fa02 f303 	lsl.w	r3, r2, r3
 8009d48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6a1a      	ldr	r2, [r3, #32]
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	43db      	mvns	r3, r3
 8009d52:	401a      	ands	r2, r3
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	6a1a      	ldr	r2, [r3, #32]
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	f003 031f 	and.w	r3, r3, #31
 8009d62:	6879      	ldr	r1, [r7, #4]
 8009d64:	fa01 f303 	lsl.w	r3, r1, r3
 8009d68:	431a      	orrs	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	621a      	str	r2, [r3, #32]
}
 8009d6e:	bf00      	nop
 8009d70:	371c      	adds	r7, #28
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr
	...

08009d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b085      	sub	sp, #20
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d101      	bne.n	8009d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d90:	2302      	movs	r3, #2
 8009d92:	e06d      	b.n	8009e70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2202      	movs	r2, #2
 8009da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a30      	ldr	r2, [pc, #192]	; (8009e7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d004      	beq.n	8009dc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a2f      	ldr	r2, [pc, #188]	; (8009e80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d108      	bne.n	8009dda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009dce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009de0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a20      	ldr	r2, [pc, #128]	; (8009e7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d022      	beq.n	8009e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e06:	d01d      	beq.n	8009e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a1d      	ldr	r2, [pc, #116]	; (8009e84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d018      	beq.n	8009e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a1c      	ldr	r2, [pc, #112]	; (8009e88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d013      	beq.n	8009e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a1a      	ldr	r2, [pc, #104]	; (8009e8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d00e      	beq.n	8009e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a15      	ldr	r2, [pc, #84]	; (8009e80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d009      	beq.n	8009e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a16      	ldr	r2, [pc, #88]	; (8009e90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d004      	beq.n	8009e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a15      	ldr	r2, [pc, #84]	; (8009e94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d10c      	bne.n	8009e5e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3714      	adds	r7, #20
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	40010000 	.word	0x40010000
 8009e80:	40010400 	.word	0x40010400
 8009e84:	40000400 	.word	0x40000400
 8009e88:	40000800 	.word	0x40000800
 8009e8c:	40000c00 	.word	0x40000c00
 8009e90:	40001800 	.word	0x40001800
 8009e94:	40014000 	.word	0x40014000

08009e98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d101      	bne.n	8009eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	e065      	b.n	8009f80 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	695b      	ldr	r3, [r3, #20]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	699b      	ldr	r3, [r3, #24]
 8009f28:	041b      	lsls	r3, r3, #16
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a16      	ldr	r2, [pc, #88]	; (8009f8c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d004      	beq.n	8009f42 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a14      	ldr	r2, [pc, #80]	; (8009f90 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d115      	bne.n	8009f6e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4c:	051b      	lsls	r3, r3, #20
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	69db      	ldr	r3, [r3, #28]
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	40010000 	.word	0x40010000
 8009f90:	40010400 	.word	0x40010400

08009f94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fb0:	bf00      	nop
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009fc4:	bf00      	nop
 8009fc6:	370c      	adds	r7, #12
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e042      	b.n	800a068 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d106      	bne.n	8009ffa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f7f8 fd63 	bl	8002ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2224      	movs	r2, #36	; 0x24
 8009ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f022 0201 	bic.w	r2, r2, #1
 800a010:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fd54 	bl	800aac0 <UART_SetConfig>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d101      	bne.n	800a022 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a01e:	2301      	movs	r3, #1
 800a020:	e022      	b.n	800a068 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a026:	2b00      	cmp	r3, #0
 800a028:	d002      	beq.n	800a030 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f001 faa8 	bl	800b580 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	685a      	ldr	r2, [r3, #4]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a03e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689a      	ldr	r2, [r3, #8]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a04e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f042 0201 	orr.w	r2, r2, #1
 800a05e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f001 fb2f 	bl	800b6c4 <UART_CheckIdleState>
 800a066:	4603      	mov	r3, r0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b08a      	sub	sp, #40	; 0x28
 800a074:	af02      	add	r7, sp, #8
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	603b      	str	r3, [r7, #0]
 800a07c:	4613      	mov	r3, r2
 800a07e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a086:	2b20      	cmp	r3, #32
 800a088:	f040 8083 	bne.w	800a192 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <HAL_UART_Transmit+0x28>
 800a092:	88fb      	ldrh	r3, [r7, #6]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d101      	bne.n	800a09c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	e07b      	b.n	800a194 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d101      	bne.n	800a0aa <HAL_UART_Transmit+0x3a>
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	e074      	b.n	800a194 <HAL_UART_Transmit+0x124>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2221      	movs	r2, #33	; 0x21
 800a0be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0c2:	f7f9 f9f9 	bl	80034b8 <HAL_GetTick>
 800a0c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	88fa      	ldrh	r2, [r7, #6]
 800a0cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	88fa      	ldrh	r2, [r7, #6]
 800a0d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e0:	d108      	bne.n	800a0f4 <HAL_UART_Transmit+0x84>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d104      	bne.n	800a0f4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	61bb      	str	r3, [r7, #24]
 800a0f2:	e003      	b.n	800a0fc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a104:	e02c      	b.n	800a160 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	2200      	movs	r2, #0
 800a10e:	2180      	movs	r1, #128	; 0x80
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f001 fb22 	bl	800b75a <UART_WaitOnFlagUntilTimeout>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a11c:	2303      	movs	r3, #3
 800a11e:	e039      	b.n	800a194 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10b      	bne.n	800a13e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	881b      	ldrh	r3, [r3, #0]
 800a12a:	461a      	mov	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a134:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	3302      	adds	r3, #2
 800a13a:	61bb      	str	r3, [r7, #24]
 800a13c:	e007      	b.n	800a14e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	781a      	ldrb	r2, [r3, #0]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	3301      	adds	r3, #1
 800a14c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a154:	b29b      	uxth	r3, r3
 800a156:	3b01      	subs	r3, #1
 800a158:	b29a      	uxth	r2, r3
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a166:	b29b      	uxth	r3, r3
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1cc      	bne.n	800a106 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	2200      	movs	r2, #0
 800a174:	2140      	movs	r1, #64	; 0x40
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f001 faef 	bl	800b75a <UART_WaitOnFlagUntilTimeout>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a182:	2303      	movs	r3, #3
 800a184:	e006      	b.n	800a194 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2220      	movs	r2, #32
 800a18a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a18e:	2300      	movs	r3, #0
 800a190:	e000      	b.n	800a194 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a192:	2302      	movs	r3, #2
  }
}
 800a194:	4618      	mov	r0, r3
 800a196:	3720      	adds	r7, #32
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b08a      	sub	sp, #40	; 0x28
 800a1a0:	af02      	add	r7, sp, #8
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	603b      	str	r3, [r7, #0]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b2:	2b20      	cmp	r3, #32
 800a1b4:	f040 80c0 	bne.w	800a338 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d002      	beq.n	800a1c4 <HAL_UART_Receive+0x28>
 800a1be:	88fb      	ldrh	r3, [r7, #6]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d101      	bne.n	800a1c8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e0b8      	b.n	800a33a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d101      	bne.n	800a1d6 <HAL_UART_Receive+0x3a>
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	e0b1      	b.n	800a33a <HAL_UART_Receive+0x19e>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2222      	movs	r2, #34	; 0x22
 800a1ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1f4:	f7f9 f960 	bl	80034b8 <HAL_GetTick>
 800a1f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	88fa      	ldrh	r2, [r7, #6]
 800a1fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	88fa      	ldrh	r2, [r7, #6]
 800a206:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a212:	d10e      	bne.n	800a232 <HAL_UART_Receive+0x96>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d105      	bne.n	800a228 <HAL_UART_Receive+0x8c>
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a222:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a226:	e02d      	b.n	800a284 <HAL_UART_Receive+0xe8>
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	22ff      	movs	r2, #255	; 0xff
 800a22c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a230:	e028      	b.n	800a284 <HAL_UART_Receive+0xe8>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10d      	bne.n	800a256 <HAL_UART_Receive+0xba>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d104      	bne.n	800a24c <HAL_UART_Receive+0xb0>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	22ff      	movs	r2, #255	; 0xff
 800a246:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a24a:	e01b      	b.n	800a284 <HAL_UART_Receive+0xe8>
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	227f      	movs	r2, #127	; 0x7f
 800a250:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a254:	e016      	b.n	800a284 <HAL_UART_Receive+0xe8>
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	689b      	ldr	r3, [r3, #8]
 800a25a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a25e:	d10d      	bne.n	800a27c <HAL_UART_Receive+0xe0>
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d104      	bne.n	800a272 <HAL_UART_Receive+0xd6>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	227f      	movs	r2, #127	; 0x7f
 800a26c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a270:	e008      	b.n	800a284 <HAL_UART_Receive+0xe8>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	223f      	movs	r2, #63	; 0x3f
 800a276:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a27a:	e003      	b.n	800a284 <HAL_UART_Receive+0xe8>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a28a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a294:	d108      	bne.n	800a2a8 <HAL_UART_Receive+0x10c>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d104      	bne.n	800a2a8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	61bb      	str	r3, [r7, #24]
 800a2a6:	e003      	b.n	800a2b0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a2b8:	e032      	b.n	800a320 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	9300      	str	r3, [sp, #0]
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	2120      	movs	r1, #32
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f001 fa48 	bl	800b75a <UART_WaitOnFlagUntilTimeout>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d001      	beq.n	800a2d4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e032      	b.n	800a33a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10c      	bne.n	800a2f4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	8a7b      	ldrh	r3, [r7, #18]
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	b29a      	uxth	r2, r3
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	3302      	adds	r3, #2
 800a2f0:	61bb      	str	r3, [r7, #24]
 800a2f2:	e00c      	b.n	800a30e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	8a7b      	ldrh	r3, [r7, #18]
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	4013      	ands	r3, r2
 800a302:	b2da      	uxtb	r2, r3
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	3301      	adds	r3, #1
 800a30c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a314:	b29b      	uxth	r3, r3
 800a316:	3b01      	subs	r3, #1
 800a318:	b29a      	uxth	r2, r3
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a326:	b29b      	uxth	r3, r3
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d1c6      	bne.n	800a2ba <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2220      	movs	r2, #32
 800a330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a334:	2300      	movs	r3, #0
 800a336:	e000      	b.n	800a33a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800a338:	2302      	movs	r3, #2
  }
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3720      	adds	r7, #32
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b0ba      	sub	sp, #232	; 0xe8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	69db      	ldr	r3, [r3, #28]
 800a352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a36a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a36e:	f640 030f 	movw	r3, #2063	; 0x80f
 800a372:	4013      	ands	r3, r2
 800a374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d11b      	bne.n	800a3b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a384:	f003 0320 	and.w	r3, r3, #32
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d015      	beq.n	800a3b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a38c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a390:	f003 0320 	and.w	r3, r3, #32
 800a394:	2b00      	cmp	r3, #0
 800a396:	d105      	bne.n	800a3a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a39c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d009      	beq.n	800a3b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 835a 	beq.w	800aa62 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	4798      	blx	r3
      }
      return;
 800a3b6:	e354      	b.n	800aa62 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a3b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 811f 	beq.w	800a600 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a3c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a3c6:	4b8b      	ldr	r3, [pc, #556]	; (800a5f4 <HAL_UART_IRQHandler+0x2b0>)
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d106      	bne.n	800a3dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a3ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a3d2:	4b89      	ldr	r3, [pc, #548]	; (800a5f8 <HAL_UART_IRQHandler+0x2b4>)
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f000 8112 	beq.w	800a600 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a3dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3e0:	f003 0301 	and.w	r3, r3, #1
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d011      	beq.n	800a40c <HAL_UART_IRQHandler+0xc8>
 800a3e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00b      	beq.n	800a40c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a402:	f043 0201 	orr.w	r2, r3, #1
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a40c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a410:	f003 0302 	and.w	r3, r3, #2
 800a414:	2b00      	cmp	r3, #0
 800a416:	d011      	beq.n	800a43c <HAL_UART_IRQHandler+0xf8>
 800a418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a41c:	f003 0301 	and.w	r3, r3, #1
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00b      	beq.n	800a43c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2202      	movs	r2, #2
 800a42a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a432:	f043 0204 	orr.w	r2, r3, #4
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a43c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a440:	f003 0304 	and.w	r3, r3, #4
 800a444:	2b00      	cmp	r3, #0
 800a446:	d011      	beq.n	800a46c <HAL_UART_IRQHandler+0x128>
 800a448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d00b      	beq.n	800a46c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2204      	movs	r2, #4
 800a45a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a462:	f043 0202 	orr.w	r2, r3, #2
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a470:	f003 0308 	and.w	r3, r3, #8
 800a474:	2b00      	cmp	r3, #0
 800a476:	d017      	beq.n	800a4a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a47c:	f003 0320 	and.w	r3, r3, #32
 800a480:	2b00      	cmp	r3, #0
 800a482:	d105      	bne.n	800a490 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a484:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a488:	4b5a      	ldr	r3, [pc, #360]	; (800a5f4 <HAL_UART_IRQHandler+0x2b0>)
 800a48a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d00b      	beq.n	800a4a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2208      	movs	r2, #8
 800a496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a49e:	f043 0208 	orr.w	r2, r3, #8
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a4a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d012      	beq.n	800a4da <HAL_UART_IRQHandler+0x196>
 800a4b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00c      	beq.n	800a4da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4d0:	f043 0220 	orr.w	r2, r3, #32
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f000 82c0 	beq.w	800aa66 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a4e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4ea:	f003 0320 	and.w	r3, r3, #32
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d013      	beq.n	800a51a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a4f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4f6:	f003 0320 	and.w	r3, r3, #32
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d105      	bne.n	800a50a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a4fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a506:	2b00      	cmp	r3, #0
 800a508:	d007      	beq.n	800a51a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d003      	beq.n	800a51a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a520:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a52e:	2b40      	cmp	r3, #64	; 0x40
 800a530:	d005      	beq.n	800a53e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a536:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d04f      	beq.n	800a5de <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f001 f9d4 	bl	800b8ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a54e:	2b40      	cmp	r3, #64	; 0x40
 800a550:	d141      	bne.n	800a5d6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3308      	adds	r3, #8
 800a558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a560:	e853 3f00 	ldrex	r3, [r3]
 800a564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a568:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a56c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3308      	adds	r3, #8
 800a57a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a57e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a582:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a586:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a58a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a58e:	e841 2300 	strex	r3, r2, [r1]
 800a592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1d9      	bne.n	800a552 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d013      	beq.n	800a5ce <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5aa:	4a14      	ldr	r2, [pc, #80]	; (800a5fc <HAL_UART_IRQHandler+0x2b8>)
 800a5ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f7fa f818 	bl	80045e8 <HAL_DMA_Abort_IT>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d017      	beq.n	800a5ee <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a5c8:	4610      	mov	r0, r2
 800a5ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5cc:	e00f      	b.n	800a5ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fa60 	bl	800aa94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5d4:	e00b      	b.n	800a5ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 fa5c 	bl	800aa94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5dc:	e007      	b.n	800a5ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 fa58 	bl	800aa94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a5ec:	e23b      	b.n	800aa66 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5ee:	bf00      	nop
    return;
 800a5f0:	e239      	b.n	800aa66 <HAL_UART_IRQHandler+0x722>
 800a5f2:	bf00      	nop
 800a5f4:	10000001 	.word	0x10000001
 800a5f8:	04000120 	.word	0x04000120
 800a5fc:	0800b9b9 	.word	0x0800b9b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a604:	2b01      	cmp	r3, #1
 800a606:	f040 81ce 	bne.w	800a9a6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a60a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a60e:	f003 0310 	and.w	r3, r3, #16
 800a612:	2b00      	cmp	r3, #0
 800a614:	f000 81c7 	beq.w	800a9a6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a61c:	f003 0310 	and.w	r3, r3, #16
 800a620:	2b00      	cmp	r3, #0
 800a622:	f000 81c0 	beq.w	800a9a6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2210      	movs	r2, #16
 800a62c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a638:	2b40      	cmp	r3, #64	; 0x40
 800a63a:	f040 813b 	bne.w	800a8b4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a8b      	ldr	r2, [pc, #556]	; (800a874 <HAL_UART_IRQHandler+0x530>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d059      	beq.n	800a6fe <HAL_UART_IRQHandler+0x3ba>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a89      	ldr	r2, [pc, #548]	; (800a878 <HAL_UART_IRQHandler+0x534>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d053      	beq.n	800a6fe <HAL_UART_IRQHandler+0x3ba>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a87      	ldr	r2, [pc, #540]	; (800a87c <HAL_UART_IRQHandler+0x538>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d04d      	beq.n	800a6fe <HAL_UART_IRQHandler+0x3ba>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a85      	ldr	r2, [pc, #532]	; (800a880 <HAL_UART_IRQHandler+0x53c>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d047      	beq.n	800a6fe <HAL_UART_IRQHandler+0x3ba>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a83      	ldr	r2, [pc, #524]	; (800a884 <HAL_UART_IRQHandler+0x540>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d041      	beq.n	800a6fe <HAL_UART_IRQHandler+0x3ba>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a81      	ldr	r2, [pc, #516]	; (800a888 <HAL_UART_IRQHandler+0x544>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d03b      	beq.n	800a6fe <HAL_UART_IRQHandler+0x3ba>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a7f      	ldr	r2, [pc, #508]	; (800a88c <HAL_UART_IRQHandler+0x548>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d035      	beq.n	800a6fe <HAL_UART_IRQHandler+0x3ba>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a7d      	ldr	r2, [pc, #500]	; (800a890 <HAL_UART_IRQHandler+0x54c>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d02f      	beq.n	800a6fe <HAL_UART_IRQHandler+0x3ba>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a7b      	ldr	r2, [pc, #492]	; (800a894 <HAL_UART_IRQHandler+0x550>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d029      	beq.n	800a6fe <HAL_UART_IRQHandler+0x3ba>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a79      	ldr	r2, [pc, #484]	; (800a898 <HAL_UART_IRQHandler+0x554>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d023      	beq.n	800a6fe <HAL_UART_IRQHandler+0x3ba>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a77      	ldr	r2, [pc, #476]	; (800a89c <HAL_UART_IRQHandler+0x558>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d01d      	beq.n	800a6fe <HAL_UART_IRQHandler+0x3ba>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a75      	ldr	r2, [pc, #468]	; (800a8a0 <HAL_UART_IRQHandler+0x55c>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d017      	beq.n	800a6fe <HAL_UART_IRQHandler+0x3ba>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a73      	ldr	r2, [pc, #460]	; (800a8a4 <HAL_UART_IRQHandler+0x560>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d011      	beq.n	800a6fe <HAL_UART_IRQHandler+0x3ba>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a71      	ldr	r2, [pc, #452]	; (800a8a8 <HAL_UART_IRQHandler+0x564>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d00b      	beq.n	800a6fe <HAL_UART_IRQHandler+0x3ba>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	4a6f      	ldr	r2, [pc, #444]	; (800a8ac <HAL_UART_IRQHandler+0x568>)
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d005      	beq.n	800a6fe <HAL_UART_IRQHandler+0x3ba>
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a6d      	ldr	r2, [pc, #436]	; (800a8b0 <HAL_UART_IRQHandler+0x56c>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d105      	bne.n	800a70a <HAL_UART_IRQHandler+0x3c6>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	b29b      	uxth	r3, r3
 800a708:	e004      	b.n	800a714 <HAL_UART_IRQHandler+0x3d0>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	b29b      	uxth	r3, r3
 800a714:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a718:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 81a4 	beq.w	800aa6a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a728:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a72c:	429a      	cmp	r2, r3
 800a72e:	f080 819c 	bcs.w	800aa6a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a738:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a740:	69db      	ldr	r3, [r3, #28]
 800a742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a746:	f000 8086 	beq.w	800a856 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a752:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a756:	e853 3f00 	ldrex	r3, [r3]
 800a75a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a75e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a766:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	461a      	mov	r2, r3
 800a770:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a774:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a778:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a780:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a784:	e841 2300 	strex	r3, r2, [r1]
 800a788:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a78c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a790:	2b00      	cmp	r3, #0
 800a792:	d1da      	bne.n	800a74a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	3308      	adds	r3, #8
 800a79a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a79e:	e853 3f00 	ldrex	r3, [r3]
 800a7a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a7a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a7a6:	f023 0301 	bic.w	r3, r3, #1
 800a7aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3308      	adds	r3, #8
 800a7b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a7b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a7bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a7c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a7c4:	e841 2300 	strex	r3, r2, [r1]
 800a7c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a7ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1e1      	bne.n	800a794 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3308      	adds	r3, #8
 800a7d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7da:	e853 3f00 	ldrex	r3, [r3]
 800a7de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a7e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	3308      	adds	r3, #8
 800a7f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a7f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a7f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a7fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a7fc:	e841 2300 	strex	r3, r2, [r1]
 800a800:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a802:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a804:	2b00      	cmp	r3, #0
 800a806:	d1e3      	bne.n	800a7d0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2220      	movs	r2, #32
 800a80c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a81e:	e853 3f00 	ldrex	r3, [r3]
 800a822:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a826:	f023 0310 	bic.w	r3, r3, #16
 800a82a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	461a      	mov	r2, r3
 800a834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a838:	65bb      	str	r3, [r7, #88]	; 0x58
 800a83a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a83c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a83e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a840:	e841 2300 	strex	r3, r2, [r1]
 800a844:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1e4      	bne.n	800a816 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a850:	4618      	mov	r0, r3
 800a852:	f7f9 fbab 	bl	8003fac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a862:	b29b      	uxth	r3, r3
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	b29b      	uxth	r3, r3
 800a868:	4619      	mov	r1, r3
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f91c 	bl	800aaa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a870:	e0fb      	b.n	800aa6a <HAL_UART_IRQHandler+0x726>
 800a872:	bf00      	nop
 800a874:	40020010 	.word	0x40020010
 800a878:	40020028 	.word	0x40020028
 800a87c:	40020040 	.word	0x40020040
 800a880:	40020058 	.word	0x40020058
 800a884:	40020070 	.word	0x40020070
 800a888:	40020088 	.word	0x40020088
 800a88c:	400200a0 	.word	0x400200a0
 800a890:	400200b8 	.word	0x400200b8
 800a894:	40020410 	.word	0x40020410
 800a898:	40020428 	.word	0x40020428
 800a89c:	40020440 	.word	0x40020440
 800a8a0:	40020458 	.word	0x40020458
 800a8a4:	40020470 	.word	0x40020470
 800a8a8:	40020488 	.word	0x40020488
 800a8ac:	400204a0 	.word	0x400204a0
 800a8b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	1ad3      	subs	r3, r2, r3
 800a8c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	f000 80cc 	beq.w	800aa6e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800a8d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f000 80c7 	beq.w	800aa6e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e8:	e853 3f00 	ldrex	r3, [r3]
 800a8ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a902:	647b      	str	r3, [r7, #68]	; 0x44
 800a904:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a906:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a908:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a90a:	e841 2300 	strex	r3, r2, [r1]
 800a90e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1e4      	bne.n	800a8e0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3308      	adds	r3, #8
 800a91c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	623b      	str	r3, [r7, #32]
   return(result);
 800a926:	6a3a      	ldr	r2, [r7, #32]
 800a928:	4b54      	ldr	r3, [pc, #336]	; (800aa7c <HAL_UART_IRQHandler+0x738>)
 800a92a:	4013      	ands	r3, r2
 800a92c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	3308      	adds	r3, #8
 800a936:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a93a:	633a      	str	r2, [r7, #48]	; 0x30
 800a93c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a942:	e841 2300 	strex	r3, r2, [r1]
 800a946:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1e3      	bne.n	800a916 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2220      	movs	r2, #32
 800a952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	e853 3f00 	ldrex	r3, [r3]
 800a96e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f023 0310 	bic.w	r3, r3, #16
 800a976:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	461a      	mov	r2, r3
 800a980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a984:	61fb      	str	r3, [r7, #28]
 800a986:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a988:	69b9      	ldr	r1, [r7, #24]
 800a98a:	69fa      	ldr	r2, [r7, #28]
 800a98c:	e841 2300 	strex	r3, r2, [r1]
 800a990:	617b      	str	r3, [r7, #20]
   return(result);
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d1e4      	bne.n	800a962 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a99c:	4619      	mov	r1, r3
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f000 f882 	bl	800aaa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a9a4:	e063      	b.n	800aa6e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a9a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00e      	beq.n	800a9d0 <HAL_UART_IRQHandler+0x68c>
 800a9b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d008      	beq.n	800a9d0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a9c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f001 f836 	bl	800ba3a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a9ce:	e051      	b.n	800aa74 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a9d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d014      	beq.n	800aa06 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a9dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d105      	bne.n	800a9f4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a9e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d008      	beq.n	800aa06 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d03a      	beq.n	800aa72 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	4798      	blx	r3
    }
    return;
 800aa04:	e035      	b.n	800aa72 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aa06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d009      	beq.n	800aa26 <HAL_UART_IRQHandler+0x6e2>
 800aa12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d003      	beq.n	800aa26 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 ffe0 	bl	800b9e4 <UART_EndTransmit_IT>
    return;
 800aa24:	e026      	b.n	800aa74 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aa26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d009      	beq.n	800aa46 <HAL_UART_IRQHandler+0x702>
 800aa32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d003      	beq.n	800aa46 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f001 f80f 	bl	800ba62 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa44:	e016      	b.n	800aa74 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aa46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d010      	beq.n	800aa74 <HAL_UART_IRQHandler+0x730>
 800aa52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	da0c      	bge.n	800aa74 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 fff7 	bl	800ba4e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa60:	e008      	b.n	800aa74 <HAL_UART_IRQHandler+0x730>
      return;
 800aa62:	bf00      	nop
 800aa64:	e006      	b.n	800aa74 <HAL_UART_IRQHandler+0x730>
    return;
 800aa66:	bf00      	nop
 800aa68:	e004      	b.n	800aa74 <HAL_UART_IRQHandler+0x730>
      return;
 800aa6a:	bf00      	nop
 800aa6c:	e002      	b.n	800aa74 <HAL_UART_IRQHandler+0x730>
      return;
 800aa6e:	bf00      	nop
 800aa70:	e000      	b.n	800aa74 <HAL_UART_IRQHandler+0x730>
    return;
 800aa72:	bf00      	nop
  }
}
 800aa74:	37e8      	adds	r7, #232	; 0xe8
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
 800aa7a:	bf00      	nop
 800aa7c:	effffffe 	.word	0xeffffffe

0800aa80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aac0:	b5b0      	push	{r4, r5, r7, lr}
 800aac2:	b08e      	sub	sp, #56	; 0x38
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aac8:	2300      	movs	r3, #0
 800aaca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	689a      	ldr	r2, [r3, #8]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	691b      	ldr	r3, [r3, #16]
 800aad6:	431a      	orrs	r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	695b      	ldr	r3, [r3, #20]
 800aadc:	431a      	orrs	r2, r3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	69db      	ldr	r3, [r3, #28]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	4bbf      	ldr	r3, [pc, #764]	; (800adec <UART_SetConfig+0x32c>)
 800aaee:	4013      	ands	r3, r2
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	6812      	ldr	r2, [r2, #0]
 800aaf4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aaf6:	430b      	orrs	r3, r1
 800aaf8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	68da      	ldr	r2, [r3, #12]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	430a      	orrs	r2, r1
 800ab0e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	699b      	ldr	r3, [r3, #24]
 800ab14:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4ab5      	ldr	r2, [pc, #724]	; (800adf0 <UART_SetConfig+0x330>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d004      	beq.n	800ab2a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a1b      	ldr	r3, [r3, #32]
 800ab24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab26:	4313      	orrs	r3, r2
 800ab28:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	689a      	ldr	r2, [r3, #8]
 800ab30:	4bb0      	ldr	r3, [pc, #704]	; (800adf4 <UART_SetConfig+0x334>)
 800ab32:	4013      	ands	r3, r2
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	6812      	ldr	r2, [r2, #0]
 800ab38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab3a:	430b      	orrs	r3, r1
 800ab3c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab44:	f023 010f 	bic.w	r1, r3, #15
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	430a      	orrs	r2, r1
 800ab52:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4aa7      	ldr	r2, [pc, #668]	; (800adf8 <UART_SetConfig+0x338>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d176      	bne.n	800ac4c <UART_SetConfig+0x18c>
 800ab5e:	4ba7      	ldr	r3, [pc, #668]	; (800adfc <UART_SetConfig+0x33c>)
 800ab60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab66:	2b28      	cmp	r3, #40	; 0x28
 800ab68:	d86c      	bhi.n	800ac44 <UART_SetConfig+0x184>
 800ab6a:	a201      	add	r2, pc, #4	; (adr r2, 800ab70 <UART_SetConfig+0xb0>)
 800ab6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab70:	0800ac15 	.word	0x0800ac15
 800ab74:	0800ac45 	.word	0x0800ac45
 800ab78:	0800ac45 	.word	0x0800ac45
 800ab7c:	0800ac45 	.word	0x0800ac45
 800ab80:	0800ac45 	.word	0x0800ac45
 800ab84:	0800ac45 	.word	0x0800ac45
 800ab88:	0800ac45 	.word	0x0800ac45
 800ab8c:	0800ac45 	.word	0x0800ac45
 800ab90:	0800ac1d 	.word	0x0800ac1d
 800ab94:	0800ac45 	.word	0x0800ac45
 800ab98:	0800ac45 	.word	0x0800ac45
 800ab9c:	0800ac45 	.word	0x0800ac45
 800aba0:	0800ac45 	.word	0x0800ac45
 800aba4:	0800ac45 	.word	0x0800ac45
 800aba8:	0800ac45 	.word	0x0800ac45
 800abac:	0800ac45 	.word	0x0800ac45
 800abb0:	0800ac25 	.word	0x0800ac25
 800abb4:	0800ac45 	.word	0x0800ac45
 800abb8:	0800ac45 	.word	0x0800ac45
 800abbc:	0800ac45 	.word	0x0800ac45
 800abc0:	0800ac45 	.word	0x0800ac45
 800abc4:	0800ac45 	.word	0x0800ac45
 800abc8:	0800ac45 	.word	0x0800ac45
 800abcc:	0800ac45 	.word	0x0800ac45
 800abd0:	0800ac2d 	.word	0x0800ac2d
 800abd4:	0800ac45 	.word	0x0800ac45
 800abd8:	0800ac45 	.word	0x0800ac45
 800abdc:	0800ac45 	.word	0x0800ac45
 800abe0:	0800ac45 	.word	0x0800ac45
 800abe4:	0800ac45 	.word	0x0800ac45
 800abe8:	0800ac45 	.word	0x0800ac45
 800abec:	0800ac45 	.word	0x0800ac45
 800abf0:	0800ac35 	.word	0x0800ac35
 800abf4:	0800ac45 	.word	0x0800ac45
 800abf8:	0800ac45 	.word	0x0800ac45
 800abfc:	0800ac45 	.word	0x0800ac45
 800ac00:	0800ac45 	.word	0x0800ac45
 800ac04:	0800ac45 	.word	0x0800ac45
 800ac08:	0800ac45 	.word	0x0800ac45
 800ac0c:	0800ac45 	.word	0x0800ac45
 800ac10:	0800ac3d 	.word	0x0800ac3d
 800ac14:	2301      	movs	r3, #1
 800ac16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac1a:	e222      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ac1c:	2304      	movs	r3, #4
 800ac1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac22:	e21e      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ac24:	2308      	movs	r3, #8
 800ac26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac2a:	e21a      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ac2c:	2310      	movs	r3, #16
 800ac2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac32:	e216      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ac34:	2320      	movs	r3, #32
 800ac36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac3a:	e212      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ac3c:	2340      	movs	r3, #64	; 0x40
 800ac3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac42:	e20e      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ac44:	2380      	movs	r3, #128	; 0x80
 800ac46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac4a:	e20a      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a6b      	ldr	r2, [pc, #428]	; (800ae00 <UART_SetConfig+0x340>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d130      	bne.n	800acb8 <UART_SetConfig+0x1f8>
 800ac56:	4b69      	ldr	r3, [pc, #420]	; (800adfc <UART_SetConfig+0x33c>)
 800ac58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac5a:	f003 0307 	and.w	r3, r3, #7
 800ac5e:	2b05      	cmp	r3, #5
 800ac60:	d826      	bhi.n	800acb0 <UART_SetConfig+0x1f0>
 800ac62:	a201      	add	r2, pc, #4	; (adr r2, 800ac68 <UART_SetConfig+0x1a8>)
 800ac64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac68:	0800ac81 	.word	0x0800ac81
 800ac6c:	0800ac89 	.word	0x0800ac89
 800ac70:	0800ac91 	.word	0x0800ac91
 800ac74:	0800ac99 	.word	0x0800ac99
 800ac78:	0800aca1 	.word	0x0800aca1
 800ac7c:	0800aca9 	.word	0x0800aca9
 800ac80:	2300      	movs	r3, #0
 800ac82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac86:	e1ec      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ac88:	2304      	movs	r3, #4
 800ac8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac8e:	e1e8      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ac90:	2308      	movs	r3, #8
 800ac92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac96:	e1e4      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ac98:	2310      	movs	r3, #16
 800ac9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac9e:	e1e0      	b.n	800b062 <UART_SetConfig+0x5a2>
 800aca0:	2320      	movs	r3, #32
 800aca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aca6:	e1dc      	b.n	800b062 <UART_SetConfig+0x5a2>
 800aca8:	2340      	movs	r3, #64	; 0x40
 800acaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acae:	e1d8      	b.n	800b062 <UART_SetConfig+0x5a2>
 800acb0:	2380      	movs	r3, #128	; 0x80
 800acb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acb6:	e1d4      	b.n	800b062 <UART_SetConfig+0x5a2>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a51      	ldr	r2, [pc, #324]	; (800ae04 <UART_SetConfig+0x344>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d130      	bne.n	800ad24 <UART_SetConfig+0x264>
 800acc2:	4b4e      	ldr	r3, [pc, #312]	; (800adfc <UART_SetConfig+0x33c>)
 800acc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc6:	f003 0307 	and.w	r3, r3, #7
 800acca:	2b05      	cmp	r3, #5
 800accc:	d826      	bhi.n	800ad1c <UART_SetConfig+0x25c>
 800acce:	a201      	add	r2, pc, #4	; (adr r2, 800acd4 <UART_SetConfig+0x214>)
 800acd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd4:	0800aced 	.word	0x0800aced
 800acd8:	0800acf5 	.word	0x0800acf5
 800acdc:	0800acfd 	.word	0x0800acfd
 800ace0:	0800ad05 	.word	0x0800ad05
 800ace4:	0800ad0d 	.word	0x0800ad0d
 800ace8:	0800ad15 	.word	0x0800ad15
 800acec:	2300      	movs	r3, #0
 800acee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acf2:	e1b6      	b.n	800b062 <UART_SetConfig+0x5a2>
 800acf4:	2304      	movs	r3, #4
 800acf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acfa:	e1b2      	b.n	800b062 <UART_SetConfig+0x5a2>
 800acfc:	2308      	movs	r3, #8
 800acfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad02:	e1ae      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ad04:	2310      	movs	r3, #16
 800ad06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad0a:	e1aa      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ad0c:	2320      	movs	r3, #32
 800ad0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad12:	e1a6      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ad14:	2340      	movs	r3, #64	; 0x40
 800ad16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad1a:	e1a2      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ad1c:	2380      	movs	r3, #128	; 0x80
 800ad1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad22:	e19e      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a37      	ldr	r2, [pc, #220]	; (800ae08 <UART_SetConfig+0x348>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d130      	bne.n	800ad90 <UART_SetConfig+0x2d0>
 800ad2e:	4b33      	ldr	r3, [pc, #204]	; (800adfc <UART_SetConfig+0x33c>)
 800ad30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad32:	f003 0307 	and.w	r3, r3, #7
 800ad36:	2b05      	cmp	r3, #5
 800ad38:	d826      	bhi.n	800ad88 <UART_SetConfig+0x2c8>
 800ad3a:	a201      	add	r2, pc, #4	; (adr r2, 800ad40 <UART_SetConfig+0x280>)
 800ad3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad40:	0800ad59 	.word	0x0800ad59
 800ad44:	0800ad61 	.word	0x0800ad61
 800ad48:	0800ad69 	.word	0x0800ad69
 800ad4c:	0800ad71 	.word	0x0800ad71
 800ad50:	0800ad79 	.word	0x0800ad79
 800ad54:	0800ad81 	.word	0x0800ad81
 800ad58:	2300      	movs	r3, #0
 800ad5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad5e:	e180      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ad60:	2304      	movs	r3, #4
 800ad62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad66:	e17c      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ad68:	2308      	movs	r3, #8
 800ad6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad6e:	e178      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ad70:	2310      	movs	r3, #16
 800ad72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad76:	e174      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ad78:	2320      	movs	r3, #32
 800ad7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad7e:	e170      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ad80:	2340      	movs	r3, #64	; 0x40
 800ad82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad86:	e16c      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ad88:	2380      	movs	r3, #128	; 0x80
 800ad8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad8e:	e168      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a1d      	ldr	r2, [pc, #116]	; (800ae0c <UART_SetConfig+0x34c>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d142      	bne.n	800ae20 <UART_SetConfig+0x360>
 800ad9a:	4b18      	ldr	r3, [pc, #96]	; (800adfc <UART_SetConfig+0x33c>)
 800ad9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad9e:	f003 0307 	and.w	r3, r3, #7
 800ada2:	2b05      	cmp	r3, #5
 800ada4:	d838      	bhi.n	800ae18 <UART_SetConfig+0x358>
 800ada6:	a201      	add	r2, pc, #4	; (adr r2, 800adac <UART_SetConfig+0x2ec>)
 800ada8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adac:	0800adc5 	.word	0x0800adc5
 800adb0:	0800adcd 	.word	0x0800adcd
 800adb4:	0800add5 	.word	0x0800add5
 800adb8:	0800addd 	.word	0x0800addd
 800adbc:	0800ade5 	.word	0x0800ade5
 800adc0:	0800ae11 	.word	0x0800ae11
 800adc4:	2300      	movs	r3, #0
 800adc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adca:	e14a      	b.n	800b062 <UART_SetConfig+0x5a2>
 800adcc:	2304      	movs	r3, #4
 800adce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800add2:	e146      	b.n	800b062 <UART_SetConfig+0x5a2>
 800add4:	2308      	movs	r3, #8
 800add6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adda:	e142      	b.n	800b062 <UART_SetConfig+0x5a2>
 800addc:	2310      	movs	r3, #16
 800adde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ade2:	e13e      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ade4:	2320      	movs	r3, #32
 800ade6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adea:	e13a      	b.n	800b062 <UART_SetConfig+0x5a2>
 800adec:	cfff69f3 	.word	0xcfff69f3
 800adf0:	58000c00 	.word	0x58000c00
 800adf4:	11fff4ff 	.word	0x11fff4ff
 800adf8:	40011000 	.word	0x40011000
 800adfc:	58024400 	.word	0x58024400
 800ae00:	40004400 	.word	0x40004400
 800ae04:	40004800 	.word	0x40004800
 800ae08:	40004c00 	.word	0x40004c00
 800ae0c:	40005000 	.word	0x40005000
 800ae10:	2340      	movs	r3, #64	; 0x40
 800ae12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae16:	e124      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ae18:	2380      	movs	r3, #128	; 0x80
 800ae1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ae1e:	e120      	b.n	800b062 <UART_SetConfig+0x5a2>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4acc      	ldr	r2, [pc, #816]	; (800b158 <UART_SetConfig+0x698>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d176      	bne.n	800af18 <UART_SetConfig+0x458>
 800ae2a:	4bcc      	ldr	r3, [pc, #816]	; (800b15c <UART_SetConfig+0x69c>)
 800ae2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae32:	2b28      	cmp	r3, #40	; 0x28
 800ae34:	d86c      	bhi.n	800af10 <UART_SetConfig+0x450>
 800ae36:	a201      	add	r2, pc, #4	; (adr r2, 800ae3c <UART_SetConfig+0x37c>)
 800ae38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae3c:	0800aee1 	.word	0x0800aee1
 800ae40:	0800af11 	.word	0x0800af11
 800ae44:	0800af11 	.word	0x0800af11
 800ae48:	0800af11 	.word	0x0800af11
 800ae4c:	0800af11 	.word	0x0800af11
 800ae50:	0800af11 	.word	0x0800af11
 800ae54:	0800af11 	.word	0x0800af11
 800ae58:	0800af11 	.word	0x0800af11
 800ae5c:	0800aee9 	.word	0x0800aee9
 800ae60:	0800af11 	.word	0x0800af11
 800ae64:	0800af11 	.word	0x0800af11
 800ae68:	0800af11 	.word	0x0800af11
 800ae6c:	0800af11 	.word	0x0800af11
 800ae70:	0800af11 	.word	0x0800af11
 800ae74:	0800af11 	.word	0x0800af11
 800ae78:	0800af11 	.word	0x0800af11
 800ae7c:	0800aef1 	.word	0x0800aef1
 800ae80:	0800af11 	.word	0x0800af11
 800ae84:	0800af11 	.word	0x0800af11
 800ae88:	0800af11 	.word	0x0800af11
 800ae8c:	0800af11 	.word	0x0800af11
 800ae90:	0800af11 	.word	0x0800af11
 800ae94:	0800af11 	.word	0x0800af11
 800ae98:	0800af11 	.word	0x0800af11
 800ae9c:	0800aef9 	.word	0x0800aef9
 800aea0:	0800af11 	.word	0x0800af11
 800aea4:	0800af11 	.word	0x0800af11
 800aea8:	0800af11 	.word	0x0800af11
 800aeac:	0800af11 	.word	0x0800af11
 800aeb0:	0800af11 	.word	0x0800af11
 800aeb4:	0800af11 	.word	0x0800af11
 800aeb8:	0800af11 	.word	0x0800af11
 800aebc:	0800af01 	.word	0x0800af01
 800aec0:	0800af11 	.word	0x0800af11
 800aec4:	0800af11 	.word	0x0800af11
 800aec8:	0800af11 	.word	0x0800af11
 800aecc:	0800af11 	.word	0x0800af11
 800aed0:	0800af11 	.word	0x0800af11
 800aed4:	0800af11 	.word	0x0800af11
 800aed8:	0800af11 	.word	0x0800af11
 800aedc:	0800af09 	.word	0x0800af09
 800aee0:	2301      	movs	r3, #1
 800aee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aee6:	e0bc      	b.n	800b062 <UART_SetConfig+0x5a2>
 800aee8:	2304      	movs	r3, #4
 800aeea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeee:	e0b8      	b.n	800b062 <UART_SetConfig+0x5a2>
 800aef0:	2308      	movs	r3, #8
 800aef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aef6:	e0b4      	b.n	800b062 <UART_SetConfig+0x5a2>
 800aef8:	2310      	movs	r3, #16
 800aefa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aefe:	e0b0      	b.n	800b062 <UART_SetConfig+0x5a2>
 800af00:	2320      	movs	r3, #32
 800af02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af06:	e0ac      	b.n	800b062 <UART_SetConfig+0x5a2>
 800af08:	2340      	movs	r3, #64	; 0x40
 800af0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af0e:	e0a8      	b.n	800b062 <UART_SetConfig+0x5a2>
 800af10:	2380      	movs	r3, #128	; 0x80
 800af12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af16:	e0a4      	b.n	800b062 <UART_SetConfig+0x5a2>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a90      	ldr	r2, [pc, #576]	; (800b160 <UART_SetConfig+0x6a0>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d130      	bne.n	800af84 <UART_SetConfig+0x4c4>
 800af22:	4b8e      	ldr	r3, [pc, #568]	; (800b15c <UART_SetConfig+0x69c>)
 800af24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af26:	f003 0307 	and.w	r3, r3, #7
 800af2a:	2b05      	cmp	r3, #5
 800af2c:	d826      	bhi.n	800af7c <UART_SetConfig+0x4bc>
 800af2e:	a201      	add	r2, pc, #4	; (adr r2, 800af34 <UART_SetConfig+0x474>)
 800af30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af34:	0800af4d 	.word	0x0800af4d
 800af38:	0800af55 	.word	0x0800af55
 800af3c:	0800af5d 	.word	0x0800af5d
 800af40:	0800af65 	.word	0x0800af65
 800af44:	0800af6d 	.word	0x0800af6d
 800af48:	0800af75 	.word	0x0800af75
 800af4c:	2300      	movs	r3, #0
 800af4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af52:	e086      	b.n	800b062 <UART_SetConfig+0x5a2>
 800af54:	2304      	movs	r3, #4
 800af56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af5a:	e082      	b.n	800b062 <UART_SetConfig+0x5a2>
 800af5c:	2308      	movs	r3, #8
 800af5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af62:	e07e      	b.n	800b062 <UART_SetConfig+0x5a2>
 800af64:	2310      	movs	r3, #16
 800af66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af6a:	e07a      	b.n	800b062 <UART_SetConfig+0x5a2>
 800af6c:	2320      	movs	r3, #32
 800af6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af72:	e076      	b.n	800b062 <UART_SetConfig+0x5a2>
 800af74:	2340      	movs	r3, #64	; 0x40
 800af76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af7a:	e072      	b.n	800b062 <UART_SetConfig+0x5a2>
 800af7c:	2380      	movs	r3, #128	; 0x80
 800af7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af82:	e06e      	b.n	800b062 <UART_SetConfig+0x5a2>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a76      	ldr	r2, [pc, #472]	; (800b164 <UART_SetConfig+0x6a4>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d130      	bne.n	800aff0 <UART_SetConfig+0x530>
 800af8e:	4b73      	ldr	r3, [pc, #460]	; (800b15c <UART_SetConfig+0x69c>)
 800af90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af92:	f003 0307 	and.w	r3, r3, #7
 800af96:	2b05      	cmp	r3, #5
 800af98:	d826      	bhi.n	800afe8 <UART_SetConfig+0x528>
 800af9a:	a201      	add	r2, pc, #4	; (adr r2, 800afa0 <UART_SetConfig+0x4e0>)
 800af9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa0:	0800afb9 	.word	0x0800afb9
 800afa4:	0800afc1 	.word	0x0800afc1
 800afa8:	0800afc9 	.word	0x0800afc9
 800afac:	0800afd1 	.word	0x0800afd1
 800afb0:	0800afd9 	.word	0x0800afd9
 800afb4:	0800afe1 	.word	0x0800afe1
 800afb8:	2300      	movs	r3, #0
 800afba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afbe:	e050      	b.n	800b062 <UART_SetConfig+0x5a2>
 800afc0:	2304      	movs	r3, #4
 800afc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afc6:	e04c      	b.n	800b062 <UART_SetConfig+0x5a2>
 800afc8:	2308      	movs	r3, #8
 800afca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afce:	e048      	b.n	800b062 <UART_SetConfig+0x5a2>
 800afd0:	2310      	movs	r3, #16
 800afd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afd6:	e044      	b.n	800b062 <UART_SetConfig+0x5a2>
 800afd8:	2320      	movs	r3, #32
 800afda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afde:	e040      	b.n	800b062 <UART_SetConfig+0x5a2>
 800afe0:	2340      	movs	r3, #64	; 0x40
 800afe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afe6:	e03c      	b.n	800b062 <UART_SetConfig+0x5a2>
 800afe8:	2380      	movs	r3, #128	; 0x80
 800afea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afee:	e038      	b.n	800b062 <UART_SetConfig+0x5a2>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a5c      	ldr	r2, [pc, #368]	; (800b168 <UART_SetConfig+0x6a8>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d130      	bne.n	800b05c <UART_SetConfig+0x59c>
 800affa:	4b58      	ldr	r3, [pc, #352]	; (800b15c <UART_SetConfig+0x69c>)
 800affc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800affe:	f003 0307 	and.w	r3, r3, #7
 800b002:	2b05      	cmp	r3, #5
 800b004:	d826      	bhi.n	800b054 <UART_SetConfig+0x594>
 800b006:	a201      	add	r2, pc, #4	; (adr r2, 800b00c <UART_SetConfig+0x54c>)
 800b008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b00c:	0800b025 	.word	0x0800b025
 800b010:	0800b02d 	.word	0x0800b02d
 800b014:	0800b035 	.word	0x0800b035
 800b018:	0800b03d 	.word	0x0800b03d
 800b01c:	0800b045 	.word	0x0800b045
 800b020:	0800b04d 	.word	0x0800b04d
 800b024:	2302      	movs	r3, #2
 800b026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b02a:	e01a      	b.n	800b062 <UART_SetConfig+0x5a2>
 800b02c:	2304      	movs	r3, #4
 800b02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b032:	e016      	b.n	800b062 <UART_SetConfig+0x5a2>
 800b034:	2308      	movs	r3, #8
 800b036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b03a:	e012      	b.n	800b062 <UART_SetConfig+0x5a2>
 800b03c:	2310      	movs	r3, #16
 800b03e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b042:	e00e      	b.n	800b062 <UART_SetConfig+0x5a2>
 800b044:	2320      	movs	r3, #32
 800b046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b04a:	e00a      	b.n	800b062 <UART_SetConfig+0x5a2>
 800b04c:	2340      	movs	r3, #64	; 0x40
 800b04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b052:	e006      	b.n	800b062 <UART_SetConfig+0x5a2>
 800b054:	2380      	movs	r3, #128	; 0x80
 800b056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b05a:	e002      	b.n	800b062 <UART_SetConfig+0x5a2>
 800b05c:	2380      	movs	r3, #128	; 0x80
 800b05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a40      	ldr	r2, [pc, #256]	; (800b168 <UART_SetConfig+0x6a8>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	f040 80ef 	bne.w	800b24c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b06e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b072:	2b20      	cmp	r3, #32
 800b074:	dc46      	bgt.n	800b104 <UART_SetConfig+0x644>
 800b076:	2b02      	cmp	r3, #2
 800b078:	f2c0 8081 	blt.w	800b17e <UART_SetConfig+0x6be>
 800b07c:	3b02      	subs	r3, #2
 800b07e:	2b1e      	cmp	r3, #30
 800b080:	d87d      	bhi.n	800b17e <UART_SetConfig+0x6be>
 800b082:	a201      	add	r2, pc, #4	; (adr r2, 800b088 <UART_SetConfig+0x5c8>)
 800b084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b088:	0800b10b 	.word	0x0800b10b
 800b08c:	0800b17f 	.word	0x0800b17f
 800b090:	0800b113 	.word	0x0800b113
 800b094:	0800b17f 	.word	0x0800b17f
 800b098:	0800b17f 	.word	0x0800b17f
 800b09c:	0800b17f 	.word	0x0800b17f
 800b0a0:	0800b123 	.word	0x0800b123
 800b0a4:	0800b17f 	.word	0x0800b17f
 800b0a8:	0800b17f 	.word	0x0800b17f
 800b0ac:	0800b17f 	.word	0x0800b17f
 800b0b0:	0800b17f 	.word	0x0800b17f
 800b0b4:	0800b17f 	.word	0x0800b17f
 800b0b8:	0800b17f 	.word	0x0800b17f
 800b0bc:	0800b17f 	.word	0x0800b17f
 800b0c0:	0800b133 	.word	0x0800b133
 800b0c4:	0800b17f 	.word	0x0800b17f
 800b0c8:	0800b17f 	.word	0x0800b17f
 800b0cc:	0800b17f 	.word	0x0800b17f
 800b0d0:	0800b17f 	.word	0x0800b17f
 800b0d4:	0800b17f 	.word	0x0800b17f
 800b0d8:	0800b17f 	.word	0x0800b17f
 800b0dc:	0800b17f 	.word	0x0800b17f
 800b0e0:	0800b17f 	.word	0x0800b17f
 800b0e4:	0800b17f 	.word	0x0800b17f
 800b0e8:	0800b17f 	.word	0x0800b17f
 800b0ec:	0800b17f 	.word	0x0800b17f
 800b0f0:	0800b17f 	.word	0x0800b17f
 800b0f4:	0800b17f 	.word	0x0800b17f
 800b0f8:	0800b17f 	.word	0x0800b17f
 800b0fc:	0800b17f 	.word	0x0800b17f
 800b100:	0800b171 	.word	0x0800b171
 800b104:	2b40      	cmp	r3, #64	; 0x40
 800b106:	d036      	beq.n	800b176 <UART_SetConfig+0x6b6>
 800b108:	e039      	b.n	800b17e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b10a:	f7fc ff2d 	bl	8007f68 <HAL_RCCEx_GetD3PCLK1Freq>
 800b10e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b110:	e03b      	b.n	800b18a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b112:	f107 0314 	add.w	r3, r7, #20
 800b116:	4618      	mov	r0, r3
 800b118:	f7fc ff3c 	bl	8007f94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b11c:	69bb      	ldr	r3, [r7, #24]
 800b11e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b120:	e033      	b.n	800b18a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b122:	f107 0308 	add.w	r3, r7, #8
 800b126:	4618      	mov	r0, r3
 800b128:	f7fd f888 	bl	800823c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b130:	e02b      	b.n	800b18a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b132:	4b0a      	ldr	r3, [pc, #40]	; (800b15c <UART_SetConfig+0x69c>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f003 0320 	and.w	r3, r3, #32
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d009      	beq.n	800b152 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b13e:	4b07      	ldr	r3, [pc, #28]	; (800b15c <UART_SetConfig+0x69c>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	08db      	lsrs	r3, r3, #3
 800b144:	f003 0303 	and.w	r3, r3, #3
 800b148:	4a08      	ldr	r2, [pc, #32]	; (800b16c <UART_SetConfig+0x6ac>)
 800b14a:	fa22 f303 	lsr.w	r3, r2, r3
 800b14e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b150:	e01b      	b.n	800b18a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b152:	4b06      	ldr	r3, [pc, #24]	; (800b16c <UART_SetConfig+0x6ac>)
 800b154:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b156:	e018      	b.n	800b18a <UART_SetConfig+0x6ca>
 800b158:	40011400 	.word	0x40011400
 800b15c:	58024400 	.word	0x58024400
 800b160:	40007800 	.word	0x40007800
 800b164:	40007c00 	.word	0x40007c00
 800b168:	58000c00 	.word	0x58000c00
 800b16c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b170:	4bc4      	ldr	r3, [pc, #784]	; (800b484 <UART_SetConfig+0x9c4>)
 800b172:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b174:	e009      	b.n	800b18a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b17a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b17c:	e005      	b.n	800b18a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b17e:	2300      	movs	r3, #0
 800b180:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b188:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f000 81da 	beq.w	800b546 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b196:	4abc      	ldr	r2, [pc, #752]	; (800b488 <UART_SetConfig+0x9c8>)
 800b198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b19c:	461a      	mov	r2, r3
 800b19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1a4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	685a      	ldr	r2, [r3, #4]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	005b      	lsls	r3, r3, #1
 800b1ae:	4413      	add	r3, r2
 800b1b0:	6a3a      	ldr	r2, [r7, #32]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d305      	bcc.n	800b1c2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b1bc:	6a3a      	ldr	r2, [r7, #32]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d903      	bls.n	800b1ca <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b1c8:	e1bd      	b.n	800b546 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f04f 0100 	mov.w	r1, #0
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d6:	4aac      	ldr	r2, [pc, #688]	; (800b488 <UART_SetConfig+0x9c8>)
 800b1d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b1dc:	b29a      	uxth	r2, r3
 800b1de:	f04f 0300 	mov.w	r3, #0
 800b1e2:	f7f5 f8d5 	bl	8000390 <__aeabi_uldivmod>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	4610      	mov	r0, r2
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	f04f 0200 	mov.w	r2, #0
 800b1f2:	f04f 0300 	mov.w	r3, #0
 800b1f6:	020b      	lsls	r3, r1, #8
 800b1f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b1fc:	0202      	lsls	r2, r0, #8
 800b1fe:	6879      	ldr	r1, [r7, #4]
 800b200:	6849      	ldr	r1, [r1, #4]
 800b202:	0849      	lsrs	r1, r1, #1
 800b204:	4608      	mov	r0, r1
 800b206:	f04f 0100 	mov.w	r1, #0
 800b20a:	1814      	adds	r4, r2, r0
 800b20c:	eb43 0501 	adc.w	r5, r3, r1
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	461a      	mov	r2, r3
 800b216:	f04f 0300 	mov.w	r3, #0
 800b21a:	4620      	mov	r0, r4
 800b21c:	4629      	mov	r1, r5
 800b21e:	f7f5 f8b7 	bl	8000390 <__aeabi_uldivmod>
 800b222:	4602      	mov	r2, r0
 800b224:	460b      	mov	r3, r1
 800b226:	4613      	mov	r3, r2
 800b228:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b230:	d308      	bcc.n	800b244 <UART_SetConfig+0x784>
 800b232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b234:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b238:	d204      	bcs.n	800b244 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b240:	60da      	str	r2, [r3, #12]
 800b242:	e180      	b.n	800b546 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b244:	2301      	movs	r3, #1
 800b246:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b24a:	e17c      	b.n	800b546 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	69db      	ldr	r3, [r3, #28]
 800b250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b254:	f040 80be 	bne.w	800b3d4 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800b258:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b25c:	2b20      	cmp	r3, #32
 800b25e:	dc49      	bgt.n	800b2f4 <UART_SetConfig+0x834>
 800b260:	2b00      	cmp	r3, #0
 800b262:	db7c      	blt.n	800b35e <UART_SetConfig+0x89e>
 800b264:	2b20      	cmp	r3, #32
 800b266:	d87a      	bhi.n	800b35e <UART_SetConfig+0x89e>
 800b268:	a201      	add	r2, pc, #4	; (adr r2, 800b270 <UART_SetConfig+0x7b0>)
 800b26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b26e:	bf00      	nop
 800b270:	0800b2fb 	.word	0x0800b2fb
 800b274:	0800b303 	.word	0x0800b303
 800b278:	0800b35f 	.word	0x0800b35f
 800b27c:	0800b35f 	.word	0x0800b35f
 800b280:	0800b30b 	.word	0x0800b30b
 800b284:	0800b35f 	.word	0x0800b35f
 800b288:	0800b35f 	.word	0x0800b35f
 800b28c:	0800b35f 	.word	0x0800b35f
 800b290:	0800b31b 	.word	0x0800b31b
 800b294:	0800b35f 	.word	0x0800b35f
 800b298:	0800b35f 	.word	0x0800b35f
 800b29c:	0800b35f 	.word	0x0800b35f
 800b2a0:	0800b35f 	.word	0x0800b35f
 800b2a4:	0800b35f 	.word	0x0800b35f
 800b2a8:	0800b35f 	.word	0x0800b35f
 800b2ac:	0800b35f 	.word	0x0800b35f
 800b2b0:	0800b32b 	.word	0x0800b32b
 800b2b4:	0800b35f 	.word	0x0800b35f
 800b2b8:	0800b35f 	.word	0x0800b35f
 800b2bc:	0800b35f 	.word	0x0800b35f
 800b2c0:	0800b35f 	.word	0x0800b35f
 800b2c4:	0800b35f 	.word	0x0800b35f
 800b2c8:	0800b35f 	.word	0x0800b35f
 800b2cc:	0800b35f 	.word	0x0800b35f
 800b2d0:	0800b35f 	.word	0x0800b35f
 800b2d4:	0800b35f 	.word	0x0800b35f
 800b2d8:	0800b35f 	.word	0x0800b35f
 800b2dc:	0800b35f 	.word	0x0800b35f
 800b2e0:	0800b35f 	.word	0x0800b35f
 800b2e4:	0800b35f 	.word	0x0800b35f
 800b2e8:	0800b35f 	.word	0x0800b35f
 800b2ec:	0800b35f 	.word	0x0800b35f
 800b2f0:	0800b351 	.word	0x0800b351
 800b2f4:	2b40      	cmp	r3, #64	; 0x40
 800b2f6:	d02e      	beq.n	800b356 <UART_SetConfig+0x896>
 800b2f8:	e031      	b.n	800b35e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2fa:	f7fb fec9 	bl	8007090 <HAL_RCC_GetPCLK1Freq>
 800b2fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b300:	e033      	b.n	800b36a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b302:	f7fb fedb 	bl	80070bc <HAL_RCC_GetPCLK2Freq>
 800b306:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b308:	e02f      	b.n	800b36a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b30a:	f107 0314 	add.w	r3, r7, #20
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fc fe40 	bl	8007f94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b318:	e027      	b.n	800b36a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b31a:	f107 0308 	add.w	r3, r7, #8
 800b31e:	4618      	mov	r0, r3
 800b320:	f7fc ff8c 	bl	800823c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b328:	e01f      	b.n	800b36a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b32a:	4b58      	ldr	r3, [pc, #352]	; (800b48c <UART_SetConfig+0x9cc>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f003 0320 	and.w	r3, r3, #32
 800b332:	2b00      	cmp	r3, #0
 800b334:	d009      	beq.n	800b34a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b336:	4b55      	ldr	r3, [pc, #340]	; (800b48c <UART_SetConfig+0x9cc>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	08db      	lsrs	r3, r3, #3
 800b33c:	f003 0303 	and.w	r3, r3, #3
 800b340:	4a53      	ldr	r2, [pc, #332]	; (800b490 <UART_SetConfig+0x9d0>)
 800b342:	fa22 f303 	lsr.w	r3, r2, r3
 800b346:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b348:	e00f      	b.n	800b36a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b34a:	4b51      	ldr	r3, [pc, #324]	; (800b490 <UART_SetConfig+0x9d0>)
 800b34c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b34e:	e00c      	b.n	800b36a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b350:	4b4c      	ldr	r3, [pc, #304]	; (800b484 <UART_SetConfig+0x9c4>)
 800b352:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b354:	e009      	b.n	800b36a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b35a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b35c:	e005      	b.n	800b36a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b35e:	2300      	movs	r3, #0
 800b360:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b368:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f000 80ea 	beq.w	800b546 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b376:	4a44      	ldr	r2, [pc, #272]	; (800b488 <UART_SetConfig+0x9c8>)
 800b378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b37c:	461a      	mov	r2, r3
 800b37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b380:	fbb3 f3f2 	udiv	r3, r3, r2
 800b384:	005a      	lsls	r2, r3, #1
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	085b      	lsrs	r3, r3, #1
 800b38c:	441a      	add	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	fbb2 f3f3 	udiv	r3, r2, r3
 800b396:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39a:	2b0f      	cmp	r3, #15
 800b39c:	d916      	bls.n	800b3cc <UART_SetConfig+0x90c>
 800b39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3a4:	d212      	bcs.n	800b3cc <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	f023 030f 	bic.w	r3, r3, #15
 800b3ae:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b2:	085b      	lsrs	r3, r3, #1
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	f003 0307 	and.w	r3, r3, #7
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b3c8:	60da      	str	r2, [r3, #12]
 800b3ca:	e0bc      	b.n	800b546 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b3d2:	e0b8      	b.n	800b546 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b3d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b3d8:	2b20      	cmp	r3, #32
 800b3da:	dc4b      	bgt.n	800b474 <UART_SetConfig+0x9b4>
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f2c0 8087 	blt.w	800b4f0 <UART_SetConfig+0xa30>
 800b3e2:	2b20      	cmp	r3, #32
 800b3e4:	f200 8084 	bhi.w	800b4f0 <UART_SetConfig+0xa30>
 800b3e8:	a201      	add	r2, pc, #4	; (adr r2, 800b3f0 <UART_SetConfig+0x930>)
 800b3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ee:	bf00      	nop
 800b3f0:	0800b47b 	.word	0x0800b47b
 800b3f4:	0800b495 	.word	0x0800b495
 800b3f8:	0800b4f1 	.word	0x0800b4f1
 800b3fc:	0800b4f1 	.word	0x0800b4f1
 800b400:	0800b49d 	.word	0x0800b49d
 800b404:	0800b4f1 	.word	0x0800b4f1
 800b408:	0800b4f1 	.word	0x0800b4f1
 800b40c:	0800b4f1 	.word	0x0800b4f1
 800b410:	0800b4ad 	.word	0x0800b4ad
 800b414:	0800b4f1 	.word	0x0800b4f1
 800b418:	0800b4f1 	.word	0x0800b4f1
 800b41c:	0800b4f1 	.word	0x0800b4f1
 800b420:	0800b4f1 	.word	0x0800b4f1
 800b424:	0800b4f1 	.word	0x0800b4f1
 800b428:	0800b4f1 	.word	0x0800b4f1
 800b42c:	0800b4f1 	.word	0x0800b4f1
 800b430:	0800b4bd 	.word	0x0800b4bd
 800b434:	0800b4f1 	.word	0x0800b4f1
 800b438:	0800b4f1 	.word	0x0800b4f1
 800b43c:	0800b4f1 	.word	0x0800b4f1
 800b440:	0800b4f1 	.word	0x0800b4f1
 800b444:	0800b4f1 	.word	0x0800b4f1
 800b448:	0800b4f1 	.word	0x0800b4f1
 800b44c:	0800b4f1 	.word	0x0800b4f1
 800b450:	0800b4f1 	.word	0x0800b4f1
 800b454:	0800b4f1 	.word	0x0800b4f1
 800b458:	0800b4f1 	.word	0x0800b4f1
 800b45c:	0800b4f1 	.word	0x0800b4f1
 800b460:	0800b4f1 	.word	0x0800b4f1
 800b464:	0800b4f1 	.word	0x0800b4f1
 800b468:	0800b4f1 	.word	0x0800b4f1
 800b46c:	0800b4f1 	.word	0x0800b4f1
 800b470:	0800b4e3 	.word	0x0800b4e3
 800b474:	2b40      	cmp	r3, #64	; 0x40
 800b476:	d037      	beq.n	800b4e8 <UART_SetConfig+0xa28>
 800b478:	e03a      	b.n	800b4f0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b47a:	f7fb fe09 	bl	8007090 <HAL_RCC_GetPCLK1Freq>
 800b47e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b480:	e03c      	b.n	800b4fc <UART_SetConfig+0xa3c>
 800b482:	bf00      	nop
 800b484:	003d0900 	.word	0x003d0900
 800b488:	0800f5a8 	.word	0x0800f5a8
 800b48c:	58024400 	.word	0x58024400
 800b490:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b494:	f7fb fe12 	bl	80070bc <HAL_RCC_GetPCLK2Freq>
 800b498:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b49a:	e02f      	b.n	800b4fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b49c:	f107 0314 	add.w	r3, r7, #20
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7fc fd77 	bl	8007f94 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4aa:	e027      	b.n	800b4fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4ac:	f107 0308 	add.w	r3, r7, #8
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7fc fec3 	bl	800823c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4ba:	e01f      	b.n	800b4fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4bc:	4b2c      	ldr	r3, [pc, #176]	; (800b570 <UART_SetConfig+0xab0>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f003 0320 	and.w	r3, r3, #32
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d009      	beq.n	800b4dc <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b4c8:	4b29      	ldr	r3, [pc, #164]	; (800b570 <UART_SetConfig+0xab0>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	08db      	lsrs	r3, r3, #3
 800b4ce:	f003 0303 	and.w	r3, r3, #3
 800b4d2:	4a28      	ldr	r2, [pc, #160]	; (800b574 <UART_SetConfig+0xab4>)
 800b4d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b4da:	e00f      	b.n	800b4fc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b4dc:	4b25      	ldr	r3, [pc, #148]	; (800b574 <UART_SetConfig+0xab4>)
 800b4de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4e0:	e00c      	b.n	800b4fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b4e2:	4b25      	ldr	r3, [pc, #148]	; (800b578 <UART_SetConfig+0xab8>)
 800b4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4e6:	e009      	b.n	800b4fc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b4ee:	e005      	b.n	800b4fc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b4fa:	bf00      	nop
    }

    if (pclk != 0U)
 800b4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d021      	beq.n	800b546 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b506:	4a1d      	ldr	r2, [pc, #116]	; (800b57c <UART_SetConfig+0xabc>)
 800b508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b50c:	461a      	mov	r2, r3
 800b50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b510:	fbb3 f2f2 	udiv	r2, r3, r2
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	085b      	lsrs	r3, r3, #1
 800b51a:	441a      	add	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	fbb2 f3f3 	udiv	r3, r2, r3
 800b524:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b528:	2b0f      	cmp	r3, #15
 800b52a:	d909      	bls.n	800b540 <UART_SetConfig+0xa80>
 800b52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b52e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b532:	d205      	bcs.n	800b540 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b536:	b29a      	uxth	r2, r3
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	60da      	str	r2, [r3, #12]
 800b53e:	e002      	b.n	800b546 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2201      	movs	r2, #1
 800b552:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b562:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b566:	4618      	mov	r0, r3
 800b568:	3738      	adds	r7, #56	; 0x38
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bdb0      	pop	{r4, r5, r7, pc}
 800b56e:	bf00      	nop
 800b570:	58024400 	.word	0x58024400
 800b574:	03d09000 	.word	0x03d09000
 800b578:	003d0900 	.word	0x003d0900
 800b57c:	0800f5a8 	.word	0x0800f5a8

0800b580 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b58c:	f003 0301 	and.w	r3, r3, #1
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00a      	beq.n	800b5aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	430a      	orrs	r2, r1
 800b5a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ae:	f003 0302 	and.w	r3, r3, #2
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d00a      	beq.n	800b5cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	685b      	ldr	r3, [r3, #4]
 800b5bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	430a      	orrs	r2, r1
 800b5ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d0:	f003 0304 	and.w	r3, r3, #4
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d00a      	beq.n	800b5ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	430a      	orrs	r2, r1
 800b5ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f2:	f003 0308 	and.w	r3, r3, #8
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00a      	beq.n	800b610 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	430a      	orrs	r2, r1
 800b60e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b614:	f003 0310 	and.w	r3, r3, #16
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d00a      	beq.n	800b632 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	430a      	orrs	r2, r1
 800b630:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b636:	f003 0320 	and.w	r3, r3, #32
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d00a      	beq.n	800b654 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	430a      	orrs	r2, r1
 800b652:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d01a      	beq.n	800b696 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	430a      	orrs	r2, r1
 800b674:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b67a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b67e:	d10a      	bne.n	800b696 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	430a      	orrs	r2, r1
 800b694:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00a      	beq.n	800b6b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	430a      	orrs	r2, r1
 800b6b6:	605a      	str	r2, [r3, #4]
  }
}
 800b6b8:	bf00      	nop
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b086      	sub	sp, #24
 800b6c8:	af02      	add	r7, sp, #8
 800b6ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b6d4:	f7f7 fef0 	bl	80034b8 <HAL_GetTick>
 800b6d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f003 0308 	and.w	r3, r3, #8
 800b6e4:	2b08      	cmp	r3, #8
 800b6e6:	d10e      	bne.n	800b706 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b6e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 f82f 	bl	800b75a <UART_WaitOnFlagUntilTimeout>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d001      	beq.n	800b706 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b702:	2303      	movs	r3, #3
 800b704:	e025      	b.n	800b752 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f003 0304 	and.w	r3, r3, #4
 800b710:	2b04      	cmp	r3, #4
 800b712:	d10e      	bne.n	800b732 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b714:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b718:	9300      	str	r3, [sp, #0]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2200      	movs	r2, #0
 800b71e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 f819 	bl	800b75a <UART_WaitOnFlagUntilTimeout>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d001      	beq.n	800b732 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b72e:	2303      	movs	r3, #3
 800b730:	e00f      	b.n	800b752 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2220      	movs	r2, #32
 800b736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2220      	movs	r2, #32
 800b73e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}

0800b75a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b75a:	b580      	push	{r7, lr}
 800b75c:	b09c      	sub	sp, #112	; 0x70
 800b75e:	af00      	add	r7, sp, #0
 800b760:	60f8      	str	r0, [r7, #12]
 800b762:	60b9      	str	r1, [r7, #8]
 800b764:	603b      	str	r3, [r7, #0]
 800b766:	4613      	mov	r3, r2
 800b768:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b76a:	e0a9      	b.n	800b8c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b76c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b772:	f000 80a5 	beq.w	800b8c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b776:	f7f7 fe9f 	bl	80034b8 <HAL_GetTick>
 800b77a:	4602      	mov	r2, r0
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b782:	429a      	cmp	r2, r3
 800b784:	d302      	bcc.n	800b78c <UART_WaitOnFlagUntilTimeout+0x32>
 800b786:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d140      	bne.n	800b80e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b794:	e853 3f00 	ldrex	r3, [r3]
 800b798:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b79a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b79c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b7a0:	667b      	str	r3, [r7, #100]	; 0x64
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b7aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b7ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b7b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b7b2:	e841 2300 	strex	r3, r2, [r1]
 800b7b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b7b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1e6      	bne.n	800b78c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	3308      	adds	r3, #8
 800b7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7c8:	e853 3f00 	ldrex	r3, [r3]
 800b7cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d0:	f023 0301 	bic.w	r3, r3, #1
 800b7d4:	663b      	str	r3, [r7, #96]	; 0x60
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	3308      	adds	r3, #8
 800b7dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b7de:	64ba      	str	r2, [r7, #72]	; 0x48
 800b7e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b7e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7e6:	e841 2300 	strex	r3, r2, [r1]
 800b7ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b7ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d1e5      	bne.n	800b7be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2220      	movs	r2, #32
 800b7f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2220      	movs	r2, #32
 800b7fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2200      	movs	r2, #0
 800b806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b80a:	2303      	movs	r3, #3
 800b80c:	e069      	b.n	800b8e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f003 0304 	and.w	r3, r3, #4
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d051      	beq.n	800b8c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	69db      	ldr	r3, [r3, #28]
 800b822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b82a:	d149      	bne.n	800b8c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b834:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83e:	e853 3f00 	ldrex	r3, [r3]
 800b842:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b846:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b84a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	461a      	mov	r2, r3
 800b852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b854:	637b      	str	r3, [r7, #52]	; 0x34
 800b856:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b858:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b85a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b85c:	e841 2300 	strex	r3, r2, [r1]
 800b860:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b864:	2b00      	cmp	r3, #0
 800b866:	d1e6      	bne.n	800b836 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	3308      	adds	r3, #8
 800b86e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	e853 3f00 	ldrex	r3, [r3]
 800b876:	613b      	str	r3, [r7, #16]
   return(result);
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	f023 0301 	bic.w	r3, r3, #1
 800b87e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	3308      	adds	r3, #8
 800b886:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b888:	623a      	str	r2, [r7, #32]
 800b88a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88c:	69f9      	ldr	r1, [r7, #28]
 800b88e:	6a3a      	ldr	r2, [r7, #32]
 800b890:	e841 2300 	strex	r3, r2, [r1]
 800b894:	61bb      	str	r3, [r7, #24]
   return(result);
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1e5      	bne.n	800b868 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2220      	movs	r2, #32
 800b8a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2220      	movs	r2, #32
 800b8a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2220      	movs	r2, #32
 800b8b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	e010      	b.n	800b8e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	69da      	ldr	r2, [r3, #28]
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	68ba      	ldr	r2, [r7, #8]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	bf0c      	ite	eq
 800b8d0:	2301      	moveq	r3, #1
 800b8d2:	2300      	movne	r3, #0
 800b8d4:	b2db      	uxtb	r3, r3
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	79fb      	ldrb	r3, [r7, #7]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	f43f af46 	beq.w	800b76c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b8e0:	2300      	movs	r3, #0
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3770      	adds	r7, #112	; 0x70
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
	...

0800b8ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b095      	sub	sp, #84	; 0x54
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8fc:	e853 3f00 	ldrex	r3, [r3]
 800b900:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b908:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	461a      	mov	r2, r3
 800b910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b912:	643b      	str	r3, [r7, #64]	; 0x40
 800b914:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b916:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b918:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b91a:	e841 2300 	strex	r3, r2, [r1]
 800b91e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1e6      	bne.n	800b8f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	3308      	adds	r3, #8
 800b92c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92e:	6a3b      	ldr	r3, [r7, #32]
 800b930:	e853 3f00 	ldrex	r3, [r3]
 800b934:	61fb      	str	r3, [r7, #28]
   return(result);
 800b936:	69fa      	ldr	r2, [r7, #28]
 800b938:	4b1e      	ldr	r3, [pc, #120]	; (800b9b4 <UART_EndRxTransfer+0xc8>)
 800b93a:	4013      	ands	r3, r2
 800b93c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	3308      	adds	r3, #8
 800b944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b946:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b948:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b94a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b94c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b94e:	e841 2300 	strex	r3, r2, [r1]
 800b952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1e5      	bne.n	800b926 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d118      	bne.n	800b994 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	e853 3f00 	ldrex	r3, [r3]
 800b96e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	f023 0310 	bic.w	r3, r3, #16
 800b976:	647b      	str	r3, [r7, #68]	; 0x44
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	461a      	mov	r2, r3
 800b97e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b980:	61bb      	str	r3, [r7, #24]
 800b982:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b984:	6979      	ldr	r1, [r7, #20]
 800b986:	69ba      	ldr	r2, [r7, #24]
 800b988:	e841 2300 	strex	r3, r2, [r1]
 800b98c:	613b      	str	r3, [r7, #16]
   return(result);
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d1e6      	bne.n	800b962 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2220      	movs	r2, #32
 800b998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b9a8:	bf00      	nop
 800b9aa:	3754      	adds	r7, #84	; 0x54
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr
 800b9b4:	effffffe 	.word	0xeffffffe

0800b9b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	f7ff f85c 	bl	800aa94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9dc:	bf00      	nop
 800b9de:	3710      	adds	r7, #16
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b088      	sub	sp, #32
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	e853 3f00 	ldrex	r3, [r3]
 800b9f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba00:	61fb      	str	r3, [r7, #28]
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	461a      	mov	r2, r3
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	61bb      	str	r3, [r7, #24]
 800ba0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba0e:	6979      	ldr	r1, [r7, #20]
 800ba10:	69ba      	ldr	r2, [r7, #24]
 800ba12:	e841 2300 	strex	r3, r2, [r1]
 800ba16:	613b      	str	r3, [r7, #16]
   return(result);
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d1e6      	bne.n	800b9ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2220      	movs	r2, #32
 800ba22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7ff f827 	bl	800aa80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba32:	bf00      	nop
 800ba34:	3720      	adds	r7, #32
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ba3a:	b480      	push	{r7}
 800ba3c:	b083      	sub	sp, #12
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ba42:	bf00      	nop
 800ba44:	370c      	adds	r7, #12
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b083      	sub	sp, #12
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ba56:	bf00      	nop
 800ba58:	370c      	adds	r7, #12
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ba62:	b480      	push	{r7}
 800ba64:	b083      	sub	sp, #12
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ba6a:	bf00      	nop
 800ba6c:	370c      	adds	r7, #12
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b084      	sub	sp, #16
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d101      	bne.n	800ba8c <HAL_UARTEx_EnableFifoMode+0x16>
 800ba88:	2302      	movs	r3, #2
 800ba8a:	e02b      	b.n	800bae4 <HAL_UARTEx_EnableFifoMode+0x6e>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2224      	movs	r2, #36	; 0x24
 800ba98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f022 0201 	bic.w	r2, r2, #1
 800bab2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800baba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800bac2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 f8c3 	bl	800bc58 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2220      	movs	r2, #32
 800bad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d101      	bne.n	800bb02 <HAL_UARTEx_DisableFifoMode+0x16>
 800bafe:	2302      	movs	r3, #2
 800bb00:	e027      	b.n	800bb52 <HAL_UARTEx_DisableFifoMode+0x66>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2201      	movs	r2, #1
 800bb06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2224      	movs	r2, #36	; 0x24
 800bb0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	681a      	ldr	r2, [r3, #0]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f022 0201 	bic.w	r2, r2, #1
 800bb28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bb30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2200      	movs	r2, #0
 800bb36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2220      	movs	r2, #32
 800bb44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3714      	adds	r7, #20
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b084      	sub	sp, #16
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
 800bb66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d101      	bne.n	800bb76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb72:	2302      	movs	r3, #2
 800bb74:	e02d      	b.n	800bbd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2224      	movs	r2, #36	; 0x24
 800bb82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f022 0201 	bic.w	r2, r2, #1
 800bb9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	683a      	ldr	r2, [r7, #0]
 800bbae:	430a      	orrs	r2, r1
 800bbb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 f850 	bl	800bc58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2220      	movs	r2, #32
 800bbc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bbd0:	2300      	movs	r3, #0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b084      	sub	sp, #16
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	d101      	bne.n	800bbf2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bbee:	2302      	movs	r3, #2
 800bbf0:	e02d      	b.n	800bc4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2224      	movs	r2, #36	; 0x24
 800bbfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f022 0201 	bic.w	r2, r2, #1
 800bc18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	683a      	ldr	r2, [r7, #0]
 800bc2a:	430a      	orrs	r2, r1
 800bc2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 f812 	bl	800bc58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2220      	movs	r2, #32
 800bc40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
	...

0800bc58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d108      	bne.n	800bc7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2201      	movs	r2, #1
 800bc74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc78:	e031      	b.n	800bcde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc7a:	2310      	movs	r3, #16
 800bc7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc7e:	2310      	movs	r3, #16
 800bc80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	0e5b      	lsrs	r3, r3, #25
 800bc8a:	b2db      	uxtb	r3, r3
 800bc8c:	f003 0307 	and.w	r3, r3, #7
 800bc90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	689b      	ldr	r3, [r3, #8]
 800bc98:	0f5b      	lsrs	r3, r3, #29
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	f003 0307 	and.w	r3, r3, #7
 800bca0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bca2:	7bbb      	ldrb	r3, [r7, #14]
 800bca4:	7b3a      	ldrb	r2, [r7, #12]
 800bca6:	4911      	ldr	r1, [pc, #68]	; (800bcec <UARTEx_SetNbDataToProcess+0x94>)
 800bca8:	5c8a      	ldrb	r2, [r1, r2]
 800bcaa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bcae:	7b3a      	ldrb	r2, [r7, #12]
 800bcb0:	490f      	ldr	r1, [pc, #60]	; (800bcf0 <UARTEx_SetNbDataToProcess+0x98>)
 800bcb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bcb4:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bcc0:	7bfb      	ldrb	r3, [r7, #15]
 800bcc2:	7b7a      	ldrb	r2, [r7, #13]
 800bcc4:	4909      	ldr	r1, [pc, #36]	; (800bcec <UARTEx_SetNbDataToProcess+0x94>)
 800bcc6:	5c8a      	ldrb	r2, [r1, r2]
 800bcc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bccc:	7b7a      	ldrb	r2, [r7, #13]
 800bcce:	4908      	ldr	r1, [pc, #32]	; (800bcf0 <UARTEx_SetNbDataToProcess+0x98>)
 800bcd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bcd2:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcd6:	b29a      	uxth	r2, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bcde:	bf00      	nop
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	0800f5c0 	.word	0x0800f5c0
 800bcf0:	0800f5c8 	.word	0x0800f5c8
 800bcf4:	00000000 	.word	0x00000000

0800bcf8 <cos>:
 800bcf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bcfa:	eeb0 7b40 	vmov.f64	d7, d0
 800bcfe:	ee17 3a90 	vmov	r3, s15
 800bd02:	4a1f      	ldr	r2, [pc, #124]	; (800bd80 <cos+0x88>)
 800bd04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	dc04      	bgt.n	800bd16 <cos+0x1e>
 800bd0c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800bd78 <cos+0x80>
 800bd10:	f000 fa8e 	bl	800c230 <__kernel_cos>
 800bd14:	e004      	b.n	800bd20 <cos+0x28>
 800bd16:	4a1b      	ldr	r2, [pc, #108]	; (800bd84 <cos+0x8c>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	dd04      	ble.n	800bd26 <cos+0x2e>
 800bd1c:	ee30 0b40 	vsub.f64	d0, d0, d0
 800bd20:	b005      	add	sp, #20
 800bd22:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd26:	4668      	mov	r0, sp
 800bd28:	f000 f89e 	bl	800be68 <__ieee754_rem_pio2>
 800bd2c:	f000 0003 	and.w	r0, r0, #3
 800bd30:	2801      	cmp	r0, #1
 800bd32:	d007      	beq.n	800bd44 <cos+0x4c>
 800bd34:	2802      	cmp	r0, #2
 800bd36:	d00e      	beq.n	800bd56 <cos+0x5e>
 800bd38:	b9a0      	cbnz	r0, 800bd64 <cos+0x6c>
 800bd3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd3e:	ed9d 0b00 	vldr	d0, [sp]
 800bd42:	e7e5      	b.n	800bd10 <cos+0x18>
 800bd44:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd48:	ed9d 0b00 	vldr	d0, [sp]
 800bd4c:	f000 fd5c 	bl	800c808 <__kernel_sin>
 800bd50:	eeb1 0b40 	vneg.f64	d0, d0
 800bd54:	e7e4      	b.n	800bd20 <cos+0x28>
 800bd56:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd5a:	ed9d 0b00 	vldr	d0, [sp]
 800bd5e:	f000 fa67 	bl	800c230 <__kernel_cos>
 800bd62:	e7f5      	b.n	800bd50 <cos+0x58>
 800bd64:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bd68:	ed9d 0b00 	vldr	d0, [sp]
 800bd6c:	2001      	movs	r0, #1
 800bd6e:	f000 fd4b 	bl	800c808 <__kernel_sin>
 800bd72:	e7d5      	b.n	800bd20 <cos+0x28>
 800bd74:	f3af 8000 	nop.w
	...
 800bd80:	3fe921fb 	.word	0x3fe921fb
 800bd84:	7fefffff 	.word	0x7fefffff

0800bd88 <sin>:
 800bd88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd8a:	eeb0 7b40 	vmov.f64	d7, d0
 800bd8e:	ee17 3a90 	vmov	r3, s15
 800bd92:	4a1f      	ldr	r2, [pc, #124]	; (800be10 <sin+0x88>)
 800bd94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	dc05      	bgt.n	800bda8 <sin+0x20>
 800bd9c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800be08 <sin+0x80>
 800bda0:	2000      	movs	r0, #0
 800bda2:	f000 fd31 	bl	800c808 <__kernel_sin>
 800bda6:	e004      	b.n	800bdb2 <sin+0x2a>
 800bda8:	4a1a      	ldr	r2, [pc, #104]	; (800be14 <sin+0x8c>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	dd04      	ble.n	800bdb8 <sin+0x30>
 800bdae:	ee30 0b40 	vsub.f64	d0, d0, d0
 800bdb2:	b005      	add	sp, #20
 800bdb4:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdb8:	4668      	mov	r0, sp
 800bdba:	f000 f855 	bl	800be68 <__ieee754_rem_pio2>
 800bdbe:	f000 0003 	and.w	r0, r0, #3
 800bdc2:	2801      	cmp	r0, #1
 800bdc4:	d008      	beq.n	800bdd8 <sin+0x50>
 800bdc6:	2802      	cmp	r0, #2
 800bdc8:	d00d      	beq.n	800bde6 <sin+0x5e>
 800bdca:	b9b0      	cbnz	r0, 800bdfa <sin+0x72>
 800bdcc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bdd0:	ed9d 0b00 	vldr	d0, [sp]
 800bdd4:	2001      	movs	r0, #1
 800bdd6:	e7e4      	b.n	800bda2 <sin+0x1a>
 800bdd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bddc:	ed9d 0b00 	vldr	d0, [sp]
 800bde0:	f000 fa26 	bl	800c230 <__kernel_cos>
 800bde4:	e7e5      	b.n	800bdb2 <sin+0x2a>
 800bde6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bdea:	ed9d 0b00 	vldr	d0, [sp]
 800bdee:	2001      	movs	r0, #1
 800bdf0:	f000 fd0a 	bl	800c808 <__kernel_sin>
 800bdf4:	eeb1 0b40 	vneg.f64	d0, d0
 800bdf8:	e7db      	b.n	800bdb2 <sin+0x2a>
 800bdfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bdfe:	ed9d 0b00 	vldr	d0, [sp]
 800be02:	f000 fa15 	bl	800c230 <__kernel_cos>
 800be06:	e7f5      	b.n	800bdf4 <sin+0x6c>
	...
 800be10:	3fe921fb 	.word	0x3fe921fb
 800be14:	7fefffff 	.word	0x7fefffff

0800be18 <atan2f>:
 800be18:	f000 b966 	b.w	800c0e8 <__ieee754_atan2f>

0800be1c <sqrtf>:
 800be1c:	b508      	push	{r3, lr}
 800be1e:	ed2d 8b02 	vpush	{d8}
 800be22:	eeb0 8a40 	vmov.f32	s16, s0
 800be26:	f000 f9fd 	bl	800c224 <__ieee754_sqrtf>
 800be2a:	4b0d      	ldr	r3, [pc, #52]	; (800be60 <sqrtf+0x44>)
 800be2c:	f993 3000 	ldrsb.w	r3, [r3]
 800be30:	3301      	adds	r3, #1
 800be32:	d011      	beq.n	800be58 <sqrtf+0x3c>
 800be34:	eeb4 8a48 	vcmp.f32	s16, s16
 800be38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be3c:	d60c      	bvs.n	800be58 <sqrtf+0x3c>
 800be3e:	eddf 8a09 	vldr	s17, [pc, #36]	; 800be64 <sqrtf+0x48>
 800be42:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800be46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be4a:	d505      	bpl.n	800be58 <sqrtf+0x3c>
 800be4c:	f000 ff22 	bl	800cc94 <__errno>
 800be50:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800be54:	2321      	movs	r3, #33	; 0x21
 800be56:	6003      	str	r3, [r0, #0]
 800be58:	ecbd 8b02 	vpop	{d8}
 800be5c:	bd08      	pop	{r3, pc}
 800be5e:	bf00      	nop
 800be60:	2400000d 	.word	0x2400000d
 800be64:	00000000 	.word	0x00000000

0800be68 <__ieee754_rem_pio2>:
 800be68:	b570      	push	{r4, r5, r6, lr}
 800be6a:	eeb0 7b40 	vmov.f64	d7, d0
 800be6e:	ee17 5a90 	vmov	r5, s15
 800be72:	4b97      	ldr	r3, [pc, #604]	; (800c0d0 <__ieee754_rem_pio2+0x268>)
 800be74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800be78:	429e      	cmp	r6, r3
 800be7a:	b088      	sub	sp, #32
 800be7c:	4604      	mov	r4, r0
 800be7e:	dc07      	bgt.n	800be90 <__ieee754_rem_pio2+0x28>
 800be80:	2200      	movs	r2, #0
 800be82:	2300      	movs	r3, #0
 800be84:	ed84 0b00 	vstr	d0, [r4]
 800be88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800be8c:	2000      	movs	r0, #0
 800be8e:	e01b      	b.n	800bec8 <__ieee754_rem_pio2+0x60>
 800be90:	4b90      	ldr	r3, [pc, #576]	; (800c0d4 <__ieee754_rem_pio2+0x26c>)
 800be92:	429e      	cmp	r6, r3
 800be94:	dc3b      	bgt.n	800bf0e <__ieee754_rem_pio2+0xa6>
 800be96:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800be9a:	2d00      	cmp	r5, #0
 800be9c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800c090 <__ieee754_rem_pio2+0x228>
 800bea0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800bea4:	dd19      	ble.n	800beda <__ieee754_rem_pio2+0x72>
 800bea6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800beaa:	429e      	cmp	r6, r3
 800beac:	d00e      	beq.n	800becc <__ieee754_rem_pio2+0x64>
 800beae:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800c098 <__ieee754_rem_pio2+0x230>
 800beb2:	ee37 5b46 	vsub.f64	d5, d7, d6
 800beb6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800beba:	ed84 5b00 	vstr	d5, [r4]
 800bebe:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bec2:	ed84 7b02 	vstr	d7, [r4, #8]
 800bec6:	2001      	movs	r0, #1
 800bec8:	b008      	add	sp, #32
 800beca:	bd70      	pop	{r4, r5, r6, pc}
 800becc:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800c0a0 <__ieee754_rem_pio2+0x238>
 800bed0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bed4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800c0a8 <__ieee754_rem_pio2+0x240>
 800bed8:	e7eb      	b.n	800beb2 <__ieee754_rem_pio2+0x4a>
 800beda:	429e      	cmp	r6, r3
 800bedc:	ee30 7b06 	vadd.f64	d7, d0, d6
 800bee0:	d00e      	beq.n	800bf00 <__ieee754_rem_pio2+0x98>
 800bee2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800c098 <__ieee754_rem_pio2+0x230>
 800bee6:	ee37 5b06 	vadd.f64	d5, d7, d6
 800beea:	ee37 7b45 	vsub.f64	d7, d7, d5
 800beee:	ed84 5b00 	vstr	d5, [r4]
 800bef2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bef6:	f04f 30ff 	mov.w	r0, #4294967295
 800befa:	ed84 7b02 	vstr	d7, [r4, #8]
 800befe:	e7e3      	b.n	800bec8 <__ieee754_rem_pio2+0x60>
 800bf00:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800c0a0 <__ieee754_rem_pio2+0x238>
 800bf04:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bf08:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800c0a8 <__ieee754_rem_pio2+0x240>
 800bf0c:	e7eb      	b.n	800bee6 <__ieee754_rem_pio2+0x7e>
 800bf0e:	4b72      	ldr	r3, [pc, #456]	; (800c0d8 <__ieee754_rem_pio2+0x270>)
 800bf10:	429e      	cmp	r6, r3
 800bf12:	dc6e      	bgt.n	800bff2 <__ieee754_rem_pio2+0x18a>
 800bf14:	f000 fcd0 	bl	800c8b8 <fabs>
 800bf18:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800bf1c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800c0b0 <__ieee754_rem_pio2+0x248>
 800bf20:	eea0 7b06 	vfma.f64	d7, d0, d6
 800bf24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800bf28:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800bf2c:	ee17 0a90 	vmov	r0, s15
 800bf30:	eeb1 4b45 	vneg.f64	d4, d5
 800bf34:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800c090 <__ieee754_rem_pio2+0x228>
 800bf38:	eea5 0b47 	vfms.f64	d0, d5, d7
 800bf3c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800c098 <__ieee754_rem_pio2+0x230>
 800bf40:	281f      	cmp	r0, #31
 800bf42:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bf46:	ee30 6b47 	vsub.f64	d6, d0, d7
 800bf4a:	dc08      	bgt.n	800bf5e <__ieee754_rem_pio2+0xf6>
 800bf4c:	4b63      	ldr	r3, [pc, #396]	; (800c0dc <__ieee754_rem_pio2+0x274>)
 800bf4e:	1e42      	subs	r2, r0, #1
 800bf50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf54:	42b3      	cmp	r3, r6
 800bf56:	d002      	beq.n	800bf5e <__ieee754_rem_pio2+0xf6>
 800bf58:	ed84 6b00 	vstr	d6, [r4]
 800bf5c:	e024      	b.n	800bfa8 <__ieee754_rem_pio2+0x140>
 800bf5e:	ee16 3a90 	vmov	r3, s13
 800bf62:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800bf66:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800bf6a:	2b10      	cmp	r3, #16
 800bf6c:	ea4f 5226 	mov.w	r2, r6, asr #20
 800bf70:	ddf2      	ble.n	800bf58 <__ieee754_rem_pio2+0xf0>
 800bf72:	eeb0 6b40 	vmov.f64	d6, d0
 800bf76:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800c0a0 <__ieee754_rem_pio2+0x238>
 800bf7a:	eea4 6b03 	vfma.f64	d6, d4, d3
 800bf7e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800bf82:	eea4 7b03 	vfma.f64	d7, d4, d3
 800bf86:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800c0a8 <__ieee754_rem_pio2+0x240>
 800bf8a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800bf8e:	ee36 3b47 	vsub.f64	d3, d6, d7
 800bf92:	ee13 3a90 	vmov	r3, s7
 800bf96:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	2b31      	cmp	r3, #49	; 0x31
 800bf9e:	dc17      	bgt.n	800bfd0 <__ieee754_rem_pio2+0x168>
 800bfa0:	eeb0 0b46 	vmov.f64	d0, d6
 800bfa4:	ed84 3b00 	vstr	d3, [r4]
 800bfa8:	ed94 6b00 	vldr	d6, [r4]
 800bfac:	2d00      	cmp	r5, #0
 800bfae:	ee30 0b46 	vsub.f64	d0, d0, d6
 800bfb2:	ee30 7b47 	vsub.f64	d7, d0, d7
 800bfb6:	ed84 7b02 	vstr	d7, [r4, #8]
 800bfba:	da85      	bge.n	800bec8 <__ieee754_rem_pio2+0x60>
 800bfbc:	eeb1 6b46 	vneg.f64	d6, d6
 800bfc0:	ed84 6b00 	vstr	d6, [r4]
 800bfc4:	eeb1 7b47 	vneg.f64	d7, d7
 800bfc8:	4240      	negs	r0, r0
 800bfca:	ed84 7b02 	vstr	d7, [r4, #8]
 800bfce:	e77b      	b.n	800bec8 <__ieee754_rem_pio2+0x60>
 800bfd0:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800c0b8 <__ieee754_rem_pio2+0x250>
 800bfd4:	eeb0 0b46 	vmov.f64	d0, d6
 800bfd8:	eea4 0b03 	vfma.f64	d0, d4, d3
 800bfdc:	ee36 7b40 	vsub.f64	d7, d6, d0
 800bfe0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800c0c0 <__ieee754_rem_pio2+0x258>
 800bfe4:	eea4 7b03 	vfma.f64	d7, d4, d3
 800bfe8:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800bfec:	ee30 6b47 	vsub.f64	d6, d0, d7
 800bff0:	e7b2      	b.n	800bf58 <__ieee754_rem_pio2+0xf0>
 800bff2:	4b3b      	ldr	r3, [pc, #236]	; (800c0e0 <__ieee754_rem_pio2+0x278>)
 800bff4:	429e      	cmp	r6, r3
 800bff6:	dd06      	ble.n	800c006 <__ieee754_rem_pio2+0x19e>
 800bff8:	ee30 7b40 	vsub.f64	d7, d0, d0
 800bffc:	ed80 7b02 	vstr	d7, [r0, #8]
 800c000:	ed80 7b00 	vstr	d7, [r0]
 800c004:	e742      	b.n	800be8c <__ieee754_rem_pio2+0x24>
 800c006:	1532      	asrs	r2, r6, #20
 800c008:	ee10 0a10 	vmov	r0, s0
 800c00c:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800c010:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800c014:	ec41 0b17 	vmov	d7, r0, r1
 800c018:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c01c:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800c0c8 <__ieee754_rem_pio2+0x260>
 800c020:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c024:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c028:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c02c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c030:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800c034:	a902      	add	r1, sp, #8
 800c036:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800c03a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c03e:	ed8d 6b04 	vstr	d6, [sp, #16]
 800c042:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c046:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c04a:	2603      	movs	r6, #3
 800c04c:	4608      	mov	r0, r1
 800c04e:	ed91 7b04 	vldr	d7, [r1, #16]
 800c052:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c05a:	4633      	mov	r3, r6
 800c05c:	f1a1 0108 	sub.w	r1, r1, #8
 800c060:	f106 36ff 	add.w	r6, r6, #4294967295
 800c064:	d0f3      	beq.n	800c04e <__ieee754_rem_pio2+0x1e6>
 800c066:	491f      	ldr	r1, [pc, #124]	; (800c0e4 <__ieee754_rem_pio2+0x27c>)
 800c068:	9101      	str	r1, [sp, #4]
 800c06a:	2102      	movs	r1, #2
 800c06c:	9100      	str	r1, [sp, #0]
 800c06e:	4621      	mov	r1, r4
 800c070:	f000 f94a 	bl	800c308 <__kernel_rem_pio2>
 800c074:	2d00      	cmp	r5, #0
 800c076:	f6bf af27 	bge.w	800bec8 <__ieee754_rem_pio2+0x60>
 800c07a:	ed94 7b00 	vldr	d7, [r4]
 800c07e:	eeb1 7b47 	vneg.f64	d7, d7
 800c082:	ed84 7b00 	vstr	d7, [r4]
 800c086:	ed94 7b02 	vldr	d7, [r4, #8]
 800c08a:	e79b      	b.n	800bfc4 <__ieee754_rem_pio2+0x15c>
 800c08c:	f3af 8000 	nop.w
 800c090:	54400000 	.word	0x54400000
 800c094:	3ff921fb 	.word	0x3ff921fb
 800c098:	1a626331 	.word	0x1a626331
 800c09c:	3dd0b461 	.word	0x3dd0b461
 800c0a0:	1a600000 	.word	0x1a600000
 800c0a4:	3dd0b461 	.word	0x3dd0b461
 800c0a8:	2e037073 	.word	0x2e037073
 800c0ac:	3ba3198a 	.word	0x3ba3198a
 800c0b0:	6dc9c883 	.word	0x6dc9c883
 800c0b4:	3fe45f30 	.word	0x3fe45f30
 800c0b8:	2e000000 	.word	0x2e000000
 800c0bc:	3ba3198a 	.word	0x3ba3198a
 800c0c0:	252049c1 	.word	0x252049c1
 800c0c4:	397b839a 	.word	0x397b839a
 800c0c8:	00000000 	.word	0x00000000
 800c0cc:	41700000 	.word	0x41700000
 800c0d0:	3fe921fb 	.word	0x3fe921fb
 800c0d4:	4002d97b 	.word	0x4002d97b
 800c0d8:	413921fb 	.word	0x413921fb
 800c0dc:	0800f5d0 	.word	0x0800f5d0
 800c0e0:	7fefffff 	.word	0x7fefffff
 800c0e4:	0800f650 	.word	0x0800f650

0800c0e8 <__ieee754_atan2f>:
 800c0e8:	ee10 2a90 	vmov	r2, s1
 800c0ec:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c0f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c0f4:	b510      	push	{r4, lr}
 800c0f6:	eef0 7a40 	vmov.f32	s15, s0
 800c0fa:	dc06      	bgt.n	800c10a <__ieee754_atan2f+0x22>
 800c0fc:	ee10 0a10 	vmov	r0, s0
 800c100:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c104:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c108:	dd04      	ble.n	800c114 <__ieee754_atan2f+0x2c>
 800c10a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c10e:	eeb0 0a67 	vmov.f32	s0, s15
 800c112:	bd10      	pop	{r4, pc}
 800c114:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800c118:	d103      	bne.n	800c122 <__ieee754_atan2f+0x3a>
 800c11a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c11e:	f000 bcdd 	b.w	800cadc <atanf>
 800c122:	1794      	asrs	r4, r2, #30
 800c124:	f004 0402 	and.w	r4, r4, #2
 800c128:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c12c:	b93b      	cbnz	r3, 800c13e <__ieee754_atan2f+0x56>
 800c12e:	2c02      	cmp	r4, #2
 800c130:	d05c      	beq.n	800c1ec <__ieee754_atan2f+0x104>
 800c132:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800c200 <__ieee754_atan2f+0x118>
 800c136:	2c03      	cmp	r4, #3
 800c138:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800c13c:	e7e7      	b.n	800c10e <__ieee754_atan2f+0x26>
 800c13e:	b939      	cbnz	r1, 800c150 <__ieee754_atan2f+0x68>
 800c140:	eddf 7a30 	vldr	s15, [pc, #192]	; 800c204 <__ieee754_atan2f+0x11c>
 800c144:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800c208 <__ieee754_atan2f+0x120>
 800c148:	2800      	cmp	r0, #0
 800c14a:	fe67 7a80 	vselge.f32	s15, s15, s0
 800c14e:	e7de      	b.n	800c10e <__ieee754_atan2f+0x26>
 800c150:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c154:	d110      	bne.n	800c178 <__ieee754_atan2f+0x90>
 800c156:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c15a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c15e:	d107      	bne.n	800c170 <__ieee754_atan2f+0x88>
 800c160:	2c02      	cmp	r4, #2
 800c162:	d846      	bhi.n	800c1f2 <__ieee754_atan2f+0x10a>
 800c164:	4b29      	ldr	r3, [pc, #164]	; (800c20c <__ieee754_atan2f+0x124>)
 800c166:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c16a:	edd4 7a00 	vldr	s15, [r4]
 800c16e:	e7ce      	b.n	800c10e <__ieee754_atan2f+0x26>
 800c170:	2c02      	cmp	r4, #2
 800c172:	d841      	bhi.n	800c1f8 <__ieee754_atan2f+0x110>
 800c174:	4b26      	ldr	r3, [pc, #152]	; (800c210 <__ieee754_atan2f+0x128>)
 800c176:	e7f6      	b.n	800c166 <__ieee754_atan2f+0x7e>
 800c178:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c17c:	d0e0      	beq.n	800c140 <__ieee754_atan2f+0x58>
 800c17e:	1a5b      	subs	r3, r3, r1
 800c180:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800c184:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c188:	da1a      	bge.n	800c1c0 <__ieee754_atan2f+0xd8>
 800c18a:	2a00      	cmp	r2, #0
 800c18c:	da01      	bge.n	800c192 <__ieee754_atan2f+0xaa>
 800c18e:	313c      	adds	r1, #60	; 0x3c
 800c190:	db19      	blt.n	800c1c6 <__ieee754_atan2f+0xde>
 800c192:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c196:	f000 fd75 	bl	800cc84 <fabsf>
 800c19a:	f000 fc9f 	bl	800cadc <atanf>
 800c19e:	eef0 7a40 	vmov.f32	s15, s0
 800c1a2:	2c01      	cmp	r4, #1
 800c1a4:	d012      	beq.n	800c1cc <__ieee754_atan2f+0xe4>
 800c1a6:	2c02      	cmp	r4, #2
 800c1a8:	d017      	beq.n	800c1da <__ieee754_atan2f+0xf2>
 800c1aa:	2c00      	cmp	r4, #0
 800c1ac:	d0af      	beq.n	800c10e <__ieee754_atan2f+0x26>
 800c1ae:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800c214 <__ieee754_atan2f+0x12c>
 800c1b2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c1b6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800c218 <__ieee754_atan2f+0x130>
 800c1ba:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c1be:	e7a6      	b.n	800c10e <__ieee754_atan2f+0x26>
 800c1c0:	eddf 7a10 	vldr	s15, [pc, #64]	; 800c204 <__ieee754_atan2f+0x11c>
 800c1c4:	e7ed      	b.n	800c1a2 <__ieee754_atan2f+0xba>
 800c1c6:	eddf 7a15 	vldr	s15, [pc, #84]	; 800c21c <__ieee754_atan2f+0x134>
 800c1ca:	e7ea      	b.n	800c1a2 <__ieee754_atan2f+0xba>
 800c1cc:	ee17 3a90 	vmov	r3, s15
 800c1d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c1d4:	ee07 3a90 	vmov	s15, r3
 800c1d8:	e799      	b.n	800c10e <__ieee754_atan2f+0x26>
 800c1da:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800c214 <__ieee754_atan2f+0x12c>
 800c1de:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c1e2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800c218 <__ieee754_atan2f+0x130>
 800c1e6:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c1ea:	e790      	b.n	800c10e <__ieee754_atan2f+0x26>
 800c1ec:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800c218 <__ieee754_atan2f+0x130>
 800c1f0:	e78d      	b.n	800c10e <__ieee754_atan2f+0x26>
 800c1f2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800c220 <__ieee754_atan2f+0x138>
 800c1f6:	e78a      	b.n	800c10e <__ieee754_atan2f+0x26>
 800c1f8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c21c <__ieee754_atan2f+0x134>
 800c1fc:	e787      	b.n	800c10e <__ieee754_atan2f+0x26>
 800c1fe:	bf00      	nop
 800c200:	c0490fdb 	.word	0xc0490fdb
 800c204:	3fc90fdb 	.word	0x3fc90fdb
 800c208:	bfc90fdb 	.word	0xbfc90fdb
 800c20c:	0800f758 	.word	0x0800f758
 800c210:	0800f764 	.word	0x0800f764
 800c214:	33bbbd2e 	.word	0x33bbbd2e
 800c218:	40490fdb 	.word	0x40490fdb
 800c21c:	00000000 	.word	0x00000000
 800c220:	3f490fdb 	.word	0x3f490fdb

0800c224 <__ieee754_sqrtf>:
 800c224:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c228:	4770      	bx	lr
 800c22a:	0000      	movs	r0, r0
 800c22c:	0000      	movs	r0, r0
	...

0800c230 <__kernel_cos>:
 800c230:	ee10 1a90 	vmov	r1, s1
 800c234:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800c238:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c23c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800c240:	da05      	bge.n	800c24e <__kernel_cos+0x1e>
 800c242:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800c246:	ee17 3a90 	vmov	r3, s15
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d03d      	beq.n	800c2ca <__kernel_cos+0x9a>
 800c24e:	ee20 3b00 	vmul.f64	d3, d0, d0
 800c252:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800c2d0 <__kernel_cos+0xa0>
 800c256:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c2d8 <__kernel_cos+0xa8>
 800c25a:	eea3 6b07 	vfma.f64	d6, d3, d7
 800c25e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c2e0 <__kernel_cos+0xb0>
 800c262:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c266:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c2e8 <__kernel_cos+0xb8>
 800c26a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800c26e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c2f0 <__kernel_cos+0xc0>
 800c272:	4b23      	ldr	r3, [pc, #140]	; (800c300 <__kernel_cos+0xd0>)
 800c274:	eea6 7b03 	vfma.f64	d7, d6, d3
 800c278:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800c2f8 <__kernel_cos+0xc8>
 800c27c:	4299      	cmp	r1, r3
 800c27e:	eea7 6b03 	vfma.f64	d6, d7, d3
 800c282:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c286:	ee26 5b03 	vmul.f64	d5, d6, d3
 800c28a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800c28e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800c292:	eea3 6b05 	vfma.f64	d6, d3, d5
 800c296:	dc04      	bgt.n	800c2a2 <__kernel_cos+0x72>
 800c298:	ee37 6b46 	vsub.f64	d6, d7, d6
 800c29c:	ee34 0b46 	vsub.f64	d0, d4, d6
 800c2a0:	4770      	bx	lr
 800c2a2:	4b18      	ldr	r3, [pc, #96]	; (800c304 <__kernel_cos+0xd4>)
 800c2a4:	4299      	cmp	r1, r3
 800c2a6:	dc0d      	bgt.n	800c2c4 <__kernel_cos+0x94>
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800c2ae:	ec43 2b15 	vmov	d5, r2, r3
 800c2b2:	ee34 0b45 	vsub.f64	d0, d4, d5
 800c2b6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c2ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c2be:	ee30 0b47 	vsub.f64	d0, d0, d7
 800c2c2:	4770      	bx	lr
 800c2c4:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800c2c8:	e7f3      	b.n	800c2b2 <__kernel_cos+0x82>
 800c2ca:	eeb0 0b44 	vmov.f64	d0, d4
 800c2ce:	4770      	bx	lr
 800c2d0:	be8838d4 	.word	0xbe8838d4
 800c2d4:	bda8fae9 	.word	0xbda8fae9
 800c2d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800c2dc:	3e21ee9e 	.word	0x3e21ee9e
 800c2e0:	809c52ad 	.word	0x809c52ad
 800c2e4:	be927e4f 	.word	0xbe927e4f
 800c2e8:	19cb1590 	.word	0x19cb1590
 800c2ec:	3efa01a0 	.word	0x3efa01a0
 800c2f0:	16c15177 	.word	0x16c15177
 800c2f4:	bf56c16c 	.word	0xbf56c16c
 800c2f8:	5555554c 	.word	0x5555554c
 800c2fc:	3fa55555 	.word	0x3fa55555
 800c300:	3fd33332 	.word	0x3fd33332
 800c304:	3fe90000 	.word	0x3fe90000

0800c308 <__kernel_rem_pio2>:
 800c308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c30c:	ed2d 8b06 	vpush	{d8-d10}
 800c310:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800c314:	469b      	mov	fp, r3
 800c316:	460f      	mov	r7, r1
 800c318:	4bcf      	ldr	r3, [pc, #828]	; (800c658 <__kernel_rem_pio2+0x350>)
 800c31a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800c31c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800c320:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800c324:	9000      	str	r0, [sp, #0]
 800c326:	f112 0f14 	cmn.w	r2, #20
 800c32a:	bfa8      	it	ge
 800c32c:	2318      	movge	r3, #24
 800c32e:	f10b 31ff 	add.w	r1, fp, #4294967295
 800c332:	bfb8      	it	lt
 800c334:	2300      	movlt	r3, #0
 800c336:	f06f 0417 	mvn.w	r4, #23
 800c33a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800c640 <__kernel_rem_pio2+0x338>
 800c33e:	bfa4      	itt	ge
 800c340:	f1a2 0a03 	subge.w	sl, r2, #3
 800c344:	fb9a f3f3 	sdivge	r3, sl, r3
 800c348:	fb03 4404 	mla	r4, r3, r4, r4
 800c34c:	1a5d      	subs	r5, r3, r1
 800c34e:	4414      	add	r4, r2
 800c350:	eb09 0601 	add.w	r6, r9, r1
 800c354:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800c358:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800c35c:	2200      	movs	r2, #0
 800c35e:	42b2      	cmp	r2, r6
 800c360:	dd12      	ble.n	800c388 <__kernel_rem_pio2+0x80>
 800c362:	aa18      	add	r2, sp, #96	; 0x60
 800c364:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800c368:	460e      	mov	r6, r1
 800c36a:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800c36e:	f1cb 0a01 	rsb	sl, fp, #1
 800c372:	eb0a 0006 	add.w	r0, sl, r6
 800c376:	4581      	cmp	r9, r0
 800c378:	db25      	blt.n	800c3c6 <__kernel_rem_pio2+0xbe>
 800c37a:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800c640 <__kernel_rem_pio2+0x338>
 800c37e:	f8dd e000 	ldr.w	lr, [sp]
 800c382:	4615      	mov	r5, r2
 800c384:	2000      	movs	r0, #0
 800c386:	e015      	b.n	800c3b4 <__kernel_rem_pio2+0xac>
 800c388:	42d5      	cmn	r5, r2
 800c38a:	d409      	bmi.n	800c3a0 <__kernel_rem_pio2+0x98>
 800c38c:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800c390:	ee07 0a90 	vmov	s15, r0
 800c394:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c398:	eca8 7b02 	vstmia	r8!, {d7}
 800c39c:	3201      	adds	r2, #1
 800c39e:	e7de      	b.n	800c35e <__kernel_rem_pio2+0x56>
 800c3a0:	eeb0 7b46 	vmov.f64	d7, d6
 800c3a4:	e7f8      	b.n	800c398 <__kernel_rem_pio2+0x90>
 800c3a6:	ecbe 5b02 	vldmia	lr!, {d5}
 800c3aa:	ed95 6b00 	vldr	d6, [r5]
 800c3ae:	3001      	adds	r0, #1
 800c3b0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c3b4:	4288      	cmp	r0, r1
 800c3b6:	f1a5 0508 	sub.w	r5, r5, #8
 800c3ba:	ddf4      	ble.n	800c3a6 <__kernel_rem_pio2+0x9e>
 800c3bc:	eca8 7b02 	vstmia	r8!, {d7}
 800c3c0:	3208      	adds	r2, #8
 800c3c2:	3601      	adds	r6, #1
 800c3c4:	e7d5      	b.n	800c372 <__kernel_rem_pio2+0x6a>
 800c3c6:	aa04      	add	r2, sp, #16
 800c3c8:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800c648 <__kernel_rem_pio2+0x340>
 800c3cc:	ed9f aba0 	vldr	d10, [pc, #640]	; 800c650 <__kernel_rem_pio2+0x348>
 800c3d0:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800c3d4:	9201      	str	r2, [sp, #4]
 800c3d6:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800c3da:	464e      	mov	r6, r9
 800c3dc:	ab90      	add	r3, sp, #576	; 0x240
 800c3de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c3e2:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800c3e6:	ab04      	add	r3, sp, #16
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	4632      	mov	r2, r6
 800c3ec:	2a00      	cmp	r2, #0
 800c3ee:	dc4e      	bgt.n	800c48e <__kernel_rem_pio2+0x186>
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800c3f6:	f000 fadf 	bl	800c9b8 <scalbn>
 800c3fa:	eeb0 8b40 	vmov.f64	d8, d0
 800c3fe:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800c402:	ee28 0b00 	vmul.f64	d0, d8, d0
 800c406:	f000 fa63 	bl	800c8d0 <floor>
 800c40a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800c40e:	eea0 8b47 	vfms.f64	d8, d0, d7
 800c412:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800c416:	2c00      	cmp	r4, #0
 800c418:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800c41c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800c420:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c424:	ee17 8a90 	vmov	r8, s15
 800c428:	dd46      	ble.n	800c4b8 <__kernel_rem_pio2+0x1b0>
 800c42a:	1e70      	subs	r0, r6, #1
 800c42c:	aa04      	add	r2, sp, #16
 800c42e:	f1c4 0c18 	rsb	ip, r4, #24
 800c432:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800c436:	fa45 f20c 	asr.w	r2, r5, ip
 800c43a:	4490      	add	r8, r2
 800c43c:	fa02 f20c 	lsl.w	r2, r2, ip
 800c440:	1aad      	subs	r5, r5, r2
 800c442:	aa04      	add	r2, sp, #16
 800c444:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800c448:	f1c4 0217 	rsb	r2, r4, #23
 800c44c:	4115      	asrs	r5, r2
 800c44e:	2d00      	cmp	r5, #0
 800c450:	dd41      	ble.n	800c4d6 <__kernel_rem_pio2+0x1ce>
 800c452:	f04f 0c00 	mov.w	ip, #0
 800c456:	f108 0801 	add.w	r8, r8, #1
 800c45a:	4660      	mov	r0, ip
 800c45c:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800c460:	4566      	cmp	r6, ip
 800c462:	dc69      	bgt.n	800c538 <__kernel_rem_pio2+0x230>
 800c464:	2c00      	cmp	r4, #0
 800c466:	dd03      	ble.n	800c470 <__kernel_rem_pio2+0x168>
 800c468:	2c01      	cmp	r4, #1
 800c46a:	d076      	beq.n	800c55a <__kernel_rem_pio2+0x252>
 800c46c:	2c02      	cmp	r4, #2
 800c46e:	d07f      	beq.n	800c570 <__kernel_rem_pio2+0x268>
 800c470:	2d02      	cmp	r5, #2
 800c472:	d130      	bne.n	800c4d6 <__kernel_rem_pio2+0x1ce>
 800c474:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c478:	ee30 8b48 	vsub.f64	d8, d0, d8
 800c47c:	b358      	cbz	r0, 800c4d6 <__kernel_rem_pio2+0x1ce>
 800c47e:	4620      	mov	r0, r4
 800c480:	9102      	str	r1, [sp, #8]
 800c482:	f000 fa99 	bl	800c9b8 <scalbn>
 800c486:	9902      	ldr	r1, [sp, #8]
 800c488:	ee38 8b40 	vsub.f64	d8, d8, d0
 800c48c:	e023      	b.n	800c4d6 <__kernel_rem_pio2+0x1ce>
 800c48e:	ee20 7b09 	vmul.f64	d7, d0, d9
 800c492:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c496:	3a01      	subs	r2, #1
 800c498:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800c49c:	ad68      	add	r5, sp, #416	; 0x1a0
 800c49e:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800c4a2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c4a6:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800c4aa:	eca0 0a01 	vstmia	r0!, {s0}
 800c4ae:	ed95 0b00 	vldr	d0, [r5]
 800c4b2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800c4b6:	e799      	b.n	800c3ec <__kernel_rem_pio2+0xe4>
 800c4b8:	d105      	bne.n	800c4c6 <__kernel_rem_pio2+0x1be>
 800c4ba:	1e72      	subs	r2, r6, #1
 800c4bc:	a804      	add	r0, sp, #16
 800c4be:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800c4c2:	15ed      	asrs	r5, r5, #23
 800c4c4:	e7c3      	b.n	800c44e <__kernel_rem_pio2+0x146>
 800c4c6:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c4ca:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4d2:	da2f      	bge.n	800c534 <__kernel_rem_pio2+0x22c>
 800c4d4:	2500      	movs	r5, #0
 800c4d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4de:	f040 8087 	bne.w	800c5f0 <__kernel_rem_pio2+0x2e8>
 800c4e2:	1e73      	subs	r3, r6, #1
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f04f 0c00 	mov.w	ip, #0
 800c4ea:	4548      	cmp	r0, r9
 800c4ec:	da47      	bge.n	800c57e <__kernel_rem_pio2+0x276>
 800c4ee:	f1bc 0f00 	cmp.w	ip, #0
 800c4f2:	d070      	beq.n	800c5d6 <__kernel_rem_pio2+0x2ce>
 800c4f4:	aa04      	add	r2, sp, #16
 800c4f6:	3c18      	subs	r4, #24
 800c4f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c4fc:	2a00      	cmp	r2, #0
 800c4fe:	d075      	beq.n	800c5ec <__kernel_rem_pio2+0x2e4>
 800c500:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c504:	4620      	mov	r0, r4
 800c506:	9300      	str	r3, [sp, #0]
 800c508:	f000 fa56 	bl	800c9b8 <scalbn>
 800c50c:	9b00      	ldr	r3, [sp, #0]
 800c50e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800c648 <__kernel_rem_pio2+0x340>
 800c512:	461a      	mov	r2, r3
 800c514:	2a00      	cmp	r2, #0
 800c516:	f280 80ac 	bge.w	800c672 <__kernel_rem_pio2+0x36a>
 800c51a:	4619      	mov	r1, r3
 800c51c:	2000      	movs	r0, #0
 800c51e:	2900      	cmp	r1, #0
 800c520:	f2c0 80cd 	blt.w	800c6be <__kernel_rem_pio2+0x3b6>
 800c524:	aa68      	add	r2, sp, #416	; 0x1a0
 800c526:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800c52a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800c640 <__kernel_rem_pio2+0x338>
 800c52e:	4e4b      	ldr	r6, [pc, #300]	; (800c65c <__kernel_rem_pio2+0x354>)
 800c530:	2200      	movs	r2, #0
 800c532:	e0b8      	b.n	800c6a6 <__kernel_rem_pio2+0x39e>
 800c534:	2502      	movs	r5, #2
 800c536:	e78c      	b.n	800c452 <__kernel_rem_pio2+0x14a>
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	b948      	cbnz	r0, 800c550 <__kernel_rem_pio2+0x248>
 800c53c:	b11a      	cbz	r2, 800c546 <__kernel_rem_pio2+0x23e>
 800c53e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800c542:	601a      	str	r2, [r3, #0]
 800c544:	2201      	movs	r2, #1
 800c546:	f10c 0c01 	add.w	ip, ip, #1
 800c54a:	3304      	adds	r3, #4
 800c54c:	4610      	mov	r0, r2
 800c54e:	e787      	b.n	800c460 <__kernel_rem_pio2+0x158>
 800c550:	ebae 0202 	sub.w	r2, lr, r2
 800c554:	601a      	str	r2, [r3, #0]
 800c556:	4602      	mov	r2, r0
 800c558:	e7f5      	b.n	800c546 <__kernel_rem_pio2+0x23e>
 800c55a:	1e72      	subs	r2, r6, #1
 800c55c:	ab04      	add	r3, sp, #16
 800c55e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c562:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c566:	f10d 0c10 	add.w	ip, sp, #16
 800c56a:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800c56e:	e77f      	b.n	800c470 <__kernel_rem_pio2+0x168>
 800c570:	1e72      	subs	r2, r6, #1
 800c572:	ab04      	add	r3, sp, #16
 800c574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c578:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c57c:	e7f3      	b.n	800c566 <__kernel_rem_pio2+0x25e>
 800c57e:	aa04      	add	r2, sp, #16
 800c580:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800c584:	3801      	subs	r0, #1
 800c586:	ea4c 0c02 	orr.w	ip, ip, r2
 800c58a:	e7ae      	b.n	800c4ea <__kernel_rem_pio2+0x1e2>
 800c58c:	3001      	adds	r0, #1
 800c58e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c592:	2a00      	cmp	r2, #0
 800c594:	d0fa      	beq.n	800c58c <__kernel_rem_pio2+0x284>
 800c596:	eb06 020b 	add.w	r2, r6, fp
 800c59a:	ad18      	add	r5, sp, #96	; 0x60
 800c59c:	1c73      	adds	r3, r6, #1
 800c59e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800c5a2:	4406      	add	r6, r0
 800c5a4:	429e      	cmp	r6, r3
 800c5a6:	f6ff af19 	blt.w	800c3dc <__kernel_rem_pio2+0xd4>
 800c5aa:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800c5ae:	9d00      	ldr	r5, [sp, #0]
 800c5b0:	ee07 0a90 	vmov	s15, r0
 800c5b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	eca2 7b02 	vstmia	r2!, {d7}
 800c5be:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c640 <__kernel_rem_pio2+0x338>
 800c5c2:	4694      	mov	ip, r2
 800c5c4:	4288      	cmp	r0, r1
 800c5c6:	dd09      	ble.n	800c5dc <__kernel_rem_pio2+0x2d4>
 800c5c8:	a868      	add	r0, sp, #416	; 0x1a0
 800c5ca:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800c5ce:	ed80 7b00 	vstr	d7, [r0]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	e7e6      	b.n	800c5a4 <__kernel_rem_pio2+0x29c>
 800c5d6:	9b01      	ldr	r3, [sp, #4]
 800c5d8:	2001      	movs	r0, #1
 800c5da:	e7d8      	b.n	800c58e <__kernel_rem_pio2+0x286>
 800c5dc:	ecb5 5b02 	vldmia	r5!, {d5}
 800c5e0:	ed3c 6b02 	vldmdb	ip!, {d6}
 800c5e4:	3001      	adds	r0, #1
 800c5e6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c5ea:	e7eb      	b.n	800c5c4 <__kernel_rem_pio2+0x2bc>
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	e781      	b.n	800c4f4 <__kernel_rem_pio2+0x1ec>
 800c5f0:	4260      	negs	r0, r4
 800c5f2:	eeb0 0b48 	vmov.f64	d0, d8
 800c5f6:	f000 f9df 	bl	800c9b8 <scalbn>
 800c5fa:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800c650 <__kernel_rem_pio2+0x348>
 800c5fe:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800c602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c606:	db2b      	blt.n	800c660 <__kernel_rem_pio2+0x358>
 800c608:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800c648 <__kernel_rem_pio2+0x340>
 800c60c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c610:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c614:	aa04      	add	r2, sp, #16
 800c616:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800c61a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800c61e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c622:	a904      	add	r1, sp, #16
 800c624:	ee10 3a10 	vmov	r3, s0
 800c628:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c62c:	ee17 2a10 	vmov	r2, s14
 800c630:	1c73      	adds	r3, r6, #1
 800c632:	3418      	adds	r4, #24
 800c634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c638:	e762      	b.n	800c500 <__kernel_rem_pio2+0x1f8>
 800c63a:	bf00      	nop
 800c63c:	f3af 8000 	nop.w
	...
 800c64c:	3e700000 	.word	0x3e700000
 800c650:	00000000 	.word	0x00000000
 800c654:	41700000 	.word	0x41700000
 800c658:	0800f7b0 	.word	0x0800f7b0
 800c65c:	0800f770 	.word	0x0800f770
 800c660:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c664:	aa04      	add	r2, sp, #16
 800c666:	ee10 3a10 	vmov	r3, s0
 800c66a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c66e:	4633      	mov	r3, r6
 800c670:	e746      	b.n	800c500 <__kernel_rem_pio2+0x1f8>
 800c672:	a804      	add	r0, sp, #16
 800c674:	a968      	add	r1, sp, #416	; 0x1a0
 800c676:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800c67a:	9000      	str	r0, [sp, #0]
 800c67c:	ee07 0a90 	vmov	s15, r0
 800c680:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c684:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c688:	3a01      	subs	r2, #1
 800c68a:	ee27 7b00 	vmul.f64	d7, d7, d0
 800c68e:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c692:	ed81 7b00 	vstr	d7, [r1]
 800c696:	e73d      	b.n	800c514 <__kernel_rem_pio2+0x20c>
 800c698:	ecb6 5b02 	vldmia	r6!, {d5}
 800c69c:	ecb4 6b02 	vldmia	r4!, {d6}
 800c6a0:	3201      	adds	r2, #1
 800c6a2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c6a6:	454a      	cmp	r2, r9
 800c6a8:	dc01      	bgt.n	800c6ae <__kernel_rem_pio2+0x3a6>
 800c6aa:	4290      	cmp	r0, r2
 800c6ac:	daf4      	bge.n	800c698 <__kernel_rem_pio2+0x390>
 800c6ae:	aa40      	add	r2, sp, #256	; 0x100
 800c6b0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c6b4:	ed82 7b00 	vstr	d7, [r2]
 800c6b8:	3901      	subs	r1, #1
 800c6ba:	3001      	adds	r0, #1
 800c6bc:	e72f      	b.n	800c51e <__kernel_rem_pio2+0x216>
 800c6be:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800c6c0:	2a02      	cmp	r2, #2
 800c6c2:	dc0a      	bgt.n	800c6da <__kernel_rem_pio2+0x3d2>
 800c6c4:	2a00      	cmp	r2, #0
 800c6c6:	dc5a      	bgt.n	800c77e <__kernel_rem_pio2+0x476>
 800c6c8:	d039      	beq.n	800c73e <__kernel_rem_pio2+0x436>
 800c6ca:	f008 0007 	and.w	r0, r8, #7
 800c6ce:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800c6d2:	ecbd 8b06 	vpop	{d8-d10}
 800c6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6da:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800c6dc:	2a03      	cmp	r2, #3
 800c6de:	d1f4      	bne.n	800c6ca <__kernel_rem_pio2+0x3c2>
 800c6e0:	aa40      	add	r2, sp, #256	; 0x100
 800c6e2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c6e6:	4611      	mov	r1, r2
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	2800      	cmp	r0, #0
 800c6ec:	f1a1 0108 	sub.w	r1, r1, #8
 800c6f0:	dc52      	bgt.n	800c798 <__kernel_rem_pio2+0x490>
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	2901      	cmp	r1, #1
 800c6f6:	f1a2 0208 	sub.w	r2, r2, #8
 800c6fa:	dc5d      	bgt.n	800c7b8 <__kernel_rem_pio2+0x4b0>
 800c6fc:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800c800 <__kernel_rem_pio2+0x4f8>
 800c700:	2b01      	cmp	r3, #1
 800c702:	dc69      	bgt.n	800c7d8 <__kernel_rem_pio2+0x4d0>
 800c704:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800c708:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800c70c:	2d00      	cmp	r5, #0
 800c70e:	d16c      	bne.n	800c7ea <__kernel_rem_pio2+0x4e2>
 800c710:	ed87 5b00 	vstr	d5, [r7]
 800c714:	ed87 6b02 	vstr	d6, [r7, #8]
 800c718:	ed87 7b04 	vstr	d7, [r7, #16]
 800c71c:	e7d5      	b.n	800c6ca <__kernel_rem_pio2+0x3c2>
 800c71e:	aa40      	add	r2, sp, #256	; 0x100
 800c720:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c724:	ed92 6b00 	vldr	d6, [r2]
 800c728:	3b01      	subs	r3, #1
 800c72a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c72e:	2b00      	cmp	r3, #0
 800c730:	daf5      	bge.n	800c71e <__kernel_rem_pio2+0x416>
 800c732:	b10d      	cbz	r5, 800c738 <__kernel_rem_pio2+0x430>
 800c734:	eeb1 7b47 	vneg.f64	d7, d7
 800c738:	ed87 7b00 	vstr	d7, [r7]
 800c73c:	e7c5      	b.n	800c6ca <__kernel_rem_pio2+0x3c2>
 800c73e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800c800 <__kernel_rem_pio2+0x4f8>
 800c742:	e7f4      	b.n	800c72e <__kernel_rem_pio2+0x426>
 800c744:	a940      	add	r1, sp, #256	; 0x100
 800c746:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c74a:	ed91 7b00 	vldr	d7, [r1]
 800c74e:	3a01      	subs	r2, #1
 800c750:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c754:	2a00      	cmp	r2, #0
 800c756:	daf5      	bge.n	800c744 <__kernel_rem_pio2+0x43c>
 800c758:	b1ad      	cbz	r5, 800c786 <__kernel_rem_pio2+0x47e>
 800c75a:	eeb1 7b46 	vneg.f64	d7, d6
 800c75e:	ed87 7b00 	vstr	d7, [r7]
 800c762:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800c766:	a942      	add	r1, sp, #264	; 0x108
 800c768:	2201      	movs	r2, #1
 800c76a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c76e:	4293      	cmp	r3, r2
 800c770:	da0c      	bge.n	800c78c <__kernel_rem_pio2+0x484>
 800c772:	b10d      	cbz	r5, 800c778 <__kernel_rem_pio2+0x470>
 800c774:	eeb1 7b47 	vneg.f64	d7, d7
 800c778:	ed87 7b02 	vstr	d7, [r7, #8]
 800c77c:	e7a5      	b.n	800c6ca <__kernel_rem_pio2+0x3c2>
 800c77e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c800 <__kernel_rem_pio2+0x4f8>
 800c782:	461a      	mov	r2, r3
 800c784:	e7e6      	b.n	800c754 <__kernel_rem_pio2+0x44c>
 800c786:	eeb0 7b46 	vmov.f64	d7, d6
 800c78a:	e7e8      	b.n	800c75e <__kernel_rem_pio2+0x456>
 800c78c:	ecb1 6b02 	vldmia	r1!, {d6}
 800c790:	3201      	adds	r2, #1
 800c792:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c796:	e7ea      	b.n	800c76e <__kernel_rem_pio2+0x466>
 800c798:	ed91 7b00 	vldr	d7, [r1]
 800c79c:	ed91 5b02 	vldr	d5, [r1, #8]
 800c7a0:	3801      	subs	r0, #1
 800c7a2:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c7a6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c7aa:	ed81 6b00 	vstr	d6, [r1]
 800c7ae:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c7b2:	ed81 7b02 	vstr	d7, [r1, #8]
 800c7b6:	e798      	b.n	800c6ea <__kernel_rem_pio2+0x3e2>
 800c7b8:	ed92 7b00 	vldr	d7, [r2]
 800c7bc:	ed92 5b02 	vldr	d5, [r2, #8]
 800c7c0:	3901      	subs	r1, #1
 800c7c2:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c7c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c7ca:	ed82 6b00 	vstr	d6, [r2]
 800c7ce:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c7d2:	ed82 7b02 	vstr	d7, [r2, #8]
 800c7d6:	e78d      	b.n	800c6f4 <__kernel_rem_pio2+0x3ec>
 800c7d8:	aa40      	add	r2, sp, #256	; 0x100
 800c7da:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c7de:	ed92 6b00 	vldr	d6, [r2]
 800c7e2:	3b01      	subs	r3, #1
 800c7e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c7e8:	e78a      	b.n	800c700 <__kernel_rem_pio2+0x3f8>
 800c7ea:	eeb1 5b45 	vneg.f64	d5, d5
 800c7ee:	eeb1 6b46 	vneg.f64	d6, d6
 800c7f2:	ed87 5b00 	vstr	d5, [r7]
 800c7f6:	eeb1 7b47 	vneg.f64	d7, d7
 800c7fa:	ed87 6b02 	vstr	d6, [r7, #8]
 800c7fe:	e78b      	b.n	800c718 <__kernel_rem_pio2+0x410>
	...

0800c808 <__kernel_sin>:
 800c808:	ee10 3a90 	vmov	r3, s1
 800c80c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c810:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c814:	da04      	bge.n	800c820 <__kernel_sin+0x18>
 800c816:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800c81a:	ee17 3a90 	vmov	r3, s15
 800c81e:	b35b      	cbz	r3, 800c878 <__kernel_sin+0x70>
 800c820:	ee20 6b00 	vmul.f64	d6, d0, d0
 800c824:	ee20 5b06 	vmul.f64	d5, d0, d6
 800c828:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800c880 <__kernel_sin+0x78>
 800c82c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c888 <__kernel_sin+0x80>
 800c830:	eea6 4b07 	vfma.f64	d4, d6, d7
 800c834:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800c890 <__kernel_sin+0x88>
 800c838:	eea4 7b06 	vfma.f64	d7, d4, d6
 800c83c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c898 <__kernel_sin+0x90>
 800c840:	eea7 4b06 	vfma.f64	d4, d7, d6
 800c844:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800c8a0 <__kernel_sin+0x98>
 800c848:	eea4 7b06 	vfma.f64	d7, d4, d6
 800c84c:	b930      	cbnz	r0, 800c85c <__kernel_sin+0x54>
 800c84e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c8a8 <__kernel_sin+0xa0>
 800c852:	eea6 4b07 	vfma.f64	d4, d6, d7
 800c856:	eea4 0b05 	vfma.f64	d0, d4, d5
 800c85a:	4770      	bx	lr
 800c85c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800c860:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c864:	eea1 7b04 	vfma.f64	d7, d1, d4
 800c868:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800c86c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800c8b0 <__kernel_sin+0xa8>
 800c870:	eea5 1b07 	vfma.f64	d1, d5, d7
 800c874:	ee30 0b41 	vsub.f64	d0, d0, d1
 800c878:	4770      	bx	lr
 800c87a:	bf00      	nop
 800c87c:	f3af 8000 	nop.w
 800c880:	5acfd57c 	.word	0x5acfd57c
 800c884:	3de5d93a 	.word	0x3de5d93a
 800c888:	8a2b9ceb 	.word	0x8a2b9ceb
 800c88c:	be5ae5e6 	.word	0xbe5ae5e6
 800c890:	57b1fe7d 	.word	0x57b1fe7d
 800c894:	3ec71de3 	.word	0x3ec71de3
 800c898:	19c161d5 	.word	0x19c161d5
 800c89c:	bf2a01a0 	.word	0xbf2a01a0
 800c8a0:	1110f8a6 	.word	0x1110f8a6
 800c8a4:	3f811111 	.word	0x3f811111
 800c8a8:	55555549 	.word	0x55555549
 800c8ac:	bfc55555 	.word	0xbfc55555
 800c8b0:	55555549 	.word	0x55555549
 800c8b4:	3fc55555 	.word	0x3fc55555

0800c8b8 <fabs>:
 800c8b8:	ec51 0b10 	vmov	r0, r1, d0
 800c8bc:	ee10 2a10 	vmov	r2, s0
 800c8c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c8c4:	ec43 2b10 	vmov	d0, r2, r3
 800c8c8:	4770      	bx	lr
 800c8ca:	0000      	movs	r0, r0
 800c8cc:	0000      	movs	r0, r0
	...

0800c8d0 <floor>:
 800c8d0:	ee10 1a90 	vmov	r1, s1
 800c8d4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c8d8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800c8dc:	2b13      	cmp	r3, #19
 800c8de:	b530      	push	{r4, r5, lr}
 800c8e0:	ee10 0a10 	vmov	r0, s0
 800c8e4:	ee10 5a10 	vmov	r5, s0
 800c8e8:	dc31      	bgt.n	800c94e <floor+0x7e>
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	da15      	bge.n	800c91a <floor+0x4a>
 800c8ee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800c9a8 <floor+0xd8>
 800c8f2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c8f6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8fe:	dd07      	ble.n	800c910 <floor+0x40>
 800c900:	2900      	cmp	r1, #0
 800c902:	da4e      	bge.n	800c9a2 <floor+0xd2>
 800c904:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c908:	4318      	orrs	r0, r3
 800c90a:	d001      	beq.n	800c910 <floor+0x40>
 800c90c:	4928      	ldr	r1, [pc, #160]	; (800c9b0 <floor+0xe0>)
 800c90e:	2000      	movs	r0, #0
 800c910:	460b      	mov	r3, r1
 800c912:	4602      	mov	r2, r0
 800c914:	ec43 2b10 	vmov	d0, r2, r3
 800c918:	e020      	b.n	800c95c <floor+0x8c>
 800c91a:	4a26      	ldr	r2, [pc, #152]	; (800c9b4 <floor+0xe4>)
 800c91c:	411a      	asrs	r2, r3
 800c91e:	ea01 0402 	and.w	r4, r1, r2
 800c922:	4304      	orrs	r4, r0
 800c924:	d01a      	beq.n	800c95c <floor+0x8c>
 800c926:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c9a8 <floor+0xd8>
 800c92a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c92e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c936:	ddeb      	ble.n	800c910 <floor+0x40>
 800c938:	2900      	cmp	r1, #0
 800c93a:	bfbe      	ittt	lt
 800c93c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800c940:	fa40 f303 	asrlt.w	r3, r0, r3
 800c944:	18c9      	addlt	r1, r1, r3
 800c946:	ea21 0102 	bic.w	r1, r1, r2
 800c94a:	2000      	movs	r0, #0
 800c94c:	e7e0      	b.n	800c910 <floor+0x40>
 800c94e:	2b33      	cmp	r3, #51	; 0x33
 800c950:	dd05      	ble.n	800c95e <floor+0x8e>
 800c952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c956:	d101      	bne.n	800c95c <floor+0x8c>
 800c958:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c95c:	bd30      	pop	{r4, r5, pc}
 800c95e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800c962:	f04f 32ff 	mov.w	r2, #4294967295
 800c966:	40e2      	lsrs	r2, r4
 800c968:	4202      	tst	r2, r0
 800c96a:	d0f7      	beq.n	800c95c <floor+0x8c>
 800c96c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800c9a8 <floor+0xd8>
 800c970:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c974:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c97c:	ddc8      	ble.n	800c910 <floor+0x40>
 800c97e:	2900      	cmp	r1, #0
 800c980:	da02      	bge.n	800c988 <floor+0xb8>
 800c982:	2b14      	cmp	r3, #20
 800c984:	d103      	bne.n	800c98e <floor+0xbe>
 800c986:	3101      	adds	r1, #1
 800c988:	ea20 0002 	bic.w	r0, r0, r2
 800c98c:	e7c0      	b.n	800c910 <floor+0x40>
 800c98e:	2401      	movs	r4, #1
 800c990:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c994:	fa04 f303 	lsl.w	r3, r4, r3
 800c998:	4418      	add	r0, r3
 800c99a:	42a8      	cmp	r0, r5
 800c99c:	bf38      	it	cc
 800c99e:	1909      	addcc	r1, r1, r4
 800c9a0:	e7f2      	b.n	800c988 <floor+0xb8>
 800c9a2:	2000      	movs	r0, #0
 800c9a4:	4601      	mov	r1, r0
 800c9a6:	e7b3      	b.n	800c910 <floor+0x40>
 800c9a8:	8800759c 	.word	0x8800759c
 800c9ac:	7e37e43c 	.word	0x7e37e43c
 800c9b0:	bff00000 	.word	0xbff00000
 800c9b4:	000fffff 	.word	0x000fffff

0800c9b8 <scalbn>:
 800c9b8:	b082      	sub	sp, #8
 800c9ba:	ed8d 0b00 	vstr	d0, [sp]
 800c9be:	9b01      	ldr	r3, [sp, #4]
 800c9c0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c9c4:	b9a2      	cbnz	r2, 800c9f0 <scalbn+0x38>
 800c9c6:	9a00      	ldr	r2, [sp, #0]
 800c9c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9cc:	4313      	orrs	r3, r2
 800c9ce:	d03a      	beq.n	800ca46 <scalbn+0x8e>
 800c9d0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800caa8 <scalbn+0xf0>
 800c9d4:	4b40      	ldr	r3, [pc, #256]	; (800cad8 <scalbn+0x120>)
 800c9d6:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c9da:	4298      	cmp	r0, r3
 800c9dc:	ed8d 7b00 	vstr	d7, [sp]
 800c9e0:	da11      	bge.n	800ca06 <scalbn+0x4e>
 800c9e2:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800cab0 <scalbn+0xf8>
 800c9e6:	ed9d 6b00 	vldr	d6, [sp]
 800c9ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c9ee:	e007      	b.n	800ca00 <scalbn+0x48>
 800c9f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c9f4:	428a      	cmp	r2, r1
 800c9f6:	d10a      	bne.n	800ca0e <scalbn+0x56>
 800c9f8:	ed9d 7b00 	vldr	d7, [sp]
 800c9fc:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ca00:	ed8d 7b00 	vstr	d7, [sp]
 800ca04:	e01f      	b.n	800ca46 <scalbn+0x8e>
 800ca06:	9b01      	ldr	r3, [sp, #4]
 800ca08:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ca0c:	3a36      	subs	r2, #54	; 0x36
 800ca0e:	4402      	add	r2, r0
 800ca10:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ca14:	428a      	cmp	r2, r1
 800ca16:	dd0a      	ble.n	800ca2e <scalbn+0x76>
 800ca18:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800cab8 <scalbn+0x100>
 800ca1c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800cac0 <scalbn+0x108>
 800ca20:	eeb0 6b47 	vmov.f64	d6, d7
 800ca24:	9b01      	ldr	r3, [sp, #4]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	fe27 7b05 	vselge.f64	d7, d7, d5
 800ca2c:	e7dd      	b.n	800c9ea <scalbn+0x32>
 800ca2e:	2a00      	cmp	r2, #0
 800ca30:	dd0d      	ble.n	800ca4e <scalbn+0x96>
 800ca32:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ca3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ca3e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ca42:	e9cd 0100 	strd	r0, r1, [sp]
 800ca46:	ed9d 0b00 	vldr	d0, [sp]
 800ca4a:	b002      	add	sp, #8
 800ca4c:	4770      	bx	lr
 800ca4e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ca52:	da18      	bge.n	800ca86 <scalbn+0xce>
 800ca54:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ca58:	4298      	cmp	r0, r3
 800ca5a:	9b01      	ldr	r3, [sp, #4]
 800ca5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca60:	dd09      	ble.n	800ca76 <scalbn+0xbe>
 800ca62:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800cab8 <scalbn+0x100>
 800ca66:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800cac0 <scalbn+0x108>
 800ca6a:	eeb0 6b47 	vmov.f64	d6, d7
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800ca74:	e7b9      	b.n	800c9ea <scalbn+0x32>
 800ca76:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800cab0 <scalbn+0xf8>
 800ca7a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800cac8 <scalbn+0x110>
 800ca7e:	eeb0 6b47 	vmov.f64	d6, d7
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	e7f4      	b.n	800ca70 <scalbn+0xb8>
 800ca86:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca8a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ca8e:	3236      	adds	r2, #54	; 0x36
 800ca90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ca94:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ca98:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800cad0 <scalbn+0x118>
 800ca9c:	ec41 0b17 	vmov	d7, r0, r1
 800caa0:	e7a3      	b.n	800c9ea <scalbn+0x32>
 800caa2:	bf00      	nop
 800caa4:	f3af 8000 	nop.w
 800caa8:	00000000 	.word	0x00000000
 800caac:	43500000 	.word	0x43500000
 800cab0:	c2f8f359 	.word	0xc2f8f359
 800cab4:	01a56e1f 	.word	0x01a56e1f
 800cab8:	8800759c 	.word	0x8800759c
 800cabc:	7e37e43c 	.word	0x7e37e43c
 800cac0:	8800759c 	.word	0x8800759c
 800cac4:	fe37e43c 	.word	0xfe37e43c
 800cac8:	c2f8f359 	.word	0xc2f8f359
 800cacc:	81a56e1f 	.word	0x81a56e1f
 800cad0:	00000000 	.word	0x00000000
 800cad4:	3c900000 	.word	0x3c900000
 800cad8:	ffff3cb0 	.word	0xffff3cb0

0800cadc <atanf>:
 800cadc:	b538      	push	{r3, r4, r5, lr}
 800cade:	ee10 5a10 	vmov	r5, s0
 800cae2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800cae6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800caea:	eef0 7a40 	vmov.f32	s15, s0
 800caee:	db0f      	blt.n	800cb10 <atanf+0x34>
 800caf0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800caf4:	dd04      	ble.n	800cb00 <atanf+0x24>
 800caf6:	ee70 7a00 	vadd.f32	s15, s0, s0
 800cafa:	eeb0 0a67 	vmov.f32	s0, s15
 800cafe:	bd38      	pop	{r3, r4, r5, pc}
 800cb00:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800cc38 <atanf+0x15c>
 800cb04:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800cc3c <atanf+0x160>
 800cb08:	2d00      	cmp	r5, #0
 800cb0a:	fe77 7a80 	vselgt.f32	s15, s15, s0
 800cb0e:	e7f4      	b.n	800cafa <atanf+0x1e>
 800cb10:	4b4b      	ldr	r3, [pc, #300]	; (800cc40 <atanf+0x164>)
 800cb12:	429c      	cmp	r4, r3
 800cb14:	dc10      	bgt.n	800cb38 <atanf+0x5c>
 800cb16:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800cb1a:	da0a      	bge.n	800cb32 <atanf+0x56>
 800cb1c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800cc44 <atanf+0x168>
 800cb20:	ee30 7a07 	vadd.f32	s14, s0, s14
 800cb24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb28:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800cb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb30:	dce3      	bgt.n	800cafa <atanf+0x1e>
 800cb32:	f04f 33ff 	mov.w	r3, #4294967295
 800cb36:	e013      	b.n	800cb60 <atanf+0x84>
 800cb38:	f000 f8a4 	bl	800cc84 <fabsf>
 800cb3c:	4b42      	ldr	r3, [pc, #264]	; (800cc48 <atanf+0x16c>)
 800cb3e:	429c      	cmp	r4, r3
 800cb40:	dc4f      	bgt.n	800cbe2 <atanf+0x106>
 800cb42:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800cb46:	429c      	cmp	r4, r3
 800cb48:	dc41      	bgt.n	800cbce <atanf+0xf2>
 800cb4a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800cb4e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cb52:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cb56:	2300      	movs	r3, #0
 800cb58:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cb5c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cb60:	1c5a      	adds	r2, r3, #1
 800cb62:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800cb66:	eddf 5a39 	vldr	s11, [pc, #228]	; 800cc4c <atanf+0x170>
 800cb6a:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800cc50 <atanf+0x174>
 800cb6e:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800cc54 <atanf+0x178>
 800cb72:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800cc58 <atanf+0x17c>
 800cb76:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800cb7a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800cb7e:	eddf 5a37 	vldr	s11, [pc, #220]	; 800cc5c <atanf+0x180>
 800cb82:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cb86:	ed9f 6a36 	vldr	s12, [pc, #216]	; 800cc60 <atanf+0x184>
 800cb8a:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cb8e:	eddf 5a35 	vldr	s11, [pc, #212]	; 800cc64 <atanf+0x188>
 800cb92:	eee6 5a07 	vfma.f32	s11, s12, s14
 800cb96:	ed9f 6a34 	vldr	s12, [pc, #208]	; 800cc68 <atanf+0x18c>
 800cb9a:	eea5 6a87 	vfma.f32	s12, s11, s14
 800cb9e:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cc6c <atanf+0x190>
 800cba2:	eee7 5a05 	vfma.f32	s11, s14, s10
 800cba6:	ed9f 5a32 	vldr	s10, [pc, #200]	; 800cc70 <atanf+0x194>
 800cbaa:	eea5 5a87 	vfma.f32	s10, s11, s14
 800cbae:	eddf 5a31 	vldr	s11, [pc, #196]	; 800cc74 <atanf+0x198>
 800cbb2:	eee5 5a07 	vfma.f32	s11, s10, s14
 800cbb6:	eea5 0a87 	vfma.f32	s0, s11, s14
 800cbba:	ee20 0a07 	vmul.f32	s0, s0, s14
 800cbbe:	eea6 0a26 	vfma.f32	s0, s12, s13
 800cbc2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cbc6:	d121      	bne.n	800cc0c <atanf+0x130>
 800cbc8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800cbcc:	e795      	b.n	800cafa <atanf+0x1e>
 800cbce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cbd2:	ee30 7a67 	vsub.f32	s14, s0, s15
 800cbd6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800cbda:	2301      	movs	r3, #1
 800cbdc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cbe0:	e7be      	b.n	800cb60 <atanf+0x84>
 800cbe2:	4b25      	ldr	r3, [pc, #148]	; (800cc78 <atanf+0x19c>)
 800cbe4:	429c      	cmp	r4, r3
 800cbe6:	dc0b      	bgt.n	800cc00 <atanf+0x124>
 800cbe8:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800cbec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbf0:	eea0 7a27 	vfma.f32	s14, s0, s15
 800cbf4:	2302      	movs	r3, #2
 800cbf6:	ee70 6a67 	vsub.f32	s13, s0, s15
 800cbfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbfe:	e7af      	b.n	800cb60 <atanf+0x84>
 800cc00:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cc04:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cc08:	2303      	movs	r3, #3
 800cc0a:	e7a9      	b.n	800cb60 <atanf+0x84>
 800cc0c:	4a1b      	ldr	r2, [pc, #108]	; (800cc7c <atanf+0x1a0>)
 800cc0e:	491c      	ldr	r1, [pc, #112]	; (800cc80 <atanf+0x1a4>)
 800cc10:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800cc14:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800cc18:	ed93 7a00 	vldr	s14, [r3]
 800cc1c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cc20:	2d00      	cmp	r5, #0
 800cc22:	ee70 7a67 	vsub.f32	s15, s0, s15
 800cc26:	ed92 0a00 	vldr	s0, [r2]
 800cc2a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800cc2e:	bfb8      	it	lt
 800cc30:	eef1 7a67 	vneglt.f32	s15, s15
 800cc34:	e761      	b.n	800cafa <atanf+0x1e>
 800cc36:	bf00      	nop
 800cc38:	3fc90fdb 	.word	0x3fc90fdb
 800cc3c:	bfc90fdb 	.word	0xbfc90fdb
 800cc40:	3edfffff 	.word	0x3edfffff
 800cc44:	7149f2ca 	.word	0x7149f2ca
 800cc48:	3f97ffff 	.word	0x3f97ffff
 800cc4c:	3c8569d7 	.word	0x3c8569d7
 800cc50:	3d4bda59 	.word	0x3d4bda59
 800cc54:	bd15a221 	.word	0xbd15a221
 800cc58:	be4ccccd 	.word	0xbe4ccccd
 800cc5c:	3d886b35 	.word	0x3d886b35
 800cc60:	3dba2e6e 	.word	0x3dba2e6e
 800cc64:	3e124925 	.word	0x3e124925
 800cc68:	3eaaaaab 	.word	0x3eaaaaab
 800cc6c:	bd6ef16b 	.word	0xbd6ef16b
 800cc70:	bd9d8795 	.word	0xbd9d8795
 800cc74:	bde38e38 	.word	0xbde38e38
 800cc78:	401bffff 	.word	0x401bffff
 800cc7c:	0800f7c0 	.word	0x0800f7c0
 800cc80:	0800f7d0 	.word	0x0800f7d0

0800cc84 <fabsf>:
 800cc84:	ee10 3a10 	vmov	r3, s0
 800cc88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc8c:	ee00 3a10 	vmov	s0, r3
 800cc90:	4770      	bx	lr
	...

0800cc94 <__errno>:
 800cc94:	4b01      	ldr	r3, [pc, #4]	; (800cc9c <__errno+0x8>)
 800cc96:	6818      	ldr	r0, [r3, #0]
 800cc98:	4770      	bx	lr
 800cc9a:	bf00      	nop
 800cc9c:	24000010 	.word	0x24000010

0800cca0 <__libc_init_array>:
 800cca0:	b570      	push	{r4, r5, r6, lr}
 800cca2:	4d0d      	ldr	r5, [pc, #52]	; (800ccd8 <__libc_init_array+0x38>)
 800cca4:	4c0d      	ldr	r4, [pc, #52]	; (800ccdc <__libc_init_array+0x3c>)
 800cca6:	1b64      	subs	r4, r4, r5
 800cca8:	10a4      	asrs	r4, r4, #2
 800ccaa:	2600      	movs	r6, #0
 800ccac:	42a6      	cmp	r6, r4
 800ccae:	d109      	bne.n	800ccc4 <__libc_init_array+0x24>
 800ccb0:	4d0b      	ldr	r5, [pc, #44]	; (800cce0 <__libc_init_array+0x40>)
 800ccb2:	4c0c      	ldr	r4, [pc, #48]	; (800cce4 <__libc_init_array+0x44>)
 800ccb4:	f002 fc60 	bl	800f578 <_init>
 800ccb8:	1b64      	subs	r4, r4, r5
 800ccba:	10a4      	asrs	r4, r4, #2
 800ccbc:	2600      	movs	r6, #0
 800ccbe:	42a6      	cmp	r6, r4
 800ccc0:	d105      	bne.n	800ccce <__libc_init_array+0x2e>
 800ccc2:	bd70      	pop	{r4, r5, r6, pc}
 800ccc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccc8:	4798      	blx	r3
 800ccca:	3601      	adds	r6, #1
 800cccc:	e7ee      	b.n	800ccac <__libc_init_array+0xc>
 800ccce:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccd2:	4798      	blx	r3
 800ccd4:	3601      	adds	r6, #1
 800ccd6:	e7f2      	b.n	800ccbe <__libc_init_array+0x1e>
 800ccd8:	0800fbcc 	.word	0x0800fbcc
 800ccdc:	0800fbcc 	.word	0x0800fbcc
 800cce0:	0800fbcc 	.word	0x0800fbcc
 800cce4:	0800fbd4 	.word	0x0800fbd4

0800cce8 <memset>:
 800cce8:	4402      	add	r2, r0
 800ccea:	4603      	mov	r3, r0
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d100      	bne.n	800ccf2 <memset+0xa>
 800ccf0:	4770      	bx	lr
 800ccf2:	f803 1b01 	strb.w	r1, [r3], #1
 800ccf6:	e7f9      	b.n	800ccec <memset+0x4>

0800ccf8 <__cvt>:
 800ccf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccfa:	ed2d 8b02 	vpush	{d8}
 800ccfe:	eeb0 8b40 	vmov.f64	d8, d0
 800cd02:	b085      	sub	sp, #20
 800cd04:	4617      	mov	r7, r2
 800cd06:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800cd08:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cd0a:	ee18 2a90 	vmov	r2, s17
 800cd0e:	f025 0520 	bic.w	r5, r5, #32
 800cd12:	2a00      	cmp	r2, #0
 800cd14:	bfb6      	itet	lt
 800cd16:	222d      	movlt	r2, #45	; 0x2d
 800cd18:	2200      	movge	r2, #0
 800cd1a:	eeb1 8b40 	vneglt.f64	d8, d0
 800cd1e:	2d46      	cmp	r5, #70	; 0x46
 800cd20:	460c      	mov	r4, r1
 800cd22:	701a      	strb	r2, [r3, #0]
 800cd24:	d004      	beq.n	800cd30 <__cvt+0x38>
 800cd26:	2d45      	cmp	r5, #69	; 0x45
 800cd28:	d100      	bne.n	800cd2c <__cvt+0x34>
 800cd2a:	3401      	adds	r4, #1
 800cd2c:	2102      	movs	r1, #2
 800cd2e:	e000      	b.n	800cd32 <__cvt+0x3a>
 800cd30:	2103      	movs	r1, #3
 800cd32:	ab03      	add	r3, sp, #12
 800cd34:	9301      	str	r3, [sp, #4]
 800cd36:	ab02      	add	r3, sp, #8
 800cd38:	9300      	str	r3, [sp, #0]
 800cd3a:	4622      	mov	r2, r4
 800cd3c:	4633      	mov	r3, r6
 800cd3e:	eeb0 0b48 	vmov.f64	d0, d8
 800cd42:	f000 fca9 	bl	800d698 <_dtoa_r>
 800cd46:	2d47      	cmp	r5, #71	; 0x47
 800cd48:	d109      	bne.n	800cd5e <__cvt+0x66>
 800cd4a:	07fb      	lsls	r3, r7, #31
 800cd4c:	d407      	bmi.n	800cd5e <__cvt+0x66>
 800cd4e:	9b03      	ldr	r3, [sp, #12]
 800cd50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd52:	1a1b      	subs	r3, r3, r0
 800cd54:	6013      	str	r3, [r2, #0]
 800cd56:	b005      	add	sp, #20
 800cd58:	ecbd 8b02 	vpop	{d8}
 800cd5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd5e:	2d46      	cmp	r5, #70	; 0x46
 800cd60:	eb00 0204 	add.w	r2, r0, r4
 800cd64:	d10c      	bne.n	800cd80 <__cvt+0x88>
 800cd66:	7803      	ldrb	r3, [r0, #0]
 800cd68:	2b30      	cmp	r3, #48	; 0x30
 800cd6a:	d107      	bne.n	800cd7c <__cvt+0x84>
 800cd6c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd74:	bf1c      	itt	ne
 800cd76:	f1c4 0401 	rsbne	r4, r4, #1
 800cd7a:	6034      	strne	r4, [r6, #0]
 800cd7c:	6833      	ldr	r3, [r6, #0]
 800cd7e:	441a      	add	r2, r3
 800cd80:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800cd84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd88:	bf08      	it	eq
 800cd8a:	9203      	streq	r2, [sp, #12]
 800cd8c:	2130      	movs	r1, #48	; 0x30
 800cd8e:	9b03      	ldr	r3, [sp, #12]
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d2dc      	bcs.n	800cd4e <__cvt+0x56>
 800cd94:	1c5c      	adds	r4, r3, #1
 800cd96:	9403      	str	r4, [sp, #12]
 800cd98:	7019      	strb	r1, [r3, #0]
 800cd9a:	e7f8      	b.n	800cd8e <__cvt+0x96>

0800cd9c <__exponent>:
 800cd9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2900      	cmp	r1, #0
 800cda2:	bfb8      	it	lt
 800cda4:	4249      	neglt	r1, r1
 800cda6:	f803 2b02 	strb.w	r2, [r3], #2
 800cdaa:	bfb4      	ite	lt
 800cdac:	222d      	movlt	r2, #45	; 0x2d
 800cdae:	222b      	movge	r2, #43	; 0x2b
 800cdb0:	2909      	cmp	r1, #9
 800cdb2:	7042      	strb	r2, [r0, #1]
 800cdb4:	dd2a      	ble.n	800ce0c <__exponent+0x70>
 800cdb6:	f10d 0407 	add.w	r4, sp, #7
 800cdba:	46a4      	mov	ip, r4
 800cdbc:	270a      	movs	r7, #10
 800cdbe:	46a6      	mov	lr, r4
 800cdc0:	460a      	mov	r2, r1
 800cdc2:	fb91 f6f7 	sdiv	r6, r1, r7
 800cdc6:	fb07 1516 	mls	r5, r7, r6, r1
 800cdca:	3530      	adds	r5, #48	; 0x30
 800cdcc:	2a63      	cmp	r2, #99	; 0x63
 800cdce:	f104 34ff 	add.w	r4, r4, #4294967295
 800cdd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cdd6:	4631      	mov	r1, r6
 800cdd8:	dcf1      	bgt.n	800cdbe <__exponent+0x22>
 800cdda:	3130      	adds	r1, #48	; 0x30
 800cddc:	f1ae 0502 	sub.w	r5, lr, #2
 800cde0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cde4:	1c44      	adds	r4, r0, #1
 800cde6:	4629      	mov	r1, r5
 800cde8:	4561      	cmp	r1, ip
 800cdea:	d30a      	bcc.n	800ce02 <__exponent+0x66>
 800cdec:	f10d 0209 	add.w	r2, sp, #9
 800cdf0:	eba2 020e 	sub.w	r2, r2, lr
 800cdf4:	4565      	cmp	r5, ip
 800cdf6:	bf88      	it	hi
 800cdf8:	2200      	movhi	r2, #0
 800cdfa:	4413      	add	r3, r2
 800cdfc:	1a18      	subs	r0, r3, r0
 800cdfe:	b003      	add	sp, #12
 800ce00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce06:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ce0a:	e7ed      	b.n	800cde8 <__exponent+0x4c>
 800ce0c:	2330      	movs	r3, #48	; 0x30
 800ce0e:	3130      	adds	r1, #48	; 0x30
 800ce10:	7083      	strb	r3, [r0, #2]
 800ce12:	70c1      	strb	r1, [r0, #3]
 800ce14:	1d03      	adds	r3, r0, #4
 800ce16:	e7f1      	b.n	800cdfc <__exponent+0x60>

0800ce18 <_printf_float>:
 800ce18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce1c:	b08b      	sub	sp, #44	; 0x2c
 800ce1e:	460c      	mov	r4, r1
 800ce20:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ce24:	4616      	mov	r6, r2
 800ce26:	461f      	mov	r7, r3
 800ce28:	4605      	mov	r5, r0
 800ce2a:	f001 f9b7 	bl	800e19c <_localeconv_r>
 800ce2e:	f8d0 b000 	ldr.w	fp, [r0]
 800ce32:	4658      	mov	r0, fp
 800ce34:	f7f3 fa54 	bl	80002e0 <strlen>
 800ce38:	2300      	movs	r3, #0
 800ce3a:	9308      	str	r3, [sp, #32]
 800ce3c:	f8d8 3000 	ldr.w	r3, [r8]
 800ce40:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ce44:	6822      	ldr	r2, [r4, #0]
 800ce46:	3307      	adds	r3, #7
 800ce48:	f023 0307 	bic.w	r3, r3, #7
 800ce4c:	f103 0108 	add.w	r1, r3, #8
 800ce50:	f8c8 1000 	str.w	r1, [r8]
 800ce54:	4682      	mov	sl, r0
 800ce56:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ce5a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800ce5e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d0c0 <_printf_float+0x2a8>
 800ce62:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800ce66:	eeb0 6bc0 	vabs.f64	d6, d0
 800ce6a:	eeb4 6b47 	vcmp.f64	d6, d7
 800ce6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce72:	dd24      	ble.n	800cebe <_printf_float+0xa6>
 800ce74:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ce78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce7c:	d502      	bpl.n	800ce84 <_printf_float+0x6c>
 800ce7e:	232d      	movs	r3, #45	; 0x2d
 800ce80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce84:	4b90      	ldr	r3, [pc, #576]	; (800d0c8 <_printf_float+0x2b0>)
 800ce86:	4891      	ldr	r0, [pc, #580]	; (800d0cc <_printf_float+0x2b4>)
 800ce88:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ce8c:	bf94      	ite	ls
 800ce8e:	4698      	movls	r8, r3
 800ce90:	4680      	movhi	r8, r0
 800ce92:	2303      	movs	r3, #3
 800ce94:	6123      	str	r3, [r4, #16]
 800ce96:	f022 0204 	bic.w	r2, r2, #4
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	6022      	str	r2, [r4, #0]
 800ce9e:	9304      	str	r3, [sp, #16]
 800cea0:	9700      	str	r7, [sp, #0]
 800cea2:	4633      	mov	r3, r6
 800cea4:	aa09      	add	r2, sp, #36	; 0x24
 800cea6:	4621      	mov	r1, r4
 800cea8:	4628      	mov	r0, r5
 800ceaa:	f000 f9d3 	bl	800d254 <_printf_common>
 800ceae:	3001      	adds	r0, #1
 800ceb0:	f040 808a 	bne.w	800cfc8 <_printf_float+0x1b0>
 800ceb4:	f04f 30ff 	mov.w	r0, #4294967295
 800ceb8:	b00b      	add	sp, #44	; 0x2c
 800ceba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cebe:	eeb4 0b40 	vcmp.f64	d0, d0
 800cec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cec6:	d709      	bvc.n	800cedc <_printf_float+0xc4>
 800cec8:	ee10 3a90 	vmov	r3, s1
 800cecc:	2b00      	cmp	r3, #0
 800cece:	bfbc      	itt	lt
 800ced0:	232d      	movlt	r3, #45	; 0x2d
 800ced2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ced6:	487e      	ldr	r0, [pc, #504]	; (800d0d0 <_printf_float+0x2b8>)
 800ced8:	4b7e      	ldr	r3, [pc, #504]	; (800d0d4 <_printf_float+0x2bc>)
 800ceda:	e7d5      	b.n	800ce88 <_printf_float+0x70>
 800cedc:	6863      	ldr	r3, [r4, #4]
 800cede:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800cee2:	9104      	str	r1, [sp, #16]
 800cee4:	1c59      	adds	r1, r3, #1
 800cee6:	d13c      	bne.n	800cf62 <_printf_float+0x14a>
 800cee8:	2306      	movs	r3, #6
 800ceea:	6063      	str	r3, [r4, #4]
 800ceec:	2300      	movs	r3, #0
 800ceee:	9303      	str	r3, [sp, #12]
 800cef0:	ab08      	add	r3, sp, #32
 800cef2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800cef6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cefa:	ab07      	add	r3, sp, #28
 800cefc:	6861      	ldr	r1, [r4, #4]
 800cefe:	9300      	str	r3, [sp, #0]
 800cf00:	6022      	str	r2, [r4, #0]
 800cf02:	f10d 031b 	add.w	r3, sp, #27
 800cf06:	4628      	mov	r0, r5
 800cf08:	f7ff fef6 	bl	800ccf8 <__cvt>
 800cf0c:	9b04      	ldr	r3, [sp, #16]
 800cf0e:	9907      	ldr	r1, [sp, #28]
 800cf10:	2b47      	cmp	r3, #71	; 0x47
 800cf12:	4680      	mov	r8, r0
 800cf14:	d108      	bne.n	800cf28 <_printf_float+0x110>
 800cf16:	1cc8      	adds	r0, r1, #3
 800cf18:	db02      	blt.n	800cf20 <_printf_float+0x108>
 800cf1a:	6863      	ldr	r3, [r4, #4]
 800cf1c:	4299      	cmp	r1, r3
 800cf1e:	dd41      	ble.n	800cfa4 <_printf_float+0x18c>
 800cf20:	f1a9 0902 	sub.w	r9, r9, #2
 800cf24:	fa5f f989 	uxtb.w	r9, r9
 800cf28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cf2c:	d820      	bhi.n	800cf70 <_printf_float+0x158>
 800cf2e:	3901      	subs	r1, #1
 800cf30:	464a      	mov	r2, r9
 800cf32:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cf36:	9107      	str	r1, [sp, #28]
 800cf38:	f7ff ff30 	bl	800cd9c <__exponent>
 800cf3c:	9a08      	ldr	r2, [sp, #32]
 800cf3e:	9004      	str	r0, [sp, #16]
 800cf40:	1813      	adds	r3, r2, r0
 800cf42:	2a01      	cmp	r2, #1
 800cf44:	6123      	str	r3, [r4, #16]
 800cf46:	dc02      	bgt.n	800cf4e <_printf_float+0x136>
 800cf48:	6822      	ldr	r2, [r4, #0]
 800cf4a:	07d2      	lsls	r2, r2, #31
 800cf4c:	d501      	bpl.n	800cf52 <_printf_float+0x13a>
 800cf4e:	3301      	adds	r3, #1
 800cf50:	6123      	str	r3, [r4, #16]
 800cf52:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d0a2      	beq.n	800cea0 <_printf_float+0x88>
 800cf5a:	232d      	movs	r3, #45	; 0x2d
 800cf5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf60:	e79e      	b.n	800cea0 <_printf_float+0x88>
 800cf62:	9904      	ldr	r1, [sp, #16]
 800cf64:	2947      	cmp	r1, #71	; 0x47
 800cf66:	d1c1      	bne.n	800ceec <_printf_float+0xd4>
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1bf      	bne.n	800ceec <_printf_float+0xd4>
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	e7bc      	b.n	800ceea <_printf_float+0xd2>
 800cf70:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cf74:	d118      	bne.n	800cfa8 <_printf_float+0x190>
 800cf76:	2900      	cmp	r1, #0
 800cf78:	6863      	ldr	r3, [r4, #4]
 800cf7a:	dd0b      	ble.n	800cf94 <_printf_float+0x17c>
 800cf7c:	6121      	str	r1, [r4, #16]
 800cf7e:	b913      	cbnz	r3, 800cf86 <_printf_float+0x16e>
 800cf80:	6822      	ldr	r2, [r4, #0]
 800cf82:	07d0      	lsls	r0, r2, #31
 800cf84:	d502      	bpl.n	800cf8c <_printf_float+0x174>
 800cf86:	3301      	adds	r3, #1
 800cf88:	440b      	add	r3, r1
 800cf8a:	6123      	str	r3, [r4, #16]
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	65a1      	str	r1, [r4, #88]	; 0x58
 800cf90:	9304      	str	r3, [sp, #16]
 800cf92:	e7de      	b.n	800cf52 <_printf_float+0x13a>
 800cf94:	b913      	cbnz	r3, 800cf9c <_printf_float+0x184>
 800cf96:	6822      	ldr	r2, [r4, #0]
 800cf98:	07d2      	lsls	r2, r2, #31
 800cf9a:	d501      	bpl.n	800cfa0 <_printf_float+0x188>
 800cf9c:	3302      	adds	r3, #2
 800cf9e:	e7f4      	b.n	800cf8a <_printf_float+0x172>
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e7f2      	b.n	800cf8a <_printf_float+0x172>
 800cfa4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cfa8:	9b08      	ldr	r3, [sp, #32]
 800cfaa:	4299      	cmp	r1, r3
 800cfac:	db05      	blt.n	800cfba <_printf_float+0x1a2>
 800cfae:	6823      	ldr	r3, [r4, #0]
 800cfb0:	6121      	str	r1, [r4, #16]
 800cfb2:	07d8      	lsls	r0, r3, #31
 800cfb4:	d5ea      	bpl.n	800cf8c <_printf_float+0x174>
 800cfb6:	1c4b      	adds	r3, r1, #1
 800cfb8:	e7e7      	b.n	800cf8a <_printf_float+0x172>
 800cfba:	2900      	cmp	r1, #0
 800cfbc:	bfd4      	ite	le
 800cfbe:	f1c1 0202 	rsble	r2, r1, #2
 800cfc2:	2201      	movgt	r2, #1
 800cfc4:	4413      	add	r3, r2
 800cfc6:	e7e0      	b.n	800cf8a <_printf_float+0x172>
 800cfc8:	6823      	ldr	r3, [r4, #0]
 800cfca:	055a      	lsls	r2, r3, #21
 800cfcc:	d407      	bmi.n	800cfde <_printf_float+0x1c6>
 800cfce:	6923      	ldr	r3, [r4, #16]
 800cfd0:	4642      	mov	r2, r8
 800cfd2:	4631      	mov	r1, r6
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	47b8      	blx	r7
 800cfd8:	3001      	adds	r0, #1
 800cfda:	d12a      	bne.n	800d032 <_printf_float+0x21a>
 800cfdc:	e76a      	b.n	800ceb4 <_printf_float+0x9c>
 800cfde:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cfe2:	f240 80e2 	bls.w	800d1aa <_printf_float+0x392>
 800cfe6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cfea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cfee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff2:	d133      	bne.n	800d05c <_printf_float+0x244>
 800cff4:	4a38      	ldr	r2, [pc, #224]	; (800d0d8 <_printf_float+0x2c0>)
 800cff6:	2301      	movs	r3, #1
 800cff8:	4631      	mov	r1, r6
 800cffa:	4628      	mov	r0, r5
 800cffc:	47b8      	blx	r7
 800cffe:	3001      	adds	r0, #1
 800d000:	f43f af58 	beq.w	800ceb4 <_printf_float+0x9c>
 800d004:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d008:	429a      	cmp	r2, r3
 800d00a:	db02      	blt.n	800d012 <_printf_float+0x1fa>
 800d00c:	6823      	ldr	r3, [r4, #0]
 800d00e:	07d8      	lsls	r0, r3, #31
 800d010:	d50f      	bpl.n	800d032 <_printf_float+0x21a>
 800d012:	4653      	mov	r3, sl
 800d014:	465a      	mov	r2, fp
 800d016:	4631      	mov	r1, r6
 800d018:	4628      	mov	r0, r5
 800d01a:	47b8      	blx	r7
 800d01c:	3001      	adds	r0, #1
 800d01e:	f43f af49 	beq.w	800ceb4 <_printf_float+0x9c>
 800d022:	f04f 0800 	mov.w	r8, #0
 800d026:	f104 091a 	add.w	r9, r4, #26
 800d02a:	9b08      	ldr	r3, [sp, #32]
 800d02c:	3b01      	subs	r3, #1
 800d02e:	4543      	cmp	r3, r8
 800d030:	dc09      	bgt.n	800d046 <_printf_float+0x22e>
 800d032:	6823      	ldr	r3, [r4, #0]
 800d034:	079b      	lsls	r3, r3, #30
 800d036:	f100 8108 	bmi.w	800d24a <_printf_float+0x432>
 800d03a:	68e0      	ldr	r0, [r4, #12]
 800d03c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d03e:	4298      	cmp	r0, r3
 800d040:	bfb8      	it	lt
 800d042:	4618      	movlt	r0, r3
 800d044:	e738      	b.n	800ceb8 <_printf_float+0xa0>
 800d046:	2301      	movs	r3, #1
 800d048:	464a      	mov	r2, r9
 800d04a:	4631      	mov	r1, r6
 800d04c:	4628      	mov	r0, r5
 800d04e:	47b8      	blx	r7
 800d050:	3001      	adds	r0, #1
 800d052:	f43f af2f 	beq.w	800ceb4 <_printf_float+0x9c>
 800d056:	f108 0801 	add.w	r8, r8, #1
 800d05a:	e7e6      	b.n	800d02a <_printf_float+0x212>
 800d05c:	9b07      	ldr	r3, [sp, #28]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	dc3c      	bgt.n	800d0dc <_printf_float+0x2c4>
 800d062:	4a1d      	ldr	r2, [pc, #116]	; (800d0d8 <_printf_float+0x2c0>)
 800d064:	2301      	movs	r3, #1
 800d066:	4631      	mov	r1, r6
 800d068:	4628      	mov	r0, r5
 800d06a:	47b8      	blx	r7
 800d06c:	3001      	adds	r0, #1
 800d06e:	f43f af21 	beq.w	800ceb4 <_printf_float+0x9c>
 800d072:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d076:	4313      	orrs	r3, r2
 800d078:	d102      	bne.n	800d080 <_printf_float+0x268>
 800d07a:	6823      	ldr	r3, [r4, #0]
 800d07c:	07d9      	lsls	r1, r3, #31
 800d07e:	d5d8      	bpl.n	800d032 <_printf_float+0x21a>
 800d080:	4653      	mov	r3, sl
 800d082:	465a      	mov	r2, fp
 800d084:	4631      	mov	r1, r6
 800d086:	4628      	mov	r0, r5
 800d088:	47b8      	blx	r7
 800d08a:	3001      	adds	r0, #1
 800d08c:	f43f af12 	beq.w	800ceb4 <_printf_float+0x9c>
 800d090:	f04f 0900 	mov.w	r9, #0
 800d094:	f104 0a1a 	add.w	sl, r4, #26
 800d098:	9b07      	ldr	r3, [sp, #28]
 800d09a:	425b      	negs	r3, r3
 800d09c:	454b      	cmp	r3, r9
 800d09e:	dc01      	bgt.n	800d0a4 <_printf_float+0x28c>
 800d0a0:	9b08      	ldr	r3, [sp, #32]
 800d0a2:	e795      	b.n	800cfd0 <_printf_float+0x1b8>
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	4652      	mov	r2, sl
 800d0a8:	4631      	mov	r1, r6
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	47b8      	blx	r7
 800d0ae:	3001      	adds	r0, #1
 800d0b0:	f43f af00 	beq.w	800ceb4 <_printf_float+0x9c>
 800d0b4:	f109 0901 	add.w	r9, r9, #1
 800d0b8:	e7ee      	b.n	800d098 <_printf_float+0x280>
 800d0ba:	bf00      	nop
 800d0bc:	f3af 8000 	nop.w
 800d0c0:	ffffffff 	.word	0xffffffff
 800d0c4:	7fefffff 	.word	0x7fefffff
 800d0c8:	0800f7e4 	.word	0x0800f7e4
 800d0cc:	0800f7e8 	.word	0x0800f7e8
 800d0d0:	0800f7f0 	.word	0x0800f7f0
 800d0d4:	0800f7ec 	.word	0x0800f7ec
 800d0d8:	0800f7f4 	.word	0x0800f7f4
 800d0dc:	9a08      	ldr	r2, [sp, #32]
 800d0de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	bfa8      	it	ge
 800d0e4:	461a      	movge	r2, r3
 800d0e6:	2a00      	cmp	r2, #0
 800d0e8:	4691      	mov	r9, r2
 800d0ea:	dc38      	bgt.n	800d15e <_printf_float+0x346>
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	9305      	str	r3, [sp, #20]
 800d0f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d0f4:	f104 021a 	add.w	r2, r4, #26
 800d0f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d0fa:	9905      	ldr	r1, [sp, #20]
 800d0fc:	9304      	str	r3, [sp, #16]
 800d0fe:	eba3 0309 	sub.w	r3, r3, r9
 800d102:	428b      	cmp	r3, r1
 800d104:	dc33      	bgt.n	800d16e <_printf_float+0x356>
 800d106:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	db3c      	blt.n	800d188 <_printf_float+0x370>
 800d10e:	6823      	ldr	r3, [r4, #0]
 800d110:	07da      	lsls	r2, r3, #31
 800d112:	d439      	bmi.n	800d188 <_printf_float+0x370>
 800d114:	9a08      	ldr	r2, [sp, #32]
 800d116:	9b04      	ldr	r3, [sp, #16]
 800d118:	9907      	ldr	r1, [sp, #28]
 800d11a:	1ad3      	subs	r3, r2, r3
 800d11c:	eba2 0901 	sub.w	r9, r2, r1
 800d120:	4599      	cmp	r9, r3
 800d122:	bfa8      	it	ge
 800d124:	4699      	movge	r9, r3
 800d126:	f1b9 0f00 	cmp.w	r9, #0
 800d12a:	dc35      	bgt.n	800d198 <_printf_float+0x380>
 800d12c:	f04f 0800 	mov.w	r8, #0
 800d130:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d134:	f104 0a1a 	add.w	sl, r4, #26
 800d138:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d13c:	1a9b      	subs	r3, r3, r2
 800d13e:	eba3 0309 	sub.w	r3, r3, r9
 800d142:	4543      	cmp	r3, r8
 800d144:	f77f af75 	ble.w	800d032 <_printf_float+0x21a>
 800d148:	2301      	movs	r3, #1
 800d14a:	4652      	mov	r2, sl
 800d14c:	4631      	mov	r1, r6
 800d14e:	4628      	mov	r0, r5
 800d150:	47b8      	blx	r7
 800d152:	3001      	adds	r0, #1
 800d154:	f43f aeae 	beq.w	800ceb4 <_printf_float+0x9c>
 800d158:	f108 0801 	add.w	r8, r8, #1
 800d15c:	e7ec      	b.n	800d138 <_printf_float+0x320>
 800d15e:	4613      	mov	r3, r2
 800d160:	4631      	mov	r1, r6
 800d162:	4642      	mov	r2, r8
 800d164:	4628      	mov	r0, r5
 800d166:	47b8      	blx	r7
 800d168:	3001      	adds	r0, #1
 800d16a:	d1bf      	bne.n	800d0ec <_printf_float+0x2d4>
 800d16c:	e6a2      	b.n	800ceb4 <_printf_float+0x9c>
 800d16e:	2301      	movs	r3, #1
 800d170:	4631      	mov	r1, r6
 800d172:	4628      	mov	r0, r5
 800d174:	9204      	str	r2, [sp, #16]
 800d176:	47b8      	blx	r7
 800d178:	3001      	adds	r0, #1
 800d17a:	f43f ae9b 	beq.w	800ceb4 <_printf_float+0x9c>
 800d17e:	9b05      	ldr	r3, [sp, #20]
 800d180:	9a04      	ldr	r2, [sp, #16]
 800d182:	3301      	adds	r3, #1
 800d184:	9305      	str	r3, [sp, #20]
 800d186:	e7b7      	b.n	800d0f8 <_printf_float+0x2e0>
 800d188:	4653      	mov	r3, sl
 800d18a:	465a      	mov	r2, fp
 800d18c:	4631      	mov	r1, r6
 800d18e:	4628      	mov	r0, r5
 800d190:	47b8      	blx	r7
 800d192:	3001      	adds	r0, #1
 800d194:	d1be      	bne.n	800d114 <_printf_float+0x2fc>
 800d196:	e68d      	b.n	800ceb4 <_printf_float+0x9c>
 800d198:	9a04      	ldr	r2, [sp, #16]
 800d19a:	464b      	mov	r3, r9
 800d19c:	4442      	add	r2, r8
 800d19e:	4631      	mov	r1, r6
 800d1a0:	4628      	mov	r0, r5
 800d1a2:	47b8      	blx	r7
 800d1a4:	3001      	adds	r0, #1
 800d1a6:	d1c1      	bne.n	800d12c <_printf_float+0x314>
 800d1a8:	e684      	b.n	800ceb4 <_printf_float+0x9c>
 800d1aa:	9a08      	ldr	r2, [sp, #32]
 800d1ac:	2a01      	cmp	r2, #1
 800d1ae:	dc01      	bgt.n	800d1b4 <_printf_float+0x39c>
 800d1b0:	07db      	lsls	r3, r3, #31
 800d1b2:	d537      	bpl.n	800d224 <_printf_float+0x40c>
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	4642      	mov	r2, r8
 800d1b8:	4631      	mov	r1, r6
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	47b8      	blx	r7
 800d1be:	3001      	adds	r0, #1
 800d1c0:	f43f ae78 	beq.w	800ceb4 <_printf_float+0x9c>
 800d1c4:	4653      	mov	r3, sl
 800d1c6:	465a      	mov	r2, fp
 800d1c8:	4631      	mov	r1, r6
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	47b8      	blx	r7
 800d1ce:	3001      	adds	r0, #1
 800d1d0:	f43f ae70 	beq.w	800ceb4 <_printf_float+0x9c>
 800d1d4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d1d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e0:	d01b      	beq.n	800d21a <_printf_float+0x402>
 800d1e2:	9b08      	ldr	r3, [sp, #32]
 800d1e4:	f108 0201 	add.w	r2, r8, #1
 800d1e8:	3b01      	subs	r3, #1
 800d1ea:	4631      	mov	r1, r6
 800d1ec:	4628      	mov	r0, r5
 800d1ee:	47b8      	blx	r7
 800d1f0:	3001      	adds	r0, #1
 800d1f2:	d10e      	bne.n	800d212 <_printf_float+0x3fa>
 800d1f4:	e65e      	b.n	800ceb4 <_printf_float+0x9c>
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	464a      	mov	r2, r9
 800d1fa:	4631      	mov	r1, r6
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	47b8      	blx	r7
 800d200:	3001      	adds	r0, #1
 800d202:	f43f ae57 	beq.w	800ceb4 <_printf_float+0x9c>
 800d206:	f108 0801 	add.w	r8, r8, #1
 800d20a:	9b08      	ldr	r3, [sp, #32]
 800d20c:	3b01      	subs	r3, #1
 800d20e:	4543      	cmp	r3, r8
 800d210:	dcf1      	bgt.n	800d1f6 <_printf_float+0x3de>
 800d212:	9b04      	ldr	r3, [sp, #16]
 800d214:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d218:	e6db      	b.n	800cfd2 <_printf_float+0x1ba>
 800d21a:	f04f 0800 	mov.w	r8, #0
 800d21e:	f104 091a 	add.w	r9, r4, #26
 800d222:	e7f2      	b.n	800d20a <_printf_float+0x3f2>
 800d224:	2301      	movs	r3, #1
 800d226:	4642      	mov	r2, r8
 800d228:	e7df      	b.n	800d1ea <_printf_float+0x3d2>
 800d22a:	2301      	movs	r3, #1
 800d22c:	464a      	mov	r2, r9
 800d22e:	4631      	mov	r1, r6
 800d230:	4628      	mov	r0, r5
 800d232:	47b8      	blx	r7
 800d234:	3001      	adds	r0, #1
 800d236:	f43f ae3d 	beq.w	800ceb4 <_printf_float+0x9c>
 800d23a:	f108 0801 	add.w	r8, r8, #1
 800d23e:	68e3      	ldr	r3, [r4, #12]
 800d240:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d242:	1a5b      	subs	r3, r3, r1
 800d244:	4543      	cmp	r3, r8
 800d246:	dcf0      	bgt.n	800d22a <_printf_float+0x412>
 800d248:	e6f7      	b.n	800d03a <_printf_float+0x222>
 800d24a:	f04f 0800 	mov.w	r8, #0
 800d24e:	f104 0919 	add.w	r9, r4, #25
 800d252:	e7f4      	b.n	800d23e <_printf_float+0x426>

0800d254 <_printf_common>:
 800d254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d258:	4616      	mov	r6, r2
 800d25a:	4699      	mov	r9, r3
 800d25c:	688a      	ldr	r2, [r1, #8]
 800d25e:	690b      	ldr	r3, [r1, #16]
 800d260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d264:	4293      	cmp	r3, r2
 800d266:	bfb8      	it	lt
 800d268:	4613      	movlt	r3, r2
 800d26a:	6033      	str	r3, [r6, #0]
 800d26c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d270:	4607      	mov	r7, r0
 800d272:	460c      	mov	r4, r1
 800d274:	b10a      	cbz	r2, 800d27a <_printf_common+0x26>
 800d276:	3301      	adds	r3, #1
 800d278:	6033      	str	r3, [r6, #0]
 800d27a:	6823      	ldr	r3, [r4, #0]
 800d27c:	0699      	lsls	r1, r3, #26
 800d27e:	bf42      	ittt	mi
 800d280:	6833      	ldrmi	r3, [r6, #0]
 800d282:	3302      	addmi	r3, #2
 800d284:	6033      	strmi	r3, [r6, #0]
 800d286:	6825      	ldr	r5, [r4, #0]
 800d288:	f015 0506 	ands.w	r5, r5, #6
 800d28c:	d106      	bne.n	800d29c <_printf_common+0x48>
 800d28e:	f104 0a19 	add.w	sl, r4, #25
 800d292:	68e3      	ldr	r3, [r4, #12]
 800d294:	6832      	ldr	r2, [r6, #0]
 800d296:	1a9b      	subs	r3, r3, r2
 800d298:	42ab      	cmp	r3, r5
 800d29a:	dc26      	bgt.n	800d2ea <_printf_common+0x96>
 800d29c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d2a0:	1e13      	subs	r3, r2, #0
 800d2a2:	6822      	ldr	r2, [r4, #0]
 800d2a4:	bf18      	it	ne
 800d2a6:	2301      	movne	r3, #1
 800d2a8:	0692      	lsls	r2, r2, #26
 800d2aa:	d42b      	bmi.n	800d304 <_printf_common+0xb0>
 800d2ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d2b0:	4649      	mov	r1, r9
 800d2b2:	4638      	mov	r0, r7
 800d2b4:	47c0      	blx	r8
 800d2b6:	3001      	adds	r0, #1
 800d2b8:	d01e      	beq.n	800d2f8 <_printf_common+0xa4>
 800d2ba:	6823      	ldr	r3, [r4, #0]
 800d2bc:	68e5      	ldr	r5, [r4, #12]
 800d2be:	6832      	ldr	r2, [r6, #0]
 800d2c0:	f003 0306 	and.w	r3, r3, #6
 800d2c4:	2b04      	cmp	r3, #4
 800d2c6:	bf08      	it	eq
 800d2c8:	1aad      	subeq	r5, r5, r2
 800d2ca:	68a3      	ldr	r3, [r4, #8]
 800d2cc:	6922      	ldr	r2, [r4, #16]
 800d2ce:	bf0c      	ite	eq
 800d2d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2d4:	2500      	movne	r5, #0
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	bfc4      	itt	gt
 800d2da:	1a9b      	subgt	r3, r3, r2
 800d2dc:	18ed      	addgt	r5, r5, r3
 800d2de:	2600      	movs	r6, #0
 800d2e0:	341a      	adds	r4, #26
 800d2e2:	42b5      	cmp	r5, r6
 800d2e4:	d11a      	bne.n	800d31c <_printf_common+0xc8>
 800d2e6:	2000      	movs	r0, #0
 800d2e8:	e008      	b.n	800d2fc <_printf_common+0xa8>
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	4652      	mov	r2, sl
 800d2ee:	4649      	mov	r1, r9
 800d2f0:	4638      	mov	r0, r7
 800d2f2:	47c0      	blx	r8
 800d2f4:	3001      	adds	r0, #1
 800d2f6:	d103      	bne.n	800d300 <_printf_common+0xac>
 800d2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d300:	3501      	adds	r5, #1
 800d302:	e7c6      	b.n	800d292 <_printf_common+0x3e>
 800d304:	18e1      	adds	r1, r4, r3
 800d306:	1c5a      	adds	r2, r3, #1
 800d308:	2030      	movs	r0, #48	; 0x30
 800d30a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d30e:	4422      	add	r2, r4
 800d310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d318:	3302      	adds	r3, #2
 800d31a:	e7c7      	b.n	800d2ac <_printf_common+0x58>
 800d31c:	2301      	movs	r3, #1
 800d31e:	4622      	mov	r2, r4
 800d320:	4649      	mov	r1, r9
 800d322:	4638      	mov	r0, r7
 800d324:	47c0      	blx	r8
 800d326:	3001      	adds	r0, #1
 800d328:	d0e6      	beq.n	800d2f8 <_printf_common+0xa4>
 800d32a:	3601      	adds	r6, #1
 800d32c:	e7d9      	b.n	800d2e2 <_printf_common+0x8e>
	...

0800d330 <_printf_i>:
 800d330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d334:	460c      	mov	r4, r1
 800d336:	4691      	mov	r9, r2
 800d338:	7e27      	ldrb	r7, [r4, #24]
 800d33a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d33c:	2f78      	cmp	r7, #120	; 0x78
 800d33e:	4680      	mov	r8, r0
 800d340:	469a      	mov	sl, r3
 800d342:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d346:	d807      	bhi.n	800d358 <_printf_i+0x28>
 800d348:	2f62      	cmp	r7, #98	; 0x62
 800d34a:	d80a      	bhi.n	800d362 <_printf_i+0x32>
 800d34c:	2f00      	cmp	r7, #0
 800d34e:	f000 80d8 	beq.w	800d502 <_printf_i+0x1d2>
 800d352:	2f58      	cmp	r7, #88	; 0x58
 800d354:	f000 80a3 	beq.w	800d49e <_printf_i+0x16e>
 800d358:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d35c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d360:	e03a      	b.n	800d3d8 <_printf_i+0xa8>
 800d362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d366:	2b15      	cmp	r3, #21
 800d368:	d8f6      	bhi.n	800d358 <_printf_i+0x28>
 800d36a:	a001      	add	r0, pc, #4	; (adr r0, 800d370 <_printf_i+0x40>)
 800d36c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d370:	0800d3c9 	.word	0x0800d3c9
 800d374:	0800d3dd 	.word	0x0800d3dd
 800d378:	0800d359 	.word	0x0800d359
 800d37c:	0800d359 	.word	0x0800d359
 800d380:	0800d359 	.word	0x0800d359
 800d384:	0800d359 	.word	0x0800d359
 800d388:	0800d3dd 	.word	0x0800d3dd
 800d38c:	0800d359 	.word	0x0800d359
 800d390:	0800d359 	.word	0x0800d359
 800d394:	0800d359 	.word	0x0800d359
 800d398:	0800d359 	.word	0x0800d359
 800d39c:	0800d4e9 	.word	0x0800d4e9
 800d3a0:	0800d40d 	.word	0x0800d40d
 800d3a4:	0800d4cb 	.word	0x0800d4cb
 800d3a8:	0800d359 	.word	0x0800d359
 800d3ac:	0800d359 	.word	0x0800d359
 800d3b0:	0800d50b 	.word	0x0800d50b
 800d3b4:	0800d359 	.word	0x0800d359
 800d3b8:	0800d40d 	.word	0x0800d40d
 800d3bc:	0800d359 	.word	0x0800d359
 800d3c0:	0800d359 	.word	0x0800d359
 800d3c4:	0800d4d3 	.word	0x0800d4d3
 800d3c8:	680b      	ldr	r3, [r1, #0]
 800d3ca:	1d1a      	adds	r2, r3, #4
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	600a      	str	r2, [r1, #0]
 800d3d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d3d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3d8:	2301      	movs	r3, #1
 800d3da:	e0a3      	b.n	800d524 <_printf_i+0x1f4>
 800d3dc:	6825      	ldr	r5, [r4, #0]
 800d3de:	6808      	ldr	r0, [r1, #0]
 800d3e0:	062e      	lsls	r6, r5, #24
 800d3e2:	f100 0304 	add.w	r3, r0, #4
 800d3e6:	d50a      	bpl.n	800d3fe <_printf_i+0xce>
 800d3e8:	6805      	ldr	r5, [r0, #0]
 800d3ea:	600b      	str	r3, [r1, #0]
 800d3ec:	2d00      	cmp	r5, #0
 800d3ee:	da03      	bge.n	800d3f8 <_printf_i+0xc8>
 800d3f0:	232d      	movs	r3, #45	; 0x2d
 800d3f2:	426d      	negs	r5, r5
 800d3f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3f8:	485e      	ldr	r0, [pc, #376]	; (800d574 <_printf_i+0x244>)
 800d3fa:	230a      	movs	r3, #10
 800d3fc:	e019      	b.n	800d432 <_printf_i+0x102>
 800d3fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d402:	6805      	ldr	r5, [r0, #0]
 800d404:	600b      	str	r3, [r1, #0]
 800d406:	bf18      	it	ne
 800d408:	b22d      	sxthne	r5, r5
 800d40a:	e7ef      	b.n	800d3ec <_printf_i+0xbc>
 800d40c:	680b      	ldr	r3, [r1, #0]
 800d40e:	6825      	ldr	r5, [r4, #0]
 800d410:	1d18      	adds	r0, r3, #4
 800d412:	6008      	str	r0, [r1, #0]
 800d414:	0628      	lsls	r0, r5, #24
 800d416:	d501      	bpl.n	800d41c <_printf_i+0xec>
 800d418:	681d      	ldr	r5, [r3, #0]
 800d41a:	e002      	b.n	800d422 <_printf_i+0xf2>
 800d41c:	0669      	lsls	r1, r5, #25
 800d41e:	d5fb      	bpl.n	800d418 <_printf_i+0xe8>
 800d420:	881d      	ldrh	r5, [r3, #0]
 800d422:	4854      	ldr	r0, [pc, #336]	; (800d574 <_printf_i+0x244>)
 800d424:	2f6f      	cmp	r7, #111	; 0x6f
 800d426:	bf0c      	ite	eq
 800d428:	2308      	moveq	r3, #8
 800d42a:	230a      	movne	r3, #10
 800d42c:	2100      	movs	r1, #0
 800d42e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d432:	6866      	ldr	r6, [r4, #4]
 800d434:	60a6      	str	r6, [r4, #8]
 800d436:	2e00      	cmp	r6, #0
 800d438:	bfa2      	ittt	ge
 800d43a:	6821      	ldrge	r1, [r4, #0]
 800d43c:	f021 0104 	bicge.w	r1, r1, #4
 800d440:	6021      	strge	r1, [r4, #0]
 800d442:	b90d      	cbnz	r5, 800d448 <_printf_i+0x118>
 800d444:	2e00      	cmp	r6, #0
 800d446:	d04d      	beq.n	800d4e4 <_printf_i+0x1b4>
 800d448:	4616      	mov	r6, r2
 800d44a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d44e:	fb03 5711 	mls	r7, r3, r1, r5
 800d452:	5dc7      	ldrb	r7, [r0, r7]
 800d454:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d458:	462f      	mov	r7, r5
 800d45a:	42bb      	cmp	r3, r7
 800d45c:	460d      	mov	r5, r1
 800d45e:	d9f4      	bls.n	800d44a <_printf_i+0x11a>
 800d460:	2b08      	cmp	r3, #8
 800d462:	d10b      	bne.n	800d47c <_printf_i+0x14c>
 800d464:	6823      	ldr	r3, [r4, #0]
 800d466:	07df      	lsls	r7, r3, #31
 800d468:	d508      	bpl.n	800d47c <_printf_i+0x14c>
 800d46a:	6923      	ldr	r3, [r4, #16]
 800d46c:	6861      	ldr	r1, [r4, #4]
 800d46e:	4299      	cmp	r1, r3
 800d470:	bfde      	ittt	le
 800d472:	2330      	movle	r3, #48	; 0x30
 800d474:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d478:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d47c:	1b92      	subs	r2, r2, r6
 800d47e:	6122      	str	r2, [r4, #16]
 800d480:	f8cd a000 	str.w	sl, [sp]
 800d484:	464b      	mov	r3, r9
 800d486:	aa03      	add	r2, sp, #12
 800d488:	4621      	mov	r1, r4
 800d48a:	4640      	mov	r0, r8
 800d48c:	f7ff fee2 	bl	800d254 <_printf_common>
 800d490:	3001      	adds	r0, #1
 800d492:	d14c      	bne.n	800d52e <_printf_i+0x1fe>
 800d494:	f04f 30ff 	mov.w	r0, #4294967295
 800d498:	b004      	add	sp, #16
 800d49a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d49e:	4835      	ldr	r0, [pc, #212]	; (800d574 <_printf_i+0x244>)
 800d4a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	680e      	ldr	r6, [r1, #0]
 800d4a8:	061f      	lsls	r7, r3, #24
 800d4aa:	f856 5b04 	ldr.w	r5, [r6], #4
 800d4ae:	600e      	str	r6, [r1, #0]
 800d4b0:	d514      	bpl.n	800d4dc <_printf_i+0x1ac>
 800d4b2:	07d9      	lsls	r1, r3, #31
 800d4b4:	bf44      	itt	mi
 800d4b6:	f043 0320 	orrmi.w	r3, r3, #32
 800d4ba:	6023      	strmi	r3, [r4, #0]
 800d4bc:	b91d      	cbnz	r5, 800d4c6 <_printf_i+0x196>
 800d4be:	6823      	ldr	r3, [r4, #0]
 800d4c0:	f023 0320 	bic.w	r3, r3, #32
 800d4c4:	6023      	str	r3, [r4, #0]
 800d4c6:	2310      	movs	r3, #16
 800d4c8:	e7b0      	b.n	800d42c <_printf_i+0xfc>
 800d4ca:	6823      	ldr	r3, [r4, #0]
 800d4cc:	f043 0320 	orr.w	r3, r3, #32
 800d4d0:	6023      	str	r3, [r4, #0]
 800d4d2:	2378      	movs	r3, #120	; 0x78
 800d4d4:	4828      	ldr	r0, [pc, #160]	; (800d578 <_printf_i+0x248>)
 800d4d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d4da:	e7e3      	b.n	800d4a4 <_printf_i+0x174>
 800d4dc:	065e      	lsls	r6, r3, #25
 800d4de:	bf48      	it	mi
 800d4e0:	b2ad      	uxthmi	r5, r5
 800d4e2:	e7e6      	b.n	800d4b2 <_printf_i+0x182>
 800d4e4:	4616      	mov	r6, r2
 800d4e6:	e7bb      	b.n	800d460 <_printf_i+0x130>
 800d4e8:	680b      	ldr	r3, [r1, #0]
 800d4ea:	6826      	ldr	r6, [r4, #0]
 800d4ec:	6960      	ldr	r0, [r4, #20]
 800d4ee:	1d1d      	adds	r5, r3, #4
 800d4f0:	600d      	str	r5, [r1, #0]
 800d4f2:	0635      	lsls	r5, r6, #24
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	d501      	bpl.n	800d4fc <_printf_i+0x1cc>
 800d4f8:	6018      	str	r0, [r3, #0]
 800d4fa:	e002      	b.n	800d502 <_printf_i+0x1d2>
 800d4fc:	0671      	lsls	r1, r6, #25
 800d4fe:	d5fb      	bpl.n	800d4f8 <_printf_i+0x1c8>
 800d500:	8018      	strh	r0, [r3, #0]
 800d502:	2300      	movs	r3, #0
 800d504:	6123      	str	r3, [r4, #16]
 800d506:	4616      	mov	r6, r2
 800d508:	e7ba      	b.n	800d480 <_printf_i+0x150>
 800d50a:	680b      	ldr	r3, [r1, #0]
 800d50c:	1d1a      	adds	r2, r3, #4
 800d50e:	600a      	str	r2, [r1, #0]
 800d510:	681e      	ldr	r6, [r3, #0]
 800d512:	6862      	ldr	r2, [r4, #4]
 800d514:	2100      	movs	r1, #0
 800d516:	4630      	mov	r0, r6
 800d518:	f7f2 feea 	bl	80002f0 <memchr>
 800d51c:	b108      	cbz	r0, 800d522 <_printf_i+0x1f2>
 800d51e:	1b80      	subs	r0, r0, r6
 800d520:	6060      	str	r0, [r4, #4]
 800d522:	6863      	ldr	r3, [r4, #4]
 800d524:	6123      	str	r3, [r4, #16]
 800d526:	2300      	movs	r3, #0
 800d528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d52c:	e7a8      	b.n	800d480 <_printf_i+0x150>
 800d52e:	6923      	ldr	r3, [r4, #16]
 800d530:	4632      	mov	r2, r6
 800d532:	4649      	mov	r1, r9
 800d534:	4640      	mov	r0, r8
 800d536:	47d0      	blx	sl
 800d538:	3001      	adds	r0, #1
 800d53a:	d0ab      	beq.n	800d494 <_printf_i+0x164>
 800d53c:	6823      	ldr	r3, [r4, #0]
 800d53e:	079b      	lsls	r3, r3, #30
 800d540:	d413      	bmi.n	800d56a <_printf_i+0x23a>
 800d542:	68e0      	ldr	r0, [r4, #12]
 800d544:	9b03      	ldr	r3, [sp, #12]
 800d546:	4298      	cmp	r0, r3
 800d548:	bfb8      	it	lt
 800d54a:	4618      	movlt	r0, r3
 800d54c:	e7a4      	b.n	800d498 <_printf_i+0x168>
 800d54e:	2301      	movs	r3, #1
 800d550:	4632      	mov	r2, r6
 800d552:	4649      	mov	r1, r9
 800d554:	4640      	mov	r0, r8
 800d556:	47d0      	blx	sl
 800d558:	3001      	adds	r0, #1
 800d55a:	d09b      	beq.n	800d494 <_printf_i+0x164>
 800d55c:	3501      	adds	r5, #1
 800d55e:	68e3      	ldr	r3, [r4, #12]
 800d560:	9903      	ldr	r1, [sp, #12]
 800d562:	1a5b      	subs	r3, r3, r1
 800d564:	42ab      	cmp	r3, r5
 800d566:	dcf2      	bgt.n	800d54e <_printf_i+0x21e>
 800d568:	e7eb      	b.n	800d542 <_printf_i+0x212>
 800d56a:	2500      	movs	r5, #0
 800d56c:	f104 0619 	add.w	r6, r4, #25
 800d570:	e7f5      	b.n	800d55e <_printf_i+0x22e>
 800d572:	bf00      	nop
 800d574:	0800f7f6 	.word	0x0800f7f6
 800d578:	0800f807 	.word	0x0800f807

0800d57c <quorem>:
 800d57c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d580:	6903      	ldr	r3, [r0, #16]
 800d582:	690c      	ldr	r4, [r1, #16]
 800d584:	42a3      	cmp	r3, r4
 800d586:	4607      	mov	r7, r0
 800d588:	f2c0 8081 	blt.w	800d68e <quorem+0x112>
 800d58c:	3c01      	subs	r4, #1
 800d58e:	f101 0814 	add.w	r8, r1, #20
 800d592:	f100 0514 	add.w	r5, r0, #20
 800d596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d59a:	9301      	str	r3, [sp, #4]
 800d59c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d5a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d5ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d5b0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d5b4:	d331      	bcc.n	800d61a <quorem+0x9e>
 800d5b6:	f04f 0e00 	mov.w	lr, #0
 800d5ba:	4640      	mov	r0, r8
 800d5bc:	46ac      	mov	ip, r5
 800d5be:	46f2      	mov	sl, lr
 800d5c0:	f850 2b04 	ldr.w	r2, [r0], #4
 800d5c4:	b293      	uxth	r3, r2
 800d5c6:	fb06 e303 	mla	r3, r6, r3, lr
 800d5ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d5ce:	b29b      	uxth	r3, r3
 800d5d0:	ebaa 0303 	sub.w	r3, sl, r3
 800d5d4:	0c12      	lsrs	r2, r2, #16
 800d5d6:	f8dc a000 	ldr.w	sl, [ip]
 800d5da:	fb06 e202 	mla	r2, r6, r2, lr
 800d5de:	fa13 f38a 	uxtah	r3, r3, sl
 800d5e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d5e6:	fa1f fa82 	uxth.w	sl, r2
 800d5ea:	f8dc 2000 	ldr.w	r2, [ip]
 800d5ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d5f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5fc:	4581      	cmp	r9, r0
 800d5fe:	f84c 3b04 	str.w	r3, [ip], #4
 800d602:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d606:	d2db      	bcs.n	800d5c0 <quorem+0x44>
 800d608:	f855 300b 	ldr.w	r3, [r5, fp]
 800d60c:	b92b      	cbnz	r3, 800d61a <quorem+0x9e>
 800d60e:	9b01      	ldr	r3, [sp, #4]
 800d610:	3b04      	subs	r3, #4
 800d612:	429d      	cmp	r5, r3
 800d614:	461a      	mov	r2, r3
 800d616:	d32e      	bcc.n	800d676 <quorem+0xfa>
 800d618:	613c      	str	r4, [r7, #16]
 800d61a:	4638      	mov	r0, r7
 800d61c:	f001 f856 	bl	800e6cc <__mcmp>
 800d620:	2800      	cmp	r0, #0
 800d622:	db24      	blt.n	800d66e <quorem+0xf2>
 800d624:	3601      	adds	r6, #1
 800d626:	4628      	mov	r0, r5
 800d628:	f04f 0c00 	mov.w	ip, #0
 800d62c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d630:	f8d0 e000 	ldr.w	lr, [r0]
 800d634:	b293      	uxth	r3, r2
 800d636:	ebac 0303 	sub.w	r3, ip, r3
 800d63a:	0c12      	lsrs	r2, r2, #16
 800d63c:	fa13 f38e 	uxtah	r3, r3, lr
 800d640:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d648:	b29b      	uxth	r3, r3
 800d64a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d64e:	45c1      	cmp	r9, r8
 800d650:	f840 3b04 	str.w	r3, [r0], #4
 800d654:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d658:	d2e8      	bcs.n	800d62c <quorem+0xb0>
 800d65a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d65e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d662:	b922      	cbnz	r2, 800d66e <quorem+0xf2>
 800d664:	3b04      	subs	r3, #4
 800d666:	429d      	cmp	r5, r3
 800d668:	461a      	mov	r2, r3
 800d66a:	d30a      	bcc.n	800d682 <quorem+0x106>
 800d66c:	613c      	str	r4, [r7, #16]
 800d66e:	4630      	mov	r0, r6
 800d670:	b003      	add	sp, #12
 800d672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d676:	6812      	ldr	r2, [r2, #0]
 800d678:	3b04      	subs	r3, #4
 800d67a:	2a00      	cmp	r2, #0
 800d67c:	d1cc      	bne.n	800d618 <quorem+0x9c>
 800d67e:	3c01      	subs	r4, #1
 800d680:	e7c7      	b.n	800d612 <quorem+0x96>
 800d682:	6812      	ldr	r2, [r2, #0]
 800d684:	3b04      	subs	r3, #4
 800d686:	2a00      	cmp	r2, #0
 800d688:	d1f0      	bne.n	800d66c <quorem+0xf0>
 800d68a:	3c01      	subs	r4, #1
 800d68c:	e7eb      	b.n	800d666 <quorem+0xea>
 800d68e:	2000      	movs	r0, #0
 800d690:	e7ee      	b.n	800d670 <quorem+0xf4>
 800d692:	0000      	movs	r0, r0
 800d694:	0000      	movs	r0, r0
	...

0800d698 <_dtoa_r>:
 800d698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d69c:	ec59 8b10 	vmov	r8, r9, d0
 800d6a0:	b095      	sub	sp, #84	; 0x54
 800d6a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d6a4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d6a6:	9107      	str	r1, [sp, #28]
 800d6a8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d6ac:	4606      	mov	r6, r0
 800d6ae:	9209      	str	r2, [sp, #36]	; 0x24
 800d6b0:	9310      	str	r3, [sp, #64]	; 0x40
 800d6b2:	b975      	cbnz	r5, 800d6d2 <_dtoa_r+0x3a>
 800d6b4:	2010      	movs	r0, #16
 800d6b6:	f000 fd75 	bl	800e1a4 <malloc>
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	6270      	str	r0, [r6, #36]	; 0x24
 800d6be:	b920      	cbnz	r0, 800d6ca <_dtoa_r+0x32>
 800d6c0:	4bab      	ldr	r3, [pc, #684]	; (800d970 <_dtoa_r+0x2d8>)
 800d6c2:	21ea      	movs	r1, #234	; 0xea
 800d6c4:	48ab      	ldr	r0, [pc, #684]	; (800d974 <_dtoa_r+0x2dc>)
 800d6c6:	f001 f9cb 	bl	800ea60 <__assert_func>
 800d6ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d6ce:	6005      	str	r5, [r0, #0]
 800d6d0:	60c5      	str	r5, [r0, #12]
 800d6d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d6d4:	6819      	ldr	r1, [r3, #0]
 800d6d6:	b151      	cbz	r1, 800d6ee <_dtoa_r+0x56>
 800d6d8:	685a      	ldr	r2, [r3, #4]
 800d6da:	604a      	str	r2, [r1, #4]
 800d6dc:	2301      	movs	r3, #1
 800d6de:	4093      	lsls	r3, r2
 800d6e0:	608b      	str	r3, [r1, #8]
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	f000 fdb4 	bl	800e250 <_Bfree>
 800d6e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	601a      	str	r2, [r3, #0]
 800d6ee:	f1b9 0300 	subs.w	r3, r9, #0
 800d6f2:	bfbb      	ittet	lt
 800d6f4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d6f8:	9303      	strlt	r3, [sp, #12]
 800d6fa:	2300      	movge	r3, #0
 800d6fc:	2201      	movlt	r2, #1
 800d6fe:	bfac      	ite	ge
 800d700:	6023      	strge	r3, [r4, #0]
 800d702:	6022      	strlt	r2, [r4, #0]
 800d704:	4b9c      	ldr	r3, [pc, #624]	; (800d978 <_dtoa_r+0x2e0>)
 800d706:	9c03      	ldr	r4, [sp, #12]
 800d708:	43a3      	bics	r3, r4
 800d70a:	d11a      	bne.n	800d742 <_dtoa_r+0xaa>
 800d70c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d70e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d712:	6013      	str	r3, [r2, #0]
 800d714:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d718:	ea53 0308 	orrs.w	r3, r3, r8
 800d71c:	f000 8512 	beq.w	800e144 <_dtoa_r+0xaac>
 800d720:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d722:	b953      	cbnz	r3, 800d73a <_dtoa_r+0xa2>
 800d724:	4b95      	ldr	r3, [pc, #596]	; (800d97c <_dtoa_r+0x2e4>)
 800d726:	e01f      	b.n	800d768 <_dtoa_r+0xd0>
 800d728:	4b95      	ldr	r3, [pc, #596]	; (800d980 <_dtoa_r+0x2e8>)
 800d72a:	9300      	str	r3, [sp, #0]
 800d72c:	3308      	adds	r3, #8
 800d72e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d730:	6013      	str	r3, [r2, #0]
 800d732:	9800      	ldr	r0, [sp, #0]
 800d734:	b015      	add	sp, #84	; 0x54
 800d736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d73a:	4b90      	ldr	r3, [pc, #576]	; (800d97c <_dtoa_r+0x2e4>)
 800d73c:	9300      	str	r3, [sp, #0]
 800d73e:	3303      	adds	r3, #3
 800d740:	e7f5      	b.n	800d72e <_dtoa_r+0x96>
 800d742:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d746:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d74e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d752:	d10b      	bne.n	800d76c <_dtoa_r+0xd4>
 800d754:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d756:	2301      	movs	r3, #1
 800d758:	6013      	str	r3, [r2, #0]
 800d75a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f000 84ee 	beq.w	800e13e <_dtoa_r+0xaa6>
 800d762:	4888      	ldr	r0, [pc, #544]	; (800d984 <_dtoa_r+0x2ec>)
 800d764:	6018      	str	r0, [r3, #0]
 800d766:	1e43      	subs	r3, r0, #1
 800d768:	9300      	str	r3, [sp, #0]
 800d76a:	e7e2      	b.n	800d732 <_dtoa_r+0x9a>
 800d76c:	a913      	add	r1, sp, #76	; 0x4c
 800d76e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d772:	aa12      	add	r2, sp, #72	; 0x48
 800d774:	4630      	mov	r0, r6
 800d776:	f001 f84d 	bl	800e814 <__d2b>
 800d77a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d77e:	4605      	mov	r5, r0
 800d780:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d782:	2900      	cmp	r1, #0
 800d784:	d047      	beq.n	800d816 <_dtoa_r+0x17e>
 800d786:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d788:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d78c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d790:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d794:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d798:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d79c:	2400      	movs	r4, #0
 800d79e:	ec43 2b16 	vmov	d6, r2, r3
 800d7a2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d7a6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d958 <_dtoa_r+0x2c0>
 800d7aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d7ae:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d960 <_dtoa_r+0x2c8>
 800d7b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d7b6:	eeb0 7b46 	vmov.f64	d7, d6
 800d7ba:	ee06 1a90 	vmov	s13, r1
 800d7be:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d7c2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d968 <_dtoa_r+0x2d0>
 800d7c6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d7ca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d7ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d6:	ee16 ba90 	vmov	fp, s13
 800d7da:	9411      	str	r4, [sp, #68]	; 0x44
 800d7dc:	d508      	bpl.n	800d7f0 <_dtoa_r+0x158>
 800d7de:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d7e2:	eeb4 6b47 	vcmp.f64	d6, d7
 800d7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ea:	bf18      	it	ne
 800d7ec:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d7f0:	f1bb 0f16 	cmp.w	fp, #22
 800d7f4:	d832      	bhi.n	800d85c <_dtoa_r+0x1c4>
 800d7f6:	4b64      	ldr	r3, [pc, #400]	; (800d988 <_dtoa_r+0x2f0>)
 800d7f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d7fc:	ed93 7b00 	vldr	d7, [r3]
 800d800:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d804:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d80c:	d501      	bpl.n	800d812 <_dtoa_r+0x17a>
 800d80e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d812:	2300      	movs	r3, #0
 800d814:	e023      	b.n	800d85e <_dtoa_r+0x1c6>
 800d816:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d818:	4401      	add	r1, r0
 800d81a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d81e:	2b20      	cmp	r3, #32
 800d820:	bfc3      	ittte	gt
 800d822:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d826:	fa04 f303 	lslgt.w	r3, r4, r3
 800d82a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d82e:	f1c3 0320 	rsble	r3, r3, #32
 800d832:	bfc6      	itte	gt
 800d834:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d838:	ea43 0308 	orrgt.w	r3, r3, r8
 800d83c:	fa08 f303 	lslle.w	r3, r8, r3
 800d840:	ee07 3a90 	vmov	s15, r3
 800d844:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d848:	3901      	subs	r1, #1
 800d84a:	ed8d 7b00 	vstr	d7, [sp]
 800d84e:	9c01      	ldr	r4, [sp, #4]
 800d850:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d854:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d858:	2401      	movs	r4, #1
 800d85a:	e7a0      	b.n	800d79e <_dtoa_r+0x106>
 800d85c:	2301      	movs	r3, #1
 800d85e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d860:	1a43      	subs	r3, r0, r1
 800d862:	1e5a      	subs	r2, r3, #1
 800d864:	bf45      	ittet	mi
 800d866:	f1c3 0301 	rsbmi	r3, r3, #1
 800d86a:	9305      	strmi	r3, [sp, #20]
 800d86c:	2300      	movpl	r3, #0
 800d86e:	2300      	movmi	r3, #0
 800d870:	9206      	str	r2, [sp, #24]
 800d872:	bf54      	ite	pl
 800d874:	9305      	strpl	r3, [sp, #20]
 800d876:	9306      	strmi	r3, [sp, #24]
 800d878:	f1bb 0f00 	cmp.w	fp, #0
 800d87c:	db18      	blt.n	800d8b0 <_dtoa_r+0x218>
 800d87e:	9b06      	ldr	r3, [sp, #24]
 800d880:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d884:	445b      	add	r3, fp
 800d886:	9306      	str	r3, [sp, #24]
 800d888:	2300      	movs	r3, #0
 800d88a:	9a07      	ldr	r2, [sp, #28]
 800d88c:	2a09      	cmp	r2, #9
 800d88e:	d849      	bhi.n	800d924 <_dtoa_r+0x28c>
 800d890:	2a05      	cmp	r2, #5
 800d892:	bfc4      	itt	gt
 800d894:	3a04      	subgt	r2, #4
 800d896:	9207      	strgt	r2, [sp, #28]
 800d898:	9a07      	ldr	r2, [sp, #28]
 800d89a:	f1a2 0202 	sub.w	r2, r2, #2
 800d89e:	bfcc      	ite	gt
 800d8a0:	2400      	movgt	r4, #0
 800d8a2:	2401      	movle	r4, #1
 800d8a4:	2a03      	cmp	r2, #3
 800d8a6:	d848      	bhi.n	800d93a <_dtoa_r+0x2a2>
 800d8a8:	e8df f002 	tbb	[pc, r2]
 800d8ac:	3a2c2e0b 	.word	0x3a2c2e0b
 800d8b0:	9b05      	ldr	r3, [sp, #20]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	eba3 030b 	sub.w	r3, r3, fp
 800d8b8:	9305      	str	r3, [sp, #20]
 800d8ba:	920e      	str	r2, [sp, #56]	; 0x38
 800d8bc:	f1cb 0300 	rsb	r3, fp, #0
 800d8c0:	e7e3      	b.n	800d88a <_dtoa_r+0x1f2>
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	9208      	str	r2, [sp, #32]
 800d8c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8c8:	2a00      	cmp	r2, #0
 800d8ca:	dc39      	bgt.n	800d940 <_dtoa_r+0x2a8>
 800d8cc:	f04f 0a01 	mov.w	sl, #1
 800d8d0:	46d1      	mov	r9, sl
 800d8d2:	4652      	mov	r2, sl
 800d8d4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d8d8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d8da:	2100      	movs	r1, #0
 800d8dc:	6079      	str	r1, [r7, #4]
 800d8de:	2004      	movs	r0, #4
 800d8e0:	f100 0c14 	add.w	ip, r0, #20
 800d8e4:	4594      	cmp	ip, r2
 800d8e6:	6879      	ldr	r1, [r7, #4]
 800d8e8:	d92f      	bls.n	800d94a <_dtoa_r+0x2b2>
 800d8ea:	4630      	mov	r0, r6
 800d8ec:	930c      	str	r3, [sp, #48]	; 0x30
 800d8ee:	f000 fc6f 	bl	800e1d0 <_Balloc>
 800d8f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8f4:	9000      	str	r0, [sp, #0]
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	d149      	bne.n	800d990 <_dtoa_r+0x2f8>
 800d8fc:	4b23      	ldr	r3, [pc, #140]	; (800d98c <_dtoa_r+0x2f4>)
 800d8fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d902:	e6df      	b.n	800d6c4 <_dtoa_r+0x2c>
 800d904:	2201      	movs	r2, #1
 800d906:	e7dd      	b.n	800d8c4 <_dtoa_r+0x22c>
 800d908:	2200      	movs	r2, #0
 800d90a:	9208      	str	r2, [sp, #32]
 800d90c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d90e:	eb0b 0a02 	add.w	sl, fp, r2
 800d912:	f10a 0901 	add.w	r9, sl, #1
 800d916:	464a      	mov	r2, r9
 800d918:	2a01      	cmp	r2, #1
 800d91a:	bfb8      	it	lt
 800d91c:	2201      	movlt	r2, #1
 800d91e:	e7db      	b.n	800d8d8 <_dtoa_r+0x240>
 800d920:	2201      	movs	r2, #1
 800d922:	e7f2      	b.n	800d90a <_dtoa_r+0x272>
 800d924:	2401      	movs	r4, #1
 800d926:	2200      	movs	r2, #0
 800d928:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d92c:	f04f 3aff 	mov.w	sl, #4294967295
 800d930:	2100      	movs	r1, #0
 800d932:	46d1      	mov	r9, sl
 800d934:	2212      	movs	r2, #18
 800d936:	9109      	str	r1, [sp, #36]	; 0x24
 800d938:	e7ce      	b.n	800d8d8 <_dtoa_r+0x240>
 800d93a:	2201      	movs	r2, #1
 800d93c:	9208      	str	r2, [sp, #32]
 800d93e:	e7f5      	b.n	800d92c <_dtoa_r+0x294>
 800d940:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d944:	46d1      	mov	r9, sl
 800d946:	4652      	mov	r2, sl
 800d948:	e7c6      	b.n	800d8d8 <_dtoa_r+0x240>
 800d94a:	3101      	adds	r1, #1
 800d94c:	6079      	str	r1, [r7, #4]
 800d94e:	0040      	lsls	r0, r0, #1
 800d950:	e7c6      	b.n	800d8e0 <_dtoa_r+0x248>
 800d952:	bf00      	nop
 800d954:	f3af 8000 	nop.w
 800d958:	636f4361 	.word	0x636f4361
 800d95c:	3fd287a7 	.word	0x3fd287a7
 800d960:	8b60c8b3 	.word	0x8b60c8b3
 800d964:	3fc68a28 	.word	0x3fc68a28
 800d968:	509f79fb 	.word	0x509f79fb
 800d96c:	3fd34413 	.word	0x3fd34413
 800d970:	0800f825 	.word	0x0800f825
 800d974:	0800f83c 	.word	0x0800f83c
 800d978:	7ff00000 	.word	0x7ff00000
 800d97c:	0800f821 	.word	0x0800f821
 800d980:	0800f818 	.word	0x0800f818
 800d984:	0800f7f5 	.word	0x0800f7f5
 800d988:	0800f938 	.word	0x0800f938
 800d98c:	0800f89b 	.word	0x0800f89b
 800d990:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d992:	9900      	ldr	r1, [sp, #0]
 800d994:	6011      	str	r1, [r2, #0]
 800d996:	f1b9 0f0e 	cmp.w	r9, #14
 800d99a:	d872      	bhi.n	800da82 <_dtoa_r+0x3ea>
 800d99c:	2c00      	cmp	r4, #0
 800d99e:	d070      	beq.n	800da82 <_dtoa_r+0x3ea>
 800d9a0:	f1bb 0f00 	cmp.w	fp, #0
 800d9a4:	f340 80a6 	ble.w	800daf4 <_dtoa_r+0x45c>
 800d9a8:	49ca      	ldr	r1, [pc, #808]	; (800dcd4 <_dtoa_r+0x63c>)
 800d9aa:	f00b 020f 	and.w	r2, fp, #15
 800d9ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d9b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d9b6:	ed92 7b00 	vldr	d7, [r2]
 800d9ba:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d9be:	f000 808d 	beq.w	800dadc <_dtoa_r+0x444>
 800d9c2:	4ac5      	ldr	r2, [pc, #788]	; (800dcd8 <_dtoa_r+0x640>)
 800d9c4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d9c8:	ed92 6b08 	vldr	d6, [r2, #32]
 800d9cc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d9d0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d9d4:	f001 010f 	and.w	r1, r1, #15
 800d9d8:	2203      	movs	r2, #3
 800d9da:	48bf      	ldr	r0, [pc, #764]	; (800dcd8 <_dtoa_r+0x640>)
 800d9dc:	2900      	cmp	r1, #0
 800d9de:	d17f      	bne.n	800dae0 <_dtoa_r+0x448>
 800d9e0:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d9e4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d9e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d9ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d9ee:	2900      	cmp	r1, #0
 800d9f0:	f000 80b2 	beq.w	800db58 <_dtoa_r+0x4c0>
 800d9f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d9f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d9fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800da00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da04:	f140 80a8 	bpl.w	800db58 <_dtoa_r+0x4c0>
 800da08:	f1b9 0f00 	cmp.w	r9, #0
 800da0c:	f000 80a4 	beq.w	800db58 <_dtoa_r+0x4c0>
 800da10:	f1ba 0f00 	cmp.w	sl, #0
 800da14:	dd31      	ble.n	800da7a <_dtoa_r+0x3e2>
 800da16:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800da1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800da1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800da22:	f10b 37ff 	add.w	r7, fp, #4294967295
 800da26:	3201      	adds	r2, #1
 800da28:	4650      	mov	r0, sl
 800da2a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800da2e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800da32:	ee07 2a90 	vmov	s15, r2
 800da36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800da3a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800da3e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800da42:	9c03      	ldr	r4, [sp, #12]
 800da44:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800da48:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800da4c:	2800      	cmp	r0, #0
 800da4e:	f040 8086 	bne.w	800db5e <_dtoa_r+0x4c6>
 800da52:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800da56:	ee36 6b47 	vsub.f64	d6, d6, d7
 800da5a:	ec42 1b17 	vmov	d7, r1, r2
 800da5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da66:	f300 8272 	bgt.w	800df4e <_dtoa_r+0x8b6>
 800da6a:	eeb1 7b47 	vneg.f64	d7, d7
 800da6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800da72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da76:	f100 8267 	bmi.w	800df48 <_dtoa_r+0x8b0>
 800da7a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800da7e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800da82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800da84:	2a00      	cmp	r2, #0
 800da86:	f2c0 8129 	blt.w	800dcdc <_dtoa_r+0x644>
 800da8a:	f1bb 0f0e 	cmp.w	fp, #14
 800da8e:	f300 8125 	bgt.w	800dcdc <_dtoa_r+0x644>
 800da92:	4b90      	ldr	r3, [pc, #576]	; (800dcd4 <_dtoa_r+0x63c>)
 800da94:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800da98:	ed93 6b00 	vldr	d6, [r3]
 800da9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	f280 80c3 	bge.w	800dc2a <_dtoa_r+0x592>
 800daa4:	f1b9 0f00 	cmp.w	r9, #0
 800daa8:	f300 80bf 	bgt.w	800dc2a <_dtoa_r+0x592>
 800daac:	f040 824c 	bne.w	800df48 <_dtoa_r+0x8b0>
 800dab0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800dab4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dab8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dabc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dac4:	464c      	mov	r4, r9
 800dac6:	464f      	mov	r7, r9
 800dac8:	f280 8222 	bge.w	800df10 <_dtoa_r+0x878>
 800dacc:	f8dd 8000 	ldr.w	r8, [sp]
 800dad0:	2331      	movs	r3, #49	; 0x31
 800dad2:	f808 3b01 	strb.w	r3, [r8], #1
 800dad6:	f10b 0b01 	add.w	fp, fp, #1
 800dada:	e21e      	b.n	800df1a <_dtoa_r+0x882>
 800dadc:	2202      	movs	r2, #2
 800dade:	e77c      	b.n	800d9da <_dtoa_r+0x342>
 800dae0:	07cc      	lsls	r4, r1, #31
 800dae2:	d504      	bpl.n	800daee <_dtoa_r+0x456>
 800dae4:	ed90 6b00 	vldr	d6, [r0]
 800dae8:	3201      	adds	r2, #1
 800daea:	ee27 7b06 	vmul.f64	d7, d7, d6
 800daee:	1049      	asrs	r1, r1, #1
 800daf0:	3008      	adds	r0, #8
 800daf2:	e773      	b.n	800d9dc <_dtoa_r+0x344>
 800daf4:	d02e      	beq.n	800db54 <_dtoa_r+0x4bc>
 800daf6:	f1cb 0100 	rsb	r1, fp, #0
 800dafa:	4a76      	ldr	r2, [pc, #472]	; (800dcd4 <_dtoa_r+0x63c>)
 800dafc:	f001 000f 	and.w	r0, r1, #15
 800db00:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800db04:	ed92 7b00 	vldr	d7, [r2]
 800db08:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800db0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800db10:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800db14:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800db18:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800db1c:	486e      	ldr	r0, [pc, #440]	; (800dcd8 <_dtoa_r+0x640>)
 800db1e:	1109      	asrs	r1, r1, #4
 800db20:	2400      	movs	r4, #0
 800db22:	2202      	movs	r2, #2
 800db24:	b939      	cbnz	r1, 800db36 <_dtoa_r+0x49e>
 800db26:	2c00      	cmp	r4, #0
 800db28:	f43f af60 	beq.w	800d9ec <_dtoa_r+0x354>
 800db2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db34:	e75a      	b.n	800d9ec <_dtoa_r+0x354>
 800db36:	07cf      	lsls	r7, r1, #31
 800db38:	d509      	bpl.n	800db4e <_dtoa_r+0x4b6>
 800db3a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800db3e:	ed90 7b00 	vldr	d7, [r0]
 800db42:	ee26 7b07 	vmul.f64	d7, d6, d7
 800db46:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800db4a:	3201      	adds	r2, #1
 800db4c:	2401      	movs	r4, #1
 800db4e:	1049      	asrs	r1, r1, #1
 800db50:	3008      	adds	r0, #8
 800db52:	e7e7      	b.n	800db24 <_dtoa_r+0x48c>
 800db54:	2202      	movs	r2, #2
 800db56:	e749      	b.n	800d9ec <_dtoa_r+0x354>
 800db58:	465f      	mov	r7, fp
 800db5a:	4648      	mov	r0, r9
 800db5c:	e765      	b.n	800da2a <_dtoa_r+0x392>
 800db5e:	ec42 1b17 	vmov	d7, r1, r2
 800db62:	4a5c      	ldr	r2, [pc, #368]	; (800dcd4 <_dtoa_r+0x63c>)
 800db64:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800db68:	ed12 4b02 	vldr	d4, [r2, #-8]
 800db6c:	9a00      	ldr	r2, [sp, #0]
 800db6e:	1814      	adds	r4, r2, r0
 800db70:	9a08      	ldr	r2, [sp, #32]
 800db72:	b352      	cbz	r2, 800dbca <_dtoa_r+0x532>
 800db74:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800db78:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800db7c:	f8dd 8000 	ldr.w	r8, [sp]
 800db80:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800db84:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800db88:	ee35 7b47 	vsub.f64	d7, d5, d7
 800db8c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800db90:	ee14 2a90 	vmov	r2, s9
 800db94:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800db98:	3230      	adds	r2, #48	; 0x30
 800db9a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800db9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dba6:	f808 2b01 	strb.w	r2, [r8], #1
 800dbaa:	d439      	bmi.n	800dc20 <_dtoa_r+0x588>
 800dbac:	ee32 5b46 	vsub.f64	d5, d2, d6
 800dbb0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800dbb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbb8:	d472      	bmi.n	800dca0 <_dtoa_r+0x608>
 800dbba:	45a0      	cmp	r8, r4
 800dbbc:	f43f af5d 	beq.w	800da7a <_dtoa_r+0x3e2>
 800dbc0:	ee27 7b03 	vmul.f64	d7, d7, d3
 800dbc4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dbc8:	e7e0      	b.n	800db8c <_dtoa_r+0x4f4>
 800dbca:	f8dd 8000 	ldr.w	r8, [sp]
 800dbce:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dbd2:	4621      	mov	r1, r4
 800dbd4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800dbd8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800dbdc:	ee14 2a90 	vmov	r2, s9
 800dbe0:	3230      	adds	r2, #48	; 0x30
 800dbe2:	f808 2b01 	strb.w	r2, [r8], #1
 800dbe6:	45a0      	cmp	r8, r4
 800dbe8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800dbec:	ee36 6b45 	vsub.f64	d6, d6, d5
 800dbf0:	d118      	bne.n	800dc24 <_dtoa_r+0x58c>
 800dbf2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800dbf6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800dbfa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800dbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc02:	dc4d      	bgt.n	800dca0 <_dtoa_r+0x608>
 800dc04:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dc08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc10:	f57f af33 	bpl.w	800da7a <_dtoa_r+0x3e2>
 800dc14:	4688      	mov	r8, r1
 800dc16:	3901      	subs	r1, #1
 800dc18:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800dc1c:	2b30      	cmp	r3, #48	; 0x30
 800dc1e:	d0f9      	beq.n	800dc14 <_dtoa_r+0x57c>
 800dc20:	46bb      	mov	fp, r7
 800dc22:	e02a      	b.n	800dc7a <_dtoa_r+0x5e2>
 800dc24:	ee26 6b03 	vmul.f64	d6, d6, d3
 800dc28:	e7d6      	b.n	800dbd8 <_dtoa_r+0x540>
 800dc2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc2e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800dc32:	f8dd 8000 	ldr.w	r8, [sp]
 800dc36:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800dc3a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800dc3e:	ee15 3a10 	vmov	r3, s10
 800dc42:	3330      	adds	r3, #48	; 0x30
 800dc44:	f808 3b01 	strb.w	r3, [r8], #1
 800dc48:	9b00      	ldr	r3, [sp, #0]
 800dc4a:	eba8 0303 	sub.w	r3, r8, r3
 800dc4e:	4599      	cmp	r9, r3
 800dc50:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800dc54:	eea3 7b46 	vfms.f64	d7, d3, d6
 800dc58:	d133      	bne.n	800dcc2 <_dtoa_r+0x62a>
 800dc5a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800dc5e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800dc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc66:	dc1a      	bgt.n	800dc9e <_dtoa_r+0x606>
 800dc68:	eeb4 7b46 	vcmp.f64	d7, d6
 800dc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc70:	d103      	bne.n	800dc7a <_dtoa_r+0x5e2>
 800dc72:	ee15 3a10 	vmov	r3, s10
 800dc76:	07d9      	lsls	r1, r3, #31
 800dc78:	d411      	bmi.n	800dc9e <_dtoa_r+0x606>
 800dc7a:	4629      	mov	r1, r5
 800dc7c:	4630      	mov	r0, r6
 800dc7e:	f000 fae7 	bl	800e250 <_Bfree>
 800dc82:	2300      	movs	r3, #0
 800dc84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dc86:	f888 3000 	strb.w	r3, [r8]
 800dc8a:	f10b 0301 	add.w	r3, fp, #1
 800dc8e:	6013      	str	r3, [r2, #0]
 800dc90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f43f ad4d 	beq.w	800d732 <_dtoa_r+0x9a>
 800dc98:	f8c3 8000 	str.w	r8, [r3]
 800dc9c:	e549      	b.n	800d732 <_dtoa_r+0x9a>
 800dc9e:	465f      	mov	r7, fp
 800dca0:	4643      	mov	r3, r8
 800dca2:	4698      	mov	r8, r3
 800dca4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dca8:	2a39      	cmp	r2, #57	; 0x39
 800dcaa:	d106      	bne.n	800dcba <_dtoa_r+0x622>
 800dcac:	9a00      	ldr	r2, [sp, #0]
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d1f7      	bne.n	800dca2 <_dtoa_r+0x60a>
 800dcb2:	9900      	ldr	r1, [sp, #0]
 800dcb4:	2230      	movs	r2, #48	; 0x30
 800dcb6:	3701      	adds	r7, #1
 800dcb8:	700a      	strb	r2, [r1, #0]
 800dcba:	781a      	ldrb	r2, [r3, #0]
 800dcbc:	3201      	adds	r2, #1
 800dcbe:	701a      	strb	r2, [r3, #0]
 800dcc0:	e7ae      	b.n	800dc20 <_dtoa_r+0x588>
 800dcc2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dcc6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dcca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcce:	d1b2      	bne.n	800dc36 <_dtoa_r+0x59e>
 800dcd0:	e7d3      	b.n	800dc7a <_dtoa_r+0x5e2>
 800dcd2:	bf00      	nop
 800dcd4:	0800f938 	.word	0x0800f938
 800dcd8:	0800f910 	.word	0x0800f910
 800dcdc:	9908      	ldr	r1, [sp, #32]
 800dcde:	2900      	cmp	r1, #0
 800dce0:	f000 80d1 	beq.w	800de86 <_dtoa_r+0x7ee>
 800dce4:	9907      	ldr	r1, [sp, #28]
 800dce6:	2901      	cmp	r1, #1
 800dce8:	f300 80b4 	bgt.w	800de54 <_dtoa_r+0x7bc>
 800dcec:	9911      	ldr	r1, [sp, #68]	; 0x44
 800dcee:	2900      	cmp	r1, #0
 800dcf0:	f000 80ac 	beq.w	800de4c <_dtoa_r+0x7b4>
 800dcf4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800dcf8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800dcfc:	461c      	mov	r4, r3
 800dcfe:	930a      	str	r3, [sp, #40]	; 0x28
 800dd00:	9b05      	ldr	r3, [sp, #20]
 800dd02:	4413      	add	r3, r2
 800dd04:	9305      	str	r3, [sp, #20]
 800dd06:	9b06      	ldr	r3, [sp, #24]
 800dd08:	2101      	movs	r1, #1
 800dd0a:	4413      	add	r3, r2
 800dd0c:	4630      	mov	r0, r6
 800dd0e:	9306      	str	r3, [sp, #24]
 800dd10:	f000 fb5a 	bl	800e3c8 <__i2b>
 800dd14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd16:	4607      	mov	r7, r0
 800dd18:	f1b8 0f00 	cmp.w	r8, #0
 800dd1c:	dd0d      	ble.n	800dd3a <_dtoa_r+0x6a2>
 800dd1e:	9a06      	ldr	r2, [sp, #24]
 800dd20:	2a00      	cmp	r2, #0
 800dd22:	dd0a      	ble.n	800dd3a <_dtoa_r+0x6a2>
 800dd24:	4542      	cmp	r2, r8
 800dd26:	9905      	ldr	r1, [sp, #20]
 800dd28:	bfa8      	it	ge
 800dd2a:	4642      	movge	r2, r8
 800dd2c:	1a89      	subs	r1, r1, r2
 800dd2e:	9105      	str	r1, [sp, #20]
 800dd30:	9906      	ldr	r1, [sp, #24]
 800dd32:	eba8 0802 	sub.w	r8, r8, r2
 800dd36:	1a8a      	subs	r2, r1, r2
 800dd38:	9206      	str	r2, [sp, #24]
 800dd3a:	b303      	cbz	r3, 800dd7e <_dtoa_r+0x6e6>
 800dd3c:	9a08      	ldr	r2, [sp, #32]
 800dd3e:	2a00      	cmp	r2, #0
 800dd40:	f000 80a6 	beq.w	800de90 <_dtoa_r+0x7f8>
 800dd44:	2c00      	cmp	r4, #0
 800dd46:	dd13      	ble.n	800dd70 <_dtoa_r+0x6d8>
 800dd48:	4639      	mov	r1, r7
 800dd4a:	4622      	mov	r2, r4
 800dd4c:	4630      	mov	r0, r6
 800dd4e:	930c      	str	r3, [sp, #48]	; 0x30
 800dd50:	f000 fbf6 	bl	800e540 <__pow5mult>
 800dd54:	462a      	mov	r2, r5
 800dd56:	4601      	mov	r1, r0
 800dd58:	4607      	mov	r7, r0
 800dd5a:	4630      	mov	r0, r6
 800dd5c:	f000 fb4a 	bl	800e3f4 <__multiply>
 800dd60:	4629      	mov	r1, r5
 800dd62:	900a      	str	r0, [sp, #40]	; 0x28
 800dd64:	4630      	mov	r0, r6
 800dd66:	f000 fa73 	bl	800e250 <_Bfree>
 800dd6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd6e:	4615      	mov	r5, r2
 800dd70:	1b1a      	subs	r2, r3, r4
 800dd72:	d004      	beq.n	800dd7e <_dtoa_r+0x6e6>
 800dd74:	4629      	mov	r1, r5
 800dd76:	4630      	mov	r0, r6
 800dd78:	f000 fbe2 	bl	800e540 <__pow5mult>
 800dd7c:	4605      	mov	r5, r0
 800dd7e:	2101      	movs	r1, #1
 800dd80:	4630      	mov	r0, r6
 800dd82:	f000 fb21 	bl	800e3c8 <__i2b>
 800dd86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	4604      	mov	r4, r0
 800dd8c:	f340 8082 	ble.w	800de94 <_dtoa_r+0x7fc>
 800dd90:	461a      	mov	r2, r3
 800dd92:	4601      	mov	r1, r0
 800dd94:	4630      	mov	r0, r6
 800dd96:	f000 fbd3 	bl	800e540 <__pow5mult>
 800dd9a:	9b07      	ldr	r3, [sp, #28]
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	4604      	mov	r4, r0
 800dda0:	dd7b      	ble.n	800de9a <_dtoa_r+0x802>
 800dda2:	2300      	movs	r3, #0
 800dda4:	930a      	str	r3, [sp, #40]	; 0x28
 800dda6:	6922      	ldr	r2, [r4, #16]
 800dda8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ddac:	6910      	ldr	r0, [r2, #16]
 800ddae:	f000 fabb 	bl	800e328 <__hi0bits>
 800ddb2:	f1c0 0020 	rsb	r0, r0, #32
 800ddb6:	9b06      	ldr	r3, [sp, #24]
 800ddb8:	4418      	add	r0, r3
 800ddba:	f010 001f 	ands.w	r0, r0, #31
 800ddbe:	f000 808d 	beq.w	800dedc <_dtoa_r+0x844>
 800ddc2:	f1c0 0220 	rsb	r2, r0, #32
 800ddc6:	2a04      	cmp	r2, #4
 800ddc8:	f340 8086 	ble.w	800ded8 <_dtoa_r+0x840>
 800ddcc:	f1c0 001c 	rsb	r0, r0, #28
 800ddd0:	9b05      	ldr	r3, [sp, #20]
 800ddd2:	4403      	add	r3, r0
 800ddd4:	9305      	str	r3, [sp, #20]
 800ddd6:	9b06      	ldr	r3, [sp, #24]
 800ddd8:	4403      	add	r3, r0
 800ddda:	4480      	add	r8, r0
 800dddc:	9306      	str	r3, [sp, #24]
 800ddde:	9b05      	ldr	r3, [sp, #20]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	dd05      	ble.n	800ddf0 <_dtoa_r+0x758>
 800dde4:	4629      	mov	r1, r5
 800dde6:	461a      	mov	r2, r3
 800dde8:	4630      	mov	r0, r6
 800ddea:	f000 fc03 	bl	800e5f4 <__lshift>
 800ddee:	4605      	mov	r5, r0
 800ddf0:	9b06      	ldr	r3, [sp, #24]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	dd05      	ble.n	800de02 <_dtoa_r+0x76a>
 800ddf6:	4621      	mov	r1, r4
 800ddf8:	461a      	mov	r2, r3
 800ddfa:	4630      	mov	r0, r6
 800ddfc:	f000 fbfa 	bl	800e5f4 <__lshift>
 800de00:	4604      	mov	r4, r0
 800de02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de04:	2b00      	cmp	r3, #0
 800de06:	d06b      	beq.n	800dee0 <_dtoa_r+0x848>
 800de08:	4621      	mov	r1, r4
 800de0a:	4628      	mov	r0, r5
 800de0c:	f000 fc5e 	bl	800e6cc <__mcmp>
 800de10:	2800      	cmp	r0, #0
 800de12:	da65      	bge.n	800dee0 <_dtoa_r+0x848>
 800de14:	2300      	movs	r3, #0
 800de16:	4629      	mov	r1, r5
 800de18:	220a      	movs	r2, #10
 800de1a:	4630      	mov	r0, r6
 800de1c:	f000 fa3a 	bl	800e294 <__multadd>
 800de20:	9b08      	ldr	r3, [sp, #32]
 800de22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800de26:	4605      	mov	r5, r0
 800de28:	2b00      	cmp	r3, #0
 800de2a:	f000 8192 	beq.w	800e152 <_dtoa_r+0xaba>
 800de2e:	4639      	mov	r1, r7
 800de30:	2300      	movs	r3, #0
 800de32:	220a      	movs	r2, #10
 800de34:	4630      	mov	r0, r6
 800de36:	f000 fa2d 	bl	800e294 <__multadd>
 800de3a:	f1ba 0f00 	cmp.w	sl, #0
 800de3e:	4607      	mov	r7, r0
 800de40:	f300 808e 	bgt.w	800df60 <_dtoa_r+0x8c8>
 800de44:	9b07      	ldr	r3, [sp, #28]
 800de46:	2b02      	cmp	r3, #2
 800de48:	dc51      	bgt.n	800deee <_dtoa_r+0x856>
 800de4a:	e089      	b.n	800df60 <_dtoa_r+0x8c8>
 800de4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800de52:	e751      	b.n	800dcf8 <_dtoa_r+0x660>
 800de54:	f109 34ff 	add.w	r4, r9, #4294967295
 800de58:	42a3      	cmp	r3, r4
 800de5a:	bfbf      	itttt	lt
 800de5c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800de5e:	1ae3      	sublt	r3, r4, r3
 800de60:	18d2      	addlt	r2, r2, r3
 800de62:	4613      	movlt	r3, r2
 800de64:	bfb7      	itett	lt
 800de66:	930e      	strlt	r3, [sp, #56]	; 0x38
 800de68:	1b1c      	subge	r4, r3, r4
 800de6a:	4623      	movlt	r3, r4
 800de6c:	2400      	movlt	r4, #0
 800de6e:	f1b9 0f00 	cmp.w	r9, #0
 800de72:	bfb5      	itete	lt
 800de74:	9a05      	ldrlt	r2, [sp, #20]
 800de76:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800de7a:	eba2 0809 	sublt.w	r8, r2, r9
 800de7e:	464a      	movge	r2, r9
 800de80:	bfb8      	it	lt
 800de82:	2200      	movlt	r2, #0
 800de84:	e73b      	b.n	800dcfe <_dtoa_r+0x666>
 800de86:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800de8a:	9f08      	ldr	r7, [sp, #32]
 800de8c:	461c      	mov	r4, r3
 800de8e:	e743      	b.n	800dd18 <_dtoa_r+0x680>
 800de90:	461a      	mov	r2, r3
 800de92:	e76f      	b.n	800dd74 <_dtoa_r+0x6dc>
 800de94:	9b07      	ldr	r3, [sp, #28]
 800de96:	2b01      	cmp	r3, #1
 800de98:	dc18      	bgt.n	800decc <_dtoa_r+0x834>
 800de9a:	9b02      	ldr	r3, [sp, #8]
 800de9c:	b9b3      	cbnz	r3, 800decc <_dtoa_r+0x834>
 800de9e:	9b03      	ldr	r3, [sp, #12]
 800dea0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800dea4:	b9a2      	cbnz	r2, 800ded0 <_dtoa_r+0x838>
 800dea6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800deaa:	0d12      	lsrs	r2, r2, #20
 800deac:	0512      	lsls	r2, r2, #20
 800deae:	b18a      	cbz	r2, 800ded4 <_dtoa_r+0x83c>
 800deb0:	9b05      	ldr	r3, [sp, #20]
 800deb2:	3301      	adds	r3, #1
 800deb4:	9305      	str	r3, [sp, #20]
 800deb6:	9b06      	ldr	r3, [sp, #24]
 800deb8:	3301      	adds	r3, #1
 800deba:	9306      	str	r3, [sp, #24]
 800debc:	2301      	movs	r3, #1
 800debe:	930a      	str	r3, [sp, #40]	; 0x28
 800dec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	f47f af6f 	bne.w	800dda6 <_dtoa_r+0x70e>
 800dec8:	2001      	movs	r0, #1
 800deca:	e774      	b.n	800ddb6 <_dtoa_r+0x71e>
 800decc:	2300      	movs	r3, #0
 800dece:	e7f6      	b.n	800debe <_dtoa_r+0x826>
 800ded0:	9b02      	ldr	r3, [sp, #8]
 800ded2:	e7f4      	b.n	800debe <_dtoa_r+0x826>
 800ded4:	920a      	str	r2, [sp, #40]	; 0x28
 800ded6:	e7f3      	b.n	800dec0 <_dtoa_r+0x828>
 800ded8:	d081      	beq.n	800ddde <_dtoa_r+0x746>
 800deda:	4610      	mov	r0, r2
 800dedc:	301c      	adds	r0, #28
 800dede:	e777      	b.n	800ddd0 <_dtoa_r+0x738>
 800dee0:	f1b9 0f00 	cmp.w	r9, #0
 800dee4:	dc37      	bgt.n	800df56 <_dtoa_r+0x8be>
 800dee6:	9b07      	ldr	r3, [sp, #28]
 800dee8:	2b02      	cmp	r3, #2
 800deea:	dd34      	ble.n	800df56 <_dtoa_r+0x8be>
 800deec:	46ca      	mov	sl, r9
 800deee:	f1ba 0f00 	cmp.w	sl, #0
 800def2:	d10d      	bne.n	800df10 <_dtoa_r+0x878>
 800def4:	4621      	mov	r1, r4
 800def6:	4653      	mov	r3, sl
 800def8:	2205      	movs	r2, #5
 800defa:	4630      	mov	r0, r6
 800defc:	f000 f9ca 	bl	800e294 <__multadd>
 800df00:	4601      	mov	r1, r0
 800df02:	4604      	mov	r4, r0
 800df04:	4628      	mov	r0, r5
 800df06:	f000 fbe1 	bl	800e6cc <__mcmp>
 800df0a:	2800      	cmp	r0, #0
 800df0c:	f73f adde 	bgt.w	800dacc <_dtoa_r+0x434>
 800df10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df12:	f8dd 8000 	ldr.w	r8, [sp]
 800df16:	ea6f 0b03 	mvn.w	fp, r3
 800df1a:	f04f 0900 	mov.w	r9, #0
 800df1e:	4621      	mov	r1, r4
 800df20:	4630      	mov	r0, r6
 800df22:	f000 f995 	bl	800e250 <_Bfree>
 800df26:	2f00      	cmp	r7, #0
 800df28:	f43f aea7 	beq.w	800dc7a <_dtoa_r+0x5e2>
 800df2c:	f1b9 0f00 	cmp.w	r9, #0
 800df30:	d005      	beq.n	800df3e <_dtoa_r+0x8a6>
 800df32:	45b9      	cmp	r9, r7
 800df34:	d003      	beq.n	800df3e <_dtoa_r+0x8a6>
 800df36:	4649      	mov	r1, r9
 800df38:	4630      	mov	r0, r6
 800df3a:	f000 f989 	bl	800e250 <_Bfree>
 800df3e:	4639      	mov	r1, r7
 800df40:	4630      	mov	r0, r6
 800df42:	f000 f985 	bl	800e250 <_Bfree>
 800df46:	e698      	b.n	800dc7a <_dtoa_r+0x5e2>
 800df48:	2400      	movs	r4, #0
 800df4a:	4627      	mov	r7, r4
 800df4c:	e7e0      	b.n	800df10 <_dtoa_r+0x878>
 800df4e:	46bb      	mov	fp, r7
 800df50:	4604      	mov	r4, r0
 800df52:	4607      	mov	r7, r0
 800df54:	e5ba      	b.n	800dacc <_dtoa_r+0x434>
 800df56:	9b08      	ldr	r3, [sp, #32]
 800df58:	46ca      	mov	sl, r9
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f000 8100 	beq.w	800e160 <_dtoa_r+0xac8>
 800df60:	f1b8 0f00 	cmp.w	r8, #0
 800df64:	dd05      	ble.n	800df72 <_dtoa_r+0x8da>
 800df66:	4639      	mov	r1, r7
 800df68:	4642      	mov	r2, r8
 800df6a:	4630      	mov	r0, r6
 800df6c:	f000 fb42 	bl	800e5f4 <__lshift>
 800df70:	4607      	mov	r7, r0
 800df72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df74:	2b00      	cmp	r3, #0
 800df76:	d05d      	beq.n	800e034 <_dtoa_r+0x99c>
 800df78:	6879      	ldr	r1, [r7, #4]
 800df7a:	4630      	mov	r0, r6
 800df7c:	f000 f928 	bl	800e1d0 <_Balloc>
 800df80:	4680      	mov	r8, r0
 800df82:	b928      	cbnz	r0, 800df90 <_dtoa_r+0x8f8>
 800df84:	4b82      	ldr	r3, [pc, #520]	; (800e190 <_dtoa_r+0xaf8>)
 800df86:	4602      	mov	r2, r0
 800df88:	f240 21ea 	movw	r1, #746	; 0x2ea
 800df8c:	f7ff bb9a 	b.w	800d6c4 <_dtoa_r+0x2c>
 800df90:	693a      	ldr	r2, [r7, #16]
 800df92:	3202      	adds	r2, #2
 800df94:	0092      	lsls	r2, r2, #2
 800df96:	f107 010c 	add.w	r1, r7, #12
 800df9a:	300c      	adds	r0, #12
 800df9c:	f000 f90a 	bl	800e1b4 <memcpy>
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	4641      	mov	r1, r8
 800dfa4:	4630      	mov	r0, r6
 800dfa6:	f000 fb25 	bl	800e5f4 <__lshift>
 800dfaa:	9b00      	ldr	r3, [sp, #0]
 800dfac:	3301      	adds	r3, #1
 800dfae:	9305      	str	r3, [sp, #20]
 800dfb0:	9b00      	ldr	r3, [sp, #0]
 800dfb2:	4453      	add	r3, sl
 800dfb4:	9309      	str	r3, [sp, #36]	; 0x24
 800dfb6:	9b02      	ldr	r3, [sp, #8]
 800dfb8:	f003 0301 	and.w	r3, r3, #1
 800dfbc:	46b9      	mov	r9, r7
 800dfbe:	9308      	str	r3, [sp, #32]
 800dfc0:	4607      	mov	r7, r0
 800dfc2:	9b05      	ldr	r3, [sp, #20]
 800dfc4:	4621      	mov	r1, r4
 800dfc6:	3b01      	subs	r3, #1
 800dfc8:	4628      	mov	r0, r5
 800dfca:	9302      	str	r3, [sp, #8]
 800dfcc:	f7ff fad6 	bl	800d57c <quorem>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	3330      	adds	r3, #48	; 0x30
 800dfd4:	9006      	str	r0, [sp, #24]
 800dfd6:	4649      	mov	r1, r9
 800dfd8:	4628      	mov	r0, r5
 800dfda:	930a      	str	r3, [sp, #40]	; 0x28
 800dfdc:	f000 fb76 	bl	800e6cc <__mcmp>
 800dfe0:	463a      	mov	r2, r7
 800dfe2:	4682      	mov	sl, r0
 800dfe4:	4621      	mov	r1, r4
 800dfe6:	4630      	mov	r0, r6
 800dfe8:	f000 fb8c 	bl	800e704 <__mdiff>
 800dfec:	68c2      	ldr	r2, [r0, #12]
 800dfee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dff0:	4680      	mov	r8, r0
 800dff2:	bb0a      	cbnz	r2, 800e038 <_dtoa_r+0x9a0>
 800dff4:	4601      	mov	r1, r0
 800dff6:	4628      	mov	r0, r5
 800dff8:	f000 fb68 	bl	800e6cc <__mcmp>
 800dffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dffe:	4602      	mov	r2, r0
 800e000:	4641      	mov	r1, r8
 800e002:	4630      	mov	r0, r6
 800e004:	920e      	str	r2, [sp, #56]	; 0x38
 800e006:	930a      	str	r3, [sp, #40]	; 0x28
 800e008:	f000 f922 	bl	800e250 <_Bfree>
 800e00c:	9b07      	ldr	r3, [sp, #28]
 800e00e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e010:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e014:	ea43 0102 	orr.w	r1, r3, r2
 800e018:	9b08      	ldr	r3, [sp, #32]
 800e01a:	430b      	orrs	r3, r1
 800e01c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e01e:	d10d      	bne.n	800e03c <_dtoa_r+0x9a4>
 800e020:	2b39      	cmp	r3, #57	; 0x39
 800e022:	d029      	beq.n	800e078 <_dtoa_r+0x9e0>
 800e024:	f1ba 0f00 	cmp.w	sl, #0
 800e028:	dd01      	ble.n	800e02e <_dtoa_r+0x996>
 800e02a:	9b06      	ldr	r3, [sp, #24]
 800e02c:	3331      	adds	r3, #49	; 0x31
 800e02e:	9a02      	ldr	r2, [sp, #8]
 800e030:	7013      	strb	r3, [r2, #0]
 800e032:	e774      	b.n	800df1e <_dtoa_r+0x886>
 800e034:	4638      	mov	r0, r7
 800e036:	e7b8      	b.n	800dfaa <_dtoa_r+0x912>
 800e038:	2201      	movs	r2, #1
 800e03a:	e7e1      	b.n	800e000 <_dtoa_r+0x968>
 800e03c:	f1ba 0f00 	cmp.w	sl, #0
 800e040:	db06      	blt.n	800e050 <_dtoa_r+0x9b8>
 800e042:	9907      	ldr	r1, [sp, #28]
 800e044:	ea41 0a0a 	orr.w	sl, r1, sl
 800e048:	9908      	ldr	r1, [sp, #32]
 800e04a:	ea5a 0101 	orrs.w	r1, sl, r1
 800e04e:	d120      	bne.n	800e092 <_dtoa_r+0x9fa>
 800e050:	2a00      	cmp	r2, #0
 800e052:	ddec      	ble.n	800e02e <_dtoa_r+0x996>
 800e054:	4629      	mov	r1, r5
 800e056:	2201      	movs	r2, #1
 800e058:	4630      	mov	r0, r6
 800e05a:	9305      	str	r3, [sp, #20]
 800e05c:	f000 faca 	bl	800e5f4 <__lshift>
 800e060:	4621      	mov	r1, r4
 800e062:	4605      	mov	r5, r0
 800e064:	f000 fb32 	bl	800e6cc <__mcmp>
 800e068:	2800      	cmp	r0, #0
 800e06a:	9b05      	ldr	r3, [sp, #20]
 800e06c:	dc02      	bgt.n	800e074 <_dtoa_r+0x9dc>
 800e06e:	d1de      	bne.n	800e02e <_dtoa_r+0x996>
 800e070:	07da      	lsls	r2, r3, #31
 800e072:	d5dc      	bpl.n	800e02e <_dtoa_r+0x996>
 800e074:	2b39      	cmp	r3, #57	; 0x39
 800e076:	d1d8      	bne.n	800e02a <_dtoa_r+0x992>
 800e078:	9a02      	ldr	r2, [sp, #8]
 800e07a:	2339      	movs	r3, #57	; 0x39
 800e07c:	7013      	strb	r3, [r2, #0]
 800e07e:	4643      	mov	r3, r8
 800e080:	4698      	mov	r8, r3
 800e082:	3b01      	subs	r3, #1
 800e084:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e088:	2a39      	cmp	r2, #57	; 0x39
 800e08a:	d051      	beq.n	800e130 <_dtoa_r+0xa98>
 800e08c:	3201      	adds	r2, #1
 800e08e:	701a      	strb	r2, [r3, #0]
 800e090:	e745      	b.n	800df1e <_dtoa_r+0x886>
 800e092:	2a00      	cmp	r2, #0
 800e094:	dd03      	ble.n	800e09e <_dtoa_r+0xa06>
 800e096:	2b39      	cmp	r3, #57	; 0x39
 800e098:	d0ee      	beq.n	800e078 <_dtoa_r+0x9e0>
 800e09a:	3301      	adds	r3, #1
 800e09c:	e7c7      	b.n	800e02e <_dtoa_r+0x996>
 800e09e:	9a05      	ldr	r2, [sp, #20]
 800e0a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0a2:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e0a6:	428a      	cmp	r2, r1
 800e0a8:	d02b      	beq.n	800e102 <_dtoa_r+0xa6a>
 800e0aa:	4629      	mov	r1, r5
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	220a      	movs	r2, #10
 800e0b0:	4630      	mov	r0, r6
 800e0b2:	f000 f8ef 	bl	800e294 <__multadd>
 800e0b6:	45b9      	cmp	r9, r7
 800e0b8:	4605      	mov	r5, r0
 800e0ba:	f04f 0300 	mov.w	r3, #0
 800e0be:	f04f 020a 	mov.w	r2, #10
 800e0c2:	4649      	mov	r1, r9
 800e0c4:	4630      	mov	r0, r6
 800e0c6:	d107      	bne.n	800e0d8 <_dtoa_r+0xa40>
 800e0c8:	f000 f8e4 	bl	800e294 <__multadd>
 800e0cc:	4681      	mov	r9, r0
 800e0ce:	4607      	mov	r7, r0
 800e0d0:	9b05      	ldr	r3, [sp, #20]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	9305      	str	r3, [sp, #20]
 800e0d6:	e774      	b.n	800dfc2 <_dtoa_r+0x92a>
 800e0d8:	f000 f8dc 	bl	800e294 <__multadd>
 800e0dc:	4639      	mov	r1, r7
 800e0de:	4681      	mov	r9, r0
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	220a      	movs	r2, #10
 800e0e4:	4630      	mov	r0, r6
 800e0e6:	f000 f8d5 	bl	800e294 <__multadd>
 800e0ea:	4607      	mov	r7, r0
 800e0ec:	e7f0      	b.n	800e0d0 <_dtoa_r+0xa38>
 800e0ee:	f1ba 0f00 	cmp.w	sl, #0
 800e0f2:	9a00      	ldr	r2, [sp, #0]
 800e0f4:	bfcc      	ite	gt
 800e0f6:	46d0      	movgt	r8, sl
 800e0f8:	f04f 0801 	movle.w	r8, #1
 800e0fc:	4490      	add	r8, r2
 800e0fe:	f04f 0900 	mov.w	r9, #0
 800e102:	4629      	mov	r1, r5
 800e104:	2201      	movs	r2, #1
 800e106:	4630      	mov	r0, r6
 800e108:	9302      	str	r3, [sp, #8]
 800e10a:	f000 fa73 	bl	800e5f4 <__lshift>
 800e10e:	4621      	mov	r1, r4
 800e110:	4605      	mov	r5, r0
 800e112:	f000 fadb 	bl	800e6cc <__mcmp>
 800e116:	2800      	cmp	r0, #0
 800e118:	dcb1      	bgt.n	800e07e <_dtoa_r+0x9e6>
 800e11a:	d102      	bne.n	800e122 <_dtoa_r+0xa8a>
 800e11c:	9b02      	ldr	r3, [sp, #8]
 800e11e:	07db      	lsls	r3, r3, #31
 800e120:	d4ad      	bmi.n	800e07e <_dtoa_r+0x9e6>
 800e122:	4643      	mov	r3, r8
 800e124:	4698      	mov	r8, r3
 800e126:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e12a:	2a30      	cmp	r2, #48	; 0x30
 800e12c:	d0fa      	beq.n	800e124 <_dtoa_r+0xa8c>
 800e12e:	e6f6      	b.n	800df1e <_dtoa_r+0x886>
 800e130:	9a00      	ldr	r2, [sp, #0]
 800e132:	429a      	cmp	r2, r3
 800e134:	d1a4      	bne.n	800e080 <_dtoa_r+0x9e8>
 800e136:	f10b 0b01 	add.w	fp, fp, #1
 800e13a:	2331      	movs	r3, #49	; 0x31
 800e13c:	e778      	b.n	800e030 <_dtoa_r+0x998>
 800e13e:	4b15      	ldr	r3, [pc, #84]	; (800e194 <_dtoa_r+0xafc>)
 800e140:	f7ff bb12 	b.w	800d768 <_dtoa_r+0xd0>
 800e144:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e146:	2b00      	cmp	r3, #0
 800e148:	f47f aaee 	bne.w	800d728 <_dtoa_r+0x90>
 800e14c:	4b12      	ldr	r3, [pc, #72]	; (800e198 <_dtoa_r+0xb00>)
 800e14e:	f7ff bb0b 	b.w	800d768 <_dtoa_r+0xd0>
 800e152:	f1ba 0f00 	cmp.w	sl, #0
 800e156:	dc03      	bgt.n	800e160 <_dtoa_r+0xac8>
 800e158:	9b07      	ldr	r3, [sp, #28]
 800e15a:	2b02      	cmp	r3, #2
 800e15c:	f73f aec7 	bgt.w	800deee <_dtoa_r+0x856>
 800e160:	f8dd 8000 	ldr.w	r8, [sp]
 800e164:	4621      	mov	r1, r4
 800e166:	4628      	mov	r0, r5
 800e168:	f7ff fa08 	bl	800d57c <quorem>
 800e16c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e170:	f808 3b01 	strb.w	r3, [r8], #1
 800e174:	9a00      	ldr	r2, [sp, #0]
 800e176:	eba8 0202 	sub.w	r2, r8, r2
 800e17a:	4592      	cmp	sl, r2
 800e17c:	ddb7      	ble.n	800e0ee <_dtoa_r+0xa56>
 800e17e:	4629      	mov	r1, r5
 800e180:	2300      	movs	r3, #0
 800e182:	220a      	movs	r2, #10
 800e184:	4630      	mov	r0, r6
 800e186:	f000 f885 	bl	800e294 <__multadd>
 800e18a:	4605      	mov	r5, r0
 800e18c:	e7ea      	b.n	800e164 <_dtoa_r+0xacc>
 800e18e:	bf00      	nop
 800e190:	0800f89b 	.word	0x0800f89b
 800e194:	0800f7f4 	.word	0x0800f7f4
 800e198:	0800f818 	.word	0x0800f818

0800e19c <_localeconv_r>:
 800e19c:	4800      	ldr	r0, [pc, #0]	; (800e1a0 <_localeconv_r+0x4>)
 800e19e:	4770      	bx	lr
 800e1a0:	24000164 	.word	0x24000164

0800e1a4 <malloc>:
 800e1a4:	4b02      	ldr	r3, [pc, #8]	; (800e1b0 <malloc+0xc>)
 800e1a6:	4601      	mov	r1, r0
 800e1a8:	6818      	ldr	r0, [r3, #0]
 800e1aa:	f000 bbef 	b.w	800e98c <_malloc_r>
 800e1ae:	bf00      	nop
 800e1b0:	24000010 	.word	0x24000010

0800e1b4 <memcpy>:
 800e1b4:	440a      	add	r2, r1
 800e1b6:	4291      	cmp	r1, r2
 800e1b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e1bc:	d100      	bne.n	800e1c0 <memcpy+0xc>
 800e1be:	4770      	bx	lr
 800e1c0:	b510      	push	{r4, lr}
 800e1c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1ca:	4291      	cmp	r1, r2
 800e1cc:	d1f9      	bne.n	800e1c2 <memcpy+0xe>
 800e1ce:	bd10      	pop	{r4, pc}

0800e1d0 <_Balloc>:
 800e1d0:	b570      	push	{r4, r5, r6, lr}
 800e1d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e1d4:	4604      	mov	r4, r0
 800e1d6:	460d      	mov	r5, r1
 800e1d8:	b976      	cbnz	r6, 800e1f8 <_Balloc+0x28>
 800e1da:	2010      	movs	r0, #16
 800e1dc:	f7ff ffe2 	bl	800e1a4 <malloc>
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	6260      	str	r0, [r4, #36]	; 0x24
 800e1e4:	b920      	cbnz	r0, 800e1f0 <_Balloc+0x20>
 800e1e6:	4b18      	ldr	r3, [pc, #96]	; (800e248 <_Balloc+0x78>)
 800e1e8:	4818      	ldr	r0, [pc, #96]	; (800e24c <_Balloc+0x7c>)
 800e1ea:	2166      	movs	r1, #102	; 0x66
 800e1ec:	f000 fc38 	bl	800ea60 <__assert_func>
 800e1f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e1f4:	6006      	str	r6, [r0, #0]
 800e1f6:	60c6      	str	r6, [r0, #12]
 800e1f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e1fa:	68f3      	ldr	r3, [r6, #12]
 800e1fc:	b183      	cbz	r3, 800e220 <_Balloc+0x50>
 800e1fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e200:	68db      	ldr	r3, [r3, #12]
 800e202:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e206:	b9b8      	cbnz	r0, 800e238 <_Balloc+0x68>
 800e208:	2101      	movs	r1, #1
 800e20a:	fa01 f605 	lsl.w	r6, r1, r5
 800e20e:	1d72      	adds	r2, r6, #5
 800e210:	0092      	lsls	r2, r2, #2
 800e212:	4620      	mov	r0, r4
 800e214:	f000 fb5a 	bl	800e8cc <_calloc_r>
 800e218:	b160      	cbz	r0, 800e234 <_Balloc+0x64>
 800e21a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e21e:	e00e      	b.n	800e23e <_Balloc+0x6e>
 800e220:	2221      	movs	r2, #33	; 0x21
 800e222:	2104      	movs	r1, #4
 800e224:	4620      	mov	r0, r4
 800e226:	f000 fb51 	bl	800e8cc <_calloc_r>
 800e22a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e22c:	60f0      	str	r0, [r6, #12]
 800e22e:	68db      	ldr	r3, [r3, #12]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d1e4      	bne.n	800e1fe <_Balloc+0x2e>
 800e234:	2000      	movs	r0, #0
 800e236:	bd70      	pop	{r4, r5, r6, pc}
 800e238:	6802      	ldr	r2, [r0, #0]
 800e23a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e23e:	2300      	movs	r3, #0
 800e240:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e244:	e7f7      	b.n	800e236 <_Balloc+0x66>
 800e246:	bf00      	nop
 800e248:	0800f825 	.word	0x0800f825
 800e24c:	0800f8ac 	.word	0x0800f8ac

0800e250 <_Bfree>:
 800e250:	b570      	push	{r4, r5, r6, lr}
 800e252:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e254:	4605      	mov	r5, r0
 800e256:	460c      	mov	r4, r1
 800e258:	b976      	cbnz	r6, 800e278 <_Bfree+0x28>
 800e25a:	2010      	movs	r0, #16
 800e25c:	f7ff ffa2 	bl	800e1a4 <malloc>
 800e260:	4602      	mov	r2, r0
 800e262:	6268      	str	r0, [r5, #36]	; 0x24
 800e264:	b920      	cbnz	r0, 800e270 <_Bfree+0x20>
 800e266:	4b09      	ldr	r3, [pc, #36]	; (800e28c <_Bfree+0x3c>)
 800e268:	4809      	ldr	r0, [pc, #36]	; (800e290 <_Bfree+0x40>)
 800e26a:	218a      	movs	r1, #138	; 0x8a
 800e26c:	f000 fbf8 	bl	800ea60 <__assert_func>
 800e270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e274:	6006      	str	r6, [r0, #0]
 800e276:	60c6      	str	r6, [r0, #12]
 800e278:	b13c      	cbz	r4, 800e28a <_Bfree+0x3a>
 800e27a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e27c:	6862      	ldr	r2, [r4, #4]
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e284:	6021      	str	r1, [r4, #0]
 800e286:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e28a:	bd70      	pop	{r4, r5, r6, pc}
 800e28c:	0800f825 	.word	0x0800f825
 800e290:	0800f8ac 	.word	0x0800f8ac

0800e294 <__multadd>:
 800e294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e298:	690e      	ldr	r6, [r1, #16]
 800e29a:	4607      	mov	r7, r0
 800e29c:	4698      	mov	r8, r3
 800e29e:	460c      	mov	r4, r1
 800e2a0:	f101 0014 	add.w	r0, r1, #20
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	6805      	ldr	r5, [r0, #0]
 800e2a8:	b2a9      	uxth	r1, r5
 800e2aa:	fb02 8101 	mla	r1, r2, r1, r8
 800e2ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e2b2:	0c2d      	lsrs	r5, r5, #16
 800e2b4:	fb02 c505 	mla	r5, r2, r5, ip
 800e2b8:	b289      	uxth	r1, r1
 800e2ba:	3301      	adds	r3, #1
 800e2bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e2c0:	429e      	cmp	r6, r3
 800e2c2:	f840 1b04 	str.w	r1, [r0], #4
 800e2c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e2ca:	dcec      	bgt.n	800e2a6 <__multadd+0x12>
 800e2cc:	f1b8 0f00 	cmp.w	r8, #0
 800e2d0:	d022      	beq.n	800e318 <__multadd+0x84>
 800e2d2:	68a3      	ldr	r3, [r4, #8]
 800e2d4:	42b3      	cmp	r3, r6
 800e2d6:	dc19      	bgt.n	800e30c <__multadd+0x78>
 800e2d8:	6861      	ldr	r1, [r4, #4]
 800e2da:	4638      	mov	r0, r7
 800e2dc:	3101      	adds	r1, #1
 800e2de:	f7ff ff77 	bl	800e1d0 <_Balloc>
 800e2e2:	4605      	mov	r5, r0
 800e2e4:	b928      	cbnz	r0, 800e2f2 <__multadd+0x5e>
 800e2e6:	4602      	mov	r2, r0
 800e2e8:	4b0d      	ldr	r3, [pc, #52]	; (800e320 <__multadd+0x8c>)
 800e2ea:	480e      	ldr	r0, [pc, #56]	; (800e324 <__multadd+0x90>)
 800e2ec:	21b5      	movs	r1, #181	; 0xb5
 800e2ee:	f000 fbb7 	bl	800ea60 <__assert_func>
 800e2f2:	6922      	ldr	r2, [r4, #16]
 800e2f4:	3202      	adds	r2, #2
 800e2f6:	f104 010c 	add.w	r1, r4, #12
 800e2fa:	0092      	lsls	r2, r2, #2
 800e2fc:	300c      	adds	r0, #12
 800e2fe:	f7ff ff59 	bl	800e1b4 <memcpy>
 800e302:	4621      	mov	r1, r4
 800e304:	4638      	mov	r0, r7
 800e306:	f7ff ffa3 	bl	800e250 <_Bfree>
 800e30a:	462c      	mov	r4, r5
 800e30c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e310:	3601      	adds	r6, #1
 800e312:	f8c3 8014 	str.w	r8, [r3, #20]
 800e316:	6126      	str	r6, [r4, #16]
 800e318:	4620      	mov	r0, r4
 800e31a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e31e:	bf00      	nop
 800e320:	0800f89b 	.word	0x0800f89b
 800e324:	0800f8ac 	.word	0x0800f8ac

0800e328 <__hi0bits>:
 800e328:	0c03      	lsrs	r3, r0, #16
 800e32a:	041b      	lsls	r3, r3, #16
 800e32c:	b9d3      	cbnz	r3, 800e364 <__hi0bits+0x3c>
 800e32e:	0400      	lsls	r0, r0, #16
 800e330:	2310      	movs	r3, #16
 800e332:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e336:	bf04      	itt	eq
 800e338:	0200      	lsleq	r0, r0, #8
 800e33a:	3308      	addeq	r3, #8
 800e33c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e340:	bf04      	itt	eq
 800e342:	0100      	lsleq	r0, r0, #4
 800e344:	3304      	addeq	r3, #4
 800e346:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e34a:	bf04      	itt	eq
 800e34c:	0080      	lsleq	r0, r0, #2
 800e34e:	3302      	addeq	r3, #2
 800e350:	2800      	cmp	r0, #0
 800e352:	db05      	blt.n	800e360 <__hi0bits+0x38>
 800e354:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e358:	f103 0301 	add.w	r3, r3, #1
 800e35c:	bf08      	it	eq
 800e35e:	2320      	moveq	r3, #32
 800e360:	4618      	mov	r0, r3
 800e362:	4770      	bx	lr
 800e364:	2300      	movs	r3, #0
 800e366:	e7e4      	b.n	800e332 <__hi0bits+0xa>

0800e368 <__lo0bits>:
 800e368:	6803      	ldr	r3, [r0, #0]
 800e36a:	f013 0207 	ands.w	r2, r3, #7
 800e36e:	4601      	mov	r1, r0
 800e370:	d00b      	beq.n	800e38a <__lo0bits+0x22>
 800e372:	07da      	lsls	r2, r3, #31
 800e374:	d424      	bmi.n	800e3c0 <__lo0bits+0x58>
 800e376:	0798      	lsls	r0, r3, #30
 800e378:	bf49      	itett	mi
 800e37a:	085b      	lsrmi	r3, r3, #1
 800e37c:	089b      	lsrpl	r3, r3, #2
 800e37e:	2001      	movmi	r0, #1
 800e380:	600b      	strmi	r3, [r1, #0]
 800e382:	bf5c      	itt	pl
 800e384:	600b      	strpl	r3, [r1, #0]
 800e386:	2002      	movpl	r0, #2
 800e388:	4770      	bx	lr
 800e38a:	b298      	uxth	r0, r3
 800e38c:	b9b0      	cbnz	r0, 800e3bc <__lo0bits+0x54>
 800e38e:	0c1b      	lsrs	r3, r3, #16
 800e390:	2010      	movs	r0, #16
 800e392:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e396:	bf04      	itt	eq
 800e398:	0a1b      	lsreq	r3, r3, #8
 800e39a:	3008      	addeq	r0, #8
 800e39c:	071a      	lsls	r2, r3, #28
 800e39e:	bf04      	itt	eq
 800e3a0:	091b      	lsreq	r3, r3, #4
 800e3a2:	3004      	addeq	r0, #4
 800e3a4:	079a      	lsls	r2, r3, #30
 800e3a6:	bf04      	itt	eq
 800e3a8:	089b      	lsreq	r3, r3, #2
 800e3aa:	3002      	addeq	r0, #2
 800e3ac:	07da      	lsls	r2, r3, #31
 800e3ae:	d403      	bmi.n	800e3b8 <__lo0bits+0x50>
 800e3b0:	085b      	lsrs	r3, r3, #1
 800e3b2:	f100 0001 	add.w	r0, r0, #1
 800e3b6:	d005      	beq.n	800e3c4 <__lo0bits+0x5c>
 800e3b8:	600b      	str	r3, [r1, #0]
 800e3ba:	4770      	bx	lr
 800e3bc:	4610      	mov	r0, r2
 800e3be:	e7e8      	b.n	800e392 <__lo0bits+0x2a>
 800e3c0:	2000      	movs	r0, #0
 800e3c2:	4770      	bx	lr
 800e3c4:	2020      	movs	r0, #32
 800e3c6:	4770      	bx	lr

0800e3c8 <__i2b>:
 800e3c8:	b510      	push	{r4, lr}
 800e3ca:	460c      	mov	r4, r1
 800e3cc:	2101      	movs	r1, #1
 800e3ce:	f7ff feff 	bl	800e1d0 <_Balloc>
 800e3d2:	4602      	mov	r2, r0
 800e3d4:	b928      	cbnz	r0, 800e3e2 <__i2b+0x1a>
 800e3d6:	4b05      	ldr	r3, [pc, #20]	; (800e3ec <__i2b+0x24>)
 800e3d8:	4805      	ldr	r0, [pc, #20]	; (800e3f0 <__i2b+0x28>)
 800e3da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e3de:	f000 fb3f 	bl	800ea60 <__assert_func>
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	6144      	str	r4, [r0, #20]
 800e3e6:	6103      	str	r3, [r0, #16]
 800e3e8:	bd10      	pop	{r4, pc}
 800e3ea:	bf00      	nop
 800e3ec:	0800f89b 	.word	0x0800f89b
 800e3f0:	0800f8ac 	.word	0x0800f8ac

0800e3f4 <__multiply>:
 800e3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f8:	4614      	mov	r4, r2
 800e3fa:	690a      	ldr	r2, [r1, #16]
 800e3fc:	6923      	ldr	r3, [r4, #16]
 800e3fe:	429a      	cmp	r2, r3
 800e400:	bfb8      	it	lt
 800e402:	460b      	movlt	r3, r1
 800e404:	460d      	mov	r5, r1
 800e406:	bfbc      	itt	lt
 800e408:	4625      	movlt	r5, r4
 800e40a:	461c      	movlt	r4, r3
 800e40c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e410:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e414:	68ab      	ldr	r3, [r5, #8]
 800e416:	6869      	ldr	r1, [r5, #4]
 800e418:	eb0a 0709 	add.w	r7, sl, r9
 800e41c:	42bb      	cmp	r3, r7
 800e41e:	b085      	sub	sp, #20
 800e420:	bfb8      	it	lt
 800e422:	3101      	addlt	r1, #1
 800e424:	f7ff fed4 	bl	800e1d0 <_Balloc>
 800e428:	b930      	cbnz	r0, 800e438 <__multiply+0x44>
 800e42a:	4602      	mov	r2, r0
 800e42c:	4b42      	ldr	r3, [pc, #264]	; (800e538 <__multiply+0x144>)
 800e42e:	4843      	ldr	r0, [pc, #268]	; (800e53c <__multiply+0x148>)
 800e430:	f240 115d 	movw	r1, #349	; 0x15d
 800e434:	f000 fb14 	bl	800ea60 <__assert_func>
 800e438:	f100 0614 	add.w	r6, r0, #20
 800e43c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e440:	4633      	mov	r3, r6
 800e442:	2200      	movs	r2, #0
 800e444:	4543      	cmp	r3, r8
 800e446:	d31e      	bcc.n	800e486 <__multiply+0x92>
 800e448:	f105 0c14 	add.w	ip, r5, #20
 800e44c:	f104 0314 	add.w	r3, r4, #20
 800e450:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e454:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e458:	9202      	str	r2, [sp, #8]
 800e45a:	ebac 0205 	sub.w	r2, ip, r5
 800e45e:	3a15      	subs	r2, #21
 800e460:	f022 0203 	bic.w	r2, r2, #3
 800e464:	3204      	adds	r2, #4
 800e466:	f105 0115 	add.w	r1, r5, #21
 800e46a:	458c      	cmp	ip, r1
 800e46c:	bf38      	it	cc
 800e46e:	2204      	movcc	r2, #4
 800e470:	9201      	str	r2, [sp, #4]
 800e472:	9a02      	ldr	r2, [sp, #8]
 800e474:	9303      	str	r3, [sp, #12]
 800e476:	429a      	cmp	r2, r3
 800e478:	d808      	bhi.n	800e48c <__multiply+0x98>
 800e47a:	2f00      	cmp	r7, #0
 800e47c:	dc55      	bgt.n	800e52a <__multiply+0x136>
 800e47e:	6107      	str	r7, [r0, #16]
 800e480:	b005      	add	sp, #20
 800e482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e486:	f843 2b04 	str.w	r2, [r3], #4
 800e48a:	e7db      	b.n	800e444 <__multiply+0x50>
 800e48c:	f8b3 a000 	ldrh.w	sl, [r3]
 800e490:	f1ba 0f00 	cmp.w	sl, #0
 800e494:	d020      	beq.n	800e4d8 <__multiply+0xe4>
 800e496:	f105 0e14 	add.w	lr, r5, #20
 800e49a:	46b1      	mov	r9, r6
 800e49c:	2200      	movs	r2, #0
 800e49e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e4a2:	f8d9 b000 	ldr.w	fp, [r9]
 800e4a6:	b2a1      	uxth	r1, r4
 800e4a8:	fa1f fb8b 	uxth.w	fp, fp
 800e4ac:	fb0a b101 	mla	r1, sl, r1, fp
 800e4b0:	4411      	add	r1, r2
 800e4b2:	f8d9 2000 	ldr.w	r2, [r9]
 800e4b6:	0c24      	lsrs	r4, r4, #16
 800e4b8:	0c12      	lsrs	r2, r2, #16
 800e4ba:	fb0a 2404 	mla	r4, sl, r4, r2
 800e4be:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e4c2:	b289      	uxth	r1, r1
 800e4c4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e4c8:	45f4      	cmp	ip, lr
 800e4ca:	f849 1b04 	str.w	r1, [r9], #4
 800e4ce:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e4d2:	d8e4      	bhi.n	800e49e <__multiply+0xaa>
 800e4d4:	9901      	ldr	r1, [sp, #4]
 800e4d6:	5072      	str	r2, [r6, r1]
 800e4d8:	9a03      	ldr	r2, [sp, #12]
 800e4da:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e4de:	3304      	adds	r3, #4
 800e4e0:	f1b9 0f00 	cmp.w	r9, #0
 800e4e4:	d01f      	beq.n	800e526 <__multiply+0x132>
 800e4e6:	6834      	ldr	r4, [r6, #0]
 800e4e8:	f105 0114 	add.w	r1, r5, #20
 800e4ec:	46b6      	mov	lr, r6
 800e4ee:	f04f 0a00 	mov.w	sl, #0
 800e4f2:	880a      	ldrh	r2, [r1, #0]
 800e4f4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e4f8:	fb09 b202 	mla	r2, r9, r2, fp
 800e4fc:	4492      	add	sl, r2
 800e4fe:	b2a4      	uxth	r4, r4
 800e500:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e504:	f84e 4b04 	str.w	r4, [lr], #4
 800e508:	f851 4b04 	ldr.w	r4, [r1], #4
 800e50c:	f8be 2000 	ldrh.w	r2, [lr]
 800e510:	0c24      	lsrs	r4, r4, #16
 800e512:	fb09 2404 	mla	r4, r9, r4, r2
 800e516:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e51a:	458c      	cmp	ip, r1
 800e51c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e520:	d8e7      	bhi.n	800e4f2 <__multiply+0xfe>
 800e522:	9a01      	ldr	r2, [sp, #4]
 800e524:	50b4      	str	r4, [r6, r2]
 800e526:	3604      	adds	r6, #4
 800e528:	e7a3      	b.n	800e472 <__multiply+0x7e>
 800e52a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d1a5      	bne.n	800e47e <__multiply+0x8a>
 800e532:	3f01      	subs	r7, #1
 800e534:	e7a1      	b.n	800e47a <__multiply+0x86>
 800e536:	bf00      	nop
 800e538:	0800f89b 	.word	0x0800f89b
 800e53c:	0800f8ac 	.word	0x0800f8ac

0800e540 <__pow5mult>:
 800e540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e544:	4615      	mov	r5, r2
 800e546:	f012 0203 	ands.w	r2, r2, #3
 800e54a:	4606      	mov	r6, r0
 800e54c:	460f      	mov	r7, r1
 800e54e:	d007      	beq.n	800e560 <__pow5mult+0x20>
 800e550:	4c25      	ldr	r4, [pc, #148]	; (800e5e8 <__pow5mult+0xa8>)
 800e552:	3a01      	subs	r2, #1
 800e554:	2300      	movs	r3, #0
 800e556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e55a:	f7ff fe9b 	bl	800e294 <__multadd>
 800e55e:	4607      	mov	r7, r0
 800e560:	10ad      	asrs	r5, r5, #2
 800e562:	d03d      	beq.n	800e5e0 <__pow5mult+0xa0>
 800e564:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e566:	b97c      	cbnz	r4, 800e588 <__pow5mult+0x48>
 800e568:	2010      	movs	r0, #16
 800e56a:	f7ff fe1b 	bl	800e1a4 <malloc>
 800e56e:	4602      	mov	r2, r0
 800e570:	6270      	str	r0, [r6, #36]	; 0x24
 800e572:	b928      	cbnz	r0, 800e580 <__pow5mult+0x40>
 800e574:	4b1d      	ldr	r3, [pc, #116]	; (800e5ec <__pow5mult+0xac>)
 800e576:	481e      	ldr	r0, [pc, #120]	; (800e5f0 <__pow5mult+0xb0>)
 800e578:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e57c:	f000 fa70 	bl	800ea60 <__assert_func>
 800e580:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e584:	6004      	str	r4, [r0, #0]
 800e586:	60c4      	str	r4, [r0, #12]
 800e588:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e58c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e590:	b94c      	cbnz	r4, 800e5a6 <__pow5mult+0x66>
 800e592:	f240 2171 	movw	r1, #625	; 0x271
 800e596:	4630      	mov	r0, r6
 800e598:	f7ff ff16 	bl	800e3c8 <__i2b>
 800e59c:	2300      	movs	r3, #0
 800e59e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e5a2:	4604      	mov	r4, r0
 800e5a4:	6003      	str	r3, [r0, #0]
 800e5a6:	f04f 0900 	mov.w	r9, #0
 800e5aa:	07eb      	lsls	r3, r5, #31
 800e5ac:	d50a      	bpl.n	800e5c4 <__pow5mult+0x84>
 800e5ae:	4639      	mov	r1, r7
 800e5b0:	4622      	mov	r2, r4
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	f7ff ff1e 	bl	800e3f4 <__multiply>
 800e5b8:	4639      	mov	r1, r7
 800e5ba:	4680      	mov	r8, r0
 800e5bc:	4630      	mov	r0, r6
 800e5be:	f7ff fe47 	bl	800e250 <_Bfree>
 800e5c2:	4647      	mov	r7, r8
 800e5c4:	106d      	asrs	r5, r5, #1
 800e5c6:	d00b      	beq.n	800e5e0 <__pow5mult+0xa0>
 800e5c8:	6820      	ldr	r0, [r4, #0]
 800e5ca:	b938      	cbnz	r0, 800e5dc <__pow5mult+0x9c>
 800e5cc:	4622      	mov	r2, r4
 800e5ce:	4621      	mov	r1, r4
 800e5d0:	4630      	mov	r0, r6
 800e5d2:	f7ff ff0f 	bl	800e3f4 <__multiply>
 800e5d6:	6020      	str	r0, [r4, #0]
 800e5d8:	f8c0 9000 	str.w	r9, [r0]
 800e5dc:	4604      	mov	r4, r0
 800e5de:	e7e4      	b.n	800e5aa <__pow5mult+0x6a>
 800e5e0:	4638      	mov	r0, r7
 800e5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5e6:	bf00      	nop
 800e5e8:	0800fa00 	.word	0x0800fa00
 800e5ec:	0800f825 	.word	0x0800f825
 800e5f0:	0800f8ac 	.word	0x0800f8ac

0800e5f4 <__lshift>:
 800e5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5f8:	460c      	mov	r4, r1
 800e5fa:	6849      	ldr	r1, [r1, #4]
 800e5fc:	6923      	ldr	r3, [r4, #16]
 800e5fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e602:	68a3      	ldr	r3, [r4, #8]
 800e604:	4607      	mov	r7, r0
 800e606:	4691      	mov	r9, r2
 800e608:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e60c:	f108 0601 	add.w	r6, r8, #1
 800e610:	42b3      	cmp	r3, r6
 800e612:	db0b      	blt.n	800e62c <__lshift+0x38>
 800e614:	4638      	mov	r0, r7
 800e616:	f7ff fddb 	bl	800e1d0 <_Balloc>
 800e61a:	4605      	mov	r5, r0
 800e61c:	b948      	cbnz	r0, 800e632 <__lshift+0x3e>
 800e61e:	4602      	mov	r2, r0
 800e620:	4b28      	ldr	r3, [pc, #160]	; (800e6c4 <__lshift+0xd0>)
 800e622:	4829      	ldr	r0, [pc, #164]	; (800e6c8 <__lshift+0xd4>)
 800e624:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e628:	f000 fa1a 	bl	800ea60 <__assert_func>
 800e62c:	3101      	adds	r1, #1
 800e62e:	005b      	lsls	r3, r3, #1
 800e630:	e7ee      	b.n	800e610 <__lshift+0x1c>
 800e632:	2300      	movs	r3, #0
 800e634:	f100 0114 	add.w	r1, r0, #20
 800e638:	f100 0210 	add.w	r2, r0, #16
 800e63c:	4618      	mov	r0, r3
 800e63e:	4553      	cmp	r3, sl
 800e640:	db33      	blt.n	800e6aa <__lshift+0xb6>
 800e642:	6920      	ldr	r0, [r4, #16]
 800e644:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e648:	f104 0314 	add.w	r3, r4, #20
 800e64c:	f019 091f 	ands.w	r9, r9, #31
 800e650:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e654:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e658:	d02b      	beq.n	800e6b2 <__lshift+0xbe>
 800e65a:	f1c9 0e20 	rsb	lr, r9, #32
 800e65e:	468a      	mov	sl, r1
 800e660:	2200      	movs	r2, #0
 800e662:	6818      	ldr	r0, [r3, #0]
 800e664:	fa00 f009 	lsl.w	r0, r0, r9
 800e668:	4302      	orrs	r2, r0
 800e66a:	f84a 2b04 	str.w	r2, [sl], #4
 800e66e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e672:	459c      	cmp	ip, r3
 800e674:	fa22 f20e 	lsr.w	r2, r2, lr
 800e678:	d8f3      	bhi.n	800e662 <__lshift+0x6e>
 800e67a:	ebac 0304 	sub.w	r3, ip, r4
 800e67e:	3b15      	subs	r3, #21
 800e680:	f023 0303 	bic.w	r3, r3, #3
 800e684:	3304      	adds	r3, #4
 800e686:	f104 0015 	add.w	r0, r4, #21
 800e68a:	4584      	cmp	ip, r0
 800e68c:	bf38      	it	cc
 800e68e:	2304      	movcc	r3, #4
 800e690:	50ca      	str	r2, [r1, r3]
 800e692:	b10a      	cbz	r2, 800e698 <__lshift+0xa4>
 800e694:	f108 0602 	add.w	r6, r8, #2
 800e698:	3e01      	subs	r6, #1
 800e69a:	4638      	mov	r0, r7
 800e69c:	612e      	str	r6, [r5, #16]
 800e69e:	4621      	mov	r1, r4
 800e6a0:	f7ff fdd6 	bl	800e250 <_Bfree>
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	e7c5      	b.n	800e63e <__lshift+0x4a>
 800e6b2:	3904      	subs	r1, #4
 800e6b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e6bc:	459c      	cmp	ip, r3
 800e6be:	d8f9      	bhi.n	800e6b4 <__lshift+0xc0>
 800e6c0:	e7ea      	b.n	800e698 <__lshift+0xa4>
 800e6c2:	bf00      	nop
 800e6c4:	0800f89b 	.word	0x0800f89b
 800e6c8:	0800f8ac 	.word	0x0800f8ac

0800e6cc <__mcmp>:
 800e6cc:	b530      	push	{r4, r5, lr}
 800e6ce:	6902      	ldr	r2, [r0, #16]
 800e6d0:	690c      	ldr	r4, [r1, #16]
 800e6d2:	1b12      	subs	r2, r2, r4
 800e6d4:	d10e      	bne.n	800e6f4 <__mcmp+0x28>
 800e6d6:	f100 0314 	add.w	r3, r0, #20
 800e6da:	3114      	adds	r1, #20
 800e6dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e6e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e6e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e6e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e6ec:	42a5      	cmp	r5, r4
 800e6ee:	d003      	beq.n	800e6f8 <__mcmp+0x2c>
 800e6f0:	d305      	bcc.n	800e6fe <__mcmp+0x32>
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	4610      	mov	r0, r2
 800e6f6:	bd30      	pop	{r4, r5, pc}
 800e6f8:	4283      	cmp	r3, r0
 800e6fa:	d3f3      	bcc.n	800e6e4 <__mcmp+0x18>
 800e6fc:	e7fa      	b.n	800e6f4 <__mcmp+0x28>
 800e6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800e702:	e7f7      	b.n	800e6f4 <__mcmp+0x28>

0800e704 <__mdiff>:
 800e704:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e708:	460c      	mov	r4, r1
 800e70a:	4606      	mov	r6, r0
 800e70c:	4611      	mov	r1, r2
 800e70e:	4620      	mov	r0, r4
 800e710:	4617      	mov	r7, r2
 800e712:	f7ff ffdb 	bl	800e6cc <__mcmp>
 800e716:	1e05      	subs	r5, r0, #0
 800e718:	d110      	bne.n	800e73c <__mdiff+0x38>
 800e71a:	4629      	mov	r1, r5
 800e71c:	4630      	mov	r0, r6
 800e71e:	f7ff fd57 	bl	800e1d0 <_Balloc>
 800e722:	b930      	cbnz	r0, 800e732 <__mdiff+0x2e>
 800e724:	4b39      	ldr	r3, [pc, #228]	; (800e80c <__mdiff+0x108>)
 800e726:	4602      	mov	r2, r0
 800e728:	f240 2132 	movw	r1, #562	; 0x232
 800e72c:	4838      	ldr	r0, [pc, #224]	; (800e810 <__mdiff+0x10c>)
 800e72e:	f000 f997 	bl	800ea60 <__assert_func>
 800e732:	2301      	movs	r3, #1
 800e734:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e73c:	bfa4      	itt	ge
 800e73e:	463b      	movge	r3, r7
 800e740:	4627      	movge	r7, r4
 800e742:	4630      	mov	r0, r6
 800e744:	6879      	ldr	r1, [r7, #4]
 800e746:	bfa6      	itte	ge
 800e748:	461c      	movge	r4, r3
 800e74a:	2500      	movge	r5, #0
 800e74c:	2501      	movlt	r5, #1
 800e74e:	f7ff fd3f 	bl	800e1d0 <_Balloc>
 800e752:	b920      	cbnz	r0, 800e75e <__mdiff+0x5a>
 800e754:	4b2d      	ldr	r3, [pc, #180]	; (800e80c <__mdiff+0x108>)
 800e756:	4602      	mov	r2, r0
 800e758:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e75c:	e7e6      	b.n	800e72c <__mdiff+0x28>
 800e75e:	693e      	ldr	r6, [r7, #16]
 800e760:	60c5      	str	r5, [r0, #12]
 800e762:	6925      	ldr	r5, [r4, #16]
 800e764:	f107 0114 	add.w	r1, r7, #20
 800e768:	f104 0914 	add.w	r9, r4, #20
 800e76c:	f100 0e14 	add.w	lr, r0, #20
 800e770:	f107 0210 	add.w	r2, r7, #16
 800e774:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e778:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e77c:	46f2      	mov	sl, lr
 800e77e:	2700      	movs	r7, #0
 800e780:	f859 3b04 	ldr.w	r3, [r9], #4
 800e784:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e788:	fa1f f883 	uxth.w	r8, r3
 800e78c:	fa17 f78b 	uxtah	r7, r7, fp
 800e790:	0c1b      	lsrs	r3, r3, #16
 800e792:	eba7 0808 	sub.w	r8, r7, r8
 800e796:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e79a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e79e:	fa1f f888 	uxth.w	r8, r8
 800e7a2:	141f      	asrs	r7, r3, #16
 800e7a4:	454d      	cmp	r5, r9
 800e7a6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e7aa:	f84a 3b04 	str.w	r3, [sl], #4
 800e7ae:	d8e7      	bhi.n	800e780 <__mdiff+0x7c>
 800e7b0:	1b2b      	subs	r3, r5, r4
 800e7b2:	3b15      	subs	r3, #21
 800e7b4:	f023 0303 	bic.w	r3, r3, #3
 800e7b8:	3304      	adds	r3, #4
 800e7ba:	3415      	adds	r4, #21
 800e7bc:	42a5      	cmp	r5, r4
 800e7be:	bf38      	it	cc
 800e7c0:	2304      	movcc	r3, #4
 800e7c2:	4419      	add	r1, r3
 800e7c4:	4473      	add	r3, lr
 800e7c6:	469e      	mov	lr, r3
 800e7c8:	460d      	mov	r5, r1
 800e7ca:	4565      	cmp	r5, ip
 800e7cc:	d30e      	bcc.n	800e7ec <__mdiff+0xe8>
 800e7ce:	f10c 0203 	add.w	r2, ip, #3
 800e7d2:	1a52      	subs	r2, r2, r1
 800e7d4:	f022 0203 	bic.w	r2, r2, #3
 800e7d8:	3903      	subs	r1, #3
 800e7da:	458c      	cmp	ip, r1
 800e7dc:	bf38      	it	cc
 800e7de:	2200      	movcc	r2, #0
 800e7e0:	441a      	add	r2, r3
 800e7e2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e7e6:	b17b      	cbz	r3, 800e808 <__mdiff+0x104>
 800e7e8:	6106      	str	r6, [r0, #16]
 800e7ea:	e7a5      	b.n	800e738 <__mdiff+0x34>
 800e7ec:	f855 8b04 	ldr.w	r8, [r5], #4
 800e7f0:	fa17 f488 	uxtah	r4, r7, r8
 800e7f4:	1422      	asrs	r2, r4, #16
 800e7f6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e7fa:	b2a4      	uxth	r4, r4
 800e7fc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e800:	f84e 4b04 	str.w	r4, [lr], #4
 800e804:	1417      	asrs	r7, r2, #16
 800e806:	e7e0      	b.n	800e7ca <__mdiff+0xc6>
 800e808:	3e01      	subs	r6, #1
 800e80a:	e7ea      	b.n	800e7e2 <__mdiff+0xde>
 800e80c:	0800f89b 	.word	0x0800f89b
 800e810:	0800f8ac 	.word	0x0800f8ac

0800e814 <__d2b>:
 800e814:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e818:	4689      	mov	r9, r1
 800e81a:	2101      	movs	r1, #1
 800e81c:	ec57 6b10 	vmov	r6, r7, d0
 800e820:	4690      	mov	r8, r2
 800e822:	f7ff fcd5 	bl	800e1d0 <_Balloc>
 800e826:	4604      	mov	r4, r0
 800e828:	b930      	cbnz	r0, 800e838 <__d2b+0x24>
 800e82a:	4602      	mov	r2, r0
 800e82c:	4b25      	ldr	r3, [pc, #148]	; (800e8c4 <__d2b+0xb0>)
 800e82e:	4826      	ldr	r0, [pc, #152]	; (800e8c8 <__d2b+0xb4>)
 800e830:	f240 310a 	movw	r1, #778	; 0x30a
 800e834:	f000 f914 	bl	800ea60 <__assert_func>
 800e838:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e83c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e840:	bb35      	cbnz	r5, 800e890 <__d2b+0x7c>
 800e842:	2e00      	cmp	r6, #0
 800e844:	9301      	str	r3, [sp, #4]
 800e846:	d028      	beq.n	800e89a <__d2b+0x86>
 800e848:	4668      	mov	r0, sp
 800e84a:	9600      	str	r6, [sp, #0]
 800e84c:	f7ff fd8c 	bl	800e368 <__lo0bits>
 800e850:	9900      	ldr	r1, [sp, #0]
 800e852:	b300      	cbz	r0, 800e896 <__d2b+0x82>
 800e854:	9a01      	ldr	r2, [sp, #4]
 800e856:	f1c0 0320 	rsb	r3, r0, #32
 800e85a:	fa02 f303 	lsl.w	r3, r2, r3
 800e85e:	430b      	orrs	r3, r1
 800e860:	40c2      	lsrs	r2, r0
 800e862:	6163      	str	r3, [r4, #20]
 800e864:	9201      	str	r2, [sp, #4]
 800e866:	9b01      	ldr	r3, [sp, #4]
 800e868:	61a3      	str	r3, [r4, #24]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	bf14      	ite	ne
 800e86e:	2202      	movne	r2, #2
 800e870:	2201      	moveq	r2, #1
 800e872:	6122      	str	r2, [r4, #16]
 800e874:	b1d5      	cbz	r5, 800e8ac <__d2b+0x98>
 800e876:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e87a:	4405      	add	r5, r0
 800e87c:	f8c9 5000 	str.w	r5, [r9]
 800e880:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e884:	f8c8 0000 	str.w	r0, [r8]
 800e888:	4620      	mov	r0, r4
 800e88a:	b003      	add	sp, #12
 800e88c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e890:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e894:	e7d5      	b.n	800e842 <__d2b+0x2e>
 800e896:	6161      	str	r1, [r4, #20]
 800e898:	e7e5      	b.n	800e866 <__d2b+0x52>
 800e89a:	a801      	add	r0, sp, #4
 800e89c:	f7ff fd64 	bl	800e368 <__lo0bits>
 800e8a0:	9b01      	ldr	r3, [sp, #4]
 800e8a2:	6163      	str	r3, [r4, #20]
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	6122      	str	r2, [r4, #16]
 800e8a8:	3020      	adds	r0, #32
 800e8aa:	e7e3      	b.n	800e874 <__d2b+0x60>
 800e8ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e8b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e8b4:	f8c9 0000 	str.w	r0, [r9]
 800e8b8:	6918      	ldr	r0, [r3, #16]
 800e8ba:	f7ff fd35 	bl	800e328 <__hi0bits>
 800e8be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e8c2:	e7df      	b.n	800e884 <__d2b+0x70>
 800e8c4:	0800f89b 	.word	0x0800f89b
 800e8c8:	0800f8ac 	.word	0x0800f8ac

0800e8cc <_calloc_r>:
 800e8cc:	b513      	push	{r0, r1, r4, lr}
 800e8ce:	434a      	muls	r2, r1
 800e8d0:	4611      	mov	r1, r2
 800e8d2:	9201      	str	r2, [sp, #4]
 800e8d4:	f000 f85a 	bl	800e98c <_malloc_r>
 800e8d8:	4604      	mov	r4, r0
 800e8da:	b118      	cbz	r0, 800e8e4 <_calloc_r+0x18>
 800e8dc:	9a01      	ldr	r2, [sp, #4]
 800e8de:	2100      	movs	r1, #0
 800e8e0:	f7fe fa02 	bl	800cce8 <memset>
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	b002      	add	sp, #8
 800e8e8:	bd10      	pop	{r4, pc}
	...

0800e8ec <_free_r>:
 800e8ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8ee:	2900      	cmp	r1, #0
 800e8f0:	d048      	beq.n	800e984 <_free_r+0x98>
 800e8f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8f6:	9001      	str	r0, [sp, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	f1a1 0404 	sub.w	r4, r1, #4
 800e8fe:	bfb8      	it	lt
 800e900:	18e4      	addlt	r4, r4, r3
 800e902:	f000 f8ef 	bl	800eae4 <__malloc_lock>
 800e906:	4a20      	ldr	r2, [pc, #128]	; (800e988 <_free_r+0x9c>)
 800e908:	9801      	ldr	r0, [sp, #4]
 800e90a:	6813      	ldr	r3, [r2, #0]
 800e90c:	4615      	mov	r5, r2
 800e90e:	b933      	cbnz	r3, 800e91e <_free_r+0x32>
 800e910:	6063      	str	r3, [r4, #4]
 800e912:	6014      	str	r4, [r2, #0]
 800e914:	b003      	add	sp, #12
 800e916:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e91a:	f000 b8e9 	b.w	800eaf0 <__malloc_unlock>
 800e91e:	42a3      	cmp	r3, r4
 800e920:	d90b      	bls.n	800e93a <_free_r+0x4e>
 800e922:	6821      	ldr	r1, [r4, #0]
 800e924:	1862      	adds	r2, r4, r1
 800e926:	4293      	cmp	r3, r2
 800e928:	bf04      	itt	eq
 800e92a:	681a      	ldreq	r2, [r3, #0]
 800e92c:	685b      	ldreq	r3, [r3, #4]
 800e92e:	6063      	str	r3, [r4, #4]
 800e930:	bf04      	itt	eq
 800e932:	1852      	addeq	r2, r2, r1
 800e934:	6022      	streq	r2, [r4, #0]
 800e936:	602c      	str	r4, [r5, #0]
 800e938:	e7ec      	b.n	800e914 <_free_r+0x28>
 800e93a:	461a      	mov	r2, r3
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	b10b      	cbz	r3, 800e944 <_free_r+0x58>
 800e940:	42a3      	cmp	r3, r4
 800e942:	d9fa      	bls.n	800e93a <_free_r+0x4e>
 800e944:	6811      	ldr	r1, [r2, #0]
 800e946:	1855      	adds	r5, r2, r1
 800e948:	42a5      	cmp	r5, r4
 800e94a:	d10b      	bne.n	800e964 <_free_r+0x78>
 800e94c:	6824      	ldr	r4, [r4, #0]
 800e94e:	4421      	add	r1, r4
 800e950:	1854      	adds	r4, r2, r1
 800e952:	42a3      	cmp	r3, r4
 800e954:	6011      	str	r1, [r2, #0]
 800e956:	d1dd      	bne.n	800e914 <_free_r+0x28>
 800e958:	681c      	ldr	r4, [r3, #0]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	6053      	str	r3, [r2, #4]
 800e95e:	4421      	add	r1, r4
 800e960:	6011      	str	r1, [r2, #0]
 800e962:	e7d7      	b.n	800e914 <_free_r+0x28>
 800e964:	d902      	bls.n	800e96c <_free_r+0x80>
 800e966:	230c      	movs	r3, #12
 800e968:	6003      	str	r3, [r0, #0]
 800e96a:	e7d3      	b.n	800e914 <_free_r+0x28>
 800e96c:	6825      	ldr	r5, [r4, #0]
 800e96e:	1961      	adds	r1, r4, r5
 800e970:	428b      	cmp	r3, r1
 800e972:	bf04      	itt	eq
 800e974:	6819      	ldreq	r1, [r3, #0]
 800e976:	685b      	ldreq	r3, [r3, #4]
 800e978:	6063      	str	r3, [r4, #4]
 800e97a:	bf04      	itt	eq
 800e97c:	1949      	addeq	r1, r1, r5
 800e97e:	6021      	streq	r1, [r4, #0]
 800e980:	6054      	str	r4, [r2, #4]
 800e982:	e7c7      	b.n	800e914 <_free_r+0x28>
 800e984:	b003      	add	sp, #12
 800e986:	bd30      	pop	{r4, r5, pc}
 800e988:	24000a0c 	.word	0x24000a0c

0800e98c <_malloc_r>:
 800e98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e98e:	1ccd      	adds	r5, r1, #3
 800e990:	f025 0503 	bic.w	r5, r5, #3
 800e994:	3508      	adds	r5, #8
 800e996:	2d0c      	cmp	r5, #12
 800e998:	bf38      	it	cc
 800e99a:	250c      	movcc	r5, #12
 800e99c:	2d00      	cmp	r5, #0
 800e99e:	4606      	mov	r6, r0
 800e9a0:	db01      	blt.n	800e9a6 <_malloc_r+0x1a>
 800e9a2:	42a9      	cmp	r1, r5
 800e9a4:	d903      	bls.n	800e9ae <_malloc_r+0x22>
 800e9a6:	230c      	movs	r3, #12
 800e9a8:	6033      	str	r3, [r6, #0]
 800e9aa:	2000      	movs	r0, #0
 800e9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9ae:	f000 f899 	bl	800eae4 <__malloc_lock>
 800e9b2:	4921      	ldr	r1, [pc, #132]	; (800ea38 <_malloc_r+0xac>)
 800e9b4:	680a      	ldr	r2, [r1, #0]
 800e9b6:	4614      	mov	r4, r2
 800e9b8:	b99c      	cbnz	r4, 800e9e2 <_malloc_r+0x56>
 800e9ba:	4f20      	ldr	r7, [pc, #128]	; (800ea3c <_malloc_r+0xb0>)
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	b923      	cbnz	r3, 800e9ca <_malloc_r+0x3e>
 800e9c0:	4621      	mov	r1, r4
 800e9c2:	4630      	mov	r0, r6
 800e9c4:	f000 f83c 	bl	800ea40 <_sbrk_r>
 800e9c8:	6038      	str	r0, [r7, #0]
 800e9ca:	4629      	mov	r1, r5
 800e9cc:	4630      	mov	r0, r6
 800e9ce:	f000 f837 	bl	800ea40 <_sbrk_r>
 800e9d2:	1c43      	adds	r3, r0, #1
 800e9d4:	d123      	bne.n	800ea1e <_malloc_r+0x92>
 800e9d6:	230c      	movs	r3, #12
 800e9d8:	6033      	str	r3, [r6, #0]
 800e9da:	4630      	mov	r0, r6
 800e9dc:	f000 f888 	bl	800eaf0 <__malloc_unlock>
 800e9e0:	e7e3      	b.n	800e9aa <_malloc_r+0x1e>
 800e9e2:	6823      	ldr	r3, [r4, #0]
 800e9e4:	1b5b      	subs	r3, r3, r5
 800e9e6:	d417      	bmi.n	800ea18 <_malloc_r+0x8c>
 800e9e8:	2b0b      	cmp	r3, #11
 800e9ea:	d903      	bls.n	800e9f4 <_malloc_r+0x68>
 800e9ec:	6023      	str	r3, [r4, #0]
 800e9ee:	441c      	add	r4, r3
 800e9f0:	6025      	str	r5, [r4, #0]
 800e9f2:	e004      	b.n	800e9fe <_malloc_r+0x72>
 800e9f4:	6863      	ldr	r3, [r4, #4]
 800e9f6:	42a2      	cmp	r2, r4
 800e9f8:	bf0c      	ite	eq
 800e9fa:	600b      	streq	r3, [r1, #0]
 800e9fc:	6053      	strne	r3, [r2, #4]
 800e9fe:	4630      	mov	r0, r6
 800ea00:	f000 f876 	bl	800eaf0 <__malloc_unlock>
 800ea04:	f104 000b 	add.w	r0, r4, #11
 800ea08:	1d23      	adds	r3, r4, #4
 800ea0a:	f020 0007 	bic.w	r0, r0, #7
 800ea0e:	1ac2      	subs	r2, r0, r3
 800ea10:	d0cc      	beq.n	800e9ac <_malloc_r+0x20>
 800ea12:	1a1b      	subs	r3, r3, r0
 800ea14:	50a3      	str	r3, [r4, r2]
 800ea16:	e7c9      	b.n	800e9ac <_malloc_r+0x20>
 800ea18:	4622      	mov	r2, r4
 800ea1a:	6864      	ldr	r4, [r4, #4]
 800ea1c:	e7cc      	b.n	800e9b8 <_malloc_r+0x2c>
 800ea1e:	1cc4      	adds	r4, r0, #3
 800ea20:	f024 0403 	bic.w	r4, r4, #3
 800ea24:	42a0      	cmp	r0, r4
 800ea26:	d0e3      	beq.n	800e9f0 <_malloc_r+0x64>
 800ea28:	1a21      	subs	r1, r4, r0
 800ea2a:	4630      	mov	r0, r6
 800ea2c:	f000 f808 	bl	800ea40 <_sbrk_r>
 800ea30:	3001      	adds	r0, #1
 800ea32:	d1dd      	bne.n	800e9f0 <_malloc_r+0x64>
 800ea34:	e7cf      	b.n	800e9d6 <_malloc_r+0x4a>
 800ea36:	bf00      	nop
 800ea38:	24000a0c 	.word	0x24000a0c
 800ea3c:	24000a10 	.word	0x24000a10

0800ea40 <_sbrk_r>:
 800ea40:	b538      	push	{r3, r4, r5, lr}
 800ea42:	4d06      	ldr	r5, [pc, #24]	; (800ea5c <_sbrk_r+0x1c>)
 800ea44:	2300      	movs	r3, #0
 800ea46:	4604      	mov	r4, r0
 800ea48:	4608      	mov	r0, r1
 800ea4a:	602b      	str	r3, [r5, #0]
 800ea4c:	f7f4 fbc2 	bl	80031d4 <_sbrk>
 800ea50:	1c43      	adds	r3, r0, #1
 800ea52:	d102      	bne.n	800ea5a <_sbrk_r+0x1a>
 800ea54:	682b      	ldr	r3, [r5, #0]
 800ea56:	b103      	cbz	r3, 800ea5a <_sbrk_r+0x1a>
 800ea58:	6023      	str	r3, [r4, #0]
 800ea5a:	bd38      	pop	{r3, r4, r5, pc}
 800ea5c:	24000a18 	.word	0x24000a18

0800ea60 <__assert_func>:
 800ea60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea62:	4614      	mov	r4, r2
 800ea64:	461a      	mov	r2, r3
 800ea66:	4b09      	ldr	r3, [pc, #36]	; (800ea8c <__assert_func+0x2c>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	4605      	mov	r5, r0
 800ea6c:	68d8      	ldr	r0, [r3, #12]
 800ea6e:	b14c      	cbz	r4, 800ea84 <__assert_func+0x24>
 800ea70:	4b07      	ldr	r3, [pc, #28]	; (800ea90 <__assert_func+0x30>)
 800ea72:	9100      	str	r1, [sp, #0]
 800ea74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea78:	4906      	ldr	r1, [pc, #24]	; (800ea94 <__assert_func+0x34>)
 800ea7a:	462b      	mov	r3, r5
 800ea7c:	f000 f80e 	bl	800ea9c <fiprintf>
 800ea80:	f000 fa64 	bl	800ef4c <abort>
 800ea84:	4b04      	ldr	r3, [pc, #16]	; (800ea98 <__assert_func+0x38>)
 800ea86:	461c      	mov	r4, r3
 800ea88:	e7f3      	b.n	800ea72 <__assert_func+0x12>
 800ea8a:	bf00      	nop
 800ea8c:	24000010 	.word	0x24000010
 800ea90:	0800fa0c 	.word	0x0800fa0c
 800ea94:	0800fa19 	.word	0x0800fa19
 800ea98:	0800fa47 	.word	0x0800fa47

0800ea9c <fiprintf>:
 800ea9c:	b40e      	push	{r1, r2, r3}
 800ea9e:	b503      	push	{r0, r1, lr}
 800eaa0:	4601      	mov	r1, r0
 800eaa2:	ab03      	add	r3, sp, #12
 800eaa4:	4805      	ldr	r0, [pc, #20]	; (800eabc <fiprintf+0x20>)
 800eaa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaaa:	6800      	ldr	r0, [r0, #0]
 800eaac:	9301      	str	r3, [sp, #4]
 800eaae:	f000 f84f 	bl	800eb50 <_vfiprintf_r>
 800eab2:	b002      	add	sp, #8
 800eab4:	f85d eb04 	ldr.w	lr, [sp], #4
 800eab8:	b003      	add	sp, #12
 800eaba:	4770      	bx	lr
 800eabc:	24000010 	.word	0x24000010

0800eac0 <__ascii_mbtowc>:
 800eac0:	b082      	sub	sp, #8
 800eac2:	b901      	cbnz	r1, 800eac6 <__ascii_mbtowc+0x6>
 800eac4:	a901      	add	r1, sp, #4
 800eac6:	b142      	cbz	r2, 800eada <__ascii_mbtowc+0x1a>
 800eac8:	b14b      	cbz	r3, 800eade <__ascii_mbtowc+0x1e>
 800eaca:	7813      	ldrb	r3, [r2, #0]
 800eacc:	600b      	str	r3, [r1, #0]
 800eace:	7812      	ldrb	r2, [r2, #0]
 800ead0:	1e10      	subs	r0, r2, #0
 800ead2:	bf18      	it	ne
 800ead4:	2001      	movne	r0, #1
 800ead6:	b002      	add	sp, #8
 800ead8:	4770      	bx	lr
 800eada:	4610      	mov	r0, r2
 800eadc:	e7fb      	b.n	800ead6 <__ascii_mbtowc+0x16>
 800eade:	f06f 0001 	mvn.w	r0, #1
 800eae2:	e7f8      	b.n	800ead6 <__ascii_mbtowc+0x16>

0800eae4 <__malloc_lock>:
 800eae4:	4801      	ldr	r0, [pc, #4]	; (800eaec <__malloc_lock+0x8>)
 800eae6:	f000 bbf1 	b.w	800f2cc <__retarget_lock_acquire_recursive>
 800eaea:	bf00      	nop
 800eaec:	24000a20 	.word	0x24000a20

0800eaf0 <__malloc_unlock>:
 800eaf0:	4801      	ldr	r0, [pc, #4]	; (800eaf8 <__malloc_unlock+0x8>)
 800eaf2:	f000 bbec 	b.w	800f2ce <__retarget_lock_release_recursive>
 800eaf6:	bf00      	nop
 800eaf8:	24000a20 	.word	0x24000a20

0800eafc <__sfputc_r>:
 800eafc:	6893      	ldr	r3, [r2, #8]
 800eafe:	3b01      	subs	r3, #1
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	b410      	push	{r4}
 800eb04:	6093      	str	r3, [r2, #8]
 800eb06:	da08      	bge.n	800eb1a <__sfputc_r+0x1e>
 800eb08:	6994      	ldr	r4, [r2, #24]
 800eb0a:	42a3      	cmp	r3, r4
 800eb0c:	db01      	blt.n	800eb12 <__sfputc_r+0x16>
 800eb0e:	290a      	cmp	r1, #10
 800eb10:	d103      	bne.n	800eb1a <__sfputc_r+0x1e>
 800eb12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb16:	f000 b94b 	b.w	800edb0 <__swbuf_r>
 800eb1a:	6813      	ldr	r3, [r2, #0]
 800eb1c:	1c58      	adds	r0, r3, #1
 800eb1e:	6010      	str	r0, [r2, #0]
 800eb20:	7019      	strb	r1, [r3, #0]
 800eb22:	4608      	mov	r0, r1
 800eb24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb28:	4770      	bx	lr

0800eb2a <__sfputs_r>:
 800eb2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb2c:	4606      	mov	r6, r0
 800eb2e:	460f      	mov	r7, r1
 800eb30:	4614      	mov	r4, r2
 800eb32:	18d5      	adds	r5, r2, r3
 800eb34:	42ac      	cmp	r4, r5
 800eb36:	d101      	bne.n	800eb3c <__sfputs_r+0x12>
 800eb38:	2000      	movs	r0, #0
 800eb3a:	e007      	b.n	800eb4c <__sfputs_r+0x22>
 800eb3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb40:	463a      	mov	r2, r7
 800eb42:	4630      	mov	r0, r6
 800eb44:	f7ff ffda 	bl	800eafc <__sfputc_r>
 800eb48:	1c43      	adds	r3, r0, #1
 800eb4a:	d1f3      	bne.n	800eb34 <__sfputs_r+0xa>
 800eb4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb50 <_vfiprintf_r>:
 800eb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb54:	460d      	mov	r5, r1
 800eb56:	b09d      	sub	sp, #116	; 0x74
 800eb58:	4614      	mov	r4, r2
 800eb5a:	4698      	mov	r8, r3
 800eb5c:	4606      	mov	r6, r0
 800eb5e:	b118      	cbz	r0, 800eb68 <_vfiprintf_r+0x18>
 800eb60:	6983      	ldr	r3, [r0, #24]
 800eb62:	b90b      	cbnz	r3, 800eb68 <_vfiprintf_r+0x18>
 800eb64:	f000 fb14 	bl	800f190 <__sinit>
 800eb68:	4b89      	ldr	r3, [pc, #548]	; (800ed90 <_vfiprintf_r+0x240>)
 800eb6a:	429d      	cmp	r5, r3
 800eb6c:	d11b      	bne.n	800eba6 <_vfiprintf_r+0x56>
 800eb6e:	6875      	ldr	r5, [r6, #4]
 800eb70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb72:	07d9      	lsls	r1, r3, #31
 800eb74:	d405      	bmi.n	800eb82 <_vfiprintf_r+0x32>
 800eb76:	89ab      	ldrh	r3, [r5, #12]
 800eb78:	059a      	lsls	r2, r3, #22
 800eb7a:	d402      	bmi.n	800eb82 <_vfiprintf_r+0x32>
 800eb7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb7e:	f000 fba5 	bl	800f2cc <__retarget_lock_acquire_recursive>
 800eb82:	89ab      	ldrh	r3, [r5, #12]
 800eb84:	071b      	lsls	r3, r3, #28
 800eb86:	d501      	bpl.n	800eb8c <_vfiprintf_r+0x3c>
 800eb88:	692b      	ldr	r3, [r5, #16]
 800eb8a:	b9eb      	cbnz	r3, 800ebc8 <_vfiprintf_r+0x78>
 800eb8c:	4629      	mov	r1, r5
 800eb8e:	4630      	mov	r0, r6
 800eb90:	f000 f96e 	bl	800ee70 <__swsetup_r>
 800eb94:	b1c0      	cbz	r0, 800ebc8 <_vfiprintf_r+0x78>
 800eb96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb98:	07dc      	lsls	r4, r3, #31
 800eb9a:	d50e      	bpl.n	800ebba <_vfiprintf_r+0x6a>
 800eb9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eba0:	b01d      	add	sp, #116	; 0x74
 800eba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eba6:	4b7b      	ldr	r3, [pc, #492]	; (800ed94 <_vfiprintf_r+0x244>)
 800eba8:	429d      	cmp	r5, r3
 800ebaa:	d101      	bne.n	800ebb0 <_vfiprintf_r+0x60>
 800ebac:	68b5      	ldr	r5, [r6, #8]
 800ebae:	e7df      	b.n	800eb70 <_vfiprintf_r+0x20>
 800ebb0:	4b79      	ldr	r3, [pc, #484]	; (800ed98 <_vfiprintf_r+0x248>)
 800ebb2:	429d      	cmp	r5, r3
 800ebb4:	bf08      	it	eq
 800ebb6:	68f5      	ldreq	r5, [r6, #12]
 800ebb8:	e7da      	b.n	800eb70 <_vfiprintf_r+0x20>
 800ebba:	89ab      	ldrh	r3, [r5, #12]
 800ebbc:	0598      	lsls	r0, r3, #22
 800ebbe:	d4ed      	bmi.n	800eb9c <_vfiprintf_r+0x4c>
 800ebc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebc2:	f000 fb84 	bl	800f2ce <__retarget_lock_release_recursive>
 800ebc6:	e7e9      	b.n	800eb9c <_vfiprintf_r+0x4c>
 800ebc8:	2300      	movs	r3, #0
 800ebca:	9309      	str	r3, [sp, #36]	; 0x24
 800ebcc:	2320      	movs	r3, #32
 800ebce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebd2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebd6:	2330      	movs	r3, #48	; 0x30
 800ebd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ed9c <_vfiprintf_r+0x24c>
 800ebdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebe0:	f04f 0901 	mov.w	r9, #1
 800ebe4:	4623      	mov	r3, r4
 800ebe6:	469a      	mov	sl, r3
 800ebe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebec:	b10a      	cbz	r2, 800ebf2 <_vfiprintf_r+0xa2>
 800ebee:	2a25      	cmp	r2, #37	; 0x25
 800ebf0:	d1f9      	bne.n	800ebe6 <_vfiprintf_r+0x96>
 800ebf2:	ebba 0b04 	subs.w	fp, sl, r4
 800ebf6:	d00b      	beq.n	800ec10 <_vfiprintf_r+0xc0>
 800ebf8:	465b      	mov	r3, fp
 800ebfa:	4622      	mov	r2, r4
 800ebfc:	4629      	mov	r1, r5
 800ebfe:	4630      	mov	r0, r6
 800ec00:	f7ff ff93 	bl	800eb2a <__sfputs_r>
 800ec04:	3001      	adds	r0, #1
 800ec06:	f000 80aa 	beq.w	800ed5e <_vfiprintf_r+0x20e>
 800ec0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec0c:	445a      	add	r2, fp
 800ec0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ec10:	f89a 3000 	ldrb.w	r3, [sl]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	f000 80a2 	beq.w	800ed5e <_vfiprintf_r+0x20e>
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ec20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec24:	f10a 0a01 	add.w	sl, sl, #1
 800ec28:	9304      	str	r3, [sp, #16]
 800ec2a:	9307      	str	r3, [sp, #28]
 800ec2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec30:	931a      	str	r3, [sp, #104]	; 0x68
 800ec32:	4654      	mov	r4, sl
 800ec34:	2205      	movs	r2, #5
 800ec36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec3a:	4858      	ldr	r0, [pc, #352]	; (800ed9c <_vfiprintf_r+0x24c>)
 800ec3c:	f7f1 fb58 	bl	80002f0 <memchr>
 800ec40:	9a04      	ldr	r2, [sp, #16]
 800ec42:	b9d8      	cbnz	r0, 800ec7c <_vfiprintf_r+0x12c>
 800ec44:	06d1      	lsls	r1, r2, #27
 800ec46:	bf44      	itt	mi
 800ec48:	2320      	movmi	r3, #32
 800ec4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec4e:	0713      	lsls	r3, r2, #28
 800ec50:	bf44      	itt	mi
 800ec52:	232b      	movmi	r3, #43	; 0x2b
 800ec54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec58:	f89a 3000 	ldrb.w	r3, [sl]
 800ec5c:	2b2a      	cmp	r3, #42	; 0x2a
 800ec5e:	d015      	beq.n	800ec8c <_vfiprintf_r+0x13c>
 800ec60:	9a07      	ldr	r2, [sp, #28]
 800ec62:	4654      	mov	r4, sl
 800ec64:	2000      	movs	r0, #0
 800ec66:	f04f 0c0a 	mov.w	ip, #10
 800ec6a:	4621      	mov	r1, r4
 800ec6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec70:	3b30      	subs	r3, #48	; 0x30
 800ec72:	2b09      	cmp	r3, #9
 800ec74:	d94e      	bls.n	800ed14 <_vfiprintf_r+0x1c4>
 800ec76:	b1b0      	cbz	r0, 800eca6 <_vfiprintf_r+0x156>
 800ec78:	9207      	str	r2, [sp, #28]
 800ec7a:	e014      	b.n	800eca6 <_vfiprintf_r+0x156>
 800ec7c:	eba0 0308 	sub.w	r3, r0, r8
 800ec80:	fa09 f303 	lsl.w	r3, r9, r3
 800ec84:	4313      	orrs	r3, r2
 800ec86:	9304      	str	r3, [sp, #16]
 800ec88:	46a2      	mov	sl, r4
 800ec8a:	e7d2      	b.n	800ec32 <_vfiprintf_r+0xe2>
 800ec8c:	9b03      	ldr	r3, [sp, #12]
 800ec8e:	1d19      	adds	r1, r3, #4
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	9103      	str	r1, [sp, #12]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	bfbb      	ittet	lt
 800ec98:	425b      	neglt	r3, r3
 800ec9a:	f042 0202 	orrlt.w	r2, r2, #2
 800ec9e:	9307      	strge	r3, [sp, #28]
 800eca0:	9307      	strlt	r3, [sp, #28]
 800eca2:	bfb8      	it	lt
 800eca4:	9204      	strlt	r2, [sp, #16]
 800eca6:	7823      	ldrb	r3, [r4, #0]
 800eca8:	2b2e      	cmp	r3, #46	; 0x2e
 800ecaa:	d10c      	bne.n	800ecc6 <_vfiprintf_r+0x176>
 800ecac:	7863      	ldrb	r3, [r4, #1]
 800ecae:	2b2a      	cmp	r3, #42	; 0x2a
 800ecb0:	d135      	bne.n	800ed1e <_vfiprintf_r+0x1ce>
 800ecb2:	9b03      	ldr	r3, [sp, #12]
 800ecb4:	1d1a      	adds	r2, r3, #4
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	9203      	str	r2, [sp, #12]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	bfb8      	it	lt
 800ecbe:	f04f 33ff 	movlt.w	r3, #4294967295
 800ecc2:	3402      	adds	r4, #2
 800ecc4:	9305      	str	r3, [sp, #20]
 800ecc6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800edac <_vfiprintf_r+0x25c>
 800ecca:	7821      	ldrb	r1, [r4, #0]
 800eccc:	2203      	movs	r2, #3
 800ecce:	4650      	mov	r0, sl
 800ecd0:	f7f1 fb0e 	bl	80002f0 <memchr>
 800ecd4:	b140      	cbz	r0, 800ece8 <_vfiprintf_r+0x198>
 800ecd6:	2340      	movs	r3, #64	; 0x40
 800ecd8:	eba0 000a 	sub.w	r0, r0, sl
 800ecdc:	fa03 f000 	lsl.w	r0, r3, r0
 800ece0:	9b04      	ldr	r3, [sp, #16]
 800ece2:	4303      	orrs	r3, r0
 800ece4:	3401      	adds	r4, #1
 800ece6:	9304      	str	r3, [sp, #16]
 800ece8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecec:	482c      	ldr	r0, [pc, #176]	; (800eda0 <_vfiprintf_r+0x250>)
 800ecee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecf2:	2206      	movs	r2, #6
 800ecf4:	f7f1 fafc 	bl	80002f0 <memchr>
 800ecf8:	2800      	cmp	r0, #0
 800ecfa:	d03f      	beq.n	800ed7c <_vfiprintf_r+0x22c>
 800ecfc:	4b29      	ldr	r3, [pc, #164]	; (800eda4 <_vfiprintf_r+0x254>)
 800ecfe:	bb1b      	cbnz	r3, 800ed48 <_vfiprintf_r+0x1f8>
 800ed00:	9b03      	ldr	r3, [sp, #12]
 800ed02:	3307      	adds	r3, #7
 800ed04:	f023 0307 	bic.w	r3, r3, #7
 800ed08:	3308      	adds	r3, #8
 800ed0a:	9303      	str	r3, [sp, #12]
 800ed0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed0e:	443b      	add	r3, r7
 800ed10:	9309      	str	r3, [sp, #36]	; 0x24
 800ed12:	e767      	b.n	800ebe4 <_vfiprintf_r+0x94>
 800ed14:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed18:	460c      	mov	r4, r1
 800ed1a:	2001      	movs	r0, #1
 800ed1c:	e7a5      	b.n	800ec6a <_vfiprintf_r+0x11a>
 800ed1e:	2300      	movs	r3, #0
 800ed20:	3401      	adds	r4, #1
 800ed22:	9305      	str	r3, [sp, #20]
 800ed24:	4619      	mov	r1, r3
 800ed26:	f04f 0c0a 	mov.w	ip, #10
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed30:	3a30      	subs	r2, #48	; 0x30
 800ed32:	2a09      	cmp	r2, #9
 800ed34:	d903      	bls.n	800ed3e <_vfiprintf_r+0x1ee>
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d0c5      	beq.n	800ecc6 <_vfiprintf_r+0x176>
 800ed3a:	9105      	str	r1, [sp, #20]
 800ed3c:	e7c3      	b.n	800ecc6 <_vfiprintf_r+0x176>
 800ed3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed42:	4604      	mov	r4, r0
 800ed44:	2301      	movs	r3, #1
 800ed46:	e7f0      	b.n	800ed2a <_vfiprintf_r+0x1da>
 800ed48:	ab03      	add	r3, sp, #12
 800ed4a:	9300      	str	r3, [sp, #0]
 800ed4c:	462a      	mov	r2, r5
 800ed4e:	4b16      	ldr	r3, [pc, #88]	; (800eda8 <_vfiprintf_r+0x258>)
 800ed50:	a904      	add	r1, sp, #16
 800ed52:	4630      	mov	r0, r6
 800ed54:	f7fe f860 	bl	800ce18 <_printf_float>
 800ed58:	4607      	mov	r7, r0
 800ed5a:	1c78      	adds	r0, r7, #1
 800ed5c:	d1d6      	bne.n	800ed0c <_vfiprintf_r+0x1bc>
 800ed5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed60:	07d9      	lsls	r1, r3, #31
 800ed62:	d405      	bmi.n	800ed70 <_vfiprintf_r+0x220>
 800ed64:	89ab      	ldrh	r3, [r5, #12]
 800ed66:	059a      	lsls	r2, r3, #22
 800ed68:	d402      	bmi.n	800ed70 <_vfiprintf_r+0x220>
 800ed6a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed6c:	f000 faaf 	bl	800f2ce <__retarget_lock_release_recursive>
 800ed70:	89ab      	ldrh	r3, [r5, #12]
 800ed72:	065b      	lsls	r3, r3, #25
 800ed74:	f53f af12 	bmi.w	800eb9c <_vfiprintf_r+0x4c>
 800ed78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed7a:	e711      	b.n	800eba0 <_vfiprintf_r+0x50>
 800ed7c:	ab03      	add	r3, sp, #12
 800ed7e:	9300      	str	r3, [sp, #0]
 800ed80:	462a      	mov	r2, r5
 800ed82:	4b09      	ldr	r3, [pc, #36]	; (800eda8 <_vfiprintf_r+0x258>)
 800ed84:	a904      	add	r1, sp, #16
 800ed86:	4630      	mov	r0, r6
 800ed88:	f7fe fad2 	bl	800d330 <_printf_i>
 800ed8c:	e7e4      	b.n	800ed58 <_vfiprintf_r+0x208>
 800ed8e:	bf00      	nop
 800ed90:	0800fb84 	.word	0x0800fb84
 800ed94:	0800fba4 	.word	0x0800fba4
 800ed98:	0800fb64 	.word	0x0800fb64
 800ed9c:	0800fa52 	.word	0x0800fa52
 800eda0:	0800fa5c 	.word	0x0800fa5c
 800eda4:	0800ce19 	.word	0x0800ce19
 800eda8:	0800eb2b 	.word	0x0800eb2b
 800edac:	0800fa58 	.word	0x0800fa58

0800edb0 <__swbuf_r>:
 800edb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edb2:	460e      	mov	r6, r1
 800edb4:	4614      	mov	r4, r2
 800edb6:	4605      	mov	r5, r0
 800edb8:	b118      	cbz	r0, 800edc2 <__swbuf_r+0x12>
 800edba:	6983      	ldr	r3, [r0, #24]
 800edbc:	b90b      	cbnz	r3, 800edc2 <__swbuf_r+0x12>
 800edbe:	f000 f9e7 	bl	800f190 <__sinit>
 800edc2:	4b21      	ldr	r3, [pc, #132]	; (800ee48 <__swbuf_r+0x98>)
 800edc4:	429c      	cmp	r4, r3
 800edc6:	d12b      	bne.n	800ee20 <__swbuf_r+0x70>
 800edc8:	686c      	ldr	r4, [r5, #4]
 800edca:	69a3      	ldr	r3, [r4, #24]
 800edcc:	60a3      	str	r3, [r4, #8]
 800edce:	89a3      	ldrh	r3, [r4, #12]
 800edd0:	071a      	lsls	r2, r3, #28
 800edd2:	d52f      	bpl.n	800ee34 <__swbuf_r+0x84>
 800edd4:	6923      	ldr	r3, [r4, #16]
 800edd6:	b36b      	cbz	r3, 800ee34 <__swbuf_r+0x84>
 800edd8:	6923      	ldr	r3, [r4, #16]
 800edda:	6820      	ldr	r0, [r4, #0]
 800eddc:	1ac0      	subs	r0, r0, r3
 800edde:	6963      	ldr	r3, [r4, #20]
 800ede0:	b2f6      	uxtb	r6, r6
 800ede2:	4283      	cmp	r3, r0
 800ede4:	4637      	mov	r7, r6
 800ede6:	dc04      	bgt.n	800edf2 <__swbuf_r+0x42>
 800ede8:	4621      	mov	r1, r4
 800edea:	4628      	mov	r0, r5
 800edec:	f000 f93c 	bl	800f068 <_fflush_r>
 800edf0:	bb30      	cbnz	r0, 800ee40 <__swbuf_r+0x90>
 800edf2:	68a3      	ldr	r3, [r4, #8]
 800edf4:	3b01      	subs	r3, #1
 800edf6:	60a3      	str	r3, [r4, #8]
 800edf8:	6823      	ldr	r3, [r4, #0]
 800edfa:	1c5a      	adds	r2, r3, #1
 800edfc:	6022      	str	r2, [r4, #0]
 800edfe:	701e      	strb	r6, [r3, #0]
 800ee00:	6963      	ldr	r3, [r4, #20]
 800ee02:	3001      	adds	r0, #1
 800ee04:	4283      	cmp	r3, r0
 800ee06:	d004      	beq.n	800ee12 <__swbuf_r+0x62>
 800ee08:	89a3      	ldrh	r3, [r4, #12]
 800ee0a:	07db      	lsls	r3, r3, #31
 800ee0c:	d506      	bpl.n	800ee1c <__swbuf_r+0x6c>
 800ee0e:	2e0a      	cmp	r6, #10
 800ee10:	d104      	bne.n	800ee1c <__swbuf_r+0x6c>
 800ee12:	4621      	mov	r1, r4
 800ee14:	4628      	mov	r0, r5
 800ee16:	f000 f927 	bl	800f068 <_fflush_r>
 800ee1a:	b988      	cbnz	r0, 800ee40 <__swbuf_r+0x90>
 800ee1c:	4638      	mov	r0, r7
 800ee1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee20:	4b0a      	ldr	r3, [pc, #40]	; (800ee4c <__swbuf_r+0x9c>)
 800ee22:	429c      	cmp	r4, r3
 800ee24:	d101      	bne.n	800ee2a <__swbuf_r+0x7a>
 800ee26:	68ac      	ldr	r4, [r5, #8]
 800ee28:	e7cf      	b.n	800edca <__swbuf_r+0x1a>
 800ee2a:	4b09      	ldr	r3, [pc, #36]	; (800ee50 <__swbuf_r+0xa0>)
 800ee2c:	429c      	cmp	r4, r3
 800ee2e:	bf08      	it	eq
 800ee30:	68ec      	ldreq	r4, [r5, #12]
 800ee32:	e7ca      	b.n	800edca <__swbuf_r+0x1a>
 800ee34:	4621      	mov	r1, r4
 800ee36:	4628      	mov	r0, r5
 800ee38:	f000 f81a 	bl	800ee70 <__swsetup_r>
 800ee3c:	2800      	cmp	r0, #0
 800ee3e:	d0cb      	beq.n	800edd8 <__swbuf_r+0x28>
 800ee40:	f04f 37ff 	mov.w	r7, #4294967295
 800ee44:	e7ea      	b.n	800ee1c <__swbuf_r+0x6c>
 800ee46:	bf00      	nop
 800ee48:	0800fb84 	.word	0x0800fb84
 800ee4c:	0800fba4 	.word	0x0800fba4
 800ee50:	0800fb64 	.word	0x0800fb64

0800ee54 <__ascii_wctomb>:
 800ee54:	b149      	cbz	r1, 800ee6a <__ascii_wctomb+0x16>
 800ee56:	2aff      	cmp	r2, #255	; 0xff
 800ee58:	bf85      	ittet	hi
 800ee5a:	238a      	movhi	r3, #138	; 0x8a
 800ee5c:	6003      	strhi	r3, [r0, #0]
 800ee5e:	700a      	strbls	r2, [r1, #0]
 800ee60:	f04f 30ff 	movhi.w	r0, #4294967295
 800ee64:	bf98      	it	ls
 800ee66:	2001      	movls	r0, #1
 800ee68:	4770      	bx	lr
 800ee6a:	4608      	mov	r0, r1
 800ee6c:	4770      	bx	lr
	...

0800ee70 <__swsetup_r>:
 800ee70:	4b32      	ldr	r3, [pc, #200]	; (800ef3c <__swsetup_r+0xcc>)
 800ee72:	b570      	push	{r4, r5, r6, lr}
 800ee74:	681d      	ldr	r5, [r3, #0]
 800ee76:	4606      	mov	r6, r0
 800ee78:	460c      	mov	r4, r1
 800ee7a:	b125      	cbz	r5, 800ee86 <__swsetup_r+0x16>
 800ee7c:	69ab      	ldr	r3, [r5, #24]
 800ee7e:	b913      	cbnz	r3, 800ee86 <__swsetup_r+0x16>
 800ee80:	4628      	mov	r0, r5
 800ee82:	f000 f985 	bl	800f190 <__sinit>
 800ee86:	4b2e      	ldr	r3, [pc, #184]	; (800ef40 <__swsetup_r+0xd0>)
 800ee88:	429c      	cmp	r4, r3
 800ee8a:	d10f      	bne.n	800eeac <__swsetup_r+0x3c>
 800ee8c:	686c      	ldr	r4, [r5, #4]
 800ee8e:	89a3      	ldrh	r3, [r4, #12]
 800ee90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee94:	0719      	lsls	r1, r3, #28
 800ee96:	d42c      	bmi.n	800eef2 <__swsetup_r+0x82>
 800ee98:	06dd      	lsls	r5, r3, #27
 800ee9a:	d411      	bmi.n	800eec0 <__swsetup_r+0x50>
 800ee9c:	2309      	movs	r3, #9
 800ee9e:	6033      	str	r3, [r6, #0]
 800eea0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eea4:	81a3      	strh	r3, [r4, #12]
 800eea6:	f04f 30ff 	mov.w	r0, #4294967295
 800eeaa:	e03e      	b.n	800ef2a <__swsetup_r+0xba>
 800eeac:	4b25      	ldr	r3, [pc, #148]	; (800ef44 <__swsetup_r+0xd4>)
 800eeae:	429c      	cmp	r4, r3
 800eeb0:	d101      	bne.n	800eeb6 <__swsetup_r+0x46>
 800eeb2:	68ac      	ldr	r4, [r5, #8]
 800eeb4:	e7eb      	b.n	800ee8e <__swsetup_r+0x1e>
 800eeb6:	4b24      	ldr	r3, [pc, #144]	; (800ef48 <__swsetup_r+0xd8>)
 800eeb8:	429c      	cmp	r4, r3
 800eeba:	bf08      	it	eq
 800eebc:	68ec      	ldreq	r4, [r5, #12]
 800eebe:	e7e6      	b.n	800ee8e <__swsetup_r+0x1e>
 800eec0:	0758      	lsls	r0, r3, #29
 800eec2:	d512      	bpl.n	800eeea <__swsetup_r+0x7a>
 800eec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eec6:	b141      	cbz	r1, 800eeda <__swsetup_r+0x6a>
 800eec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eecc:	4299      	cmp	r1, r3
 800eece:	d002      	beq.n	800eed6 <__swsetup_r+0x66>
 800eed0:	4630      	mov	r0, r6
 800eed2:	f7ff fd0b 	bl	800e8ec <_free_r>
 800eed6:	2300      	movs	r3, #0
 800eed8:	6363      	str	r3, [r4, #52]	; 0x34
 800eeda:	89a3      	ldrh	r3, [r4, #12]
 800eedc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eee0:	81a3      	strh	r3, [r4, #12]
 800eee2:	2300      	movs	r3, #0
 800eee4:	6063      	str	r3, [r4, #4]
 800eee6:	6923      	ldr	r3, [r4, #16]
 800eee8:	6023      	str	r3, [r4, #0]
 800eeea:	89a3      	ldrh	r3, [r4, #12]
 800eeec:	f043 0308 	orr.w	r3, r3, #8
 800eef0:	81a3      	strh	r3, [r4, #12]
 800eef2:	6923      	ldr	r3, [r4, #16]
 800eef4:	b94b      	cbnz	r3, 800ef0a <__swsetup_r+0x9a>
 800eef6:	89a3      	ldrh	r3, [r4, #12]
 800eef8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eefc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef00:	d003      	beq.n	800ef0a <__swsetup_r+0x9a>
 800ef02:	4621      	mov	r1, r4
 800ef04:	4630      	mov	r0, r6
 800ef06:	f000 fa07 	bl	800f318 <__smakebuf_r>
 800ef0a:	89a0      	ldrh	r0, [r4, #12]
 800ef0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef10:	f010 0301 	ands.w	r3, r0, #1
 800ef14:	d00a      	beq.n	800ef2c <__swsetup_r+0xbc>
 800ef16:	2300      	movs	r3, #0
 800ef18:	60a3      	str	r3, [r4, #8]
 800ef1a:	6963      	ldr	r3, [r4, #20]
 800ef1c:	425b      	negs	r3, r3
 800ef1e:	61a3      	str	r3, [r4, #24]
 800ef20:	6923      	ldr	r3, [r4, #16]
 800ef22:	b943      	cbnz	r3, 800ef36 <__swsetup_r+0xc6>
 800ef24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef28:	d1ba      	bne.n	800eea0 <__swsetup_r+0x30>
 800ef2a:	bd70      	pop	{r4, r5, r6, pc}
 800ef2c:	0781      	lsls	r1, r0, #30
 800ef2e:	bf58      	it	pl
 800ef30:	6963      	ldrpl	r3, [r4, #20]
 800ef32:	60a3      	str	r3, [r4, #8]
 800ef34:	e7f4      	b.n	800ef20 <__swsetup_r+0xb0>
 800ef36:	2000      	movs	r0, #0
 800ef38:	e7f7      	b.n	800ef2a <__swsetup_r+0xba>
 800ef3a:	bf00      	nop
 800ef3c:	24000010 	.word	0x24000010
 800ef40:	0800fb84 	.word	0x0800fb84
 800ef44:	0800fba4 	.word	0x0800fba4
 800ef48:	0800fb64 	.word	0x0800fb64

0800ef4c <abort>:
 800ef4c:	b508      	push	{r3, lr}
 800ef4e:	2006      	movs	r0, #6
 800ef50:	f000 fa4a 	bl	800f3e8 <raise>
 800ef54:	2001      	movs	r0, #1
 800ef56:	f7f4 f8c5 	bl	80030e4 <_exit>
	...

0800ef5c <__sflush_r>:
 800ef5c:	898a      	ldrh	r2, [r1, #12]
 800ef5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef62:	4605      	mov	r5, r0
 800ef64:	0710      	lsls	r0, r2, #28
 800ef66:	460c      	mov	r4, r1
 800ef68:	d458      	bmi.n	800f01c <__sflush_r+0xc0>
 800ef6a:	684b      	ldr	r3, [r1, #4]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	dc05      	bgt.n	800ef7c <__sflush_r+0x20>
 800ef70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	dc02      	bgt.n	800ef7c <__sflush_r+0x20>
 800ef76:	2000      	movs	r0, #0
 800ef78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef7e:	2e00      	cmp	r6, #0
 800ef80:	d0f9      	beq.n	800ef76 <__sflush_r+0x1a>
 800ef82:	2300      	movs	r3, #0
 800ef84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ef88:	682f      	ldr	r7, [r5, #0]
 800ef8a:	602b      	str	r3, [r5, #0]
 800ef8c:	d032      	beq.n	800eff4 <__sflush_r+0x98>
 800ef8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef90:	89a3      	ldrh	r3, [r4, #12]
 800ef92:	075a      	lsls	r2, r3, #29
 800ef94:	d505      	bpl.n	800efa2 <__sflush_r+0x46>
 800ef96:	6863      	ldr	r3, [r4, #4]
 800ef98:	1ac0      	subs	r0, r0, r3
 800ef9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef9c:	b10b      	cbz	r3, 800efa2 <__sflush_r+0x46>
 800ef9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800efa0:	1ac0      	subs	r0, r0, r3
 800efa2:	2300      	movs	r3, #0
 800efa4:	4602      	mov	r2, r0
 800efa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efa8:	6a21      	ldr	r1, [r4, #32]
 800efaa:	4628      	mov	r0, r5
 800efac:	47b0      	blx	r6
 800efae:	1c43      	adds	r3, r0, #1
 800efb0:	89a3      	ldrh	r3, [r4, #12]
 800efb2:	d106      	bne.n	800efc2 <__sflush_r+0x66>
 800efb4:	6829      	ldr	r1, [r5, #0]
 800efb6:	291d      	cmp	r1, #29
 800efb8:	d82c      	bhi.n	800f014 <__sflush_r+0xb8>
 800efba:	4a2a      	ldr	r2, [pc, #168]	; (800f064 <__sflush_r+0x108>)
 800efbc:	40ca      	lsrs	r2, r1
 800efbe:	07d6      	lsls	r6, r2, #31
 800efc0:	d528      	bpl.n	800f014 <__sflush_r+0xb8>
 800efc2:	2200      	movs	r2, #0
 800efc4:	6062      	str	r2, [r4, #4]
 800efc6:	04d9      	lsls	r1, r3, #19
 800efc8:	6922      	ldr	r2, [r4, #16]
 800efca:	6022      	str	r2, [r4, #0]
 800efcc:	d504      	bpl.n	800efd8 <__sflush_r+0x7c>
 800efce:	1c42      	adds	r2, r0, #1
 800efd0:	d101      	bne.n	800efd6 <__sflush_r+0x7a>
 800efd2:	682b      	ldr	r3, [r5, #0]
 800efd4:	b903      	cbnz	r3, 800efd8 <__sflush_r+0x7c>
 800efd6:	6560      	str	r0, [r4, #84]	; 0x54
 800efd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800efda:	602f      	str	r7, [r5, #0]
 800efdc:	2900      	cmp	r1, #0
 800efde:	d0ca      	beq.n	800ef76 <__sflush_r+0x1a>
 800efe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800efe4:	4299      	cmp	r1, r3
 800efe6:	d002      	beq.n	800efee <__sflush_r+0x92>
 800efe8:	4628      	mov	r0, r5
 800efea:	f7ff fc7f 	bl	800e8ec <_free_r>
 800efee:	2000      	movs	r0, #0
 800eff0:	6360      	str	r0, [r4, #52]	; 0x34
 800eff2:	e7c1      	b.n	800ef78 <__sflush_r+0x1c>
 800eff4:	6a21      	ldr	r1, [r4, #32]
 800eff6:	2301      	movs	r3, #1
 800eff8:	4628      	mov	r0, r5
 800effa:	47b0      	blx	r6
 800effc:	1c41      	adds	r1, r0, #1
 800effe:	d1c7      	bne.n	800ef90 <__sflush_r+0x34>
 800f000:	682b      	ldr	r3, [r5, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d0c4      	beq.n	800ef90 <__sflush_r+0x34>
 800f006:	2b1d      	cmp	r3, #29
 800f008:	d001      	beq.n	800f00e <__sflush_r+0xb2>
 800f00a:	2b16      	cmp	r3, #22
 800f00c:	d101      	bne.n	800f012 <__sflush_r+0xb6>
 800f00e:	602f      	str	r7, [r5, #0]
 800f010:	e7b1      	b.n	800ef76 <__sflush_r+0x1a>
 800f012:	89a3      	ldrh	r3, [r4, #12]
 800f014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f018:	81a3      	strh	r3, [r4, #12]
 800f01a:	e7ad      	b.n	800ef78 <__sflush_r+0x1c>
 800f01c:	690f      	ldr	r7, [r1, #16]
 800f01e:	2f00      	cmp	r7, #0
 800f020:	d0a9      	beq.n	800ef76 <__sflush_r+0x1a>
 800f022:	0793      	lsls	r3, r2, #30
 800f024:	680e      	ldr	r6, [r1, #0]
 800f026:	bf08      	it	eq
 800f028:	694b      	ldreq	r3, [r1, #20]
 800f02a:	600f      	str	r7, [r1, #0]
 800f02c:	bf18      	it	ne
 800f02e:	2300      	movne	r3, #0
 800f030:	eba6 0807 	sub.w	r8, r6, r7
 800f034:	608b      	str	r3, [r1, #8]
 800f036:	f1b8 0f00 	cmp.w	r8, #0
 800f03a:	dd9c      	ble.n	800ef76 <__sflush_r+0x1a>
 800f03c:	6a21      	ldr	r1, [r4, #32]
 800f03e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f040:	4643      	mov	r3, r8
 800f042:	463a      	mov	r2, r7
 800f044:	4628      	mov	r0, r5
 800f046:	47b0      	blx	r6
 800f048:	2800      	cmp	r0, #0
 800f04a:	dc06      	bgt.n	800f05a <__sflush_r+0xfe>
 800f04c:	89a3      	ldrh	r3, [r4, #12]
 800f04e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f052:	81a3      	strh	r3, [r4, #12]
 800f054:	f04f 30ff 	mov.w	r0, #4294967295
 800f058:	e78e      	b.n	800ef78 <__sflush_r+0x1c>
 800f05a:	4407      	add	r7, r0
 800f05c:	eba8 0800 	sub.w	r8, r8, r0
 800f060:	e7e9      	b.n	800f036 <__sflush_r+0xda>
 800f062:	bf00      	nop
 800f064:	20400001 	.word	0x20400001

0800f068 <_fflush_r>:
 800f068:	b538      	push	{r3, r4, r5, lr}
 800f06a:	690b      	ldr	r3, [r1, #16]
 800f06c:	4605      	mov	r5, r0
 800f06e:	460c      	mov	r4, r1
 800f070:	b913      	cbnz	r3, 800f078 <_fflush_r+0x10>
 800f072:	2500      	movs	r5, #0
 800f074:	4628      	mov	r0, r5
 800f076:	bd38      	pop	{r3, r4, r5, pc}
 800f078:	b118      	cbz	r0, 800f082 <_fflush_r+0x1a>
 800f07a:	6983      	ldr	r3, [r0, #24]
 800f07c:	b90b      	cbnz	r3, 800f082 <_fflush_r+0x1a>
 800f07e:	f000 f887 	bl	800f190 <__sinit>
 800f082:	4b14      	ldr	r3, [pc, #80]	; (800f0d4 <_fflush_r+0x6c>)
 800f084:	429c      	cmp	r4, r3
 800f086:	d11b      	bne.n	800f0c0 <_fflush_r+0x58>
 800f088:	686c      	ldr	r4, [r5, #4]
 800f08a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d0ef      	beq.n	800f072 <_fflush_r+0xa>
 800f092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f094:	07d0      	lsls	r0, r2, #31
 800f096:	d404      	bmi.n	800f0a2 <_fflush_r+0x3a>
 800f098:	0599      	lsls	r1, r3, #22
 800f09a:	d402      	bmi.n	800f0a2 <_fflush_r+0x3a>
 800f09c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f09e:	f000 f915 	bl	800f2cc <__retarget_lock_acquire_recursive>
 800f0a2:	4628      	mov	r0, r5
 800f0a4:	4621      	mov	r1, r4
 800f0a6:	f7ff ff59 	bl	800ef5c <__sflush_r>
 800f0aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0ac:	07da      	lsls	r2, r3, #31
 800f0ae:	4605      	mov	r5, r0
 800f0b0:	d4e0      	bmi.n	800f074 <_fflush_r+0xc>
 800f0b2:	89a3      	ldrh	r3, [r4, #12]
 800f0b4:	059b      	lsls	r3, r3, #22
 800f0b6:	d4dd      	bmi.n	800f074 <_fflush_r+0xc>
 800f0b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0ba:	f000 f908 	bl	800f2ce <__retarget_lock_release_recursive>
 800f0be:	e7d9      	b.n	800f074 <_fflush_r+0xc>
 800f0c0:	4b05      	ldr	r3, [pc, #20]	; (800f0d8 <_fflush_r+0x70>)
 800f0c2:	429c      	cmp	r4, r3
 800f0c4:	d101      	bne.n	800f0ca <_fflush_r+0x62>
 800f0c6:	68ac      	ldr	r4, [r5, #8]
 800f0c8:	e7df      	b.n	800f08a <_fflush_r+0x22>
 800f0ca:	4b04      	ldr	r3, [pc, #16]	; (800f0dc <_fflush_r+0x74>)
 800f0cc:	429c      	cmp	r4, r3
 800f0ce:	bf08      	it	eq
 800f0d0:	68ec      	ldreq	r4, [r5, #12]
 800f0d2:	e7da      	b.n	800f08a <_fflush_r+0x22>
 800f0d4:	0800fb84 	.word	0x0800fb84
 800f0d8:	0800fba4 	.word	0x0800fba4
 800f0dc:	0800fb64 	.word	0x0800fb64

0800f0e0 <std>:
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	b510      	push	{r4, lr}
 800f0e4:	4604      	mov	r4, r0
 800f0e6:	e9c0 3300 	strd	r3, r3, [r0]
 800f0ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f0ee:	6083      	str	r3, [r0, #8]
 800f0f0:	8181      	strh	r1, [r0, #12]
 800f0f2:	6643      	str	r3, [r0, #100]	; 0x64
 800f0f4:	81c2      	strh	r2, [r0, #14]
 800f0f6:	6183      	str	r3, [r0, #24]
 800f0f8:	4619      	mov	r1, r3
 800f0fa:	2208      	movs	r2, #8
 800f0fc:	305c      	adds	r0, #92	; 0x5c
 800f0fe:	f7fd fdf3 	bl	800cce8 <memset>
 800f102:	4b05      	ldr	r3, [pc, #20]	; (800f118 <std+0x38>)
 800f104:	6263      	str	r3, [r4, #36]	; 0x24
 800f106:	4b05      	ldr	r3, [pc, #20]	; (800f11c <std+0x3c>)
 800f108:	62a3      	str	r3, [r4, #40]	; 0x28
 800f10a:	4b05      	ldr	r3, [pc, #20]	; (800f120 <std+0x40>)
 800f10c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f10e:	4b05      	ldr	r3, [pc, #20]	; (800f124 <std+0x44>)
 800f110:	6224      	str	r4, [r4, #32]
 800f112:	6323      	str	r3, [r4, #48]	; 0x30
 800f114:	bd10      	pop	{r4, pc}
 800f116:	bf00      	nop
 800f118:	0800f421 	.word	0x0800f421
 800f11c:	0800f443 	.word	0x0800f443
 800f120:	0800f47b 	.word	0x0800f47b
 800f124:	0800f49f 	.word	0x0800f49f

0800f128 <_cleanup_r>:
 800f128:	4901      	ldr	r1, [pc, #4]	; (800f130 <_cleanup_r+0x8>)
 800f12a:	f000 b8af 	b.w	800f28c <_fwalk_reent>
 800f12e:	bf00      	nop
 800f130:	0800f069 	.word	0x0800f069

0800f134 <__sfmoreglue>:
 800f134:	b570      	push	{r4, r5, r6, lr}
 800f136:	1e4a      	subs	r2, r1, #1
 800f138:	2568      	movs	r5, #104	; 0x68
 800f13a:	4355      	muls	r5, r2
 800f13c:	460e      	mov	r6, r1
 800f13e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f142:	f7ff fc23 	bl	800e98c <_malloc_r>
 800f146:	4604      	mov	r4, r0
 800f148:	b140      	cbz	r0, 800f15c <__sfmoreglue+0x28>
 800f14a:	2100      	movs	r1, #0
 800f14c:	e9c0 1600 	strd	r1, r6, [r0]
 800f150:	300c      	adds	r0, #12
 800f152:	60a0      	str	r0, [r4, #8]
 800f154:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f158:	f7fd fdc6 	bl	800cce8 <memset>
 800f15c:	4620      	mov	r0, r4
 800f15e:	bd70      	pop	{r4, r5, r6, pc}

0800f160 <__sfp_lock_acquire>:
 800f160:	4801      	ldr	r0, [pc, #4]	; (800f168 <__sfp_lock_acquire+0x8>)
 800f162:	f000 b8b3 	b.w	800f2cc <__retarget_lock_acquire_recursive>
 800f166:	bf00      	nop
 800f168:	24000a24 	.word	0x24000a24

0800f16c <__sfp_lock_release>:
 800f16c:	4801      	ldr	r0, [pc, #4]	; (800f174 <__sfp_lock_release+0x8>)
 800f16e:	f000 b8ae 	b.w	800f2ce <__retarget_lock_release_recursive>
 800f172:	bf00      	nop
 800f174:	24000a24 	.word	0x24000a24

0800f178 <__sinit_lock_acquire>:
 800f178:	4801      	ldr	r0, [pc, #4]	; (800f180 <__sinit_lock_acquire+0x8>)
 800f17a:	f000 b8a7 	b.w	800f2cc <__retarget_lock_acquire_recursive>
 800f17e:	bf00      	nop
 800f180:	24000a1f 	.word	0x24000a1f

0800f184 <__sinit_lock_release>:
 800f184:	4801      	ldr	r0, [pc, #4]	; (800f18c <__sinit_lock_release+0x8>)
 800f186:	f000 b8a2 	b.w	800f2ce <__retarget_lock_release_recursive>
 800f18a:	bf00      	nop
 800f18c:	24000a1f 	.word	0x24000a1f

0800f190 <__sinit>:
 800f190:	b510      	push	{r4, lr}
 800f192:	4604      	mov	r4, r0
 800f194:	f7ff fff0 	bl	800f178 <__sinit_lock_acquire>
 800f198:	69a3      	ldr	r3, [r4, #24]
 800f19a:	b11b      	cbz	r3, 800f1a4 <__sinit+0x14>
 800f19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1a0:	f7ff bff0 	b.w	800f184 <__sinit_lock_release>
 800f1a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f1a8:	6523      	str	r3, [r4, #80]	; 0x50
 800f1aa:	4b13      	ldr	r3, [pc, #76]	; (800f1f8 <__sinit+0x68>)
 800f1ac:	4a13      	ldr	r2, [pc, #76]	; (800f1fc <__sinit+0x6c>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	62a2      	str	r2, [r4, #40]	; 0x28
 800f1b2:	42a3      	cmp	r3, r4
 800f1b4:	bf04      	itt	eq
 800f1b6:	2301      	moveq	r3, #1
 800f1b8:	61a3      	streq	r3, [r4, #24]
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	f000 f820 	bl	800f200 <__sfp>
 800f1c0:	6060      	str	r0, [r4, #4]
 800f1c2:	4620      	mov	r0, r4
 800f1c4:	f000 f81c 	bl	800f200 <__sfp>
 800f1c8:	60a0      	str	r0, [r4, #8]
 800f1ca:	4620      	mov	r0, r4
 800f1cc:	f000 f818 	bl	800f200 <__sfp>
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	60e0      	str	r0, [r4, #12]
 800f1d4:	2104      	movs	r1, #4
 800f1d6:	6860      	ldr	r0, [r4, #4]
 800f1d8:	f7ff ff82 	bl	800f0e0 <std>
 800f1dc:	68a0      	ldr	r0, [r4, #8]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	2109      	movs	r1, #9
 800f1e2:	f7ff ff7d 	bl	800f0e0 <std>
 800f1e6:	68e0      	ldr	r0, [r4, #12]
 800f1e8:	2202      	movs	r2, #2
 800f1ea:	2112      	movs	r1, #18
 800f1ec:	f7ff ff78 	bl	800f0e0 <std>
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	61a3      	str	r3, [r4, #24]
 800f1f4:	e7d2      	b.n	800f19c <__sinit+0xc>
 800f1f6:	bf00      	nop
 800f1f8:	0800f7e0 	.word	0x0800f7e0
 800f1fc:	0800f129 	.word	0x0800f129

0800f200 <__sfp>:
 800f200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f202:	4607      	mov	r7, r0
 800f204:	f7ff ffac 	bl	800f160 <__sfp_lock_acquire>
 800f208:	4b1e      	ldr	r3, [pc, #120]	; (800f284 <__sfp+0x84>)
 800f20a:	681e      	ldr	r6, [r3, #0]
 800f20c:	69b3      	ldr	r3, [r6, #24]
 800f20e:	b913      	cbnz	r3, 800f216 <__sfp+0x16>
 800f210:	4630      	mov	r0, r6
 800f212:	f7ff ffbd 	bl	800f190 <__sinit>
 800f216:	3648      	adds	r6, #72	; 0x48
 800f218:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f21c:	3b01      	subs	r3, #1
 800f21e:	d503      	bpl.n	800f228 <__sfp+0x28>
 800f220:	6833      	ldr	r3, [r6, #0]
 800f222:	b30b      	cbz	r3, 800f268 <__sfp+0x68>
 800f224:	6836      	ldr	r6, [r6, #0]
 800f226:	e7f7      	b.n	800f218 <__sfp+0x18>
 800f228:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f22c:	b9d5      	cbnz	r5, 800f264 <__sfp+0x64>
 800f22e:	4b16      	ldr	r3, [pc, #88]	; (800f288 <__sfp+0x88>)
 800f230:	60e3      	str	r3, [r4, #12]
 800f232:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f236:	6665      	str	r5, [r4, #100]	; 0x64
 800f238:	f000 f847 	bl	800f2ca <__retarget_lock_init_recursive>
 800f23c:	f7ff ff96 	bl	800f16c <__sfp_lock_release>
 800f240:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f244:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f248:	6025      	str	r5, [r4, #0]
 800f24a:	61a5      	str	r5, [r4, #24]
 800f24c:	2208      	movs	r2, #8
 800f24e:	4629      	mov	r1, r5
 800f250:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f254:	f7fd fd48 	bl	800cce8 <memset>
 800f258:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f25c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f260:	4620      	mov	r0, r4
 800f262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f264:	3468      	adds	r4, #104	; 0x68
 800f266:	e7d9      	b.n	800f21c <__sfp+0x1c>
 800f268:	2104      	movs	r1, #4
 800f26a:	4638      	mov	r0, r7
 800f26c:	f7ff ff62 	bl	800f134 <__sfmoreglue>
 800f270:	4604      	mov	r4, r0
 800f272:	6030      	str	r0, [r6, #0]
 800f274:	2800      	cmp	r0, #0
 800f276:	d1d5      	bne.n	800f224 <__sfp+0x24>
 800f278:	f7ff ff78 	bl	800f16c <__sfp_lock_release>
 800f27c:	230c      	movs	r3, #12
 800f27e:	603b      	str	r3, [r7, #0]
 800f280:	e7ee      	b.n	800f260 <__sfp+0x60>
 800f282:	bf00      	nop
 800f284:	0800f7e0 	.word	0x0800f7e0
 800f288:	ffff0001 	.word	0xffff0001

0800f28c <_fwalk_reent>:
 800f28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f290:	4606      	mov	r6, r0
 800f292:	4688      	mov	r8, r1
 800f294:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f298:	2700      	movs	r7, #0
 800f29a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f29e:	f1b9 0901 	subs.w	r9, r9, #1
 800f2a2:	d505      	bpl.n	800f2b0 <_fwalk_reent+0x24>
 800f2a4:	6824      	ldr	r4, [r4, #0]
 800f2a6:	2c00      	cmp	r4, #0
 800f2a8:	d1f7      	bne.n	800f29a <_fwalk_reent+0xe>
 800f2aa:	4638      	mov	r0, r7
 800f2ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2b0:	89ab      	ldrh	r3, [r5, #12]
 800f2b2:	2b01      	cmp	r3, #1
 800f2b4:	d907      	bls.n	800f2c6 <_fwalk_reent+0x3a>
 800f2b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	d003      	beq.n	800f2c6 <_fwalk_reent+0x3a>
 800f2be:	4629      	mov	r1, r5
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	47c0      	blx	r8
 800f2c4:	4307      	orrs	r7, r0
 800f2c6:	3568      	adds	r5, #104	; 0x68
 800f2c8:	e7e9      	b.n	800f29e <_fwalk_reent+0x12>

0800f2ca <__retarget_lock_init_recursive>:
 800f2ca:	4770      	bx	lr

0800f2cc <__retarget_lock_acquire_recursive>:
 800f2cc:	4770      	bx	lr

0800f2ce <__retarget_lock_release_recursive>:
 800f2ce:	4770      	bx	lr

0800f2d0 <__swhatbuf_r>:
 800f2d0:	b570      	push	{r4, r5, r6, lr}
 800f2d2:	460e      	mov	r6, r1
 800f2d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f2d8:	2900      	cmp	r1, #0
 800f2da:	b096      	sub	sp, #88	; 0x58
 800f2dc:	4614      	mov	r4, r2
 800f2de:	461d      	mov	r5, r3
 800f2e0:	da07      	bge.n	800f2f2 <__swhatbuf_r+0x22>
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	602b      	str	r3, [r5, #0]
 800f2e6:	89b3      	ldrh	r3, [r6, #12]
 800f2e8:	061a      	lsls	r2, r3, #24
 800f2ea:	d410      	bmi.n	800f30e <__swhatbuf_r+0x3e>
 800f2ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2f0:	e00e      	b.n	800f310 <__swhatbuf_r+0x40>
 800f2f2:	466a      	mov	r2, sp
 800f2f4:	f000 f8fa 	bl	800f4ec <_fstat_r>
 800f2f8:	2800      	cmp	r0, #0
 800f2fa:	dbf2      	blt.n	800f2e2 <__swhatbuf_r+0x12>
 800f2fc:	9a01      	ldr	r2, [sp, #4]
 800f2fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f302:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f306:	425a      	negs	r2, r3
 800f308:	415a      	adcs	r2, r3
 800f30a:	602a      	str	r2, [r5, #0]
 800f30c:	e7ee      	b.n	800f2ec <__swhatbuf_r+0x1c>
 800f30e:	2340      	movs	r3, #64	; 0x40
 800f310:	2000      	movs	r0, #0
 800f312:	6023      	str	r3, [r4, #0]
 800f314:	b016      	add	sp, #88	; 0x58
 800f316:	bd70      	pop	{r4, r5, r6, pc}

0800f318 <__smakebuf_r>:
 800f318:	898b      	ldrh	r3, [r1, #12]
 800f31a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f31c:	079d      	lsls	r5, r3, #30
 800f31e:	4606      	mov	r6, r0
 800f320:	460c      	mov	r4, r1
 800f322:	d507      	bpl.n	800f334 <__smakebuf_r+0x1c>
 800f324:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f328:	6023      	str	r3, [r4, #0]
 800f32a:	6123      	str	r3, [r4, #16]
 800f32c:	2301      	movs	r3, #1
 800f32e:	6163      	str	r3, [r4, #20]
 800f330:	b002      	add	sp, #8
 800f332:	bd70      	pop	{r4, r5, r6, pc}
 800f334:	ab01      	add	r3, sp, #4
 800f336:	466a      	mov	r2, sp
 800f338:	f7ff ffca 	bl	800f2d0 <__swhatbuf_r>
 800f33c:	9900      	ldr	r1, [sp, #0]
 800f33e:	4605      	mov	r5, r0
 800f340:	4630      	mov	r0, r6
 800f342:	f7ff fb23 	bl	800e98c <_malloc_r>
 800f346:	b948      	cbnz	r0, 800f35c <__smakebuf_r+0x44>
 800f348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f34c:	059a      	lsls	r2, r3, #22
 800f34e:	d4ef      	bmi.n	800f330 <__smakebuf_r+0x18>
 800f350:	f023 0303 	bic.w	r3, r3, #3
 800f354:	f043 0302 	orr.w	r3, r3, #2
 800f358:	81a3      	strh	r3, [r4, #12]
 800f35a:	e7e3      	b.n	800f324 <__smakebuf_r+0xc>
 800f35c:	4b0d      	ldr	r3, [pc, #52]	; (800f394 <__smakebuf_r+0x7c>)
 800f35e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f360:	89a3      	ldrh	r3, [r4, #12]
 800f362:	6020      	str	r0, [r4, #0]
 800f364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f368:	81a3      	strh	r3, [r4, #12]
 800f36a:	9b00      	ldr	r3, [sp, #0]
 800f36c:	6163      	str	r3, [r4, #20]
 800f36e:	9b01      	ldr	r3, [sp, #4]
 800f370:	6120      	str	r0, [r4, #16]
 800f372:	b15b      	cbz	r3, 800f38c <__smakebuf_r+0x74>
 800f374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f378:	4630      	mov	r0, r6
 800f37a:	f000 f8c9 	bl	800f510 <_isatty_r>
 800f37e:	b128      	cbz	r0, 800f38c <__smakebuf_r+0x74>
 800f380:	89a3      	ldrh	r3, [r4, #12]
 800f382:	f023 0303 	bic.w	r3, r3, #3
 800f386:	f043 0301 	orr.w	r3, r3, #1
 800f38a:	81a3      	strh	r3, [r4, #12]
 800f38c:	89a0      	ldrh	r0, [r4, #12]
 800f38e:	4305      	orrs	r5, r0
 800f390:	81a5      	strh	r5, [r4, #12]
 800f392:	e7cd      	b.n	800f330 <__smakebuf_r+0x18>
 800f394:	0800f129 	.word	0x0800f129

0800f398 <_raise_r>:
 800f398:	291f      	cmp	r1, #31
 800f39a:	b538      	push	{r3, r4, r5, lr}
 800f39c:	4604      	mov	r4, r0
 800f39e:	460d      	mov	r5, r1
 800f3a0:	d904      	bls.n	800f3ac <_raise_r+0x14>
 800f3a2:	2316      	movs	r3, #22
 800f3a4:	6003      	str	r3, [r0, #0]
 800f3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800f3aa:	bd38      	pop	{r3, r4, r5, pc}
 800f3ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f3ae:	b112      	cbz	r2, 800f3b6 <_raise_r+0x1e>
 800f3b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f3b4:	b94b      	cbnz	r3, 800f3ca <_raise_r+0x32>
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	f000 f830 	bl	800f41c <_getpid_r>
 800f3bc:	462a      	mov	r2, r5
 800f3be:	4601      	mov	r1, r0
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3c6:	f000 b817 	b.w	800f3f8 <_kill_r>
 800f3ca:	2b01      	cmp	r3, #1
 800f3cc:	d00a      	beq.n	800f3e4 <_raise_r+0x4c>
 800f3ce:	1c59      	adds	r1, r3, #1
 800f3d0:	d103      	bne.n	800f3da <_raise_r+0x42>
 800f3d2:	2316      	movs	r3, #22
 800f3d4:	6003      	str	r3, [r0, #0]
 800f3d6:	2001      	movs	r0, #1
 800f3d8:	e7e7      	b.n	800f3aa <_raise_r+0x12>
 800f3da:	2400      	movs	r4, #0
 800f3dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f3e0:	4628      	mov	r0, r5
 800f3e2:	4798      	blx	r3
 800f3e4:	2000      	movs	r0, #0
 800f3e6:	e7e0      	b.n	800f3aa <_raise_r+0x12>

0800f3e8 <raise>:
 800f3e8:	4b02      	ldr	r3, [pc, #8]	; (800f3f4 <raise+0xc>)
 800f3ea:	4601      	mov	r1, r0
 800f3ec:	6818      	ldr	r0, [r3, #0]
 800f3ee:	f7ff bfd3 	b.w	800f398 <_raise_r>
 800f3f2:	bf00      	nop
 800f3f4:	24000010 	.word	0x24000010

0800f3f8 <_kill_r>:
 800f3f8:	b538      	push	{r3, r4, r5, lr}
 800f3fa:	4d07      	ldr	r5, [pc, #28]	; (800f418 <_kill_r+0x20>)
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	4604      	mov	r4, r0
 800f400:	4608      	mov	r0, r1
 800f402:	4611      	mov	r1, r2
 800f404:	602b      	str	r3, [r5, #0]
 800f406:	f7f3 fe5d 	bl	80030c4 <_kill>
 800f40a:	1c43      	adds	r3, r0, #1
 800f40c:	d102      	bne.n	800f414 <_kill_r+0x1c>
 800f40e:	682b      	ldr	r3, [r5, #0]
 800f410:	b103      	cbz	r3, 800f414 <_kill_r+0x1c>
 800f412:	6023      	str	r3, [r4, #0]
 800f414:	bd38      	pop	{r3, r4, r5, pc}
 800f416:	bf00      	nop
 800f418:	24000a18 	.word	0x24000a18

0800f41c <_getpid_r>:
 800f41c:	f7f3 be4a 	b.w	80030b4 <_getpid>

0800f420 <__sread>:
 800f420:	b510      	push	{r4, lr}
 800f422:	460c      	mov	r4, r1
 800f424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f428:	f000 f894 	bl	800f554 <_read_r>
 800f42c:	2800      	cmp	r0, #0
 800f42e:	bfab      	itete	ge
 800f430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f432:	89a3      	ldrhlt	r3, [r4, #12]
 800f434:	181b      	addge	r3, r3, r0
 800f436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f43a:	bfac      	ite	ge
 800f43c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f43e:	81a3      	strhlt	r3, [r4, #12]
 800f440:	bd10      	pop	{r4, pc}

0800f442 <__swrite>:
 800f442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f446:	461f      	mov	r7, r3
 800f448:	898b      	ldrh	r3, [r1, #12]
 800f44a:	05db      	lsls	r3, r3, #23
 800f44c:	4605      	mov	r5, r0
 800f44e:	460c      	mov	r4, r1
 800f450:	4616      	mov	r6, r2
 800f452:	d505      	bpl.n	800f460 <__swrite+0x1e>
 800f454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f458:	2302      	movs	r3, #2
 800f45a:	2200      	movs	r2, #0
 800f45c:	f000 f868 	bl	800f530 <_lseek_r>
 800f460:	89a3      	ldrh	r3, [r4, #12]
 800f462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f46a:	81a3      	strh	r3, [r4, #12]
 800f46c:	4632      	mov	r2, r6
 800f46e:	463b      	mov	r3, r7
 800f470:	4628      	mov	r0, r5
 800f472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f476:	f000 b817 	b.w	800f4a8 <_write_r>

0800f47a <__sseek>:
 800f47a:	b510      	push	{r4, lr}
 800f47c:	460c      	mov	r4, r1
 800f47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f482:	f000 f855 	bl	800f530 <_lseek_r>
 800f486:	1c43      	adds	r3, r0, #1
 800f488:	89a3      	ldrh	r3, [r4, #12]
 800f48a:	bf15      	itete	ne
 800f48c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f48e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f496:	81a3      	strheq	r3, [r4, #12]
 800f498:	bf18      	it	ne
 800f49a:	81a3      	strhne	r3, [r4, #12]
 800f49c:	bd10      	pop	{r4, pc}

0800f49e <__sclose>:
 800f49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4a2:	f000 b813 	b.w	800f4cc <_close_r>
	...

0800f4a8 <_write_r>:
 800f4a8:	b538      	push	{r3, r4, r5, lr}
 800f4aa:	4d07      	ldr	r5, [pc, #28]	; (800f4c8 <_write_r+0x20>)
 800f4ac:	4604      	mov	r4, r0
 800f4ae:	4608      	mov	r0, r1
 800f4b0:	4611      	mov	r1, r2
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	602a      	str	r2, [r5, #0]
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	f7f3 fe3b 	bl	8003132 <_write>
 800f4bc:	1c43      	adds	r3, r0, #1
 800f4be:	d102      	bne.n	800f4c6 <_write_r+0x1e>
 800f4c0:	682b      	ldr	r3, [r5, #0]
 800f4c2:	b103      	cbz	r3, 800f4c6 <_write_r+0x1e>
 800f4c4:	6023      	str	r3, [r4, #0]
 800f4c6:	bd38      	pop	{r3, r4, r5, pc}
 800f4c8:	24000a18 	.word	0x24000a18

0800f4cc <_close_r>:
 800f4cc:	b538      	push	{r3, r4, r5, lr}
 800f4ce:	4d06      	ldr	r5, [pc, #24]	; (800f4e8 <_close_r+0x1c>)
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	4604      	mov	r4, r0
 800f4d4:	4608      	mov	r0, r1
 800f4d6:	602b      	str	r3, [r5, #0]
 800f4d8:	f7f3 fe47 	bl	800316a <_close>
 800f4dc:	1c43      	adds	r3, r0, #1
 800f4de:	d102      	bne.n	800f4e6 <_close_r+0x1a>
 800f4e0:	682b      	ldr	r3, [r5, #0]
 800f4e2:	b103      	cbz	r3, 800f4e6 <_close_r+0x1a>
 800f4e4:	6023      	str	r3, [r4, #0]
 800f4e6:	bd38      	pop	{r3, r4, r5, pc}
 800f4e8:	24000a18 	.word	0x24000a18

0800f4ec <_fstat_r>:
 800f4ec:	b538      	push	{r3, r4, r5, lr}
 800f4ee:	4d07      	ldr	r5, [pc, #28]	; (800f50c <_fstat_r+0x20>)
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	4604      	mov	r4, r0
 800f4f4:	4608      	mov	r0, r1
 800f4f6:	4611      	mov	r1, r2
 800f4f8:	602b      	str	r3, [r5, #0]
 800f4fa:	f7f3 fe42 	bl	8003182 <_fstat>
 800f4fe:	1c43      	adds	r3, r0, #1
 800f500:	d102      	bne.n	800f508 <_fstat_r+0x1c>
 800f502:	682b      	ldr	r3, [r5, #0]
 800f504:	b103      	cbz	r3, 800f508 <_fstat_r+0x1c>
 800f506:	6023      	str	r3, [r4, #0]
 800f508:	bd38      	pop	{r3, r4, r5, pc}
 800f50a:	bf00      	nop
 800f50c:	24000a18 	.word	0x24000a18

0800f510 <_isatty_r>:
 800f510:	b538      	push	{r3, r4, r5, lr}
 800f512:	4d06      	ldr	r5, [pc, #24]	; (800f52c <_isatty_r+0x1c>)
 800f514:	2300      	movs	r3, #0
 800f516:	4604      	mov	r4, r0
 800f518:	4608      	mov	r0, r1
 800f51a:	602b      	str	r3, [r5, #0]
 800f51c:	f7f3 fe41 	bl	80031a2 <_isatty>
 800f520:	1c43      	adds	r3, r0, #1
 800f522:	d102      	bne.n	800f52a <_isatty_r+0x1a>
 800f524:	682b      	ldr	r3, [r5, #0]
 800f526:	b103      	cbz	r3, 800f52a <_isatty_r+0x1a>
 800f528:	6023      	str	r3, [r4, #0]
 800f52a:	bd38      	pop	{r3, r4, r5, pc}
 800f52c:	24000a18 	.word	0x24000a18

0800f530 <_lseek_r>:
 800f530:	b538      	push	{r3, r4, r5, lr}
 800f532:	4d07      	ldr	r5, [pc, #28]	; (800f550 <_lseek_r+0x20>)
 800f534:	4604      	mov	r4, r0
 800f536:	4608      	mov	r0, r1
 800f538:	4611      	mov	r1, r2
 800f53a:	2200      	movs	r2, #0
 800f53c:	602a      	str	r2, [r5, #0]
 800f53e:	461a      	mov	r2, r3
 800f540:	f7f3 fe3a 	bl	80031b8 <_lseek>
 800f544:	1c43      	adds	r3, r0, #1
 800f546:	d102      	bne.n	800f54e <_lseek_r+0x1e>
 800f548:	682b      	ldr	r3, [r5, #0]
 800f54a:	b103      	cbz	r3, 800f54e <_lseek_r+0x1e>
 800f54c:	6023      	str	r3, [r4, #0]
 800f54e:	bd38      	pop	{r3, r4, r5, pc}
 800f550:	24000a18 	.word	0x24000a18

0800f554 <_read_r>:
 800f554:	b538      	push	{r3, r4, r5, lr}
 800f556:	4d07      	ldr	r5, [pc, #28]	; (800f574 <_read_r+0x20>)
 800f558:	4604      	mov	r4, r0
 800f55a:	4608      	mov	r0, r1
 800f55c:	4611      	mov	r1, r2
 800f55e:	2200      	movs	r2, #0
 800f560:	602a      	str	r2, [r5, #0]
 800f562:	461a      	mov	r2, r3
 800f564:	f7f3 fdc8 	bl	80030f8 <_read>
 800f568:	1c43      	adds	r3, r0, #1
 800f56a:	d102      	bne.n	800f572 <_read_r+0x1e>
 800f56c:	682b      	ldr	r3, [r5, #0]
 800f56e:	b103      	cbz	r3, 800f572 <_read_r+0x1e>
 800f570:	6023      	str	r3, [r4, #0]
 800f572:	bd38      	pop	{r3, r4, r5, pc}
 800f574:	24000a18 	.word	0x24000a18

0800f578 <_init>:
 800f578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f57a:	bf00      	nop
 800f57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f57e:	bc08      	pop	{r3}
 800f580:	469e      	mov	lr, r3
 800f582:	4770      	bx	lr

0800f584 <_fini>:
 800f584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f586:	bf00      	nop
 800f588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f58a:	bc08      	pop	{r3}
 800f58c:	469e      	mov	lr, r3
 800f58e:	4770      	bx	lr
