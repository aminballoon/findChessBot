
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000149b8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f0c  08014c58  08014c58  00024c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016b64  08016b64  00026b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08016b6c  08016b6c  00026b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08016b74  08016b74  00026b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000418  24000000  08016b7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001348  24000418  08016f94  00030418  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001760  08016f94  00031760  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030418  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c5a2  00000000  00000000  00030446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000049fd  00000000  00000000  0005c9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017f0  00000000  00000000  000613e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001628  00000000  00000000  00062bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e55a  00000000  00000000  00064200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024e63  00000000  00000000  000a275a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016de37  00000000  00000000  000c75bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002353f4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007660  00000000  00000000  00235444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000418 	.word	0x24000418
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014c40 	.word	0x08014c40

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400041c 	.word	0x2400041c
 80002dc:	08014c40 	.word	0x08014c40

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	4613      	mov	r3, r2
 80006a0:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	68ba      	ldr	r2, [r7, #8]
 80006a6:	601a      	str	r2, [r3, #0]
	this->address = _address;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	79fa      	ldrb	r2, [r7, #7]
 80006ac:	729a      	strb	r2, [r3, #10]
}
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4618      	mov	r0, r3
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

}
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6818      	ldr	r0, [r3, #0]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f103 010a 	add.w	r1, r3, #10
 80006e4:	2364      	movs	r3, #100	; 0x64
 80006e6:	2201      	movs	r2, #1
 80006e8:	f00e f990 	bl	800ea0c <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6818      	ldr	r0, [r3, #0]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f103 010c 	add.w	r1, r3, #12
 80006f6:	2364      	movs	r3, #100	; 0x64
 80006f8:	2202      	movs	r2, #2
 80006fa:	f00e fa1d 	bl	800eb38 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	899b      	ldrh	r3, [r3, #12]
 8000702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	899b      	ldrh	r3, [r3, #12]
 800071a:	b21b      	sxth	r3, r3
 800071c:	b29b      	uxth	r3, r3
 800071e:	0bdb      	lsrs	r3, r3, #15
 8000720:	b2db      	uxtb	r3, r3
 8000722:	461a      	mov	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	765a      	strb	r2, [r3, #25]
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	899b      	ldrh	r3, [r3, #12]
 800073c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000740:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	899b      	ldrh	r3, [r3, #12]
 8000752:	085b      	lsrs	r3, r3, #1
 8000754:	b29b      	uxth	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 800075e:	2300      	movs	r3, #0
 8000760:	737b      	strb	r3, [r7, #13]
 8000762:	7b7b      	ldrb	r3, [r7, #13]
 8000764:	2b05      	cmp	r3, #5
 8000766:	d821      	bhi.n	80007ac <_ZN5AMT2117AMT21_Check_ValueEv+0x7c>
		this->uart_buf = this->uart_buf >> 2;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	899b      	ldrh	r3, [r3, #12]
 800076c:	089b      	lsrs	r3, r3, #2
 800076e:	b29a      	uxth	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	899b      	ldrh	r3, [r3, #12]
 8000778:	b25b      	sxtb	r3, r3
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	b25a      	sxtb	r2, r3
 8000780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000784:	4053      	eors	r3, r2
 8000786:	b25b      	sxtb	r3, r3
 8000788:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	899b      	ldrh	r3, [r3, #12]
 800078e:	085b      	lsrs	r3, r3, #1
 8000790:	b29b      	uxth	r3, r3
 8000792:	b25b      	sxtb	r3, r3
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	b25a      	sxtb	r2, r3
 800079a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800079e:	4053      	eors	r3, r2
 80007a0:	b25b      	sxtb	r3, r3
 80007a2:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	3301      	adds	r3, #1
 80007a8:	737b      	strb	r3, [r7, #13]
 80007aa:	e7da      	b.n	8000762 <_ZN5AMT2117AMT21_Check_ValueEv+0x32>
	}
	k0_check = !k0_check;
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	bf0c      	ite	eq
 80007b2:	2301      	moveq	r3, #1
 80007b4:	2300      	movne	r3, #0
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	bf0c      	ite	eq
 80007c0:	2301      	moveq	r3, #1
 80007c2:	2300      	movne	r3, #0
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7e1b      	ldrb	r3, [r3, #24]
 80007cc:	7bfa      	ldrb	r2, [r7, #15]
 80007ce:	429a      	cmp	r2, r3
 80007d0:	d10a      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7e5b      	ldrb	r3, [r3, #25]
 80007d6:	7bba      	ldrb	r2, [r7, #14]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d105      	bne.n	80007e8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb8>
		this->raw_value = raw_value_temp;
 80007dc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007e4:	2300      	movs	r3, #0
 80007e6:	e003      	b.n	80007f0 <_ZN5AMT2117AMT21_Check_ValueEv+0xc0>
	} else {
		this->raw_value = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
	}
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800080a:	135b      	asrs	r3, r3, #13
 800080c:	b21b      	sxth	r3, r3
 800080e:	b29b      	uxth	r3, r3
			+ (this->raw_value & 0x3FFF)) * -1;
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	b29b      	uxth	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	0392      	lsls	r2, r2, #14
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	b29a      	uxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000824:	b29b      	uxth	r3, r3
 8000826:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800082a:	b29b      	uxth	r3, r3
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b29b      	uxth	r3, r3
 8000830:	b21b      	sxth	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <_ZN5AMT216unwarpEv>:
void AMT21::unwarp() {
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	int32_t dPulse = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
	if (this->raw_value - this->prev_raw_value > 8191) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000852:	461a      	mov	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000860:	db0b      	blt.n	800087a <_ZN5AMT216unwarpEv+0x3a>
		dPulse = -(16383 - (this->raw_value - this->prev_raw_value));
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000868:	461a      	mov	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000870:	1ad2      	subs	r2, r2, r3
 8000872:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <_ZN5AMT216unwarpEv+0xa0>)
 8000874:	4413      	add	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e020      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else if (this->raw_value - this->prev_raw_value < -8191) {
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000880:	461a      	mov	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800088e:	dc0c      	bgt.n	80008aa <_ZN5AMT216unwarpEv+0x6a>
		dPulse = 16383 - (this->prev_raw_value - this->raw_value);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000896:	461a      	mov	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800089e:	1ad2      	subs	r2, r2, r3
 80008a0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	e008      	b.n	80008bc <_ZN5AMT216unwarpEv+0x7c>
	} else {
		dPulse = this->prev_raw_value - this->raw_value;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008b0:	461a      	mov	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80008b8:	1ad3      	subs	r3, r2, r3
 80008ba:	60fb      	str	r3, [r7, #12]
	}
	this->prev_raw_value = this->raw_value;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	821a      	strh	r2, [r3, #16]
	this->unwarp_value = this->unwarp_value + dPulse;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	695a      	ldr	r2, [r3, #20]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	441a      	add	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	615a      	str	r2, [r3, #20]
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	ffffc001 	.word	0xffffc001

080008e4 <_ZN5AMT2113setUnwarpZeroEv>:
void AMT21::setUnwarpZero(){
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	this->unwarp_value = 0;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <_ZN5AMT2114getUnwarpValueEv>:
int32_t AMT21::getUnwarpValue() {
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
	return this->unwarp_value;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	695b      	ldr	r3, [r3, #20]
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <_ZN10AS5047UABIC1EP17TIM_HandleTypeDefmm>:
 *  Created on: Apr 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AS5047UABI.h"

AS5047UABI::AS5047UABI(TIM_HandleTypeDef *_enc_htim, uint32_t _ENC_TIM_CHANNEL1, uint32_t _ENC_TIM_CHANNEL2){
 8000916:	b480      	push	{r7}
 8000918:	b085      	sub	sp, #20
 800091a:	af00      	add	r7, sp, #0
 800091c:	60f8      	str	r0, [r7, #12]
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2200      	movs	r2, #0
 8000928:	731a      	strb	r2, [r3, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	2204      	movs	r2, #4
 800092e:	735a      	strb	r2, [r3, #13]
	this->enc_htim = _enc_htim;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	68ba      	ldr	r2, [r7, #8]
 8000934:	601a      	str	r2, [r3, #0]
	this->ENC_TIM_CHANNEL1 = _ENC_TIM_CHANNEL1;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	605a      	str	r2, [r3, #4]
	this->ENC_TIM_CHANNEL2 = _ENC_TIM_CHANNEL2;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	609a      	str	r2, [r3, #8]
}
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	4618      	mov	r0, r3
 8000946:	3714      	adds	r7, #20
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <_ZN10AS5047UABID1Ev>:
AS5047UABI::~AS5047UABI(){
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

}
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4618      	mov	r0, r3
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <_ZN10AS5047UABI17EncoderReadEnableEv>:
void AS5047UABI::EncoderReadEnable(){
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(this->enc_htim, this->ENC_TIM_CHANNEL1);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4619      	mov	r1, r3
 8000978:	4610      	mov	r0, r2
 800097a:	f00c feb7 	bl	800d6ec <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(this->enc_htim, this->ENC_TIM_CHANNEL2);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	4619      	mov	r1, r3
 8000988:	4610      	mov	r0, r2
 800098a:	f00c feaf 	bl	800d6ec <HAL_TIM_Encoder_Start>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <_ZN10AS5047UABI7setZeroEv>:
void AS5047UABI::EncoderReadDisable(){
	HAL_TIM_Encoder_Stop(this->enc_htim, this->ENC_TIM_CHANNEL1);
	HAL_TIM_Encoder_Stop(this->enc_htim, this->ENC_TIM_CHANNEL2);
}
void AS5047UABI::setZero(){
 8000996:	b480      	push	{r7}
 8000998:	b083      	sub	sp, #12
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
	this->enc_htim->Instance->CNT = 0;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2200      	movs	r2, #0
 80009a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <_ZN10AS5047UABI11getDegAngleEv>:
uint16_t AS5047UABI::getRawCounter(){
	return this->enc_htim->Instance->CNT;
}
float AS5047UABI::getDegAngle(){
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	return ((float)this->enc_htim->Instance->CNT / 2000.0f) * 360.0f;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c4:	ee07 3a90 	vmov	s15, r3
 80009c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009cc:	eddf 6a07 	vldr	s13, [pc, #28]	; 80009ec <_ZN10AS5047UABI11getDegAngleEv+0x38>
 80009d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009d4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80009f0 <_ZN10AS5047UABI11getDegAngleEv+0x3c>
 80009d8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80009dc:	eeb0 0a67 	vmov.f32	s0, s15
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	44fa0000 	.word	0x44fa0000
 80009f0:	43b40000 	.word	0x43b40000

080009f4 <_ZN10AS5047UABI12getMRadAngleEv>:
float AS5047UABI::getRadAngle(){
	return ((float)this->enc_htim->Instance->CNT / 2000.0f) * 6.28f;
}
float AS5047UABI::getMRadAngle(){
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	return ((float)this->enc_htim->Instance->CNT / 2000.0f) * 6280.0f;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a04:	ee07 3a90 	vmov	s15, r3
 8000a08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a0c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000a2c <_ZN10AS5047UABI12getMRadAngleEv+0x38>
 8000a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a14:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000a30 <_ZN10AS5047UABI12getMRadAngleEv+0x3c>
 8000a18:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	44fa0000 	.word	0x44fa0000
 8000a30:	45c44000 	.word	0x45c44000

08000a34 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a3e:	edc7 0a00 	vstr	s1, [r7]
 8000a42:	edd7 0a00 	vldr	s1, [r7]
 8000a46:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a4a:	f010 fc99 	bl	8011380 <atan2f>
 8000a4e:	eef0 7a40 	vmov.f32	s15, s0
 8000a52:	eeb0 0a67 	vmov.f32	s0, s15
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	ed87 0a01 	vstr	s0, [r7, #4]
 8000a66:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a6a:	f010 fc8b 	bl	8011384 <sqrtf>
 8000a6e:	eef0 7a40 	vmov.f32	s15, s0
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <_ZN10RobotJointC1Ev>:
 *      Author: SakuranohanaTH
 */

#include "RobotJoint.h"

RobotJoint::RobotJoint() {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a32      	ldr	r2, [pc, #200]	; (8000b50 <_ZN10RobotJointC1Ev+0xd4>)
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	edd3 7a00 	vldr	s15, [r3]
 8000a90:	2002      	movs	r0, #2
 8000a92:	eeb0 0a67 	vmov.f32	s0, s15
 8000a96:	f000 fda0 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000a9a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	edc3 7a01 	vstr	s15, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	edd3 7a00 	vldr	s15, [r3]
 8000aae:	2003      	movs	r0, #3
 8000ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab4:	f000 fd91 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ab8:	eeb0 7b40 	vmov.f64	d7, d0
 8000abc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	edc3 7a02 	vstr	s15, [r3, #8]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	edd3 7a00 	vldr	s15, [r3]
 8000acc:	2004      	movs	r0, #4
 8000ace:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad2:	f000 fd82 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000ad6:	eeb0 7b40 	vmov.f64	d7, d0
 8000ada:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	edc3 7a03 	vstr	s15, [r3, #12]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f04f 0200 	mov.w	r2, #0
 8000aea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	f04f 0200 	mov.w	r2, #0
 8000af4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000afe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f04f 0200 	mov.w	r2, #0
 8000b08:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000b12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f04f 0200 	mov.w	r2, #0
 8000b1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f04f 0200 	mov.w	r2, #0
 8000b26:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f04f 0200 	mov.w	r2, #0
 8000b30:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <_ZN10RobotJointC1Ev+0xd8>)
 8000b38:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <_ZN10RobotJointC1Ev+0xd4>)
 8000b40:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

}
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	3a83126f 	.word	0x3a83126f
 8000b54:	3dcccccd 	.word	0x3dcccccd

08000b58 <_ZN10RobotJointD1Ev>:
RobotJoint::~RobotJoint() {
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

}
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>:
					/ (L3S3 * this->L12)) * 1000.0;
	this->w_q4 = ((Vx * C1 + Vy * S1 + this->L3 * Wz * S3) / (L3S3)) * 1000.0;
}
void RobotJoint::UpdateQuinticCoff(float T, float Start_pos, float Final_pos,
		float Start_velocity, float Final_velocity, float Start_acceleration,
		float Final_acceleration) {
 8000b6e:	b480      	push	{r7}
 8000b70:	b091      	sub	sp, #68	; 0x44
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	61f8      	str	r0, [r7, #28]
 8000b76:	ed87 0a06 	vstr	s0, [r7, #24]
 8000b7a:	edc7 0a05 	vstr	s1, [r7, #20]
 8000b7e:	ed87 1a04 	vstr	s2, [r7, #16]
 8000b82:	edc7 1a03 	vstr	s3, [r7, #12]
 8000b86:	ed87 2a02 	vstr	s4, [r7, #8]
 8000b8a:	edc7 2a01 	vstr	s5, [r7, #4]
 8000b8e:	ed87 3a00 	vstr	s6, [r7]
	this->C0 = Start_pos;
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	this->C1 = Start_velocity;
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	this->C2 = Start_acceleration / 2.0;
 8000ba2:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ba6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000baa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0

	const float A = Final_pos
			- (Start_pos + (Start_velocity * T)
 8000bb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000bb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
					+ (Start_acceleration * T * T / 2));
 8000bc8:	edd7 6a01 	vldr	s13, [r7, #4]
 8000bcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bd0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000bd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bd8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000bdc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8000be0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000be4:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float A = Final_pos
 8000be8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bf0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	const float B = Final_velocity
			- (Start_velocity + (Start_acceleration * T));
 8000bf4:	ed97 7a01 	vldr	s14, [r7, #4]
 8000bf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c00:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c04:	ee77 7a27 	vadd.f32	s15, s14, s15
	const float B = Final_velocity
 8000c08:	ed97 7a02 	vldr	s14, [r7, #8]
 8000c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c10:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	const float C = Final_acceleration - Start_acceleration;
 8000c14:	ed97 7a00 	vldr	s14, [r7]
 8000c18:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c20:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	const float T2 = T * T;
 8000c24:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c28:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c2c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	const float T3 = T * T * T;
 8000c30:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000c38:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c40:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	const float T4 = T * T * T * T;
 8000c44:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c48:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000c4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c54:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c5c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	const float T5 = T * T * T * T * T;
 8000c60:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c64:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000c68:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c70:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c78:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	this->C3 = (10.0 * A / T3) - (4.0 * B / T2) + (C / (2.0 * T));
 8000c84:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000c88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c8c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000c90:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000c94:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000c98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c9c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000ca0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000ca4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ca8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000cac:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000cb0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000cb4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000cb8:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000cbc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000cc0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000cc4:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000cc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ccc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cd0:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000cd4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000cd8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cdc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	this->C4 = (-15.0 * A / T4) + (7.0 * B / T3) - (C / T2);
 8000ce6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000cea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cee:	eeba 6b0e 	vmov.f64	d6, #174	; 0xc1700000 -15.0
 8000cf2:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000cf6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000cfa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cfe:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000d02:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000d06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d0a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8000d0e:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000d12:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d16:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d1a:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d1e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d22:	edd7 5a0d 	vldr	s11, [r7, #52]	; 0x34
 8000d26:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000d2a:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8000d2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d32:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d36:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
	this->C5 = (6.0 * A / T5) - (3.0 * B / T4) + (C / (2.0 * T3));
 8000d40:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000d44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d48:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8000d4c:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000d50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d58:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000d5c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000d60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d64:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000d68:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000d6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d70:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d74:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d78:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000d7c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000d80:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8000d84:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d8c:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000d90:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d94:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
	this->T = T;
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0

}
 8000daa:	bf00      	nop
 8000dac:	3744      	adds	r7, #68	; 0x44
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr

08000db6 <_ZN10RobotJoint13KalmanFillterEf>:
void RobotJoint::KalmanFillter(float theta_k) {
 8000db6:	b580      	push	{r7, lr}
 8000db8:	ed2d 8b08 	vpush	{d8-d11}
 8000dbc:	b08a      	sub	sp, #40	; 0x28
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	ed87 0a00 	vstr	s0, [r7]
	float X1 = this->X11;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = this->X21;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000dd4:	623b      	str	r3, [r7, #32]
	float P11 = this->p11;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ddc:	61fb      	str	r3, [r7, #28]
	float P12 = this->p12;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000de4:	61bb      	str	r3, [r7, #24]
	float P21 = this->p21;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000dec:	617b      	str	r3, [r7, #20]
	float P22 = this->p22;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000df4:	613b      	str	r3, [r7, #16]
	float Q = this->Q;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000dfc:	60fb      	str	r3, [r7, #12]
	float R = this->R;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000e04:	60bb      	str	r3, [r7, #8]

	this->X11 = X1 + (X2 * this->dt)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	ed93 7a00 	vldr	s14, [r3]
 8000e0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e1c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- ((X1 - theta_k + X2 * this->dt)
 8000e20:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e24:	edd7 7a00 	vldr	s15, [r7]
 8000e28:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	edd3 6a00 	vldr	s13, [r3]
 8000e32:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e3e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	ed93 7a00 	vldr	s14, [r3]
 8000e48:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e50:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e58:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000e5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e60:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	edd3 7a00 	vldr	s15, [r3]
 8000e6a:	2004      	movs	r0, #4
 8000e6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e70:	f000 fbb3 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000e74:	eeb0 7b40 	vmov.f64	d7, d0
 8000e78:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000e7c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000e80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e84:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	ed93 7a00 	vldr	s14, [r3]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	edd3 5a00 	vldr	s11, [r3]
 8000e94:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e98:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000e9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ea0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000ea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eac:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000eb0:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000eb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8000eb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	edd3 6a00 	vldr	s13, [r3]
 8000ec6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed2:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000ed6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eda:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	edd3 7a00 	vldr	s15, [r3]
 8000ee4:	2004      	movs	r0, #4
 8000ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eea:	f000 fb76 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000eee:	eeb0 7b40 	vmov.f64	d7, d0
 8000ef2:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000ef6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000efa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000efe:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	ed93 7a00 	vldr	s14, [r3]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	edd3 5a00 	vldr	s11, [r3]
 8000f0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f12:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8000f16:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f1a:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f26:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000f2a:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- ((X1 - theta_k + X2 * this->dt)
 8000f2e:	ee38 7b47 	vsub.f64	d7, d8, d7
 8000f32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X11 = X1 + (X2 * this->dt)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
	this->X21 = X2
 8000f3c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f40:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8000f44:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f48:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	edd3 7a00 	vldr	s15, [r3]
 8000f52:	2003      	movs	r0, #3
 8000f54:	eeb0 0a67 	vmov.f32	s0, s15
 8000f58:	f000 fb3f 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000f5c:	eeb0 7b40 	vmov.f64	d7, d0
 8000f60:	ee29 7b07 	vmul.f64	d7, d9, d7
 8000f64:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000f68:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	ed93 7a00 	vldr	s14, [r3]
 8000f72:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f7e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f82:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f8a:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (X1 - theta_k + X2 * this->dt))
 8000f8e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000f92:	edd7 7a00 	vldr	s15, [r7]
 8000f96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	edd3 5a00 	vldr	s11, [r3]
 8000fa0:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fa4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8000fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fb0:	ee26 9b07 	vmul.f64	d9, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8000fb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	edd3 6a00 	vldr	s13, [r3]
 8000fc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fd2:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8000fd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fda:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	edd3 7a00 	vldr	s15, [r3]
 8000fe4:	2004      	movs	r0, #4
 8000fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fea:	f000 faf6 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000fee:	eeb0 7b40 	vmov.f64	d7, d0
 8000ff2:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8000ff6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000ffa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ffe:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	ed93 7a00 	vldr	s14, [r3]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	edd3 5a00 	vldr	s11, [r3]
 800100e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001012:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001016:	edd7 7a06 	vldr	s15, [r7, #24]
 800101a:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800101e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001022:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001026:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800102a:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800102e:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001032:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->X21 = X2
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	ed93 7a00 	vldr	s14, [r3]
 8001042:	edd7 7a05 	vldr	s15, [r7, #20]
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	edd7 7a07 	vldr	s15, [r7, #28]
 800104e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001052:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001056:	edd7 7a03 	vldr	s15, [r7, #12]
 800105a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	edd3 7a00 	vldr	s15, [r3]
 8001064:	2004      	movs	r0, #4
 8001066:	eeb0 0a67 	vmov.f32	s0, s15
 800106a:	f000 fab6 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800106e:	eeb0 7b40 	vmov.f64	d7, d0
 8001072:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001076:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800107a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800107e:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	ed93 7a00 	vldr	s14, [r3]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	edd3 5a00 	vldr	s11, [r3]
 800108e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001092:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001096:	edd7 7a06 	vldr	s15, [r7, #24]
 800109a:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800109e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010a6:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80010aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80010ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80010b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	edd3 6a00 	vldr	s13, [r3]
 80010bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80010c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80010cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80010d0:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	edd3 7a00 	vldr	s15, [r3]
 80010da:	2004      	movs	r0, #4
 80010dc:	eeb0 0a67 	vmov.f32	s0, s15
 80010e0:	f000 fa7b 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010e4:	eeb0 7b40 	vmov.f64	d7, d0
 80010e8:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80010ec:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80010f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010f4:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	ed93 7a00 	vldr	s14, [r3]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	edd3 5a00 	vldr	s11, [r3]
 8001104:	edd7 7a04 	vldr	s15, [r7, #16]
 8001108:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800110c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001110:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001118:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800111c:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001120:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001124:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001128:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800112c:	eeb1 8b47 	vneg.f64	d8, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	ed93 7a00 	vldr	s14, [r3]
 8001136:	edd7 7a05 	vldr	s15, [r7, #20]
 800113a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800113e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001146:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800114a:	edd7 7a03 	vldr	s15, [r7, #12]
 800114e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	2004      	movs	r0, #4
 800115a:	eeb0 0a67 	vmov.f32	s0, s15
 800115e:	f000 fa3c 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001162:	eeb0 7b40 	vmov.f64	d7, d0
 8001166:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800116a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800116e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001172:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	ed93 7a00 	vldr	s14, [r3]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	edd3 5a00 	vldr	s11, [r3]
 8001182:	edd7 7a04 	vldr	s15, [r7, #16]
 8001186:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800118a:	edd7 7a06 	vldr	s15, [r7, #24]
 800118e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001196:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800119a:	ee36 7b07 	vadd.f64	d7, d6, d7
			* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800119e:	ee28 7b07 	vmul.f64	d7, d8, d7
 80011a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p11 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	ed93 7a00 	vldr	s14, [r3]
 80011b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ba:	edd7 7a07 	vldr	s15, [r7, #28]
 80011be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80011c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ca:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	2004      	movs	r0, #4
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	f000 f9fe 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011de:	eeb0 7b40 	vmov.f64	d7, d0
 80011e2:	ee29 6b07 	vmul.f64	d6, d9, d7
 80011e6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ee:	ee38 6b07 	vadd.f64	d6, d8, d7
			+ this->dt * (P12 + P22 * this->dt))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	edd3 5a00 	vldr	s11, [r3]
 80011fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001202:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8001206:	edd7 7a06 	vldr	s15, [r7, #24]
 800120a:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800120e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001212:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001216:	ee36 8b07 	vadd.f64	d8, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800121a:	ed97 7a07 	vldr	s14, [r7, #28]
 800121e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001222:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	edd3 6a00 	vldr	s13, [r3]
 800122c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001230:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001234:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001238:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800123c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001240:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	2004      	movs	r0, #4
 800124c:	eeb0 0a67 	vmov.f32	s0, s15
 8001250:	f000 f9c3 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001254:	eeb0 7b40 	vmov.f64	d7, d0
 8001258:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800125c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001260:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001264:	ee39 6b07 	vadd.f64	d6, d9, d7
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a00 	vldr	s14, [r3]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 5a00 	vldr	s11, [r3]
 8001274:	edd7 7a04 	vldr	s15, [r7, #16]
 8001278:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800127c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001280:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001288:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800128c:	ee36 6b07 	vadd.f64	d6, d6, d7
			/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001290:	ee88 7b06 	vdiv.f64	d7, d8, d6
					+ this->dt * (P12 + P22 * this->dt)) - 1)
 8001294:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001298:	ee37 7b46 	vsub.f64	d7, d7, d6
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 800129c:	eeb1 8b47 	vneg.f64	d8, d7
			* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12);
 80012a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a4:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	2003      	movs	r0, #3
 80012b0:	eeb0 0a67 	vmov.f32	s0, s15
 80012b4:	f000 f991 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012b8:	eeb0 7b40 	vmov.f64	d7, d0
 80012bc:	ee29 7b07 	vmul.f64	d7, d9, d7
 80012c0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80012c4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	ed93 7a00 	vldr	s14, [r3]
 80012ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012da:	ee36 6b07 	vadd.f64	d6, d6, d7
 80012de:	edd7 7a06 	vldr	s15, [r7, #24]
 80012e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012ea:	ee28 7b07 	vmul.f64	d7, d8, d7
 80012ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p12 = -((P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	ed93 7a00 	vldr	s14, [r3]
 80012fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001302:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001306:	edd7 7a05 	vldr	s15, [r7, #20]
 800130a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001312:	edd7 7a03 	vldr	s15, [r7, #12]
 8001316:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	edd3 7a00 	vldr	s15, [r3]
 8001320:	2003      	movs	r0, #3
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	f000 f958 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800132a:	eeb0 7b40 	vmov.f64	d7, d0
 800132e:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001332:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001336:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800133a:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 800133e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001342:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edd3 7a00 	vldr	s15, [r3]
 800134c:	2003      	movs	r0, #3
 800134e:	eeb0 0a67 	vmov.f32	s0, s15
 8001352:	f000 f942 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001356:	eeb0 7b40 	vmov.f64	d7, d0
 800135a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800135e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001362:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	ed93 7a00 	vldr	s14, [r3]
 800136c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001374:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001378:	ee36 6b07 	vadd.f64	d6, d6, d7
 800137c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001380:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001384:	ee36 9b07 	vadd.f64	d9, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	ed93 7a00 	vldr	s14, [r3]
 800138e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001396:	edd7 7a07 	vldr	s15, [r7, #28]
 800139a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80013a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013a6:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	edd3 7a00 	vldr	s15, [r3]
 80013b0:	2004      	movs	r0, #4
 80013b2:	eeb0 0a67 	vmov.f32	s0, s15
 80013b6:	f000 f910 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013ba:	eeb0 7b40 	vmov.f64	d7, d0
 80013be:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80013c2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80013c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013ca:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt)))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	ed93 7a00 	vldr	s14, [r3]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	edd3 5a00 	vldr	s11, [r3]
 80013da:	edd7 7a04 	vldr	s15, [r7, #16]
 80013de:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80013e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80013e6:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80013ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013f2:	ee36 7b07 	vadd.f64	d7, d6, d7
					* (P11 + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013f6:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80013fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80013fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001402:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edd3 6a00 	vldr	s13, [r3]
 800140c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001418:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800141c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001420:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	2004      	movs	r0, #4
 800142c:	eeb0 0a67 	vmov.f32	s0, s15
 8001430:	f000 f8d3 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001434:	eeb0 7b40 	vmov.f64	d7, d0
 8001438:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800143c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001440:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001444:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	ed93 7a00 	vldr	s14, [r3]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	edd3 5a00 	vldr	s11, [r3]
 8001454:	edd7 7a04 	vldr	s15, [r7, #16]
 8001458:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800145c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001460:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8001464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001468:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800146c:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001470:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21)
 8001474:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001478:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p21 = P21 + P22 * this->dt + (Q * pow(this->dt, 3)) / 2
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
	this->p22 = P22 + Q * pow(this->dt, 2)
 8001482:	edd7 7a04 	vldr	s15, [r7, #16]
 8001486:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800148a:	edd7 7a03 	vldr	s15, [r7, #12]
 800148e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	2002      	movs	r0, #2
 800149a:	eeb0 0a67 	vmov.f32	s0, s15
 800149e:	f000 f89c 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014a2:	eeb0 7b40 	vmov.f64	d7, d0
 80014a6:	ee29 7b07 	vmul.f64	d7, d9, d7
 80014aa:	ee38 8b07 	vadd.f64	d8, d8, d7
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80014ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80014b2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	2003      	movs	r0, #3
 80014be:	eeb0 0a67 	vmov.f32	s0, s15
 80014c2:	f000 f88a 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014c6:	eeb0 7b40 	vmov.f64	d7, d0
 80014ca:	ee29 7b07 	vmul.f64	d7, d9, d7
 80014ce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80014d2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	ed93 7a00 	vldr	s14, [r3]
 80014dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80014e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80014f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014f4:	ee36 9b07 	vadd.f64	d9, d6, d7
					* ((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P21))
 80014f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014fc:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	2003      	movs	r0, #3
 8001508:	eeb0 0a67 	vmov.f32	s0, s15
 800150c:	f000 f865 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001510:	eeb0 7b40 	vmov.f64	d7, d0
 8001514:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8001518:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800151c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	ed93 7a00 	vldr	s14, [r3]
 8001526:	edd7 7a04 	vldr	s15, [r7, #16]
 800152a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001532:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001536:	edd7 7a05 	vldr	s15, [r7, #20]
 800153a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800153e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001542:	ee29 9b07 	vmul.f64	d9, d9, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 8001546:	ed97 7a07 	vldr	s14, [r7, #28]
 800154a:	edd7 7a02 	vldr	s15, [r7, #8]
 800154e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	edd3 6a00 	vldr	s13, [r3]
 8001558:	edd7 7a05 	vldr	s15, [r7, #20]
 800155c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001564:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001568:	edd7 7a03 	vldr	s15, [r7, #12]
 800156c:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	2004      	movs	r0, #4
 8001578:	eeb0 0a67 	vmov.f32	s0, s15
 800157c:	f000 f82d 	bl	80015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001580:	eeb0 7b40 	vmov.f64	d7, d0
 8001584:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001588:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800158c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001590:	ee3a 6b07 	vadd.f64	d6, d10, d7
							+ this->dt * (P12 + P22 * this->dt));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	ed93 7a00 	vldr	s14, [r3]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	edd3 5a00 	vldr	s11, [r3]
 80015a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80015a4:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80015a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80015ac:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80015b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015b8:	ee36 6b07 	vadd.f64	d6, d6, d7
					/ (P11 + R + P21 * this->dt + (Q * pow(this->dt, 4)) / 4
 80015bc:	ee89 7b06 	vdiv.f64	d7, d9, d6
			- (((Q * pow(this->dt, 3)) / 2 + P22 * this->dt + P12)
 80015c0:	ee38 7b47 	vsub.f64	d7, d8, d7
 80015c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	this->p22 = P22 + Q * pow(this->dt, 2)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	edc3 7a2d 	vstr	s15, [r3, #180]	; 0xb4

}
 80015ce:	bf00      	nop
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	ecbd 8b08 	vpop	{d8-d11}
 80015d8:	bd80      	pop	{r7, pc}

080015da <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	ed87 0a01 	vstr	s0, [r7, #4]
 80015e4:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 80015e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	ee06 3a90 	vmov	s13, r3
 80015f4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80015f8:	eeb0 1b46 	vmov.f64	d1, d6
 80015fc:	eeb0 0b47 	vmov.f64	d0, d7
 8001600:	f00f fbb2 	bl	8010d68 <pow>
 8001604:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8001608:	eeb0 0b47 	vmov.f64	d0, d7
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	ed87 0a01 	vstr	s0, [r7, #4]
 800161c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001620:	fefb 7a67 	vrintm.f32	s15, s15
 8001624:	eeb0 0a67 	vmov.f32	s0, s15
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	ed87 0a01 	vstr	s0, [r7, #4]
 800163c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001640:	fef8 7a67 	vrinta.f32	s15, s15
 8001644:	eeb0 0a67 	vmov.f32	s0, s15
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 8001652:	b480      	push	{r7}
 8001654:	b085      	sub	sp, #20
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2200      	movs	r2, #0
 800166e:	611a      	str	r2, [r3, #16]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	22b4      	movs	r2, #180	; 0xb4
 8001674:	615a      	str	r2, [r3, #20]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2200      	movs	r2, #0
 800167a:	761a      	strb	r2, [r3, #24]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	22ef      	movs	r2, #239	; 0xef
 8001696:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80016a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4618      	mov	r0, r3
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 80016b2:	b480      	push	{r7}
 80016b4:	b083      	sub	sp, #12
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
}
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	4619      	mov	r1, r3
 80016da:	4610      	mov	r0, r2
 80016dc:	f00b fe52 	bl	800d384 <HAL_TIM_PWM_Start>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 80016e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af02      	add	r7, sp, #8
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d13f      	bne.n	800177a <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691c      	ldr	r4, [r3, #16]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	3301      	adds	r3, #1
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001714:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 800199c <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001718:	ee67 7a87 	vmul.f32	s15, s15, s14
 800171c:	eeb0 0a67 	vmov.f32	s0, s15
 8001720:	f7ff ff87 	bl	8001632 <_ZSt5roundf>
 8001724:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800172c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	3301      	adds	r3, #1
 800173a:	ee07 3a90 	vmov	s15, r3
 800173e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001742:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80019a0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800174a:	eeb0 0a67 	vmov.f32	s0, s15
 800174e:	f7ff ff60 	bl	8001612 <_ZSt5floorf>
 8001752:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8001756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800175a:	ee17 3a90 	vmov	r3, s15
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	9600      	str	r6, [sp, #0]
 8001762:	462b      	mov	r3, r5
 8001764:	4622      	mov	r2, r4
 8001766:	6839      	ldr	r1, [r7, #0]
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f9cf 	bl	8001b0c <_ZN10ServoMotor10GripperMapElllll>
 800176e:	4602      	mov	r2, r0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 8001778:	e176      	b.n	8001a68 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b04      	cmp	r3, #4
 8001780:	d13f      	bne.n	8001802 <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691c      	ldr	r4, [r3, #16]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	3301      	adds	r3, #1
 8001794:	ee07 3a90 	vmov	s15, r3
 8001798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800179c:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800199c <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80017a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a4:	eeb0 0a67 	vmov.f32	s0, s15
 80017a8:	f7ff ff43 	bl	8001632 <_ZSt5roundf>
 80017ac:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80017b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c0:	3301      	adds	r3, #1
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ca:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80019a0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80017ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017d2:	eeb0 0a67 	vmov.f32	s0, s15
 80017d6:	f7ff ff1c 	bl	8001612 <_ZSt5floorf>
 80017da:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 80017de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e2:	ee17 3a90 	vmov	r3, s15
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	9600      	str	r6, [sp, #0]
 80017ea:	462b      	mov	r3, r5
 80017ec:	4622      	mov	r2, r4
 80017ee:	6839      	ldr	r1, [r7, #0]
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f98b 	bl	8001b0c <_ZN10ServoMotor10GripperMapElllll>
 80017f6:	4602      	mov	r2, r0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001800:	e132      	b.n	8001a68 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b08      	cmp	r3, #8
 8001808:	d13f      	bne.n	800188a <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691c      	ldr	r4, [r3, #16]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	3301      	adds	r3, #1
 800181c:	ee07 3a90 	vmov	s15, r3
 8001820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001824:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800199c <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001828:	ee67 7a87 	vmul.f32	s15, s15, s14
 800182c:	eeb0 0a67 	vmov.f32	s0, s15
 8001830:	f7ff feff 	bl	8001632 <_ZSt5roundf>
 8001834:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800183c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	3301      	adds	r3, #1
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001852:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80019a0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800185a:	eeb0 0a67 	vmov.f32	s0, s15
 800185e:	f7ff fed8 	bl	8001612 <_ZSt5floorf>
 8001862:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8001866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800186a:	ee17 3a90 	vmov	r3, s15
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	9600      	str	r6, [sp, #0]
 8001872:	462b      	mov	r3, r5
 8001874:	4622      	mov	r2, r4
 8001876:	6839      	ldr	r1, [r7, #0]
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f947 	bl	8001b0c <_ZN10ServoMotor10GripperMapElllll>
 800187e:	4602      	mov	r2, r0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001888:	e0ee      	b.n	8001a68 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b0c      	cmp	r3, #12
 8001890:	d13f      	bne.n	8001912 <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691c      	ldr	r4, [r3, #16]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	3301      	adds	r3, #1
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ac:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800199c <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80018b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b4:	eeb0 0a67 	vmov.f32	s0, s15
 80018b8:	f7ff febb 	bl	8001632 <_ZSt5roundf>
 80018bc:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80018c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c4:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d0:	3301      	adds	r3, #1
 80018d2:	ee07 3a90 	vmov	s15, r3
 80018d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018da:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80019a0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80018de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e2:	eeb0 0a67 	vmov.f32	s0, s15
 80018e6:	f7ff fe94 	bl	8001612 <_ZSt5floorf>
 80018ea:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 80018ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f2:	ee17 3a90 	vmov	r3, s15
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	9600      	str	r6, [sp, #0]
 80018fa:	462b      	mov	r3, r5
 80018fc:	4622      	mov	r2, r4
 80018fe:	6839      	ldr	r1, [r7, #0]
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f903 	bl	8001b0c <_ZN10ServoMotor10GripperMapElllll>
 8001906:	4602      	mov	r2, r0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001910:	e0aa      	b.n	8001a68 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b10      	cmp	r3, #16
 8001918:	d144      	bne.n	80019a4 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691c      	ldr	r4, [r3, #16]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192a:	3301      	adds	r3, #1
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001934:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800199c <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8001938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193c:	eeb0 0a67 	vmov.f32	s0, s15
 8001940:	f7ff fe77 	bl	8001632 <_ZSt5roundf>
 8001944:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800194c:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	3301      	adds	r3, #1
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001962:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80019a0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8001966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196a:	eeb0 0a67 	vmov.f32	s0, s15
 800196e:	f7ff fe50 	bl	8001612 <_ZSt5floorf>
 8001972:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8001976:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800197a:	ee17 3a90 	vmov	r3, s15
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	9600      	str	r6, [sp, #0]
 8001982:	462b      	mov	r3, r5
 8001984:	4622      	mov	r2, r4
 8001986:	6839      	ldr	r1, [r7, #0]
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f8bf 	bl	8001b0c <_ZN10ServoMotor10GripperMapElllll>
 800198e:	4602      	mov	r2, r0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001998:	e066      	b.n	8001a68 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 800199a:	bf00      	nop
 800199c:	3d4ccccd 	.word	0x3d4ccccd
 80019a0:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b14      	cmp	r3, #20
 80019aa:	d13f      	bne.n	8001a2c <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691c      	ldr	r4, [r3, #16]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	3301      	adds	r3, #1
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c6:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 800199c <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 80019ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ce:	eeb0 0a67 	vmov.f32	s0, s15
 80019d2:	f7ff fe2e 	bl	8001632 <_ZSt5roundf>
 80019d6:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 80019da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019de:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	3301      	adds	r3, #1
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f4:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 80019a0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 80019f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001a00:	f7ff fe07 	bl	8001612 <_ZSt5floorf>
 8001a04:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8001a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0c:	ee17 3a90 	vmov	r3, s15
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	9600      	str	r6, [sp, #0]
 8001a14:	462b      	mov	r3, r5
 8001a16:	4622      	mov	r2, r4
 8001a18:	6839      	ldr	r1, [r7, #0]
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f876 	bl	8001b0c <_ZN10ServoMotor10GripperMapElllll>
 8001a20:	4602      	mov	r2, r0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001a2a:	e01d      	b.n	8001a68 <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2200      	movs	r2, #0
 8001a34:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2200      	movs	r2, #0
 8001a48:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2200      	movs	r2, #0
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2200      	movs	r2, #0
 8001a66:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a70 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	761a      	strb	r2, [r3, #24]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	765a      	strb	r2, [r3, #25]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	7e5b      	ldrb	r3, [r3, #25]
 8001ac0:	f083 0301 	eor.w	r3, r3, #1
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d106      	bne.n	8001ad8 <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff fe09 	bl	80016e8 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001ad6:	e000      	b.n	8001ada <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 8001ad8:	bf00      	nop
}
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7e1b      	ldrb	r3, [r3, #24]
 8001aec:	f083 0301 	eor.w	r3, r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d106      	bne.n	8001b04 <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	4619      	mov	r1, r3
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff fdf3 	bl	80016e8 <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001b02:	e000      	b.n	8001b06 <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001b04:	bf00      	nop
}
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	69f9      	ldr	r1, [r7, #28]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	1a8a      	subs	r2, r1, r2
 8001b26:	fb03 f202 	mul.w	r2, r3, r2
 8001b2a:	6839      	ldr	r1, [r7, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	1acb      	subs	r3, r1, r3
 8001b30:	fb92 f2f3 	sdiv	r2, r2, r3
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	4413      	add	r3, r2
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b52:	eef0 7ae7 	vabs.f32	s15, s15
 8001b56:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4a18      	ldr	r2, [pc, #96]	; (8001bd8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8001b76:	615a      	str	r2, [r3, #20]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4a18      	ldr	r2, [pc, #96]	; (8001bdc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001b7c:	619a      	str	r2, [r3, #24]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b84:	61da      	str	r2, [r3, #28]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4a15      	ldr	r2, [pc, #84]	; (8001be0 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8001b8a:	621a      	str	r2, [r3, #32]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	22c7      	movs	r2, #199	; 0xc7
 8001ba8:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 1.0f;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001bb0:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4a09      	ldr	r2, [pc, #36]	; (8001bdc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001bb6:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8001bb8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001be4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f000 f82f 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	60da      	str	r2, [r3, #12]
}
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	41a00000 	.word	0x41a00000
 8001bdc:	469c4000 	.word	0x469c4000
 8001be0:	43480000 	.word	0x43480000
 8001be4:	00000000 	.word	0x00000000

08001be8 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
}
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4610      	mov	r0, r2
 8001c12:	f00b fbb7 	bl	800d384 <HAL_TIM_PWM_Start>
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	ed2d 8b02 	vpush	{d8}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c40:	f7ff ff80 	bl	8001b44 <_ZSt4fabsf>
 8001c44:	eeb0 7a40 	vmov.f32	s14, s0
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c56:	bf94      	ite	ls
 8001c58:	2301      	movls	r3, #1
 8001c5a:	2300      	movhi	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	e01b      	b.n	8001ca2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c70:	eeb0 0a67 	vmov.f32	s0, s15
 8001c74:	f7ff ff66 	bl	8001b44 <_ZSt4fabsf>
 8001c78:	eeb0 7a40 	vmov.f32	s14, s0
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	bfac      	ite	ge
 8001c8c:	2301      	movge	r3, #1
 8001c8e:	2300      	movlt	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	e001      	b.n	8001ca2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ca8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8001f44 <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001cac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb4:	f2c0 80db 	blt.w	8001e6e <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6898      	ldr	r0, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f008 fa8b 	bl	800a1e0 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce4:	eddf 6a98 	vldr	s13, [pc, #608]	; 8001f48 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001cec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cf0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf8:	f7ff fc9b 	bl	8001632 <_ZSt5roundf>
 8001cfc:	eef0 7a40 	vmov.f32	s15, s0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d0a:	ee17 2a90 	vmov	r2, s15
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d113      	bne.n	8001d40 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001d22:	085b      	lsrs	r3, r3, #1
 8001d24:	4618      	mov	r0, r3
 8001d26:	f000 fa5b 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001d2a:	eeb0 7b40 	vmov.f64	d7, d0
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d38:	ee17 2a90 	vmov	r2, s15
 8001d3c:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8001d3e:	e1e0      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d113      	bne.n	8001d70 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001d52:	085b      	lsrs	r3, r3, #1
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 fa43 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001d5a:	eeb0 7b40 	vmov.f64	d7, d0
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d68:	ee17 2a90 	vmov	r2, s15
 8001d6c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001d6e:	e1c8      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d113      	bne.n	8001da0 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001d82:	085b      	lsrs	r3, r3, #1
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 fa2b 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001d8a:	eeb0 7b40 	vmov.f64	d7, d0
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d98:	ee17 2a90 	vmov	r2, s15
 8001d9c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001d9e:	e1b0      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b0c      	cmp	r3, #12
 8001da6:	d113      	bne.n	8001dd0 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8001db2:	085b      	lsrs	r3, r3, #1
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fa13 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001dba:	eeb0 7b40 	vmov.f64	d7, d0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dc8:	ee17 2a90 	vmov	r2, s15
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001dce:	e198      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b10      	cmp	r3, #16
 8001dd6:	d113      	bne.n	8001e00 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8001de2:	085b      	lsrs	r3, r3, #1
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 f9fb 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001dea:	eeb0 7b40 	vmov.f64	d7, d0
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001df8:	ee17 2a90 	vmov	r2, s15
 8001dfc:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001dfe:	e180      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b14      	cmp	r3, #20
 8001e06:	d113      	bne.n	8001e30 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8001e12:	085b      	lsrs	r3, r3, #1
 8001e14:	4618      	mov	r0, r3
 8001e16:	f000 f9e3 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e1a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e28:	ee17 2a90 	vmov	r2, s15
 8001e2c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e2e:	e168      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2200      	movs	r2, #0
 8001e42:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2200      	movs	r2, #0
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e6c:	e149      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e74:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001f4c <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8001e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e80:	f200 80e5 	bhi.w	800204e <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6898      	ldr	r0, [r3, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	2200      	movs	r2, #0
 8001e90:	4619      	mov	r1, r3
 8001e92:	f008 f9a5 	bl	800a1e0 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	ee07 3a90 	vmov	s15, r3
 8001ea4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001ea8:	ed97 0a03 	vldr	s0, [r7, #12]
 8001eac:	f7ff fe4a 	bl	8001b44 <_ZSt4fabsf>
 8001eb0:	eef0 7a40 	vmov.f32	s15, s0
 8001eb4:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001eb8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001f48 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001ec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ecc:	f7ff fbb1 	bl	8001632 <_ZSt5roundf>
 8001ed0:	eef0 7a40 	vmov.f32	s15, s0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ede:	ee17 2a90 	vmov	r2, s15
 8001ee2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d113      	bne.n	8001f14 <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8001ef6:	085b      	lsrs	r3, r3, #1
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f971 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001efe:	eeb0 7b40 	vmov.f64	d7, d0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f0c:	ee17 2a90 	vmov	r2, s15
 8001f10:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f12:	e0f6      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	d119      	bne.n	8001f50 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8001f26:	085b      	lsrs	r3, r3, #1
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 f959 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f2e:	eeb0 7b40 	vmov.f64	d7, d0
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f3c:	ee17 2a90 	vmov	r2, s15
 8001f40:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001f42:	e0de      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 8001f44:	3a83126f 	.word	0x3a83126f
 8001f48:	4d64e1c0 	.word	0x4d64e1c0
 8001f4c:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d113      	bne.n	8001f80 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f93b 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f6a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f78:	ee17 2a90 	vmov	r2, s15
 8001f7c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001f7e:	e0c0      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b0c      	cmp	r3, #12
 8001f86:	d113      	bne.n	8001fb0 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8001f92:	085b      	lsrs	r3, r3, #1
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f923 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001f9a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fa8:	ee17 2a90 	vmov	r2, s15
 8001fac:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001fae:	e0a8      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b10      	cmp	r3, #16
 8001fb6:	d113      	bne.n	8001fe0 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8001fc2:	085b      	lsrs	r3, r3, #1
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 f90b 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001fca:	eeb0 7b40 	vmov.f64	d7, d0
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fd8:	ee17 2a90 	vmov	r2, s15
 8001fdc:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001fde:	e090      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b14      	cmp	r3, #20
 8001fe6:	d113      	bne.n	8002010 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8001ff2:	085b      	lsrs	r3, r3, #1
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 f8f3 	bl	80021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001ffa:	eeb0 7b40 	vmov.f64	d7, d0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002008:	ee17 2a90 	vmov	r2, s15
 800200c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800200e:	e078      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2200      	movs	r2, #0
 8002018:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2200      	movs	r2, #0
 8002022:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2200      	movs	r2, #0
 800202c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2200      	movs	r2, #0
 8002036:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2200      	movs	r2, #0
 8002040:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2200      	movs	r2, #0
 800204a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800204c:	e059      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d105      	bne.n	8002062 <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002060:	e04f      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b04      	cmp	r3, #4
 8002068:	d105      	bne.n	8002076 <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2200      	movs	r2, #0
 8002072:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002074:	e045      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b08      	cmp	r3, #8
 800207c:	d105      	bne.n	800208a <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2200      	movs	r2, #0
 8002086:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002088:	e03b      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b0c      	cmp	r3, #12
 8002090:	d105      	bne.n	800209e <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800209c:	e031      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b10      	cmp	r3, #16
 80020a4:	d105      	bne.n	80020b2 <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	659a      	str	r2, [r3, #88]	; 0x58
}
 80020b0:	e027      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b14      	cmp	r3, #20
 80020b8:	d105      	bne.n	80020c6 <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2200      	movs	r2, #0
 80020c2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80020c4:	e01d      	b.n	8002102 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2200      	movs	r2, #0
 80020e2:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2200      	movs	r2, #0
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2200      	movs	r2, #0
 80020f6:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2200      	movs	r2, #0
 8002100:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	ecbd 8b02 	vpop	{d8}
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop

08002110 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 800211c:	ed97 0a00 	vldr	s0, [r7]
 8002120:	f7ff fd10 	bl	8001b44 <_ZSt4fabsf>
 8002124:	eef0 7a40 	vmov.f32	s15, s0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800214a:	eeb0 0b47 	vmov.f64	d0, d7
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ffe5 	bl	8002136 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800216c:	eeb0 7b40 	vmov.f64	d7, d0
 8002170:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	0000      	movs	r0, r0
 8002184:	0000      	movs	r0, r0
	...

08002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>:
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
						/ (2.0f * PI)));
//	}
}
void Stepper::StepperOpenLoopSpeedM(float _speed_m) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed_m * this->microStep * this->ratio * this->SPR * 1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	ed93 7a07 	vldr	s14, [r3, #28]
 800219a:	edd7 7a00 	vldr	s15, [r7]
 800219e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80021a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80021b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI * 1000.0f)));
 80021ba:	ed9f 5b07 	vldr	d5, [pc, #28]	; 80021d8 <_ZN7Stepper21StepperOpenLoopSpeedMEf+0x50>
 80021be:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 80021c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021c6:	eeb0 0a67 	vmov.f32	s0, s15
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fd28 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	704a95d1 	.word	0x704a95d1
 80021dc:	40b88b2f 	.word	0x40b88b2f

080021e0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80021f2:	eeb0 0b47 	vmov.f64	d0, d7
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <MX_CRC_Init+0x54>)
 8002206:	4a14      	ldr	r2, [pc, #80]	; (8002258 <MX_CRC_Init+0x58>)
 8002208:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800220a:	4b12      	ldr	r3, [pc, #72]	; (8002254 <MX_CRC_Init+0x54>)
 800220c:	2201      	movs	r2, #1
 800220e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8002210:	4b10      	ldr	r3, [pc, #64]	; (8002254 <MX_CRC_Init+0x54>)
 8002212:	2201      	movs	r2, #1
 8002214:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 8002216:	4b0f      	ldr	r3, [pc, #60]	; (8002254 <MX_CRC_Init+0x54>)
 8002218:	f248 0205 	movw	r2, #32773	; 0x8005
 800221c:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <MX_CRC_Init+0x54>)
 8002220:	2208      	movs	r2, #8
 8002222:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8002224:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <MX_CRC_Init+0x54>)
 8002226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800222a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <MX_CRC_Init+0x54>)
 800222e:	2220      	movs	r2, #32
 8002230:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8002232:	4b08      	ldr	r3, [pc, #32]	; (8002254 <MX_CRC_Init+0x54>)
 8002234:	2280      	movs	r2, #128	; 0x80
 8002236:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002238:	4b06      	ldr	r3, [pc, #24]	; (8002254 <MX_CRC_Init+0x54>)
 800223a:	2201      	movs	r2, #1
 800223c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800223e:	4805      	ldr	r0, [pc, #20]	; (8002254 <MX_CRC_Init+0x54>)
 8002240:	f004 fde4 	bl	8006e0c <HAL_CRC_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 800224a:	f002 fb79 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	24000434 	.word	0x24000434
 8002258:	58024c00 	.word	0x58024c00

0800225c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <HAL_CRC_MspInit+0x3c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d10e      	bne.n	800228c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_CRC_MspInit+0x40>)
 8002270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002274:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_CRC_MspInit+0x40>)
 8002276:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800227a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <HAL_CRC_MspInit+0x40>)
 8002280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	58024c00 	.word	0x58024c00
 800229c:	58024400 	.word	0x58024400

080022a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022a6:	4b35      	ldr	r3, [pc, #212]	; (800237c <MX_DMA_Init+0xdc>)
 80022a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022ac:	4a33      	ldr	r2, [pc, #204]	; (800237c <MX_DMA_Init+0xdc>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022b6:	4b31      	ldr	r3, [pc, #196]	; (800237c <MX_DMA_Init+0xdc>)
 80022b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	607b      	str	r3, [r7, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022c4:	4b2d      	ldr	r3, [pc, #180]	; (800237c <MX_DMA_Init+0xdc>)
 80022c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022ca:	4a2c      	ldr	r2, [pc, #176]	; (800237c <MX_DMA_Init+0xdc>)
 80022cc:	f043 0302 	orr.w	r3, r3, #2
 80022d0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022d4:	4b29      	ldr	r3, [pc, #164]	; (800237c <MX_DMA_Init+0xdc>)
 80022d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	200b      	movs	r0, #11
 80022e8:	f004 fd4f 	bl	8006d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80022ec:	200b      	movs	r0, #11
 80022ee:	f004 fd66 	bl	8006dbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	200c      	movs	r0, #12
 80022f8:	f004 fd47 	bl	8006d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80022fc:	200c      	movs	r0, #12
 80022fe:	f004 fd5e 	bl	8006dbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002302:	2200      	movs	r2, #0
 8002304:	2100      	movs	r1, #0
 8002306:	200d      	movs	r0, #13
 8002308:	f004 fd3f 	bl	8006d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800230c:	200d      	movs	r0, #13
 800230e:	f004 fd56 	bl	8006dbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2100      	movs	r1, #0
 8002316:	200e      	movs	r0, #14
 8002318:	f004 fd37 	bl	8006d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800231c:	200e      	movs	r0, #14
 800231e:	f004 fd4e 	bl	8006dbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	200f      	movs	r0, #15
 8002328:	f004 fd2f 	bl	8006d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800232c:	200f      	movs	r0, #15
 800232e:	f004 fd46 	bl	8006dbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	2010      	movs	r0, #16
 8002338:	f004 fd27 	bl	8006d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800233c:	2010      	movs	r0, #16
 800233e:	f004 fd3e 	bl	8006dbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	2011      	movs	r0, #17
 8002348:	f004 fd1f 	bl	8006d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800234c:	2011      	movs	r0, #17
 800234e:	f004 fd36 	bl	8006dbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	202f      	movs	r0, #47	; 0x2f
 8002358:	f004 fd17 	bl	8006d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800235c:	202f      	movs	r0, #47	; 0x2f
 800235e:	f004 fd2e 	bl	8006dbe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002362:	2200      	movs	r2, #0
 8002364:	2100      	movs	r1, #0
 8002366:	2038      	movs	r0, #56	; 0x38
 8002368:	f004 fd0f 	bl	8006d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800236c:	2038      	movs	r0, #56	; 0x38
 800236e:	f004 fd26 	bl	8006dbe <HAL_NVIC_EnableIRQ>

}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	58024400 	.word	0x58024400

08002380 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08c      	sub	sp, #48	; 0x30
 8002384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002386:	f107 031c 	add.w	r3, r7, #28
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002396:	4b87      	ldr	r3, [pc, #540]	; (80025b4 <MX_GPIO_Init+0x234>)
 8002398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239c:	4a85      	ldr	r2, [pc, #532]	; (80025b4 <MX_GPIO_Init+0x234>)
 800239e:	f043 0310 	orr.w	r3, r3, #16
 80023a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023a6:	4b83      	ldr	r3, [pc, #524]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ac:	f003 0310 	and.w	r3, r3, #16
 80023b0:	61bb      	str	r3, [r7, #24]
 80023b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b4:	4b7f      	ldr	r3, [pc, #508]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ba:	4a7e      	ldr	r2, [pc, #504]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023c4:	4b7b      	ldr	r3, [pc, #492]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023d2:	4b78      	ldr	r3, [pc, #480]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d8:	4a76      	ldr	r2, [pc, #472]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e2:	4b74      	ldr	r3, [pc, #464]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f0:	4b70      	ldr	r3, [pc, #448]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f6:	4a6f      	ldr	r2, [pc, #444]	; (80025b4 <MX_GPIO_Init+0x234>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002400:	4b6c      	ldr	r3, [pc, #432]	; (80025b4 <MX_GPIO_Init+0x234>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	4b69      	ldr	r3, [pc, #420]	; (80025b4 <MX_GPIO_Init+0x234>)
 8002410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002414:	4a67      	ldr	r2, [pc, #412]	; (80025b4 <MX_GPIO_Init+0x234>)
 8002416:	f043 0302 	orr.w	r3, r3, #2
 800241a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800241e:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <MX_GPIO_Init+0x234>)
 8002420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800242c:	4b61      	ldr	r3, [pc, #388]	; (80025b4 <MX_GPIO_Init+0x234>)
 800242e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002432:	4a60      	ldr	r2, [pc, #384]	; (80025b4 <MX_GPIO_Init+0x234>)
 8002434:	f043 0308 	orr.w	r3, r3, #8
 8002438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243c:	4b5d      	ldr	r3, [pc, #372]	; (80025b4 <MX_GPIO_Init+0x234>)
 800243e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	607b      	str	r3, [r7, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800244a:	4b5a      	ldr	r3, [pc, #360]	; (80025b4 <MX_GPIO_Init+0x234>)
 800244c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002450:	4a58      	ldr	r2, [pc, #352]	; (80025b4 <MX_GPIO_Init+0x234>)
 8002452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002456:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800245a:	4b56      	ldr	r3, [pc, #344]	; (80025b4 <MX_GPIO_Init+0x234>)
 800245c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002468:	2200      	movs	r2, #0
 800246a:	f644 2121 	movw	r1, #18977	; 0x4a21
 800246e:	4852      	ldr	r0, [pc, #328]	; (80025b8 <MX_GPIO_Init+0x238>)
 8002470:	f007 feb6 	bl	800a1e0 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002474:	2200      	movs	r2, #0
 8002476:	f24c 0102 	movw	r1, #49154	; 0xc002
 800247a:	4850      	ldr	r0, [pc, #320]	; (80025bc <MX_GPIO_Init+0x23c>)
 800247c:	f007 feb0 	bl	800a1e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002480:	2200      	movs	r2, #0
 8002482:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002486:	484e      	ldr	r0, [pc, #312]	; (80025c0 <MX_GPIO_Init+0x240>)
 8002488:	f007 feaa 	bl	800a1e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800248c:	2200      	movs	r2, #0
 800248e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002492:	484c      	ldr	r0, [pc, #304]	; (80025c4 <MX_GPIO_Init+0x244>)
 8002494:	f007 fea4 	bl	800a1e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8002498:	2200      	movs	r2, #0
 800249a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800249e:	484a      	ldr	r0, [pc, #296]	; (80025c8 <MX_GPIO_Init+0x248>)
 80024a0:	f007 fe9e 	bl	800a1e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80024a4:	f644 2321 	movw	r3, #18977	; 0x4a21
 80024a8:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024aa:	2301      	movs	r3, #1
 80024ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b6:	f107 031c 	add.w	r3, r7, #28
 80024ba:	4619      	mov	r1, r3
 80024bc:	483e      	ldr	r0, [pc, #248]	; (80025b8 <MX_GPIO_Init+0x238>)
 80024be:	f007 fcdf 	bl	8009e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM_Z_BOTTOM_Pin;
 80024c2:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80024c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80024cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024d2:	f107 031c 	add.w	r3, r7, #28
 80024d6:	4619      	mov	r1, r3
 80024d8:	4838      	ldr	r0, [pc, #224]	; (80025bc <MX_GPIO_Init+0x23c>)
 80024da:	f007 fcd1 	bl	8009e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80024de:	f24c 0302 	movw	r3, #49154	; 0xc002
 80024e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e4:	2301      	movs	r3, #1
 80024e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ec:	2300      	movs	r3, #0
 80024ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024f0:	f107 031c 	add.w	r3, r7, #28
 80024f4:	4619      	mov	r1, r3
 80024f6:	4831      	ldr	r0, [pc, #196]	; (80025bc <MX_GPIO_Init+0x23c>)
 80024f8:	f007 fcc2 	bl	8009e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80024fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002502:	2301      	movs	r3, #1
 8002504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2300      	movs	r3, #0
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800250e:	f107 031c 	add.w	r3, r7, #28
 8002512:	4619      	mov	r1, r3
 8002514:	482a      	ldr	r0, [pc, #168]	; (80025c0 <MX_GPIO_Init+0x240>)
 8002516:	f007 fcb3 	bl	8009e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800251a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800251e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002520:	2301      	movs	r3, #1
 8002522:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	2300      	movs	r3, #0
 800252a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	4619      	mov	r1, r3
 8002532:	4824      	ldr	r0, [pc, #144]	; (80025c4 <MX_GPIO_Init+0x244>)
 8002534:	f007 fca4 	bl	8009e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800253c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253e:	2301      	movs	r3, #1
 8002540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002546:	2300      	movs	r3, #0
 8002548:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 800254a:	f107 031c 	add.w	r3, r7, #28
 800254e:	4619      	mov	r1, r3
 8002550:	481d      	ldr	r0, [pc, #116]	; (80025c8 <MX_GPIO_Init+0x248>)
 8002552:	f007 fc95 	bl	8009e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM_Z_TOP_Pin;
 8002556:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800255a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800255c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002560:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM_Z_TOP_GPIO_Port, &GPIO_InitStruct);
 8002566:	f107 031c 	add.w	r3, r7, #28
 800256a:	4619      	mov	r1, r3
 800256c:	4817      	ldr	r0, [pc, #92]	; (80025cc <MX_GPIO_Init+0x24c>)
 800256e:	f007 fc87 	bl	8009e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM_LED_Pin|LM_SERVO_Pin;
 8002572:	23c0      	movs	r3, #192	; 0xc0
 8002574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002576:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800257a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002580:	f107 031c 	add.w	r3, r7, #28
 8002584:	4619      	mov	r1, r3
 8002586:	480c      	ldr	r0, [pc, #48]	; (80025b8 <MX_GPIO_Init+0x238>)
 8002588:	f007 fc7a 	bl	8009e80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800258c:	2200      	movs	r2, #0
 800258e:	2100      	movs	r1, #0
 8002590:	2017      	movs	r0, #23
 8002592:	f004 fbfa 	bl	8006d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002596:	2017      	movs	r0, #23
 8002598:	f004 fc11 	bl	8006dbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800259c:	2200      	movs	r2, #0
 800259e:	2100      	movs	r1, #0
 80025a0:	2028      	movs	r0, #40	; 0x28
 80025a2:	f004 fbf2 	bl	8006d8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025a6:	2028      	movs	r0, #40	; 0x28
 80025a8:	f004 fc09 	bl	8006dbe <HAL_NVIC_EnableIRQ>

}
 80025ac:	bf00      	nop
 80025ae:	3730      	adds	r7, #48	; 0x30
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	58024400 	.word	0x58024400
 80025b8:	58020400 	.word	0x58020400
 80025bc:	58021000 	.word	0x58021000
 80025c0:	58020c00 	.word	0x58020c00
 80025c4:	58020800 	.word	0x58020800
 80025c8:	58020000 	.word	0x58020000
 80025cc:	58021800 	.word	0x58021800

080025d0 <_Z12Insert_queueii>:
volatile float u_q4 = 0.0;

volatile float Robot_X, Robot_Y, Robot_Z, Robot_Yaw;
volatile float Planning_q1, Planning_q2, Planning_q3, Planning_q4;

bool Insert_queue(int value, int gripper_value) {
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
	if (bot == LIMIT - 1) {
 80025da:	4b18      	ldr	r3, [pc, #96]	; (800263c <_Z12Insert_queueii+0x6c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b13      	cmp	r3, #19
 80025e0:	bf0c      	ite	eq
 80025e2:	2301      	moveq	r3, #1
 80025e4:	2300      	movne	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <_Z12Insert_queueii+0x20>
		return false;
 80025ec:	2300      	movs	r3, #0
 80025ee:	e01e      	b.n	800262e <_Z12Insert_queueii+0x5e>
	} else {
		if (first == -1) {
 80025f0:	4b13      	ldr	r3, [pc, #76]	; (8002640 <_Z12Insert_queueii+0x70>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025f8:	bf0c      	ite	eq
 80025fa:	2301      	moveq	r3, #1
 80025fc:	2300      	movne	r3, #0
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <_Z12Insert_queueii+0x3a>
			first = 0;
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <_Z12Insert_queueii+0x70>)
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
		}
		bot++;
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <_Z12Insert_queueii+0x6c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3301      	adds	r3, #1
 8002610:	4a0a      	ldr	r2, [pc, #40]	; (800263c <_Z12Insert_queueii+0x6c>)
 8002612:	6013      	str	r3, [r2, #0]
		queue[bot] = value;
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <_Z12Insert_queueii+0x6c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	490a      	ldr	r1, [pc, #40]	; (8002644 <_Z12Insert_queueii+0x74>)
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Gripper_State[bot] = gripper_value;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <_Z12Insert_queueii+0x6c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4908      	ldr	r1, [pc, #32]	; (8002648 <_Z12Insert_queueii+0x78>)
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		return true;
 800262c:	2301      	movs	r3, #1
	}
}
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	24000010 	.word	0x24000010
 8002640:	2400000c 	.word	0x2400000c
 8002644:	24000b40 	.word	0x24000b40
 8002648:	24000b90 	.word	0x24000b90

0800264c <_Z10Call_queuev>:

int Call_queue() {
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
	int output;
	if (first == -1 || first > bot) {
 8002652:	4b21      	ldr	r3, [pc, #132]	; (80026d8 <_Z10Call_queuev+0x8c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800265a:	d005      	beq.n	8002668 <_Z10Call_queuev+0x1c>
 800265c:	4b1e      	ldr	r3, [pc, #120]	; (80026d8 <_Z10Call_queuev+0x8c>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <_Z10Call_queuev+0x90>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	dd01      	ble.n	800266c <_Z10Call_queuev+0x20>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <_Z10Call_queuev+0x22>
 800266c:	2300      	movs	r3, #0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d020      	beq.n	80026b4 <_Z10Call_queuev+0x68>
		for (int num = 0; num <= bot + 1; num++) {
 8002672:	2300      	movs	r3, #0
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	4b19      	ldr	r3, [pc, #100]	; (80026dc <_Z10Call_queuev+0x90>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	bfd4      	ite	le
 8002682:	2301      	movle	r3, #1
 8002684:	2300      	movgt	r3, #0
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <_Z10Call_queuev+0x52>
			queue[num] = 0;
 800268c:	4a14      	ldr	r2, [pc, #80]	; (80026e0 <_Z10Call_queuev+0x94>)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2100      	movs	r1, #0
 8002692:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int num = 0; num <= bot + 1; num++) {
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	3301      	adds	r3, #1
 800269a:	603b      	str	r3, [r7, #0]
 800269c:	e7eb      	b.n	8002676 <_Z10Call_queuev+0x2a>
		}
		first = -1;
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <_Z10Call_queuev+0x8c>)
 80026a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026a4:	601a      	str	r2, [r3, #0]
		bot = -1;
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <_Z10Call_queuev+0x90>)
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026ac:	601a      	str	r2, [r3, #0]
		output = 255;
 80026ae:	23ff      	movs	r3, #255	; 0xff
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	e00a      	b.n	80026ca <_Z10Call_queuev+0x7e>
	} else {
		output = queue[first];
 80026b4:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <_Z10Call_queuev+0x8c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <_Z10Call_queuev+0x94>)
 80026ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026be:	607b      	str	r3, [r7, #4]
		first++;
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <_Z10Call_queuev+0x8c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3301      	adds	r3, #1
 80026c6:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <_Z10Call_queuev+0x8c>)
 80026c8:	6013      	str	r3, [r2, #0]
	}
	return output;
 80026ca:	687b      	ldr	r3, [r7, #4]

}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	2400000c 	.word	0x2400000c
 80026dc:	24000010 	.word	0x24000010
 80026e0:	24000b40 	.word	0x24000b40

080026e4 <_Z6fcb_IKffff>:
	Robot_Yaw = (J_q1 + J_q3 + J_q4) / 1000.0;

}

void fcb_IK(float gripper_linear_x, float gripper_linear_y,
		float gripper_linear_z, float gripper_angular_yaw) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b092      	sub	sp, #72	; 0x48
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80026ee:	edc7 0a02 	vstr	s1, [r7, #8]
 80026f2:	ed87 1a01 	vstr	s2, [r7, #4]
 80026f6:	edc7 1a00 	vstr	s3, [r7]
	float x = gripper_linear_x / 1000.0;
 80026fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80026fe:	eddf 6a78 	vldr	s13, [pc, #480]	; 80028e0 <_Z6fcb_IKffff+0x1fc>
 8002702:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002706:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	float y = gripper_linear_y / 1000.0;
 800270a:	ed97 7a02 	vldr	s14, [r7, #8]
 800270e:	eddf 6a74 	vldr	s13, [pc, #464]	; 80028e0 <_Z6fcb_IKffff+0x1fc>
 8002712:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002716:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
	float z = gripper_linear_z / 1000.0;
 800271a:	ed97 7a01 	vldr	s14, [r7, #4]
 800271e:	eddf 6a70 	vldr	s13, [pc, #448]	; 80028e0 <_Z6fcb_IKffff+0x1fc>
 8002722:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002726:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float yaw = gripper_angular_yaw / 1000.0;
 800272a:	ed97 7a00 	vldr	s14, [r7]
 800272e:	eddf 6a6c 	vldr	s13, [pc, #432]	; 80028e0 <_Z6fcb_IKffff+0x1fc>
 8002732:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002736:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	static float L12 = 0.38325;
	static float H1 = 0.125;
	static float H3 = 0.065;
	static float H4 = 0.190;

	float C3 = ((x * x) + (y * y) - (L12 * L12) - (L3 * L3)) / (2 * L12 * L3);
 800273a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800273e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002742:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002746:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800274a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800274e:	4b65      	ldr	r3, [pc, #404]	; (80028e4 <_Z6fcb_IKffff+0x200>)
 8002750:	edd3 6a00 	vldr	s13, [r3]
 8002754:	4b63      	ldr	r3, [pc, #396]	; (80028e4 <_Z6fcb_IKffff+0x200>)
 8002756:	edd3 7a00 	vldr	s15, [r3]
 800275a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800275e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002762:	4b61      	ldr	r3, [pc, #388]	; (80028e8 <_Z6fcb_IKffff+0x204>)
 8002764:	edd3 6a00 	vldr	s13, [r3]
 8002768:	4b5f      	ldr	r3, [pc, #380]	; (80028e8 <_Z6fcb_IKffff+0x204>)
 800276a:	edd3 7a00 	vldr	s15, [r3]
 800276e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002772:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002776:	4b5b      	ldr	r3, [pc, #364]	; (80028e4 <_Z6fcb_IKffff+0x200>)
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002780:	4b59      	ldr	r3, [pc, #356]	; (80028e8 <_Z6fcb_IKffff+0x204>)
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ee27 7a27 	vmul.f32	s14, s14, s15
 800278a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800278e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float S3 = -1.0 * sqrt(1 - (C3 * C3));
 8002792:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002796:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800279a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800279e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a2:	eeb0 0a67 	vmov.f32	s0, s15
 80027a6:	f7fe f959 	bl	8000a5c <_ZSt4sqrtf>
 80027aa:	eef0 7a40 	vmov.f32	s15, s0
 80027ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027b2:	eeb1 7b47 	vneg.f64	d7, d7
 80027b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80027ba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float q3 = atan2(S3, C3);
 80027be:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80027c2:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 80027c6:	f7fe f935 	bl	8000a34 <_ZSt5atan2ff>
 80027ca:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c

	float L3S3 = L3 * S3;
 80027ce:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <_Z6fcb_IKffff+0x204>)
 80027d0:	edd3 7a00 	vldr	s15, [r3]
 80027d4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80027d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027dc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float L123C3 = L12 + (L3 * C3);
 80027e0:	4b41      	ldr	r3, [pc, #260]	; (80028e8 <_Z6fcb_IKffff+0x204>)
 80027e2:	ed93 7a00 	vldr	s14, [r3]
 80027e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80027ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ee:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <_Z6fcb_IKffff+0x200>)
 80027f0:	edd3 7a00 	vldr	s15, [r3]
 80027f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float S1 = (-L3S3 * x) + (L123C3 * y);
 80027fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002800:	eeb1 7a67 	vneg.f32	s14, s15
 8002804:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800280c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002810:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281c:	edc7 7a08 	vstr	s15, [r7, #32]
	float C1 = (L3S3 * y) + (L123C3 * x);
 8002820:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002824:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002828:	ee27 7a27 	vmul.f32	s14, s14, s15
 800282c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002830:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800283c:	edc7 7a07 	vstr	s15, [r7, #28]
	float q1 = atan2(S1, C1);
 8002840:	edd7 0a07 	vldr	s1, [r7, #28]
 8002844:	ed97 0a08 	vldr	s0, [r7, #32]
 8002848:	f7fe f8f4 	bl	8000a34 <_ZSt5atan2ff>
 800284c:	ed87 0a06 	vstr	s0, [r7, #24]
	float q4 = yaw - q1 - q3;
 8002850:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002854:	edd7 7a06 	vldr	s15, [r7, #24]
 8002858:	ee37 7a67 	vsub.f32	s14, s14, s15
 800285c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002864:	edc7 7a05 	vstr	s15, [r7, #20]
	float q2 = z + H4 - H3 - H1;
 8002868:	4b20      	ldr	r3, [pc, #128]	; (80028ec <_Z6fcb_IKffff+0x208>)
 800286a:	ed93 7a00 	vldr	s14, [r3]
 800286e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002872:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <_Z6fcb_IKffff+0x20c>)
 8002878:	edd3 7a00 	vldr	s15, [r3]
 800287c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002880:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <_Z6fcb_IKffff+0x210>)
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288a:	edc7 7a04 	vstr	s15, [r7, #16]

	Planning_q1 = q1 * 1000.0;
 800288e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002892:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80028e0 <_Z6fcb_IKffff+0x1fc>
 8002896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800289a:	4b17      	ldr	r3, [pc, #92]	; (80028f8 <_Z6fcb_IKffff+0x214>)
 800289c:	edc3 7a00 	vstr	s15, [r3]
	Planning_q2 = q2 * 1000.0;
 80028a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028a4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80028e0 <_Z6fcb_IKffff+0x1fc>
 80028a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ac:	4b13      	ldr	r3, [pc, #76]	; (80028fc <_Z6fcb_IKffff+0x218>)
 80028ae:	edc3 7a00 	vstr	s15, [r3]
	Planning_q3 = q3 * 1000.0;
 80028b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80028b6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80028e0 <_Z6fcb_IKffff+0x1fc>
 80028ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <_Z6fcb_IKffff+0x21c>)
 80028c0:	edc3 7a00 	vstr	s15, [r3]
	Planning_q4 = q4 * 1000.0;
 80028c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80028c8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80028e0 <_Z6fcb_IKffff+0x1fc>
 80028cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <_Z6fcb_IKffff+0x220>)
 80028d2:	edc3 7a00 	vstr	s15, [r3]

}
 80028d6:	bf00      	nop
 80028d8:	3748      	adds	r7, #72	; 0x48
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	447a0000 	.word	0x447a0000
 80028e4:	2400021c 	.word	0x2400021c
 80028e8:	24000218 	.word	0x24000218
 80028ec:	24000228 	.word	0x24000228
 80028f0:	24000224 	.word	0x24000224
 80028f4:	24000220 	.word	0x24000220
 80028f8:	24000bf4 	.word	0x24000bf4
 80028fc:	24000bf8 	.word	0x24000bf8
 8002900:	24000bfc 	.word	0x24000bfc
 8002904:	24000c00 	.word	0x24000c00

08002908 <_Z16Cal_Traj_time_sqii>:
float offset_y_new = 0;
int indexy;
float pos_x, pos_y;
int Traj_time_Cal, current_sq;
int old_sq = 99;
int Cal_Traj_time_sq(int old_sq_f, int current_sq_f){
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
	int p11 = old_sq_f/8 ;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	da00      	bge.n	800291a <_Z16Cal_Traj_time_sqii+0x12>
 8002918:	3307      	adds	r3, #7
 800291a:	10db      	asrs	r3, r3, #3
 800291c:	617b      	str	r3, [r7, #20]
	int p12 = old_sq_f%8 ;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	425a      	negs	r2, r3
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	f002 0207 	and.w	r2, r2, #7
 800292a:	bf58      	it	pl
 800292c:	4253      	negpl	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
	int p21 = current_sq_f/8 ;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	da00      	bge.n	8002938 <_Z16Cal_Traj_time_sqii+0x30>
 8002936:	3307      	adds	r3, #7
 8002938:	10db      	asrs	r3, r3, #3
 800293a:	60fb      	str	r3, [r7, #12]
	int p22 = current_sq_f%8 ;
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	425a      	negs	r2, r3
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	f002 0207 	and.w	r2, r2, #7
 8002948:	bf58      	it	pl
 800294a:	4253      	negpl	r3, r2
 800294c:	60bb      	str	r3, [r7, #8]
	if (old_sq_f >= 0 && old_sq_f <= 63)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	db21      	blt.n	8002998 <_Z16Cal_Traj_time_sqii+0x90>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b3f      	cmp	r3, #63	; 0x3f
 8002958:	dc1e      	bgt.n	8002998 <_Z16Cal_Traj_time_sqii+0x90>
	{
		return ((sqrt( ((p11 - p21)*(p11 - p21)) + ((p12 - p22)*(p12 - p22)) )) + 1.0) ;
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	6979      	ldr	r1, [r7, #20]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	1a8a      	subs	r2, r1, r2
 8002966:	fb03 f202 	mul.w	r2, r3, r2
 800296a:	6939      	ldr	r1, [r7, #16]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	1acb      	subs	r3, r1, r3
 8002970:	6938      	ldr	r0, [r7, #16]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	1a41      	subs	r1, r0, r1
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f001 fff9 	bl	8004974 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002982:	eeb0 7b40 	vmov.f64	d7, d0
 8002986:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800298a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800298e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002992:	ee17 3a90 	vmov	r3, s15
 8002996:	e000      	b.n	800299a <_Z16Cal_Traj_time_sqii+0x92>
	}
	else
	{
		return 7;
 8002998:	2307      	movs	r3, #7
	}
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	0000      	movs	r0, r0
 80029a4:	0000      	movs	r0, r0
	...

080029a8 <_Z20Update_State_Machinev>:

void Update_State_Machine() {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	ed2d 8b02 	vpush	{d8}
 80029ae:	af00      	add	r7, sp, #0

	switch (control_state) {
 80029b0:	4b2e      	ldr	r3, [pc, #184]	; (8002a6c <_Z20Update_State_Machinev+0xc4>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	3b29      	subs	r3, #41	; 0x29
 80029b8:	2b0f      	cmp	r3, #15
 80029ba:	f200 843d 	bhi.w	8003238 <_Z20Update_State_Machinev+0x890>
 80029be:	a201      	add	r2, pc, #4	; (adr r2, 80029c4 <_Z20Update_State_Machinev+0x1c>)
 80029c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029c4:	08002a05 	.word	0x08002a05
 80029c8:	08002df1 	.word	0x08002df1
 80029cc:	08002eb7 	.word	0x08002eb7
 80029d0:	08003239 	.word	0x08003239
 80029d4:	08003239 	.word	0x08003239
 80029d8:	08003239 	.word	0x08003239
 80029dc:	08003239 	.word	0x08003239
 80029e0:	08003239 	.word	0x08003239
 80029e4:	08003239 	.word	0x08003239
 80029e8:	08003239 	.word	0x08003239
 80029ec:	08003247 	.word	0x08003247
 80029f0:	08002f13 	.word	0x08002f13
 80029f4:	08003247 	.word	0x08003247
 80029f8:	08003037 	.word	0x08003037
 80029fc:	08003247 	.word	0x08003247
 8002a00:	0800318b 	.word	0x0800318b
	case 41: // Update Trajectory
		indexy = Call_queue();
 8002a04:	f7ff fe22 	bl	800264c <_Z10Call_queuev>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4a19      	ldr	r2, [pc, #100]	; (8002a70 <_Z20Update_State_Machinev+0xc8>)
 8002a0c:	6013      	str	r3, [r2, #0]
		if (indexy != 255)
 8002a0e:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <_Z20Update_State_Machinev+0xc8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2bff      	cmp	r3, #255	; 0xff
 8002a14:	f000 819b 	beq.w	8002d4e <_Z20Update_State_Machinev+0x3a6>
		{
			if (indexy == 99)
 8002a18:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <_Z20Update_State_Machinev+0xc8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b63      	cmp	r3, #99	; 0x63
 8002a1e:	d110      	bne.n	8002a42 <_Z20Update_State_Machinev+0x9a>
				{
					Max_Time = 7;
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <_Z20Update_State_Machinev+0xcc>)
 8002a22:	4a15      	ldr	r2, [pc, #84]	; (8002a78 <_Z20Update_State_Machinev+0xd0>)
 8002a24:	601a      	str	r2, [r3, #0]
					Traj_time_Cal = 7;
 8002a26:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <_Z20Update_State_Machinev+0xd4>)
 8002a28:	2207      	movs	r2, #7
 8002a2a:	601a      	str	r2, [r3, #0]
					Planning_q1 = 1400;
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <_Z20Update_State_Machinev+0xd8>)
 8002a2e:	4a15      	ldr	r2, [pc, #84]	; (8002a84 <_Z20Update_State_Machinev+0xdc>)
 8002a30:	601a      	str	r2, [r3, #0]
					Planning_q3 = -1400;
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <_Z20Update_State_Machinev+0xe0>)
 8002a34:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <_Z20Update_State_Machinev+0xe4>)
 8002a36:	601a      	str	r2, [r3, #0]
					Planning_q4 = 0;
 8002a38:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <_Z20Update_State_Machinev+0xe8>)
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e125      	b.n	8002c8e <_Z20Update_State_Machinev+0x2e6>
				}
			else if (indexy == 123)
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <_Z20Update_State_Machinev+0xc8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b7b      	cmp	r3, #123	; 0x7b
 8002a48:	d128      	bne.n	8002a9c <_Z20Update_State_Machinev+0xf4>
			{
					Max_Time = 7;
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <_Z20Update_State_Machinev+0xcc>)
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <_Z20Update_State_Machinev+0xd0>)
 8002a4e:	601a      	str	r2, [r3, #0]
					Traj_time_Cal = 7;
 8002a50:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <_Z20Update_State_Machinev+0xd4>)
 8002a52:	2207      	movs	r2, #7
 8002a54:	601a      	str	r2, [r3, #0]
					Planning_q1 = 1100;
 8002a56:	4b0a      	ldr	r3, [pc, #40]	; (8002a80 <_Z20Update_State_Machinev+0xd8>)
 8002a58:	4a0e      	ldr	r2, [pc, #56]	; (8002a94 <_Z20Update_State_Machinev+0xec>)
 8002a5a:	601a      	str	r2, [r3, #0]
					Planning_q3 = -600;
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <_Z20Update_State_Machinev+0xe0>)
 8002a5e:	4a0e      	ldr	r2, [pc, #56]	; (8002a98 <_Z20Update_State_Machinev+0xf0>)
 8002a60:	601a      	str	r2, [r3, #0]
					Planning_q4 = 0;
 8002a62:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <_Z20Update_State_Machinev+0xe8>)
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	e110      	b.n	8002c8e <_Z20Update_State_Machinev+0x2e6>
 8002a6c:	24000be8 	.word	0x24000be8
 8002a70:	24000c0c 	.word	0x24000c0c
 8002a74:	24000afc 	.word	0x24000afc
 8002a78:	40e00000 	.word	0x40e00000
 8002a7c:	24000c18 	.word	0x24000c18
 8002a80:	24000bf4 	.word	0x24000bf4
 8002a84:	44af0000 	.word	0x44af0000
 8002a88:	24000bfc 	.word	0x24000bfc
 8002a8c:	c4af0000 	.word	0xc4af0000
 8002a90:	24000c00 	.word	0x24000c00
 8002a94:	44898000 	.word	0x44898000
 8002a98:	c4160000 	.word	0xc4160000
			}
			else if (indexy != 99 && indexy != 123 && indexy != 255)
 8002a9c:	4bba      	ldr	r3, [pc, #744]	; (8002d88 <_Z20Update_State_Machinev+0x3e0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b63      	cmp	r3, #99	; 0x63
 8002aa2:	f000 80f4 	beq.w	8002c8e <_Z20Update_State_Machinev+0x2e6>
 8002aa6:	4bb8      	ldr	r3, [pc, #736]	; (8002d88 <_Z20Update_State_Machinev+0x3e0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b7b      	cmp	r3, #123	; 0x7b
 8002aac:	f000 80ef 	beq.w	8002c8e <_Z20Update_State_Machinev+0x2e6>
 8002ab0:	4bb5      	ldr	r3, [pc, #724]	; (8002d88 <_Z20Update_State_Machinev+0x3e0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2bff      	cmp	r3, #255	; 0xff
 8002ab6:	f000 80ea 	beq.w	8002c8e <_Z20Update_State_Machinev+0x2e6>
				{

					current_sq = indexy;
 8002aba:	4bb3      	ldr	r3, [pc, #716]	; (8002d88 <_Z20Update_State_Machinev+0x3e0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4ab3      	ldr	r2, [pc, #716]	; (8002d8c <_Z20Update_State_Machinev+0x3e4>)
 8002ac0:	6013      	str	r3, [r2, #0]
					Traj_time_Cal = Cal_Traj_time_sq(old_sq, current_sq);
 8002ac2:	4bb3      	ldr	r3, [pc, #716]	; (8002d90 <_Z20Update_State_Machinev+0x3e8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4ab1      	ldr	r2, [pc, #708]	; (8002d8c <_Z20Update_State_Machinev+0x3e4>)
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	4611      	mov	r1, r2
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff ff1b 	bl	8002908 <_Z16Cal_Traj_time_sqii>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	4aaf      	ldr	r2, [pc, #700]	; (8002d94 <_Z20Update_State_Machinev+0x3ec>)
 8002ad6:	6013      	str	r3, [r2, #0]
					Max_Time = Traj_time_Cal;
 8002ad8:	4bae      	ldr	r3, [pc, #696]	; (8002d94 <_Z20Update_State_Machinev+0x3ec>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	ee07 3a90 	vmov	s15, r3
 8002ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae4:	4bac      	ldr	r3, [pc, #688]	; (8002d98 <_Z20Update_State_Machinev+0x3f0>)
 8002ae6:	edc3 7a00 	vstr	s15, [r3]
					test_value_r = radias[indexy];
 8002aea:	4ba7      	ldr	r3, [pc, #668]	; (8002d88 <_Z20Update_State_Machinev+0x3e0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4aab      	ldr	r2, [pc, #684]	; (8002d9c <_Z20Update_State_Machinev+0x3f4>)
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	edd3 7a00 	vldr	s15, [r3]
 8002af8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002afc:	ee17 2a90 	vmov	r2, s15
 8002b00:	4ba7      	ldr	r3, [pc, #668]	; (8002da0 <_Z20Update_State_Machinev+0x3f8>)
 8002b02:	601a      	str	r2, [r3, #0]
					// + angle_chess
					test_value_theta = theta[indexy];
 8002b04:	4ba0      	ldr	r3, [pc, #640]	; (8002d88 <_Z20Update_State_Machinev+0x3e0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4aa6      	ldr	r2, [pc, #664]	; (8002da4 <_Z20Update_State_Machinev+0x3fc>)
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	edd3 7a00 	vldr	s15, [r3]
 8002b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b16:	ee17 2a90 	vmov	r2, s15
 8002b1a:	4ba3      	ldr	r3, [pc, #652]	; (8002da8 <_Z20Update_State_Machinev+0x400>)
 8002b1c:	601a      	str	r2, [r3, #0]
					offset_x_new = ((0.16075* (test_value_r * cos((test_value_theta ) / 1000.0))) + 0.02289) / 10.0;
 8002b1e:	4ba0      	ldr	r3, [pc, #640]	; (8002da0 <_Z20Update_State_Machinev+0x3f8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	ee07 3a90 	vmov	s15, r3
 8002b26:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002b2a:	4b9f      	ldr	r3, [pc, #636]	; (8002da8 <_Z20Update_State_Machinev+0x400>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b36:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8002d60 <_Z20Update_State_Machinev+0x3b8>
 8002b3a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b3e:	eeb0 0b46 	vmov.f64	d0, d6
 8002b42:	f00e fb65 	bl	8011210 <cos>
 8002b46:	eeb0 7b40 	vmov.f64	d7, d0
 8002b4a:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002b4e:	ed9f 6b86 	vldr	d6, [pc, #536]	; 8002d68 <_Z20Update_State_Machinev+0x3c0>
 8002b52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b56:	ed9f 6b86 	vldr	d6, [pc, #536]	; 8002d70 <_Z20Update_State_Machinev+0x3c8>
 8002b5a:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002b5e:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002b62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b6a:	4b90      	ldr	r3, [pc, #576]	; (8002dac <_Z20Update_State_Machinev+0x404>)
 8002b6c:	edc3 7a00 	vstr	s15, [r3]
					offset_y_new = ((0.29560* (test_value_r * sin((test_value_theta ) / 1000.0))) + 1.05911) / 10.0;
 8002b70:	4b8b      	ldr	r3, [pc, #556]	; (8002da0 <_Z20Update_State_Machinev+0x3f8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	ee07 3a90 	vmov	s15, r3
 8002b78:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002b7c:	4b8a      	ldr	r3, [pc, #552]	; (8002da8 <_Z20Update_State_Machinev+0x400>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	ee07 3a90 	vmov	s15, r3
 8002b84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002b88:	ed9f 5b75 	vldr	d5, [pc, #468]	; 8002d60 <_Z20Update_State_Machinev+0x3b8>
 8002b8c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b90:	eeb0 0b46 	vmov.f64	d0, d6
 8002b94:	f00e fb88 	bl	80112a8 <sin>
 8002b98:	eeb0 7b40 	vmov.f64	d7, d0
 8002b9c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002ba0:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8002d78 <_Z20Update_State_Machinev+0x3d0>
 8002ba4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ba8:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8002d80 <_Z20Update_State_Machinev+0x3d8>
 8002bac:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002bb0:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002bb4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002bb8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bbc:	4b7c      	ldr	r3, [pc, #496]	; (8002db0 <_Z20Update_State_Machinev+0x408>)
 8002bbe:	edc3 7a00 	vstr	s15, [r3]
					pos_x = (test_value_r * cos((test_value_theta ) / 1000.0)) + offset_x + offset_x_new;
 8002bc2:	4b77      	ldr	r3, [pc, #476]	; (8002da0 <_Z20Update_State_Machinev+0x3f8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	ee07 3a90 	vmov	s15, r3
 8002bca:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002bce:	4b76      	ldr	r3, [pc, #472]	; (8002da8 <_Z20Update_State_Machinev+0x400>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002bda:	ed9f 5b61 	vldr	d5, [pc, #388]	; 8002d60 <_Z20Update_State_Machinev+0x3b8>
 8002bde:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002be2:	eeb0 0b46 	vmov.f64	d0, d6
 8002be6:	f00e fb13 	bl	8011210 <cos>
 8002bea:	eeb0 7b40 	vmov.f64	d7, d0
 8002bee:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002bf2:	4b70      	ldr	r3, [pc, #448]	; (8002db4 <_Z20Update_State_Machinev+0x40c>)
 8002bf4:	edd3 7a00 	vldr	s15, [r3]
 8002bf8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bfc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002c00:	4b6a      	ldr	r3, [pc, #424]	; (8002dac <_Z20Update_State_Machinev+0x404>)
 8002c02:	edd3 7a00 	vldr	s15, [r3]
 8002c06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c0a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c0e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c12:	4b69      	ldr	r3, [pc, #420]	; (8002db8 <_Z20Update_State_Machinev+0x410>)
 8002c14:	edc3 7a00 	vstr	s15, [r3]
					pos_y = (test_value_r * sin((test_value_theta) / 1000.0)) + offset_y + offset_y_new;
 8002c18:	4b61      	ldr	r3, [pc, #388]	; (8002da0 <_Z20Update_State_Machinev+0x3f8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8002c24:	4b60      	ldr	r3, [pc, #384]	; (8002da8 <_Z20Update_State_Machinev+0x400>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	ee07 3a90 	vmov	s15, r3
 8002c2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002c30:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8002d60 <_Z20Update_State_Machinev+0x3b8>
 8002c34:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002c38:	eeb0 0b46 	vmov.f64	d0, d6
 8002c3c:	f00e fb34 	bl	80112a8 <sin>
 8002c40:	eeb0 7b40 	vmov.f64	d7, d0
 8002c44:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002c48:	4b5c      	ldr	r3, [pc, #368]	; (8002dbc <_Z20Update_State_Machinev+0x414>)
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c52:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002c56:	4b56      	ldr	r3, [pc, #344]	; (8002db0 <_Z20Update_State_Machinev+0x408>)
 8002c58:	edd3 7a00 	vldr	s15, [r3]
 8002c5c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002c60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c68:	4b55      	ldr	r3, [pc, #340]	; (8002dc0 <_Z20Update_State_Machinev+0x418>)
 8002c6a:	edc3 7a00 	vstr	s15, [r3]
					fcb_IK(pos_x, pos_y, 0, 0);
 8002c6e:	4b52      	ldr	r3, [pc, #328]	; (8002db8 <_Z20Update_State_Machinev+0x410>)
 8002c70:	edd3 7a00 	vldr	s15, [r3]
 8002c74:	4b52      	ldr	r3, [pc, #328]	; (8002dc0 <_Z20Update_State_Machinev+0x418>)
 8002c76:	ed93 7a00 	vldr	s14, [r3]
 8002c7a:	eddf 1a52 	vldr	s3, [pc, #328]	; 8002dc4 <_Z20Update_State_Machinev+0x41c>
 8002c7e:	ed9f 1a51 	vldr	s2, [pc, #324]	; 8002dc4 <_Z20Update_State_Machinev+0x41c>
 8002c82:	eef0 0a47 	vmov.f32	s1, s14
 8002c86:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8a:	f7ff fd2b 	bl	80026e4 <_Z6fcb_IKffff>

				}


				fcb_joint1.UpdateQuinticCoff(Max_Time, fcb_joint1.Encoder, Planning_q1, 0.0, 0.0, 0.0, 0.0);
 8002c8e:	4b42      	ldr	r3, [pc, #264]	; (8002d98 <_Z20Update_State_Machinev+0x3f0>)
 8002c90:	edd3 7a00 	vldr	s15, [r3]
 8002c94:	4b4c      	ldr	r3, [pc, #304]	; (8002dc8 <_Z20Update_State_Machinev+0x420>)
 8002c96:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002c9a:	4b4c      	ldr	r3, [pc, #304]	; (8002dcc <_Z20Update_State_Machinev+0x424>)
 8002c9c:	edd3 6a00 	vldr	s13, [r3]
 8002ca0:	ed9f 3a48 	vldr	s6, [pc, #288]	; 8002dc4 <_Z20Update_State_Machinev+0x41c>
 8002ca4:	eddf 2a47 	vldr	s5, [pc, #284]	; 8002dc4 <_Z20Update_State_Machinev+0x41c>
 8002ca8:	ed9f 2a46 	vldr	s4, [pc, #280]	; 8002dc4 <_Z20Update_State_Machinev+0x41c>
 8002cac:	eddf 1a45 	vldr	s3, [pc, #276]	; 8002dc4 <_Z20Update_State_Machinev+0x41c>
 8002cb0:	eeb0 1a66 	vmov.f32	s2, s13
 8002cb4:	eef0 0a47 	vmov.f32	s1, s14
 8002cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cbc:	4842      	ldr	r0, [pc, #264]	; (8002dc8 <_Z20Update_State_Machinev+0x420>)
 8002cbe:	f7fd ff56 	bl	8000b6e <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint3.UpdateQuinticCoff(Max_Time, fcb_joint3.Encoder, Planning_q3, 0.0, 0.0, 0.0, 0.0);
 8002cc2:	4b35      	ldr	r3, [pc, #212]	; (8002d98 <_Z20Update_State_Machinev+0x3f0>)
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	4b41      	ldr	r3, [pc, #260]	; (8002dd0 <_Z20Update_State_Machinev+0x428>)
 8002cca:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002cce:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <_Z20Update_State_Machinev+0x42c>)
 8002cd0:	edd3 6a00 	vldr	s13, [r3]
 8002cd4:	ed9f 3a3b 	vldr	s6, [pc, #236]	; 8002dc4 <_Z20Update_State_Machinev+0x41c>
 8002cd8:	eddf 2a3a 	vldr	s5, [pc, #232]	; 8002dc4 <_Z20Update_State_Machinev+0x41c>
 8002cdc:	ed9f 2a39 	vldr	s4, [pc, #228]	; 8002dc4 <_Z20Update_State_Machinev+0x41c>
 8002ce0:	eddf 1a38 	vldr	s3, [pc, #224]	; 8002dc4 <_Z20Update_State_Machinev+0x41c>
 8002ce4:	eeb0 1a66 	vmov.f32	s2, s13
 8002ce8:	eef0 0a47 	vmov.f32	s1, s14
 8002cec:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf0:	4837      	ldr	r0, [pc, #220]	; (8002dd0 <_Z20Update_State_Machinev+0x428>)
 8002cf2:	f7fd ff3c 	bl	8000b6e <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				fcb_joint4.UpdateQuinticCoff(Max_Time, fcb_joint4.Encoder, Planning_q4, 0.0, 0.0, 0.0, 0.0);
 8002cf6:	4b28      	ldr	r3, [pc, #160]	; (8002d98 <_Z20Update_State_Machinev+0x3f0>)
 8002cf8:	edd3 7a00 	vldr	s15, [r3]
 8002cfc:	4b36      	ldr	r3, [pc, #216]	; (8002dd8 <_Z20Update_State_Machinev+0x430>)
 8002cfe:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002d02:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <_Z20Update_State_Machinev+0x434>)
 8002d04:	edd3 6a00 	vldr	s13, [r3]
 8002d08:	ed9f 3a2e 	vldr	s6, [pc, #184]	; 8002dc4 <_Z20Update_State_Machinev+0x41c>
 8002d0c:	eddf 2a2d 	vldr	s5, [pc, #180]	; 8002dc4 <_Z20Update_State_Machinev+0x41c>
 8002d10:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 8002dc4 <_Z20Update_State_Machinev+0x41c>
 8002d14:	eddf 1a2b 	vldr	s3, [pc, #172]	; 8002dc4 <_Z20Update_State_Machinev+0x41c>
 8002d18:	eeb0 1a66 	vmov.f32	s2, s13
 8002d1c:	eef0 0a47 	vmov.f32	s1, s14
 8002d20:	eeb0 0a67 	vmov.f32	s0, s15
 8002d24:	482c      	ldr	r0, [pc, #176]	; (8002dd8 <_Z20Update_State_Machinev+0x430>)
 8002d26:	f7fd ff22 	bl	8000b6e <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				t = 0;
 8002d2a:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <_Z20Update_State_Machinev+0x438>)
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
				joint13_on = true;
 8002d32:	4b2c      	ldr	r3, [pc, #176]	; (8002de4 <_Z20Update_State_Machinev+0x43c>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim14);
 8002d38:	482b      	ldr	r0, [pc, #172]	; (8002de8 <_Z20Update_State_Machinev+0x440>)
 8002d3a:	f00a fa1b 	bl	800d174 <HAL_TIM_Base_Start_IT>
				control_state = 52;
 8002d3e:	4b2b      	ldr	r3, [pc, #172]	; (8002dec <_Z20Update_State_Machinev+0x444>)
 8002d40:	2234      	movs	r2, #52	; 0x34
 8002d42:	701a      	strb	r2, [r3, #0]
				old_sq = indexy;
 8002d44:	4b10      	ldr	r3, [pc, #64]	; (8002d88 <_Z20Update_State_Machinev+0x3e0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a11      	ldr	r2, [pc, #68]	; (8002d90 <_Z20Update_State_Machinev+0x3e8>)
 8002d4a:	6013      	str	r3, [r2, #0]
		else if (indexy == 255)
		{
			control_state = 0;
		}

		break;
 8002d4c:	e27d      	b.n	800324a <_Z20Update_State_Machinev+0x8a2>
		else if (indexy == 255)
 8002d4e:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <_Z20Update_State_Machinev+0x3e0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2bff      	cmp	r3, #255	; 0xff
 8002d54:	f040 8279 	bne.w	800324a <_Z20Update_State_Machinev+0x8a2>
			control_state = 0;
 8002d58:	4b24      	ldr	r3, [pc, #144]	; (8002dec <_Z20Update_State_Machinev+0x444>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
		break;
 8002d5e:	e274      	b.n	800324a <_Z20Update_State_Machinev+0x8a2>
 8002d60:	00000000 	.word	0x00000000
 8002d64:	408f4000 	.word	0x408f4000
 8002d68:	bc6a7efa 	.word	0xbc6a7efa
 8002d6c:	3fc49374 	.word	0x3fc49374
 8002d70:	e59f2baa 	.word	0xe59f2baa
 8002d74:	3f977079 	.word	0x3f977079
 8002d78:	432ca57a 	.word	0x432ca57a
 8002d7c:	3fd2eb1c 	.word	0x3fd2eb1c
 8002d80:	53cddd6e 	.word	0x53cddd6e
 8002d84:	3ff0f21d 	.word	0x3ff0f21d
 8002d88:	24000c0c 	.word	0x24000c0c
 8002d8c:	24000c1c 	.word	0x24000c1c
 8002d90:	24000234 	.word	0x24000234
 8002d94:	24000c18 	.word	0x24000c18
 8002d98:	24000afc 	.word	0x24000afc
 8002d9c:	24000114 	.word	0x24000114
 8002da0:	24000be0 	.word	0x24000be0
 8002da4:	24000014 	.word	0x24000014
 8002da8:	24000be4 	.word	0x24000be4
 8002dac:	24000c04 	.word	0x24000c04
 8002db0:	24000c08 	.word	0x24000c08
 8002db4:	2400022c 	.word	0x2400022c
 8002db8:	24000c10 	.word	0x24000c10
 8002dbc:	24000230 	.word	0x24000230
 8002dc0:	24000c14 	.word	0x24000c14
 8002dc4:	00000000 	.word	0x00000000
 8002dc8:	24000568 	.word	0x24000568
 8002dcc:	24000bf4 	.word	0x24000bf4
 8002dd0:	24000730 	.word	0x24000730
 8002dd4:	24000bfc 	.word	0x24000bfc
 8002dd8:	24000814 	.word	0x24000814
 8002ddc:	24000c00 	.word	0x24000c00
 8002de0:	24000bf0 	.word	0x24000bf0
 8002de4:	24000b3e 	.word	0x24000b3e
 8002de8:	24001094 	.word	0x24001094
 8002dec:	24000be8 	.word	0x24000be8

	case 42:
		Max_Time = 10;
 8002df0:	4bb3      	ldr	r3, [pc, #716]	; (80030c0 <_Z20Update_State_Machinev+0x718>)
 8002df2:	4ab4      	ldr	r2, [pc, #720]	; (80030c4 <_Z20Update_State_Machinev+0x71c>)
 8002df4:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002df6:	4bb4      	ldr	r3, [pc, #720]	; (80030c8 <_Z20Update_State_Machinev+0x720>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]

		if (Gripper_State[first - 1] == 1) {
 8002dfc:	4bb3      	ldr	r3, [pc, #716]	; (80030cc <_Z20Update_State_Machinev+0x724>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	4ab3      	ldr	r2, [pc, #716]	; (80030d0 <_Z20Update_State_Machinev+0x728>)
 8002e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	bf0c      	ite	eq
 8002e0c:	2301      	moveq	r3, #1
 8002e0e:	2300      	movne	r3, #0
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01a      	beq.n	8002e4c <_Z20Update_State_Machinev+0x4a4>
			fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002e16:	4baa      	ldr	r3, [pc, #680]	; (80030c0 <_Z20Update_State_Machinev+0x718>)
 8002e18:	edd3 7a00 	vldr	s15, [r3]
 8002e1c:	4bad      	ldr	r3, [pc, #692]	; (80030d4 <_Z20Update_State_Machinev+0x72c>)
 8002e1e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002e22:	4bad      	ldr	r3, [pc, #692]	; (80030d8 <_Z20Update_State_Machinev+0x730>)
 8002e24:	edd3 6a00 	vldr	s13, [r3]
 8002e28:	ed9f 3aac 	vldr	s6, [pc, #688]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8002e2c:	eddf 2aab 	vldr	s5, [pc, #684]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8002e30:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8002e34:	eddf 1aa9 	vldr	s3, [pc, #676]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8002e38:	eeb0 1a66 	vmov.f32	s2, s13
 8002e3c:	eef0 0a47 	vmov.f32	s1, s14
 8002e40:	eeb0 0a67 	vmov.f32	s0, s15
 8002e44:	48a3      	ldr	r0, [pc, #652]	; (80030d4 <_Z20Update_State_Machinev+0x72c>)
 8002e46:	f7fd fe92 	bl	8000b6e <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
 8002e4a:	e026      	b.n	8002e9a <_Z20Update_State_Machinev+0x4f2>
			Setpoint_J2_Down_pick, 0.0, 0.0, 0.0, 0.0);
		} else if (Gripper_State[first - 1] == 2) {
 8002e4c:	4b9f      	ldr	r3, [pc, #636]	; (80030cc <_Z20Update_State_Machinev+0x724>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	4a9f      	ldr	r2, [pc, #636]	; (80030d0 <_Z20Update_State_Machinev+0x728>)
 8002e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d019      	beq.n	8002e9a <_Z20Update_State_Machinev+0x4f2>
			fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002e66:	4b96      	ldr	r3, [pc, #600]	; (80030c0 <_Z20Update_State_Machinev+0x718>)
 8002e68:	edd3 7a00 	vldr	s15, [r3]
 8002e6c:	4b99      	ldr	r3, [pc, #612]	; (80030d4 <_Z20Update_State_Machinev+0x72c>)
 8002e6e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002e72:	4b9b      	ldr	r3, [pc, #620]	; (80030e0 <_Z20Update_State_Machinev+0x738>)
 8002e74:	edd3 6a00 	vldr	s13, [r3]
 8002e78:	ed9f 3a98 	vldr	s6, [pc, #608]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8002e7c:	eddf 2a97 	vldr	s5, [pc, #604]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8002e80:	ed9f 2a96 	vldr	s4, [pc, #600]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8002e84:	eddf 1a95 	vldr	s3, [pc, #596]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8002e88:	eeb0 1a66 	vmov.f32	s2, s13
 8002e8c:	eef0 0a47 	vmov.f32	s1, s14
 8002e90:	eeb0 0a67 	vmov.f32	s0, s15
 8002e94:	488f      	ldr	r0, [pc, #572]	; (80030d4 <_Z20Update_State_Machinev+0x72c>)
 8002e96:	f7fd fe6a 	bl	8000b6e <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
			Setpoint_J2_Down_place, 0.0, 0.0, 0.0, 0.0);
		}


		t = 0;
 8002e9a:	4b92      	ldr	r3, [pc, #584]	; (80030e4 <_Z20Update_State_Machinev+0x73c>)
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002ea2:	4891      	ldr	r0, [pc, #580]	; (80030e8 <_Z20Update_State_Machinev+0x740>)
 8002ea4:	f00a f966 	bl	800d174 <HAL_TIM_Base_Start_IT>
		control_state = 54;
 8002ea8:	4b90      	ldr	r3, [pc, #576]	; (80030ec <_Z20Update_State_Machinev+0x744>)
 8002eaa:	2236      	movs	r2, #54	; 0x36
 8002eac:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002eae:	4b90      	ldr	r3, [pc, #576]	; (80030f0 <_Z20Update_State_Machinev+0x748>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
		break;
 8002eb4:	e1ca      	b.n	800324c <_Z20Update_State_Machinev+0x8a4>

	case 43:
		Max_Time = 10;
 8002eb6:	4b82      	ldr	r3, [pc, #520]	; (80030c0 <_Z20Update_State_Machinev+0x718>)
 8002eb8:	4a82      	ldr	r2, [pc, #520]	; (80030c4 <_Z20Update_State_Machinev+0x71c>)
 8002eba:	601a      	str	r2, [r3, #0]
		joint13_on = false;
 8002ebc:	4b82      	ldr	r3, [pc, #520]	; (80030c8 <_Z20Update_State_Machinev+0x720>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	701a      	strb	r2, [r3, #0]
		fcb_joint2.UpdateQuinticCoff(Max_Time, fcb_joint2.Encoder,
 8002ec2:	4b7f      	ldr	r3, [pc, #508]	; (80030c0 <_Z20Update_State_Machinev+0x718>)
 8002ec4:	edd3 7a00 	vldr	s15, [r3]
 8002ec8:	4b82      	ldr	r3, [pc, #520]	; (80030d4 <_Z20Update_State_Machinev+0x72c>)
 8002eca:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002ece:	4b89      	ldr	r3, [pc, #548]	; (80030f4 <_Z20Update_State_Machinev+0x74c>)
 8002ed0:	edd3 6a00 	vldr	s13, [r3]
 8002ed4:	ed9f 3a81 	vldr	s6, [pc, #516]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8002ed8:	eddf 2a80 	vldr	s5, [pc, #512]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8002edc:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8002ee0:	eddf 1a7e 	vldr	s3, [pc, #504]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8002ee4:	eeb0 1a66 	vmov.f32	s2, s13
 8002ee8:	eef0 0a47 	vmov.f32	s1, s14
 8002eec:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef0:	4878      	ldr	r0, [pc, #480]	; (80030d4 <_Z20Update_State_Machinev+0x72c>)
 8002ef2:	f7fd fe3c 	bl	8000b6e <_ZN10RobotJoint17UpdateQuinticCoffEfffffff>
				Setpoint_J2_Up, 0.0, 0.0, 0.0, 0.0);
		t = 0;
 8002ef6:	4b7b      	ldr	r3, [pc, #492]	; (80030e4 <_Z20Update_State_Machinev+0x73c>)
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim14);
 8002efe:	487a      	ldr	r0, [pc, #488]	; (80030e8 <_Z20Update_State_Machinev+0x740>)
 8002f00:	f00a f938 	bl	800d174 <HAL_TIM_Base_Start_IT>
		control_state = 56;
 8002f04:	4b79      	ldr	r3, [pc, #484]	; (80030ec <_Z20Update_State_Machinev+0x744>)
 8002f06:	2238      	movs	r2, #56	; 0x38
 8002f08:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8002f0a:	4b79      	ldr	r3, [pc, #484]	; (80030f0 <_Z20Update_State_Machinev+0x748>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
		break;
 8002f10:	e19c      	b.n	800324c <_Z20Update_State_Machinev+0x8a4>

//		State_FIN = true;
		break;

	case 52:
		HAL_TIM_Base_Stop_IT(&htim14);
 8002f12:	4875      	ldr	r0, [pc, #468]	; (80030e8 <_Z20Update_State_Machinev+0x740>)
 8002f14:	f00a f9a6 	bl	800d264 <HAL_TIM_Base_Stop_IT>
		t = 0;
 8002f18:	4b72      	ldr	r3, [pc, #456]	; (80030e4 <_Z20Update_State_Machinev+0x73c>)
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
		fcb_joint1.Goal_Velocity = 0;
 8002f20:	4b75      	ldr	r3, [pc, #468]	; (80030f8 <_Z20Update_State_Machinev+0x750>)
 8002f22:	f04f 0200 	mov.w	r2, #0
 8002f26:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Velocity = 0;
 8002f28:	4b74      	ldr	r3, [pc, #464]	; (80030fc <_Z20Update_State_Machinev+0x754>)
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Velocity = 0;
 8002f30:	4b73      	ldr	r3, [pc, #460]	; (8003100 <_Z20Update_State_Machinev+0x758>)
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	64da      	str	r2, [r3, #76]	; 0x4c
		fcb_joint1.Output_Joint_W = 0;
 8002f38:	4b6f      	ldr	r3, [pc, #444]	; (80030f8 <_Z20Update_State_Machinev+0x750>)
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 8002f42:	4b6f      	ldr	r3, [pc, #444]	; (8003100 <_Z20Update_State_Machinev+0x758>)
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8002f4c:	4b6b      	ldr	r3, [pc, #428]	; (80030fc <_Z20Update_State_Machinev+0x754>)
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 8002f56:	ed9f 0a61 	vldr	s0, [pc, #388]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8002f5a:	486a      	ldr	r0, [pc, #424]	; (8003104 <_Z20Update_State_Machinev+0x75c>)
 8002f5c:	f7ff f914 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8002f60:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8002f64:	4868      	ldr	r0, [pc, #416]	; (8003108 <_Z20Update_State_Machinev+0x760>)
 8002f66:	f7ff f90f 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8002f6a:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8002f6e:	4867      	ldr	r0, [pc, #412]	; (800310c <_Z20Update_State_Machinev+0x764>)
 8002f70:	f7ff f90a 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint1.C0 = fcb_joint1.Encoder;
 8002f74:	4b60      	ldr	r3, [pc, #384]	; (80030f8 <_Z20Update_State_Machinev+0x750>)
 8002f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f78:	4a5f      	ldr	r2, [pc, #380]	; (80030f8 <_Z20Update_State_Machinev+0x750>)
 8002f7a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint4.C0 = fcb_joint4.Encoder;
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <_Z20Update_State_Machinev+0x754>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	4a5e      	ldr	r2, [pc, #376]	; (80030fc <_Z20Update_State_Machinev+0x754>)
 8002f84:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint3.C0 = fcb_joint3.Encoder;
 8002f88:	4b5d      	ldr	r3, [pc, #372]	; (8003100 <_Z20Update_State_Machinev+0x758>)
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8c:	4a5c      	ldr	r2, [pc, #368]	; (8003100 <_Z20Update_State_Machinev+0x758>)
 8002f8e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.C1 = 0;
 8002f92:	4b59      	ldr	r3, [pc, #356]	; (80030f8 <_Z20Update_State_Machinev+0x750>)
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint3.C1 = 0;
 8002f9c:	4b58      	ldr	r3, [pc, #352]	; (8003100 <_Z20Update_State_Machinev+0x758>)
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint1.C2 = 0;
 8002fa6:	4b54      	ldr	r3, [pc, #336]	; (80030f8 <_Z20Update_State_Machinev+0x750>)
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint3.C2 = 0;
 8002fb0:	4b53      	ldr	r3, [pc, #332]	; (8003100 <_Z20Update_State_Machinev+0x758>)
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint1.C3 = 0;
 8002fba:	4b4f      	ldr	r3, [pc, #316]	; (80030f8 <_Z20Update_State_Machinev+0x750>)
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint3.C3 = 0;
 8002fc4:	4b4e      	ldr	r3, [pc, #312]	; (8003100 <_Z20Update_State_Machinev+0x758>)
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint1.C4 = 0;
 8002fce:	4b4a      	ldr	r3, [pc, #296]	; (80030f8 <_Z20Update_State_Machinev+0x750>)
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint3.C4 = 0;
 8002fd8:	4b49      	ldr	r3, [pc, #292]	; (8003100 <_Z20Update_State_Machinev+0x758>)
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint1.C5 = 0;
 8002fe2:	4b45      	ldr	r3, [pc, #276]	; (80030f8 <_Z20Update_State_Machinev+0x750>)
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint3.C5 = 0;
 8002fec:	4b44      	ldr	r3, [pc, #272]	; (8003100 <_Z20Update_State_Machinev+0x758>)
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint4.C1 = 0;
 8002ff6:	4b41      	ldr	r3, [pc, #260]	; (80030fc <_Z20Update_State_Machinev+0x754>)
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint4.C2 = 0;
 8003000:	4b3e      	ldr	r3, [pc, #248]	; (80030fc <_Z20Update_State_Machinev+0x754>)
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint4.C3 = 0;
 800300a:	4b3c      	ldr	r3, [pc, #240]	; (80030fc <_Z20Update_State_Machinev+0x754>)
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint4.C4 = 0;
 8003014:	4b39      	ldr	r3, [pc, #228]	; (80030fc <_Z20Update_State_Machinev+0x754>)
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint4.C5 = 0;
 800301e:	4b37      	ldr	r3, [pc, #220]	; (80030fc <_Z20Update_State_Machinev+0x754>)
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

		control_state = 42;
 8003028:	4b30      	ldr	r3, [pc, #192]	; (80030ec <_Z20Update_State_Machinev+0x744>)
 800302a:	222a      	movs	r2, #42	; 0x2a
 800302c:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 800302e:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <_Z20Update_State_Machinev+0x748>)
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
		break;
 8003034:	e10a      	b.n	800324c <_Z20Update_State_Machinev+0x8a4>

//		State_FIN = true;
		break;

	case 54:
		HAL_TIM_Base_Stop_IT(&htim14);
 8003036:	482c      	ldr	r0, [pc, #176]	; (80030e8 <_Z20Update_State_Machinev+0x740>)
 8003038:	f00a f914 	bl	800d264 <HAL_TIM_Base_Stop_IT>
		t = 0;
 800303c:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <_Z20Update_State_Machinev+0x73c>)
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
		fcb_joint2.Goal_Velocity = 0;
 8003044:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <_Z20Update_State_Machinev+0x72c>)
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 800304c:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8003050:	482f      	ldr	r0, [pc, #188]	; (8003110 <_Z20Update_State_Machinev+0x768>)
 8003052:	f7ff f899 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 8003056:	4b1f      	ldr	r3, [pc, #124]	; (80030d4 <_Z20Update_State_Machinev+0x72c>)
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	4a1e      	ldr	r2, [pc, #120]	; (80030d4 <_Z20Update_State_Machinev+0x72c>)
 800305c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <_Z20Update_State_Machinev+0x750>)
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 800306a:	4b25      	ldr	r3, [pc, #148]	; (8003100 <_Z20Update_State_Machinev+0x758>)
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 8003074:	4b21      	ldr	r3, [pc, #132]	; (80030fc <_Z20Update_State_Machinev+0x754>)
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 800307e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8003082:	4820      	ldr	r0, [pc, #128]	; (8003104 <_Z20Update_State_Machinev+0x75c>)
 8003084:	f7ff f880 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 8003088:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80030dc <_Z20Update_State_Machinev+0x734>
 800308c:	481e      	ldr	r0, [pc, #120]	; (8003108 <_Z20Update_State_Machinev+0x760>)
 800308e:	f7ff f87b 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 8003092:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80030dc <_Z20Update_State_Machinev+0x734>
 8003096:	481d      	ldr	r0, [pc, #116]	; (800310c <_Z20Update_State_Machinev+0x764>)
 8003098:	f7ff f876 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		if (Gripper_State[first - 1] == 1) {
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <_Z20Update_State_Machinev+0x724>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3b01      	subs	r3, #1
 80030a2:	4a0b      	ldr	r2, [pc, #44]	; (80030d0 <_Z20Update_State_Machinev+0x728>)
 80030a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d030      	beq.n	8003118 <_Z20Update_State_Machinev+0x770>
			gripper.GripperClose();
 80030b6:	4817      	ldr	r0, [pc, #92]	; (8003114 <_Z20Update_State_Machinev+0x76c>)
 80030b8:	f7fe fcfc 	bl	8001ab4 <_ZN10ServoMotor12GripperCloseEv>
 80030bc:	e03c      	b.n	8003138 <_Z20Update_State_Machinev+0x790>
 80030be:	bf00      	nop
 80030c0:	24000afc 	.word	0x24000afc
 80030c4:	41200000 	.word	0x41200000
 80030c8:	24000b3e 	.word	0x24000b3e
 80030cc:	2400000c 	.word	0x2400000c
 80030d0:	24000b90 	.word	0x24000b90
 80030d4:	2400064c 	.word	0x2400064c
 80030d8:	24000004 	.word	0x24000004
 80030dc:	00000000 	.word	0x00000000
 80030e0:	24000008 	.word	0x24000008
 80030e4:	24000bf0 	.word	0x24000bf0
 80030e8:	24001094 	.word	0x24001094
 80030ec:	24000be8 	.word	0x24000be8
 80030f0:	24000af8 	.word	0x24000af8
 80030f4:	24000000 	.word	0x24000000
 80030f8:	24000568 	.word	0x24000568
 80030fc:	24000814 	.word	0x24000814
 8003100:	24000730 	.word	0x24000730
 8003104:	240004c8 	.word	0x240004c8
 8003108:	24000540 	.word	0x24000540
 800310c:	24000518 	.word	0x24000518
 8003110:	240004f0 	.word	0x240004f0
 8003114:	24000ac0 	.word	0x24000ac0
		} else if (Gripper_State[first - 1] == 2) {
 8003118:	4b4f      	ldr	r3, [pc, #316]	; (8003258 <_Z20Update_State_Machinev+0x8b0>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3b01      	subs	r3, #1
 800311e:	4a4f      	ldr	r2, [pc, #316]	; (800325c <_Z20Update_State_Machinev+0x8b4>)
 8003120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003124:	2b02      	cmp	r3, #2
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <_Z20Update_State_Machinev+0x790>
			gripper.GripperOpen();
 8003132:	484b      	ldr	r0, [pc, #300]	; (8003260 <_Z20Update_State_Machinev+0x8b8>)
 8003134:	f7fe fcd4 	bl	8001ae0 <_ZN10ServoMotor11GripperOpenEv>
		}
//		for (int i =0 ;i <1000000;i++) {}
		fcb_joint2.C0 = 0;
 8003138:	4b4a      	ldr	r3, [pc, #296]	; (8003264 <_Z20Update_State_Machinev+0x8bc>)
 800313a:	f04f 0200 	mov.w	r2, #0
 800313e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		fcb_joint2.C1 = 0;
 8003142:	4b48      	ldr	r3, [pc, #288]	; (8003264 <_Z20Update_State_Machinev+0x8bc>)
 8003144:	f04f 0200 	mov.w	r2, #0
 8003148:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 800314c:	4b45      	ldr	r3, [pc, #276]	; (8003264 <_Z20Update_State_Machinev+0x8bc>)
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8003156:	4b43      	ldr	r3, [pc, #268]	; (8003264 <_Z20Update_State_Machinev+0x8bc>)
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 8003160:	4b40      	ldr	r3, [pc, #256]	; (8003264 <_Z20Update_State_Machinev+0x8bc>)
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 800316a:	4b3e      	ldr	r3, [pc, #248]	; (8003264 <_Z20Update_State_Machinev+0x8bc>)
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8003174:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <_Z20Update_State_Machinev+0x8bc>)
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 43;
 800317c:	4b3a      	ldr	r3, [pc, #232]	; (8003268 <_Z20Update_State_Machinev+0x8c0>)
 800317e:	222b      	movs	r2, #43	; 0x2b
 8003180:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8003182:	4b3a      	ldr	r3, [pc, #232]	; (800326c <_Z20Update_State_Machinev+0x8c4>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
		break;
 8003188:	e060      	b.n	800324c <_Z20Update_State_Machinev+0x8a4>
	case 55:

		break;

	case 56:
		fcb_joint2.Goal_Velocity = 0;
 800318a:	4b36      	ldr	r3, [pc, #216]	; (8003264 <_Z20Update_State_Machinev+0x8bc>)
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	64da      	str	r2, [r3, #76]	; 0x4c
		stepperJ2.StepperOpenLoopSpeedM(0.0);
 8003192:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8003270 <_Z20Update_State_Machinev+0x8c8>
 8003196:	4837      	ldr	r0, [pc, #220]	; (8003274 <_Z20Update_State_Machinev+0x8cc>)
 8003198:	f7fe fff6 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		fcb_joint2.C0 = fcb_joint2.Encoder;
 800319c:	4b31      	ldr	r3, [pc, #196]	; (8003264 <_Z20Update_State_Machinev+0x8bc>)
 800319e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a0:	4a30      	ldr	r2, [pc, #192]	; (8003264 <_Z20Update_State_Machinev+0x8bc>)
 80031a2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
		fcb_joint1.Output_Joint_W = 0;
 80031a6:	4b34      	ldr	r3, [pc, #208]	; (8003278 <_Z20Update_State_Machinev+0x8d0>)
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint3.Output_Joint_W = 0;
 80031b0:	4b32      	ldr	r3, [pc, #200]	; (800327c <_Z20Update_State_Machinev+0x8d4>)
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		fcb_joint4.Output_Joint_W = 0;
 80031ba:	4b31      	ldr	r3, [pc, #196]	; (8003280 <_Z20Update_State_Machinev+0x8d8>)
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		stepperJ1.StepperOpenLoopSpeedM(0.0);
 80031c4:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8003270 <_Z20Update_State_Machinev+0x8c8>
 80031c8:	482e      	ldr	r0, [pc, #184]	; (8003284 <_Z20Update_State_Machinev+0x8dc>)
 80031ca:	f7fe ffdd 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ4.StepperOpenLoopSpeedM(0.0);
 80031ce:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003270 <_Z20Update_State_Machinev+0x8c8>
 80031d2:	482d      	ldr	r0, [pc, #180]	; (8003288 <_Z20Update_State_Machinev+0x8e0>)
 80031d4:	f7fe ffd8 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		stepperJ3.StepperOpenLoopSpeedM(0.0);
 80031d8:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8003270 <_Z20Update_State_Machinev+0x8c8>
 80031dc:	482b      	ldr	r0, [pc, #172]	; (800328c <_Z20Update_State_Machinev+0x8e4>)
 80031de:	f7fe ffd3 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
		HAL_TIM_Base_Stop_IT(&htim14);
 80031e2:	482b      	ldr	r0, [pc, #172]	; (8003290 <_Z20Update_State_Machinev+0x8e8>)
 80031e4:	f00a f83e 	bl	800d264 <HAL_TIM_Base_Stop_IT>
		t = 0;
 80031e8:	4b2a      	ldr	r3, [pc, #168]	; (8003294 <_Z20Update_State_Machinev+0x8ec>)
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
		fcb_joint2.C1 = 0;
 80031f0:	4b1c      	ldr	r3, [pc, #112]	; (8003264 <_Z20Update_State_Machinev+0x8bc>)
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		fcb_joint2.C2 = 0;
 80031fa:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <_Z20Update_State_Machinev+0x8bc>)
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		fcb_joint2.C3 = 0;
 8003204:	4b17      	ldr	r3, [pc, #92]	; (8003264 <_Z20Update_State_Machinev+0x8bc>)
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		fcb_joint2.C4 = 0;
 800320e:	4b15      	ldr	r3, [pc, #84]	; (8003264 <_Z20Update_State_Machinev+0x8bc>)
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
		fcb_joint2.C5 = 0;
 8003218:	4b12      	ldr	r3, [pc, #72]	; (8003264 <_Z20Update_State_Machinev+0x8bc>)
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		fcb_joint2.Goal_Velocity = 0;
 8003222:	4b10      	ldr	r3, [pc, #64]	; (8003264 <_Z20Update_State_Machinev+0x8bc>)
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	64da      	str	r2, [r3, #76]	; 0x4c
		control_state = 41;
 800322a:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <_Z20Update_State_Machinev+0x8c0>)
 800322c:	2229      	movs	r2, #41	; 0x29
 800322e:	701a      	strb	r2, [r3, #0]
		State_FIN = true;
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <_Z20Update_State_Machinev+0x8c4>)
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]
		break;
 8003236:	e009      	b.n	800324c <_Z20Update_State_Machinev+0x8a4>

	default:
		control_state = 0;
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <_Z20Update_State_Machinev+0x8c0>)
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
		State_FIN = false;
 800323e:	4b0b      	ldr	r3, [pc, #44]	; (800326c <_Z20Update_State_Machinev+0x8c4>)
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
		break;
 8003244:	e002      	b.n	800324c <_Z20Update_State_Machinev+0x8a4>
		break;
 8003246:	bf00      	nop
 8003248:	e000      	b.n	800324c <_Z20Update_State_Machinev+0x8a4>
		break;
 800324a:	bf00      	nop
	}
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	ecbd 8b02 	vpop	{d8}
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	2400000c 	.word	0x2400000c
 800325c:	24000b90 	.word	0x24000b90
 8003260:	24000ac0 	.word	0x24000ac0
 8003264:	2400064c 	.word	0x2400064c
 8003268:	24000be8 	.word	0x24000be8
 800326c:	24000af8 	.word	0x24000af8
 8003270:	00000000 	.word	0x00000000
 8003274:	240004f0 	.word	0x240004f0
 8003278:	24000568 	.word	0x24000568
 800327c:	24000730 	.word	0x24000730
 8003280:	24000814 	.word	0x24000814
 8003284:	240004c8 	.word	0x240004c8
 8003288:	24000540 	.word	0x24000540
 800328c:	24000518 	.word	0x24000518
 8003290:	24001094 	.word	0x24001094
 8003294:	24000bf0 	.word	0x24000bf0

08003298 <HAL_UARTEx_RxEventCallback>:
float box_q4[30];
float idx, idy;

#endif

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8003298:	b5b0      	push	{r4, r5, r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	460b      	mov	r3, r1
 80032a2:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a92      	ldr	r2, [pc, #584]	; (80034f0 <HAL_UARTEx_RxEventCallback+0x258>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	f040 814b 	bne.w	8003544 <HAL_UARTEx_RxEventCallback+0x2ac>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 80032ae:	4a91      	ldr	r2, [pc, #580]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 80032b0:	4b91      	ldr	r3, [pc, #580]	; (80034f8 <HAL_UARTEx_RxEventCallback+0x260>)
 80032b2:	4614      	mov	r4, r2
 80032b4:	461d      	mov	r5, r3
 80032b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032ba:	682b      	ldr	r3, [r5, #0]
 80032bc:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 80032be:	2214      	movs	r2, #20
 80032c0:	2100      	movs	r1, #0
 80032c2:	488d      	ldr	r0, [pc, #564]	; (80034f8 <HAL_UARTEx_RxEventCallback+0x260>)
 80032c4:	f00f f844 	bl	8012350 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 80032c8:	887b      	ldrh	r3, [r7, #2]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	f240 80ff 	bls.w	80034ce <HAL_UARTEx_RxEventCallback+0x236>
 80032d0:	887b      	ldrh	r3, [r7, #2]
 80032d2:	2b14      	cmp	r3, #20
 80032d4:	f200 80fb 	bhi.w	80034ce <HAL_UARTEx_RxEventCallback+0x236>
			cmdDataSize = Size - 2;	// Calculate data length.
 80032d8:	887b      	ldrh	r3, [r7, #2]
 80032da:	3b02      	subs	r3, #2
 80032dc:	b29a      	uxth	r2, r3
 80032de:	4b87      	ldr	r3, [pc, #540]	; (80034fc <HAL_UARTEx_RxEventCallback+0x264>)
 80032e0:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 80032e2:	4b86      	ldr	r3, [pc, #536]	; (80034fc <HAL_UARTEx_RxEventCallback+0x264>)
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	461a      	mov	r2, r3
 80032ea:	4982      	ldr	r1, [pc, #520]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 80032ec:	4884      	ldr	r0, [pc, #528]	; (8003500 <HAL_UARTEx_RxEventCallback+0x268>)
 80032ee:	f003 fdf1 	bl	8006ed4 <HAL_CRC_Calculate>
 80032f2:	4603      	mov	r3, r0
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	4b83      	ldr	r3, [pc, #524]	; (8003504 <HAL_UARTEx_RxEventCallback+0x26c>)
 80032f8:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 80032fa:	4b80      	ldr	r3, [pc, #512]	; (80034fc <HAL_UARTEx_RxEventCallback+0x264>)
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	4b7c      	ldr	r3, [pc, #496]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003304:	5c9b      	ldrb	r3, [r3, r2]
 8003306:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 8003308:	b21a      	sxth	r2, r3
 800330a:	4b7c      	ldr	r3, [pc, #496]	; (80034fc <HAL_UARTEx_RxEventCallback+0x264>)
 800330c:	881b      	ldrh	r3, [r3, #0]
 800330e:	b29b      	uxth	r3, r3
 8003310:	3301      	adds	r3, #1
 8003312:	4978      	ldr	r1, [pc, #480]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003314:	5ccb      	ldrb	r3, [r1, r3]
 8003316:	b21b      	sxth	r3, r3
 8003318:	4313      	orrs	r3, r2
 800331a:	b21b      	sxth	r3, r3
 800331c:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 800331e:	4b7a      	ldr	r3, [pc, #488]	; (8003508 <HAL_UARTEx_RxEventCallback+0x270>)
 8003320:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8003322:	4b78      	ldr	r3, [pc, #480]	; (8003504 <HAL_UARTEx_RxEventCallback+0x26c>)
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	b29a      	uxth	r2, r3
 8003328:	4b77      	ldr	r3, [pc, #476]	; (8003508 <HAL_UARTEx_RxEventCallback+0x270>)
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	b29b      	uxth	r3, r3
 800332e:	429a      	cmp	r2, r3
 8003330:	bf0c      	ite	eq
 8003332:	2301      	moveq	r3, #1
 8003334:	2300      	movne	r3, #0
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 8114 	beq.w	8003566 <HAL_UARTEx_RxEventCallback+0x2ce>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800333e:	2201      	movs	r2, #1
 8003340:	2102      	movs	r1, #2
 8003342:	4872      	ldr	r0, [pc, #456]	; (800350c <HAL_UARTEx_RxEventCallback+0x274>)
 8003344:	f006 ff4c 	bl	800a1e0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003348:	2200      	movs	r2, #0
 800334a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800334e:	4870      	ldr	r0, [pc, #448]	; (8003510 <HAL_UARTEx_RxEventCallback+0x278>)
 8003350:	f006 ff46 	bl	800a1e0 <HAL_GPIO_WritePin>
//				}
//				else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
////					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
//					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
//				}
				if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) // Joint Jog 4q
 8003354:	4b67      	ldr	r3, [pc, #412]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b61      	cmp	r3, #97	; 0x61
 800335a:	d106      	bne.n	800336a <HAL_UARTEx_RxEventCallback+0xd2>
 800335c:	4b67      	ldr	r3, [pc, #412]	; (80034fc <HAL_UARTEx_RxEventCallback+0x264>)
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b05      	cmp	r3, #5
 8003364:	d101      	bne.n	800336a <HAL_UARTEx_RxEventCallback+0xd2>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <HAL_UARTEx_RxEventCallback+0xd4>
 800336a:	2300      	movs	r3, #0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d014      	beq.n	800339a <HAL_UARTEx_RxEventCallback+0x102>
						{
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8003370:	4b60      	ldr	r3, [pc, #384]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003372:	785b      	ldrb	r3, [r3, #1]
 8003374:	b25a      	sxtb	r2, r3
 8003376:	4b67      	ldr	r3, [pc, #412]	; (8003514 <HAL_UARTEx_RxEventCallback+0x27c>)
 8003378:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 800337a:	4b5e      	ldr	r3, [pc, #376]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 800337c:	789b      	ldrb	r3, [r3, #2]
 800337e:	b25a      	sxtb	r2, r3
 8003380:	4b65      	ldr	r3, [pc, #404]	; (8003518 <HAL_UARTEx_RxEventCallback+0x280>)
 8003382:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8003384:	4b5b      	ldr	r3, [pc, #364]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003386:	78db      	ldrb	r3, [r3, #3]
 8003388:	b25a      	sxtb	r2, r3
 800338a:	4b64      	ldr	r3, [pc, #400]	; (800351c <HAL_UARTEx_RxEventCallback+0x284>)
 800338c:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 800338e:	4b59      	ldr	r3, [pc, #356]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003390:	791b      	ldrb	r3, [r3, #4]
 8003392:	b25a      	sxtb	r2, r3
 8003394:	4b62      	ldr	r3, [pc, #392]	; (8003520 <HAL_UARTEx_RxEventCallback+0x288>)
 8003396:	701a      	strb	r2, [r3, #0]
//					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4];
//					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6];
//					pyaw = Old_Rx_Buffer[7];
//				}

			}
 8003398:	e0e5      	b.n	8003566 <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) // Linear Jog X,Y,Z,Yaw
 800339a:	4b56      	ldr	r3, [pc, #344]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b71      	cmp	r3, #113	; 0x71
 80033a0:	d106      	bne.n	80033b0 <HAL_UARTEx_RxEventCallback+0x118>
 80033a2:	4b56      	ldr	r3, [pc, #344]	; (80034fc <HAL_UARTEx_RxEventCallback+0x264>)
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b05      	cmp	r3, #5
 80033aa:	d101      	bne.n	80033b0 <HAL_UARTEx_RxEventCallback+0x118>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <HAL_UARTEx_RxEventCallback+0x11a>
 80033b0:	2300      	movs	r3, #0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d014      	beq.n	80033e0 <HAL_UARTEx_RxEventCallback+0x148>
					dx = Old_Rx_Buffer[1];
 80033b6:	4b4f      	ldr	r3, [pc, #316]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 80033b8:	785b      	ldrb	r3, [r3, #1]
 80033ba:	b25a      	sxtb	r2, r3
 80033bc:	4b59      	ldr	r3, [pc, #356]	; (8003524 <HAL_UARTEx_RxEventCallback+0x28c>)
 80033be:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 80033c0:	4b4c      	ldr	r3, [pc, #304]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 80033c2:	789b      	ldrb	r3, [r3, #2]
 80033c4:	b25a      	sxtb	r2, r3
 80033c6:	4b58      	ldr	r3, [pc, #352]	; (8003528 <HAL_UARTEx_RxEventCallback+0x290>)
 80033c8:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 80033ca:	4b4a      	ldr	r3, [pc, #296]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 80033cc:	78db      	ldrb	r3, [r3, #3]
 80033ce:	b25a      	sxtb	r2, r3
 80033d0:	4b56      	ldr	r3, [pc, #344]	; (800352c <HAL_UARTEx_RxEventCallback+0x294>)
 80033d2:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 80033d4:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 80033d6:	791b      	ldrb	r3, [r3, #4]
 80033d8:	b25a      	sxtb	r2, r3
 80033da:	4b55      	ldr	r3, [pc, #340]	; (8003530 <HAL_UARTEx_RxEventCallback+0x298>)
 80033dc:	701a      	strb	r2, [r3, #0]
			}
 80033de:	e0c2      	b.n	8003566 <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x85 && cmdDataSize == 2) {
 80033e0:	4b44      	ldr	r3, [pc, #272]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b85      	cmp	r3, #133	; 0x85
 80033e6:	d106      	bne.n	80033f6 <HAL_UARTEx_RxEventCallback+0x15e>
 80033e8:	4b44      	ldr	r3, [pc, #272]	; (80034fc <HAL_UARTEx_RxEventCallback+0x264>)
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d101      	bne.n	80033f6 <HAL_UARTEx_RxEventCallback+0x15e>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <HAL_UARTEx_RxEventCallback+0x160>
 80033f6:	2300      	movs	r3, #0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_UARTEx_RxEventCallback+0x16c>
					control_state = 51;
 80033fc:	4b4d      	ldr	r3, [pc, #308]	; (8003534 <HAL_UARTEx_RxEventCallback+0x29c>)
 80033fe:	2233      	movs	r2, #51	; 0x33
 8003400:	701a      	strb	r2, [r3, #0]
			}
 8003402:	e0b0      	b.n	8003566 <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x86 && cmdDataSize == 3) //
 8003404:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b86      	cmp	r3, #134	; 0x86
 800340a:	d106      	bne.n	800341a <HAL_UARTEx_RxEventCallback+0x182>
 800340c:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_UARTEx_RxEventCallback+0x264>)
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b03      	cmp	r3, #3
 8003414:	d101      	bne.n	800341a <HAL_UARTEx_RxEventCallback+0x182>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_UARTEx_RxEventCallback+0x184>
 800341a:	2300      	movs	r3, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_UARTEx_RxEventCallback+0x19e>
					int value_input = Old_Rx_Buffer[1];
 8003420:	4b34      	ldr	r3, [pc, #208]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003422:	785b      	ldrb	r3, [r3, #1]
 8003424:	613b      	str	r3, [r7, #16]
					int value_gripper = Old_Rx_Buffer[2];
 8003426:	4b33      	ldr	r3, [pc, #204]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003428:	789b      	ldrb	r3, [r3, #2]
 800342a:	60fb      	str	r3, [r7, #12]
					Insert_queue(value_input, value_gripper);
 800342c:	68f9      	ldr	r1, [r7, #12]
 800342e:	6938      	ldr	r0, [r7, #16]
 8003430:	f7ff f8ce 	bl	80025d0 <_Z12Insert_queueii>
			}
 8003434:	e097      	b.n	8003566 <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x87 && cmdDataSize == 2) {
 8003436:	4b2f      	ldr	r3, [pc, #188]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b87      	cmp	r3, #135	; 0x87
 800343c:	d106      	bne.n	800344c <HAL_UARTEx_RxEventCallback+0x1b4>
 800343e:	4b2f      	ldr	r3, [pc, #188]	; (80034fc <HAL_UARTEx_RxEventCallback+0x264>)
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d101      	bne.n	800344c <HAL_UARTEx_RxEventCallback+0x1b4>
 8003448:	2301      	movs	r3, #1
 800344a:	e000      	b.n	800344e <HAL_UARTEx_RxEventCallback+0x1b6>
 800344c:	2300      	movs	r3, #0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d008      	beq.n	8003464 <HAL_UARTEx_RxEventCallback+0x1cc>
					char state_input = Old_Rx_Buffer[1];
 8003452:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003454:	785b      	ldrb	r3, [r3, #1]
 8003456:	75fb      	strb	r3, [r7, #23]
					control_state = state_input;
 8003458:	4a36      	ldr	r2, [pc, #216]	; (8003534 <HAL_UARTEx_RxEventCallback+0x29c>)
 800345a:	7dfb      	ldrb	r3, [r7, #23]
 800345c:	7013      	strb	r3, [r2, #0]
					Update_State_Machine();
 800345e:	f7ff faa3 	bl	80029a8 <_Z20Update_State_Machinev>
			}
 8003462:	e080      	b.n	8003566 <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x89 && cmdDataSize == 2) {
 8003464:	4b23      	ldr	r3, [pc, #140]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b89      	cmp	r3, #137	; 0x89
 800346a:	d106      	bne.n	800347a <HAL_UARTEx_RxEventCallback+0x1e2>
 800346c:	4b23      	ldr	r3, [pc, #140]	; (80034fc <HAL_UARTEx_RxEventCallback+0x264>)
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d101      	bne.n	800347a <HAL_UARTEx_RxEventCallback+0x1e2>
 8003476:	2301      	movs	r3, #1
 8003478:	e000      	b.n	800347c <HAL_UARTEx_RxEventCallback+0x1e4>
 800347a:	2300      	movs	r3, #0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_UARTEx_RxEventCallback+0x1ee>
					Update_State_Machine();
 8003480:	f7ff fa92 	bl	80029a8 <_Z20Update_State_Machinev>
			}
 8003484:	e06f      	b.n	8003566 <HAL_UARTEx_RxEventCallback+0x2ce>
				} else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) // Servo
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b81      	cmp	r3, #129	; 0x81
 800348c:	d106      	bne.n	800349c <HAL_UARTEx_RxEventCallback+0x204>
 800348e:	4b1b      	ldr	r3, [pc, #108]	; (80034fc <HAL_UARTEx_RxEventCallback+0x264>)
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d101      	bne.n	800349c <HAL_UARTEx_RxEventCallback+0x204>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <HAL_UARTEx_RxEventCallback+0x206>
 800349c:	2300      	movs	r3, #0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d061      	beq.n	8003566 <HAL_UARTEx_RxEventCallback+0x2ce>
					gripperstate = Old_Rx_Buffer[1];
 80034a2:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <HAL_UARTEx_RxEventCallback+0x25c>)
 80034a4:	785b      	ldrb	r3, [r3, #1]
 80034a6:	461a      	mov	r2, r3
 80034a8:	4b23      	ldr	r3, [pc, #140]	; (8003538 <HAL_UARTEx_RxEventCallback+0x2a0>)
 80034aa:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0) {
 80034ac:	4b22      	ldr	r3, [pc, #136]	; (8003538 <HAL_UARTEx_RxEventCallback+0x2a0>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	bf0c      	ite	eq
 80034b4:	2301      	moveq	r3, #1
 80034b6:	2300      	movne	r3, #0
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_UARTEx_RxEventCallback+0x22e>
						gripper.GripperOpen();
 80034be:	481f      	ldr	r0, [pc, #124]	; (800353c <HAL_UARTEx_RxEventCallback+0x2a4>)
 80034c0:	f7fe fb0e 	bl	8001ae0 <_ZN10ServoMotor11GripperOpenEv>
			}
 80034c4:	e04f      	b.n	8003566 <HAL_UARTEx_RxEventCallback+0x2ce>
						gripper.GripperClose();
 80034c6:	481d      	ldr	r0, [pc, #116]	; (800353c <HAL_UARTEx_RxEventCallback+0x2a4>)
 80034c8:	f7fe faf4 	bl	8001ab4 <_ZN10ServoMotor12GripperCloseEv>
			}
 80034cc:	e04b      	b.n	8003566 <HAL_UARTEx_RxEventCallback+0x2ce>
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80034ce:	2200      	movs	r2, #0
 80034d0:	2102      	movs	r1, #2
 80034d2:	480e      	ldr	r0, [pc, #56]	; (800350c <HAL_UARTEx_RxEventCallback+0x274>)
 80034d4:	f006 fe84 	bl	800a1e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80034d8:	2201      	movs	r2, #1
 80034da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034de:	480c      	ldr	r0, [pc, #48]	; (8003510 <HAL_UARTEx_RxEventCallback+0x278>)
 80034e0:	f006 fe7e 	bl	800a1e0 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 80034e4:	220c      	movs	r2, #12
 80034e6:	4916      	ldr	r1, [pc, #88]	; (8003540 <HAL_UARTEx_RxEventCallback+0x2a8>)
 80034e8:	4801      	ldr	r0, [pc, #4]	; (80034f0 <HAL_UARTEx_RxEventCallback+0x258>)
 80034ea:	f00b fbf9 	bl	800ece0 <HAL_UART_Transmit_DMA>
 80034ee:	e03b      	b.n	8003568 <HAL_UARTEx_RxEventCallback+0x2d0>
 80034f0:	24001374 	.word	0x24001374
 80034f4:	24000b10 	.word	0x24000b10
 80034f8:	24000b24 	.word	0x24000b24
 80034fc:	24000b38 	.word	0x24000b38
 8003500:	24000434 	.word	0x24000434
 8003504:	24000b08 	.word	0x24000b08
 8003508:	24000b0a 	.word	0x24000b0a
 800350c:	58021000 	.word	0x58021000
 8003510:	58020400 	.word	0x58020400
 8003514:	24000b00 	.word	0x24000b00
 8003518:	24000b01 	.word	0x24000b01
 800351c:	24000b02 	.word	0x24000b02
 8003520:	24000b03 	.word	0x24000b03
 8003524:	24000b04 	.word	0x24000b04
 8003528:	24000b05 	.word	0x24000b05
 800352c:	24000b06 	.word	0x24000b06
 8003530:	24000b07 	.word	0x24000b07
 8003534:	24000be8 	.word	0x24000be8
 8003538:	24000b0c 	.word	0x24000b0c
 800353c:	24000ac0 	.word	0x24000ac0
 8003540:	08014c58 	.word	0x08014c58
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003544:	2200      	movs	r2, #0
 8003546:	2102      	movs	r1, #2
 8003548:	483d      	ldr	r0, [pc, #244]	; (8003640 <HAL_UARTEx_RxEventCallback+0x3a8>)
 800354a:	f006 fe49 	bl	800a1e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800354e:	2201      	movs	r2, #1
 8003550:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003554:	483b      	ldr	r0, [pc, #236]	; (8003644 <HAL_UARTEx_RxEventCallback+0x3ac>)
 8003556:	f006 fe43 	bl	800a1e0 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 800355a:	2215      	movs	r2, #21
 800355c:	493a      	ldr	r1, [pc, #232]	; (8003648 <HAL_UARTEx_RxEventCallback+0x3b0>)
 800355e:	483b      	ldr	r0, [pc, #236]	; (800364c <HAL_UARTEx_RxEventCallback+0x3b4>)
 8003560:	f00b fbbe 	bl	800ece0 <HAL_UART_Transmit_DMA>
 8003564:	e000      	b.n	8003568 <HAL_UARTEx_RxEventCallback+0x2d0>
			}
 8003566:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 8003568:	2214      	movs	r2, #20
 800356a:	4939      	ldr	r1, [pc, #228]	; (8003650 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800356c:	4837      	ldr	r0, [pc, #220]	; (800364c <HAL_UARTEx_RxEventCallback+0x3b4>)
 800356e:	f00d fb1c 	bl	8010baa <HAL_UARTEx_ReceiveToIdle_DMA>
	Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8003572:	4b38      	ldr	r3, [pc, #224]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a38      	ldr	r2, [pc, #224]	; (8003658 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d04a      	beq.n	8003612 <HAL_UARTEx_RxEventCallback+0x37a>
 800357c:	4b35      	ldr	r3, [pc, #212]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a36      	ldr	r2, [pc, #216]	; (800365c <HAL_UARTEx_RxEventCallback+0x3c4>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d045      	beq.n	8003612 <HAL_UARTEx_RxEventCallback+0x37a>
 8003586:	4b33      	ldr	r3, [pc, #204]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a35      	ldr	r2, [pc, #212]	; (8003660 <HAL_UARTEx_RxEventCallback+0x3c8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d040      	beq.n	8003612 <HAL_UARTEx_RxEventCallback+0x37a>
 8003590:	4b30      	ldr	r3, [pc, #192]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a33      	ldr	r2, [pc, #204]	; (8003664 <HAL_UARTEx_RxEventCallback+0x3cc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d03b      	beq.n	8003612 <HAL_UARTEx_RxEventCallback+0x37a>
 800359a:	4b2e      	ldr	r3, [pc, #184]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a32      	ldr	r2, [pc, #200]	; (8003668 <HAL_UARTEx_RxEventCallback+0x3d0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d036      	beq.n	8003612 <HAL_UARTEx_RxEventCallback+0x37a>
 80035a4:	4b2b      	ldr	r3, [pc, #172]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a30      	ldr	r2, [pc, #192]	; (800366c <HAL_UARTEx_RxEventCallback+0x3d4>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d031      	beq.n	8003612 <HAL_UARTEx_RxEventCallback+0x37a>
 80035ae:	4b29      	ldr	r3, [pc, #164]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2f      	ldr	r2, [pc, #188]	; (8003670 <HAL_UARTEx_RxEventCallback+0x3d8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d02c      	beq.n	8003612 <HAL_UARTEx_RxEventCallback+0x37a>
 80035b8:	4b26      	ldr	r3, [pc, #152]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a2d      	ldr	r2, [pc, #180]	; (8003674 <HAL_UARTEx_RxEventCallback+0x3dc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d027      	beq.n	8003612 <HAL_UARTEx_RxEventCallback+0x37a>
 80035c2:	4b24      	ldr	r3, [pc, #144]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a2c      	ldr	r2, [pc, #176]	; (8003678 <HAL_UARTEx_RxEventCallback+0x3e0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d022      	beq.n	8003612 <HAL_UARTEx_RxEventCallback+0x37a>
 80035cc:	4b21      	ldr	r3, [pc, #132]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a2a      	ldr	r2, [pc, #168]	; (800367c <HAL_UARTEx_RxEventCallback+0x3e4>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d01d      	beq.n	8003612 <HAL_UARTEx_RxEventCallback+0x37a>
 80035d6:	4b1f      	ldr	r3, [pc, #124]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a29      	ldr	r2, [pc, #164]	; (8003680 <HAL_UARTEx_RxEventCallback+0x3e8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d018      	beq.n	8003612 <HAL_UARTEx_RxEventCallback+0x37a>
 80035e0:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a27      	ldr	r2, [pc, #156]	; (8003684 <HAL_UARTEx_RxEventCallback+0x3ec>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <HAL_UARTEx_RxEventCallback+0x37a>
 80035ea:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a26      	ldr	r2, [pc, #152]	; (8003688 <HAL_UARTEx_RxEventCallback+0x3f0>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00e      	beq.n	8003612 <HAL_UARTEx_RxEventCallback+0x37a>
 80035f4:	4b17      	ldr	r3, [pc, #92]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a24      	ldr	r2, [pc, #144]	; (800368c <HAL_UARTEx_RxEventCallback+0x3f4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d009      	beq.n	8003612 <HAL_UARTEx_RxEventCallback+0x37a>
 80035fe:	4b15      	ldr	r3, [pc, #84]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a23      	ldr	r2, [pc, #140]	; (8003690 <HAL_UARTEx_RxEventCallback+0x3f8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_UARTEx_RxEventCallback+0x37a>
 8003608:	4b12      	ldr	r3, [pc, #72]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a21      	ldr	r2, [pc, #132]	; (8003694 <HAL_UARTEx_RxEventCallback+0x3fc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d108      	bne.n	8003624 <HAL_UARTEx_RxEventCallback+0x38c>
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4b0e      	ldr	r3, [pc, #56]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0208 	bic.w	r2, r2, #8
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	e008      	b.n	8003636 <HAL_UARTEx_RxEventCallback+0x39e>
 8003624:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <HAL_UARTEx_RxEventCallback+0x3bc>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0204 	bic.w	r2, r2, #4
 8003632:	601a      	str	r2, [r3, #0]
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bdb0      	pop	{r4, r5, r7, pc}
 800363e:	bf00      	nop
 8003640:	58021000 	.word	0x58021000
 8003644:	58020400 	.word	0x58020400
 8003648:	08014c68 	.word	0x08014c68
 800364c:	24001374 	.word	0x24001374
 8003650:	24000b24 	.word	0x24000b24
 8003654:	2400165c 	.word	0x2400165c
 8003658:	40020010 	.word	0x40020010
 800365c:	40020028 	.word	0x40020028
 8003660:	40020040 	.word	0x40020040
 8003664:	40020058 	.word	0x40020058
 8003668:	40020070 	.word	0x40020070
 800366c:	40020088 	.word	0x40020088
 8003670:	400200a0 	.word	0x400200a0
 8003674:	400200b8 	.word	0x400200b8
 8003678:	40020410 	.word	0x40020410
 800367c:	40020428 	.word	0x40020428
 8003680:	40020440 	.word	0x40020440
 8003684:	40020458 	.word	0x40020458
 8003688:	40020470 	.word	0x40020470
 800368c:	40020488 	.word	0x40020488
 8003690:	400204a0 	.word	0x400204a0
 8003694:	400204b8 	.word	0x400204b8

08003698 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

	if (htim == &htim7) {	//

	}

	if (htim == &htim5) {	//
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4acb      	ldr	r2, [pc, #812]	; (80039d0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d110      	bne.n	80036ca <HAL_TIM_PeriodElapsedCallback+0x32>
//
////					stepperJ1.StepperOpenLoopSpeed(u_q1/num);
////					stepperJ2.StepperSetFrequency(u_q2/3.0);
////					stepperJ3.StepperOpenLoopSpeed(u_q3/num);
////					stepperJ4.StepperOpenLoopSpeed(u_q4/num);
		if (State_FIN) {
 80036a8:	4bca      	ldr	r3, [pc, #808]	; (80039d4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00b      	beq.n	80036ca <HAL_TIM_PeriodElapsedCallback+0x32>
			Balloon++;
 80036b2:	4bc9      	ldr	r3, [pc, #804]	; (80039d8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	3301      	adds	r3, #1
 80036b8:	4ac7      	ldr	r2, [pc, #796]	; (80039d8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80036ba:	6013      	str	r3, [r2, #0]
			Update_State_Machine();
 80036bc:	f7ff f974 	bl	80029a8 <_Z20Update_State_Machinev>
			Update_State_Machine();
 80036c0:	f7ff f972 	bl	80029a8 <_Z20Update_State_Machinev>
			State_FIN = false;
 80036c4:	4bc3      	ldr	r3, [pc, #780]	; (80039d4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	701a      	strb	r2, [r3, #0]
		}

	}

	if (htim == &htim16) {
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4ac3      	ldr	r2, [pc, #780]	; (80039dc <HAL_TIM_PeriodElapsedCallback+0x344>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	f040 80ca 	bne.w	8003868 <HAL_TIM_PeriodElapsedCallback+0x1d0>
		encoderJ1.AMT21_Read();
 80036d4:	48c2      	ldr	r0, [pc, #776]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80036d6:	f7fc fffc 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80036da:	48c1      	ldr	r0, [pc, #772]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80036dc:	f7fd f828 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80036e0:	4603      	mov	r3, r0
 80036e2:	461a      	mov	r2, r3
 80036e4:	4bbf      	ldr	r3, [pc, #764]	; (80039e4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80036e6:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 80036e8:	4bbe      	ldr	r3, [pc, #760]	; (80039e4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d110      	bne.n	8003712 <HAL_TIM_PeriodElapsedCallback+0x7a>
			fcb_joint1.Encoder = (encoderJ1.getAngPos180() / 2.609);
 80036f0:	48bb      	ldr	r0, [pc, #748]	; (80039e0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80036f2:	f7fd f883 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80036f6:	4603      	mov	r3, r0
 80036f8:	ee07 3a90 	vmov	s15, r3
 80036fc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003700:	ed9f 5baf 	vldr	d5, [pc, #700]	; 80039c0 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003704:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003708:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800370c:	4bb6      	ldr	r3, [pc, #728]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800370e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ2.AMT21_Read();
 8003712:	48b6      	ldr	r0, [pc, #728]	; (80039ec <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003714:	f7fc ffdd 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8003718:	48b4      	ldr	r0, [pc, #720]	; (80039ec <HAL_TIM_PeriodElapsedCallback+0x354>)
 800371a:	f7fd f809 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 800371e:	4603      	mov	r3, r0
 8003720:	461a      	mov	r2, r3
 8003722:	4bb3      	ldr	r3, [pc, #716]	; (80039f0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003724:	701a      	strb	r2, [r3, #0]
		if (HALENCJ2OK == HAL_OK) {
 8003726:	4bb2      	ldr	r3, [pc, #712]	; (80039f0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d112      	bne.n	8003754 <HAL_TIM_PeriodElapsedCallback+0xbc>
			encoderJ2.unwarp();
 800372e:	48af      	ldr	r0, [pc, #700]	; (80039ec <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003730:	f7fd f886 	bl	8000840 <_ZN5AMT216unwarpEv>
			fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 8003734:	48ad      	ldr	r0, [pc, #692]	; (80039ec <HAL_TIM_PeriodElapsedCallback+0x354>)
 8003736:	f7fd f8e2 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 800373a:	ee07 0a90 	vmov	s15, r0
 800373e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003742:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 80039c0 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003746:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800374a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800374e:	4ba9      	ldr	r3, [pc, #676]	; (80039f4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003750:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ3.AMT21_Read();
 8003754:	48a8      	ldr	r0, [pc, #672]	; (80039f8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8003756:	f7fc ffbc 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 800375a:	48a7      	ldr	r0, [pc, #668]	; (80039f8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800375c:	f7fc ffe8 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 8003760:	4603      	mov	r3, r0
 8003762:	461a      	mov	r2, r3
 8003764:	4ba5      	ldr	r3, [pc, #660]	; (80039fc <HAL_TIM_PeriodElapsedCallback+0x364>)
 8003766:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8003768:	4ba4      	ldr	r3, [pc, #656]	; (80039fc <HAL_TIM_PeriodElapsedCallback+0x364>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d110      	bne.n	8003792 <HAL_TIM_PeriodElapsedCallback+0xfa>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 8003770:	48a1      	ldr	r0, [pc, #644]	; (80039f8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8003772:	f7fd f843 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8003776:	4603      	mov	r3, r0
 8003778:	ee07 3a90 	vmov	s15, r3
 800377c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003780:	ed9f 5b8f 	vldr	d5, [pc, #572]	; 80039c0 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003784:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003788:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800378c:	4b9c      	ldr	r3, [pc, #624]	; (8003a00 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800378e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}

		encoderJ4.AMT21_Read();
 8003792:	489c      	ldr	r0, [pc, #624]	; (8003a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8003794:	f7fc ff9d 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 8003798:	489a      	ldr	r0, [pc, #616]	; (8003a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800379a:	f7fc ffc9 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 800379e:	4603      	mov	r3, r0
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b99      	ldr	r3, [pc, #612]	; (8003a08 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80037a4:	701a      	strb	r2, [r3, #0]
		if (HALENCJ4OK == HAL_OK) {
 80037a6:	4b98      	ldr	r3, [pc, #608]	; (8003a08 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d110      	bne.n	80037d0 <HAL_TIM_PeriodElapsedCallback+0x138>
			fcb_joint4.Encoder = encoderJ4.getAngPos180() / -2.609;
 80037ae:	4895      	ldr	r0, [pc, #596]	; (8003a04 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80037b0:	f7fd f824 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80037b4:	4603      	mov	r3, r0
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80037be:	ed9f 5b82 	vldr	d5, [pc, #520]	; 80039c8 <HAL_TIM_PeriodElapsedCallback+0x330>
 80037c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80037c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80037ca:	4b90      	ldr	r3, [pc, #576]	; (8003a0c <HAL_TIM_PeriodElapsedCallback+0x374>)
 80037cc:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		}
		angle_chess = chessABIEncoder.getMRadAngle();
 80037d0:	488f      	ldr	r0, [pc, #572]	; (8003a10 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80037d2:	f7fd f90f 	bl	80009f4 <_ZN10AS5047UABI12getMRadAngleEv>
 80037d6:	eef0 7a40 	vmov.f32	s15, s0
 80037da:	4b8e      	ldr	r3, [pc, #568]	; (8003a14 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80037dc:	edc3 7a00 	vstr	s15, [r3]
		angle_chess_deg = chessABIEncoder.getDegAngle();
 80037e0:	488b      	ldr	r0, [pc, #556]	; (8003a10 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80037e2:	f7fd f8e7 	bl	80009b4 <_ZN10AS5047UABI11getDegAngleEv>
 80037e6:	eef0 7a40 	vmov.f32	s15, s0
 80037ea:	4b8b      	ldr	r3, [pc, #556]	; (8003a18 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80037ec:	edc3 7a00 	vstr	s15, [r3]
//		current_angle = chessSPIEncoder.getRawRotation();
//		current_angle_map = chessSPIEncoder.read2angle(current_angle);
//		angle = current_angle_map - zero_position_map;
//		angle = chessSPIEncoder.normalize(angle);

		fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
 80037f0:	4b7d      	ldr	r3, [pc, #500]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80037f2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80037f6:	eeb0 0a67 	vmov.f32	s0, s15
 80037fa:	487b      	ldr	r0, [pc, #492]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80037fc:	f7fd fadb 	bl	8000db6 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint1.kalman_pos = fcb_joint1.X11;
 8003800:	4b79      	ldr	r3, [pc, #484]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003806:	4a78      	ldr	r2, [pc, #480]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003808:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint1.kalman_velo = fcb_joint1.X21;
 800380c:	4b76      	ldr	r3, [pc, #472]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800380e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003812:	4a75      	ldr	r2, [pc, #468]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003814:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint2.KalmanFillter(fcb_joint2.Encoder);
 8003818:	4b76      	ldr	r3, [pc, #472]	; (80039f4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800381a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800381e:	eeb0 0a67 	vmov.f32	s0, s15
 8003822:	4874      	ldr	r0, [pc, #464]	; (80039f4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003824:	f7fd fac7 	bl	8000db6 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint2.kalman_pos = fcb_joint2.X11;
 8003828:	4b72      	ldr	r3, [pc, #456]	; (80039f4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800382a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800382e:	4a71      	ldr	r2, [pc, #452]	; (80039f4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003830:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint2.kalman_velo = fcb_joint2.X21;
 8003834:	4b6f      	ldr	r3, [pc, #444]	; (80039f4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003836:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800383a:	4a6e      	ldr	r2, [pc, #440]	; (80039f4 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800383c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

		fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
 8003840:	4b6f      	ldr	r3, [pc, #444]	; (8003a00 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003842:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8003846:	eeb0 0a67 	vmov.f32	s0, s15
 800384a:	486d      	ldr	r0, [pc, #436]	; (8003a00 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800384c:	f7fd fab3 	bl	8000db6 <_ZN10RobotJoint13KalmanFillterEf>
		fcb_joint3.kalman_pos = fcb_joint3.X11;
 8003850:	4b6b      	ldr	r3, [pc, #428]	; (8003a00 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003852:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003856:	4a6a      	ldr	r2, [pc, #424]	; (8003a00 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003858:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
		fcb_joint3.kalman_velo = fcb_joint3.X21;
 800385c:	4b68      	ldr	r3, [pc, #416]	; (8003a00 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800385e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003862:	4a67      	ldr	r2, [pc, #412]	; (8003a00 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003864:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc


	}

	if (htim == &htim14) {
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a6c      	ldr	r2, [pc, #432]	; (8003a1c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800386c:	4293      	cmp	r3, r2
 800386e:	f040 843a 	bne.w	80040e6 <HAL_TIM_PeriodElapsedCallback+0xa4e>
//			fcb_joint4.Encoder = encoderJ4.getAngPos180() / -2.609 ;
//		}
		// #############################################################################

		// ######################## Setpoint ##########################################
		float t2 = t * t;
 8003872:	4b6b      	ldr	r3, [pc, #428]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003874:	ed93 7a00 	vldr	s14, [r3]
 8003878:	4b69      	ldr	r3, [pc, #420]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800387a:	edd3 7a00 	vldr	s15, [r3]
 800387e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003882:	edc7 7a07 	vstr	s15, [r7, #28]
		float t3 = t * t * t;
 8003886:	4b66      	ldr	r3, [pc, #408]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003888:	ed93 7a00 	vldr	s14, [r3]
 800388c:	4b64      	ldr	r3, [pc, #400]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800388e:	edd3 7a00 	vldr	s15, [r3]
 8003892:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003896:	4b62      	ldr	r3, [pc, #392]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003898:	edd3 7a00 	vldr	s15, [r3]
 800389c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a0:	edc7 7a06 	vstr	s15, [r7, #24]
		float t4 = t * t * t * t;
 80038a4:	4b5e      	ldr	r3, [pc, #376]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80038a6:	ed93 7a00 	vldr	s14, [r3]
 80038aa:	4b5d      	ldr	r3, [pc, #372]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80038ac:	edd3 7a00 	vldr	s15, [r3]
 80038b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038b4:	4b5a      	ldr	r3, [pc, #360]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80038b6:	edd3 7a00 	vldr	s15, [r3]
 80038ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038be:	4b58      	ldr	r3, [pc, #352]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80038c0:	edd3 7a00 	vldr	s15, [r3]
 80038c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c8:	edc7 7a05 	vstr	s15, [r7, #20]
		float t5 = t * t * t * t * t;
 80038cc:	4b54      	ldr	r3, [pc, #336]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80038ce:	ed93 7a00 	vldr	s14, [r3]
 80038d2:	4b53      	ldr	r3, [pc, #332]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80038d4:	edd3 7a00 	vldr	s15, [r3]
 80038d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038dc:	4b50      	ldr	r3, [pc, #320]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80038de:	edd3 7a00 	vldr	s15, [r3]
 80038e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038e6:	4b4e      	ldr	r3, [pc, #312]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80038e8:	edd3 7a00 	vldr	s15, [r3]
 80038ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038f0:	4b4b      	ldr	r3, [pc, #300]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80038f2:	edd3 7a00 	vldr	s15, [r3]
 80038f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038fa:	edc7 7a04 	vstr	s15, [r7, #16]
////	fcb_joint1.Goal_Position = fcb_X.q1;
//		fcb_joint3.Goal_Velocity = fcb_X.w_q3;
//		fcb_joint4.Goal_Velocity = fcb_X.w_q4;
////	fcb_joint3.Goal_Position = fcb_X.q3;

		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0 * fcb_joint1.C2 * t)
 80038fe:	4b3a      	ldr	r3, [pc, #232]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003900:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003904:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003908:	4b37      	ldr	r3, [pc, #220]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800390a:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 800390e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003912:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003916:	4b42      	ldr	r3, [pc, #264]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003918:	edd3 7a00 	vldr	s15, [r3]
 800391c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003920:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003924:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint1.C3 * t2) + (4.0 * fcb_joint1.C4 * t3)
 8003928:	4b2f      	ldr	r3, [pc, #188]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800392a:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 800392e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003932:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003936:	ee27 5b05 	vmul.f64	d5, d7, d5
 800393a:	edd7 7a07 	vldr	s15, [r7, #28]
 800393e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003942:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003946:	ee36 6b07 	vadd.f64	d6, d6, d7
 800394a:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800394c:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003950:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003954:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003958:	ee27 5b05 	vmul.f64	d5, d7, d5
 800395c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003960:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003964:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003968:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint1.C5 * t4);
 800396c:	4b1e      	ldr	r3, [pc, #120]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800396e:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003972:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003976:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 800397a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800397e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003982:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003986:	ee25 7b07 	vmul.f64	d7, d5, d7
 800398a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800398e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint1.Goal_Velocity = fcb_joint1.C1 + (2.0 * fcb_joint1.C2 * t)
 8003992:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003994:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1 * t)
 8003998:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800399a:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 800399e:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80039a0:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 80039a4:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80039a6:	edd3 7a00 	vldr	s15, [r3]
 80039aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039ae:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.C2 * t2) + (fcb_joint1.C3 * t3)
 80039b2:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80039b4:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 80039b8:	e034      	b.n	8003a24 <HAL_TIM_PeriodElapsedCallback+0x38c>
 80039ba:	bf00      	nop
 80039bc:	f3af 8000 	nop.w
 80039c0:	645a1cac 	.word	0x645a1cac
 80039c4:	4004df3b 	.word	0x4004df3b
 80039c8:	645a1cac 	.word	0x645a1cac
 80039cc:	c004df3b 	.word	0xc004df3b
 80039d0:	24000ecc 	.word	0x24000ecc
 80039d4:	24000af8 	.word	0x24000af8
 80039d8:	24000bec 	.word	0x24000bec
 80039dc:	2400112c 	.word	0x2400112c
 80039e0:	24000458 	.word	0x24000458
 80039e4:	24000adc 	.word	0x24000adc
 80039e8:	24000568 	.word	0x24000568
 80039ec:	24000474 	.word	0x24000474
 80039f0:	24000add 	.word	0x24000add
 80039f4:	2400064c 	.word	0x2400064c
 80039f8:	24000490 	.word	0x24000490
 80039fc:	24000ade 	.word	0x24000ade
 8003a00:	24000730 	.word	0x24000730
 8003a04:	240004ac 	.word	0x240004ac
 8003a08:	24000adf 	.word	0x24000adf
 8003a0c:	24000814 	.word	0x24000814
 8003a10:	24000ae0 	.word	0x24000ae0
 8003a14:	24000af0 	.word	0x24000af0
 8003a18:	24000af4 	.word	0x24000af4
 8003a1c:	24001094 	.word	0x24001094
 8003a20:	24000bf0 	.word	0x24000bf0
 8003a24:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a30:	4bdc      	ldr	r3, [pc, #880]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003a32:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003a36:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.C4 * t4) + (fcb_joint1.C5 * t5));
 8003a42:	4bd8      	ldr	r3, [pc, #864]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003a44:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003a48:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a54:	4bd3      	ldr	r3, [pc, #844]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003a56:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003a5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a62:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Goal_Position = (fcb_joint1.C0 + (fcb_joint1.C1 * t)
 8003a66:	4bcf      	ldr	r3, [pc, #828]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003a68:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0 * fcb_joint2.C2 * t)
 8003a6c:	4bce      	ldr	r3, [pc, #824]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003a6e:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003a72:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003a76:	4bcc      	ldr	r3, [pc, #816]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003a78:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003a7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a80:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003a84:	4bc9      	ldr	r3, [pc, #804]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003a86:	edd3 7a00 	vldr	s15, [r3]
 8003a8a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a8e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003a92:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint2.C3 * t2) + (4.0 * fcb_joint2.C4 * t3)
 8003a96:	4bc4      	ldr	r3, [pc, #784]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003a98:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003a9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003aa0:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003aa4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003aa8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003aac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ab0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ab4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ab8:	4bbb      	ldr	r3, [pc, #748]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003aba:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003abe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ac2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003ac6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003aca:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ace:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ad2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003ad6:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint2.C5 * t4);
 8003ada:	4bb3      	ldr	r3, [pc, #716]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003adc:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003ae0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ae4:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003ae8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003aec:	edd7 7a05 	vldr	s15, [r7, #20]
 8003af0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003af4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003af8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003afc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint2.Goal_Velocity = fcb_joint2.C1 + (2.0 * fcb_joint2.C2 * t)
 8003b00:	4ba9      	ldr	r3, [pc, #676]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003b02:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1 * t)
 8003b06:	4ba8      	ldr	r3, [pc, #672]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003b08:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003b0c:	4ba6      	ldr	r3, [pc, #664]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003b0e:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003b12:	4ba6      	ldr	r3, [pc, #664]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003b14:	edd3 7a00 	vldr	s15, [r3]
 8003b18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b1c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.C2 * t2) + (fcb_joint2.C3 * t3)
 8003b20:	4ba1      	ldr	r3, [pc, #644]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003b22:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003b26:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b32:	4b9d      	ldr	r3, [pc, #628]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003b34:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003b38:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b40:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.C4 * t4) + (fcb_joint2.C5 * t5));
 8003b44:	4b98      	ldr	r3, [pc, #608]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003b46:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003b4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b56:	4b94      	ldr	r3, [pc, #592]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003b58:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003b5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b64:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Goal_Position = (fcb_joint2.C0 + (fcb_joint2.C1 * t)
 8003b68:	4b8f      	ldr	r3, [pc, #572]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003b6a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0 * fcb_joint3.C2 * t)
 8003b6e:	4b90      	ldr	r3, [pc, #576]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b70:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003b74:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b78:	4b8d      	ldr	r3, [pc, #564]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b7a:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003b7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b82:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003b86:	4b89      	ldr	r3, [pc, #548]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003b88:	edd3 7a00 	vldr	s15, [r3]
 8003b8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b90:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003b94:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint3.C3 * t2) + (4.0 * fcb_joint3.C4 * t3)
 8003b98:	4b85      	ldr	r3, [pc, #532]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003b9a:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003b9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ba2:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003ba6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003baa:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bb2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003bb6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003bba:	4b7d      	ldr	r3, [pc, #500]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003bbc:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003bc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bc4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003bc8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003bcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bd4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003bd8:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint3.C5 * t4);
 8003bdc:	4b74      	ldr	r3, [pc, #464]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003bde:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003be2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003be6:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003bea:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003bee:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bf2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bf6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003bfa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003bfe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint3.Goal_Velocity = fcb_joint3.C1 + (2.0 * fcb_joint3.C2 * t)
 8003c02:	4b6b      	ldr	r3, [pc, #428]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c04:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1 * t)
 8003c08:	4b69      	ldr	r3, [pc, #420]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c0a:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003c0e:	4b68      	ldr	r3, [pc, #416]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c10:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003c14:	4b65      	ldr	r3, [pc, #404]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003c16:	edd3 7a00 	vldr	s15, [r3]
 8003c1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c1e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.C2 * t2) + (fcb_joint3.C3 * t3)
 8003c22:	4b63      	ldr	r3, [pc, #396]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c24:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003c28:	edd7 7a07 	vldr	s15, [r7, #28]
 8003c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c34:	4b5e      	ldr	r3, [pc, #376]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c36:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003c3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c42:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.C4 * t4) + (fcb_joint3.C5 * t5));
 8003c46:	4b5a      	ldr	r3, [pc, #360]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c48:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003c4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c58:	4b55      	ldr	r3, [pc, #340]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c5a:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003c5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c66:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Goal_Position = (fcb_joint3.C0 + (fcb_joint3.C1 * t)
 8003c6a:	4b51      	ldr	r3, [pc, #324]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003c6c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0 * fcb_joint4.C2 * t)
 8003c70:	4b50      	ldr	r3, [pc, #320]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c72:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 8003c76:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003c7a:	4b4e      	ldr	r3, [pc, #312]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c7c:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 8003c80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c84:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003c88:	4b48      	ldr	r3, [pc, #288]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003c8a:	edd3 7a00 	vldr	s15, [r3]
 8003c8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003c92:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003c96:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (3.0 * fcb_joint4.C3 * t2) + (4.0 * fcb_joint4.C4 * t3)
 8003c9a:	4b46      	ldr	r3, [pc, #280]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003c9c:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003ca0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ca4:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003ca8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003cac:	edd7 7a07 	vldr	s15, [r7, #28]
 8003cb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cb4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cb8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003cbc:	4b3d      	ldr	r3, [pc, #244]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003cbe:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003cc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cc6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8003cca:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003cce:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cd6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cda:	ee36 6b07 	vadd.f64	d6, d6, d7
				+ (5.0 * fcb_joint4.C5 * t4);
 8003cde:	4b35      	ldr	r3, [pc, #212]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003ce0:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8003ce4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ce8:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003cec:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003cf0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003cf8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003cfc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003d00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
		fcb_joint4.Goal_Velocity = fcb_joint4.C1 + (2.0 * fcb_joint4.C2 * t)
 8003d04:	4b2b      	ldr	r3, [pc, #172]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d06:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1 * t)
 8003d0a:	4b2a      	ldr	r3, [pc, #168]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d0c:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
 8003d10:	4b28      	ldr	r3, [pc, #160]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d12:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8003d16:	4b25      	ldr	r3, [pc, #148]	; (8003dac <HAL_TIM_PeriodElapsedCallback+0x714>)
 8003d18:	edd3 7a00 	vldr	s15, [r3]
 8003d1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d20:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint4.C2 * t2) + (fcb_joint4.C3 * t3)
 8003d24:	4b23      	ldr	r3, [pc, #140]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d26:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 8003d2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003d2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d36:	4b1f      	ldr	r3, [pc, #124]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d38:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003d3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d44:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint4.C4 * t4) + (fcb_joint4.C5 * t5));
 8003d48:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d4a:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8003d4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d5a:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d5c:	edd3 6a37 	vldr	s13, [r3, #220]	; 0xdc
 8003d60:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d68:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint4.Goal_Position = (fcb_joint4.C0 + (fcb_joint4.C1 * t)
 8003d6c:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <HAL_TIM_PeriodElapsedCallback+0x71c>)
 8003d6e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

		fcb_joint1.Kp_p = 0.4;
 8003d72:	4b0c      	ldr	r3, [pc, #48]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003d74:	4a10      	ldr	r2, [pc, #64]	; (8003db8 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8003d76:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint1.Ki_p = 0.0;
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint1.Kd_p = 0.0;
 8003d80:	4b08      	ldr	r3, [pc, #32]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint2.Kp_p = 0.03;
 8003d88:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003d8a:	4a0c      	ldr	r2, [pc, #48]	; (8003dbc <HAL_TIM_PeriodElapsedCallback+0x724>)
 8003d8c:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint2.Ki_p = 0.0;
 8003d8e:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint2.Kd_p = 0.0;
 8003d96:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	669a      	str	r2, [r3, #104]	; 0x68

		fcb_joint3.Kp_p = 0.15;
 8003d9e:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8003da0:	e00e      	b.n	8003dc0 <HAL_TIM_PeriodElapsedCallback+0x728>
 8003da2:	bf00      	nop
 8003da4:	24000568 	.word	0x24000568
 8003da8:	2400064c 	.word	0x2400064c
 8003dac:	24000bf0 	.word	0x24000bf0
 8003db0:	24000730 	.word	0x24000730
 8003db4:	24000814 	.word	0x24000814
 8003db8:	3ecccccd 	.word	0x3ecccccd
 8003dbc:	3cf5c28f 	.word	0x3cf5c28f
 8003dc0:	4a74      	ldr	r2, [pc, #464]	; (8003f94 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 8003dc2:	661a      	str	r2, [r3, #96]	; 0x60
		fcb_joint3.Ki_p = 0.0;
 8003dc4:	4b74      	ldr	r3, [pc, #464]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	665a      	str	r2, [r3, #100]	; 0x64
		fcb_joint3.Kd_p = 0.0;
 8003dcc:	4b72      	ldr	r3, [pc, #456]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	669a      	str	r2, [r3, #104]	; 0x68

//		fcb_joint3.Kp_v = 0.0; // 3.2
//		fcb_joint3.Ki_v = 0.0;
//		fcb_joint3.Kd_v = 0.0;

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.kalman_pos;
 8003dd4:	4b71      	ldr	r3, [pc, #452]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003dd6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003dda:	4b70      	ldr	r3, [pc, #448]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003ddc:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003de0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003de4:	4b6d      	ldr	r3, [pc, #436]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003de6:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.kalman_pos;
 8003dea:	4b6b      	ldr	r3, [pc, #428]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003dec:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003df0:	4b69      	ldr	r3, [pc, #420]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003df2:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dfa:	4b67      	ldr	r3, [pc, #412]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003dfc:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
//		fcb_joint1.Error_v = fcb_joint1.Goal_Velocity - fcb_joint1.kalman_velo;
//		fcb_joint3.Error_v = fcb_joint3.Goal_Velocity - fcb_joint3.kalman_velo;

		fcb_joint2.Error_p = fcb_joint2.Goal_Position - fcb_joint2.kalman_pos;
 8003e00:	4b67      	ldr	r3, [pc, #412]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003e02:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003e06:	4b66      	ldr	r3, [pc, #408]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003e08:	edd3 7a2e 	vldr	s15, [r3, #184]	; 0xb8
 8003e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e10:	4b63      	ldr	r3, [pc, #396]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003e12:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
//		fcb_joint2.Error_v = fcb_joint2.Goal_Velocity - fcb_joint2.kalman_velo;

		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 8003e16:	4b61      	ldr	r3, [pc, #388]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003e18:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003e1c:	4b5f      	ldr	r3, [pc, #380]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003e1e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e26:	4b5d      	ldr	r3, [pc, #372]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003e28:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8003e2c:	4b5a      	ldr	r3, [pc, #360]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003e2e:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003e32:	4b59      	ldr	r3, [pc, #356]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003e34:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e3c:	4b56      	ldr	r3, [pc, #344]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003e3e:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
//		fcb_joint1.Sum_Error_v += fcb_joint1.Error_v;
//		fcb_joint3.Sum_Error_v += fcb_joint3.Error_v;

		fcb_joint2.Sum_Error_p += fcb_joint2.Error_p;
 8003e42:	4b57      	ldr	r3, [pc, #348]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003e44:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8003e48:	4b55      	ldr	r3, [pc, #340]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003e4a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e52:	4b53      	ldr	r3, [pc, #332]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003e54:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
//		fcb_joint2.Sum_Error_v += fcb_joint2.Error_v;

		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity
 8003e58:	4b50      	ldr	r3, [pc, #320]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003e5a:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint1.Kp_p * fcb_joint1.Error_p)
 8003e5e:	4b4f      	ldr	r3, [pc, #316]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003e60:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003e64:	4b4d      	ldr	r3, [pc, #308]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003e66:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e6e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Ki_p * fcb_joint1.Sum_Error_p)
 8003e72:	4b4a      	ldr	r3, [pc, #296]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003e74:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8003e78:	4b48      	ldr	r3, [pc, #288]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003e7a:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003e7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e82:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint1.Kd_p * (fcb_joint1.Error_p - fcb_joint1.Old_p));
 8003e86:	4b45      	ldr	r3, [pc, #276]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003e88:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003e8c:	4b43      	ldr	r3, [pc, #268]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003e8e:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8003e92:	4b42      	ldr	r3, [pc, #264]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003e94:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003e98:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint1.Output_Joint_W = fcb_joint1.Goal_Velocity
 8003ea4:	4b3d      	ldr	r3, [pc, #244]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003ea6:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
//				+ (fcb_joint1.Kp_v * fcb_joint1.Error_v)
//				+ (fcb_joint1.Ki_v * fcb_joint1.Sum_Error_v)
//				+ (fcb_joint1.Kd_v * (fcb_joint1.Error_v - fcb_joint1.Old_v));

		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity)
 8003eaa:	4b3d      	ldr	r3, [pc, #244]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003eac:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint2.Kp_p * fcb_joint2.Error_p)
 8003eb0:	4b3b      	ldr	r3, [pc, #236]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003eb2:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003eb6:	4b3a      	ldr	r3, [pc, #232]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003eb8:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003ebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ec0:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Ki_p * fcb_joint2.Sum_Error_p)
 8003ec4:	4b36      	ldr	r3, [pc, #216]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003ec6:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8003eca:	4b35      	ldr	r3, [pc, #212]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003ecc:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint2.Kd_p * (fcb_joint2.Error_p - fcb_joint2.Old_p));
 8003ed8:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003eda:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003ede:	4b30      	ldr	r3, [pc, #192]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003ee0:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8003ee4:	4b2e      	ldr	r3, [pc, #184]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003ee6:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003eea:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint2.Output_Joint_W = (fcb_joint2.Goal_Velocity)
 8003ef6:	4b2a      	ldr	r3, [pc, #168]	; (8003fa0 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8003ef8:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
//				+ (fcb_joint2.Kp_v * fcb_joint2.Error_v)
//				+ (fcb_joint2.Ki_v * fcb_joint2.Sum_Error_v)
//				+ (fcb_joint2.Kd_v * (fcb_joint2.Error_v - fcb_joint2.Old_v));

		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity)
 8003efc:	4b26      	ldr	r3, [pc, #152]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003efe:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
				+ (fcb_joint3.Kp_p * fcb_joint3.Error_p)
 8003f02:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003f04:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8003f08:	4b23      	ldr	r3, [pc, #140]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003f0a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003f0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f12:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Ki_p * fcb_joint3.Sum_Error_p)
 8003f16:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003f18:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8003f1c:	4b1e      	ldr	r3, [pc, #120]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003f1e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8003f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f26:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_p));
 8003f2a:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003f2c:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8003f30:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003f32:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8003f36:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003f38:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8003f3c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f44:	ee77 7a27 	vadd.f32	s15, s14, s15
		fcb_joint3.Output_Joint_W = (fcb_joint3.Goal_Velocity)
 8003f48:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003f4a:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
//				+ (fcb_joint3.Kp_v * fcb_joint3.Error_v)
//				+ (fcb_joint3.Ki_v * fcb_joint3.Sum_Error_v)
//				+ (fcb_joint3.Kd_v * (fcb_joint3.Error_v - fcb_joint3.Old_v));

		if (joint13_on) {
 8003f4e:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <HAL_TIM_PeriodElapsedCallback+0x90c>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d033      	beq.n	8003fc0 <HAL_TIM_PeriodElapsedCallback+0x928>
			stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Output_Joint_W);
 8003f58:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x904>)
 8003f5a:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8003f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f62:	4811      	ldr	r0, [pc, #68]	; (8003fa8 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8003f64:	f7fe f910 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(0.0);
 8003f68:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8003fbc <HAL_TIM_PeriodElapsedCallback+0x924>
 8003f6c:	480f      	ldr	r0, [pc, #60]	; (8003fac <HAL_TIM_PeriodElapsedCallback+0x914>)
 8003f6e:	f7fe f90b 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(fcb_joint3.Output_Joint_W);
 8003f72:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8003f74:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8003f78:	eeb0 0a67 	vmov.f32	s0, s15
 8003f7c:	480c      	ldr	r0, [pc, #48]	; (8003fb0 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8003f7e:	f7fe f903 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ4.StepperOpenLoopSpeedM(fcb_joint4.Goal_Velocity);
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <HAL_TIM_PeriodElapsedCallback+0x91c>)
 8003f84:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003f88:	eeb0 0a67 	vmov.f32	s0, s15
 8003f8c:	480a      	ldr	r0, [pc, #40]	; (8003fb8 <HAL_TIM_PeriodElapsedCallback+0x920>)
 8003f8e:	f7fe f8fb 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
 8003f92:	e02c      	b.n	8003fee <HAL_TIM_PeriodElapsedCallback+0x956>
 8003f94:	3e19999a 	.word	0x3e19999a
 8003f98:	24000730 	.word	0x24000730
 8003f9c:	24000568 	.word	0x24000568
 8003fa0:	2400064c 	.word	0x2400064c
 8003fa4:	24000b3e 	.word	0x24000b3e
 8003fa8:	240004c8 	.word	0x240004c8
 8003fac:	240004f0 	.word	0x240004f0
 8003fb0:	24000518 	.word	0x24000518
 8003fb4:	24000814 	.word	0x24000814
 8003fb8:	24000540 	.word	0x24000540
 8003fbc:	00000000 	.word	0x00000000
		} else {
			stepperJ1.StepperOpenLoopSpeedM(0.0);
 8003fc0:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 8003fbc <HAL_TIM_PeriodElapsedCallback+0x924>
 8003fc4:	4894      	ldr	r0, [pc, #592]	; (8004218 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 8003fc6:	f7fe f8df 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ3.StepperOpenLoopSpeedM(0.0);
 8003fca:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800421c <HAL_TIM_PeriodElapsedCallback+0xb84>
 8003fce:	4894      	ldr	r0, [pc, #592]	; (8004220 <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8003fd0:	f7fe f8da 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
 8003fd4:	4b93      	ldr	r3, [pc, #588]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8003fd6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003fda:	eeb0 0a67 	vmov.f32	s0, s15
 8003fde:	4892      	ldr	r0, [pc, #584]	; (8004228 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8003fe0:	f7fe f8d2 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
			stepperJ4.StepperOpenLoopSpeedM(0.0);
 8003fe4:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 800421c <HAL_TIM_PeriodElapsedCallback+0xb84>
 8003fe8:	4890      	ldr	r0, [pc, #576]	; (800422c <HAL_TIM_PeriodElapsedCallback+0xb94>)
 8003fea:	f7fe f8cd 	bl	8002188 <_ZN7Stepper21StepperOpenLoopSpeedMEf>
//		stepperJ1.StepperOpenLoopSpeedM(fcb_joint1.Goal_Velocity);
//		stepperJ2.StepperOpenLoopSpeedM(fcb_joint2.Goal_Velocity);
//		stepperJ3.StepperOpenLoopSpeedM(0);


		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 8003fee:	4b90      	ldr	r3, [pc, #576]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8003ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ff2:	4a8f      	ldr	r2, [pc, #572]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8003ff4:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint2.Old_Error_p = fcb_joint2.Error_p;
 8003ff6:	4b8b      	ldr	r3, [pc, #556]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8003ff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ffa:	4a8a      	ldr	r2, [pc, #552]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8003ffc:	67d3      	str	r3, [r2, #124]	; 0x7c
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 8003ffe:	4b8d      	ldr	r3, [pc, #564]	; (8004234 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8004000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004002:	4a8c      	ldr	r2, [pc, #560]	; (8004234 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8004004:	67d3      	str	r3, [r2, #124]	; 0x7c
//		fcb_joint1.Old_Error_v = fcb_joint1.Error_v;
//		fcb_joint2.Old_Error_v = fcb_joint2.Error_v;
//		fcb_joint3.Old_Error_v = fcb_joint3.Error_v;

		fcb_joint1.Old_p = fcb_joint1.kalman_pos;
 8004006:	4b8a      	ldr	r3, [pc, #552]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8004008:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800400c:	4a88      	ldr	r2, [pc, #544]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 800400e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint3.Old_p = fcb_joint3.kalman_pos;
 8004012:	4b88      	ldr	r3, [pc, #544]	; (8004234 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8004014:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004018:	4a86      	ldr	r2, [pc, #536]	; (8004234 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 800401a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_p = fcb_joint2.kalman_pos;
 800401e:	4b81      	ldr	r3, [pc, #516]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8004020:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004024:	4a7f      	ldr	r2, [pc, #508]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8004026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		fcb_joint2.Old_v = fcb_joint2.kalman_velo;
 800402a:	4b7e      	ldr	r3, [pc, #504]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 800402c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004030:	4a7c      	ldr	r2, [pc, #496]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8004032:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint1.Old_v = fcb_joint1.kalman_velo;
 8004036:	4b7e      	ldr	r3, [pc, #504]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8004038:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800403c:	4a7c      	ldr	r2, [pc, #496]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 800403e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		fcb_joint3.Old_v = fcb_joint1.kalman_velo;
 8004042:	4b7b      	ldr	r3, [pc, #492]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8004044:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004048:	4a7a      	ldr	r2, [pc, #488]	; (8004234 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 800404a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

		t = t + sample_time_500;
 800404e:	4b7a      	ldr	r3, [pc, #488]	; (8004238 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8004050:	ed93 7a00 	vldr	s14, [r3]
 8004054:	4b79      	ldr	r3, [pc, #484]	; (800423c <HAL_TIM_PeriodElapsedCallback+0xba4>)
 8004056:	edd3 7a00 	vldr	s15, [r3]
 800405a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800405e:	4b76      	ldr	r3, [pc, #472]	; (8004238 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8004060:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Max_Time) {
 8004064:	4b74      	ldr	r3, [pc, #464]	; (8004238 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8004066:	ed93 7a00 	vldr	s14, [r3]
 800406a:	4b75      	ldr	r3, [pc, #468]	; (8004240 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 800406c:	edd3 7a00 	vldr	s15, [r3]
 8004070:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004078:	bfac      	ite	ge
 800407a:	2301      	movge	r3, #1
 800407c:	2300      	movlt	r3, #0
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d030      	beq.n	80040e6 <HAL_TIM_PeriodElapsedCallback+0xa4e>
			t = (int) 0;
 8004084:	4b6c      	ldr	r3, [pc, #432]	; (8004238 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
			fcb_joint1.Sum_Error_p = 0;
 800408c:	4b68      	ldr	r3, [pc, #416]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint2.Sum_Error_p = 0;
 8004096:	4b63      	ldr	r3, [pc, #396]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			fcb_joint3.Sum_Error_p = 0;
 80040a0:	4b64      	ldr	r3, [pc, #400]	; (8004234 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

//			fcb_joint1.Sum_Error_v = 0;
//			fcb_joint2.Sum_Error_v = 0;
//			fcb_joint3.Sum_Error_v = 0;

			fcb_joint1.Old_Error_p = 0;
 80040aa:	4b61      	ldr	r3, [pc, #388]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint2.Old_Error_p = 0;
 80040b2:	4b5c      	ldr	r3, [pc, #368]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	67da      	str	r2, [r3, #124]	; 0x7c
			fcb_joint3.Old_Error_p = 0;
 80040ba:	4b5e      	ldr	r3, [pc, #376]	; (8004234 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	67da      	str	r2, [r3, #124]	; 0x7c

//			fcb_joint1.Old_Error_v = 0;
//			fcb_joint2.Old_Error_v = 0;
//			fcb_joint3.Old_Error_v = 0;

			fcb_joint1.Old_p = 0;
 80040c2:	4b5b      	ldr	r3, [pc, #364]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint2.Old_p = 0;
 80040cc:	4b55      	ldr	r3, [pc, #340]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			fcb_joint3.Old_p = 0;
 80040d6:	4b57      	ldr	r3, [pc, #348]	; (8004234 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

//			fcb_joint1.Old_v = 0;
//			fcb_joint2.Old_v = 0;
//			fcb_joint3.Old_v = 0;
			State_FIN = true;
 80040e0:	4b58      	ldr	r3, [pc, #352]	; (8004244 <HAL_TIM_PeriodElapsedCallback+0xbac>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	701a      	strb	r2, [r3, #0]
		}

	}
	if (htim == &htim17) {
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a57      	ldr	r2, [pc, #348]	; (8004248 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	f040 808f 	bne.w	800420e <HAL_TIM_PeriodElapsedCallback+0xb76>
//				(uint8_t) (((int32_t) fcb_joint2.Encoder >> 16) & 0xFF),
//				(uint8_t) (((int32_t) fcb_joint2.Encoder >> 8) & 0xFF),
//				(uint8_t) (((int32_t) fcb_joint2.Encoder) & 0xFF), };
		uint8_t encoder_state[8] =
				{
				(uint8_t) (((int16_t) (fcb_joint3.Encoder/10.0) >> 8) & 0xFF),
 80040f0:	4b50      	ldr	r3, [pc, #320]	; (8004234 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 80040f2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80040f6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80040fa:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80040fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004102:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004106:	ee17 3a90 	vmov	r3, s15
 800410a:	b21b      	sxth	r3, r3
 800410c:	121b      	asrs	r3, r3, #8
 800410e:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0) >> 8) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0)) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0) >> 8) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0)) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0) >> 8) & 0xFF),
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 8004110:	b2db      	uxtb	r3, r3
 8004112:	723b      	strb	r3, [r7, #8]
				(uint8_t) (((int16_t) (fcb_joint3.Encoder/10.0)) & 0xFF),
 8004114:	4b47      	ldr	r3, [pc, #284]	; (8004234 <HAL_TIM_PeriodElapsedCallback+0xb9c>)
 8004116:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800411a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800411e:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004122:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004126:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800412a:	ee17 3a90 	vmov	r3, s15
 800412e:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 8004130:	b2db      	uxtb	r3, r3
 8004132:	727b      	strb	r3, [r7, #9]
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0) >> 8) & 0xFF),
 8004134:	4b45      	ldr	r3, [pc, #276]	; (800424c <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 8004136:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800413a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800413e:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004142:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004146:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800414a:	ee17 3a90 	vmov	r3, s15
 800414e:	b21b      	sxth	r3, r3
 8004150:	121b      	asrs	r3, r3, #8
 8004152:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 8004154:	b2db      	uxtb	r3, r3
 8004156:	72bb      	strb	r3, [r7, #10]
				(uint8_t) (((int16_t) (fcb_joint4.Encoder/10.0)) & 0xFF),
 8004158:	4b3c      	ldr	r3, [pc, #240]	; (800424c <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 800415a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800415e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004162:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004166:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800416a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800416e:	ee17 3a90 	vmov	r3, s15
 8004172:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 8004174:	b2db      	uxtb	r3, r3
 8004176:	72fb      	strb	r3, [r7, #11]
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0) >> 8) & 0xFF),
 8004178:	4b2d      	ldr	r3, [pc, #180]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 800417a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800417e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004182:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8004186:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800418a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800418e:	ee17 3a90 	vmov	r3, s15
 8004192:	b21b      	sxth	r3, r3
 8004194:	121b      	asrs	r3, r3, #8
 8004196:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 8004198:	b2db      	uxtb	r3, r3
 800419a:	733b      	strb	r3, [r7, #12]
				(uint8_t) (((int16_t) (fcb_joint1.Encoder/10.0)) & 0xFF),
 800419c:	4b24      	ldr	r3, [pc, #144]	; (8004230 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 800419e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80041a2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80041a6:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80041aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80041ae:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80041b2:	ee17 3a90 	vmov	r3, s15
 80041b6:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	737b      	strb	r3, [r7, #13]
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0) >> 8) & 0xFF),
 80041bc:	4b19      	ldr	r3, [pc, #100]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 80041be:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80041c2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80041c6:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80041ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80041ce:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80041d2:	ee17 3a90 	vmov	r3, s15
 80041d6:	b21b      	sxth	r3, r3
 80041d8:	121b      	asrs	r3, r3, #8
 80041da:	b21b      	sxth	r3, r3
				(uint8_t) (((int16_t) (fcb_joint2.Encoder/10.0)) & 0xFF), };
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	73bb      	strb	r3, [r7, #14]
 80041e0:	4b10      	ldr	r3, [pc, #64]	; (8004224 <HAL_TIM_PeriodElapsedCallback+0xb8c>)
 80041e2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80041e6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80041ea:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80041ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80041f2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80041f6:	ee17 3a90 	vmov	r3, s15
 80041fa:	b21b      	sxth	r3, r3
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	73fb      	strb	r3, [r7, #15]

		HAL_UART_Transmit_DMA(&huart2, (uint8_t*) &encoder_state, 8);
 8004200:	f107 0308 	add.w	r3, r7, #8
 8004204:	2208      	movs	r2, #8
 8004206:	4619      	mov	r1, r3
 8004208:	4811      	ldr	r0, [pc, #68]	; (8004250 <HAL_TIM_PeriodElapsedCallback+0xbb8>)
 800420a:	f00a fd69 	bl	800ece0 <HAL_UART_Transmit_DMA>
	}
}
 800420e:	bf00      	nop
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	240004c8 	.word	0x240004c8
 800421c:	00000000 	.word	0x00000000
 8004220:	24000518 	.word	0x24000518
 8004224:	2400064c 	.word	0x2400064c
 8004228:	240004f0 	.word	0x240004f0
 800422c:	24000540 	.word	0x24000540
 8004230:	24000568 	.word	0x24000568
 8004234:	24000730 	.word	0x24000730
 8004238:	24000bf0 	.word	0x24000bf0
 800423c:	24000214 	.word	0x24000214
 8004240:	24000afc 	.word	0x24000afc
 8004244:	24000af8 	.word	0x24000af8
 8004248:	24001178 	.word	0x24001178
 800424c:	24000814 	.word	0x24000814
 8004250:	240012e4 	.word	0x240012e4
 8004254:	00000000 	.word	0x00000000

08004258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800425c:	f002 fbf8 	bl	8006a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004260:	f000 fab6 	bl	80047d0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004264:	f7fe f88c 	bl	8002380 <MX_GPIO_Init>
  MX_DMA_Init();
 8004268:	f7fe f81a 	bl	80022a0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800426c:	f002 f88a 	bl	8006384 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8004270:	f001 f8f2 	bl	8005458 <MX_TIM2_Init>
  MX_UART4_Init();
 8004274:	f001 ff98 	bl	80061a8 <MX_UART4_Init>
  MX_TIM4_Init();
 8004278:	f001 f9de 	bl	8005638 <MX_TIM4_Init>
  MX_SPI3_Init();
 800427c:	f000 fc6e 	bl	8004b5c <MX_SPI3_Init>
  MX_TIM1_Init();
 8004280:	f001 f83c 	bl	80052fc <MX_TIM1_Init>
  MX_TIM3_Init();
 8004284:	f001 f960 	bl	8005548 <MX_TIM3_Init>
  MX_TIM5_Init();
 8004288:	f001 fa4e 	bl	8005728 <MX_TIM5_Init>
  MX_TIM15_Init();
 800428c:	f001 fbe2 	bl	8005a54 <MX_TIM15_Init>
  MX_CRC_Init();
 8004290:	f7fd ffb6 	bl	8002200 <MX_CRC_Init>
  MX_UART7_Init();
 8004294:	f001 ffdc 	bl	8006250 <MX_UART7_Init>
  MX_TIM6_Init();
 8004298:	f001 fa94 	bl	80057c4 <MX_TIM6_Init>
  MX_TIM7_Init();
 800429c:	f001 fac8 	bl	8005830 <MX_TIM7_Init>
  MX_TIM12_Init();
 80042a0:	f001 fb56 	bl	8005950 <MX_TIM12_Init>
  MX_TIM13_Init();
 80042a4:	f001 fb8e 	bl	80059c4 <MX_TIM13_Init>
  MX_TIM14_Init();
 80042a8:	f001 fbb0 	bl	8005a0c <MX_TIM14_Init>
  MX_TIM16_Init();
 80042ac:	f001 fc76 	bl	8005b9c <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80042b0:	f002 f81c 	bl	80062ec <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80042b4:	f001 fc98 	bl	8005be8 <MX_TIM17_Init>
  MX_TIM8_Init();
 80042b8:	f001 faf0 	bl	800589c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 80042bc:	2214      	movs	r2, #20
 80042be:	496a      	ldr	r1, [pc, #424]	; (8004468 <main+0x210>)
 80042c0:	486a      	ldr	r0, [pc, #424]	; (800446c <main+0x214>)
 80042c2:	f00c fc72 	bl	8010baa <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80042c6:	4b6a      	ldr	r3, [pc, #424]	; (8004470 <main+0x218>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a6a      	ldr	r2, [pc, #424]	; (8004474 <main+0x21c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d04a      	beq.n	8004366 <main+0x10e>
 80042d0:	4b67      	ldr	r3, [pc, #412]	; (8004470 <main+0x218>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a68      	ldr	r2, [pc, #416]	; (8004478 <main+0x220>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d045      	beq.n	8004366 <main+0x10e>
 80042da:	4b65      	ldr	r3, [pc, #404]	; (8004470 <main+0x218>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a67      	ldr	r2, [pc, #412]	; (800447c <main+0x224>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d040      	beq.n	8004366 <main+0x10e>
 80042e4:	4b62      	ldr	r3, [pc, #392]	; (8004470 <main+0x218>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a65      	ldr	r2, [pc, #404]	; (8004480 <main+0x228>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d03b      	beq.n	8004366 <main+0x10e>
 80042ee:	4b60      	ldr	r3, [pc, #384]	; (8004470 <main+0x218>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a64      	ldr	r2, [pc, #400]	; (8004484 <main+0x22c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d036      	beq.n	8004366 <main+0x10e>
 80042f8:	4b5d      	ldr	r3, [pc, #372]	; (8004470 <main+0x218>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a62      	ldr	r2, [pc, #392]	; (8004488 <main+0x230>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d031      	beq.n	8004366 <main+0x10e>
 8004302:	4b5b      	ldr	r3, [pc, #364]	; (8004470 <main+0x218>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a61      	ldr	r2, [pc, #388]	; (800448c <main+0x234>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d02c      	beq.n	8004366 <main+0x10e>
 800430c:	4b58      	ldr	r3, [pc, #352]	; (8004470 <main+0x218>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a5f      	ldr	r2, [pc, #380]	; (8004490 <main+0x238>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d027      	beq.n	8004366 <main+0x10e>
 8004316:	4b56      	ldr	r3, [pc, #344]	; (8004470 <main+0x218>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a5e      	ldr	r2, [pc, #376]	; (8004494 <main+0x23c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d022      	beq.n	8004366 <main+0x10e>
 8004320:	4b53      	ldr	r3, [pc, #332]	; (8004470 <main+0x218>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a5c      	ldr	r2, [pc, #368]	; (8004498 <main+0x240>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d01d      	beq.n	8004366 <main+0x10e>
 800432a:	4b51      	ldr	r3, [pc, #324]	; (8004470 <main+0x218>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a5b      	ldr	r2, [pc, #364]	; (800449c <main+0x244>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d018      	beq.n	8004366 <main+0x10e>
 8004334:	4b4e      	ldr	r3, [pc, #312]	; (8004470 <main+0x218>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a59      	ldr	r2, [pc, #356]	; (80044a0 <main+0x248>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d013      	beq.n	8004366 <main+0x10e>
 800433e:	4b4c      	ldr	r3, [pc, #304]	; (8004470 <main+0x218>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a58      	ldr	r2, [pc, #352]	; (80044a4 <main+0x24c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00e      	beq.n	8004366 <main+0x10e>
 8004348:	4b49      	ldr	r3, [pc, #292]	; (8004470 <main+0x218>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a56      	ldr	r2, [pc, #344]	; (80044a8 <main+0x250>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d009      	beq.n	8004366 <main+0x10e>
 8004352:	4b47      	ldr	r3, [pc, #284]	; (8004470 <main+0x218>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a55      	ldr	r2, [pc, #340]	; (80044ac <main+0x254>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d004      	beq.n	8004366 <main+0x10e>
 800435c:	4b44      	ldr	r3, [pc, #272]	; (8004470 <main+0x218>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a53      	ldr	r2, [pc, #332]	; (80044b0 <main+0x258>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d108      	bne.n	8004378 <main+0x120>
 8004366:	4b42      	ldr	r3, [pc, #264]	; (8004470 <main+0x218>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4b40      	ldr	r3, [pc, #256]	; (8004470 <main+0x218>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f022 0208 	bic.w	r2, r2, #8
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	e007      	b.n	8004388 <main+0x130>
 8004378:	4b3d      	ldr	r3, [pc, #244]	; (8004470 <main+0x218>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4b3c      	ldr	r3, [pc, #240]	; (8004470 <main+0x218>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0204 	bic.w	r2, r2, #4
 8004386:	601a      	str	r2, [r3, #0]

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8004388:	2201      	movs	r2, #1
 800438a:	2101      	movs	r1, #1
 800438c:	4849      	ldr	r0, [pc, #292]	; (80044b4 <main+0x25c>)
 800438e:	f005 ff27 	bl	800a1e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8004392:	2201      	movs	r2, #1
 8004394:	2102      	movs	r1, #2
 8004396:	4848      	ldr	r0, [pc, #288]	; (80044b8 <main+0x260>)
 8004398:	f005 ff22 	bl	800a1e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800439c:	2200      	movs	r2, #0
 800439e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043a2:	4844      	ldr	r0, [pc, #272]	; (80044b4 <main+0x25c>)
 80043a4:	f005 ff1c 	bl	800a1e0 <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 80043a8:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80044dc <main+0x284>
 80043ac:	4843      	ldr	r0, [pc, #268]	; (80044bc <main+0x264>)
 80043ae:	f7fd fc37 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 80043b2:	2108      	movs	r1, #8
 80043b4:	4841      	ldr	r0, [pc, #260]	; (80044bc <main+0x264>)
 80043b6:	f7fd fecf 	bl	8002158 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 80043ba:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80044c0 <main+0x268>
 80043be:	483f      	ldr	r0, [pc, #252]	; (80044bc <main+0x264>)
 80043c0:	f7fd fea6 	bl	8002110 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 80043c4:	483d      	ldr	r0, [pc, #244]	; (80044bc <main+0x264>)
 80043c6:	f7fd fc1a 	bl	8001bfe <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 80043ca:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80044dc <main+0x284>
 80043ce:	483d      	ldr	r0, [pc, #244]	; (80044c4 <main+0x26c>)
 80043d0:	f7fd fc26 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(16);
 80043d4:	2110      	movs	r1, #16
 80043d6:	483b      	ldr	r0, [pc, #236]	; (80044c4 <main+0x26c>)
 80043d8:	f7fd febe 	bl	8002158 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 80043dc:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80043e0:	4838      	ldr	r0, [pc, #224]	; (80044c4 <main+0x26c>)
 80043e2:	f7fd fe95 	bl	8002110 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 80043e6:	4837      	ldr	r0, [pc, #220]	; (80044c4 <main+0x26c>)
 80043e8:	f7fd fc09 	bl	8001bfe <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 80043ec:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 80044dc <main+0x284>
 80043f0:	4835      	ldr	r0, [pc, #212]	; (80044c8 <main+0x270>)
 80043f2:	f7fd fc15 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 80043f6:	2110      	movs	r1, #16
 80043f8:	4833      	ldr	r0, [pc, #204]	; (80044c8 <main+0x270>)
 80043fa:	f7fd fead 	bl	8002158 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 80043fe:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 8004402:	4831      	ldr	r0, [pc, #196]	; (80044c8 <main+0x270>)
 8004404:	f7fd fe84 	bl	8002110 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 8004408:	482f      	ldr	r0, [pc, #188]	; (80044c8 <main+0x270>)
 800440a:	f7fd fbf8 	bl	8001bfe <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 800440e:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80044dc <main+0x284>
 8004412:	482e      	ldr	r0, [pc, #184]	; (80044cc <main+0x274>)
 8004414:	f7fd fc04 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(16);
 8004418:	2110      	movs	r1, #16
 800441a:	482c      	ldr	r0, [pc, #176]	; (80044cc <main+0x274>)
 800441c:	f7fd fe9c 	bl	8002158 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 8004420:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004424:	4829      	ldr	r0, [pc, #164]	; (80044cc <main+0x274>)
 8004426:	f7fd fe73 	bl	8002110 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 800442a:	4828      	ldr	r0, [pc, #160]	; (80044cc <main+0x274>)
 800442c:	f7fd fbe7 	bl	8001bfe <_ZN7Stepper13StepperEnableEv>

//	gripper.setDegreeGripperClose(80);
	gripper.setDegreeGripperClose(145);
 8004430:	2191      	movs	r1, #145	; 0x91
 8004432:	4827      	ldr	r0, [pc, #156]	; (80044d0 <main+0x278>)
 8004434:	f7fd fb2d 	bl	8001a92 <_ZN10ServoMotor21setDegreeGripperCloseEl>
//	gripper.setDegreeGripperClose(40);
	gripper.setDegreeGripperOpen(57);
 8004438:	2139      	movs	r1, #57	; 0x39
 800443a:	4825      	ldr	r0, [pc, #148]	; (80044d0 <main+0x278>)
 800443c:	f7fd fb18 	bl	8001a70 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	gripper.ServoEnable();
 8004440:	4823      	ldr	r0, [pc, #140]	; (80044d0 <main+0x278>)
 8004442:	f7fd f941 	bl	80016c8 <_ZN10ServoMotor11ServoEnableEv>
	gripper.GripperClose();
 8004446:	4822      	ldr	r0, [pc, #136]	; (80044d0 <main+0x278>)
 8004448:	f7fd fb34 	bl	8001ab4 <_ZN10ServoMotor12GripperCloseEv>
	while (!Limit_sw_Z_Top) {
 800444c:	4b21      	ldr	r3, [pc, #132]	; (80044d4 <main+0x27c>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f083 0301 	eor.w	r3, r3, #1
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d041      	beq.n	80044e0 <main+0x288>
		stepperJ2.StepperSetFrequency(1200.0f);
 800445c:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80044d8 <main+0x280>
 8004460:	4818      	ldr	r0, [pc, #96]	; (80044c4 <main+0x26c>)
 8004462:	f7fd fbdd 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	while (!Limit_sw_Z_Top) {
 8004466:	e7f1      	b.n	800444c <main+0x1f4>
 8004468:	24000b24 	.word	0x24000b24
 800446c:	24001374 	.word	0x24001374
 8004470:	2400165c 	.word	0x2400165c
 8004474:	40020010 	.word	0x40020010
 8004478:	40020028 	.word	0x40020028
 800447c:	40020040 	.word	0x40020040
 8004480:	40020058 	.word	0x40020058
 8004484:	40020070 	.word	0x40020070
 8004488:	40020088 	.word	0x40020088
 800448c:	400200a0 	.word	0x400200a0
 8004490:	400200b8 	.word	0x400200b8
 8004494:	40020410 	.word	0x40020410
 8004498:	40020428 	.word	0x40020428
 800449c:	40020440 	.word	0x40020440
 80044a0:	40020458 	.word	0x40020458
 80044a4:	40020470 	.word	0x40020470
 80044a8:	40020488 	.word	0x40020488
 80044ac:	400204a0 	.word	0x400204a0
 80044b0:	400204b8 	.word	0x400204b8
 80044b4:	58020400 	.word	0x58020400
 80044b8:	58021000 	.word	0x58021000
 80044bc:	240004c8 	.word	0x240004c8
 80044c0:	42280000 	.word	0x42280000
 80044c4:	240004f0 	.word	0x240004f0
 80044c8:	24000518 	.word	0x24000518
 80044cc:	24000540 	.word	0x24000540
 80044d0:	24000ac0 	.word	0x24000ac0
 80044d4:	24000b3b 	.word	0x24000b3b
 80044d8:	44960000 	.word	0x44960000
 80044dc:	00000000 	.word	0x00000000
	}
	stepperJ2.StepperSetFrequency(0.0f);
 80044e0:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 80044dc <main+0x284>
 80044e4:	489e      	ldr	r0, [pc, #632]	; (8004760 <main+0x508>)
 80044e6:	f7fd fb9b 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(200);
 80044ea:	20c8      	movs	r0, #200	; 0xc8
 80044ec:	f002 fb42 	bl	8006b74 <HAL_Delay>
	stepperJ2.StepperSetFrequency(-800.0f);
 80044f0:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 8004764 <main+0x50c>
 80044f4:	489a      	ldr	r0, [pc, #616]	; (8004760 <main+0x508>)
 80044f6:	f7fd fb93 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(2000);
 80044fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80044fe:	f002 fb39 	bl	8006b74 <HAL_Delay>
	stepperJ2.StepperSetFrequency(0.0f);
 8004502:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8004768 <main+0x510>
 8004506:	4896      	ldr	r0, [pc, #600]	; (8004760 <main+0x508>)
 8004508:	f7fd fb8a 	bl	8001c20 <_ZN7Stepper19StepperSetFrequencyEf>
	HAL_Delay(1000);
 800450c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004510:	f002 fb30 	bl	8006b74 <HAL_Delay>
	gripper.GripperOpen();
 8004514:	4895      	ldr	r0, [pc, #596]	; (800476c <main+0x514>)
 8004516:	f7fd fae3 	bl	8001ae0 <_ZN10ServoMotor11GripperOpenEv>
	Limit_sw_Z_Top = false;
 800451a:	4b95      	ldr	r3, [pc, #596]	; (8004770 <main+0x518>)
 800451c:	2200      	movs	r2, #0
 800451e:	701a      	strb	r2, [r3, #0]

	encoderJ1.AMT21_Read();
 8004520:	4894      	ldr	r0, [pc, #592]	; (8004774 <main+0x51c>)
 8004522:	f7fc f8d6 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8004526:	4893      	ldr	r0, [pc, #588]	; (8004774 <main+0x51c>)
 8004528:	f7fc f902 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 800452c:	4603      	mov	r3, r0
 800452e:	461a      	mov	r2, r3
 8004530:	4b91      	ldr	r3, [pc, #580]	; (8004778 <main+0x520>)
 8004532:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 8004534:	4b90      	ldr	r3, [pc, #576]	; (8004778 <main+0x520>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d110      	bne.n	800455e <main+0x306>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() / 2.609;
 800453c:	488d      	ldr	r0, [pc, #564]	; (8004774 <main+0x51c>)
 800453e:	f7fc f95d 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8004542:	4603      	mov	r3, r0
 8004544:	ee07 3a90 	vmov	s15, r3
 8004548:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800454c:	ed9f 5b80 	vldr	d5, [pc, #512]	; 8004750 <main+0x4f8>
 8004550:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004554:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004558:	4b88      	ldr	r3, [pc, #544]	; (800477c <main+0x524>)
 800455a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ2.AMT21_Read();
 800455e:	4888      	ldr	r0, [pc, #544]	; (8004780 <main+0x528>)
 8004560:	f7fc f8b7 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8004564:	4886      	ldr	r0, [pc, #536]	; (8004780 <main+0x528>)
 8004566:	f7fc f8e3 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 800456a:	4603      	mov	r3, r0
 800456c:	461a      	mov	r2, r3
 800456e:	4b85      	ldr	r3, [pc, #532]	; (8004784 <main+0x52c>)
 8004570:	701a      	strb	r2, [r3, #0]
	if (HALENCJ2OK == HAL_OK) {
 8004572:	4b84      	ldr	r3, [pc, #528]	; (8004784 <main+0x52c>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d115      	bne.n	80045a6 <main+0x34e>
		encoderJ2.unwarp();
 800457a:	4881      	ldr	r0, [pc, #516]	; (8004780 <main+0x528>)
 800457c:	f7fc f960 	bl	8000840 <_ZN5AMT216unwarpEv>
		encoderJ2.setUnwarpZero();
 8004580:	487f      	ldr	r0, [pc, #508]	; (8004780 <main+0x528>)
 8004582:	f7fc f9af 	bl	80008e4 <_ZN5AMT2113setUnwarpZeroEv>
		fcb_joint2.Encoder = encoderJ2.getUnwarpValue() / 2.609;
 8004586:	487e      	ldr	r0, [pc, #504]	; (8004780 <main+0x528>)
 8004588:	f7fc f9b9 	bl	80008fe <_ZN5AMT2114getUnwarpValueEv>
 800458c:	ee07 0a90 	vmov	s15, r0
 8004590:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004594:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8004750 <main+0x4f8>
 8004598:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800459c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80045a0:	4b79      	ldr	r3, [pc, #484]	; (8004788 <main+0x530>)
 80045a2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ3.AMT21_Read();
 80045a6:	4879      	ldr	r0, [pc, #484]	; (800478c <main+0x534>)
 80045a8:	f7fc f893 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 80045ac:	4877      	ldr	r0, [pc, #476]	; (800478c <main+0x534>)
 80045ae:	f7fc f8bf 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80045b2:	4603      	mov	r3, r0
 80045b4:	461a      	mov	r2, r3
 80045b6:	4b76      	ldr	r3, [pc, #472]	; (8004790 <main+0x538>)
 80045b8:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 80045ba:	4b75      	ldr	r3, [pc, #468]	; (8004790 <main+0x538>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d110      	bne.n	80045e4 <main+0x38c>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() / 2.609;
 80045c2:	4872      	ldr	r0, [pc, #456]	; (800478c <main+0x534>)
 80045c4:	f7fc f91a 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 80045c8:	4603      	mov	r3, r0
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80045d2:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8004750 <main+0x4f8>
 80045d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80045da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80045de:	4b6d      	ldr	r3, [pc, #436]	; (8004794 <main+0x53c>)
 80045e0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	}

	encoderJ4.AMT21_Read();
 80045e4:	486c      	ldr	r0, [pc, #432]	; (8004798 <main+0x540>)
 80045e6:	f7fc f874 	bl	80006d2 <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ4OK = encoderJ4.AMT21_Check_Value();
 80045ea:	486b      	ldr	r0, [pc, #428]	; (8004798 <main+0x540>)
 80045ec:	f7fc f8a0 	bl	8000730 <_ZN5AMT2117AMT21_Check_ValueEv>
 80045f0:	4603      	mov	r3, r0
 80045f2:	461a      	mov	r2, r3
 80045f4:	4b69      	ldr	r3, [pc, #420]	; (800479c <main+0x544>)
 80045f6:	701a      	strb	r2, [r3, #0]
	if (HALENCJ4OK == HAL_OK) {
 80045f8:	4b68      	ldr	r3, [pc, #416]	; (800479c <main+0x544>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d110      	bne.n	8004622 <main+0x3ca>
		fcb_joint4.Encoder = encoderJ4.getAngPos180() / -2.609;
 8004600:	4865      	ldr	r0, [pc, #404]	; (8004798 <main+0x540>)
 8004602:	f7fc f8fb 	bl	80007fc <_ZN5AMT2112getAngPos180Ev>
 8004606:	4603      	mov	r3, r0
 8004608:	ee07 3a90 	vmov	s15, r3
 800460c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004610:	ed9f 5b51 	vldr	d5, [pc, #324]	; 8004758 <main+0x500>
 8004614:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004618:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800461c:	4b60      	ldr	r3, [pc, #384]	; (80047a0 <main+0x548>)
 800461e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

//	angle_chess = chessSPIEncoder.readAngle();
//	  zero_position = chessSPIEncoder.getRawRotation();
//	  zero_position_map = chessSPIEncoder.read2angle(zero_position);

	fcb_joint1.p11 = 3.60381982 / 100000000.0;
 8004622:	4b56      	ldr	r3, [pc, #344]	; (800477c <main+0x524>)
 8004624:	4a5f      	ldr	r2, [pc, #380]	; (80047a4 <main+0x54c>)
 8004626:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint1.p12 = 1.08884194 / 10000000.0;
 800462a:	4b54      	ldr	r3, [pc, #336]	; (800477c <main+0x524>)
 800462c:	4a5e      	ldr	r2, [pc, #376]	; (80047a8 <main+0x550>)
 800462e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint1.p21 = 1.0888423 / 10000000.0;
 8004632:	4b52      	ldr	r3, [pc, #328]	; (800477c <main+0x524>)
 8004634:	4a5d      	ldr	r2, [pc, #372]	; (80047ac <main+0x554>)
 8004636:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint1.p22 = 6.59951866 / 10000000.0;
 800463a:	4b50      	ldr	r3, [pc, #320]	; (800477c <main+0x524>)
 800463c:	4a5c      	ldr	r2, [pc, #368]	; (80047b0 <main+0x558>)
 800463e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint3.p11 = 3.60381982 / 100000000.0;
 8004642:	4b54      	ldr	r3, [pc, #336]	; (8004794 <main+0x53c>)
 8004644:	4a57      	ldr	r2, [pc, #348]	; (80047a4 <main+0x54c>)
 8004646:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	fcb_joint3.p12 = 1.08884194 / 10000000.0;
 800464a:	4b52      	ldr	r3, [pc, #328]	; (8004794 <main+0x53c>)
 800464c:	4a56      	ldr	r2, [pc, #344]	; (80047a8 <main+0x550>)
 800464e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	fcb_joint3.p21 = 1.0888423 / 10000000.0;
 8004652:	4b50      	ldr	r3, [pc, #320]	; (8004794 <main+0x53c>)
 8004654:	4a55      	ldr	r2, [pc, #340]	; (80047ac <main+0x554>)
 8004656:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	fcb_joint3.p22 = 6.59951866 / 10000000.0;
 800465a:	4b4e      	ldr	r3, [pc, #312]	; (8004794 <main+0x53c>)
 800465c:	4a54      	ldr	r2, [pc, #336]	; (80047b0 <main+0x558>)
 800465e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	fcb_joint1.Q = 0.001;
 8004662:	4b46      	ldr	r3, [pc, #280]	; (800477c <main+0x524>)
 8004664:	4a53      	ldr	r2, [pc, #332]	; (80047b4 <main+0x55c>)
 8004666:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint1.R = 0.000001;
 800466a:	4b44      	ldr	r3, [pc, #272]	; (800477c <main+0x524>)
 800466c:	4a52      	ldr	r2, [pc, #328]	; (80047b8 <main+0x560>)
 800466e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint2.Q = 0.001;
 8004672:	4b45      	ldr	r3, [pc, #276]	; (8004788 <main+0x530>)
 8004674:	4a4f      	ldr	r2, [pc, #316]	; (80047b4 <main+0x55c>)
 8004676:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint2.R = 0.00003;
 800467a:	4b43      	ldr	r3, [pc, #268]	; (8004788 <main+0x530>)
 800467c:	4a4f      	ldr	r2, [pc, #316]	; (80047bc <main+0x564>)
 800467e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	fcb_joint3.Q = 0.001;
 8004682:	4b44      	ldr	r3, [pc, #272]	; (8004794 <main+0x53c>)
 8004684:	4a4b      	ldr	r2, [pc, #300]	; (80047b4 <main+0x55c>)
 8004686:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	fcb_joint3.R = 0.000001;
 800468a:	4b42      	ldr	r3, [pc, #264]	; (8004794 <main+0x53c>)
 800468c:	4a4a      	ldr	r2, [pc, #296]	; (80047b8 <main+0x560>)
 800468e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

//	fcb_joint1.KalmanFillter(fcb_joint1.Encoder);
	fcb_joint1.X11 = fcb_joint1.Encoder;
 8004692:	4b3a      	ldr	r3, [pc, #232]	; (800477c <main+0x524>)
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	4a39      	ldr	r2, [pc, #228]	; (800477c <main+0x524>)
 8004698:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint1.X21 = 0.0;
 800469c:	4b37      	ldr	r3, [pc, #220]	; (800477c <main+0x524>)
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint1.kalman_pos = fcb_joint1.X11;
 80046a6:	4b35      	ldr	r3, [pc, #212]	; (800477c <main+0x524>)
 80046a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046ac:	4a33      	ldr	r2, [pc, #204]	; (800477c <main+0x524>)
 80046ae:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint1.kalman_velo = 0.0;
 80046b2:	4b32      	ldr	r3, [pc, #200]	; (800477c <main+0x524>)
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint1.Goal_Position = fcb_joint1.Encoder;
 80046bc:	4b2f      	ldr	r3, [pc, #188]	; (800477c <main+0x524>)
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	4a2e      	ldr	r2, [pc, #184]	; (800477c <main+0x524>)
 80046c2:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint2.X11 = fcb_joint2.Encoder;
 80046c4:	4b30      	ldr	r3, [pc, #192]	; (8004788 <main+0x530>)
 80046c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c8:	4a2f      	ldr	r2, [pc, #188]	; (8004788 <main+0x530>)
 80046ca:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint2.X21 = 0.0;
 80046ce:	4b2e      	ldr	r3, [pc, #184]	; (8004788 <main+0x530>)
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint2.kalman_pos = fcb_joint2.X11;
 80046d8:	4b2b      	ldr	r3, [pc, #172]	; (8004788 <main+0x530>)
 80046da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046de:	4a2a      	ldr	r2, [pc, #168]	; (8004788 <main+0x530>)
 80046e0:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint2.kalman_velo = 0.0;
 80046e4:	4b28      	ldr	r3, [pc, #160]	; (8004788 <main+0x530>)
 80046e6:	f04f 0200 	mov.w	r2, #0
 80046ea:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint2.Goal_Position = fcb_joint2.Encoder;
 80046ee:	4b26      	ldr	r3, [pc, #152]	; (8004788 <main+0x530>)
 80046f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f2:	4a25      	ldr	r2, [pc, #148]	; (8004788 <main+0x530>)
 80046f4:	6493      	str	r3, [r2, #72]	; 0x48

//	fcb_joint3.KalmanFillter(fcb_joint3.Encoder);
	fcb_joint3.X11 = fcb_joint3.Encoder;
 80046f6:	4b27      	ldr	r3, [pc, #156]	; (8004794 <main+0x53c>)
 80046f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fa:	4a26      	ldr	r2, [pc, #152]	; (8004794 <main+0x53c>)
 80046fc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	fcb_joint3.X21 = 0.0;
 8004700:	4b24      	ldr	r3, [pc, #144]	; (8004794 <main+0x53c>)
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	fcb_joint3.kalman_pos = fcb_joint3.X11;
 800470a:	4b22      	ldr	r3, [pc, #136]	; (8004794 <main+0x53c>)
 800470c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004710:	4a20      	ldr	r2, [pc, #128]	; (8004794 <main+0x53c>)
 8004712:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
	fcb_joint3.kalman_velo = 0.0;
 8004716:	4b1f      	ldr	r3, [pc, #124]	; (8004794 <main+0x53c>)
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	fcb_joint3.Goal_Position = fcb_joint3.Encoder;
 8004720:	4b1c      	ldr	r3, [pc, #112]	; (8004794 <main+0x53c>)
 8004722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004724:	4a1b      	ldr	r2, [pc, #108]	; (8004794 <main+0x53c>)
 8004726:	6493      	str	r3, [r2, #72]	; 0x48

#endif

		HAL_TIM_Base_Start_IT(&htim5); // Jog 		100 Hz
 8004728:	4825      	ldr	r0, [pc, #148]	; (80047c0 <main+0x568>)
 800472a:	f008 fd23 	bl	800d174 <HAL_TIM_Base_Start_IT>
//		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
//		HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
//		HAL_TIM_Base_Start_IT(&htim14); // 			500Hz

	chessABIEncoder.setZero();
 800472e:	4825      	ldr	r0, [pc, #148]	; (80047c4 <main+0x56c>)
 8004730:	f7fc f931 	bl	8000996 <_ZN10AS5047UABI7setZeroEv>
	chessABIEncoder.EncoderReadEnable();
 8004734:	4823      	ldr	r0, [pc, #140]	; (80047c4 <main+0x56c>)
 8004736:	f7fc f916 	bl	8000966 <_ZN10AS5047UABI17EncoderReadEnableEv>
	chessABIEncoder.setZero();
 800473a:	4822      	ldr	r0, [pc, #136]	; (80047c4 <main+0x56c>)
 800473c:	f7fc f92b 	bl	8000996 <_ZN10AS5047UABI7setZeroEv>
	HAL_TIM_Base_Start_IT(&htim16); // 			1000Hz
 8004740:	4821      	ldr	r0, [pc, #132]	; (80047c8 <main+0x570>)
 8004742:	f008 fd17 	bl	800d174 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim17);	// Joint State 50Hz
 8004746:	4821      	ldr	r0, [pc, #132]	; (80047cc <main+0x574>)
 8004748:	f008 fd14 	bl	800d174 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800474c:	e7fe      	b.n	800474c <main+0x4f4>
 800474e:	bf00      	nop
 8004750:	645a1cac 	.word	0x645a1cac
 8004754:	4004df3b 	.word	0x4004df3b
 8004758:	645a1cac 	.word	0x645a1cac
 800475c:	c004df3b 	.word	0xc004df3b
 8004760:	240004f0 	.word	0x240004f0
 8004764:	c4480000 	.word	0xc4480000
 8004768:	00000000 	.word	0x00000000
 800476c:	24000ac0 	.word	0x24000ac0
 8004770:	24000b3b 	.word	0x24000b3b
 8004774:	24000458 	.word	0x24000458
 8004778:	24000adc 	.word	0x24000adc
 800477c:	24000568 	.word	0x24000568
 8004780:	24000474 	.word	0x24000474
 8004784:	24000add 	.word	0x24000add
 8004788:	2400064c 	.word	0x2400064c
 800478c:	24000490 	.word	0x24000490
 8004790:	24000ade 	.word	0x24000ade
 8004794:	24000730 	.word	0x24000730
 8004798:	240004ac 	.word	0x240004ac
 800479c:	24000adf 	.word	0x24000adf
 80047a0:	24000814 	.word	0x24000814
 80047a4:	331ac86b 	.word	0x331ac86b
 80047a8:	33e9d3b8 	.word	0x33e9d3b8
 80047ac:	33e9d3bd 	.word	0x33e9d3bd
 80047b0:	3531278c 	.word	0x3531278c
 80047b4:	3a83126f 	.word	0x3a83126f
 80047b8:	358637bd 	.word	0x358637bd
 80047bc:	37fba882 	.word	0x37fba882
 80047c0:	24000ecc 	.word	0x24000ecc
 80047c4:	24000ae0 	.word	0x24000ae0
 80047c8:	2400112c 	.word	0x2400112c
 80047cc:	24001178 	.word	0x24001178

080047d0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b09c      	sub	sp, #112	; 0x70
 80047d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80047d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047da:	224c      	movs	r2, #76	; 0x4c
 80047dc:	2100      	movs	r1, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f00d fdb6 	bl	8012350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80047e4:	1d3b      	adds	r3, r7, #4
 80047e6:	2220      	movs	r2, #32
 80047e8:	2100      	movs	r1, #0
 80047ea:	4618      	mov	r0, r3
 80047ec:	f00d fdb0 	bl	8012350 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80047f0:	2002      	movs	r0, #2
 80047f2:	f005 fd29 	bl	800a248 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80047f6:	2300      	movs	r3, #0
 80047f8:	603b      	str	r3, [r7, #0]
 80047fa:	4b38      	ldr	r3, [pc, #224]	; (80048dc <_Z18SystemClock_Configv+0x10c>)
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	4a37      	ldr	r2, [pc, #220]	; (80048dc <_Z18SystemClock_Configv+0x10c>)
 8004800:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004804:	6193      	str	r3, [r2, #24]
 8004806:	4b35      	ldr	r3, [pc, #212]	; (80048dc <_Z18SystemClock_Configv+0x10c>)
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	4b33      	ldr	r3, [pc, #204]	; (80048e0 <_Z18SystemClock_Configv+0x110>)
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	4a32      	ldr	r2, [pc, #200]	; (80048e0 <_Z18SystemClock_Configv+0x110>)
 8004816:	f043 0301 	orr.w	r3, r3, #1
 800481a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800481c:	4b30      	ldr	r3, [pc, #192]	; (80048e0 <_Z18SystemClock_Configv+0x110>)
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	603b      	str	r3, [r7, #0]
 8004826:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004828:	4b2c      	ldr	r3, [pc, #176]	; (80048dc <_Z18SystemClock_Configv+0x10c>)
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004834:	bf14      	ite	ne
 8004836:	2301      	movne	r3, #1
 8004838:	2300      	moveq	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d000      	beq.n	8004842 <_Z18SystemClock_Configv+0x72>
 8004840:	e7f2      	b.n	8004828 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004842:	2302      	movs	r3, #2
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8004846:	2301      	movs	r3, #1
 8004848:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800484a:	2340      	movs	r3, #64	; 0x40
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800484e:	2302      	movs	r3, #2
 8004850:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004852:	2300      	movs	r3, #0
 8004854:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004856:	2304      	movs	r3, #4
 8004858:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800485a:	233c      	movs	r3, #60	; 0x3c
 800485c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800485e:	2302      	movs	r3, #2
 8004860:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 96;
 8004862:	2360      	movs	r3, #96	; 0x60
 8004864:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004866:	2302      	movs	r3, #2
 8004868:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800486a:	230c      	movs	r3, #12
 800486c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800486e:	2300      	movs	r3, #0
 8004870:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004872:	2300      	movs	r3, #0
 8004874:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800487a:	4618      	mov	r0, r3
 800487c:	f005 fd1e 	bl	800a2bc <HAL_RCC_OscConfig>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	bf14      	ite	ne
 8004886:	2301      	movne	r3, #1
 8004888:	2300      	moveq	r3, #0
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8004890:	f000 f856 	bl	8004940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004894:	233f      	movs	r3, #63	; 0x3f
 8004896:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004898:	2303      	movs	r3, #3
 800489a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80048a0:	2308      	movs	r3, #8
 80048a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80048a4:	2340      	movs	r3, #64	; 0x40
 80048a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80048a8:	2340      	movs	r3, #64	; 0x40
 80048aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80048ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80048b2:	2340      	movs	r3, #64	; 0x40
 80048b4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80048b6:	1d3b      	adds	r3, r7, #4
 80048b8:	2104      	movs	r1, #4
 80048ba:	4618      	mov	r0, r3
 80048bc:	f006 f92c 	bl	800ab18 <HAL_RCC_ClockConfig>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	bf14      	ite	ne
 80048c6:	2301      	movne	r3, #1
 80048c8:	2300      	moveq	r3, #0
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 80048d0:	f000 f836 	bl	8004940 <Error_Handler>
  }
}
 80048d4:	bf00      	nop
 80048d6:	3770      	adds	r7, #112	; 0x70
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	58024800 	.word	0x58024800
 80048e0:	58000400 	.word	0x58000400

080048e4 <HAL_GPIO_EXTI_Callback>:

/*void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 //
 //}
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LM_Z_BOTTOM_Pin) {	// Limit Switch Bottom Z-axis
 80048ee:	88fb      	ldrh	r3, [r7, #6]
 80048f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f4:	d102      	bne.n	80048fc <HAL_GPIO_EXTI_Callback+0x18>
		Limit_sw_Z_Bot = true;
 80048f6:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <HAL_GPIO_EXTI_Callback+0x4c>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_Z_TOP_Pin) {	// Limit Switch Top Z-axis
 80048fc:	88fb      	ldrh	r3, [r7, #6]
 80048fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004902:	d102      	bne.n	800490a <HAL_GPIO_EXTI_Callback+0x26>
		Limit_sw_Z_Top = true;
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <HAL_GPIO_EXTI_Callback+0x50>)
 8004906:	2201      	movs	r2, #1
 8004908:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_SERVO_Pin) {	// Limit Switch Servo
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	2b80      	cmp	r3, #128	; 0x80
 800490e:	d102      	bne.n	8004916 <HAL_GPIO_EXTI_Callback+0x32>
		Limit_sw_Gripper = true;
 8004910:	4b09      	ldr	r3, [pc, #36]	; (8004938 <HAL_GPIO_EXTI_Callback+0x54>)
 8004912:	2201      	movs	r2, #1
 8004914:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == LM_LED_Pin) {	// Limit Switch LED on Cabinet
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	2b40      	cmp	r3, #64	; 0x40
 800491a:	d102      	bne.n	8004922 <HAL_GPIO_EXTI_Callback+0x3e>
		Limit_sw_Emergancy = true;
 800491c:	4b07      	ldr	r3, [pc, #28]	; (800493c <HAL_GPIO_EXTI_Callback+0x58>)
 800491e:	2201      	movs	r2, #1
 8004920:	701a      	strb	r2, [r3, #0]
	}

}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	24000b3a 	.word	0x24000b3a
 8004934:	24000b3b 	.word	0x24000b3b
 8004938:	24000b3c 	.word	0x24000b3c
 800493c:	24000b3d 	.word	0x24000b3d

08004940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8004944:	2200      	movs	r2, #0
 8004946:	2101      	movs	r1, #1
 8004948:	4808      	ldr	r0, [pc, #32]	; (800496c <Error_Handler+0x2c>)
 800494a:	f005 fc49 	bl	800a1e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800494e:	2200      	movs	r2, #0
 8004950:	2102      	movs	r1, #2
 8004952:	4807      	ldr	r0, [pc, #28]	; (8004970 <Error_Handler+0x30>)
 8004954:	f005 fc44 	bl	800a1e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8004958:	2201      	movs	r2, #1
 800495a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800495e:	4803      	ldr	r0, [pc, #12]	; (800496c <Error_Handler+0x2c>)
 8004960:	f005 fc3e 	bl	800a1e0 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004964:	b672      	cpsid	i
}
 8004966:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004968:	e7fe      	b.n	8004968 <Error_Handler+0x28>
 800496a:	bf00      	nop
 800496c:	58020400 	.word	0x58020400
 8004970:	58021000 	.word	0x58021000

08004974 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    sqrt(_Tp __x)
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004986:	eeb0 0b47 	vmov.f64	d0, d7
 800498a:	f00c fcd9 	bl	8011340 <sqrt>
 800498e:	eeb0 7b40 	vmov.f64	d7, d0
 8004992:	eeb0 0b47 	vmov.f64	d0, d7
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d158      	bne.n	8004a5e <_Z41__static_initialization_and_destruction_0ii+0xc2>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d153      	bne.n	8004a5e <_Z41__static_initialization_and_destruction_0ii+0xc2>
AMT21 encoderJ1(&huart4, 0xD4);
 80049b6:	22d4      	movs	r2, #212	; 0xd4
 80049b8:	4947      	ldr	r1, [pc, #284]	; (8004ad8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80049ba:	4848      	ldr	r0, [pc, #288]	; (8004adc <_Z41__static_initialization_and_destruction_0ii+0x140>)
 80049bc:	f7fb fe6a 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ2(&huart4, 0xB4);
 80049c0:	22b4      	movs	r2, #180	; 0xb4
 80049c2:	4945      	ldr	r1, [pc, #276]	; (8004ad8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80049c4:	4846      	ldr	r0, [pc, #280]	; (8004ae0 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 80049c6:	f7fb fe65 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 80049ca:	22c4      	movs	r2, #196	; 0xc4
 80049cc:	4942      	ldr	r1, [pc, #264]	; (8004ad8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80049ce:	4845      	ldr	r0, [pc, #276]	; (8004ae4 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 80049d0:	f7fb fe60 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ4(&huart4, 0xA4);
 80049d4:	22a4      	movs	r2, #164	; 0xa4
 80049d6:	4940      	ldr	r1, [pc, #256]	; (8004ad8 <_Z41__static_initialization_and_destruction_0ii+0x13c>)
 80049d8:	4843      	ldr	r0, [pc, #268]	; (8004ae8 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 80049da:	f7fb fe5b 	bl	8000694 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 80049de:	2320      	movs	r3, #32
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	4b42      	ldr	r3, [pc, #264]	; (8004aec <_Z41__static_initialization_and_destruction_0ii+0x150>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	4942      	ldr	r1, [pc, #264]	; (8004af0 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 80049e8:	4842      	ldr	r0, [pc, #264]	; (8004af4 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 80049ea:	f7fd f8bb 	bl	8001b64 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 80049ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	4b40      	ldr	r3, [pc, #256]	; (8004af8 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 80049f6:	2204      	movs	r2, #4
 80049f8:	4940      	ldr	r1, [pc, #256]	; (8004afc <_Z41__static_initialization_and_destruction_0ii+0x160>)
 80049fa:	4841      	ldr	r0, [pc, #260]	; (8004b00 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 80049fc:	f7fd f8b2 	bl	8001b64 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	4b3c      	ldr	r3, [pc, #240]	; (8004af8 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8004a08:	2204      	movs	r2, #4
 8004a0a:	493e      	ldr	r1, [pc, #248]	; (8004b04 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 8004a0c:	483e      	ldr	r0, [pc, #248]	; (8004b08 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004a0e:	f7fd f8a9 	bl	8001b64 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004a12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	4b34      	ldr	r3, [pc, #208]	; (8004aec <_Z41__static_initialization_and_destruction_0ii+0x150>)
 8004a1a:	2208      	movs	r2, #8
 8004a1c:	493b      	ldr	r1, [pc, #236]	; (8004b0c <_Z41__static_initialization_and_destruction_0ii+0x170>)
 8004a1e:	483c      	ldr	r0, [pc, #240]	; (8004b10 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004a20:	f7fd f8a0 	bl	8001b64 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
RobotJoint fcb_joint1;
 8004a24:	483b      	ldr	r0, [pc, #236]	; (8004b14 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004a26:	f7fc f829 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint2;
 8004a2a:	483b      	ldr	r0, [pc, #236]	; (8004b18 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004a2c:	f7fc f826 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint3;
 8004a30:	483a      	ldr	r0, [pc, #232]	; (8004b1c <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004a32:	f7fc f823 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_joint4;
 8004a36:	483a      	ldr	r0, [pc, #232]	; (8004b20 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004a38:	f7fc f820 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_Y;
 8004a3c:	4839      	ldr	r0, [pc, #228]	; (8004b24 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004a3e:	f7fc f81d 	bl	8000a7c <_ZN10RobotJointC1Ev>
RobotJoint fcb_X;
 8004a42:	4839      	ldr	r0, [pc, #228]	; (8004b28 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004a44:	f7fc f81a 	bl	8000a7c <_ZN10RobotJointC1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004a48:	2208      	movs	r2, #8
 8004a4a:	4938      	ldr	r1, [pc, #224]	; (8004b2c <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8004a4c:	4838      	ldr	r0, [pc, #224]	; (8004b30 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004a4e:	f7fc fe00 	bl	8001652 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
AS5047UABI chessABIEncoder(&htim8, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8004a52:	2304      	movs	r3, #4
 8004a54:	2200      	movs	r2, #0
 8004a56:	4937      	ldr	r1, [pc, #220]	; (8004b34 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8004a58:	4837      	ldr	r0, [pc, #220]	; (8004b38 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004a5a:	f7fb ff5c 	bl	8000916 <_ZN10AS5047UABIC1EP17TIM_HandleTypeDefmm>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d134      	bne.n	8004ace <_Z41__static_initialization_and_destruction_0ii+0x132>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d12f      	bne.n	8004ace <_Z41__static_initialization_and_destruction_0ii+0x132>
 8004a6e:	4832      	ldr	r0, [pc, #200]	; (8004b38 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8004a70:	f7fb ff6e 	bl	8000950 <_ZN10AS5047UABID1Ev>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8004a74:	482e      	ldr	r0, [pc, #184]	; (8004b30 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 8004a76:	f7fc fe1c 	bl	80016b2 <_ZN10ServoMotorD1Ev>
RobotJoint fcb_X;
 8004a7a:	482b      	ldr	r0, [pc, #172]	; (8004b28 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8004a7c:	f7fc f86c 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_Y;
 8004a80:	4828      	ldr	r0, [pc, #160]	; (8004b24 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8004a82:	f7fc f869 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint4;
 8004a86:	4826      	ldr	r0, [pc, #152]	; (8004b20 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8004a88:	f7fc f866 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint3;
 8004a8c:	4823      	ldr	r0, [pc, #140]	; (8004b1c <_Z41__static_initialization_and_destruction_0ii+0x180>)
 8004a8e:	f7fc f863 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint2;
 8004a92:	4821      	ldr	r0, [pc, #132]	; (8004b18 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8004a94:	f7fc f860 	bl	8000b58 <_ZN10RobotJointD1Ev>
RobotJoint fcb_joint1;
 8004a98:	481e      	ldr	r0, [pc, #120]	; (8004b14 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 8004a9a:	f7fc f85d 	bl	8000b58 <_ZN10RobotJointD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8004a9e:	481c      	ldr	r0, [pc, #112]	; (8004b10 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 8004aa0:	f7fd f8a2 	bl	8001be8 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8004aa4:	4818      	ldr	r0, [pc, #96]	; (8004b08 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 8004aa6:	f7fd f89f 	bl	8001be8 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8004aaa:	4815      	ldr	r0, [pc, #84]	; (8004b00 <_Z41__static_initialization_and_destruction_0ii+0x164>)
 8004aac:	f7fd f89c 	bl	8001be8 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8004ab0:	4810      	ldr	r0, [pc, #64]	; (8004af4 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8004ab2:	f7fd f899 	bl	8001be8 <_ZN7StepperD1Ev>
AMT21 encoderJ4(&huart4, 0xA4);
 8004ab6:	480c      	ldr	r0, [pc, #48]	; (8004ae8 <_Z41__static_initialization_and_destruction_0ii+0x14c>)
 8004ab8:	f7fb fe00 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8004abc:	4809      	ldr	r0, [pc, #36]	; (8004ae4 <_Z41__static_initialization_and_destruction_0ii+0x148>)
 8004abe:	f7fb fdfd 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ2(&huart4, 0xB4);
 8004ac2:	4807      	ldr	r0, [pc, #28]	; (8004ae0 <_Z41__static_initialization_and_destruction_0ii+0x144>)
 8004ac4:	f7fb fdfa 	bl	80006bc <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8004ac8:	4804      	ldr	r0, [pc, #16]	; (8004adc <_Z41__static_initialization_and_destruction_0ii+0x140>)
 8004aca:	f7fb fdf7 	bl	80006bc <_ZN5AMT21D1Ev>
}
 8004ace:	bf00      	nop
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	240011c4 	.word	0x240011c4
 8004adc:	24000458 	.word	0x24000458
 8004ae0:	24000474 	.word	0x24000474
 8004ae4:	24000490 	.word	0x24000490
 8004ae8:	240004ac 	.word	0x240004ac
 8004aec:	58020400 	.word	0x58020400
 8004af0:	24000e34 	.word	0x24000e34
 8004af4:	240004c8 	.word	0x240004c8
 8004af8:	58021000 	.word	0x58021000
 8004afc:	24000d9c 	.word	0x24000d9c
 8004b00:	240004f0 	.word	0x240004f0
 8004b04:	240010e0 	.word	0x240010e0
 8004b08:	24000518 	.word	0x24000518
 8004b0c:	24000de8 	.word	0x24000de8
 8004b10:	24000540 	.word	0x24000540
 8004b14:	24000568 	.word	0x24000568
 8004b18:	2400064c 	.word	0x2400064c
 8004b1c:	24000730 	.word	0x24000730
 8004b20:	24000814 	.word	0x24000814
 8004b24:	240008f8 	.word	0x240008f8
 8004b28:	240009dc 	.word	0x240009dc
 8004b2c:	24000e80 	.word	0x24000e80
 8004b30:	24000ac0 	.word	0x24000ac0
 8004b34:	24000fb0 	.word	0x24000fb0
 8004b38:	24000ae0 	.word	0x24000ae0

08004b3c <_GLOBAL__sub_I_TIM_MS>:
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004b44:	2001      	movs	r0, #1
 8004b46:	f7ff ff29 	bl	800499c <_Z41__static_initialization_and_destruction_0ii>
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <_GLOBAL__sub_D_TIM_MS>:
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004b54:	2000      	movs	r0, #0
 8004b56:	f7ff ff21 	bl	800499c <_Z41__static_initialization_and_destruction_0ii>
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_tx;
DMA_HandleTypeDef hdma_spi3_rx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004b60:	4b28      	ldr	r3, [pc, #160]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004b62:	4a29      	ldr	r2, [pc, #164]	; (8004c08 <MX_SPI3_Init+0xac>)
 8004b64:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004b66:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004b68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004b6c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004b6e:	4b25      	ldr	r3, [pc, #148]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b74:	4b23      	ldr	r3, [pc, #140]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004b76:	2207      	movs	r2, #7
 8004b78:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b7a:	4b22      	ldr	r3, [pc, #136]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004b80:	4b20      	ldr	r3, [pc, #128]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004b82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b86:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004b88:	4b1e      	ldr	r3, [pc, #120]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004b8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004b8e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004b90:	4b1c      	ldr	r3, [pc, #112]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004b92:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004b96:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b98:	4b1a      	ldr	r3, [pc, #104]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b9e:	4b19      	ldr	r3, [pc, #100]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ba4:	4b17      	ldr	r3, [pc, #92]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8004baa:	4b16      	ldr	r3, [pc, #88]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004bb0:	4b14      	ldr	r3, [pc, #80]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bb6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004bb8:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004bbe:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004bc4:	4b0f      	ldr	r3, [pc, #60]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004bca:	4b0e      	ldr	r3, [pc, #56]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004bd0:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004bdc:	4b09      	ldr	r3, [pc, #36]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004be2:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004be8:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004bee:	4805      	ldr	r0, [pc, #20]	; (8004c04 <MX_SPI3_Init+0xa8>)
 8004bf0:	f007 fe86 	bl	800c900 <HAL_SPI_Init>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d001      	beq.n	8004bfe <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8004bfa:	f7ff fea1 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004bfe:	bf00      	nop
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	24000c20 	.word	0x24000c20
 8004c08:	40003c00 	.word	0x40003c00

08004c0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b0b8      	sub	sp, #224	; 0xe0
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	609a      	str	r2, [r3, #8]
 8004c20:	60da      	str	r2, [r3, #12]
 8004c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c24:	f107 0310 	add.w	r3, r7, #16
 8004c28:	22bc      	movs	r2, #188	; 0xbc
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f00d fb8f 	bl	8012350 <memset>
  if(spiHandle->Instance==SPI3)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a56      	ldr	r2, [pc, #344]	; (8004d90 <HAL_SPI_MspInit+0x184>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	f040 80a5 	bne.w	8004d88 <HAL_SPI_MspInit+0x17c>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c42:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c48:	f107 0310 	add.w	r3, r7, #16
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f006 faef 	bl	800b230 <HAL_RCCEx_PeriphCLKConfig>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8004c58:	f7ff fe72 	bl	8004940 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004c5c:	4b4d      	ldr	r3, [pc, #308]	; (8004d94 <HAL_SPI_MspInit+0x188>)
 8004c5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c62:	4a4c      	ldr	r2, [pc, #304]	; (8004d94 <HAL_SPI_MspInit+0x188>)
 8004c64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004c6c:	4b49      	ldr	r3, [pc, #292]	; (8004d94 <HAL_SPI_MspInit+0x188>)
 8004c6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c7a:	4b46      	ldr	r3, [pc, #280]	; (8004d94 <HAL_SPI_MspInit+0x188>)
 8004c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c80:	4a44      	ldr	r2, [pc, #272]	; (8004d94 <HAL_SPI_MspInit+0x188>)
 8004c82:	f043 0304 	orr.w	r3, r3, #4
 8004c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c8a:	4b42      	ldr	r3, [pc, #264]	; (8004d94 <HAL_SPI_MspInit+0x188>)
 8004c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004c98:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004c9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cac:	2300      	movs	r3, #0
 8004cae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004cb2:	2306      	movs	r3, #6
 8004cb4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cb8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4836      	ldr	r0, [pc, #216]	; (8004d98 <HAL_SPI_MspInit+0x18c>)
 8004cc0:	f005 f8de 	bl	8009e80 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8004cc4:	4b35      	ldr	r3, [pc, #212]	; (8004d9c <HAL_SPI_MspInit+0x190>)
 8004cc6:	4a36      	ldr	r2, [pc, #216]	; (8004da0 <HAL_SPI_MspInit+0x194>)
 8004cc8:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 8004cca:	4b34      	ldr	r3, [pc, #208]	; (8004d9c <HAL_SPI_MspInit+0x190>)
 8004ccc:	223e      	movs	r2, #62	; 0x3e
 8004cce:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cd0:	4b32      	ldr	r3, [pc, #200]	; (8004d9c <HAL_SPI_MspInit+0x190>)
 8004cd2:	2240      	movs	r2, #64	; 0x40
 8004cd4:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cd6:	4b31      	ldr	r3, [pc, #196]	; (8004d9c <HAL_SPI_MspInit+0x190>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cdc:	4b2f      	ldr	r3, [pc, #188]	; (8004d9c <HAL_SPI_MspInit+0x190>)
 8004cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ce2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ce4:	4b2d      	ldr	r3, [pc, #180]	; (8004d9c <HAL_SPI_MspInit+0x190>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cea:	4b2c      	ldr	r3, [pc, #176]	; (8004d9c <HAL_SPI_MspInit+0x190>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8004cf0:	4b2a      	ldr	r3, [pc, #168]	; (8004d9c <HAL_SPI_MspInit+0x190>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004cf6:	4b29      	ldr	r3, [pc, #164]	; (8004d9c <HAL_SPI_MspInit+0x190>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cfc:	4b27      	ldr	r3, [pc, #156]	; (8004d9c <HAL_SPI_MspInit+0x190>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004d02:	4826      	ldr	r0, [pc, #152]	; (8004d9c <HAL_SPI_MspInit+0x190>)
 8004d04:	f002 fa80 	bl	8007208 <HAL_DMA_Init>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_SPI_MspInit+0x106>
    {
      Error_Handler();
 8004d0e:	f7ff fe17 	bl	8004940 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a21      	ldr	r2, [pc, #132]	; (8004d9c <HAL_SPI_MspInit+0x190>)
 8004d16:	679a      	str	r2, [r3, #120]	; 0x78
 8004d18:	4a20      	ldr	r2, [pc, #128]	; (8004d9c <HAL_SPI_MspInit+0x190>)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA2_Stream0;
 8004d1e:	4b21      	ldr	r3, [pc, #132]	; (8004da4 <HAL_SPI_MspInit+0x198>)
 8004d20:	4a21      	ldr	r2, [pc, #132]	; (8004da8 <HAL_SPI_MspInit+0x19c>)
 8004d22:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8004d24:	4b1f      	ldr	r3, [pc, #124]	; (8004da4 <HAL_SPI_MspInit+0x198>)
 8004d26:	223d      	movs	r2, #61	; 0x3d
 8004d28:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d2a:	4b1e      	ldr	r3, [pc, #120]	; (8004da4 <HAL_SPI_MspInit+0x198>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d30:	4b1c      	ldr	r3, [pc, #112]	; (8004da4 <HAL_SPI_MspInit+0x198>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d36:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <HAL_SPI_MspInit+0x198>)
 8004d38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d3c:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d3e:	4b19      	ldr	r3, [pc, #100]	; (8004da4 <HAL_SPI_MspInit+0x198>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d44:	4b17      	ldr	r3, [pc, #92]	; (8004da4 <HAL_SPI_MspInit+0x198>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8004d4a:	4b16      	ldr	r3, [pc, #88]	; (8004da4 <HAL_SPI_MspInit+0x198>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d50:	4b14      	ldr	r3, [pc, #80]	; (8004da4 <HAL_SPI_MspInit+0x198>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d56:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <HAL_SPI_MspInit+0x198>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8004d5c:	4811      	ldr	r0, [pc, #68]	; (8004da4 <HAL_SPI_MspInit+0x198>)
 8004d5e:	f002 fa53 	bl	8007208 <HAL_DMA_Init>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <HAL_SPI_MspInit+0x160>
    {
      Error_Handler();
 8004d68:	f7ff fdea 	bl	8004940 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a0d      	ldr	r2, [pc, #52]	; (8004da4 <HAL_SPI_MspInit+0x198>)
 8004d70:	67da      	str	r2, [r3, #124]	; 0x7c
 8004d72:	4a0c      	ldr	r2, [pc, #48]	; (8004da4 <HAL_SPI_MspInit+0x198>)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	2033      	movs	r0, #51	; 0x33
 8004d7e:	f002 f804 	bl	8006d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004d82:	2033      	movs	r0, #51	; 0x33
 8004d84:	f002 f81b 	bl	8006dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004d88:	bf00      	nop
 8004d8a:	37e0      	adds	r7, #224	; 0xe0
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40003c00 	.word	0x40003c00
 8004d94:	58024400 	.word	0x58024400
 8004d98:	58020800 	.word	0x58020800
 8004d9c:	24000ca8 	.word	0x24000ca8
 8004da0:	400200b8 	.word	0x400200b8
 8004da4:	24000d20 	.word	0x24000d20
 8004da8:	40020410 	.word	0x40020410

08004dac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004db2:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <HAL_MspInit+0x30>)
 8004db4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004db8:	4a08      	ldr	r2, [pc, #32]	; (8004ddc <HAL_MspInit+0x30>)
 8004dba:	f043 0302 	orr.w	r3, r3, #2
 8004dbe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004dc2:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <HAL_MspInit+0x30>)
 8004dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	607b      	str	r3, [r7, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	58024400 	.word	0x58024400

08004de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004de4:	e7fe      	b.n	8004de4 <NMI_Handler+0x4>

08004de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004de6:	b480      	push	{r7}
 8004de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dea:	e7fe      	b.n	8004dea <HardFault_Handler+0x4>

08004dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004df0:	e7fe      	b.n	8004df0 <MemManage_Handler+0x4>

08004df2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004df2:	b480      	push	{r7}
 8004df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004df6:	e7fe      	b.n	8004df6 <BusFault_Handler+0x4>

08004df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004dfc:	e7fe      	b.n	8004dfc <UsageFault_Handler+0x4>

08004dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e02:	bf00      	nop
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e10:	bf00      	nop
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e1e:	bf00      	nop
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e2c:	f001 fe82 	bl	8006b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8004e30:	f001 ffdf 	bl	8006df2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004e34:	bf00      	nop
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8004e3c:	4802      	ldr	r0, [pc, #8]	; (8004e48 <DMA1_Stream0_IRQHandler+0x10>)
 8004e3e:	f003 fd0d 	bl	800885c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004e42:	bf00      	nop
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	240014f4 	.word	0x240014f4

08004e4c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004e50:	4802      	ldr	r0, [pc, #8]	; (8004e5c <DMA1_Stream1_IRQHandler+0x10>)
 8004e52:	f003 fd03 	bl	800885c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004e56:	bf00      	nop
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	2400165c 	.word	0x2400165c

08004e60 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004e64:	4802      	ldr	r0, [pc, #8]	; (8004e70 <DMA1_Stream2_IRQHandler+0x10>)
 8004e66:	f003 fcf9 	bl	800885c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	240016d4 	.word	0x240016d4

08004e74 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8004e78:	4802      	ldr	r0, [pc, #8]	; (8004e84 <DMA1_Stream3_IRQHandler+0x10>)
 8004e7a:	f003 fcef 	bl	800885c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004e7e:	bf00      	nop
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	24001404 	.word	0x24001404

08004e88 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004e8c:	4802      	ldr	r0, [pc, #8]	; (8004e98 <DMA1_Stream4_IRQHandler+0x10>)
 8004e8e:	f003 fce5 	bl	800885c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004e92:	bf00      	nop
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	2400147c 	.word	0x2400147c

08004e9c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004ea0:	4802      	ldr	r0, [pc, #8]	; (8004eac <DMA1_Stream5_IRQHandler+0x10>)
 8004ea2:	f003 fcdb 	bl	800885c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004ea6:	bf00      	nop
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	2400156c 	.word	0x2400156c

08004eb0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004eb4:	4802      	ldr	r0, [pc, #8]	; (8004ec0 <DMA1_Stream6_IRQHandler+0x10>)
 8004eb6:	f003 fcd1 	bl	800885c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004eba:	bf00      	nop
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	240015e4 	.word	0x240015e4

08004ec4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8004ec8:	2040      	movs	r0, #64	; 0x40
 8004eca:	f005 f9a2 	bl	800a212 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_SERVO_Pin);
 8004ece:	2080      	movs	r0, #128	; 0x80
 8004ed0:	f005 f99f 	bl	800a212 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004ed4:	bf00      	nop
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004edc:	4802      	ldr	r0, [pc, #8]	; (8004ee8 <USART2_IRQHandler+0x10>)
 8004ede:	f009 ff91 	bl	800ee04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ee2:	bf00      	nop
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	240012e4 	.word	0x240012e4

08004eec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ef0:	4802      	ldr	r0, [pc, #8]	; (8004efc <USART3_IRQHandler+0x10>)
 8004ef2:	f009 ff87 	bl	800ee04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004ef6:	bf00      	nop
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	24001374 	.word	0x24001374

08004f00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8004f04:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004f08:	f005 f983 	bl	800a212 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8004f0c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004f10:	f005 f97f 	bl	800a212 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM_Z_BOTTOM_Pin);
 8004f14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004f18:	f005 f97b 	bl	800a212 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8004f1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004f20:	f005 f977 	bl	800a212 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004f24:	bf00      	nop
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004f2c:	4803      	ldr	r0, [pc, #12]	; (8004f3c <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8004f2e:	f008 fc6b 	bl	800d808 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8004f32:	4803      	ldr	r0, [pc, #12]	; (8004f40 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8004f34:	f008 fc68 	bl	800d808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8004f38:	bf00      	nop
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	24000fb0 	.word	0x24000fb0
 8004f40:	24000ffc 	.word	0x24000ffc

08004f44 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004f48:	4803      	ldr	r0, [pc, #12]	; (8004f58 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8004f4a:	f008 fc5d 	bl	800d808 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8004f4e:	4803      	ldr	r0, [pc, #12]	; (8004f5c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8004f50:	f008 fc5a 	bl	800d808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004f54:	bf00      	nop
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	24000fb0 	.word	0x24000fb0
 8004f5c:	24001048 	.word	0x24001048

08004f60 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004f64:	4803      	ldr	r0, [pc, #12]	; (8004f74 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8004f66:	f008 fc4f 	bl	800d808 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8004f6a:	4803      	ldr	r0, [pc, #12]	; (8004f78 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8004f6c:	f008 fc4c 	bl	800d808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004f70:	bf00      	nop
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	24000fb0 	.word	0x24000fb0
 8004f78:	24001094 	.word	0x24001094

08004f7c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004f80:	4802      	ldr	r0, [pc, #8]	; (8004f8c <TIM8_CC_IRQHandler+0x10>)
 8004f82:	f008 fc41 	bl	800d808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8004f86:	bf00      	nop
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	24000fb0 	.word	0x24000fb0

08004f90 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8004f94:	4802      	ldr	r0, [pc, #8]	; (8004fa0 <DMA1_Stream7_IRQHandler+0x10>)
 8004f96:	f003 fc61 	bl	800885c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004f9a:	bf00      	nop
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	24000ca8 	.word	0x24000ca8

08004fa4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004fa8:	4802      	ldr	r0, [pc, #8]	; (8004fb4 <TIM5_IRQHandler+0x10>)
 8004faa:	f008 fc2d 	bl	800d808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004fae:	bf00      	nop
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	24000ecc 	.word	0x24000ecc

08004fb8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8004fbc:	4802      	ldr	r0, [pc, #8]	; (8004fc8 <SPI3_IRQHandler+0x10>)
 8004fbe:	f007 fda5 	bl	800cb0c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8004fc2:	bf00      	nop
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	24000c20 	.word	0x24000c20

08004fcc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004fd0:	4802      	ldr	r0, [pc, #8]	; (8004fdc <UART4_IRQHandler+0x10>)
 8004fd2:	f009 ff17 	bl	800ee04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004fd6:	bf00      	nop
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	240011c4 	.word	0x240011c4

08004fe0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004fe4:	4802      	ldr	r0, [pc, #8]	; (8004ff0 <TIM6_DAC_IRQHandler+0x10>)
 8004fe6:	f008 fc0f 	bl	800d808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004fea:	bf00      	nop
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	24000f18 	.word	0x24000f18

08004ff4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004ff8:	4802      	ldr	r0, [pc, #8]	; (8005004 <TIM7_IRQHandler+0x10>)
 8004ffa:	f008 fc05 	bl	800d808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004ffe:	bf00      	nop
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	24000f64 	.word	0x24000f64

08005008 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800500c:	4802      	ldr	r0, [pc, #8]	; (8005018 <DMA2_Stream0_IRQHandler+0x10>)
 800500e:	f003 fc25 	bl	800885c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005012:	bf00      	nop
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	24000d20 	.word	0x24000d20

0800501c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005020:	4802      	ldr	r0, [pc, #8]	; (800502c <UART7_IRQHandler+0x10>)
 8005022:	f009 feef 	bl	800ee04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8005026:	bf00      	nop
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	24001254 	.word	0x24001254

08005030 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005034:	4802      	ldr	r0, [pc, #8]	; (8005040 <TIM16_IRQHandler+0x10>)
 8005036:	f008 fbe7 	bl	800d808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800503a:	bf00      	nop
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	2400112c 	.word	0x2400112c

08005044 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005048:	4802      	ldr	r0, [pc, #8]	; (8005054 <TIM17_IRQHandler+0x10>)
 800504a:	f008 fbdd 	bl	800d808 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800504e:	bf00      	nop
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	24001178 	.word	0x24001178

08005058 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
	return 1;
 800505c:	2301      	movs	r3, #1
}
 800505e:	4618      	mov	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <_kill>:

int _kill(int pid, int sig)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005072:	f00d f943 	bl	80122fc <__errno>
 8005076:	4603      	mov	r3, r0
 8005078:	2216      	movs	r2, #22
 800507a:	601a      	str	r2, [r3, #0]
	return -1;
 800507c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005080:	4618      	mov	r0, r3
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <_exit>:

void _exit (int status)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005090:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff ffe7 	bl	8005068 <_kill>
	while (1) {}		/* Make sure we hang here */
 800509a:	e7fe      	b.n	800509a <_exit+0x12>

0800509c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050a8:	2300      	movs	r3, #0
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	e00a      	b.n	80050c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80050ae:	f3af 8000 	nop.w
 80050b2:	4601      	mov	r1, r0
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	60ba      	str	r2, [r7, #8]
 80050ba:	b2ca      	uxtb	r2, r1
 80050bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	3301      	adds	r3, #1
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	dbf0      	blt.n	80050ae <_read+0x12>
	}

return len;
 80050cc:	687b      	ldr	r3, [r7, #4]
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b086      	sub	sp, #24
 80050da:	af00      	add	r7, sp, #0
 80050dc:	60f8      	str	r0, [r7, #12]
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	e009      	b.n	80050fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	60ba      	str	r2, [r7, #8]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	3301      	adds	r3, #1
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	dbf1      	blt.n	80050e8 <_write+0x12>
	}
	return len;
 8005104:	687b      	ldr	r3, [r7, #4]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <_close>:

int _close(int file)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
	return -1;
 8005116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800511a:	4618      	mov	r0, r3
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005136:	605a      	str	r2, [r3, #4]
	return 0;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <_isatty>:

int _isatty(int file)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
	return 1;
 800514e:	2301      	movs	r3, #1
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
	return 0;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
	...

08005178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005180:	4a14      	ldr	r2, [pc, #80]	; (80051d4 <_sbrk+0x5c>)
 8005182:	4b15      	ldr	r3, [pc, #84]	; (80051d8 <_sbrk+0x60>)
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800518c:	4b13      	ldr	r3, [pc, #76]	; (80051dc <_sbrk+0x64>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005194:	4b11      	ldr	r3, [pc, #68]	; (80051dc <_sbrk+0x64>)
 8005196:	4a12      	ldr	r2, [pc, #72]	; (80051e0 <_sbrk+0x68>)
 8005198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800519a:	4b10      	ldr	r3, [pc, #64]	; (80051dc <_sbrk+0x64>)
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4413      	add	r3, r2
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d207      	bcs.n	80051b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051a8:	f00d f8a8 	bl	80122fc <__errno>
 80051ac:	4603      	mov	r3, r0
 80051ae:	220c      	movs	r2, #12
 80051b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051b6:	e009      	b.n	80051cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051b8:	4b08      	ldr	r3, [pc, #32]	; (80051dc <_sbrk+0x64>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051be:	4b07      	ldr	r3, [pc, #28]	; (80051dc <_sbrk+0x64>)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4413      	add	r3, r2
 80051c6:	4a05      	ldr	r2, [pc, #20]	; (80051dc <_sbrk+0x64>)
 80051c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051ca:	68fb      	ldr	r3, [r7, #12]
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	24001d60 	.word	0x24001d60
 80051d8:	00000400 	.word	0x00000400
 80051dc:	24000d98 	.word	0x24000d98
 80051e0:	24001760 	.word	0x24001760

080051e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80051e8:	4b39      	ldr	r3, [pc, #228]	; (80052d0 <SystemInit+0xec>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ee:	4a38      	ldr	r2, [pc, #224]	; (80052d0 <SystemInit+0xec>)
 80051f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80051f8:	4b36      	ldr	r3, [pc, #216]	; (80052d4 <SystemInit+0xf0>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	2b06      	cmp	r3, #6
 8005202:	d807      	bhi.n	8005214 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005204:	4b33      	ldr	r3, [pc, #204]	; (80052d4 <SystemInit+0xf0>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f023 030f 	bic.w	r3, r3, #15
 800520c:	4a31      	ldr	r2, [pc, #196]	; (80052d4 <SystemInit+0xf0>)
 800520e:	f043 0307 	orr.w	r3, r3, #7
 8005212:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005214:	4b30      	ldr	r3, [pc, #192]	; (80052d8 <SystemInit+0xf4>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a2f      	ldr	r2, [pc, #188]	; (80052d8 <SystemInit+0xf4>)
 800521a:	f043 0301 	orr.w	r3, r3, #1
 800521e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005220:	4b2d      	ldr	r3, [pc, #180]	; (80052d8 <SystemInit+0xf4>)
 8005222:	2200      	movs	r2, #0
 8005224:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005226:	4b2c      	ldr	r3, [pc, #176]	; (80052d8 <SystemInit+0xf4>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	492b      	ldr	r1, [pc, #172]	; (80052d8 <SystemInit+0xf4>)
 800522c:	4b2b      	ldr	r3, [pc, #172]	; (80052dc <SystemInit+0xf8>)
 800522e:	4013      	ands	r3, r2
 8005230:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005232:	4b28      	ldr	r3, [pc, #160]	; (80052d4 <SystemInit+0xf0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d007      	beq.n	800524e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800523e:	4b25      	ldr	r3, [pc, #148]	; (80052d4 <SystemInit+0xf0>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f023 030f 	bic.w	r3, r3, #15
 8005246:	4a23      	ldr	r2, [pc, #140]	; (80052d4 <SystemInit+0xf0>)
 8005248:	f043 0307 	orr.w	r3, r3, #7
 800524c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800524e:	4b22      	ldr	r3, [pc, #136]	; (80052d8 <SystemInit+0xf4>)
 8005250:	2200      	movs	r2, #0
 8005252:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005254:	4b20      	ldr	r3, [pc, #128]	; (80052d8 <SystemInit+0xf4>)
 8005256:	2200      	movs	r2, #0
 8005258:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800525a:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <SystemInit+0xf4>)
 800525c:	2200      	movs	r2, #0
 800525e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <SystemInit+0xf4>)
 8005262:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <SystemInit+0xfc>)
 8005264:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005266:	4b1c      	ldr	r3, [pc, #112]	; (80052d8 <SystemInit+0xf4>)
 8005268:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <SystemInit+0x100>)
 800526a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800526c:	4b1a      	ldr	r3, [pc, #104]	; (80052d8 <SystemInit+0xf4>)
 800526e:	4a1e      	ldr	r2, [pc, #120]	; (80052e8 <SystemInit+0x104>)
 8005270:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005272:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <SystemInit+0xf4>)
 8005274:	2200      	movs	r2, #0
 8005276:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005278:	4b17      	ldr	r3, [pc, #92]	; (80052d8 <SystemInit+0xf4>)
 800527a:	4a1b      	ldr	r2, [pc, #108]	; (80052e8 <SystemInit+0x104>)
 800527c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800527e:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <SystemInit+0xf4>)
 8005280:	2200      	movs	r2, #0
 8005282:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005284:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <SystemInit+0xf4>)
 8005286:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <SystemInit+0x104>)
 8005288:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800528a:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <SystemInit+0xf4>)
 800528c:	2200      	movs	r2, #0
 800528e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005290:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <SystemInit+0xf4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a10      	ldr	r2, [pc, #64]	; (80052d8 <SystemInit+0xf4>)
 8005296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800529a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800529c:	4b0e      	ldr	r3, [pc, #56]	; (80052d8 <SystemInit+0xf4>)
 800529e:	2200      	movs	r2, #0
 80052a0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80052a2:	4b12      	ldr	r3, [pc, #72]	; (80052ec <SystemInit+0x108>)
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	4b12      	ldr	r3, [pc, #72]	; (80052f0 <SystemInit+0x10c>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ae:	d202      	bcs.n	80052b6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80052b0:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <SystemInit+0x110>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80052b6:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <SystemInit+0x114>)
 80052b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80052bc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80052be:	4b04      	ldr	r3, [pc, #16]	; (80052d0 <SystemInit+0xec>)
 80052c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80052c4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80052c6:	bf00      	nop
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	e000ed00 	.word	0xe000ed00
 80052d4:	52002000 	.word	0x52002000
 80052d8:	58024400 	.word	0x58024400
 80052dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80052e0:	02020200 	.word	0x02020200
 80052e4:	01ff0000 	.word	0x01ff0000
 80052e8:	01010280 	.word	0x01010280
 80052ec:	5c001000 	.word	0x5c001000
 80052f0:	ffff0000 	.word	0xffff0000
 80052f4:	51008108 	.word	0x51008108
 80052f8:	52004000 	.word	0x52004000

080052fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b09a      	sub	sp, #104	; 0x68
 8005300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005302:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	605a      	str	r2, [r3, #4]
 800530c:	609a      	str	r2, [r3, #8]
 800530e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005310:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	605a      	str	r2, [r3, #4]
 800531a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800531c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	605a      	str	r2, [r3, #4]
 8005326:	609a      	str	r2, [r3, #8]
 8005328:	60da      	str	r2, [r3, #12]
 800532a:	611a      	str	r2, [r3, #16]
 800532c:	615a      	str	r2, [r3, #20]
 800532e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005330:	1d3b      	adds	r3, r7, #4
 8005332:	222c      	movs	r2, #44	; 0x2c
 8005334:	2100      	movs	r1, #0
 8005336:	4618      	mov	r0, r3
 8005338:	f00d f80a 	bl	8012350 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800533c:	4b44      	ldr	r3, [pc, #272]	; (8005450 <MX_TIM1_Init+0x154>)
 800533e:	4a45      	ldr	r2, [pc, #276]	; (8005454 <MX_TIM1_Init+0x158>)
 8005340:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8005342:	4b43      	ldr	r3, [pc, #268]	; (8005450 <MX_TIM1_Init+0x154>)
 8005344:	22c7      	movs	r2, #199	; 0xc7
 8005346:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005348:	4b41      	ldr	r3, [pc, #260]	; (8005450 <MX_TIM1_Init+0x154>)
 800534a:	2200      	movs	r2, #0
 800534c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 800534e:	4b40      	ldr	r3, [pc, #256]	; (8005450 <MX_TIM1_Init+0x154>)
 8005350:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005354:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005356:	4b3e      	ldr	r3, [pc, #248]	; (8005450 <MX_TIM1_Init+0x154>)
 8005358:	2200      	movs	r2, #0
 800535a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800535c:	4b3c      	ldr	r3, [pc, #240]	; (8005450 <MX_TIM1_Init+0x154>)
 800535e:	2200      	movs	r2, #0
 8005360:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005362:	4b3b      	ldr	r3, [pc, #236]	; (8005450 <MX_TIM1_Init+0x154>)
 8005364:	2280      	movs	r2, #128	; 0x80
 8005366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005368:	4839      	ldr	r0, [pc, #228]	; (8005450 <MX_TIM1_Init+0x154>)
 800536a:	f007 feac 	bl	800d0c6 <HAL_TIM_Base_Init>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005374:	f7ff fae4 	bl	8004940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800537c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800537e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005382:	4619      	mov	r1, r3
 8005384:	4832      	ldr	r0, [pc, #200]	; (8005450 <MX_TIM1_Init+0x154>)
 8005386:	f008 fc73 	bl	800dc70 <HAL_TIM_ConfigClockSource>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005390:	f7ff fad6 	bl	8004940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005394:	482e      	ldr	r0, [pc, #184]	; (8005450 <MX_TIM1_Init+0x154>)
 8005396:	f007 ff94 	bl	800d2c2 <HAL_TIM_PWM_Init>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80053a0:	f7ff face 	bl	8004940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053a4:	2300      	movs	r3, #0
 80053a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80053a8:	2300      	movs	r3, #0
 80053aa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053ac:	2300      	movs	r3, #0
 80053ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80053b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80053b4:	4619      	mov	r1, r3
 80053b6:	4826      	ldr	r0, [pc, #152]	; (8005450 <MX_TIM1_Init+0x154>)
 80053b8:	f009 f9ae 	bl	800e718 <HAL_TIMEx_MasterConfigSynchronization>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80053c2:	f7ff fabd 	bl	8004940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053c6:	2360      	movs	r3, #96	; 0x60
 80053c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80053ca:	f240 1339 	movw	r3, #313	; 0x139
 80053ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053d0:	2300      	movs	r3, #0
 80053d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80053d4:	2300      	movs	r3, #0
 80053d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053d8:	2300      	movs	r3, #0
 80053da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80053dc:	2300      	movs	r3, #0
 80053de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80053e0:	2300      	movs	r3, #0
 80053e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80053e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053e8:	2204      	movs	r2, #4
 80053ea:	4619      	mov	r1, r3
 80053ec:	4818      	ldr	r0, [pc, #96]	; (8005450 <MX_TIM1_Init+0x154>)
 80053ee:	f008 fb2b 	bl	800da48 <HAL_TIM_PWM_ConfigChannel>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80053f8:	f7ff faa2 	bl	8004940 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80053fc:	2300      	movs	r3, #0
 80053fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005400:	2300      	movs	r3, #0
 8005402:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800540c:	2300      	movs	r3, #0
 800540e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005414:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800541a:	2300      	movs	r3, #0
 800541c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800541e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005428:	2300      	movs	r3, #0
 800542a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800542c:	1d3b      	adds	r3, r7, #4
 800542e:	4619      	mov	r1, r3
 8005430:	4807      	ldr	r0, [pc, #28]	; (8005450 <MX_TIM1_Init+0x154>)
 8005432:	f009 f9ff 	bl	800e834 <HAL_TIMEx_ConfigBreakDeadTime>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d001      	beq.n	8005440 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800543c:	f7ff fa80 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005440:	4803      	ldr	r0, [pc, #12]	; (8005450 <MX_TIM1_Init+0x154>)
 8005442:	f000 fdd5 	bl	8005ff0 <HAL_TIM_MspPostInit>

}
 8005446:	bf00      	nop
 8005448:	3768      	adds	r7, #104	; 0x68
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	24000d9c 	.word	0x24000d9c
 8005454:	40010000 	.word	0x40010000

08005458 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08e      	sub	sp, #56	; 0x38
 800545c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800545e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	605a      	str	r2, [r3, #4]
 8005468:	609a      	str	r2, [r3, #8]
 800546a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800546c:	f107 031c 	add.w	r3, r7, #28
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	605a      	str	r2, [r3, #4]
 8005476:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005478:	463b      	mov	r3, r7
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	605a      	str	r2, [r3, #4]
 8005480:	609a      	str	r2, [r3, #8]
 8005482:	60da      	str	r2, [r3, #12]
 8005484:	611a      	str	r2, [r3, #16]
 8005486:	615a      	str	r2, [r3, #20]
 8005488:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800548a:	4b2e      	ldr	r3, [pc, #184]	; (8005544 <MX_TIM2_Init+0xec>)
 800548c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005490:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8005492:	4b2c      	ldr	r3, [pc, #176]	; (8005544 <MX_TIM2_Init+0xec>)
 8005494:	22c7      	movs	r2, #199	; 0xc7
 8005496:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005498:	4b2a      	ldr	r3, [pc, #168]	; (8005544 <MX_TIM2_Init+0xec>)
 800549a:	2200      	movs	r2, #0
 800549c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 800549e:	4b29      	ldr	r3, [pc, #164]	; (8005544 <MX_TIM2_Init+0xec>)
 80054a0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80054a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054a6:	4b27      	ldr	r3, [pc, #156]	; (8005544 <MX_TIM2_Init+0xec>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80054ac:	4b25      	ldr	r3, [pc, #148]	; (8005544 <MX_TIM2_Init+0xec>)
 80054ae:	2280      	movs	r2, #128	; 0x80
 80054b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80054b2:	4824      	ldr	r0, [pc, #144]	; (8005544 <MX_TIM2_Init+0xec>)
 80054b4:	f007 fe07 	bl	800d0c6 <HAL_TIM_Base_Init>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80054be:	f7ff fa3f 	bl	8004940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80054c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054cc:	4619      	mov	r1, r3
 80054ce:	481d      	ldr	r0, [pc, #116]	; (8005544 <MX_TIM2_Init+0xec>)
 80054d0:	f008 fbce 	bl	800dc70 <HAL_TIM_ConfigClockSource>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80054da:	f7ff fa31 	bl	8004940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80054de:	4819      	ldr	r0, [pc, #100]	; (8005544 <MX_TIM2_Init+0xec>)
 80054e0:	f007 feef 	bl	800d2c2 <HAL_TIM_PWM_Init>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80054ea:	f7ff fa29 	bl	8004940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054f2:	2300      	movs	r3, #0
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80054f6:	f107 031c 	add.w	r3, r7, #28
 80054fa:	4619      	mov	r1, r3
 80054fc:	4811      	ldr	r0, [pc, #68]	; (8005544 <MX_TIM2_Init+0xec>)
 80054fe:	f009 f90b 	bl	800e718 <HAL_TIMEx_MasterConfigSynchronization>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005508:	f7ff fa1a 	bl	8004940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800550c:	2360      	movs	r3, #96	; 0x60
 800550e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8005510:	f240 1339 	movw	r3, #313	; 0x139
 8005514:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005516:	2300      	movs	r3, #0
 8005518:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800551a:	2300      	movs	r3, #0
 800551c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800551e:	463b      	mov	r3, r7
 8005520:	2208      	movs	r2, #8
 8005522:	4619      	mov	r1, r3
 8005524:	4807      	ldr	r0, [pc, #28]	; (8005544 <MX_TIM2_Init+0xec>)
 8005526:	f008 fa8f 	bl	800da48 <HAL_TIM_PWM_ConfigChannel>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8005530:	f7ff fa06 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005534:	4803      	ldr	r0, [pc, #12]	; (8005544 <MX_TIM2_Init+0xec>)
 8005536:	f000 fd5b 	bl	8005ff0 <HAL_TIM_MspPostInit>

}
 800553a:	bf00      	nop
 800553c:	3738      	adds	r7, #56	; 0x38
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	24000de8 	.word	0x24000de8

08005548 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08e      	sub	sp, #56	; 0x38
 800554c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800554e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	605a      	str	r2, [r3, #4]
 8005558:	609a      	str	r2, [r3, #8]
 800555a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800555c:	f107 031c 	add.w	r3, r7, #28
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005568:	463b      	mov	r3, r7
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	605a      	str	r2, [r3, #4]
 8005570:	609a      	str	r2, [r3, #8]
 8005572:	60da      	str	r2, [r3, #12]
 8005574:	611a      	str	r2, [r3, #16]
 8005576:	615a      	str	r2, [r3, #20]
 8005578:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800557a:	4b2d      	ldr	r3, [pc, #180]	; (8005630 <MX_TIM3_Init+0xe8>)
 800557c:	4a2d      	ldr	r2, [pc, #180]	; (8005634 <MX_TIM3_Init+0xec>)
 800557e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8005580:	4b2b      	ldr	r3, [pc, #172]	; (8005630 <MX_TIM3_Init+0xe8>)
 8005582:	22c7      	movs	r2, #199	; 0xc7
 8005584:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005586:	4b2a      	ldr	r3, [pc, #168]	; (8005630 <MX_TIM3_Init+0xe8>)
 8005588:	2200      	movs	r2, #0
 800558a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 800558c:	4b28      	ldr	r3, [pc, #160]	; (8005630 <MX_TIM3_Init+0xe8>)
 800558e:	f640 125f 	movw	r2, #2399	; 0x95f
 8005592:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005594:	4b26      	ldr	r3, [pc, #152]	; (8005630 <MX_TIM3_Init+0xe8>)
 8005596:	2200      	movs	r2, #0
 8005598:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800559a:	4b25      	ldr	r3, [pc, #148]	; (8005630 <MX_TIM3_Init+0xe8>)
 800559c:	2280      	movs	r2, #128	; 0x80
 800559e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80055a0:	4823      	ldr	r0, [pc, #140]	; (8005630 <MX_TIM3_Init+0xe8>)
 80055a2:	f007 fd90 	bl	800d0c6 <HAL_TIM_Base_Init>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80055ac:	f7ff f9c8 	bl	8004940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80055b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055ba:	4619      	mov	r1, r3
 80055bc:	481c      	ldr	r0, [pc, #112]	; (8005630 <MX_TIM3_Init+0xe8>)
 80055be:	f008 fb57 	bl	800dc70 <HAL_TIM_ConfigClockSource>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80055c8:	f7ff f9ba 	bl	8004940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80055cc:	4818      	ldr	r0, [pc, #96]	; (8005630 <MX_TIM3_Init+0xe8>)
 80055ce:	f007 fe78 	bl	800d2c2 <HAL_TIM_PWM_Init>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80055d8:	f7ff f9b2 	bl	8004940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055dc:	2300      	movs	r3, #0
 80055de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055e0:	2300      	movs	r3, #0
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80055e4:	f107 031c 	add.w	r3, r7, #28
 80055e8:	4619      	mov	r1, r3
 80055ea:	4811      	ldr	r0, [pc, #68]	; (8005630 <MX_TIM3_Init+0xe8>)
 80055ec:	f009 f894 	bl	800e718 <HAL_TIMEx_MasterConfigSynchronization>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80055f6:	f7ff f9a3 	bl	8004940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055fa:	2360      	movs	r3, #96	; 0x60
 80055fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005602:	2300      	movs	r3, #0
 8005604:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005606:	2300      	movs	r3, #0
 8005608:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800560a:	463b      	mov	r3, r7
 800560c:	2200      	movs	r2, #0
 800560e:	4619      	mov	r1, r3
 8005610:	4807      	ldr	r0, [pc, #28]	; (8005630 <MX_TIM3_Init+0xe8>)
 8005612:	f008 fa19 	bl	800da48 <HAL_TIM_PWM_ConfigChannel>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800561c:	f7ff f990 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005620:	4803      	ldr	r0, [pc, #12]	; (8005630 <MX_TIM3_Init+0xe8>)
 8005622:	f000 fce5 	bl	8005ff0 <HAL_TIM_MspPostInit>

}
 8005626:	bf00      	nop
 8005628:	3738      	adds	r7, #56	; 0x38
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	24000e34 	.word	0x24000e34
 8005634:	40000400 	.word	0x40000400

08005638 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08e      	sub	sp, #56	; 0x38
 800563c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800563e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	605a      	str	r2, [r3, #4]
 8005648:	609a      	str	r2, [r3, #8]
 800564a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800564c:	f107 031c 	add.w	r3, r7, #28
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	605a      	str	r2, [r3, #4]
 8005656:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005658:	463b      	mov	r3, r7
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	605a      	str	r2, [r3, #4]
 8005660:	609a      	str	r2, [r3, #8]
 8005662:	60da      	str	r2, [r3, #12]
 8005664:	611a      	str	r2, [r3, #16]
 8005666:	615a      	str	r2, [r3, #20]
 8005668:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800566a:	4b2d      	ldr	r3, [pc, #180]	; (8005720 <MX_TIM4_Init+0xe8>)
 800566c:	4a2d      	ldr	r2, [pc, #180]	; (8005724 <MX_TIM4_Init+0xec>)
 800566e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8005670:	4b2b      	ldr	r3, [pc, #172]	; (8005720 <MX_TIM4_Init+0xe8>)
 8005672:	22ef      	movs	r2, #239	; 0xef
 8005674:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005676:	4b2a      	ldr	r3, [pc, #168]	; (8005720 <MX_TIM4_Init+0xe8>)
 8005678:	2200      	movs	r2, #0
 800567a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 800567c:	4b28      	ldr	r3, [pc, #160]	; (8005720 <MX_TIM4_Init+0xe8>)
 800567e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005682:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005684:	4b26      	ldr	r3, [pc, #152]	; (8005720 <MX_TIM4_Init+0xe8>)
 8005686:	2200      	movs	r2, #0
 8005688:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800568a:	4b25      	ldr	r3, [pc, #148]	; (8005720 <MX_TIM4_Init+0xe8>)
 800568c:	2280      	movs	r2, #128	; 0x80
 800568e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005690:	4823      	ldr	r0, [pc, #140]	; (8005720 <MX_TIM4_Init+0xe8>)
 8005692:	f007 fd18 	bl	800d0c6 <HAL_TIM_Base_Init>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800569c:	f7ff f950 	bl	8004940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80056a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056aa:	4619      	mov	r1, r3
 80056ac:	481c      	ldr	r0, [pc, #112]	; (8005720 <MX_TIM4_Init+0xe8>)
 80056ae:	f008 fadf 	bl	800dc70 <HAL_TIM_ConfigClockSource>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80056b8:	f7ff f942 	bl	8004940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80056bc:	4818      	ldr	r0, [pc, #96]	; (8005720 <MX_TIM4_Init+0xe8>)
 80056be:	f007 fe00 	bl	800d2c2 <HAL_TIM_PWM_Init>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80056c8:	f7ff f93a 	bl	8004940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056cc:	2300      	movs	r3, #0
 80056ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056d0:	2300      	movs	r3, #0
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80056d4:	f107 031c 	add.w	r3, r7, #28
 80056d8:	4619      	mov	r1, r3
 80056da:	4811      	ldr	r0, [pc, #68]	; (8005720 <MX_TIM4_Init+0xe8>)
 80056dc:	f009 f81c 	bl	800e718 <HAL_TIMEx_MasterConfigSynchronization>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80056e6:	f7ff f92b 	bl	8004940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056ea:	2360      	movs	r3, #96	; 0x60
 80056ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80056ee:	2300      	movs	r3, #0
 80056f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80056fa:	463b      	mov	r3, r7
 80056fc:	2208      	movs	r2, #8
 80056fe:	4619      	mov	r1, r3
 8005700:	4807      	ldr	r0, [pc, #28]	; (8005720 <MX_TIM4_Init+0xe8>)
 8005702:	f008 f9a1 	bl	800da48 <HAL_TIM_PWM_ConfigChannel>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800570c:	f7ff f918 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005710:	4803      	ldr	r0, [pc, #12]	; (8005720 <MX_TIM4_Init+0xe8>)
 8005712:	f000 fc6d 	bl	8005ff0 <HAL_TIM_MspPostInit>

}
 8005716:	bf00      	nop
 8005718:	3738      	adds	r7, #56	; 0x38
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	24000e80 	.word	0x24000e80
 8005724:	40000800 	.word	0x40000800

08005728 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800572e:	f107 0310 	add.w	r3, r7, #16
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	605a      	str	r2, [r3, #4]
 8005738:	609a      	str	r2, [r3, #8]
 800573a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800573c:	1d3b      	adds	r3, r7, #4
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	605a      	str	r2, [r3, #4]
 8005744:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005746:	4b1d      	ldr	r3, [pc, #116]	; (80057bc <MX_TIM5_Init+0x94>)
 8005748:	4a1d      	ldr	r2, [pc, #116]	; (80057c0 <MX_TIM5_Init+0x98>)
 800574a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 800574c:	4b1b      	ldr	r3, [pc, #108]	; (80057bc <MX_TIM5_Init+0x94>)
 800574e:	22c7      	movs	r2, #199	; 0xc7
 8005750:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005752:	4b1a      	ldr	r3, [pc, #104]	; (80057bc <MX_TIM5_Init+0x94>)
 8005754:	2200      	movs	r2, #0
 8005756:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8005758:	4b18      	ldr	r3, [pc, #96]	; (80057bc <MX_TIM5_Init+0x94>)
 800575a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800575e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005760:	4b16      	ldr	r3, [pc, #88]	; (80057bc <MX_TIM5_Init+0x94>)
 8005762:	2200      	movs	r2, #0
 8005764:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005766:	4b15      	ldr	r3, [pc, #84]	; (80057bc <MX_TIM5_Init+0x94>)
 8005768:	2200      	movs	r2, #0
 800576a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800576c:	4813      	ldr	r0, [pc, #76]	; (80057bc <MX_TIM5_Init+0x94>)
 800576e:	f007 fcaa 	bl	800d0c6 <HAL_TIM_Base_Init>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005778:	f7ff f8e2 	bl	8004940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800577c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005780:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005782:	f107 0310 	add.w	r3, r7, #16
 8005786:	4619      	mov	r1, r3
 8005788:	480c      	ldr	r0, [pc, #48]	; (80057bc <MX_TIM5_Init+0x94>)
 800578a:	f008 fa71 	bl	800dc70 <HAL_TIM_ConfigClockSource>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005794:	f7ff f8d4 	bl	8004940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005798:	2300      	movs	r3, #0
 800579a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800579c:	2300      	movs	r3, #0
 800579e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80057a0:	1d3b      	adds	r3, r7, #4
 80057a2:	4619      	mov	r1, r3
 80057a4:	4805      	ldr	r0, [pc, #20]	; (80057bc <MX_TIM5_Init+0x94>)
 80057a6:	f008 ffb7 	bl	800e718 <HAL_TIMEx_MasterConfigSynchronization>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80057b0:	f7ff f8c6 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80057b4:	bf00      	nop
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	24000ecc 	.word	0x24000ecc
 80057c0:	40000c00 	.word	0x40000c00

080057c4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057ca:	1d3b      	adds	r3, r7, #4
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	605a      	str	r2, [r3, #4]
 80057d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80057d4:	4b14      	ldr	r3, [pc, #80]	; (8005828 <MX_TIM6_Init+0x64>)
 80057d6:	4a15      	ldr	r2, [pc, #84]	; (800582c <MX_TIM6_Init+0x68>)
 80057d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 80057da:	4b13      	ldr	r3, [pc, #76]	; (8005828 <MX_TIM6_Init+0x64>)
 80057dc:	22c7      	movs	r2, #199	; 0xc7
 80057de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057e0:	4b11      	ldr	r3, [pc, #68]	; (8005828 <MX_TIM6_Init+0x64>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 80057e6:	4b10      	ldr	r3, [pc, #64]	; (8005828 <MX_TIM6_Init+0x64>)
 80057e8:	f241 726f 	movw	r2, #5999	; 0x176f
 80057ec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80057ee:	4b0e      	ldr	r3, [pc, #56]	; (8005828 <MX_TIM6_Init+0x64>)
 80057f0:	2280      	movs	r2, #128	; 0x80
 80057f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80057f4:	480c      	ldr	r0, [pc, #48]	; (8005828 <MX_TIM6_Init+0x64>)
 80057f6:	f007 fc66 	bl	800d0c6 <HAL_TIM_Base_Init>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8005800:	f7ff f89e 	bl	8004940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005804:	2300      	movs	r3, #0
 8005806:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005808:	2300      	movs	r3, #0
 800580a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800580c:	1d3b      	adds	r3, r7, #4
 800580e:	4619      	mov	r1, r3
 8005810:	4805      	ldr	r0, [pc, #20]	; (8005828 <MX_TIM6_Init+0x64>)
 8005812:	f008 ff81 	bl	800e718 <HAL_TIMEx_MasterConfigSynchronization>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800581c:	f7ff f890 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005820:	bf00      	nop
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	24000f18 	.word	0x24000f18
 800582c:	40001000 	.word	0x40001000

08005830 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005836:	1d3b      	adds	r3, r7, #4
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	605a      	str	r2, [r3, #4]
 800583e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005840:	4b14      	ldr	r3, [pc, #80]	; (8005894 <MX_TIM7_Init+0x64>)
 8005842:	4a15      	ldr	r2, [pc, #84]	; (8005898 <MX_TIM7_Init+0x68>)
 8005844:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8005846:	4b13      	ldr	r3, [pc, #76]	; (8005894 <MX_TIM7_Init+0x64>)
 8005848:	22c7      	movs	r2, #199	; 0xc7
 800584a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800584c:	4b11      	ldr	r3, [pc, #68]	; (8005894 <MX_TIM7_Init+0x64>)
 800584e:	2200      	movs	r2, #0
 8005850:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8005852:	4b10      	ldr	r3, [pc, #64]	; (8005894 <MX_TIM7_Init+0x64>)
 8005854:	f240 42af 	movw	r2, #1199	; 0x4af
 8005858:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800585a:	4b0e      	ldr	r3, [pc, #56]	; (8005894 <MX_TIM7_Init+0x64>)
 800585c:	2280      	movs	r2, #128	; 0x80
 800585e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005860:	480c      	ldr	r0, [pc, #48]	; (8005894 <MX_TIM7_Init+0x64>)
 8005862:	f007 fc30 	bl	800d0c6 <HAL_TIM_Base_Init>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800586c:	f7ff f868 	bl	8004940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005870:	2300      	movs	r3, #0
 8005872:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005878:	1d3b      	adds	r3, r7, #4
 800587a:	4619      	mov	r1, r3
 800587c:	4805      	ldr	r0, [pc, #20]	; (8005894 <MX_TIM7_Init+0x64>)
 800587e:	f008 ff4b 	bl	800e718 <HAL_TIMEx_MasterConfigSynchronization>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005888:	f7ff f85a 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800588c:	bf00      	nop
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	24000f64 	.word	0x24000f64
 8005898:	40001400 	.word	0x40001400

0800589c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08c      	sub	sp, #48	; 0x30
 80058a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80058a2:	f107 030c 	add.w	r3, r7, #12
 80058a6:	2224      	movs	r2, #36	; 0x24
 80058a8:	2100      	movs	r1, #0
 80058aa:	4618      	mov	r0, r3
 80058ac:	f00c fd50 	bl	8012350 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058b0:	463b      	mov	r3, r7
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	605a      	str	r2, [r3, #4]
 80058b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80058ba:	4b23      	ldr	r3, [pc, #140]	; (8005948 <MX_TIM8_Init+0xac>)
 80058bc:	4a23      	ldr	r2, [pc, #140]	; (800594c <MX_TIM8_Init+0xb0>)
 80058be:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80058c0:	4b21      	ldr	r3, [pc, #132]	; (8005948 <MX_TIM8_Init+0xac>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058c6:	4b20      	ldr	r3, [pc, #128]	; (8005948 <MX_TIM8_Init+0xac>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2048-1;
 80058cc:	4b1e      	ldr	r3, [pc, #120]	; (8005948 <MX_TIM8_Init+0xac>)
 80058ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80058d2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058d4:	4b1c      	ldr	r3, [pc, #112]	; (8005948 <MX_TIM8_Init+0xac>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80058da:	4b1b      	ldr	r3, [pc, #108]	; (8005948 <MX_TIM8_Init+0xac>)
 80058dc:	2200      	movs	r2, #0
 80058de:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80058e0:	4b19      	ldr	r3, [pc, #100]	; (8005948 <MX_TIM8_Init+0xac>)
 80058e2:	2280      	movs	r2, #128	; 0x80
 80058e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80058e6:	2303      	movs	r3, #3
 80058e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80058ea:	2300      	movs	r3, #0
 80058ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80058ee:	2301      	movs	r3, #1
 80058f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80058f2:	2300      	movs	r3, #0
 80058f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80058f6:	230f      	movs	r3, #15
 80058f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80058fa:	2300      	movs	r3, #0
 80058fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80058fe:	2301      	movs	r3, #1
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005902:	2300      	movs	r3, #0
 8005904:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8005906:	230f      	movs	r3, #15
 8005908:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800590a:	f107 030c 	add.w	r3, r7, #12
 800590e:	4619      	mov	r1, r3
 8005910:	480d      	ldr	r0, [pc, #52]	; (8005948 <MX_TIM8_Init+0xac>)
 8005912:	f007 fe45 	bl	800d5a0 <HAL_TIM_Encoder_Init>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800591c:	f7ff f810 	bl	8004940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005920:	2300      	movs	r3, #0
 8005922:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005924:	2300      	movs	r3, #0
 8005926:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005928:	2300      	movs	r3, #0
 800592a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800592c:	463b      	mov	r3, r7
 800592e:	4619      	mov	r1, r3
 8005930:	4805      	ldr	r0, [pc, #20]	; (8005948 <MX_TIM8_Init+0xac>)
 8005932:	f008 fef1 	bl	800e718 <HAL_TIMEx_MasterConfigSynchronization>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800593c:	f7ff f800 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005940:	bf00      	nop
 8005942:	3730      	adds	r7, #48	; 0x30
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	24000fb0 	.word	0x24000fb0
 800594c:	40010400 	.word	0x40010400

08005950 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005956:	463b      	mov	r3, r7
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	605a      	str	r2, [r3, #4]
 800595e:	609a      	str	r2, [r3, #8]
 8005960:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8005962:	4b16      	ldr	r3, [pc, #88]	; (80059bc <MX_TIM12_Init+0x6c>)
 8005964:	4a16      	ldr	r2, [pc, #88]	; (80059c0 <MX_TIM12_Init+0x70>)
 8005966:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8005968:	4b14      	ldr	r3, [pc, #80]	; (80059bc <MX_TIM12_Init+0x6c>)
 800596a:	22c7      	movs	r2, #199	; 0xc7
 800596c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800596e:	4b13      	ldr	r3, [pc, #76]	; (80059bc <MX_TIM12_Init+0x6c>)
 8005970:	2200      	movs	r2, #0
 8005972:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8005974:	4b11      	ldr	r3, [pc, #68]	; (80059bc <MX_TIM12_Init+0x6c>)
 8005976:	f240 2257 	movw	r2, #599	; 0x257
 800597a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800597c:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <MX_TIM12_Init+0x6c>)
 800597e:	2200      	movs	r2, #0
 8005980:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005982:	4b0e      	ldr	r3, [pc, #56]	; (80059bc <MX_TIM12_Init+0x6c>)
 8005984:	2280      	movs	r2, #128	; 0x80
 8005986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8005988:	480c      	ldr	r0, [pc, #48]	; (80059bc <MX_TIM12_Init+0x6c>)
 800598a:	f007 fb9c 	bl	800d0c6 <HAL_TIM_Base_Init>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8005994:	f7fe ffd4 	bl	8004940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800599c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800599e:	463b      	mov	r3, r7
 80059a0:	4619      	mov	r1, r3
 80059a2:	4806      	ldr	r0, [pc, #24]	; (80059bc <MX_TIM12_Init+0x6c>)
 80059a4:	f008 f964 	bl	800dc70 <HAL_TIM_ConfigClockSource>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80059ae:	f7fe ffc7 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80059b2:	bf00      	nop
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	24000ffc 	.word	0x24000ffc
 80059c0:	40001800 	.word	0x40001800

080059c4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80059c8:	4b0e      	ldr	r3, [pc, #56]	; (8005a04 <MX_TIM13_Init+0x40>)
 80059ca:	4a0f      	ldr	r2, [pc, #60]	; (8005a08 <MX_TIM13_Init+0x44>)
 80059cc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 80059ce:	4b0d      	ldr	r3, [pc, #52]	; (8005a04 <MX_TIM13_Init+0x40>)
 80059d0:	22c7      	movs	r2, #199	; 0xc7
 80059d2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059d4:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <MX_TIM13_Init+0x40>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 80059da:	4b0a      	ldr	r3, [pc, #40]	; (8005a04 <MX_TIM13_Init+0x40>)
 80059dc:	f240 2257 	movw	r2, #599	; 0x257
 80059e0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059e2:	4b08      	ldr	r3, [pc, #32]	; (8005a04 <MX_TIM13_Init+0x40>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80059e8:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <MX_TIM13_Init+0x40>)
 80059ea:	2280      	movs	r2, #128	; 0x80
 80059ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80059ee:	4805      	ldr	r0, [pc, #20]	; (8005a04 <MX_TIM13_Init+0x40>)
 80059f0:	f007 fb69 	bl	800d0c6 <HAL_TIM_Base_Init>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80059fa:	f7fe ffa1 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80059fe:	bf00      	nop
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	24001048 	.word	0x24001048
 8005a08:	40001c00 	.word	0x40001c00

08005a0c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005a10:	4b0e      	ldr	r3, [pc, #56]	; (8005a4c <MX_TIM14_Init+0x40>)
 8005a12:	4a0f      	ldr	r2, [pc, #60]	; (8005a50 <MX_TIM14_Init+0x44>)
 8005a14:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8005a16:	4b0d      	ldr	r3, [pc, #52]	; (8005a4c <MX_TIM14_Init+0x40>)
 8005a18:	22c7      	movs	r2, #199	; 0xc7
 8005a1a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	; (8005a4c <MX_TIM14_Init+0x40>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8005a22:	4b0a      	ldr	r3, [pc, #40]	; (8005a4c <MX_TIM14_Init+0x40>)
 8005a24:	f640 125f 	movw	r2, #2399	; 0x95f
 8005a28:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a2a:	4b08      	ldr	r3, [pc, #32]	; (8005a4c <MX_TIM14_Init+0x40>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a30:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <MX_TIM14_Init+0x40>)
 8005a32:	2280      	movs	r2, #128	; 0x80
 8005a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005a36:	4805      	ldr	r0, [pc, #20]	; (8005a4c <MX_TIM14_Init+0x40>)
 8005a38:	f007 fb45 	bl	800d0c6 <HAL_TIM_Base_Init>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8005a42:	f7fe ff7d 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8005a46:	bf00      	nop
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	24001094 	.word	0x24001094
 8005a50:	40002000 	.word	0x40002000

08005a54 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b09a      	sub	sp, #104	; 0x68
 8005a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	605a      	str	r2, [r3, #4]
 8005a64:	609a      	str	r2, [r3, #8]
 8005a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	605a      	str	r2, [r3, #4]
 8005a72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	605a      	str	r2, [r3, #4]
 8005a7e:	609a      	str	r2, [r3, #8]
 8005a80:	60da      	str	r2, [r3, #12]
 8005a82:	611a      	str	r2, [r3, #16]
 8005a84:	615a      	str	r2, [r3, #20]
 8005a86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005a88:	1d3b      	adds	r3, r7, #4
 8005a8a:	222c      	movs	r2, #44	; 0x2c
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f00c fc5e 	bl	8012350 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005a94:	4b3f      	ldr	r3, [pc, #252]	; (8005b94 <MX_TIM15_Init+0x140>)
 8005a96:	4a40      	ldr	r2, [pc, #256]	; (8005b98 <MX_TIM15_Init+0x144>)
 8005a98:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8005a9a:	4b3e      	ldr	r3, [pc, #248]	; (8005b94 <MX_TIM15_Init+0x140>)
 8005a9c:	22ef      	movs	r2, #239	; 0xef
 8005a9e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005aa0:	4b3c      	ldr	r3, [pc, #240]	; (8005b94 <MX_TIM15_Init+0x140>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8005aa6:	4b3b      	ldr	r3, [pc, #236]	; (8005b94 <MX_TIM15_Init+0x140>)
 8005aa8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005aac:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005aae:	4b39      	ldr	r3, [pc, #228]	; (8005b94 <MX_TIM15_Init+0x140>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005ab4:	4b37      	ldr	r3, [pc, #220]	; (8005b94 <MX_TIM15_Init+0x140>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005aba:	4b36      	ldr	r3, [pc, #216]	; (8005b94 <MX_TIM15_Init+0x140>)
 8005abc:	2280      	movs	r2, #128	; 0x80
 8005abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005ac0:	4834      	ldr	r0, [pc, #208]	; (8005b94 <MX_TIM15_Init+0x140>)
 8005ac2:	f007 fb00 	bl	800d0c6 <HAL_TIM_Base_Init>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8005acc:	f7fe ff38 	bl	8004940 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ad4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005ad6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005ada:	4619      	mov	r1, r3
 8005adc:	482d      	ldr	r0, [pc, #180]	; (8005b94 <MX_TIM15_Init+0x140>)
 8005ade:	f008 f8c7 	bl	800dc70 <HAL_TIM_ConfigClockSource>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8005ae8:	f7fe ff2a 	bl	8004940 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005aec:	4829      	ldr	r0, [pc, #164]	; (8005b94 <MX_TIM15_Init+0x140>)
 8005aee:	f007 fbe8 	bl	800d2c2 <HAL_TIM_PWM_Init>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8005af8:	f7fe ff22 	bl	8004940 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005afc:	2300      	movs	r3, #0
 8005afe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b00:	2300      	movs	r3, #0
 8005b02:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005b04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005b08:	4619      	mov	r1, r3
 8005b0a:	4822      	ldr	r0, [pc, #136]	; (8005b94 <MX_TIM15_Init+0x140>)
 8005b0c:	f008 fe04 	bl	800e718 <HAL_TIMEx_MasterConfigSynchronization>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8005b16:	f7fe ff13 	bl	8004940 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b1a:	2360      	movs	r3, #96	; 0x60
 8005b1c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8005b1e:	f240 1339 	movw	r3, #313	; 0x139
 8005b22:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b24:	2300      	movs	r3, #0
 8005b26:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005b30:	2300      	movs	r3, #0
 8005b32:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005b34:	2300      	movs	r3, #0
 8005b36:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005b38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b3c:	2204      	movs	r2, #4
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4814      	ldr	r0, [pc, #80]	; (8005b94 <MX_TIM15_Init+0x140>)
 8005b42:	f007 ff81 	bl	800da48 <HAL_TIM_PWM_ConfigChannel>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8005b4c:	f7fe fef8 	bl	8004940 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b50:	2300      	movs	r3, #0
 8005b52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005b54:	2300      	movs	r3, #0
 8005b56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b68:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8005b72:	1d3b      	adds	r3, r7, #4
 8005b74:	4619      	mov	r1, r3
 8005b76:	4807      	ldr	r0, [pc, #28]	; (8005b94 <MX_TIM15_Init+0x140>)
 8005b78:	f008 fe5c 	bl	800e834 <HAL_TIMEx_ConfigBreakDeadTime>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8005b82:	f7fe fedd 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8005b86:	4803      	ldr	r0, [pc, #12]	; (8005b94 <MX_TIM15_Init+0x140>)
 8005b88:	f000 fa32 	bl	8005ff0 <HAL_TIM_MspPostInit>

}
 8005b8c:	bf00      	nop
 8005b8e:	3768      	adds	r7, #104	; 0x68
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	240010e0 	.word	0x240010e0
 8005b98:	40014000 	.word	0x40014000

08005b9c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005ba0:	4b0f      	ldr	r3, [pc, #60]	; (8005be0 <MX_TIM16_Init+0x44>)
 8005ba2:	4a10      	ldr	r2, [pc, #64]	; (8005be4 <MX_TIM16_Init+0x48>)
 8005ba4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 240-1;
 8005ba6:	4b0e      	ldr	r3, [pc, #56]	; (8005be0 <MX_TIM16_Init+0x44>)
 8005ba8:	22ef      	movs	r2, #239	; 0xef
 8005baa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bac:	4b0c      	ldr	r3, [pc, #48]	; (8005be0 <MX_TIM16_Init+0x44>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8005bb2:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <MX_TIM16_Init+0x44>)
 8005bb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005bb8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bba:	4b09      	ldr	r3, [pc, #36]	; (8005be0 <MX_TIM16_Init+0x44>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005bc0:	4b07      	ldr	r3, [pc, #28]	; (8005be0 <MX_TIM16_Init+0x44>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005bc6:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <MX_TIM16_Init+0x44>)
 8005bc8:	2280      	movs	r2, #128	; 0x80
 8005bca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005bcc:	4804      	ldr	r0, [pc, #16]	; (8005be0 <MX_TIM16_Init+0x44>)
 8005bce:	f007 fa7a 	bl	800d0c6 <HAL_TIM_Base_Init>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005bd8:	f7fe feb2 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005bdc:	bf00      	nop
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	2400112c 	.word	0x2400112c
 8005be4:	40014400 	.word	0x40014400

08005be8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8005bec:	4b10      	ldr	r3, [pc, #64]	; (8005c30 <MX_TIM17_Init+0x48>)
 8005bee:	4a11      	ldr	r2, [pc, #68]	; (8005c34 <MX_TIM17_Init+0x4c>)
 8005bf0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2400-1;
 8005bf2:	4b0f      	ldr	r3, [pc, #60]	; (8005c30 <MX_TIM17_Init+0x48>)
 8005bf4:	f640 125f 	movw	r2, #2399	; 0x95f
 8005bf8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <MX_TIM17_Init+0x48>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2000-1;
 8005c00:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <MX_TIM17_Init+0x48>)
 8005c02:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8005c06:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c08:	4b09      	ldr	r3, [pc, #36]	; (8005c30 <MX_TIM17_Init+0x48>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005c0e:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <MX_TIM17_Init+0x48>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005c14:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <MX_TIM17_Init+0x48>)
 8005c16:	2280      	movs	r2, #128	; 0x80
 8005c18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005c1a:	4805      	ldr	r0, [pc, #20]	; (8005c30 <MX_TIM17_Init+0x48>)
 8005c1c:	f007 fa53 	bl	800d0c6 <HAL_TIM_Base_Init>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8005c26:	f7fe fe8b 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8005c2a:	bf00      	nop
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	24001178 	.word	0x24001178
 8005c34:	40014800 	.word	0x40014800

08005c38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b090      	sub	sp, #64	; 0x40
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4aa8      	ldr	r2, [pc, #672]	; (8005ee8 <HAL_TIM_Base_MspInit+0x2b0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d10f      	bne.n	8005c6a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005c4a:	4ba8      	ldr	r3, [pc, #672]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c50:	4aa6      	ldr	r2, [pc, #664]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005c52:	f043 0301 	orr.w	r3, r3, #1
 8005c56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005c5a:	4ba4      	ldr	r3, [pc, #656]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8005c68:	e13a      	b.n	8005ee0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM2)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c72:	d10f      	bne.n	8005c94 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c74:	4b9d      	ldr	r3, [pc, #628]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005c76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c7a:	4a9c      	ldr	r2, [pc, #624]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005c7c:	f043 0301 	orr.w	r3, r3, #1
 8005c80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c84:	4b99      	ldr	r3, [pc, #612]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005c86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005c92:	e125      	b.n	8005ee0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM3)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a95      	ldr	r2, [pc, #596]	; (8005ef0 <HAL_TIM_Base_MspInit+0x2b8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d10f      	bne.n	8005cbe <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c9e:	4b93      	ldr	r3, [pc, #588]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ca4:	4a91      	ldr	r2, [pc, #580]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005ca6:	f043 0302 	orr.w	r3, r3, #2
 8005caa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005cae:	4b8f      	ldr	r3, [pc, #572]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005cb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005cbc:	e110      	b.n	8005ee0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM4)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a8c      	ldr	r2, [pc, #560]	; (8005ef4 <HAL_TIM_Base_MspInit+0x2bc>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d10f      	bne.n	8005ce8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005cc8:	4b88      	ldr	r3, [pc, #544]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005cca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005cce:	4a87      	ldr	r2, [pc, #540]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005cd0:	f043 0304 	orr.w	r3, r3, #4
 8005cd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005cd8:	4b84      	ldr	r3, [pc, #528]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005cda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005cde:	f003 0304 	and.w	r3, r3, #4
 8005ce2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005ce6:	e0fb      	b.n	8005ee0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM5)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a82      	ldr	r2, [pc, #520]	; (8005ef8 <HAL_TIM_Base_MspInit+0x2c0>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d117      	bne.n	8005d22 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005cf2:	4b7e      	ldr	r3, [pc, #504]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005cf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005cf8:	4a7c      	ldr	r2, [pc, #496]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005cfa:	f043 0308 	orr.w	r3, r3, #8
 8005cfe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005d02:	4b7a      	ldr	r3, [pc, #488]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005d04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d08:	f003 0308 	and.w	r3, r3, #8
 8005d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8005d10:	2200      	movs	r2, #0
 8005d12:	2100      	movs	r1, #0
 8005d14:	2032      	movs	r0, #50	; 0x32
 8005d16:	f001 f838 	bl	8006d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005d1a:	2032      	movs	r0, #50	; 0x32
 8005d1c:	f001 f84f 	bl	8006dbe <HAL_NVIC_EnableIRQ>
}
 8005d20:	e0de      	b.n	8005ee0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM6)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a75      	ldr	r2, [pc, #468]	; (8005efc <HAL_TIM_Base_MspInit+0x2c4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d117      	bne.n	8005d5c <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005d2c:	4b6f      	ldr	r3, [pc, #444]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005d2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d32:	4a6e      	ldr	r2, [pc, #440]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005d34:	f043 0310 	orr.w	r3, r3, #16
 8005d38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005d3c:	4b6b      	ldr	r3, [pc, #428]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005d3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d42:	f003 0310 	and.w	r3, r3, #16
 8005d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	2036      	movs	r0, #54	; 0x36
 8005d50:	f001 f81b 	bl	8006d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005d54:	2036      	movs	r0, #54	; 0x36
 8005d56:	f001 f832 	bl	8006dbe <HAL_NVIC_EnableIRQ>
}
 8005d5a:	e0c1      	b.n	8005ee0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM7)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a67      	ldr	r2, [pc, #412]	; (8005f00 <HAL_TIM_Base_MspInit+0x2c8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d117      	bne.n	8005d96 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005d66:	4b61      	ldr	r3, [pc, #388]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d6c:	4a5f      	ldr	r2, [pc, #380]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005d6e:	f043 0320 	orr.w	r3, r3, #32
 8005d72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005d76:	4b5d      	ldr	r3, [pc, #372]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d7c:	f003 0320 	and.w	r3, r3, #32
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005d84:	2200      	movs	r2, #0
 8005d86:	2100      	movs	r1, #0
 8005d88:	2037      	movs	r0, #55	; 0x37
 8005d8a:	f000 fffe 	bl	8006d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005d8e:	2037      	movs	r0, #55	; 0x37
 8005d90:	f001 f815 	bl	8006dbe <HAL_NVIC_EnableIRQ>
}
 8005d94:	e0a4      	b.n	8005ee0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM12)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a5a      	ldr	r2, [pc, #360]	; (8005f04 <HAL_TIM_Base_MspInit+0x2cc>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d117      	bne.n	8005dd0 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005da0:	4b52      	ldr	r3, [pc, #328]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005da2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005da6:	4a51      	ldr	r2, [pc, #324]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005db0:	4b4e      	ldr	r3, [pc, #312]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005db2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dba:	623b      	str	r3, [r7, #32]
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	202b      	movs	r0, #43	; 0x2b
 8005dc4:	f000 ffe1 	bl	8006d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005dc8:	202b      	movs	r0, #43	; 0x2b
 8005dca:	f000 fff8 	bl	8006dbe <HAL_NVIC_EnableIRQ>
}
 8005dce:	e087      	b.n	8005ee0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM13)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a4c      	ldr	r2, [pc, #304]	; (8005f08 <HAL_TIM_Base_MspInit+0x2d0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d117      	bne.n	8005e0a <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005dda:	4b44      	ldr	r3, [pc, #272]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005ddc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005de0:	4a42      	ldr	r2, [pc, #264]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005dea:	4b40      	ldr	r3, [pc, #256]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df4:	61fb      	str	r3, [r7, #28]
 8005df6:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	202c      	movs	r0, #44	; 0x2c
 8005dfe:	f000 ffc4 	bl	8006d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005e02:	202c      	movs	r0, #44	; 0x2c
 8005e04:	f000 ffdb 	bl	8006dbe <HAL_NVIC_EnableIRQ>
}
 8005e08:	e06a      	b.n	8005ee0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM14)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a3f      	ldr	r2, [pc, #252]	; (8005f0c <HAL_TIM_Base_MspInit+0x2d4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d117      	bne.n	8005e44 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005e14:	4b35      	ldr	r3, [pc, #212]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005e16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e1a:	4a34      	ldr	r2, [pc, #208]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e24:	4b31      	ldr	r3, [pc, #196]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005e26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e2e:	61bb      	str	r3, [r7, #24]
 8005e30:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005e32:	2200      	movs	r2, #0
 8005e34:	2100      	movs	r1, #0
 8005e36:	202d      	movs	r0, #45	; 0x2d
 8005e38:	f000 ffa7 	bl	8006d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005e3c:	202d      	movs	r0, #45	; 0x2d
 8005e3e:	f000 ffbe 	bl	8006dbe <HAL_NVIC_EnableIRQ>
}
 8005e42:	e04d      	b.n	8005ee0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM15)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a31      	ldr	r2, [pc, #196]	; (8005f10 <HAL_TIM_Base_MspInit+0x2d8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d10f      	bne.n	8005e6e <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005e4e:	4b27      	ldr	r3, [pc, #156]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005e50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e54:	4a25      	ldr	r2, [pc, #148]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005e56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005e5e:	4b23      	ldr	r3, [pc, #140]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	697b      	ldr	r3, [r7, #20]
}
 8005e6c:	e038      	b.n	8005ee0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM16)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a28      	ldr	r2, [pc, #160]	; (8005f14 <HAL_TIM_Base_MspInit+0x2dc>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d117      	bne.n	8005ea8 <HAL_TIM_Base_MspInit+0x270>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005e78:	4b1c      	ldr	r3, [pc, #112]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005e7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e7e:	4a1b      	ldr	r2, [pc, #108]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e84:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005e88:	4b18      	ldr	r3, [pc, #96]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005e8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e92:	613b      	str	r3, [r7, #16]
 8005e94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8005e96:	2200      	movs	r2, #0
 8005e98:	2100      	movs	r1, #0
 8005e9a:	2075      	movs	r0, #117	; 0x75
 8005e9c:	f000 ff75 	bl	8006d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005ea0:	2075      	movs	r0, #117	; 0x75
 8005ea2:	f000 ff8c 	bl	8006dbe <HAL_NVIC_EnableIRQ>
}
 8005ea6:	e01b      	b.n	8005ee0 <HAL_TIM_Base_MspInit+0x2a8>
  else if(tim_baseHandle->Instance==TIM17)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a1a      	ldr	r2, [pc, #104]	; (8005f18 <HAL_TIM_Base_MspInit+0x2e0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d116      	bne.n	8005ee0 <HAL_TIM_Base_MspInit+0x2a8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005eb2:	4b0e      	ldr	r3, [pc, #56]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005eb8:	4a0c      	ldr	r2, [pc, #48]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005eba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ebe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005ec2:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <HAL_TIM_Base_MspInit+0x2b4>)
 8005ec4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ec8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	2076      	movs	r0, #118	; 0x76
 8005ed6:	f000 ff58 	bl	8006d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005eda:	2076      	movs	r0, #118	; 0x76
 8005edc:	f000 ff6f 	bl	8006dbe <HAL_NVIC_EnableIRQ>
}
 8005ee0:	bf00      	nop
 8005ee2:	3740      	adds	r7, #64	; 0x40
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40010000 	.word	0x40010000
 8005eec:	58024400 	.word	0x58024400
 8005ef0:	40000400 	.word	0x40000400
 8005ef4:	40000800 	.word	0x40000800
 8005ef8:	40000c00 	.word	0x40000c00
 8005efc:	40001000 	.word	0x40001000
 8005f00:	40001400 	.word	0x40001400
 8005f04:	40001800 	.word	0x40001800
 8005f08:	40001c00 	.word	0x40001c00
 8005f0c:	40002000 	.word	0x40002000
 8005f10:	40014000 	.word	0x40014000
 8005f14:	40014400 	.word	0x40014400
 8005f18:	40014800 	.word	0x40014800

08005f1c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08a      	sub	sp, #40	; 0x28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f24:	f107 0314 	add.w	r3, r7, #20
 8005f28:	2200      	movs	r2, #0
 8005f2a:	601a      	str	r2, [r3, #0]
 8005f2c:	605a      	str	r2, [r3, #4]
 8005f2e:	609a      	str	r2, [r3, #8]
 8005f30:	60da      	str	r2, [r3, #12]
 8005f32:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM8)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a2a      	ldr	r2, [pc, #168]	; (8005fe4 <HAL_TIM_Encoder_MspInit+0xc8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d14d      	bne.n	8005fda <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005f3e:	4b2a      	ldr	r3, [pc, #168]	; (8005fe8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f44:	4a28      	ldr	r2, [pc, #160]	; (8005fe8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005f46:	f043 0302 	orr.w	r3, r3, #2
 8005f4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005f4e:	4b26      	ldr	r3, [pc, #152]	; (8005fe8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	613b      	str	r3, [r7, #16]
 8005f5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f5c:	4b22      	ldr	r3, [pc, #136]	; (8005fe8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f62:	4a21      	ldr	r2, [pc, #132]	; (8005fe8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005f64:	f043 0304 	orr.w	r3, r3, #4
 8005f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f6c:	4b1e      	ldr	r3, [pc, #120]	; (8005fe8 <HAL_TIM_Encoder_MspInit+0xcc>)
 8005f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005f7a:	23c0      	movs	r3, #192	; 0xc0
 8005f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f7e:	2302      	movs	r3, #2
 8005f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f86:	2300      	movs	r3, #0
 8005f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f8e:	f107 0314 	add.w	r3, r7, #20
 8005f92:	4619      	mov	r1, r3
 8005f94:	4815      	ldr	r0, [pc, #84]	; (8005fec <HAL_TIM_Encoder_MspInit+0xd0>)
 8005f96:	f003 ff73 	bl	8009e80 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	202b      	movs	r0, #43	; 0x2b
 8005fa0:	f000 fef3 	bl	8006d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005fa4:	202b      	movs	r0, #43	; 0x2b
 8005fa6:	f000 ff0a 	bl	8006dbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005faa:	2200      	movs	r2, #0
 8005fac:	2100      	movs	r1, #0
 8005fae:	202c      	movs	r0, #44	; 0x2c
 8005fb0:	f000 feeb 	bl	8006d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005fb4:	202c      	movs	r0, #44	; 0x2c
 8005fb6:	f000 ff02 	bl	8006dbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005fba:	2200      	movs	r2, #0
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	202d      	movs	r0, #45	; 0x2d
 8005fc0:	f000 fee3 	bl	8006d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005fc4:	202d      	movs	r0, #45	; 0x2d
 8005fc6:	f000 fefa 	bl	8006dbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2100      	movs	r1, #0
 8005fce:	202e      	movs	r0, #46	; 0x2e
 8005fd0:	f000 fedb 	bl	8006d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8005fd4:	202e      	movs	r0, #46	; 0x2e
 8005fd6:	f000 fef2 	bl	8006dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8005fda:	bf00      	nop
 8005fdc:	3728      	adds	r7, #40	; 0x28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	40010400 	.word	0x40010400
 8005fe8:	58024400 	.word	0x58024400
 8005fec:	58020800 	.word	0x58020800

08005ff0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08c      	sub	sp, #48	; 0x30
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ff8:	f107 031c 	add.w	r3, r7, #28
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	605a      	str	r2, [r3, #4]
 8006002:	609a      	str	r2, [r3, #8]
 8006004:	60da      	str	r2, [r3, #12]
 8006006:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a5e      	ldr	r2, [pc, #376]	; (8006188 <HAL_TIM_MspPostInit+0x198>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d120      	bne.n	8006054 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006012:	4b5e      	ldr	r3, [pc, #376]	; (800618c <HAL_TIM_MspPostInit+0x19c>)
 8006014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006018:	4a5c      	ldr	r2, [pc, #368]	; (800618c <HAL_TIM_MspPostInit+0x19c>)
 800601a:	f043 0310 	orr.w	r3, r3, #16
 800601e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006022:	4b5a      	ldr	r3, [pc, #360]	; (800618c <HAL_TIM_MspPostInit+0x19c>)
 8006024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006028:	f003 0310 	and.w	r3, r3, #16
 800602c:	61bb      	str	r3, [r7, #24]
 800602e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8006030:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006036:	2302      	movs	r3, #2
 8006038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800603a:	2300      	movs	r3, #0
 800603c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800603e:	2300      	movs	r3, #0
 8006040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006042:	2301      	movs	r3, #1
 8006044:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8006046:	f107 031c 	add.w	r3, r7, #28
 800604a:	4619      	mov	r1, r3
 800604c:	4850      	ldr	r0, [pc, #320]	; (8006190 <HAL_TIM_MspPostInit+0x1a0>)
 800604e:	f003 ff17 	bl	8009e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8006052:	e094      	b.n	800617e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605c:	d120      	bne.n	80060a0 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800605e:	4b4b      	ldr	r3, [pc, #300]	; (800618c <HAL_TIM_MspPostInit+0x19c>)
 8006060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006064:	4a49      	ldr	r2, [pc, #292]	; (800618c <HAL_TIM_MspPostInit+0x19c>)
 8006066:	f043 0302 	orr.w	r3, r3, #2
 800606a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800606e:	4b47      	ldr	r3, [pc, #284]	; (800618c <HAL_TIM_MspPostInit+0x19c>)
 8006070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006074:	f003 0302 	and.w	r3, r3, #2
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 800607c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006082:	2302      	movs	r3, #2
 8006084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006086:	2300      	movs	r3, #0
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800608a:	2300      	movs	r3, #0
 800608c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800608e:	2301      	movs	r3, #1
 8006090:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8006092:	f107 031c 	add.w	r3, r7, #28
 8006096:	4619      	mov	r1, r3
 8006098:	483e      	ldr	r0, [pc, #248]	; (8006194 <HAL_TIM_MspPostInit+0x1a4>)
 800609a:	f003 fef1 	bl	8009e80 <HAL_GPIO_Init>
}
 800609e:	e06e      	b.n	800617e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a3c      	ldr	r2, [pc, #240]	; (8006198 <HAL_TIM_MspPostInit+0x1a8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d11f      	bne.n	80060ea <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060aa:	4b38      	ldr	r3, [pc, #224]	; (800618c <HAL_TIM_MspPostInit+0x19c>)
 80060ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060b0:	4a36      	ldr	r2, [pc, #216]	; (800618c <HAL_TIM_MspPostInit+0x19c>)
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060ba:	4b34      	ldr	r3, [pc, #208]	; (800618c <HAL_TIM_MspPostInit+0x19c>)
 80060bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 80060c8:	2340      	movs	r3, #64	; 0x40
 80060ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060cc:	2302      	movs	r3, #2
 80060ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060d4:	2300      	movs	r3, #0
 80060d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80060d8:	2302      	movs	r3, #2
 80060da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 80060dc:	f107 031c 	add.w	r3, r7, #28
 80060e0:	4619      	mov	r1, r3
 80060e2:	482e      	ldr	r0, [pc, #184]	; (800619c <HAL_TIM_MspPostInit+0x1ac>)
 80060e4:	f003 fecc 	bl	8009e80 <HAL_GPIO_Init>
}
 80060e8:	e049      	b.n	800617e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a2c      	ldr	r2, [pc, #176]	; (80061a0 <HAL_TIM_MspPostInit+0x1b0>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d120      	bne.n	8006136 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060f4:	4b25      	ldr	r3, [pc, #148]	; (800618c <HAL_TIM_MspPostInit+0x19c>)
 80060f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060fa:	4a24      	ldr	r2, [pc, #144]	; (800618c <HAL_TIM_MspPostInit+0x19c>)
 80060fc:	f043 0302 	orr.w	r3, r3, #2
 8006100:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006104:	4b21      	ldr	r3, [pc, #132]	; (800618c <HAL_TIM_MspPostInit+0x19c>)
 8006106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800610a:	f003 0302 	and.w	r3, r3, #2
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8006112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006118:	2302      	movs	r3, #2
 800611a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800611c:	2300      	movs	r3, #0
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006120:	2300      	movs	r3, #0
 8006122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006124:	2302      	movs	r3, #2
 8006126:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8006128:	f107 031c 	add.w	r3, r7, #28
 800612c:	4619      	mov	r1, r3
 800612e:	4819      	ldr	r0, [pc, #100]	; (8006194 <HAL_TIM_MspPostInit+0x1a4>)
 8006130:	f003 fea6 	bl	8009e80 <HAL_GPIO_Init>
}
 8006134:	e023      	b.n	800617e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a1a      	ldr	r2, [pc, #104]	; (80061a4 <HAL_TIM_MspPostInit+0x1b4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d11e      	bne.n	800617e <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006140:	4b12      	ldr	r3, [pc, #72]	; (800618c <HAL_TIM_MspPostInit+0x19c>)
 8006142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006146:	4a11      	ldr	r2, [pc, #68]	; (800618c <HAL_TIM_MspPostInit+0x19c>)
 8006148:	f043 0310 	orr.w	r3, r3, #16
 800614c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006150:	4b0e      	ldr	r3, [pc, #56]	; (800618c <HAL_TIM_MspPostInit+0x19c>)
 8006152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006156:	f003 0310 	and.w	r3, r3, #16
 800615a:	60bb      	str	r3, [r7, #8]
 800615c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 800615e:	2340      	movs	r3, #64	; 0x40
 8006160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006162:	2302      	movs	r3, #2
 8006164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006166:	2300      	movs	r3, #0
 8006168:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800616a:	2300      	movs	r3, #0
 800616c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800616e:	2304      	movs	r3, #4
 8006170:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8006172:	f107 031c 	add.w	r3, r7, #28
 8006176:	4619      	mov	r1, r3
 8006178:	4805      	ldr	r0, [pc, #20]	; (8006190 <HAL_TIM_MspPostInit+0x1a0>)
 800617a:	f003 fe81 	bl	8009e80 <HAL_GPIO_Init>
}
 800617e:	bf00      	nop
 8006180:	3730      	adds	r7, #48	; 0x30
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	40010000 	.word	0x40010000
 800618c:	58024400 	.word	0x58024400
 8006190:	58021000 	.word	0x58021000
 8006194:	58020400 	.word	0x58020400
 8006198:	40000400 	.word	0x40000400
 800619c:	58020000 	.word	0x58020000
 80061a0:	40000800 	.word	0x40000800
 80061a4:	40014000 	.word	0x40014000

080061a8 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80061ac:	4b25      	ldr	r3, [pc, #148]	; (8006244 <MX_UART4_Init+0x9c>)
 80061ae:	4a26      	ldr	r2, [pc, #152]	; (8006248 <MX_UART4_Init+0xa0>)
 80061b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 80061b2:	4b24      	ldr	r3, [pc, #144]	; (8006244 <MX_UART4_Init+0x9c>)
 80061b4:	4a25      	ldr	r2, [pc, #148]	; (800624c <MX_UART4_Init+0xa4>)
 80061b6:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80061b8:	4b22      	ldr	r3, [pc, #136]	; (8006244 <MX_UART4_Init+0x9c>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80061be:	4b21      	ldr	r3, [pc, #132]	; (8006244 <MX_UART4_Init+0x9c>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80061c4:	4b1f      	ldr	r3, [pc, #124]	; (8006244 <MX_UART4_Init+0x9c>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80061ca:	4b1e      	ldr	r3, [pc, #120]	; (8006244 <MX_UART4_Init+0x9c>)
 80061cc:	220c      	movs	r2, #12
 80061ce:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80061d0:	4b1c      	ldr	r3, [pc, #112]	; (8006244 <MX_UART4_Init+0x9c>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80061d6:	4b1b      	ldr	r3, [pc, #108]	; (8006244 <MX_UART4_Init+0x9c>)
 80061d8:	2200      	movs	r2, #0
 80061da:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80061dc:	4b19      	ldr	r3, [pc, #100]	; (8006244 <MX_UART4_Init+0x9c>)
 80061de:	2200      	movs	r2, #0
 80061e0:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80061e2:	4b18      	ldr	r3, [pc, #96]	; (8006244 <MX_UART4_Init+0x9c>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80061e8:	4b16      	ldr	r3, [pc, #88]	; (8006244 <MX_UART4_Init+0x9c>)
 80061ea:	2208      	movs	r2, #8
 80061ec:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80061ee:	4b15      	ldr	r3, [pc, #84]	; (8006244 <MX_UART4_Init+0x9c>)
 80061f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80061f4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80061f6:	4813      	ldr	r0, [pc, #76]	; (8006244 <MX_UART4_Init+0x9c>)
 80061f8:	f008 fbb8 	bl	800e96c <HAL_UART_Init>
 80061fc:	4603      	mov	r3, r0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d001      	beq.n	8006206 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8006202:	f7fe fb9d 	bl	8004940 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8006206:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800620a:	480e      	ldr	r0, [pc, #56]	; (8006244 <MX_UART4_Init+0x9c>)
 800620c:	f00a fc51 	bl	8010ab2 <HAL_UARTEx_SetTxFifoThreshold>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8006216:	f7fe fb93 	bl	8004940 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800621a:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800621e:	4809      	ldr	r0, [pc, #36]	; (8006244 <MX_UART4_Init+0x9c>)
 8006220:	f00a fc85 	bl	8010b2e <HAL_UARTEx_SetRxFifoThreshold>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <MX_UART4_Init+0x86>
  {
    Error_Handler();
 800622a:	f7fe fb89 	bl	8004940 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 800622e:	4805      	ldr	r0, [pc, #20]	; (8006244 <MX_UART4_Init+0x9c>)
 8006230:	f00a fbcb 	bl	80109ca <HAL_UARTEx_EnableFifoMode>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <MX_UART4_Init+0x96>
  {
    Error_Handler();
 800623a:	f7fe fb81 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800623e:	bf00      	nop
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	240011c4 	.word	0x240011c4
 8006248:	40004c00 	.word	0x40004c00
 800624c:	001e8480 	.word	0x001e8480

08006250 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8006254:	4b23      	ldr	r3, [pc, #140]	; (80062e4 <MX_UART7_Init+0x94>)
 8006256:	4a24      	ldr	r2, [pc, #144]	; (80062e8 <MX_UART7_Init+0x98>)
 8006258:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800625a:	4b22      	ldr	r3, [pc, #136]	; (80062e4 <MX_UART7_Init+0x94>)
 800625c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006260:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8006262:	4b20      	ldr	r3, [pc, #128]	; (80062e4 <MX_UART7_Init+0x94>)
 8006264:	2200      	movs	r2, #0
 8006266:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8006268:	4b1e      	ldr	r3, [pc, #120]	; (80062e4 <MX_UART7_Init+0x94>)
 800626a:	2200      	movs	r2, #0
 800626c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800626e:	4b1d      	ldr	r3, [pc, #116]	; (80062e4 <MX_UART7_Init+0x94>)
 8006270:	2200      	movs	r2, #0
 8006272:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8006274:	4b1b      	ldr	r3, [pc, #108]	; (80062e4 <MX_UART7_Init+0x94>)
 8006276:	220c      	movs	r2, #12
 8006278:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800627a:	4b1a      	ldr	r3, [pc, #104]	; (80062e4 <MX_UART7_Init+0x94>)
 800627c:	2200      	movs	r2, #0
 800627e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8006280:	4b18      	ldr	r3, [pc, #96]	; (80062e4 <MX_UART7_Init+0x94>)
 8006282:	2200      	movs	r2, #0
 8006284:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006286:	4b17      	ldr	r3, [pc, #92]	; (80062e4 <MX_UART7_Init+0x94>)
 8006288:	2200      	movs	r2, #0
 800628a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800628c:	4b15      	ldr	r3, [pc, #84]	; (80062e4 <MX_UART7_Init+0x94>)
 800628e:	2200      	movs	r2, #0
 8006290:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006292:	4b14      	ldr	r3, [pc, #80]	; (80062e4 <MX_UART7_Init+0x94>)
 8006294:	2200      	movs	r2, #0
 8006296:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8006298:	4812      	ldr	r0, [pc, #72]	; (80062e4 <MX_UART7_Init+0x94>)
 800629a:	f008 fb67 	bl	800e96c <HAL_UART_Init>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80062a4:	f7fe fb4c 	bl	8004940 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80062a8:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80062ac:	480d      	ldr	r0, [pc, #52]	; (80062e4 <MX_UART7_Init+0x94>)
 80062ae:	f00a fc00 	bl	8010ab2 <HAL_UARTEx_SetTxFifoThreshold>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 80062b8:	f7fe fb42 	bl	8004940 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80062bc:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80062c0:	4808      	ldr	r0, [pc, #32]	; (80062e4 <MX_UART7_Init+0x94>)
 80062c2:	f00a fc34 	bl	8010b2e <HAL_UARTEx_SetRxFifoThreshold>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 80062cc:	f7fe fb38 	bl	8004940 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 80062d0:	4804      	ldr	r0, [pc, #16]	; (80062e4 <MX_UART7_Init+0x94>)
 80062d2:	f00a fb7a 	bl	80109ca <HAL_UARTEx_EnableFifoMode>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 80062dc:	f7fe fb30 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80062e0:	bf00      	nop
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	24001254 	.word	0x24001254
 80062e8:	40007800 	.word	0x40007800

080062ec <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80062f0:	4b22      	ldr	r3, [pc, #136]	; (800637c <MX_USART2_UART_Init+0x90>)
 80062f2:	4a23      	ldr	r2, [pc, #140]	; (8006380 <MX_USART2_UART_Init+0x94>)
 80062f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80062f6:	4b21      	ldr	r3, [pc, #132]	; (800637c <MX_USART2_UART_Init+0x90>)
 80062f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80062fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80062fe:	4b1f      	ldr	r3, [pc, #124]	; (800637c <MX_USART2_UART_Init+0x90>)
 8006300:	2200      	movs	r2, #0
 8006302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006304:	4b1d      	ldr	r3, [pc, #116]	; (800637c <MX_USART2_UART_Init+0x90>)
 8006306:	2200      	movs	r2, #0
 8006308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800630a:	4b1c      	ldr	r3, [pc, #112]	; (800637c <MX_USART2_UART_Init+0x90>)
 800630c:	2200      	movs	r2, #0
 800630e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006310:	4b1a      	ldr	r3, [pc, #104]	; (800637c <MX_USART2_UART_Init+0x90>)
 8006312:	220c      	movs	r2, #12
 8006314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006316:	4b19      	ldr	r3, [pc, #100]	; (800637c <MX_USART2_UART_Init+0x90>)
 8006318:	2200      	movs	r2, #0
 800631a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800631c:	4b17      	ldr	r3, [pc, #92]	; (800637c <MX_USART2_UART_Init+0x90>)
 800631e:	2200      	movs	r2, #0
 8006320:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006322:	4b16      	ldr	r3, [pc, #88]	; (800637c <MX_USART2_UART_Init+0x90>)
 8006324:	2200      	movs	r2, #0
 8006326:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006328:	4b14      	ldr	r3, [pc, #80]	; (800637c <MX_USART2_UART_Init+0x90>)
 800632a:	2200      	movs	r2, #0
 800632c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800632e:	4b13      	ldr	r3, [pc, #76]	; (800637c <MX_USART2_UART_Init+0x90>)
 8006330:	2200      	movs	r2, #0
 8006332:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006334:	4811      	ldr	r0, [pc, #68]	; (800637c <MX_USART2_UART_Init+0x90>)
 8006336:	f008 fb19 	bl	800e96c <HAL_UART_Init>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8006340:	f7fe fafe 	bl	8004940 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006344:	2100      	movs	r1, #0
 8006346:	480d      	ldr	r0, [pc, #52]	; (800637c <MX_USART2_UART_Init+0x90>)
 8006348:	f00a fbb3 	bl	8010ab2 <HAL_UARTEx_SetTxFifoThreshold>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8006352:	f7fe faf5 	bl	8004940 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006356:	2100      	movs	r1, #0
 8006358:	4808      	ldr	r0, [pc, #32]	; (800637c <MX_USART2_UART_Init+0x90>)
 800635a:	f00a fbe8 	bl	8010b2e <HAL_UARTEx_SetRxFifoThreshold>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8006364:	f7fe faec 	bl	8004940 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006368:	4804      	ldr	r0, [pc, #16]	; (800637c <MX_USART2_UART_Init+0x90>)
 800636a:	f00a fb69 	bl	8010a40 <HAL_UARTEx_DisableFifoMode>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8006374:	f7fe fae4 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006378:	bf00      	nop
 800637a:	bd80      	pop	{r7, pc}
 800637c:	240012e4 	.word	0x240012e4
 8006380:	40004400 	.word	0x40004400

08006384 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006388:	4b22      	ldr	r3, [pc, #136]	; (8006414 <MX_USART3_UART_Init+0x90>)
 800638a:	4a23      	ldr	r2, [pc, #140]	; (8006418 <MX_USART3_UART_Init+0x94>)
 800638c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800638e:	4b21      	ldr	r3, [pc, #132]	; (8006414 <MX_USART3_UART_Init+0x90>)
 8006390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006394:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006396:	4b1f      	ldr	r3, [pc, #124]	; (8006414 <MX_USART3_UART_Init+0x90>)
 8006398:	2200      	movs	r2, #0
 800639a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800639c:	4b1d      	ldr	r3, [pc, #116]	; (8006414 <MX_USART3_UART_Init+0x90>)
 800639e:	2200      	movs	r2, #0
 80063a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80063a2:	4b1c      	ldr	r3, [pc, #112]	; (8006414 <MX_USART3_UART_Init+0x90>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80063a8:	4b1a      	ldr	r3, [pc, #104]	; (8006414 <MX_USART3_UART_Init+0x90>)
 80063aa:	220c      	movs	r2, #12
 80063ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80063ae:	4b19      	ldr	r3, [pc, #100]	; (8006414 <MX_USART3_UART_Init+0x90>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80063b4:	4b17      	ldr	r3, [pc, #92]	; (8006414 <MX_USART3_UART_Init+0x90>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80063ba:	4b16      	ldr	r3, [pc, #88]	; (8006414 <MX_USART3_UART_Init+0x90>)
 80063bc:	2200      	movs	r2, #0
 80063be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80063c0:	4b14      	ldr	r3, [pc, #80]	; (8006414 <MX_USART3_UART_Init+0x90>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80063c6:	4b13      	ldr	r3, [pc, #76]	; (8006414 <MX_USART3_UART_Init+0x90>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80063cc:	4811      	ldr	r0, [pc, #68]	; (8006414 <MX_USART3_UART_Init+0x90>)
 80063ce:	f008 facd 	bl	800e96c <HAL_UART_Init>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80063d8:	f7fe fab2 	bl	8004940 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80063dc:	2100      	movs	r1, #0
 80063de:	480d      	ldr	r0, [pc, #52]	; (8006414 <MX_USART3_UART_Init+0x90>)
 80063e0:	f00a fb67 	bl	8010ab2 <HAL_UARTEx_SetTxFifoThreshold>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80063ea:	f7fe faa9 	bl	8004940 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80063ee:	2100      	movs	r1, #0
 80063f0:	4808      	ldr	r0, [pc, #32]	; (8006414 <MX_USART3_UART_Init+0x90>)
 80063f2:	f00a fb9c 	bl	8010b2e <HAL_UARTEx_SetRxFifoThreshold>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80063fc:	f7fe faa0 	bl	8004940 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006400:	4804      	ldr	r0, [pc, #16]	; (8006414 <MX_USART3_UART_Init+0x90>)
 8006402:	f00a fb1d 	bl	8010a40 <HAL_UARTEx_DisableFifoMode>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800640c:	f7fe fa98 	bl	8004940 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006410:	bf00      	nop
 8006412:	bd80      	pop	{r7, pc}
 8006414:	24001374 	.word	0x24001374
 8006418:	40004800 	.word	0x40004800

0800641c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b0be      	sub	sp, #248	; 0xf8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006424:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	605a      	str	r2, [r3, #4]
 800642e:	609a      	str	r2, [r3, #8]
 8006430:	60da      	str	r2, [r3, #12]
 8006432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006434:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006438:	22bc      	movs	r2, #188	; 0xbc
 800643a:	2100      	movs	r1, #0
 800643c:	4618      	mov	r0, r3
 800643e:	f00b ff87 	bl	8012350 <memset>
  if(uartHandle->Instance==UART4)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4aa1      	ldr	r2, [pc, #644]	; (80066cc <HAL_UART_MspInit+0x2b0>)
 8006448:	4293      	cmp	r3, r2
 800644a:	f040 80b7 	bne.w	80065bc <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800644e:	2302      	movs	r3, #2
 8006450:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006452:	2300      	movs	r3, #0
 8006454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800645c:	4618      	mov	r0, r3
 800645e:	f004 fee7 	bl	800b230 <HAL_RCCEx_PeriphCLKConfig>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8006468:	f7fe fa6a 	bl	8004940 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800646c:	4b98      	ldr	r3, [pc, #608]	; (80066d0 <HAL_UART_MspInit+0x2b4>)
 800646e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006472:	4a97      	ldr	r2, [pc, #604]	; (80066d0 <HAL_UART_MspInit+0x2b4>)
 8006474:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006478:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800647c:	4b94      	ldr	r3, [pc, #592]	; (80066d0 <HAL_UART_MspInit+0x2b4>)
 800647e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800648a:	4b91      	ldr	r3, [pc, #580]	; (80066d0 <HAL_UART_MspInit+0x2b4>)
 800648c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006490:	4a8f      	ldr	r2, [pc, #572]	; (80066d0 <HAL_UART_MspInit+0x2b4>)
 8006492:	f043 0308 	orr.w	r3, r3, #8
 8006496:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800649a:	4b8d      	ldr	r3, [pc, #564]	; (80066d0 <HAL_UART_MspInit+0x2b4>)
 800649c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	623b      	str	r3, [r7, #32]
 80064a6:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80064a8:	2303      	movs	r3, #3
 80064aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064ae:	2302      	movs	r3, #2
 80064b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b4:	2300      	movs	r3, #0
 80064b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064ba:	2300      	movs	r3, #0
 80064bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80064c0:	2308      	movs	r3, #8
 80064c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80064ca:	4619      	mov	r1, r3
 80064cc:	4881      	ldr	r0, [pc, #516]	; (80066d4 <HAL_UART_MspInit+0x2b8>)
 80064ce:	f003 fcd7 	bl	8009e80 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80064d2:	4b81      	ldr	r3, [pc, #516]	; (80066d8 <HAL_UART_MspInit+0x2bc>)
 80064d4:	4a81      	ldr	r2, [pc, #516]	; (80066dc <HAL_UART_MspInit+0x2c0>)
 80064d6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80064d8:	4b7f      	ldr	r3, [pc, #508]	; (80066d8 <HAL_UART_MspInit+0x2bc>)
 80064da:	223f      	movs	r2, #63	; 0x3f
 80064dc:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064de:	4b7e      	ldr	r3, [pc, #504]	; (80066d8 <HAL_UART_MspInit+0x2bc>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064e4:	4b7c      	ldr	r3, [pc, #496]	; (80066d8 <HAL_UART_MspInit+0x2bc>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80064ea:	4b7b      	ldr	r3, [pc, #492]	; (80066d8 <HAL_UART_MspInit+0x2bc>)
 80064ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064f0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064f2:	4b79      	ldr	r3, [pc, #484]	; (80066d8 <HAL_UART_MspInit+0x2bc>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064f8:	4b77      	ldr	r3, [pc, #476]	; (80066d8 <HAL_UART_MspInit+0x2bc>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80064fe:	4b76      	ldr	r3, [pc, #472]	; (80066d8 <HAL_UART_MspInit+0x2bc>)
 8006500:	2200      	movs	r2, #0
 8006502:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006504:	4b74      	ldr	r3, [pc, #464]	; (80066d8 <HAL_UART_MspInit+0x2bc>)
 8006506:	2200      	movs	r2, #0
 8006508:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800650a:	4b73      	ldr	r3, [pc, #460]	; (80066d8 <HAL_UART_MspInit+0x2bc>)
 800650c:	2204      	movs	r2, #4
 800650e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006510:	4b71      	ldr	r3, [pc, #452]	; (80066d8 <HAL_UART_MspInit+0x2bc>)
 8006512:	2203      	movs	r2, #3
 8006514:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006516:	4b70      	ldr	r3, [pc, #448]	; (80066d8 <HAL_UART_MspInit+0x2bc>)
 8006518:	2200      	movs	r2, #0
 800651a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800651c:	4b6e      	ldr	r3, [pc, #440]	; (80066d8 <HAL_UART_MspInit+0x2bc>)
 800651e:	2200      	movs	r2, #0
 8006520:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006522:	486d      	ldr	r0, [pc, #436]	; (80066d8 <HAL_UART_MspInit+0x2bc>)
 8006524:	f000 fe70 	bl	8007208 <HAL_DMA_Init>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800652e:	f7fe fa07 	bl	8004940 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a68      	ldr	r2, [pc, #416]	; (80066d8 <HAL_UART_MspInit+0x2bc>)
 8006536:	67da      	str	r2, [r3, #124]	; 0x7c
 8006538:	4a67      	ldr	r2, [pc, #412]	; (80066d8 <HAL_UART_MspInit+0x2bc>)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800653e:	4b68      	ldr	r3, [pc, #416]	; (80066e0 <HAL_UART_MspInit+0x2c4>)
 8006540:	4a68      	ldr	r2, [pc, #416]	; (80066e4 <HAL_UART_MspInit+0x2c8>)
 8006542:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8006544:	4b66      	ldr	r3, [pc, #408]	; (80066e0 <HAL_UART_MspInit+0x2c4>)
 8006546:	2240      	movs	r2, #64	; 0x40
 8006548:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800654a:	4b65      	ldr	r3, [pc, #404]	; (80066e0 <HAL_UART_MspInit+0x2c4>)
 800654c:	2240      	movs	r2, #64	; 0x40
 800654e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006550:	4b63      	ldr	r3, [pc, #396]	; (80066e0 <HAL_UART_MspInit+0x2c4>)
 8006552:	2200      	movs	r2, #0
 8006554:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006556:	4b62      	ldr	r3, [pc, #392]	; (80066e0 <HAL_UART_MspInit+0x2c4>)
 8006558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800655c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800655e:	4b60      	ldr	r3, [pc, #384]	; (80066e0 <HAL_UART_MspInit+0x2c4>)
 8006560:	2200      	movs	r2, #0
 8006562:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006564:	4b5e      	ldr	r3, [pc, #376]	; (80066e0 <HAL_UART_MspInit+0x2c4>)
 8006566:	2200      	movs	r2, #0
 8006568:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800656a:	4b5d      	ldr	r3, [pc, #372]	; (80066e0 <HAL_UART_MspInit+0x2c4>)
 800656c:	2200      	movs	r2, #0
 800656e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006570:	4b5b      	ldr	r3, [pc, #364]	; (80066e0 <HAL_UART_MspInit+0x2c4>)
 8006572:	2200      	movs	r2, #0
 8006574:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006576:	4b5a      	ldr	r3, [pc, #360]	; (80066e0 <HAL_UART_MspInit+0x2c4>)
 8006578:	2204      	movs	r2, #4
 800657a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800657c:	4b58      	ldr	r3, [pc, #352]	; (80066e0 <HAL_UART_MspInit+0x2c4>)
 800657e:	2203      	movs	r2, #3
 8006580:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006582:	4b57      	ldr	r3, [pc, #348]	; (80066e0 <HAL_UART_MspInit+0x2c4>)
 8006584:	2200      	movs	r2, #0
 8006586:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006588:	4b55      	ldr	r3, [pc, #340]	; (80066e0 <HAL_UART_MspInit+0x2c4>)
 800658a:	2200      	movs	r2, #0
 800658c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800658e:	4854      	ldr	r0, [pc, #336]	; (80066e0 <HAL_UART_MspInit+0x2c4>)
 8006590:	f000 fe3a 	bl	8007208 <HAL_DMA_Init>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 800659a:	f7fe f9d1 	bl	8004940 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a4f      	ldr	r2, [pc, #316]	; (80066e0 <HAL_UART_MspInit+0x2c4>)
 80065a2:	679a      	str	r2, [r3, #120]	; 0x78
 80065a4:	4a4e      	ldr	r2, [pc, #312]	; (80066e0 <HAL_UART_MspInit+0x2c4>)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80065aa:	2200      	movs	r2, #0
 80065ac:	2100      	movs	r1, #0
 80065ae:	2034      	movs	r0, #52	; 0x34
 80065b0:	f000 fbeb 	bl	8006d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80065b4:	2034      	movs	r0, #52	; 0x34
 80065b6:	f000 fc02 	bl	8006dbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80065ba:	e20d      	b.n	80069d8 <HAL_UART_MspInit+0x5bc>
  else if(uartHandle->Instance==UART7)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a49      	ldr	r2, [pc, #292]	; (80066e8 <HAL_UART_MspInit+0x2cc>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	f040 8098 	bne.w	80066f8 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80065c8:	2302      	movs	r3, #2
 80065ca:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80065cc:	2300      	movs	r3, #0
 80065ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065d6:	4618      	mov	r0, r3
 80065d8:	f004 fe2a 	bl	800b230 <HAL_RCCEx_PeriphCLKConfig>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 80065e2:	f7fe f9ad 	bl	8004940 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80065e6:	4b3a      	ldr	r3, [pc, #232]	; (80066d0 <HAL_UART_MspInit+0x2b4>)
 80065e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065ec:	4a38      	ldr	r2, [pc, #224]	; (80066d0 <HAL_UART_MspInit+0x2b4>)
 80065ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80065f6:	4b36      	ldr	r3, [pc, #216]	; (80066d0 <HAL_UART_MspInit+0x2b4>)
 80065f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006600:	61fb      	str	r3, [r7, #28]
 8006602:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006604:	4b32      	ldr	r3, [pc, #200]	; (80066d0 <HAL_UART_MspInit+0x2b4>)
 8006606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800660a:	4a31      	ldr	r2, [pc, #196]	; (80066d0 <HAL_UART_MspInit+0x2b4>)
 800660c:	f043 0310 	orr.w	r3, r3, #16
 8006610:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006614:	4b2e      	ldr	r3, [pc, #184]	; (80066d0 <HAL_UART_MspInit+0x2b4>)
 8006616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800661a:	f003 0310 	and.w	r3, r3, #16
 800661e:	61bb      	str	r3, [r7, #24]
 8006620:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8006622:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800662a:	2302      	movs	r3, #2
 800662c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006630:	2300      	movs	r3, #0
 8006632:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006636:	2300      	movs	r3, #0
 8006638:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800663c:	2307      	movs	r3, #7
 800663e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006642:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006646:	4619      	mov	r1, r3
 8006648:	4828      	ldr	r0, [pc, #160]	; (80066ec <HAL_UART_MspInit+0x2d0>)
 800664a:	f003 fc19 	bl	8009e80 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 800664e:	4b28      	ldr	r3, [pc, #160]	; (80066f0 <HAL_UART_MspInit+0x2d4>)
 8006650:	4a28      	ldr	r2, [pc, #160]	; (80066f4 <HAL_UART_MspInit+0x2d8>)
 8006652:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8006654:	4b26      	ldr	r3, [pc, #152]	; (80066f0 <HAL_UART_MspInit+0x2d4>)
 8006656:	2250      	movs	r2, #80	; 0x50
 8006658:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800665a:	4b25      	ldr	r3, [pc, #148]	; (80066f0 <HAL_UART_MspInit+0x2d4>)
 800665c:	2240      	movs	r2, #64	; 0x40
 800665e:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006660:	4b23      	ldr	r3, [pc, #140]	; (80066f0 <HAL_UART_MspInit+0x2d4>)
 8006662:	2200      	movs	r2, #0
 8006664:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006666:	4b22      	ldr	r3, [pc, #136]	; (80066f0 <HAL_UART_MspInit+0x2d4>)
 8006668:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800666c:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800666e:	4b20      	ldr	r3, [pc, #128]	; (80066f0 <HAL_UART_MspInit+0x2d4>)
 8006670:	2200      	movs	r2, #0
 8006672:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006674:	4b1e      	ldr	r3, [pc, #120]	; (80066f0 <HAL_UART_MspInit+0x2d4>)
 8006676:	2200      	movs	r2, #0
 8006678:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800667a:	4b1d      	ldr	r3, [pc, #116]	; (80066f0 <HAL_UART_MspInit+0x2d4>)
 800667c:	2200      	movs	r2, #0
 800667e:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006680:	4b1b      	ldr	r3, [pc, #108]	; (80066f0 <HAL_UART_MspInit+0x2d4>)
 8006682:	2200      	movs	r2, #0
 8006684:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006686:	4b1a      	ldr	r3, [pc, #104]	; (80066f0 <HAL_UART_MspInit+0x2d4>)
 8006688:	2204      	movs	r2, #4
 800668a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800668c:	4b18      	ldr	r3, [pc, #96]	; (80066f0 <HAL_UART_MspInit+0x2d4>)
 800668e:	2203      	movs	r2, #3
 8006690:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8006692:	4b17      	ldr	r3, [pc, #92]	; (80066f0 <HAL_UART_MspInit+0x2d4>)
 8006694:	2200      	movs	r2, #0
 8006696:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006698:	4b15      	ldr	r3, [pc, #84]	; (80066f0 <HAL_UART_MspInit+0x2d4>)
 800669a:	2200      	movs	r2, #0
 800669c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800669e:	4814      	ldr	r0, [pc, #80]	; (80066f0 <HAL_UART_MspInit+0x2d4>)
 80066a0:	f000 fdb2 	bl	8007208 <HAL_DMA_Init>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <HAL_UART_MspInit+0x292>
      Error_Handler();
 80066aa:	f7fe f949 	bl	8004940 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a0f      	ldr	r2, [pc, #60]	; (80066f0 <HAL_UART_MspInit+0x2d4>)
 80066b2:	679a      	str	r2, [r3, #120]	; 0x78
 80066b4:	4a0e      	ldr	r2, [pc, #56]	; (80066f0 <HAL_UART_MspInit+0x2d4>)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80066ba:	2200      	movs	r2, #0
 80066bc:	2100      	movs	r1, #0
 80066be:	2052      	movs	r0, #82	; 0x52
 80066c0:	f000 fb63 	bl	8006d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80066c4:	2052      	movs	r0, #82	; 0x52
 80066c6:	f000 fb7a 	bl	8006dbe <HAL_NVIC_EnableIRQ>
}
 80066ca:	e185      	b.n	80069d8 <HAL_UART_MspInit+0x5bc>
 80066cc:	40004c00 	.word	0x40004c00
 80066d0:	58024400 	.word	0x58024400
 80066d4:	58020c00 	.word	0x58020c00
 80066d8:	24001404 	.word	0x24001404
 80066dc:	40020058 	.word	0x40020058
 80066e0:	2400147c 	.word	0x2400147c
 80066e4:	40020070 	.word	0x40020070
 80066e8:	40007800 	.word	0x40007800
 80066ec:	58021000 	.word	0x58021000
 80066f0:	240014f4 	.word	0x240014f4
 80066f4:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART2)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a54      	ldr	r2, [pc, #336]	; (8006850 <HAL_UART_MspInit+0x434>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	f040 80b4 	bne.w	800686c <HAL_UART_MspInit+0x450>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006704:	2302      	movs	r3, #2
 8006706:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006708:	2300      	movs	r3, #0
 800670a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800670e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006712:	4618      	mov	r0, r3
 8006714:	f004 fd8c 	bl	800b230 <HAL_RCCEx_PeriphCLKConfig>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_UART_MspInit+0x306>
      Error_Handler();
 800671e:	f7fe f90f 	bl	8004940 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006722:	4b4c      	ldr	r3, [pc, #304]	; (8006854 <HAL_UART_MspInit+0x438>)
 8006724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006728:	4a4a      	ldr	r2, [pc, #296]	; (8006854 <HAL_UART_MspInit+0x438>)
 800672a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800672e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006732:	4b48      	ldr	r3, [pc, #288]	; (8006854 <HAL_UART_MspInit+0x438>)
 8006734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006740:	4b44      	ldr	r3, [pc, #272]	; (8006854 <HAL_UART_MspInit+0x438>)
 8006742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006746:	4a43      	ldr	r2, [pc, #268]	; (8006854 <HAL_UART_MspInit+0x438>)
 8006748:	f043 0308 	orr.w	r3, r3, #8
 800674c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006750:	4b40      	ldr	r3, [pc, #256]	; (8006854 <HAL_UART_MspInit+0x438>)
 8006752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006756:	f003 0308 	and.w	r3, r3, #8
 800675a:	613b      	str	r3, [r7, #16]
 800675c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800675e:	2360      	movs	r3, #96	; 0x60
 8006760:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006764:	2302      	movs	r3, #2
 8006766:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800676a:	2300      	movs	r3, #0
 800676c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006770:	2300      	movs	r3, #0
 8006772:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006776:	2307      	movs	r3, #7
 8006778:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800677c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006780:	4619      	mov	r1, r3
 8006782:	4835      	ldr	r0, [pc, #212]	; (8006858 <HAL_UART_MspInit+0x43c>)
 8006784:	f003 fb7c 	bl	8009e80 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8006788:	4b34      	ldr	r3, [pc, #208]	; (800685c <HAL_UART_MspInit+0x440>)
 800678a:	4a35      	ldr	r2, [pc, #212]	; (8006860 <HAL_UART_MspInit+0x444>)
 800678c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800678e:	4b33      	ldr	r3, [pc, #204]	; (800685c <HAL_UART_MspInit+0x440>)
 8006790:	222b      	movs	r2, #43	; 0x2b
 8006792:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006794:	4b31      	ldr	r3, [pc, #196]	; (800685c <HAL_UART_MspInit+0x440>)
 8006796:	2200      	movs	r2, #0
 8006798:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800679a:	4b30      	ldr	r3, [pc, #192]	; (800685c <HAL_UART_MspInit+0x440>)
 800679c:	2200      	movs	r2, #0
 800679e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80067a0:	4b2e      	ldr	r3, [pc, #184]	; (800685c <HAL_UART_MspInit+0x440>)
 80067a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067a8:	4b2c      	ldr	r3, [pc, #176]	; (800685c <HAL_UART_MspInit+0x440>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067ae:	4b2b      	ldr	r3, [pc, #172]	; (800685c <HAL_UART_MspInit+0x440>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80067b4:	4b29      	ldr	r3, [pc, #164]	; (800685c <HAL_UART_MspInit+0x440>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80067ba:	4b28      	ldr	r3, [pc, #160]	; (800685c <HAL_UART_MspInit+0x440>)
 80067bc:	2200      	movs	r2, #0
 80067be:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067c0:	4b26      	ldr	r3, [pc, #152]	; (800685c <HAL_UART_MspInit+0x440>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80067c6:	4825      	ldr	r0, [pc, #148]	; (800685c <HAL_UART_MspInit+0x440>)
 80067c8:	f000 fd1e 	bl	8007208 <HAL_DMA_Init>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 80067d2:	f7fe f8b5 	bl	8004940 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a20      	ldr	r2, [pc, #128]	; (800685c <HAL_UART_MspInit+0x440>)
 80067da:	67da      	str	r2, [r3, #124]	; 0x7c
 80067dc:	4a1f      	ldr	r2, [pc, #124]	; (800685c <HAL_UART_MspInit+0x440>)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80067e2:	4b20      	ldr	r3, [pc, #128]	; (8006864 <HAL_UART_MspInit+0x448>)
 80067e4:	4a20      	ldr	r2, [pc, #128]	; (8006868 <HAL_UART_MspInit+0x44c>)
 80067e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80067e8:	4b1e      	ldr	r3, [pc, #120]	; (8006864 <HAL_UART_MspInit+0x448>)
 80067ea:	222c      	movs	r2, #44	; 0x2c
 80067ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80067ee:	4b1d      	ldr	r3, [pc, #116]	; (8006864 <HAL_UART_MspInit+0x448>)
 80067f0:	2240      	movs	r2, #64	; 0x40
 80067f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067f4:	4b1b      	ldr	r3, [pc, #108]	; (8006864 <HAL_UART_MspInit+0x448>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80067fa:	4b1a      	ldr	r3, [pc, #104]	; (8006864 <HAL_UART_MspInit+0x448>)
 80067fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006800:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006802:	4b18      	ldr	r3, [pc, #96]	; (8006864 <HAL_UART_MspInit+0x448>)
 8006804:	2200      	movs	r2, #0
 8006806:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006808:	4b16      	ldr	r3, [pc, #88]	; (8006864 <HAL_UART_MspInit+0x448>)
 800680a:	2200      	movs	r2, #0
 800680c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800680e:	4b15      	ldr	r3, [pc, #84]	; (8006864 <HAL_UART_MspInit+0x448>)
 8006810:	2200      	movs	r2, #0
 8006812:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006814:	4b13      	ldr	r3, [pc, #76]	; (8006864 <HAL_UART_MspInit+0x448>)
 8006816:	2200      	movs	r2, #0
 8006818:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800681a:	4b12      	ldr	r3, [pc, #72]	; (8006864 <HAL_UART_MspInit+0x448>)
 800681c:	2200      	movs	r2, #0
 800681e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006820:	4810      	ldr	r0, [pc, #64]	; (8006864 <HAL_UART_MspInit+0x448>)
 8006822:	f000 fcf1 	bl	8007208 <HAL_DMA_Init>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d001      	beq.n	8006830 <HAL_UART_MspInit+0x414>
      Error_Handler();
 800682c:	f7fe f888 	bl	8004940 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a0c      	ldr	r2, [pc, #48]	; (8006864 <HAL_UART_MspInit+0x448>)
 8006834:	679a      	str	r2, [r3, #120]	; 0x78
 8006836:	4a0b      	ldr	r2, [pc, #44]	; (8006864 <HAL_UART_MspInit+0x448>)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800683c:	2200      	movs	r2, #0
 800683e:	2100      	movs	r1, #0
 8006840:	2026      	movs	r0, #38	; 0x26
 8006842:	f000 faa2 	bl	8006d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006846:	2026      	movs	r0, #38	; 0x26
 8006848:	f000 fab9 	bl	8006dbe <HAL_NVIC_EnableIRQ>
}
 800684c:	e0c4      	b.n	80069d8 <HAL_UART_MspInit+0x5bc>
 800684e:	bf00      	nop
 8006850:	40004400 	.word	0x40004400
 8006854:	58024400 	.word	0x58024400
 8006858:	58020c00 	.word	0x58020c00
 800685c:	2400156c 	.word	0x2400156c
 8006860:	40020088 	.word	0x40020088
 8006864:	240015e4 	.word	0x240015e4
 8006868:	400200a0 	.word	0x400200a0
  else if(uartHandle->Instance==USART3)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a5b      	ldr	r2, [pc, #364]	; (80069e0 <HAL_UART_MspInit+0x5c4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	f040 80b0 	bne.w	80069d8 <HAL_UART_MspInit+0x5bc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006878:	2302      	movs	r3, #2
 800687a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800687c:	2300      	movs	r3, #0
 800687e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006886:	4618      	mov	r0, r3
 8006888:	f004 fcd2 	bl	800b230 <HAL_RCCEx_PeriphCLKConfig>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <HAL_UART_MspInit+0x47a>
      Error_Handler();
 8006892:	f7fe f855 	bl	8004940 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006896:	4b53      	ldr	r3, [pc, #332]	; (80069e4 <HAL_UART_MspInit+0x5c8>)
 8006898:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800689c:	4a51      	ldr	r2, [pc, #324]	; (80069e4 <HAL_UART_MspInit+0x5c8>)
 800689e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80068a6:	4b4f      	ldr	r3, [pc, #316]	; (80069e4 <HAL_UART_MspInit+0x5c8>)
 80068a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80068b4:	4b4b      	ldr	r3, [pc, #300]	; (80069e4 <HAL_UART_MspInit+0x5c8>)
 80068b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068ba:	4a4a      	ldr	r2, [pc, #296]	; (80069e4 <HAL_UART_MspInit+0x5c8>)
 80068bc:	f043 0308 	orr.w	r3, r3, #8
 80068c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80068c4:	4b47      	ldr	r3, [pc, #284]	; (80069e4 <HAL_UART_MspInit+0x5c8>)
 80068c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068ca:	f003 0308 	and.w	r3, r3, #8
 80068ce:	60bb      	str	r3, [r7, #8]
 80068d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80068d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80068d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068da:	2302      	movs	r3, #2
 80068dc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068e6:	2300      	movs	r3, #0
 80068e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80068ec:	2307      	movs	r3, #7
 80068ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80068f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80068f6:	4619      	mov	r1, r3
 80068f8:	483b      	ldr	r0, [pc, #236]	; (80069e8 <HAL_UART_MspInit+0x5cc>)
 80068fa:	f003 fac1 	bl	8009e80 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80068fe:	4b3b      	ldr	r3, [pc, #236]	; (80069ec <HAL_UART_MspInit+0x5d0>)
 8006900:	4a3b      	ldr	r2, [pc, #236]	; (80069f0 <HAL_UART_MspInit+0x5d4>)
 8006902:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006904:	4b39      	ldr	r3, [pc, #228]	; (80069ec <HAL_UART_MspInit+0x5d0>)
 8006906:	222d      	movs	r2, #45	; 0x2d
 8006908:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800690a:	4b38      	ldr	r3, [pc, #224]	; (80069ec <HAL_UART_MspInit+0x5d0>)
 800690c:	2200      	movs	r2, #0
 800690e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006910:	4b36      	ldr	r3, [pc, #216]	; (80069ec <HAL_UART_MspInit+0x5d0>)
 8006912:	2200      	movs	r2, #0
 8006914:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006916:	4b35      	ldr	r3, [pc, #212]	; (80069ec <HAL_UART_MspInit+0x5d0>)
 8006918:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800691c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800691e:	4b33      	ldr	r3, [pc, #204]	; (80069ec <HAL_UART_MspInit+0x5d0>)
 8006920:	2200      	movs	r2, #0
 8006922:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006924:	4b31      	ldr	r3, [pc, #196]	; (80069ec <HAL_UART_MspInit+0x5d0>)
 8006926:	2200      	movs	r2, #0
 8006928:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800692a:	4b30      	ldr	r3, [pc, #192]	; (80069ec <HAL_UART_MspInit+0x5d0>)
 800692c:	2200      	movs	r2, #0
 800692e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006930:	4b2e      	ldr	r3, [pc, #184]	; (80069ec <HAL_UART_MspInit+0x5d0>)
 8006932:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006936:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006938:	4b2c      	ldr	r3, [pc, #176]	; (80069ec <HAL_UART_MspInit+0x5d0>)
 800693a:	2200      	movs	r2, #0
 800693c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800693e:	482b      	ldr	r0, [pc, #172]	; (80069ec <HAL_UART_MspInit+0x5d0>)
 8006940:	f000 fc62 	bl	8007208 <HAL_DMA_Init>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <HAL_UART_MspInit+0x532>
      Error_Handler();
 800694a:	f7fd fff9 	bl	8004940 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a26      	ldr	r2, [pc, #152]	; (80069ec <HAL_UART_MspInit+0x5d0>)
 8006952:	67da      	str	r2, [r3, #124]	; 0x7c
 8006954:	4a25      	ldr	r2, [pc, #148]	; (80069ec <HAL_UART_MspInit+0x5d0>)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 800695a:	4b26      	ldr	r3, [pc, #152]	; (80069f4 <HAL_UART_MspInit+0x5d8>)
 800695c:	4a26      	ldr	r2, [pc, #152]	; (80069f8 <HAL_UART_MspInit+0x5dc>)
 800695e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8006960:	4b24      	ldr	r3, [pc, #144]	; (80069f4 <HAL_UART_MspInit+0x5d8>)
 8006962:	222e      	movs	r2, #46	; 0x2e
 8006964:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006966:	4b23      	ldr	r3, [pc, #140]	; (80069f4 <HAL_UART_MspInit+0x5d8>)
 8006968:	2240      	movs	r2, #64	; 0x40
 800696a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800696c:	4b21      	ldr	r3, [pc, #132]	; (80069f4 <HAL_UART_MspInit+0x5d8>)
 800696e:	2200      	movs	r2, #0
 8006970:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006972:	4b20      	ldr	r3, [pc, #128]	; (80069f4 <HAL_UART_MspInit+0x5d8>)
 8006974:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006978:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800697a:	4b1e      	ldr	r3, [pc, #120]	; (80069f4 <HAL_UART_MspInit+0x5d8>)
 800697c:	2200      	movs	r2, #0
 800697e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006980:	4b1c      	ldr	r3, [pc, #112]	; (80069f4 <HAL_UART_MspInit+0x5d8>)
 8006982:	2200      	movs	r2, #0
 8006984:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8006986:	4b1b      	ldr	r3, [pc, #108]	; (80069f4 <HAL_UART_MspInit+0x5d8>)
 8006988:	2200      	movs	r2, #0
 800698a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800698c:	4b19      	ldr	r3, [pc, #100]	; (80069f4 <HAL_UART_MspInit+0x5d8>)
 800698e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006992:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006994:	4b17      	ldr	r3, [pc, #92]	; (80069f4 <HAL_UART_MspInit+0x5d8>)
 8006996:	2204      	movs	r2, #4
 8006998:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800699a:	4b16      	ldr	r3, [pc, #88]	; (80069f4 <HAL_UART_MspInit+0x5d8>)
 800699c:	2203      	movs	r2, #3
 800699e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80069a0:	4b14      	ldr	r3, [pc, #80]	; (80069f4 <HAL_UART_MspInit+0x5d8>)
 80069a2:	2200      	movs	r2, #0
 80069a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80069a6:	4b13      	ldr	r3, [pc, #76]	; (80069f4 <HAL_UART_MspInit+0x5d8>)
 80069a8:	2200      	movs	r2, #0
 80069aa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80069ac:	4811      	ldr	r0, [pc, #68]	; (80069f4 <HAL_UART_MspInit+0x5d8>)
 80069ae:	f000 fc2b 	bl	8007208 <HAL_DMA_Init>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d001      	beq.n	80069bc <HAL_UART_MspInit+0x5a0>
      Error_Handler();
 80069b8:	f7fd ffc2 	bl	8004940 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a0d      	ldr	r2, [pc, #52]	; (80069f4 <HAL_UART_MspInit+0x5d8>)
 80069c0:	679a      	str	r2, [r3, #120]	; 0x78
 80069c2:	4a0c      	ldr	r2, [pc, #48]	; (80069f4 <HAL_UART_MspInit+0x5d8>)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80069c8:	2200      	movs	r2, #0
 80069ca:	2100      	movs	r1, #0
 80069cc:	2027      	movs	r0, #39	; 0x27
 80069ce:	f000 f9dc 	bl	8006d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80069d2:	2027      	movs	r0, #39	; 0x27
 80069d4:	f000 f9f3 	bl	8006dbe <HAL_NVIC_EnableIRQ>
}
 80069d8:	bf00      	nop
 80069da:	37f8      	adds	r7, #248	; 0xf8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	40004800 	.word	0x40004800
 80069e4:	58024400 	.word	0x58024400
 80069e8:	58020c00 	.word	0x58020c00
 80069ec:	2400165c 	.word	0x2400165c
 80069f0:	40020028 	.word	0x40020028
 80069f4:	240016d4 	.word	0x240016d4
 80069f8:	40020040 	.word	0x40020040

080069fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 80069fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006a00:	f7fe fbf0 	bl	80051e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006a04:	480c      	ldr	r0, [pc, #48]	; (8006a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006a06:	490d      	ldr	r1, [pc, #52]	; (8006a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006a08:	4a0d      	ldr	r2, [pc, #52]	; (8006a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a0c:	e002      	b.n	8006a14 <LoopCopyDataInit>

08006a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a12:	3304      	adds	r3, #4

08006a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a18:	d3f9      	bcc.n	8006a0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a1a:	4a0a      	ldr	r2, [pc, #40]	; (8006a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006a1c:	4c0a      	ldr	r4, [pc, #40]	; (8006a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a20:	e001      	b.n	8006a26 <LoopFillZerobss>

08006a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a24:	3204      	adds	r2, #4

08006a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a28:	d3fb      	bcc.n	8006a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006a2a:	f00b fc6d 	bl	8012308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006a2e:	f7fd fc13 	bl	8004258 <main>
  bx  lr
 8006a32:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8006a34:	24001d60 	.word	0x24001d60
  ldr r0, =_sdata
 8006a38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006a3c:	24000418 	.word	0x24000418
  ldr r2, =_sidata
 8006a40:	08016b7c 	.word	0x08016b7c
  ldr r2, =_sbss
 8006a44:	24000418 	.word	0x24000418
  ldr r4, =_ebss
 8006a48:	24001760 	.word	0x24001760

08006a4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a4c:	e7fe      	b.n	8006a4c <ADC3_IRQHandler>
	...

08006a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a56:	2003      	movs	r0, #3
 8006a58:	f000 f98c 	bl	8006d74 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a5c:	f004 fa12 	bl	800ae84 <HAL_RCC_GetSysClockFreq>
 8006a60:	4602      	mov	r2, r0
 8006a62:	4b15      	ldr	r3, [pc, #84]	; (8006ab8 <HAL_Init+0x68>)
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	0a1b      	lsrs	r3, r3, #8
 8006a68:	f003 030f 	and.w	r3, r3, #15
 8006a6c:	4913      	ldr	r1, [pc, #76]	; (8006abc <HAL_Init+0x6c>)
 8006a6e:	5ccb      	ldrb	r3, [r1, r3]
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	fa22 f303 	lsr.w	r3, r2, r3
 8006a78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a7a:	4b0f      	ldr	r3, [pc, #60]	; (8006ab8 <HAL_Init+0x68>)
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	f003 030f 	and.w	r3, r3, #15
 8006a82:	4a0e      	ldr	r2, [pc, #56]	; (8006abc <HAL_Init+0x6c>)
 8006a84:	5cd3      	ldrb	r3, [r2, r3]
 8006a86:	f003 031f 	and.w	r3, r3, #31
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a90:	4a0b      	ldr	r2, [pc, #44]	; (8006ac0 <HAL_Init+0x70>)
 8006a92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a94:	4a0b      	ldr	r2, [pc, #44]	; (8006ac4 <HAL_Init+0x74>)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	f000 f814 	bl	8006ac8 <HAL_InitTick>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e002      	b.n	8006ab0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006aaa:	f7fe f97f 	bl	8004dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	58024400 	.word	0x58024400
 8006abc:	08014c80 	.word	0x08014c80
 8006ac0:	2400023c 	.word	0x2400023c
 8006ac4:	24000238 	.word	0x24000238

08006ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006ad0:	4b15      	ldr	r3, [pc, #84]	; (8006b28 <HAL_InitTick+0x60>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e021      	b.n	8006b20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006adc:	4b13      	ldr	r3, [pc, #76]	; (8006b2c <HAL_InitTick+0x64>)
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	4b11      	ldr	r3, [pc, #68]	; (8006b28 <HAL_InitTick+0x60>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8006aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 f971 	bl	8006dda <HAL_SYSTICK_Config>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e00e      	b.n	8006b20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b0f      	cmp	r3, #15
 8006b06:	d80a      	bhi.n	8006b1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b08:	2200      	movs	r2, #0
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b10:	f000 f93b 	bl	8006d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b14:	4a06      	ldr	r2, [pc, #24]	; (8006b30 <HAL_InitTick+0x68>)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e000      	b.n	8006b20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	24000244 	.word	0x24000244
 8006b2c:	24000238 	.word	0x24000238
 8006b30:	24000240 	.word	0x24000240

08006b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006b38:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <HAL_IncTick+0x20>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <HAL_IncTick+0x24>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4413      	add	r3, r2
 8006b44:	4a04      	ldr	r2, [pc, #16]	; (8006b58 <HAL_IncTick+0x24>)
 8006b46:	6013      	str	r3, [r2, #0]
}
 8006b48:	bf00      	nop
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	24000244 	.word	0x24000244
 8006b58:	2400174c 	.word	0x2400174c

08006b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8006b60:	4b03      	ldr	r3, [pc, #12]	; (8006b70 <HAL_GetTick+0x14>)
 8006b62:	681b      	ldr	r3, [r3, #0]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	2400174c 	.word	0x2400174c

08006b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b7c:	f7ff ffee 	bl	8006b5c <HAL_GetTick>
 8006b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b8c:	d005      	beq.n	8006b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b8e:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <HAL_Delay+0x44>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4413      	add	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006b9a:	bf00      	nop
 8006b9c:	f7ff ffde 	bl	8006b5c <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d8f7      	bhi.n	8006b9c <HAL_Delay+0x28>
  {
  }
}
 8006bac:	bf00      	nop
 8006bae:	bf00      	nop
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	24000244 	.word	0x24000244

08006bbc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006bc0:	4b03      	ldr	r3, [pc, #12]	; (8006bd0 <HAL_GetREVID+0x14>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	0c1b      	lsrs	r3, r3, #16
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	5c001000 	.word	0x5c001000

08006bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006be4:	4b0b      	ldr	r3, [pc, #44]	; (8006c14 <__NVIC_SetPriorityGrouping+0x40>)
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006bfc:	4b06      	ldr	r3, [pc, #24]	; (8006c18 <__NVIC_SetPriorityGrouping+0x44>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c02:	4a04      	ldr	r2, [pc, #16]	; (8006c14 <__NVIC_SetPriorityGrouping+0x40>)
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	60d3      	str	r3, [r2, #12]
}
 8006c08:	bf00      	nop
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	e000ed00 	.word	0xe000ed00
 8006c18:	05fa0000 	.word	0x05fa0000

08006c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c20:	4b04      	ldr	r3, [pc, #16]	; (8006c34 <__NVIC_GetPriorityGrouping+0x18>)
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	0a1b      	lsrs	r3, r3, #8
 8006c26:	f003 0307 	and.w	r3, r3, #7
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	e000ed00 	.word	0xe000ed00

08006c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4603      	mov	r3, r0
 8006c40:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	db0b      	blt.n	8006c62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c4a:	88fb      	ldrh	r3, [r7, #6]
 8006c4c:	f003 021f 	and.w	r2, r3, #31
 8006c50:	4907      	ldr	r1, [pc, #28]	; (8006c70 <__NVIC_EnableIRQ+0x38>)
 8006c52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	2001      	movs	r0, #1
 8006c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006c62:	bf00      	nop
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	e000e100 	.word	0xe000e100

08006c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	6039      	str	r1, [r7, #0]
 8006c7e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006c80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	db0a      	blt.n	8006c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	490c      	ldr	r1, [pc, #48]	; (8006cc0 <__NVIC_SetPriority+0x4c>)
 8006c8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006c92:	0112      	lsls	r2, r2, #4
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	440b      	add	r3, r1
 8006c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c9c:	e00a      	b.n	8006cb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	4908      	ldr	r1, [pc, #32]	; (8006cc4 <__NVIC_SetPriority+0x50>)
 8006ca4:	88fb      	ldrh	r3, [r7, #6]
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	3b04      	subs	r3, #4
 8006cac:	0112      	lsls	r2, r2, #4
 8006cae:	b2d2      	uxtb	r2, r2
 8006cb0:	440b      	add	r3, r1
 8006cb2:	761a      	strb	r2, [r3, #24]
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	e000e100 	.word	0xe000e100
 8006cc4:	e000ed00 	.word	0xe000ed00

08006cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b089      	sub	sp, #36	; 0x24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f1c3 0307 	rsb	r3, r3, #7
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	bf28      	it	cs
 8006ce6:	2304      	movcs	r3, #4
 8006ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	3304      	adds	r3, #4
 8006cee:	2b06      	cmp	r3, #6
 8006cf0:	d902      	bls.n	8006cf8 <NVIC_EncodePriority+0x30>
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	3b03      	subs	r3, #3
 8006cf6:	e000      	b.n	8006cfa <NVIC_EncodePriority+0x32>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	fa02 f303 	lsl.w	r3, r2, r3
 8006d06:	43da      	mvns	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	401a      	ands	r2, r3
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1a:	43d9      	mvns	r1, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d20:	4313      	orrs	r3, r2
         );
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3724      	adds	r7, #36	; 0x24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
	...

08006d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d40:	d301      	bcc.n	8006d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d42:	2301      	movs	r3, #1
 8006d44:	e00f      	b.n	8006d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d46:	4a0a      	ldr	r2, [pc, #40]	; (8006d70 <SysTick_Config+0x40>)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d4e:	210f      	movs	r1, #15
 8006d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d54:	f7ff ff8e 	bl	8006c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d58:	4b05      	ldr	r3, [pc, #20]	; (8006d70 <SysTick_Config+0x40>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d5e:	4b04      	ldr	r3, [pc, #16]	; (8006d70 <SysTick_Config+0x40>)
 8006d60:	2207      	movs	r2, #7
 8006d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	e000e010 	.word	0xe000e010

08006d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f7ff ff29 	bl	8006bd4 <__NVIC_SetPriorityGrouping>
}
 8006d82:	bf00      	nop
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b086      	sub	sp, #24
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	4603      	mov	r3, r0
 8006d92:	60b9      	str	r1, [r7, #8]
 8006d94:	607a      	str	r2, [r7, #4]
 8006d96:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d98:	f7ff ff40 	bl	8006c1c <__NVIC_GetPriorityGrouping>
 8006d9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	68b9      	ldr	r1, [r7, #8]
 8006da2:	6978      	ldr	r0, [r7, #20]
 8006da4:	f7ff ff90 	bl	8006cc8 <NVIC_EncodePriority>
 8006da8:	4602      	mov	r2, r0
 8006daa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006dae:	4611      	mov	r1, r2
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff ff5f 	bl	8006c74 <__NVIC_SetPriority>
}
 8006db6:	bf00      	nop
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006dc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff ff33 	bl	8006c38 <__NVIC_EnableIRQ>
}
 8006dd2:	bf00      	nop
 8006dd4:	3708      	adds	r7, #8
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7ff ffa4 	bl	8006d30 <SysTick_Config>
 8006de8:	4603      	mov	r3, r0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006df6:	f000 f802 	bl	8006dfe <HAL_SYSTICK_Callback>
}
 8006dfa:	bf00      	nop
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006e02:	bf00      	nop
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e054      	b.n	8006ec8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	7f5b      	ldrb	r3, [r3, #29]
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d105      	bne.n	8006e34 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fb fa14 	bl	800225c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	791b      	ldrb	r3, [r3, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10c      	bne.n	8006e5c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a22      	ldr	r2, [pc, #136]	; (8006ed0 <HAL_CRC_Init+0xc4>)
 8006e48:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f022 0218 	bic.w	r2, r2, #24
 8006e58:	609a      	str	r2, [r3, #8]
 8006e5a:	e00c      	b.n	8006e76 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6899      	ldr	r1, [r3, #8]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	461a      	mov	r2, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f948 	bl	80070fc <HAL_CRCEx_Polynomial_Set>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e028      	b.n	8006ec8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	795b      	ldrb	r3, [r3, #5]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d105      	bne.n	8006e8a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e86:	611a      	str	r2, [r3, #16]
 8006e88:	e004      	b.n	8006e94 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	6912      	ldr	r2, [r2, #16]
 8006e92:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	695a      	ldr	r2, [r3, #20]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	699a      	ldr	r2, [r3, #24]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3708      	adds	r7, #8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	04c11db7 	.word	0x04c11db7

08006ed4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f042 0201 	orr.w	r2, r2, #1
 8006ef8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d006      	beq.n	8006f10 <HAL_CRC_Calculate+0x3c>
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d829      	bhi.n	8006f5a <HAL_CRC_Calculate+0x86>
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d019      	beq.n	8006f3e <HAL_CRC_Calculate+0x6a>
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d01e      	beq.n	8006f4c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006f0e:	e024      	b.n	8006f5a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006f10:	2300      	movs	r3, #0
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	e00a      	b.n	8006f2c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	441a      	add	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6812      	ldr	r2, [r2, #0]
 8006f24:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d3f0      	bcc.n	8006f16 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	613b      	str	r3, [r7, #16]
      break;
 8006f3c:	e00e      	b.n	8006f5c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	68b9      	ldr	r1, [r7, #8]
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 f812 	bl	8006f6c <CRC_Handle_8>
 8006f48:	6138      	str	r0, [r7, #16]
      break;
 8006f4a:	e007      	b.n	8006f5c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	68b9      	ldr	r1, [r7, #8]
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 f899 	bl	8007088 <CRC_Handle_16>
 8006f56:	6138      	str	r0, [r7, #16]
      break;
 8006f58:	e000      	b.n	8006f5c <HAL_CRC_Calculate+0x88>
      break;
 8006f5a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8006f62:	693b      	ldr	r3, [r7, #16]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3718      	adds	r7, #24
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b089      	sub	sp, #36	; 0x24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006f78:	2300      	movs	r3, #0
 8006f7a:	61fb      	str	r3, [r7, #28]
 8006f7c:	e023      	b.n	8006fc6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	4413      	add	r3, r2
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	3301      	adds	r3, #1
 8006f90:	68b9      	ldr	r1, [r7, #8]
 8006f92:	440b      	add	r3, r1
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006f98:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	3302      	adds	r3, #2
 8006fa0:	68b9      	ldr	r1, [r7, #8]
 8006fa2:	440b      	add	r3, r1
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006fa8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	3303      	adds	r3, #3
 8006fb0:	68b9      	ldr	r1, [r7, #8]
 8006fb2:	440b      	add	r3, r1
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006fbc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006fbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	61fb      	str	r3, [r7, #28]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	089b      	lsrs	r3, r3, #2
 8006fca:	69fa      	ldr	r2, [r7, #28]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d3d6      	bcc.n	8006f7e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f003 0303 	and.w	r3, r3, #3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d04d      	beq.n	8007076 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f003 0303 	and.w	r3, r3, #3
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d107      	bne.n	8006ff4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	4413      	add	r3, r2
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f003 0303 	and.w	r3, r3, #3
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d116      	bne.n	800702c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	4413      	add	r3, r2
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	021b      	lsls	r3, r3, #8
 800700a:	b21a      	sxth	r2, r3
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	3301      	adds	r3, #1
 8007012:	68b9      	ldr	r1, [r7, #8]
 8007014:	440b      	add	r3, r1
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	b21b      	sxth	r3, r3
 800701a:	4313      	orrs	r3, r2
 800701c:	b21b      	sxth	r3, r3
 800701e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	8b7a      	ldrh	r2, [r7, #26]
 800702a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f003 0303 	and.w	r3, r3, #3
 8007032:	2b03      	cmp	r3, #3
 8007034:	d11f      	bne.n	8007076 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	4413      	add	r3, r2
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	021b      	lsls	r3, r3, #8
 8007042:	b21a      	sxth	r2, r3
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	3301      	adds	r3, #1
 800704a:	68b9      	ldr	r1, [r7, #8]
 800704c:	440b      	add	r3, r1
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	b21b      	sxth	r3, r3
 8007052:	4313      	orrs	r3, r2
 8007054:	b21b      	sxth	r3, r3
 8007056:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	8b7a      	ldrh	r2, [r7, #26]
 8007062:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	3302      	adds	r3, #2
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	4413      	add	r3, r2
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	6812      	ldr	r2, [r2, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3724      	adds	r7, #36	; 0x24
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007094:	2300      	movs	r3, #0
 8007096:	617b      	str	r3, [r7, #20]
 8007098:	e013      	b.n	80070c2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	4413      	add	r3, r2
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	041a      	lsls	r2, r3, #16
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	3302      	adds	r3, #2
 80070ac:	68b9      	ldr	r1, [r7, #8]
 80070ae:	440b      	add	r3, r1
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	4619      	mov	r1, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	3301      	adds	r3, #1
 80070c0:	617b      	str	r3, [r7, #20]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	085b      	lsrs	r3, r3, #1
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d3e6      	bcc.n	800709a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	009b      	lsls	r3, r3, #2
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	4413      	add	r3, r2
 80070e4:	881a      	ldrh	r2, [r3, #0]
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800710c:	231f      	movs	r3, #31
 800710e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007110:	bf00      	nop
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	1e5a      	subs	r2, r3, #1
 8007116:	613a      	str	r2, [r7, #16]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d009      	beq.n	8007130 <HAL_CRCEx_Polynomial_Set+0x34>
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	f003 031f 	and.w	r3, r3, #31
 8007122:	68ba      	ldr	r2, [r7, #8]
 8007124:	fa22 f303 	lsr.w	r3, r2, r3
 8007128:	f003 0301 	and.w	r3, r3, #1
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0f0      	beq.n	8007112 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b18      	cmp	r3, #24
 8007134:	d846      	bhi.n	80071c4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8007136:	a201      	add	r2, pc, #4	; (adr r2, 800713c <HAL_CRCEx_Polynomial_Set+0x40>)
 8007138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713c:	080071cb 	.word	0x080071cb
 8007140:	080071c5 	.word	0x080071c5
 8007144:	080071c5 	.word	0x080071c5
 8007148:	080071c5 	.word	0x080071c5
 800714c:	080071c5 	.word	0x080071c5
 8007150:	080071c5 	.word	0x080071c5
 8007154:	080071c5 	.word	0x080071c5
 8007158:	080071c5 	.word	0x080071c5
 800715c:	080071b9 	.word	0x080071b9
 8007160:	080071c5 	.word	0x080071c5
 8007164:	080071c5 	.word	0x080071c5
 8007168:	080071c5 	.word	0x080071c5
 800716c:	080071c5 	.word	0x080071c5
 8007170:	080071c5 	.word	0x080071c5
 8007174:	080071c5 	.word	0x080071c5
 8007178:	080071c5 	.word	0x080071c5
 800717c:	080071ad 	.word	0x080071ad
 8007180:	080071c5 	.word	0x080071c5
 8007184:	080071c5 	.word	0x080071c5
 8007188:	080071c5 	.word	0x080071c5
 800718c:	080071c5 	.word	0x080071c5
 8007190:	080071c5 	.word	0x080071c5
 8007194:	080071c5 	.word	0x080071c5
 8007198:	080071c5 	.word	0x080071c5
 800719c:	080071a1 	.word	0x080071a1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	2b06      	cmp	r3, #6
 80071a4:	d913      	bls.n	80071ce <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80071aa:	e010      	b.n	80071ce <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	2b07      	cmp	r3, #7
 80071b0:	d90f      	bls.n	80071d2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80071b6:	e00c      	b.n	80071d2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	2b0f      	cmp	r3, #15
 80071bc:	d90b      	bls.n	80071d6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80071c2:	e008      	b.n	80071d6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	75fb      	strb	r3, [r7, #23]
      break;
 80071c8:	e006      	b.n	80071d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80071ca:	bf00      	nop
 80071cc:	e004      	b.n	80071d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80071ce:	bf00      	nop
 80071d0:	e002      	b.n	80071d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80071d2:	bf00      	nop
 80071d4:	e000      	b.n	80071d8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80071d6:	bf00      	nop
  }
  if (status == HAL_OK)
 80071d8:	7dfb      	ldrb	r3, [r7, #23]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10d      	bne.n	80071fa <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f023 0118 	bic.w	r1, r3, #24
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	371c      	adds	r7, #28
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b086      	sub	sp, #24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007210:	f7ff fca4 	bl	8006b5c <HAL_GetTick>
 8007214:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e316      	b.n	800784e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a66      	ldr	r2, [pc, #408]	; (80073c0 <HAL_DMA_Init+0x1b8>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d04a      	beq.n	80072c0 <HAL_DMA_Init+0xb8>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a65      	ldr	r2, [pc, #404]	; (80073c4 <HAL_DMA_Init+0x1bc>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d045      	beq.n	80072c0 <HAL_DMA_Init+0xb8>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a63      	ldr	r2, [pc, #396]	; (80073c8 <HAL_DMA_Init+0x1c0>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d040      	beq.n	80072c0 <HAL_DMA_Init+0xb8>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a62      	ldr	r2, [pc, #392]	; (80073cc <HAL_DMA_Init+0x1c4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d03b      	beq.n	80072c0 <HAL_DMA_Init+0xb8>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a60      	ldr	r2, [pc, #384]	; (80073d0 <HAL_DMA_Init+0x1c8>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d036      	beq.n	80072c0 <HAL_DMA_Init+0xb8>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a5f      	ldr	r2, [pc, #380]	; (80073d4 <HAL_DMA_Init+0x1cc>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d031      	beq.n	80072c0 <HAL_DMA_Init+0xb8>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a5d      	ldr	r2, [pc, #372]	; (80073d8 <HAL_DMA_Init+0x1d0>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d02c      	beq.n	80072c0 <HAL_DMA_Init+0xb8>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a5c      	ldr	r2, [pc, #368]	; (80073dc <HAL_DMA_Init+0x1d4>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d027      	beq.n	80072c0 <HAL_DMA_Init+0xb8>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a5a      	ldr	r2, [pc, #360]	; (80073e0 <HAL_DMA_Init+0x1d8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d022      	beq.n	80072c0 <HAL_DMA_Init+0xb8>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a59      	ldr	r2, [pc, #356]	; (80073e4 <HAL_DMA_Init+0x1dc>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d01d      	beq.n	80072c0 <HAL_DMA_Init+0xb8>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a57      	ldr	r2, [pc, #348]	; (80073e8 <HAL_DMA_Init+0x1e0>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d018      	beq.n	80072c0 <HAL_DMA_Init+0xb8>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a56      	ldr	r2, [pc, #344]	; (80073ec <HAL_DMA_Init+0x1e4>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d013      	beq.n	80072c0 <HAL_DMA_Init+0xb8>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a54      	ldr	r2, [pc, #336]	; (80073f0 <HAL_DMA_Init+0x1e8>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d00e      	beq.n	80072c0 <HAL_DMA_Init+0xb8>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a53      	ldr	r2, [pc, #332]	; (80073f4 <HAL_DMA_Init+0x1ec>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d009      	beq.n	80072c0 <HAL_DMA_Init+0xb8>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a51      	ldr	r2, [pc, #324]	; (80073f8 <HAL_DMA_Init+0x1f0>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d004      	beq.n	80072c0 <HAL_DMA_Init+0xb8>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a50      	ldr	r2, [pc, #320]	; (80073fc <HAL_DMA_Init+0x1f4>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d101      	bne.n	80072c4 <HAL_DMA_Init+0xbc>
 80072c0:	2301      	movs	r3, #1
 80072c2:	e000      	b.n	80072c6 <HAL_DMA_Init+0xbe>
 80072c4:	2300      	movs	r3, #0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	f000 813b 	beq.w	8007542 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2202      	movs	r2, #2
 80072d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a37      	ldr	r2, [pc, #220]	; (80073c0 <HAL_DMA_Init+0x1b8>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d04a      	beq.n	800737c <HAL_DMA_Init+0x174>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a36      	ldr	r2, [pc, #216]	; (80073c4 <HAL_DMA_Init+0x1bc>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d045      	beq.n	800737c <HAL_DMA_Init+0x174>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a34      	ldr	r2, [pc, #208]	; (80073c8 <HAL_DMA_Init+0x1c0>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d040      	beq.n	800737c <HAL_DMA_Init+0x174>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a33      	ldr	r2, [pc, #204]	; (80073cc <HAL_DMA_Init+0x1c4>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d03b      	beq.n	800737c <HAL_DMA_Init+0x174>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a31      	ldr	r2, [pc, #196]	; (80073d0 <HAL_DMA_Init+0x1c8>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d036      	beq.n	800737c <HAL_DMA_Init+0x174>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a30      	ldr	r2, [pc, #192]	; (80073d4 <HAL_DMA_Init+0x1cc>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d031      	beq.n	800737c <HAL_DMA_Init+0x174>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a2e      	ldr	r2, [pc, #184]	; (80073d8 <HAL_DMA_Init+0x1d0>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d02c      	beq.n	800737c <HAL_DMA_Init+0x174>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a2d      	ldr	r2, [pc, #180]	; (80073dc <HAL_DMA_Init+0x1d4>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d027      	beq.n	800737c <HAL_DMA_Init+0x174>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a2b      	ldr	r2, [pc, #172]	; (80073e0 <HAL_DMA_Init+0x1d8>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d022      	beq.n	800737c <HAL_DMA_Init+0x174>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a2a      	ldr	r2, [pc, #168]	; (80073e4 <HAL_DMA_Init+0x1dc>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d01d      	beq.n	800737c <HAL_DMA_Init+0x174>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a28      	ldr	r2, [pc, #160]	; (80073e8 <HAL_DMA_Init+0x1e0>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d018      	beq.n	800737c <HAL_DMA_Init+0x174>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a27      	ldr	r2, [pc, #156]	; (80073ec <HAL_DMA_Init+0x1e4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d013      	beq.n	800737c <HAL_DMA_Init+0x174>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a25      	ldr	r2, [pc, #148]	; (80073f0 <HAL_DMA_Init+0x1e8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00e      	beq.n	800737c <HAL_DMA_Init+0x174>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a24      	ldr	r2, [pc, #144]	; (80073f4 <HAL_DMA_Init+0x1ec>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d009      	beq.n	800737c <HAL_DMA_Init+0x174>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a22      	ldr	r2, [pc, #136]	; (80073f8 <HAL_DMA_Init+0x1f0>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d004      	beq.n	800737c <HAL_DMA_Init+0x174>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a21      	ldr	r2, [pc, #132]	; (80073fc <HAL_DMA_Init+0x1f4>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d108      	bne.n	800738e <HAL_DMA_Init+0x186>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 0201 	bic.w	r2, r2, #1
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	e007      	b.n	800739e <HAL_DMA_Init+0x196>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f022 0201 	bic.w	r2, r2, #1
 800739c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800739e:	e02f      	b.n	8007400 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80073a0:	f7ff fbdc 	bl	8006b5c <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b05      	cmp	r3, #5
 80073ac:	d928      	bls.n	8007400 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2203      	movs	r2, #3
 80073b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e246      	b.n	800784e <HAL_DMA_Init+0x646>
 80073c0:	40020010 	.word	0x40020010
 80073c4:	40020028 	.word	0x40020028
 80073c8:	40020040 	.word	0x40020040
 80073cc:	40020058 	.word	0x40020058
 80073d0:	40020070 	.word	0x40020070
 80073d4:	40020088 	.word	0x40020088
 80073d8:	400200a0 	.word	0x400200a0
 80073dc:	400200b8 	.word	0x400200b8
 80073e0:	40020410 	.word	0x40020410
 80073e4:	40020428 	.word	0x40020428
 80073e8:	40020440 	.word	0x40020440
 80073ec:	40020458 	.word	0x40020458
 80073f0:	40020470 	.word	0x40020470
 80073f4:	40020488 	.word	0x40020488
 80073f8:	400204a0 	.word	0x400204a0
 80073fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1c8      	bne.n	80073a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007416:	697a      	ldr	r2, [r7, #20]
 8007418:	4b83      	ldr	r3, [pc, #524]	; (8007628 <HAL_DMA_Init+0x420>)
 800741a:	4013      	ands	r3, r2
 800741c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007426:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007432:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800743e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	4313      	orrs	r3, r2
 800744a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	2b04      	cmp	r3, #4
 8007452:	d107      	bne.n	8007464 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745c:	4313      	orrs	r3, r2
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	4313      	orrs	r3, r2
 8007462:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007464:	4b71      	ldr	r3, [pc, #452]	; (800762c <HAL_DMA_Init+0x424>)
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	4b71      	ldr	r3, [pc, #452]	; (8007630 <HAL_DMA_Init+0x428>)
 800746a:	4013      	ands	r3, r2
 800746c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007470:	d328      	bcc.n	80074c4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	2b28      	cmp	r3, #40	; 0x28
 8007478:	d903      	bls.n	8007482 <HAL_DMA_Init+0x27a>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	2b2e      	cmp	r3, #46	; 0x2e
 8007480:	d917      	bls.n	80074b2 <HAL_DMA_Init+0x2aa>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	2b3e      	cmp	r3, #62	; 0x3e
 8007488:	d903      	bls.n	8007492 <HAL_DMA_Init+0x28a>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	2b42      	cmp	r3, #66	; 0x42
 8007490:	d90f      	bls.n	80074b2 <HAL_DMA_Init+0x2aa>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	2b46      	cmp	r3, #70	; 0x46
 8007498:	d903      	bls.n	80074a2 <HAL_DMA_Init+0x29a>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	2b48      	cmp	r3, #72	; 0x48
 80074a0:	d907      	bls.n	80074b2 <HAL_DMA_Init+0x2aa>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b4e      	cmp	r3, #78	; 0x4e
 80074a8:	d905      	bls.n	80074b6 <HAL_DMA_Init+0x2ae>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b52      	cmp	r3, #82	; 0x52
 80074b0:	d801      	bhi.n	80074b6 <HAL_DMA_Init+0x2ae>
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <HAL_DMA_Init+0x2b0>
 80074b6:	2300      	movs	r3, #0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d003      	beq.n	80074c4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074c2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	697a      	ldr	r2, [r7, #20]
 80074ca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f023 0307 	bic.w	r3, r3, #7
 80074da:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d117      	bne.n	800751e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00e      	beq.n	800751e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f002 fb33 	bl	8009b6c <DMA_CheckFifoParam>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d008      	beq.n	800751e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2240      	movs	r2, #64	; 0x40
 8007510:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e197      	b.n	800784e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f002 fa6e 	bl	8009a08 <DMA_CalcBaseAndBitshift>
 800752c:	4603      	mov	r3, r0
 800752e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007534:	f003 031f 	and.w	r3, r3, #31
 8007538:	223f      	movs	r2, #63	; 0x3f
 800753a:	409a      	lsls	r2, r3
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	609a      	str	r2, [r3, #8]
 8007540:	e0cd      	b.n	80076de <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a3b      	ldr	r2, [pc, #236]	; (8007634 <HAL_DMA_Init+0x42c>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d022      	beq.n	8007592 <HAL_DMA_Init+0x38a>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a39      	ldr	r2, [pc, #228]	; (8007638 <HAL_DMA_Init+0x430>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d01d      	beq.n	8007592 <HAL_DMA_Init+0x38a>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a38      	ldr	r2, [pc, #224]	; (800763c <HAL_DMA_Init+0x434>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d018      	beq.n	8007592 <HAL_DMA_Init+0x38a>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a36      	ldr	r2, [pc, #216]	; (8007640 <HAL_DMA_Init+0x438>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d013      	beq.n	8007592 <HAL_DMA_Init+0x38a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a35      	ldr	r2, [pc, #212]	; (8007644 <HAL_DMA_Init+0x43c>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d00e      	beq.n	8007592 <HAL_DMA_Init+0x38a>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a33      	ldr	r2, [pc, #204]	; (8007648 <HAL_DMA_Init+0x440>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d009      	beq.n	8007592 <HAL_DMA_Init+0x38a>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a32      	ldr	r2, [pc, #200]	; (800764c <HAL_DMA_Init+0x444>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d004      	beq.n	8007592 <HAL_DMA_Init+0x38a>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a30      	ldr	r2, [pc, #192]	; (8007650 <HAL_DMA_Init+0x448>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d101      	bne.n	8007596 <HAL_DMA_Init+0x38e>
 8007592:	2301      	movs	r3, #1
 8007594:	e000      	b.n	8007598 <HAL_DMA_Init+0x390>
 8007596:	2300      	movs	r3, #0
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 8097 	beq.w	80076cc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a24      	ldr	r2, [pc, #144]	; (8007634 <HAL_DMA_Init+0x42c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d021      	beq.n	80075ec <HAL_DMA_Init+0x3e4>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a22      	ldr	r2, [pc, #136]	; (8007638 <HAL_DMA_Init+0x430>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d01c      	beq.n	80075ec <HAL_DMA_Init+0x3e4>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a21      	ldr	r2, [pc, #132]	; (800763c <HAL_DMA_Init+0x434>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d017      	beq.n	80075ec <HAL_DMA_Init+0x3e4>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a1f      	ldr	r2, [pc, #124]	; (8007640 <HAL_DMA_Init+0x438>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d012      	beq.n	80075ec <HAL_DMA_Init+0x3e4>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1e      	ldr	r2, [pc, #120]	; (8007644 <HAL_DMA_Init+0x43c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d00d      	beq.n	80075ec <HAL_DMA_Init+0x3e4>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a1c      	ldr	r2, [pc, #112]	; (8007648 <HAL_DMA_Init+0x440>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d008      	beq.n	80075ec <HAL_DMA_Init+0x3e4>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a1b      	ldr	r2, [pc, #108]	; (800764c <HAL_DMA_Init+0x444>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d003      	beq.n	80075ec <HAL_DMA_Init+0x3e4>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a19      	ldr	r2, [pc, #100]	; (8007650 <HAL_DMA_Init+0x448>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2202      	movs	r2, #2
 80075f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	4b12      	ldr	r3, [pc, #72]	; (8007654 <HAL_DMA_Init+0x44c>)
 800760a:	4013      	ands	r3, r2
 800760c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	2b40      	cmp	r3, #64	; 0x40
 8007614:	d020      	beq.n	8007658 <HAL_DMA_Init+0x450>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	2b80      	cmp	r3, #128	; 0x80
 800761c:	d102      	bne.n	8007624 <HAL_DMA_Init+0x41c>
 800761e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007622:	e01a      	b.n	800765a <HAL_DMA_Init+0x452>
 8007624:	2300      	movs	r3, #0
 8007626:	e018      	b.n	800765a <HAL_DMA_Init+0x452>
 8007628:	fe10803f 	.word	0xfe10803f
 800762c:	5c001000 	.word	0x5c001000
 8007630:	ffff0000 	.word	0xffff0000
 8007634:	58025408 	.word	0x58025408
 8007638:	5802541c 	.word	0x5802541c
 800763c:	58025430 	.word	0x58025430
 8007640:	58025444 	.word	0x58025444
 8007644:	58025458 	.word	0x58025458
 8007648:	5802546c 	.word	0x5802546c
 800764c:	58025480 	.word	0x58025480
 8007650:	58025494 	.word	0x58025494
 8007654:	fffe000f 	.word	0xfffe000f
 8007658:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	68d2      	ldr	r2, [r2, #12]
 800765e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007660:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007668:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007670:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007678:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	69db      	ldr	r3, [r3, #28]
 800767e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007680:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007688:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	4313      	orrs	r3, r2
 800768e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	461a      	mov	r2, r3
 800769e:	4b6e      	ldr	r3, [pc, #440]	; (8007858 <HAL_DMA_Init+0x650>)
 80076a0:	4413      	add	r3, r2
 80076a2:	4a6e      	ldr	r2, [pc, #440]	; (800785c <HAL_DMA_Init+0x654>)
 80076a4:	fba2 2303 	umull	r2, r3, r2, r3
 80076a8:	091b      	lsrs	r3, r3, #4
 80076aa:	009a      	lsls	r2, r3, #2
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f002 f9a9 	bl	8009a08 <DMA_CalcBaseAndBitshift>
 80076b6:	4603      	mov	r3, r0
 80076b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076be:	f003 031f 	and.w	r3, r3, #31
 80076c2:	2201      	movs	r2, #1
 80076c4:	409a      	lsls	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	605a      	str	r2, [r3, #4]
 80076ca:	e008      	b.n	80076de <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2240      	movs	r2, #64	; 0x40
 80076d0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2203      	movs	r2, #3
 80076d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e0b7      	b.n	800784e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a5f      	ldr	r2, [pc, #380]	; (8007860 <HAL_DMA_Init+0x658>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d072      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a5d      	ldr	r2, [pc, #372]	; (8007864 <HAL_DMA_Init+0x65c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d06d      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a5c      	ldr	r2, [pc, #368]	; (8007868 <HAL_DMA_Init+0x660>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d068      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a5a      	ldr	r2, [pc, #360]	; (800786c <HAL_DMA_Init+0x664>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d063      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a59      	ldr	r2, [pc, #356]	; (8007870 <HAL_DMA_Init+0x668>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d05e      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a57      	ldr	r2, [pc, #348]	; (8007874 <HAL_DMA_Init+0x66c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d059      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a56      	ldr	r2, [pc, #344]	; (8007878 <HAL_DMA_Init+0x670>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d054      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a54      	ldr	r2, [pc, #336]	; (800787c <HAL_DMA_Init+0x674>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d04f      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a53      	ldr	r2, [pc, #332]	; (8007880 <HAL_DMA_Init+0x678>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d04a      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a51      	ldr	r2, [pc, #324]	; (8007884 <HAL_DMA_Init+0x67c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d045      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a50      	ldr	r2, [pc, #320]	; (8007888 <HAL_DMA_Init+0x680>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d040      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a4e      	ldr	r2, [pc, #312]	; (800788c <HAL_DMA_Init+0x684>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d03b      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a4d      	ldr	r2, [pc, #308]	; (8007890 <HAL_DMA_Init+0x688>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d036      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a4b      	ldr	r2, [pc, #300]	; (8007894 <HAL_DMA_Init+0x68c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d031      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a4a      	ldr	r2, [pc, #296]	; (8007898 <HAL_DMA_Init+0x690>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d02c      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a48      	ldr	r2, [pc, #288]	; (800789c <HAL_DMA_Init+0x694>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d027      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a47      	ldr	r2, [pc, #284]	; (80078a0 <HAL_DMA_Init+0x698>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d022      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a45      	ldr	r2, [pc, #276]	; (80078a4 <HAL_DMA_Init+0x69c>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d01d      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a44      	ldr	r2, [pc, #272]	; (80078a8 <HAL_DMA_Init+0x6a0>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d018      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a42      	ldr	r2, [pc, #264]	; (80078ac <HAL_DMA_Init+0x6a4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d013      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a41      	ldr	r2, [pc, #260]	; (80078b0 <HAL_DMA_Init+0x6a8>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d00e      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a3f      	ldr	r2, [pc, #252]	; (80078b4 <HAL_DMA_Init+0x6ac>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d009      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a3e      	ldr	r2, [pc, #248]	; (80078b8 <HAL_DMA_Init+0x6b0>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d004      	beq.n	80077ce <HAL_DMA_Init+0x5c6>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a3c      	ldr	r2, [pc, #240]	; (80078bc <HAL_DMA_Init+0x6b4>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d101      	bne.n	80077d2 <HAL_DMA_Init+0x5ca>
 80077ce:	2301      	movs	r3, #1
 80077d0:	e000      	b.n	80077d4 <HAL_DMA_Init+0x5cc>
 80077d2:	2300      	movs	r3, #0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d032      	beq.n	800783e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f002 fa43 	bl	8009c64 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	2b80      	cmp	r3, #128	; 0x80
 80077e4:	d102      	bne.n	80077ec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f4:	b2d2      	uxtb	r2, r2
 80077f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007800:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d010      	beq.n	800782c <HAL_DMA_Init+0x624>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	2b08      	cmp	r3, #8
 8007810:	d80c      	bhi.n	800782c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f002 fac0 	bl	8009d98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800781c:	2200      	movs	r2, #0
 800781e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007828:	605a      	str	r2, [r3, #4]
 800782a:	e008      	b.n	800783e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	a7fdabf8 	.word	0xa7fdabf8
 800785c:	cccccccd 	.word	0xcccccccd
 8007860:	40020010 	.word	0x40020010
 8007864:	40020028 	.word	0x40020028
 8007868:	40020040 	.word	0x40020040
 800786c:	40020058 	.word	0x40020058
 8007870:	40020070 	.word	0x40020070
 8007874:	40020088 	.word	0x40020088
 8007878:	400200a0 	.word	0x400200a0
 800787c:	400200b8 	.word	0x400200b8
 8007880:	40020410 	.word	0x40020410
 8007884:	40020428 	.word	0x40020428
 8007888:	40020440 	.word	0x40020440
 800788c:	40020458 	.word	0x40020458
 8007890:	40020470 	.word	0x40020470
 8007894:	40020488 	.word	0x40020488
 8007898:	400204a0 	.word	0x400204a0
 800789c:	400204b8 	.word	0x400204b8
 80078a0:	58025408 	.word	0x58025408
 80078a4:	5802541c 	.word	0x5802541c
 80078a8:	58025430 	.word	0x58025430
 80078ac:	58025444 	.word	0x58025444
 80078b0:	58025458 	.word	0x58025458
 80078b4:	5802546c 	.word	0x5802546c
 80078b8:	58025480 	.word	0x58025480
 80078bc:	58025494 	.word	0x58025494

080078c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	60f8      	str	r0, [r7, #12]
 80078c8:	60b9      	str	r1, [r7, #8]
 80078ca:	607a      	str	r2, [r7, #4]
 80078cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e226      	b.n	8007d2a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d101      	bne.n	80078ea <HAL_DMA_Start_IT+0x2a>
 80078e6:	2302      	movs	r3, #2
 80078e8:	e21f      	b.n	8007d2a <HAL_DMA_Start_IT+0x46a>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	f040 820a 	bne.w	8007d14 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a68      	ldr	r2, [pc, #416]	; (8007ab4 <HAL_DMA_Start_IT+0x1f4>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d04a      	beq.n	80079ae <HAL_DMA_Start_IT+0xee>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a66      	ldr	r2, [pc, #408]	; (8007ab8 <HAL_DMA_Start_IT+0x1f8>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d045      	beq.n	80079ae <HAL_DMA_Start_IT+0xee>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a65      	ldr	r2, [pc, #404]	; (8007abc <HAL_DMA_Start_IT+0x1fc>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d040      	beq.n	80079ae <HAL_DMA_Start_IT+0xee>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a63      	ldr	r2, [pc, #396]	; (8007ac0 <HAL_DMA_Start_IT+0x200>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d03b      	beq.n	80079ae <HAL_DMA_Start_IT+0xee>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a62      	ldr	r2, [pc, #392]	; (8007ac4 <HAL_DMA_Start_IT+0x204>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d036      	beq.n	80079ae <HAL_DMA_Start_IT+0xee>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a60      	ldr	r2, [pc, #384]	; (8007ac8 <HAL_DMA_Start_IT+0x208>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d031      	beq.n	80079ae <HAL_DMA_Start_IT+0xee>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a5f      	ldr	r2, [pc, #380]	; (8007acc <HAL_DMA_Start_IT+0x20c>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d02c      	beq.n	80079ae <HAL_DMA_Start_IT+0xee>
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a5d      	ldr	r2, [pc, #372]	; (8007ad0 <HAL_DMA_Start_IT+0x210>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d027      	beq.n	80079ae <HAL_DMA_Start_IT+0xee>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a5c      	ldr	r2, [pc, #368]	; (8007ad4 <HAL_DMA_Start_IT+0x214>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d022      	beq.n	80079ae <HAL_DMA_Start_IT+0xee>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a5a      	ldr	r2, [pc, #360]	; (8007ad8 <HAL_DMA_Start_IT+0x218>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d01d      	beq.n	80079ae <HAL_DMA_Start_IT+0xee>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a59      	ldr	r2, [pc, #356]	; (8007adc <HAL_DMA_Start_IT+0x21c>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d018      	beq.n	80079ae <HAL_DMA_Start_IT+0xee>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a57      	ldr	r2, [pc, #348]	; (8007ae0 <HAL_DMA_Start_IT+0x220>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d013      	beq.n	80079ae <HAL_DMA_Start_IT+0xee>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a56      	ldr	r2, [pc, #344]	; (8007ae4 <HAL_DMA_Start_IT+0x224>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d00e      	beq.n	80079ae <HAL_DMA_Start_IT+0xee>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a54      	ldr	r2, [pc, #336]	; (8007ae8 <HAL_DMA_Start_IT+0x228>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d009      	beq.n	80079ae <HAL_DMA_Start_IT+0xee>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a53      	ldr	r2, [pc, #332]	; (8007aec <HAL_DMA_Start_IT+0x22c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d004      	beq.n	80079ae <HAL_DMA_Start_IT+0xee>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a51      	ldr	r2, [pc, #324]	; (8007af0 <HAL_DMA_Start_IT+0x230>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d108      	bne.n	80079c0 <HAL_DMA_Start_IT+0x100>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f022 0201 	bic.w	r2, r2, #1
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	e007      	b.n	80079d0 <HAL_DMA_Start_IT+0x110>
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f022 0201 	bic.w	r2, r2, #1
 80079ce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	68b9      	ldr	r1, [r7, #8]
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f001 fe6a 	bl	80096b0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a34      	ldr	r2, [pc, #208]	; (8007ab4 <HAL_DMA_Start_IT+0x1f4>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d04a      	beq.n	8007a7c <HAL_DMA_Start_IT+0x1bc>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a33      	ldr	r2, [pc, #204]	; (8007ab8 <HAL_DMA_Start_IT+0x1f8>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d045      	beq.n	8007a7c <HAL_DMA_Start_IT+0x1bc>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a31      	ldr	r2, [pc, #196]	; (8007abc <HAL_DMA_Start_IT+0x1fc>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d040      	beq.n	8007a7c <HAL_DMA_Start_IT+0x1bc>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a30      	ldr	r2, [pc, #192]	; (8007ac0 <HAL_DMA_Start_IT+0x200>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d03b      	beq.n	8007a7c <HAL_DMA_Start_IT+0x1bc>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a2e      	ldr	r2, [pc, #184]	; (8007ac4 <HAL_DMA_Start_IT+0x204>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d036      	beq.n	8007a7c <HAL_DMA_Start_IT+0x1bc>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a2d      	ldr	r2, [pc, #180]	; (8007ac8 <HAL_DMA_Start_IT+0x208>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d031      	beq.n	8007a7c <HAL_DMA_Start_IT+0x1bc>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a2b      	ldr	r2, [pc, #172]	; (8007acc <HAL_DMA_Start_IT+0x20c>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d02c      	beq.n	8007a7c <HAL_DMA_Start_IT+0x1bc>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a2a      	ldr	r2, [pc, #168]	; (8007ad0 <HAL_DMA_Start_IT+0x210>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d027      	beq.n	8007a7c <HAL_DMA_Start_IT+0x1bc>
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a28      	ldr	r2, [pc, #160]	; (8007ad4 <HAL_DMA_Start_IT+0x214>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d022      	beq.n	8007a7c <HAL_DMA_Start_IT+0x1bc>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a27      	ldr	r2, [pc, #156]	; (8007ad8 <HAL_DMA_Start_IT+0x218>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d01d      	beq.n	8007a7c <HAL_DMA_Start_IT+0x1bc>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a25      	ldr	r2, [pc, #148]	; (8007adc <HAL_DMA_Start_IT+0x21c>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d018      	beq.n	8007a7c <HAL_DMA_Start_IT+0x1bc>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a24      	ldr	r2, [pc, #144]	; (8007ae0 <HAL_DMA_Start_IT+0x220>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d013      	beq.n	8007a7c <HAL_DMA_Start_IT+0x1bc>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a22      	ldr	r2, [pc, #136]	; (8007ae4 <HAL_DMA_Start_IT+0x224>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d00e      	beq.n	8007a7c <HAL_DMA_Start_IT+0x1bc>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a21      	ldr	r2, [pc, #132]	; (8007ae8 <HAL_DMA_Start_IT+0x228>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d009      	beq.n	8007a7c <HAL_DMA_Start_IT+0x1bc>
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a1f      	ldr	r2, [pc, #124]	; (8007aec <HAL_DMA_Start_IT+0x22c>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d004      	beq.n	8007a7c <HAL_DMA_Start_IT+0x1bc>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a1e      	ldr	r2, [pc, #120]	; (8007af0 <HAL_DMA_Start_IT+0x230>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d101      	bne.n	8007a80 <HAL_DMA_Start_IT+0x1c0>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e000      	b.n	8007a82 <HAL_DMA_Start_IT+0x1c2>
 8007a80:	2300      	movs	r3, #0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d036      	beq.n	8007af4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f023 021e 	bic.w	r2, r3, #30
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f042 0216 	orr.w	r2, r2, #22
 8007a98:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d03e      	beq.n	8007b20 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f042 0208 	orr.w	r2, r2, #8
 8007ab0:	601a      	str	r2, [r3, #0]
 8007ab2:	e035      	b.n	8007b20 <HAL_DMA_Start_IT+0x260>
 8007ab4:	40020010 	.word	0x40020010
 8007ab8:	40020028 	.word	0x40020028
 8007abc:	40020040 	.word	0x40020040
 8007ac0:	40020058 	.word	0x40020058
 8007ac4:	40020070 	.word	0x40020070
 8007ac8:	40020088 	.word	0x40020088
 8007acc:	400200a0 	.word	0x400200a0
 8007ad0:	400200b8 	.word	0x400200b8
 8007ad4:	40020410 	.word	0x40020410
 8007ad8:	40020428 	.word	0x40020428
 8007adc:	40020440 	.word	0x40020440
 8007ae0:	40020458 	.word	0x40020458
 8007ae4:	40020470 	.word	0x40020470
 8007ae8:	40020488 	.word	0x40020488
 8007aec:	400204a0 	.word	0x400204a0
 8007af0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f023 020e 	bic.w	r2, r3, #14
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f042 020a 	orr.w	r2, r2, #10
 8007b06:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d007      	beq.n	8007b20 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f042 0204 	orr.w	r2, r2, #4
 8007b1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a83      	ldr	r2, [pc, #524]	; (8007d34 <HAL_DMA_Start_IT+0x474>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d072      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a82      	ldr	r2, [pc, #520]	; (8007d38 <HAL_DMA_Start_IT+0x478>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d06d      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a80      	ldr	r2, [pc, #512]	; (8007d3c <HAL_DMA_Start_IT+0x47c>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d068      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a7f      	ldr	r2, [pc, #508]	; (8007d40 <HAL_DMA_Start_IT+0x480>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d063      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a7d      	ldr	r2, [pc, #500]	; (8007d44 <HAL_DMA_Start_IT+0x484>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d05e      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a7c      	ldr	r2, [pc, #496]	; (8007d48 <HAL_DMA_Start_IT+0x488>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d059      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a7a      	ldr	r2, [pc, #488]	; (8007d4c <HAL_DMA_Start_IT+0x48c>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d054      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a79      	ldr	r2, [pc, #484]	; (8007d50 <HAL_DMA_Start_IT+0x490>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d04f      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a77      	ldr	r2, [pc, #476]	; (8007d54 <HAL_DMA_Start_IT+0x494>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d04a      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a76      	ldr	r2, [pc, #472]	; (8007d58 <HAL_DMA_Start_IT+0x498>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d045      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a74      	ldr	r2, [pc, #464]	; (8007d5c <HAL_DMA_Start_IT+0x49c>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d040      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a73      	ldr	r2, [pc, #460]	; (8007d60 <HAL_DMA_Start_IT+0x4a0>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d03b      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a71      	ldr	r2, [pc, #452]	; (8007d64 <HAL_DMA_Start_IT+0x4a4>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d036      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a70      	ldr	r2, [pc, #448]	; (8007d68 <HAL_DMA_Start_IT+0x4a8>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d031      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a6e      	ldr	r2, [pc, #440]	; (8007d6c <HAL_DMA_Start_IT+0x4ac>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d02c      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a6d      	ldr	r2, [pc, #436]	; (8007d70 <HAL_DMA_Start_IT+0x4b0>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d027      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a6b      	ldr	r2, [pc, #428]	; (8007d74 <HAL_DMA_Start_IT+0x4b4>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d022      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a6a      	ldr	r2, [pc, #424]	; (8007d78 <HAL_DMA_Start_IT+0x4b8>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d01d      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a68      	ldr	r2, [pc, #416]	; (8007d7c <HAL_DMA_Start_IT+0x4bc>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d018      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a67      	ldr	r2, [pc, #412]	; (8007d80 <HAL_DMA_Start_IT+0x4c0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d013      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a65      	ldr	r2, [pc, #404]	; (8007d84 <HAL_DMA_Start_IT+0x4c4>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d00e      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a64      	ldr	r2, [pc, #400]	; (8007d88 <HAL_DMA_Start_IT+0x4c8>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d009      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a62      	ldr	r2, [pc, #392]	; (8007d8c <HAL_DMA_Start_IT+0x4cc>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d004      	beq.n	8007c10 <HAL_DMA_Start_IT+0x350>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a61      	ldr	r2, [pc, #388]	; (8007d90 <HAL_DMA_Start_IT+0x4d0>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d101      	bne.n	8007c14 <HAL_DMA_Start_IT+0x354>
 8007c10:	2301      	movs	r3, #1
 8007c12:	e000      	b.n	8007c16 <HAL_DMA_Start_IT+0x356>
 8007c14:	2300      	movs	r3, #0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d01a      	beq.n	8007c50 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d007      	beq.n	8007c38 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c2c:	681a      	ldr	r2, [r3, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d007      	beq.n	8007c50 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a37      	ldr	r2, [pc, #220]	; (8007d34 <HAL_DMA_Start_IT+0x474>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d04a      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x430>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a36      	ldr	r2, [pc, #216]	; (8007d38 <HAL_DMA_Start_IT+0x478>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d045      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x430>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a34      	ldr	r2, [pc, #208]	; (8007d3c <HAL_DMA_Start_IT+0x47c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d040      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x430>
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a33      	ldr	r2, [pc, #204]	; (8007d40 <HAL_DMA_Start_IT+0x480>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d03b      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x430>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a31      	ldr	r2, [pc, #196]	; (8007d44 <HAL_DMA_Start_IT+0x484>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d036      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x430>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a30      	ldr	r2, [pc, #192]	; (8007d48 <HAL_DMA_Start_IT+0x488>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d031      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x430>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a2e      	ldr	r2, [pc, #184]	; (8007d4c <HAL_DMA_Start_IT+0x48c>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d02c      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x430>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a2d      	ldr	r2, [pc, #180]	; (8007d50 <HAL_DMA_Start_IT+0x490>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d027      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x430>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a2b      	ldr	r2, [pc, #172]	; (8007d54 <HAL_DMA_Start_IT+0x494>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d022      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x430>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a2a      	ldr	r2, [pc, #168]	; (8007d58 <HAL_DMA_Start_IT+0x498>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d01d      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x430>
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a28      	ldr	r2, [pc, #160]	; (8007d5c <HAL_DMA_Start_IT+0x49c>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d018      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x430>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a27      	ldr	r2, [pc, #156]	; (8007d60 <HAL_DMA_Start_IT+0x4a0>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d013      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x430>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a25      	ldr	r2, [pc, #148]	; (8007d64 <HAL_DMA_Start_IT+0x4a4>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d00e      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x430>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a24      	ldr	r2, [pc, #144]	; (8007d68 <HAL_DMA_Start_IT+0x4a8>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d009      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x430>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a22      	ldr	r2, [pc, #136]	; (8007d6c <HAL_DMA_Start_IT+0x4ac>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d004      	beq.n	8007cf0 <HAL_DMA_Start_IT+0x430>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a21      	ldr	r2, [pc, #132]	; (8007d70 <HAL_DMA_Start_IT+0x4b0>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d108      	bne.n	8007d02 <HAL_DMA_Start_IT+0x442>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f042 0201 	orr.w	r2, r2, #1
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	e012      	b.n	8007d28 <HAL_DMA_Start_IT+0x468>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f042 0201 	orr.w	r2, r2, #1
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	e009      	b.n	8007d28 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3718      	adds	r7, #24
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	40020010 	.word	0x40020010
 8007d38:	40020028 	.word	0x40020028
 8007d3c:	40020040 	.word	0x40020040
 8007d40:	40020058 	.word	0x40020058
 8007d44:	40020070 	.word	0x40020070
 8007d48:	40020088 	.word	0x40020088
 8007d4c:	400200a0 	.word	0x400200a0
 8007d50:	400200b8 	.word	0x400200b8
 8007d54:	40020410 	.word	0x40020410
 8007d58:	40020428 	.word	0x40020428
 8007d5c:	40020440 	.word	0x40020440
 8007d60:	40020458 	.word	0x40020458
 8007d64:	40020470 	.word	0x40020470
 8007d68:	40020488 	.word	0x40020488
 8007d6c:	400204a0 	.word	0x400204a0
 8007d70:	400204b8 	.word	0x400204b8
 8007d74:	58025408 	.word	0x58025408
 8007d78:	5802541c 	.word	0x5802541c
 8007d7c:	58025430 	.word	0x58025430
 8007d80:	58025444 	.word	0x58025444
 8007d84:	58025458 	.word	0x58025458
 8007d88:	5802546c 	.word	0x5802546c
 8007d8c:	58025480 	.word	0x58025480
 8007d90:	58025494 	.word	0x58025494

08007d94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007d9c:	f7fe fede 	bl	8006b5c <HAL_GetTick>
 8007da0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e2dc      	b.n	8008366 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d008      	beq.n	8007dca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2280      	movs	r2, #128	; 0x80
 8007dbc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e2cd      	b.n	8008366 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a76      	ldr	r2, [pc, #472]	; (8007fa8 <HAL_DMA_Abort+0x214>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d04a      	beq.n	8007e6a <HAL_DMA_Abort+0xd6>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a74      	ldr	r2, [pc, #464]	; (8007fac <HAL_DMA_Abort+0x218>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d045      	beq.n	8007e6a <HAL_DMA_Abort+0xd6>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a73      	ldr	r2, [pc, #460]	; (8007fb0 <HAL_DMA_Abort+0x21c>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d040      	beq.n	8007e6a <HAL_DMA_Abort+0xd6>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a71      	ldr	r2, [pc, #452]	; (8007fb4 <HAL_DMA_Abort+0x220>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d03b      	beq.n	8007e6a <HAL_DMA_Abort+0xd6>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a70      	ldr	r2, [pc, #448]	; (8007fb8 <HAL_DMA_Abort+0x224>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d036      	beq.n	8007e6a <HAL_DMA_Abort+0xd6>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a6e      	ldr	r2, [pc, #440]	; (8007fbc <HAL_DMA_Abort+0x228>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d031      	beq.n	8007e6a <HAL_DMA_Abort+0xd6>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a6d      	ldr	r2, [pc, #436]	; (8007fc0 <HAL_DMA_Abort+0x22c>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d02c      	beq.n	8007e6a <HAL_DMA_Abort+0xd6>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a6b      	ldr	r2, [pc, #428]	; (8007fc4 <HAL_DMA_Abort+0x230>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d027      	beq.n	8007e6a <HAL_DMA_Abort+0xd6>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a6a      	ldr	r2, [pc, #424]	; (8007fc8 <HAL_DMA_Abort+0x234>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d022      	beq.n	8007e6a <HAL_DMA_Abort+0xd6>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a68      	ldr	r2, [pc, #416]	; (8007fcc <HAL_DMA_Abort+0x238>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d01d      	beq.n	8007e6a <HAL_DMA_Abort+0xd6>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a67      	ldr	r2, [pc, #412]	; (8007fd0 <HAL_DMA_Abort+0x23c>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d018      	beq.n	8007e6a <HAL_DMA_Abort+0xd6>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a65      	ldr	r2, [pc, #404]	; (8007fd4 <HAL_DMA_Abort+0x240>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d013      	beq.n	8007e6a <HAL_DMA_Abort+0xd6>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a64      	ldr	r2, [pc, #400]	; (8007fd8 <HAL_DMA_Abort+0x244>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d00e      	beq.n	8007e6a <HAL_DMA_Abort+0xd6>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a62      	ldr	r2, [pc, #392]	; (8007fdc <HAL_DMA_Abort+0x248>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d009      	beq.n	8007e6a <HAL_DMA_Abort+0xd6>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a61      	ldr	r2, [pc, #388]	; (8007fe0 <HAL_DMA_Abort+0x24c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d004      	beq.n	8007e6a <HAL_DMA_Abort+0xd6>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a5f      	ldr	r2, [pc, #380]	; (8007fe4 <HAL_DMA_Abort+0x250>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d101      	bne.n	8007e6e <HAL_DMA_Abort+0xda>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e000      	b.n	8007e70 <HAL_DMA_Abort+0xdc>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d013      	beq.n	8007e9c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f022 021e 	bic.w	r2, r2, #30
 8007e82:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695a      	ldr	r2, [r3, #20]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e92:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	617b      	str	r3, [r7, #20]
 8007e9a:	e00a      	b.n	8007eb2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 020e 	bic.w	r2, r2, #14
 8007eaa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a3c      	ldr	r2, [pc, #240]	; (8007fa8 <HAL_DMA_Abort+0x214>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d072      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a3a      	ldr	r2, [pc, #232]	; (8007fac <HAL_DMA_Abort+0x218>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d06d      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a39      	ldr	r2, [pc, #228]	; (8007fb0 <HAL_DMA_Abort+0x21c>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d068      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a37      	ldr	r2, [pc, #220]	; (8007fb4 <HAL_DMA_Abort+0x220>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d063      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a36      	ldr	r2, [pc, #216]	; (8007fb8 <HAL_DMA_Abort+0x224>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d05e      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a34      	ldr	r2, [pc, #208]	; (8007fbc <HAL_DMA_Abort+0x228>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d059      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a33      	ldr	r2, [pc, #204]	; (8007fc0 <HAL_DMA_Abort+0x22c>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d054      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a31      	ldr	r2, [pc, #196]	; (8007fc4 <HAL_DMA_Abort+0x230>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d04f      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a30      	ldr	r2, [pc, #192]	; (8007fc8 <HAL_DMA_Abort+0x234>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d04a      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a2e      	ldr	r2, [pc, #184]	; (8007fcc <HAL_DMA_Abort+0x238>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d045      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a2d      	ldr	r2, [pc, #180]	; (8007fd0 <HAL_DMA_Abort+0x23c>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d040      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a2b      	ldr	r2, [pc, #172]	; (8007fd4 <HAL_DMA_Abort+0x240>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d03b      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a2a      	ldr	r2, [pc, #168]	; (8007fd8 <HAL_DMA_Abort+0x244>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d036      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a28      	ldr	r2, [pc, #160]	; (8007fdc <HAL_DMA_Abort+0x248>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d031      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a27      	ldr	r2, [pc, #156]	; (8007fe0 <HAL_DMA_Abort+0x24c>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d02c      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a25      	ldr	r2, [pc, #148]	; (8007fe4 <HAL_DMA_Abort+0x250>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d027      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a24      	ldr	r2, [pc, #144]	; (8007fe8 <HAL_DMA_Abort+0x254>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d022      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a22      	ldr	r2, [pc, #136]	; (8007fec <HAL_DMA_Abort+0x258>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d01d      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a21      	ldr	r2, [pc, #132]	; (8007ff0 <HAL_DMA_Abort+0x25c>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d018      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a1f      	ldr	r2, [pc, #124]	; (8007ff4 <HAL_DMA_Abort+0x260>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d013      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a1e      	ldr	r2, [pc, #120]	; (8007ff8 <HAL_DMA_Abort+0x264>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d00e      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a1c      	ldr	r2, [pc, #112]	; (8007ffc <HAL_DMA_Abort+0x268>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d009      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a1b      	ldr	r2, [pc, #108]	; (8008000 <HAL_DMA_Abort+0x26c>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d004      	beq.n	8007fa2 <HAL_DMA_Abort+0x20e>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a19      	ldr	r2, [pc, #100]	; (8008004 <HAL_DMA_Abort+0x270>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d132      	bne.n	8008008 <HAL_DMA_Abort+0x274>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e031      	b.n	800800a <HAL_DMA_Abort+0x276>
 8007fa6:	bf00      	nop
 8007fa8:	40020010 	.word	0x40020010
 8007fac:	40020028 	.word	0x40020028
 8007fb0:	40020040 	.word	0x40020040
 8007fb4:	40020058 	.word	0x40020058
 8007fb8:	40020070 	.word	0x40020070
 8007fbc:	40020088 	.word	0x40020088
 8007fc0:	400200a0 	.word	0x400200a0
 8007fc4:	400200b8 	.word	0x400200b8
 8007fc8:	40020410 	.word	0x40020410
 8007fcc:	40020428 	.word	0x40020428
 8007fd0:	40020440 	.word	0x40020440
 8007fd4:	40020458 	.word	0x40020458
 8007fd8:	40020470 	.word	0x40020470
 8007fdc:	40020488 	.word	0x40020488
 8007fe0:	400204a0 	.word	0x400204a0
 8007fe4:	400204b8 	.word	0x400204b8
 8007fe8:	58025408 	.word	0x58025408
 8007fec:	5802541c 	.word	0x5802541c
 8007ff0:	58025430 	.word	0x58025430
 8007ff4:	58025444 	.word	0x58025444
 8007ff8:	58025458 	.word	0x58025458
 8007ffc:	5802546c 	.word	0x5802546c
 8008000:	58025480 	.word	0x58025480
 8008004:	58025494 	.word	0x58025494
 8008008:	2300      	movs	r3, #0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d007      	beq.n	800801e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008018:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800801c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a6d      	ldr	r2, [pc, #436]	; (80081d8 <HAL_DMA_Abort+0x444>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d04a      	beq.n	80080be <HAL_DMA_Abort+0x32a>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a6b      	ldr	r2, [pc, #428]	; (80081dc <HAL_DMA_Abort+0x448>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d045      	beq.n	80080be <HAL_DMA_Abort+0x32a>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a6a      	ldr	r2, [pc, #424]	; (80081e0 <HAL_DMA_Abort+0x44c>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d040      	beq.n	80080be <HAL_DMA_Abort+0x32a>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a68      	ldr	r2, [pc, #416]	; (80081e4 <HAL_DMA_Abort+0x450>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d03b      	beq.n	80080be <HAL_DMA_Abort+0x32a>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a67      	ldr	r2, [pc, #412]	; (80081e8 <HAL_DMA_Abort+0x454>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d036      	beq.n	80080be <HAL_DMA_Abort+0x32a>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a65      	ldr	r2, [pc, #404]	; (80081ec <HAL_DMA_Abort+0x458>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d031      	beq.n	80080be <HAL_DMA_Abort+0x32a>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a64      	ldr	r2, [pc, #400]	; (80081f0 <HAL_DMA_Abort+0x45c>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d02c      	beq.n	80080be <HAL_DMA_Abort+0x32a>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a62      	ldr	r2, [pc, #392]	; (80081f4 <HAL_DMA_Abort+0x460>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d027      	beq.n	80080be <HAL_DMA_Abort+0x32a>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a61      	ldr	r2, [pc, #388]	; (80081f8 <HAL_DMA_Abort+0x464>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d022      	beq.n	80080be <HAL_DMA_Abort+0x32a>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a5f      	ldr	r2, [pc, #380]	; (80081fc <HAL_DMA_Abort+0x468>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d01d      	beq.n	80080be <HAL_DMA_Abort+0x32a>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a5e      	ldr	r2, [pc, #376]	; (8008200 <HAL_DMA_Abort+0x46c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d018      	beq.n	80080be <HAL_DMA_Abort+0x32a>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a5c      	ldr	r2, [pc, #368]	; (8008204 <HAL_DMA_Abort+0x470>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d013      	beq.n	80080be <HAL_DMA_Abort+0x32a>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a5b      	ldr	r2, [pc, #364]	; (8008208 <HAL_DMA_Abort+0x474>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d00e      	beq.n	80080be <HAL_DMA_Abort+0x32a>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a59      	ldr	r2, [pc, #356]	; (800820c <HAL_DMA_Abort+0x478>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d009      	beq.n	80080be <HAL_DMA_Abort+0x32a>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a58      	ldr	r2, [pc, #352]	; (8008210 <HAL_DMA_Abort+0x47c>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d004      	beq.n	80080be <HAL_DMA_Abort+0x32a>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a56      	ldr	r2, [pc, #344]	; (8008214 <HAL_DMA_Abort+0x480>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d108      	bne.n	80080d0 <HAL_DMA_Abort+0x33c>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f022 0201 	bic.w	r2, r2, #1
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	e007      	b.n	80080e0 <HAL_DMA_Abort+0x34c>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 0201 	bic.w	r2, r2, #1
 80080de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80080e0:	e013      	b.n	800810a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80080e2:	f7fe fd3b 	bl	8006b5c <HAL_GetTick>
 80080e6:	4602      	mov	r2, r0
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	2b05      	cmp	r3, #5
 80080ee:	d90c      	bls.n	800810a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2220      	movs	r2, #32
 80080f4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2203      	movs	r2, #3
 80080fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e12d      	b.n	8008366 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1e5      	bne.n	80080e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a2f      	ldr	r2, [pc, #188]	; (80081d8 <HAL_DMA_Abort+0x444>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d04a      	beq.n	80081b6 <HAL_DMA_Abort+0x422>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a2d      	ldr	r2, [pc, #180]	; (80081dc <HAL_DMA_Abort+0x448>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d045      	beq.n	80081b6 <HAL_DMA_Abort+0x422>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a2c      	ldr	r2, [pc, #176]	; (80081e0 <HAL_DMA_Abort+0x44c>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d040      	beq.n	80081b6 <HAL_DMA_Abort+0x422>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a2a      	ldr	r2, [pc, #168]	; (80081e4 <HAL_DMA_Abort+0x450>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d03b      	beq.n	80081b6 <HAL_DMA_Abort+0x422>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a29      	ldr	r2, [pc, #164]	; (80081e8 <HAL_DMA_Abort+0x454>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d036      	beq.n	80081b6 <HAL_DMA_Abort+0x422>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a27      	ldr	r2, [pc, #156]	; (80081ec <HAL_DMA_Abort+0x458>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d031      	beq.n	80081b6 <HAL_DMA_Abort+0x422>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a26      	ldr	r2, [pc, #152]	; (80081f0 <HAL_DMA_Abort+0x45c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d02c      	beq.n	80081b6 <HAL_DMA_Abort+0x422>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a24      	ldr	r2, [pc, #144]	; (80081f4 <HAL_DMA_Abort+0x460>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d027      	beq.n	80081b6 <HAL_DMA_Abort+0x422>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a23      	ldr	r2, [pc, #140]	; (80081f8 <HAL_DMA_Abort+0x464>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d022      	beq.n	80081b6 <HAL_DMA_Abort+0x422>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a21      	ldr	r2, [pc, #132]	; (80081fc <HAL_DMA_Abort+0x468>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d01d      	beq.n	80081b6 <HAL_DMA_Abort+0x422>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a20      	ldr	r2, [pc, #128]	; (8008200 <HAL_DMA_Abort+0x46c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d018      	beq.n	80081b6 <HAL_DMA_Abort+0x422>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a1e      	ldr	r2, [pc, #120]	; (8008204 <HAL_DMA_Abort+0x470>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d013      	beq.n	80081b6 <HAL_DMA_Abort+0x422>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a1d      	ldr	r2, [pc, #116]	; (8008208 <HAL_DMA_Abort+0x474>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d00e      	beq.n	80081b6 <HAL_DMA_Abort+0x422>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a1b      	ldr	r2, [pc, #108]	; (800820c <HAL_DMA_Abort+0x478>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d009      	beq.n	80081b6 <HAL_DMA_Abort+0x422>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a1a      	ldr	r2, [pc, #104]	; (8008210 <HAL_DMA_Abort+0x47c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d004      	beq.n	80081b6 <HAL_DMA_Abort+0x422>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a18      	ldr	r2, [pc, #96]	; (8008214 <HAL_DMA_Abort+0x480>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d101      	bne.n	80081ba <HAL_DMA_Abort+0x426>
 80081b6:	2301      	movs	r3, #1
 80081b8:	e000      	b.n	80081bc <HAL_DMA_Abort+0x428>
 80081ba:	2300      	movs	r3, #0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d02b      	beq.n	8008218 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081ca:	f003 031f 	and.w	r3, r3, #31
 80081ce:	223f      	movs	r2, #63	; 0x3f
 80081d0:	409a      	lsls	r2, r3
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	609a      	str	r2, [r3, #8]
 80081d6:	e02a      	b.n	800822e <HAL_DMA_Abort+0x49a>
 80081d8:	40020010 	.word	0x40020010
 80081dc:	40020028 	.word	0x40020028
 80081e0:	40020040 	.word	0x40020040
 80081e4:	40020058 	.word	0x40020058
 80081e8:	40020070 	.word	0x40020070
 80081ec:	40020088 	.word	0x40020088
 80081f0:	400200a0 	.word	0x400200a0
 80081f4:	400200b8 	.word	0x400200b8
 80081f8:	40020410 	.word	0x40020410
 80081fc:	40020428 	.word	0x40020428
 8008200:	40020440 	.word	0x40020440
 8008204:	40020458 	.word	0x40020458
 8008208:	40020470 	.word	0x40020470
 800820c:	40020488 	.word	0x40020488
 8008210:	400204a0 	.word	0x400204a0
 8008214:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800821c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008222:	f003 031f 	and.w	r3, r3, #31
 8008226:	2201      	movs	r2, #1
 8008228:	409a      	lsls	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a4f      	ldr	r2, [pc, #316]	; (8008370 <HAL_DMA_Abort+0x5dc>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d072      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a4d      	ldr	r2, [pc, #308]	; (8008374 <HAL_DMA_Abort+0x5e0>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d06d      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a4c      	ldr	r2, [pc, #304]	; (8008378 <HAL_DMA_Abort+0x5e4>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d068      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a4a      	ldr	r2, [pc, #296]	; (800837c <HAL_DMA_Abort+0x5e8>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d063      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a49      	ldr	r2, [pc, #292]	; (8008380 <HAL_DMA_Abort+0x5ec>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d05e      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a47      	ldr	r2, [pc, #284]	; (8008384 <HAL_DMA_Abort+0x5f0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d059      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a46      	ldr	r2, [pc, #280]	; (8008388 <HAL_DMA_Abort+0x5f4>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d054      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a44      	ldr	r2, [pc, #272]	; (800838c <HAL_DMA_Abort+0x5f8>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d04f      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a43      	ldr	r2, [pc, #268]	; (8008390 <HAL_DMA_Abort+0x5fc>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d04a      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a41      	ldr	r2, [pc, #260]	; (8008394 <HAL_DMA_Abort+0x600>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d045      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a40      	ldr	r2, [pc, #256]	; (8008398 <HAL_DMA_Abort+0x604>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d040      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a3e      	ldr	r2, [pc, #248]	; (800839c <HAL_DMA_Abort+0x608>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d03b      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a3d      	ldr	r2, [pc, #244]	; (80083a0 <HAL_DMA_Abort+0x60c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d036      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a3b      	ldr	r2, [pc, #236]	; (80083a4 <HAL_DMA_Abort+0x610>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d031      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a3a      	ldr	r2, [pc, #232]	; (80083a8 <HAL_DMA_Abort+0x614>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d02c      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a38      	ldr	r2, [pc, #224]	; (80083ac <HAL_DMA_Abort+0x618>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d027      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a37      	ldr	r2, [pc, #220]	; (80083b0 <HAL_DMA_Abort+0x61c>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d022      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a35      	ldr	r2, [pc, #212]	; (80083b4 <HAL_DMA_Abort+0x620>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d01d      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a34      	ldr	r2, [pc, #208]	; (80083b8 <HAL_DMA_Abort+0x624>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d018      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a32      	ldr	r2, [pc, #200]	; (80083bc <HAL_DMA_Abort+0x628>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d013      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a31      	ldr	r2, [pc, #196]	; (80083c0 <HAL_DMA_Abort+0x62c>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d00e      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a2f      	ldr	r2, [pc, #188]	; (80083c4 <HAL_DMA_Abort+0x630>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d009      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a2e      	ldr	r2, [pc, #184]	; (80083c8 <HAL_DMA_Abort+0x634>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d004      	beq.n	800831e <HAL_DMA_Abort+0x58a>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a2c      	ldr	r2, [pc, #176]	; (80083cc <HAL_DMA_Abort+0x638>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d101      	bne.n	8008322 <HAL_DMA_Abort+0x58e>
 800831e:	2301      	movs	r3, #1
 8008320:	e000      	b.n	8008324 <HAL_DMA_Abort+0x590>
 8008322:	2300      	movs	r3, #0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d015      	beq.n	8008354 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008330:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00c      	beq.n	8008354 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008348:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008352:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2201      	movs	r2, #1
 8008358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3718      	adds	r7, #24
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	40020010 	.word	0x40020010
 8008374:	40020028 	.word	0x40020028
 8008378:	40020040 	.word	0x40020040
 800837c:	40020058 	.word	0x40020058
 8008380:	40020070 	.word	0x40020070
 8008384:	40020088 	.word	0x40020088
 8008388:	400200a0 	.word	0x400200a0
 800838c:	400200b8 	.word	0x400200b8
 8008390:	40020410 	.word	0x40020410
 8008394:	40020428 	.word	0x40020428
 8008398:	40020440 	.word	0x40020440
 800839c:	40020458 	.word	0x40020458
 80083a0:	40020470 	.word	0x40020470
 80083a4:	40020488 	.word	0x40020488
 80083a8:	400204a0 	.word	0x400204a0
 80083ac:	400204b8 	.word	0x400204b8
 80083b0:	58025408 	.word	0x58025408
 80083b4:	5802541c 	.word	0x5802541c
 80083b8:	58025430 	.word	0x58025430
 80083bc:	58025444 	.word	0x58025444
 80083c0:	58025458 	.word	0x58025458
 80083c4:	5802546c 	.word	0x5802546c
 80083c8:	58025480 	.word	0x58025480
 80083cc:	58025494 	.word	0x58025494

080083d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d101      	bne.n	80083e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e237      	b.n	8008852 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d004      	beq.n	80083f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2280      	movs	r2, #128	; 0x80
 80083f2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e22c      	b.n	8008852 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a5c      	ldr	r2, [pc, #368]	; (8008570 <HAL_DMA_Abort_IT+0x1a0>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d04a      	beq.n	8008498 <HAL_DMA_Abort_IT+0xc8>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a5b      	ldr	r2, [pc, #364]	; (8008574 <HAL_DMA_Abort_IT+0x1a4>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d045      	beq.n	8008498 <HAL_DMA_Abort_IT+0xc8>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a59      	ldr	r2, [pc, #356]	; (8008578 <HAL_DMA_Abort_IT+0x1a8>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d040      	beq.n	8008498 <HAL_DMA_Abort_IT+0xc8>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a58      	ldr	r2, [pc, #352]	; (800857c <HAL_DMA_Abort_IT+0x1ac>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d03b      	beq.n	8008498 <HAL_DMA_Abort_IT+0xc8>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a56      	ldr	r2, [pc, #344]	; (8008580 <HAL_DMA_Abort_IT+0x1b0>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d036      	beq.n	8008498 <HAL_DMA_Abort_IT+0xc8>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a55      	ldr	r2, [pc, #340]	; (8008584 <HAL_DMA_Abort_IT+0x1b4>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d031      	beq.n	8008498 <HAL_DMA_Abort_IT+0xc8>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a53      	ldr	r2, [pc, #332]	; (8008588 <HAL_DMA_Abort_IT+0x1b8>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d02c      	beq.n	8008498 <HAL_DMA_Abort_IT+0xc8>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a52      	ldr	r2, [pc, #328]	; (800858c <HAL_DMA_Abort_IT+0x1bc>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d027      	beq.n	8008498 <HAL_DMA_Abort_IT+0xc8>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a50      	ldr	r2, [pc, #320]	; (8008590 <HAL_DMA_Abort_IT+0x1c0>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d022      	beq.n	8008498 <HAL_DMA_Abort_IT+0xc8>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a4f      	ldr	r2, [pc, #316]	; (8008594 <HAL_DMA_Abort_IT+0x1c4>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d01d      	beq.n	8008498 <HAL_DMA_Abort_IT+0xc8>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a4d      	ldr	r2, [pc, #308]	; (8008598 <HAL_DMA_Abort_IT+0x1c8>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d018      	beq.n	8008498 <HAL_DMA_Abort_IT+0xc8>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a4c      	ldr	r2, [pc, #304]	; (800859c <HAL_DMA_Abort_IT+0x1cc>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d013      	beq.n	8008498 <HAL_DMA_Abort_IT+0xc8>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a4a      	ldr	r2, [pc, #296]	; (80085a0 <HAL_DMA_Abort_IT+0x1d0>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d00e      	beq.n	8008498 <HAL_DMA_Abort_IT+0xc8>
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a49      	ldr	r2, [pc, #292]	; (80085a4 <HAL_DMA_Abort_IT+0x1d4>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d009      	beq.n	8008498 <HAL_DMA_Abort_IT+0xc8>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a47      	ldr	r2, [pc, #284]	; (80085a8 <HAL_DMA_Abort_IT+0x1d8>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d004      	beq.n	8008498 <HAL_DMA_Abort_IT+0xc8>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a46      	ldr	r2, [pc, #280]	; (80085ac <HAL_DMA_Abort_IT+0x1dc>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d101      	bne.n	800849c <HAL_DMA_Abort_IT+0xcc>
 8008498:	2301      	movs	r3, #1
 800849a:	e000      	b.n	800849e <HAL_DMA_Abort_IT+0xce>
 800849c:	2300      	movs	r3, #0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f000 8086 	beq.w	80085b0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2204      	movs	r2, #4
 80084a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a2f      	ldr	r2, [pc, #188]	; (8008570 <HAL_DMA_Abort_IT+0x1a0>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d04a      	beq.n	800854c <HAL_DMA_Abort_IT+0x17c>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a2e      	ldr	r2, [pc, #184]	; (8008574 <HAL_DMA_Abort_IT+0x1a4>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d045      	beq.n	800854c <HAL_DMA_Abort_IT+0x17c>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a2c      	ldr	r2, [pc, #176]	; (8008578 <HAL_DMA_Abort_IT+0x1a8>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d040      	beq.n	800854c <HAL_DMA_Abort_IT+0x17c>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a2b      	ldr	r2, [pc, #172]	; (800857c <HAL_DMA_Abort_IT+0x1ac>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d03b      	beq.n	800854c <HAL_DMA_Abort_IT+0x17c>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a29      	ldr	r2, [pc, #164]	; (8008580 <HAL_DMA_Abort_IT+0x1b0>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d036      	beq.n	800854c <HAL_DMA_Abort_IT+0x17c>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a28      	ldr	r2, [pc, #160]	; (8008584 <HAL_DMA_Abort_IT+0x1b4>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d031      	beq.n	800854c <HAL_DMA_Abort_IT+0x17c>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a26      	ldr	r2, [pc, #152]	; (8008588 <HAL_DMA_Abort_IT+0x1b8>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d02c      	beq.n	800854c <HAL_DMA_Abort_IT+0x17c>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a25      	ldr	r2, [pc, #148]	; (800858c <HAL_DMA_Abort_IT+0x1bc>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d027      	beq.n	800854c <HAL_DMA_Abort_IT+0x17c>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a23      	ldr	r2, [pc, #140]	; (8008590 <HAL_DMA_Abort_IT+0x1c0>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d022      	beq.n	800854c <HAL_DMA_Abort_IT+0x17c>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a22      	ldr	r2, [pc, #136]	; (8008594 <HAL_DMA_Abort_IT+0x1c4>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d01d      	beq.n	800854c <HAL_DMA_Abort_IT+0x17c>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a20      	ldr	r2, [pc, #128]	; (8008598 <HAL_DMA_Abort_IT+0x1c8>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d018      	beq.n	800854c <HAL_DMA_Abort_IT+0x17c>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a1f      	ldr	r2, [pc, #124]	; (800859c <HAL_DMA_Abort_IT+0x1cc>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d013      	beq.n	800854c <HAL_DMA_Abort_IT+0x17c>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a1d      	ldr	r2, [pc, #116]	; (80085a0 <HAL_DMA_Abort_IT+0x1d0>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d00e      	beq.n	800854c <HAL_DMA_Abort_IT+0x17c>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a1c      	ldr	r2, [pc, #112]	; (80085a4 <HAL_DMA_Abort_IT+0x1d4>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d009      	beq.n	800854c <HAL_DMA_Abort_IT+0x17c>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a1a      	ldr	r2, [pc, #104]	; (80085a8 <HAL_DMA_Abort_IT+0x1d8>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d004      	beq.n	800854c <HAL_DMA_Abort_IT+0x17c>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a19      	ldr	r2, [pc, #100]	; (80085ac <HAL_DMA_Abort_IT+0x1dc>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d108      	bne.n	800855e <HAL_DMA_Abort_IT+0x18e>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f022 0201 	bic.w	r2, r2, #1
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	e178      	b.n	8008850 <HAL_DMA_Abort_IT+0x480>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f022 0201 	bic.w	r2, r2, #1
 800856c:	601a      	str	r2, [r3, #0]
 800856e:	e16f      	b.n	8008850 <HAL_DMA_Abort_IT+0x480>
 8008570:	40020010 	.word	0x40020010
 8008574:	40020028 	.word	0x40020028
 8008578:	40020040 	.word	0x40020040
 800857c:	40020058 	.word	0x40020058
 8008580:	40020070 	.word	0x40020070
 8008584:	40020088 	.word	0x40020088
 8008588:	400200a0 	.word	0x400200a0
 800858c:	400200b8 	.word	0x400200b8
 8008590:	40020410 	.word	0x40020410
 8008594:	40020428 	.word	0x40020428
 8008598:	40020440 	.word	0x40020440
 800859c:	40020458 	.word	0x40020458
 80085a0:	40020470 	.word	0x40020470
 80085a4:	40020488 	.word	0x40020488
 80085a8:	400204a0 	.word	0x400204a0
 80085ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f022 020e 	bic.w	r2, r2, #14
 80085be:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a6c      	ldr	r2, [pc, #432]	; (8008778 <HAL_DMA_Abort_IT+0x3a8>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d04a      	beq.n	8008660 <HAL_DMA_Abort_IT+0x290>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a6b      	ldr	r2, [pc, #428]	; (800877c <HAL_DMA_Abort_IT+0x3ac>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d045      	beq.n	8008660 <HAL_DMA_Abort_IT+0x290>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a69      	ldr	r2, [pc, #420]	; (8008780 <HAL_DMA_Abort_IT+0x3b0>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d040      	beq.n	8008660 <HAL_DMA_Abort_IT+0x290>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a68      	ldr	r2, [pc, #416]	; (8008784 <HAL_DMA_Abort_IT+0x3b4>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d03b      	beq.n	8008660 <HAL_DMA_Abort_IT+0x290>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a66      	ldr	r2, [pc, #408]	; (8008788 <HAL_DMA_Abort_IT+0x3b8>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d036      	beq.n	8008660 <HAL_DMA_Abort_IT+0x290>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a65      	ldr	r2, [pc, #404]	; (800878c <HAL_DMA_Abort_IT+0x3bc>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d031      	beq.n	8008660 <HAL_DMA_Abort_IT+0x290>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a63      	ldr	r2, [pc, #396]	; (8008790 <HAL_DMA_Abort_IT+0x3c0>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d02c      	beq.n	8008660 <HAL_DMA_Abort_IT+0x290>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a62      	ldr	r2, [pc, #392]	; (8008794 <HAL_DMA_Abort_IT+0x3c4>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d027      	beq.n	8008660 <HAL_DMA_Abort_IT+0x290>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a60      	ldr	r2, [pc, #384]	; (8008798 <HAL_DMA_Abort_IT+0x3c8>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d022      	beq.n	8008660 <HAL_DMA_Abort_IT+0x290>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a5f      	ldr	r2, [pc, #380]	; (800879c <HAL_DMA_Abort_IT+0x3cc>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d01d      	beq.n	8008660 <HAL_DMA_Abort_IT+0x290>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a5d      	ldr	r2, [pc, #372]	; (80087a0 <HAL_DMA_Abort_IT+0x3d0>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d018      	beq.n	8008660 <HAL_DMA_Abort_IT+0x290>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a5c      	ldr	r2, [pc, #368]	; (80087a4 <HAL_DMA_Abort_IT+0x3d4>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d013      	beq.n	8008660 <HAL_DMA_Abort_IT+0x290>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a5a      	ldr	r2, [pc, #360]	; (80087a8 <HAL_DMA_Abort_IT+0x3d8>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d00e      	beq.n	8008660 <HAL_DMA_Abort_IT+0x290>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a59      	ldr	r2, [pc, #356]	; (80087ac <HAL_DMA_Abort_IT+0x3dc>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d009      	beq.n	8008660 <HAL_DMA_Abort_IT+0x290>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a57      	ldr	r2, [pc, #348]	; (80087b0 <HAL_DMA_Abort_IT+0x3e0>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d004      	beq.n	8008660 <HAL_DMA_Abort_IT+0x290>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a56      	ldr	r2, [pc, #344]	; (80087b4 <HAL_DMA_Abort_IT+0x3e4>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d108      	bne.n	8008672 <HAL_DMA_Abort_IT+0x2a2>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f022 0201 	bic.w	r2, r2, #1
 800866e:	601a      	str	r2, [r3, #0]
 8008670:	e007      	b.n	8008682 <HAL_DMA_Abort_IT+0x2b2>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681a      	ldr	r2, [r3, #0]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f022 0201 	bic.w	r2, r2, #1
 8008680:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a3c      	ldr	r2, [pc, #240]	; (8008778 <HAL_DMA_Abort_IT+0x3a8>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d072      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a3a      	ldr	r2, [pc, #232]	; (800877c <HAL_DMA_Abort_IT+0x3ac>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d06d      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a39      	ldr	r2, [pc, #228]	; (8008780 <HAL_DMA_Abort_IT+0x3b0>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d068      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a37      	ldr	r2, [pc, #220]	; (8008784 <HAL_DMA_Abort_IT+0x3b4>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d063      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a36      	ldr	r2, [pc, #216]	; (8008788 <HAL_DMA_Abort_IT+0x3b8>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d05e      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a34      	ldr	r2, [pc, #208]	; (800878c <HAL_DMA_Abort_IT+0x3bc>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d059      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a33      	ldr	r2, [pc, #204]	; (8008790 <HAL_DMA_Abort_IT+0x3c0>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d054      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a31      	ldr	r2, [pc, #196]	; (8008794 <HAL_DMA_Abort_IT+0x3c4>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d04f      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a30      	ldr	r2, [pc, #192]	; (8008798 <HAL_DMA_Abort_IT+0x3c8>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d04a      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a2e      	ldr	r2, [pc, #184]	; (800879c <HAL_DMA_Abort_IT+0x3cc>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d045      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a2d      	ldr	r2, [pc, #180]	; (80087a0 <HAL_DMA_Abort_IT+0x3d0>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d040      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a2b      	ldr	r2, [pc, #172]	; (80087a4 <HAL_DMA_Abort_IT+0x3d4>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d03b      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a2a      	ldr	r2, [pc, #168]	; (80087a8 <HAL_DMA_Abort_IT+0x3d8>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d036      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a28      	ldr	r2, [pc, #160]	; (80087ac <HAL_DMA_Abort_IT+0x3dc>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d031      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a27      	ldr	r2, [pc, #156]	; (80087b0 <HAL_DMA_Abort_IT+0x3e0>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d02c      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a25      	ldr	r2, [pc, #148]	; (80087b4 <HAL_DMA_Abort_IT+0x3e4>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d027      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a24      	ldr	r2, [pc, #144]	; (80087b8 <HAL_DMA_Abort_IT+0x3e8>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d022      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a22      	ldr	r2, [pc, #136]	; (80087bc <HAL_DMA_Abort_IT+0x3ec>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d01d      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a21      	ldr	r2, [pc, #132]	; (80087c0 <HAL_DMA_Abort_IT+0x3f0>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d018      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a1f      	ldr	r2, [pc, #124]	; (80087c4 <HAL_DMA_Abort_IT+0x3f4>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d013      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a1e      	ldr	r2, [pc, #120]	; (80087c8 <HAL_DMA_Abort_IT+0x3f8>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d00e      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a1c      	ldr	r2, [pc, #112]	; (80087cc <HAL_DMA_Abort_IT+0x3fc>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d009      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a1b      	ldr	r2, [pc, #108]	; (80087d0 <HAL_DMA_Abort_IT+0x400>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d004      	beq.n	8008772 <HAL_DMA_Abort_IT+0x3a2>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a19      	ldr	r2, [pc, #100]	; (80087d4 <HAL_DMA_Abort_IT+0x404>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d132      	bne.n	80087d8 <HAL_DMA_Abort_IT+0x408>
 8008772:	2301      	movs	r3, #1
 8008774:	e031      	b.n	80087da <HAL_DMA_Abort_IT+0x40a>
 8008776:	bf00      	nop
 8008778:	40020010 	.word	0x40020010
 800877c:	40020028 	.word	0x40020028
 8008780:	40020040 	.word	0x40020040
 8008784:	40020058 	.word	0x40020058
 8008788:	40020070 	.word	0x40020070
 800878c:	40020088 	.word	0x40020088
 8008790:	400200a0 	.word	0x400200a0
 8008794:	400200b8 	.word	0x400200b8
 8008798:	40020410 	.word	0x40020410
 800879c:	40020428 	.word	0x40020428
 80087a0:	40020440 	.word	0x40020440
 80087a4:	40020458 	.word	0x40020458
 80087a8:	40020470 	.word	0x40020470
 80087ac:	40020488 	.word	0x40020488
 80087b0:	400204a0 	.word	0x400204a0
 80087b4:	400204b8 	.word	0x400204b8
 80087b8:	58025408 	.word	0x58025408
 80087bc:	5802541c 	.word	0x5802541c
 80087c0:	58025430 	.word	0x58025430
 80087c4:	58025444 	.word	0x58025444
 80087c8:	58025458 	.word	0x58025458
 80087cc:	5802546c 	.word	0x5802546c
 80087d0:	58025480 	.word	0x58025480
 80087d4:	58025494 	.word	0x58025494
 80087d8:	2300      	movs	r3, #0
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d028      	beq.n	8008830 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087ec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f8:	f003 031f 	and.w	r3, r3, #31
 80087fc:	2201      	movs	r2, #1
 80087fe:	409a      	lsls	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800880c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00c      	beq.n	8008830 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008824:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800882e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008844:	2b00      	cmp	r3, #0
 8008846:	d003      	beq.n	8008850 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop

0800885c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08a      	sub	sp, #40	; 0x28
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008864:	2300      	movs	r3, #0
 8008866:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008868:	4b67      	ldr	r3, [pc, #412]	; (8008a08 <HAL_DMA_IRQHandler+0x1ac>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a67      	ldr	r2, [pc, #412]	; (8008a0c <HAL_DMA_IRQHandler+0x1b0>)
 800886e:	fba2 2303 	umull	r2, r3, r2, r3
 8008872:	0a9b      	lsrs	r3, r3, #10
 8008874:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800887a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008880:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a5f      	ldr	r2, [pc, #380]	; (8008a10 <HAL_DMA_IRQHandler+0x1b4>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d04a      	beq.n	800892e <HAL_DMA_IRQHandler+0xd2>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a5d      	ldr	r2, [pc, #372]	; (8008a14 <HAL_DMA_IRQHandler+0x1b8>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d045      	beq.n	800892e <HAL_DMA_IRQHandler+0xd2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a5c      	ldr	r2, [pc, #368]	; (8008a18 <HAL_DMA_IRQHandler+0x1bc>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d040      	beq.n	800892e <HAL_DMA_IRQHandler+0xd2>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a5a      	ldr	r2, [pc, #360]	; (8008a1c <HAL_DMA_IRQHandler+0x1c0>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d03b      	beq.n	800892e <HAL_DMA_IRQHandler+0xd2>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a59      	ldr	r2, [pc, #356]	; (8008a20 <HAL_DMA_IRQHandler+0x1c4>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d036      	beq.n	800892e <HAL_DMA_IRQHandler+0xd2>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a57      	ldr	r2, [pc, #348]	; (8008a24 <HAL_DMA_IRQHandler+0x1c8>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d031      	beq.n	800892e <HAL_DMA_IRQHandler+0xd2>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a56      	ldr	r2, [pc, #344]	; (8008a28 <HAL_DMA_IRQHandler+0x1cc>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d02c      	beq.n	800892e <HAL_DMA_IRQHandler+0xd2>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a54      	ldr	r2, [pc, #336]	; (8008a2c <HAL_DMA_IRQHandler+0x1d0>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d027      	beq.n	800892e <HAL_DMA_IRQHandler+0xd2>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a53      	ldr	r2, [pc, #332]	; (8008a30 <HAL_DMA_IRQHandler+0x1d4>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d022      	beq.n	800892e <HAL_DMA_IRQHandler+0xd2>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a51      	ldr	r2, [pc, #324]	; (8008a34 <HAL_DMA_IRQHandler+0x1d8>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d01d      	beq.n	800892e <HAL_DMA_IRQHandler+0xd2>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a50      	ldr	r2, [pc, #320]	; (8008a38 <HAL_DMA_IRQHandler+0x1dc>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d018      	beq.n	800892e <HAL_DMA_IRQHandler+0xd2>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a4e      	ldr	r2, [pc, #312]	; (8008a3c <HAL_DMA_IRQHandler+0x1e0>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d013      	beq.n	800892e <HAL_DMA_IRQHandler+0xd2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a4d      	ldr	r2, [pc, #308]	; (8008a40 <HAL_DMA_IRQHandler+0x1e4>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d00e      	beq.n	800892e <HAL_DMA_IRQHandler+0xd2>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a4b      	ldr	r2, [pc, #300]	; (8008a44 <HAL_DMA_IRQHandler+0x1e8>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d009      	beq.n	800892e <HAL_DMA_IRQHandler+0xd2>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a4a      	ldr	r2, [pc, #296]	; (8008a48 <HAL_DMA_IRQHandler+0x1ec>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d004      	beq.n	800892e <HAL_DMA_IRQHandler+0xd2>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a48      	ldr	r2, [pc, #288]	; (8008a4c <HAL_DMA_IRQHandler+0x1f0>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d101      	bne.n	8008932 <HAL_DMA_IRQHandler+0xd6>
 800892e:	2301      	movs	r3, #1
 8008930:	e000      	b.n	8008934 <HAL_DMA_IRQHandler+0xd8>
 8008932:	2300      	movs	r3, #0
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 842b 	beq.w	8009190 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800893e:	f003 031f 	and.w	r3, r3, #31
 8008942:	2208      	movs	r2, #8
 8008944:	409a      	lsls	r2, r3
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	4013      	ands	r3, r2
 800894a:	2b00      	cmp	r3, #0
 800894c:	f000 80a2 	beq.w	8008a94 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a2e      	ldr	r2, [pc, #184]	; (8008a10 <HAL_DMA_IRQHandler+0x1b4>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d04a      	beq.n	80089f0 <HAL_DMA_IRQHandler+0x194>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a2d      	ldr	r2, [pc, #180]	; (8008a14 <HAL_DMA_IRQHandler+0x1b8>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d045      	beq.n	80089f0 <HAL_DMA_IRQHandler+0x194>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a2b      	ldr	r2, [pc, #172]	; (8008a18 <HAL_DMA_IRQHandler+0x1bc>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d040      	beq.n	80089f0 <HAL_DMA_IRQHandler+0x194>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a2a      	ldr	r2, [pc, #168]	; (8008a1c <HAL_DMA_IRQHandler+0x1c0>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d03b      	beq.n	80089f0 <HAL_DMA_IRQHandler+0x194>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a28      	ldr	r2, [pc, #160]	; (8008a20 <HAL_DMA_IRQHandler+0x1c4>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d036      	beq.n	80089f0 <HAL_DMA_IRQHandler+0x194>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a27      	ldr	r2, [pc, #156]	; (8008a24 <HAL_DMA_IRQHandler+0x1c8>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d031      	beq.n	80089f0 <HAL_DMA_IRQHandler+0x194>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a25      	ldr	r2, [pc, #148]	; (8008a28 <HAL_DMA_IRQHandler+0x1cc>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d02c      	beq.n	80089f0 <HAL_DMA_IRQHandler+0x194>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a24      	ldr	r2, [pc, #144]	; (8008a2c <HAL_DMA_IRQHandler+0x1d0>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d027      	beq.n	80089f0 <HAL_DMA_IRQHandler+0x194>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a22      	ldr	r2, [pc, #136]	; (8008a30 <HAL_DMA_IRQHandler+0x1d4>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d022      	beq.n	80089f0 <HAL_DMA_IRQHandler+0x194>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4a21      	ldr	r2, [pc, #132]	; (8008a34 <HAL_DMA_IRQHandler+0x1d8>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d01d      	beq.n	80089f0 <HAL_DMA_IRQHandler+0x194>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a1f      	ldr	r2, [pc, #124]	; (8008a38 <HAL_DMA_IRQHandler+0x1dc>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d018      	beq.n	80089f0 <HAL_DMA_IRQHandler+0x194>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a1e      	ldr	r2, [pc, #120]	; (8008a3c <HAL_DMA_IRQHandler+0x1e0>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d013      	beq.n	80089f0 <HAL_DMA_IRQHandler+0x194>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a1c      	ldr	r2, [pc, #112]	; (8008a40 <HAL_DMA_IRQHandler+0x1e4>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d00e      	beq.n	80089f0 <HAL_DMA_IRQHandler+0x194>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a1b      	ldr	r2, [pc, #108]	; (8008a44 <HAL_DMA_IRQHandler+0x1e8>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d009      	beq.n	80089f0 <HAL_DMA_IRQHandler+0x194>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a19      	ldr	r2, [pc, #100]	; (8008a48 <HAL_DMA_IRQHandler+0x1ec>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d004      	beq.n	80089f0 <HAL_DMA_IRQHandler+0x194>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a18      	ldr	r2, [pc, #96]	; (8008a4c <HAL_DMA_IRQHandler+0x1f0>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d12f      	bne.n	8008a50 <HAL_DMA_IRQHandler+0x1f4>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	bf14      	ite	ne
 80089fe:	2301      	movne	r3, #1
 8008a00:	2300      	moveq	r3, #0
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	e02e      	b.n	8008a64 <HAL_DMA_IRQHandler+0x208>
 8008a06:	bf00      	nop
 8008a08:	24000238 	.word	0x24000238
 8008a0c:	1b4e81b5 	.word	0x1b4e81b5
 8008a10:	40020010 	.word	0x40020010
 8008a14:	40020028 	.word	0x40020028
 8008a18:	40020040 	.word	0x40020040
 8008a1c:	40020058 	.word	0x40020058
 8008a20:	40020070 	.word	0x40020070
 8008a24:	40020088 	.word	0x40020088
 8008a28:	400200a0 	.word	0x400200a0
 8008a2c:	400200b8 	.word	0x400200b8
 8008a30:	40020410 	.word	0x40020410
 8008a34:	40020428 	.word	0x40020428
 8008a38:	40020440 	.word	0x40020440
 8008a3c:	40020458 	.word	0x40020458
 8008a40:	40020470 	.word	0x40020470
 8008a44:	40020488 	.word	0x40020488
 8008a48:	400204a0 	.word	0x400204a0
 8008a4c:	400204b8 	.word	0x400204b8
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 0308 	and.w	r3, r3, #8
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	bf14      	ite	ne
 8008a5e:	2301      	movne	r3, #1
 8008a60:	2300      	moveq	r3, #0
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d015      	beq.n	8008a94 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f022 0204 	bic.w	r2, r2, #4
 8008a76:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a7c:	f003 031f 	and.w	r3, r3, #31
 8008a80:	2208      	movs	r2, #8
 8008a82:	409a      	lsls	r2, r3
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8c:	f043 0201 	orr.w	r2, r3, #1
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a98:	f003 031f 	and.w	r3, r3, #31
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa2:	f003 0301 	and.w	r3, r3, #1
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d06e      	beq.n	8008b88 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a69      	ldr	r2, [pc, #420]	; (8008c54 <HAL_DMA_IRQHandler+0x3f8>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d04a      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x2ee>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a67      	ldr	r2, [pc, #412]	; (8008c58 <HAL_DMA_IRQHandler+0x3fc>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d045      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x2ee>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a66      	ldr	r2, [pc, #408]	; (8008c5c <HAL_DMA_IRQHandler+0x400>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d040      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x2ee>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a64      	ldr	r2, [pc, #400]	; (8008c60 <HAL_DMA_IRQHandler+0x404>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d03b      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x2ee>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a63      	ldr	r2, [pc, #396]	; (8008c64 <HAL_DMA_IRQHandler+0x408>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d036      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x2ee>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a61      	ldr	r2, [pc, #388]	; (8008c68 <HAL_DMA_IRQHandler+0x40c>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d031      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x2ee>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a60      	ldr	r2, [pc, #384]	; (8008c6c <HAL_DMA_IRQHandler+0x410>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d02c      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x2ee>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a5e      	ldr	r2, [pc, #376]	; (8008c70 <HAL_DMA_IRQHandler+0x414>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d027      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x2ee>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a5d      	ldr	r2, [pc, #372]	; (8008c74 <HAL_DMA_IRQHandler+0x418>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d022      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x2ee>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a5b      	ldr	r2, [pc, #364]	; (8008c78 <HAL_DMA_IRQHandler+0x41c>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d01d      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x2ee>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a5a      	ldr	r2, [pc, #360]	; (8008c7c <HAL_DMA_IRQHandler+0x420>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d018      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x2ee>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a58      	ldr	r2, [pc, #352]	; (8008c80 <HAL_DMA_IRQHandler+0x424>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d013      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x2ee>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a57      	ldr	r2, [pc, #348]	; (8008c84 <HAL_DMA_IRQHandler+0x428>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d00e      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x2ee>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a55      	ldr	r2, [pc, #340]	; (8008c88 <HAL_DMA_IRQHandler+0x42c>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d009      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x2ee>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a54      	ldr	r2, [pc, #336]	; (8008c8c <HAL_DMA_IRQHandler+0x430>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d004      	beq.n	8008b4a <HAL_DMA_IRQHandler+0x2ee>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a52      	ldr	r2, [pc, #328]	; (8008c90 <HAL_DMA_IRQHandler+0x434>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d10a      	bne.n	8008b60 <HAL_DMA_IRQHandler+0x304>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	bf14      	ite	ne
 8008b58:	2301      	movne	r3, #1
 8008b5a:	2300      	moveq	r3, #0
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	e003      	b.n	8008b68 <HAL_DMA_IRQHandler+0x30c>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2300      	movs	r3, #0
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00d      	beq.n	8008b88 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b70:	f003 031f 	and.w	r3, r3, #31
 8008b74:	2201      	movs	r2, #1
 8008b76:	409a      	lsls	r2, r3
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b80:	f043 0202 	orr.w	r2, r3, #2
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b8c:	f003 031f 	and.w	r3, r3, #31
 8008b90:	2204      	movs	r2, #4
 8008b92:	409a      	lsls	r2, r3
 8008b94:	69bb      	ldr	r3, [r7, #24]
 8008b96:	4013      	ands	r3, r2
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 808f 	beq.w	8008cbc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a2c      	ldr	r2, [pc, #176]	; (8008c54 <HAL_DMA_IRQHandler+0x3f8>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d04a      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x3e2>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a2a      	ldr	r2, [pc, #168]	; (8008c58 <HAL_DMA_IRQHandler+0x3fc>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d045      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x3e2>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a29      	ldr	r2, [pc, #164]	; (8008c5c <HAL_DMA_IRQHandler+0x400>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d040      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x3e2>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a27      	ldr	r2, [pc, #156]	; (8008c60 <HAL_DMA_IRQHandler+0x404>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d03b      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x3e2>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a26      	ldr	r2, [pc, #152]	; (8008c64 <HAL_DMA_IRQHandler+0x408>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d036      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x3e2>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a24      	ldr	r2, [pc, #144]	; (8008c68 <HAL_DMA_IRQHandler+0x40c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d031      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x3e2>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a23      	ldr	r2, [pc, #140]	; (8008c6c <HAL_DMA_IRQHandler+0x410>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d02c      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x3e2>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a21      	ldr	r2, [pc, #132]	; (8008c70 <HAL_DMA_IRQHandler+0x414>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d027      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x3e2>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a20      	ldr	r2, [pc, #128]	; (8008c74 <HAL_DMA_IRQHandler+0x418>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d022      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x3e2>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a1e      	ldr	r2, [pc, #120]	; (8008c78 <HAL_DMA_IRQHandler+0x41c>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d01d      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x3e2>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a1d      	ldr	r2, [pc, #116]	; (8008c7c <HAL_DMA_IRQHandler+0x420>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d018      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x3e2>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a1b      	ldr	r2, [pc, #108]	; (8008c80 <HAL_DMA_IRQHandler+0x424>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d013      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x3e2>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a1a      	ldr	r2, [pc, #104]	; (8008c84 <HAL_DMA_IRQHandler+0x428>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d00e      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x3e2>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a18      	ldr	r2, [pc, #96]	; (8008c88 <HAL_DMA_IRQHandler+0x42c>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d009      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x3e2>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a17      	ldr	r2, [pc, #92]	; (8008c8c <HAL_DMA_IRQHandler+0x430>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d004      	beq.n	8008c3e <HAL_DMA_IRQHandler+0x3e2>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a15      	ldr	r2, [pc, #84]	; (8008c90 <HAL_DMA_IRQHandler+0x434>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d12a      	bne.n	8008c94 <HAL_DMA_IRQHandler+0x438>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0302 	and.w	r3, r3, #2
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	bf14      	ite	ne
 8008c4c:	2301      	movne	r3, #1
 8008c4e:	2300      	moveq	r3, #0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	e023      	b.n	8008c9c <HAL_DMA_IRQHandler+0x440>
 8008c54:	40020010 	.word	0x40020010
 8008c58:	40020028 	.word	0x40020028
 8008c5c:	40020040 	.word	0x40020040
 8008c60:	40020058 	.word	0x40020058
 8008c64:	40020070 	.word	0x40020070
 8008c68:	40020088 	.word	0x40020088
 8008c6c:	400200a0 	.word	0x400200a0
 8008c70:	400200b8 	.word	0x400200b8
 8008c74:	40020410 	.word	0x40020410
 8008c78:	40020428 	.word	0x40020428
 8008c7c:	40020440 	.word	0x40020440
 8008c80:	40020458 	.word	0x40020458
 8008c84:	40020470 	.word	0x40020470
 8008c88:	40020488 	.word	0x40020488
 8008c8c:	400204a0 	.word	0x400204a0
 8008c90:	400204b8 	.word	0x400204b8
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00d      	beq.n	8008cbc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ca4:	f003 031f 	and.w	r3, r3, #31
 8008ca8:	2204      	movs	r2, #4
 8008caa:	409a      	lsls	r2, r3
 8008cac:	6a3b      	ldr	r3, [r7, #32]
 8008cae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb4:	f043 0204 	orr.w	r2, r3, #4
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cc0:	f003 031f 	and.w	r3, r3, #31
 8008cc4:	2210      	movs	r2, #16
 8008cc6:	409a      	lsls	r2, r3
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 80a6 	beq.w	8008e1e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a85      	ldr	r2, [pc, #532]	; (8008eec <HAL_DMA_IRQHandler+0x690>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d04a      	beq.n	8008d72 <HAL_DMA_IRQHandler+0x516>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a83      	ldr	r2, [pc, #524]	; (8008ef0 <HAL_DMA_IRQHandler+0x694>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d045      	beq.n	8008d72 <HAL_DMA_IRQHandler+0x516>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a82      	ldr	r2, [pc, #520]	; (8008ef4 <HAL_DMA_IRQHandler+0x698>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d040      	beq.n	8008d72 <HAL_DMA_IRQHandler+0x516>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a80      	ldr	r2, [pc, #512]	; (8008ef8 <HAL_DMA_IRQHandler+0x69c>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d03b      	beq.n	8008d72 <HAL_DMA_IRQHandler+0x516>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a7f      	ldr	r2, [pc, #508]	; (8008efc <HAL_DMA_IRQHandler+0x6a0>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d036      	beq.n	8008d72 <HAL_DMA_IRQHandler+0x516>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a7d      	ldr	r2, [pc, #500]	; (8008f00 <HAL_DMA_IRQHandler+0x6a4>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d031      	beq.n	8008d72 <HAL_DMA_IRQHandler+0x516>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a7c      	ldr	r2, [pc, #496]	; (8008f04 <HAL_DMA_IRQHandler+0x6a8>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d02c      	beq.n	8008d72 <HAL_DMA_IRQHandler+0x516>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a7a      	ldr	r2, [pc, #488]	; (8008f08 <HAL_DMA_IRQHandler+0x6ac>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d027      	beq.n	8008d72 <HAL_DMA_IRQHandler+0x516>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a79      	ldr	r2, [pc, #484]	; (8008f0c <HAL_DMA_IRQHandler+0x6b0>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d022      	beq.n	8008d72 <HAL_DMA_IRQHandler+0x516>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a77      	ldr	r2, [pc, #476]	; (8008f10 <HAL_DMA_IRQHandler+0x6b4>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d01d      	beq.n	8008d72 <HAL_DMA_IRQHandler+0x516>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a76      	ldr	r2, [pc, #472]	; (8008f14 <HAL_DMA_IRQHandler+0x6b8>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d018      	beq.n	8008d72 <HAL_DMA_IRQHandler+0x516>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a74      	ldr	r2, [pc, #464]	; (8008f18 <HAL_DMA_IRQHandler+0x6bc>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d013      	beq.n	8008d72 <HAL_DMA_IRQHandler+0x516>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a73      	ldr	r2, [pc, #460]	; (8008f1c <HAL_DMA_IRQHandler+0x6c0>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d00e      	beq.n	8008d72 <HAL_DMA_IRQHandler+0x516>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a71      	ldr	r2, [pc, #452]	; (8008f20 <HAL_DMA_IRQHandler+0x6c4>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d009      	beq.n	8008d72 <HAL_DMA_IRQHandler+0x516>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a70      	ldr	r2, [pc, #448]	; (8008f24 <HAL_DMA_IRQHandler+0x6c8>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d004      	beq.n	8008d72 <HAL_DMA_IRQHandler+0x516>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a6e      	ldr	r2, [pc, #440]	; (8008f28 <HAL_DMA_IRQHandler+0x6cc>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d10a      	bne.n	8008d88 <HAL_DMA_IRQHandler+0x52c>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f003 0308 	and.w	r3, r3, #8
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	bf14      	ite	ne
 8008d80:	2301      	movne	r3, #1
 8008d82:	2300      	moveq	r3, #0
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	e009      	b.n	8008d9c <HAL_DMA_IRQHandler+0x540>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0304 	and.w	r3, r3, #4
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	bf14      	ite	ne
 8008d96:	2301      	movne	r3, #1
 8008d98:	2300      	moveq	r3, #0
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d03e      	beq.n	8008e1e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008da4:	f003 031f 	and.w	r3, r3, #31
 8008da8:	2210      	movs	r2, #16
 8008daa:	409a      	lsls	r2, r3
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d018      	beq.n	8008df0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d108      	bne.n	8008dde <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d024      	beq.n	8008e1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	4798      	blx	r3
 8008ddc:	e01f      	b.n	8008e1e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d01b      	beq.n	8008e1e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	4798      	blx	r3
 8008dee:	e016      	b.n	8008e1e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d107      	bne.n	8008e0e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f022 0208 	bic.w	r2, r2, #8
 8008e0c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d003      	beq.n	8008e1e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e22:	f003 031f 	and.w	r3, r3, #31
 8008e26:	2220      	movs	r2, #32
 8008e28:	409a      	lsls	r2, r3
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	f000 8110 	beq.w	8009054 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a2c      	ldr	r2, [pc, #176]	; (8008eec <HAL_DMA_IRQHandler+0x690>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d04a      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x678>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a2b      	ldr	r2, [pc, #172]	; (8008ef0 <HAL_DMA_IRQHandler+0x694>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d045      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x678>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a29      	ldr	r2, [pc, #164]	; (8008ef4 <HAL_DMA_IRQHandler+0x698>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d040      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x678>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a28      	ldr	r2, [pc, #160]	; (8008ef8 <HAL_DMA_IRQHandler+0x69c>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d03b      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x678>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a26      	ldr	r2, [pc, #152]	; (8008efc <HAL_DMA_IRQHandler+0x6a0>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d036      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x678>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a25      	ldr	r2, [pc, #148]	; (8008f00 <HAL_DMA_IRQHandler+0x6a4>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d031      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x678>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a23      	ldr	r2, [pc, #140]	; (8008f04 <HAL_DMA_IRQHandler+0x6a8>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d02c      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x678>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a22      	ldr	r2, [pc, #136]	; (8008f08 <HAL_DMA_IRQHandler+0x6ac>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d027      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x678>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a20      	ldr	r2, [pc, #128]	; (8008f0c <HAL_DMA_IRQHandler+0x6b0>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d022      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x678>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a1f      	ldr	r2, [pc, #124]	; (8008f10 <HAL_DMA_IRQHandler+0x6b4>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d01d      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x678>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a1d      	ldr	r2, [pc, #116]	; (8008f14 <HAL_DMA_IRQHandler+0x6b8>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d018      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x678>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a1c      	ldr	r2, [pc, #112]	; (8008f18 <HAL_DMA_IRQHandler+0x6bc>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d013      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x678>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a1a      	ldr	r2, [pc, #104]	; (8008f1c <HAL_DMA_IRQHandler+0x6c0>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d00e      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x678>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a19      	ldr	r2, [pc, #100]	; (8008f20 <HAL_DMA_IRQHandler+0x6c4>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d009      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x678>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a17      	ldr	r2, [pc, #92]	; (8008f24 <HAL_DMA_IRQHandler+0x6c8>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d004      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x678>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a16      	ldr	r2, [pc, #88]	; (8008f28 <HAL_DMA_IRQHandler+0x6cc>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d12b      	bne.n	8008f2c <HAL_DMA_IRQHandler+0x6d0>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0310 	and.w	r3, r3, #16
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	bf14      	ite	ne
 8008ee2:	2301      	movne	r3, #1
 8008ee4:	2300      	moveq	r3, #0
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	e02a      	b.n	8008f40 <HAL_DMA_IRQHandler+0x6e4>
 8008eea:	bf00      	nop
 8008eec:	40020010 	.word	0x40020010
 8008ef0:	40020028 	.word	0x40020028
 8008ef4:	40020040 	.word	0x40020040
 8008ef8:	40020058 	.word	0x40020058
 8008efc:	40020070 	.word	0x40020070
 8008f00:	40020088 	.word	0x40020088
 8008f04:	400200a0 	.word	0x400200a0
 8008f08:	400200b8 	.word	0x400200b8
 8008f0c:	40020410 	.word	0x40020410
 8008f10:	40020428 	.word	0x40020428
 8008f14:	40020440 	.word	0x40020440
 8008f18:	40020458 	.word	0x40020458
 8008f1c:	40020470 	.word	0x40020470
 8008f20:	40020488 	.word	0x40020488
 8008f24:	400204a0 	.word	0x400204a0
 8008f28:	400204b8 	.word	0x400204b8
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 0302 	and.w	r3, r3, #2
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	bf14      	ite	ne
 8008f3a:	2301      	movne	r3, #1
 8008f3c:	2300      	moveq	r3, #0
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 8087 	beq.w	8009054 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f4a:	f003 031f 	and.w	r3, r3, #31
 8008f4e:	2220      	movs	r2, #32
 8008f50:	409a      	lsls	r2, r3
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	d139      	bne.n	8008fd6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 0216 	bic.w	r2, r2, #22
 8008f70:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	695a      	ldr	r2, [r3, #20]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f80:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d103      	bne.n	8008f92 <HAL_DMA_IRQHandler+0x736>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d007      	beq.n	8008fa2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f022 0208 	bic.w	r2, r2, #8
 8008fa0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fa6:	f003 031f 	and.w	r3, r3, #31
 8008faa:	223f      	movs	r2, #63	; 0x3f
 8008fac:	409a      	lsls	r2, r3
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f000 834a 	beq.w	8009660 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	4798      	blx	r3
          }
          return;
 8008fd4:	e344      	b.n	8009660 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d018      	beq.n	8009016 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d108      	bne.n	8009004 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d02c      	beq.n	8009054 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	4798      	blx	r3
 8009002:	e027      	b.n	8009054 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009008:	2b00      	cmp	r3, #0
 800900a:	d023      	beq.n	8009054 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	4798      	blx	r3
 8009014:	e01e      	b.n	8009054 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10f      	bne.n	8009044 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f022 0210 	bic.w	r2, r2, #16
 8009032:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009048:	2b00      	cmp	r3, #0
 800904a:	d003      	beq.n	8009054 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009058:	2b00      	cmp	r3, #0
 800905a:	f000 8306 	beq.w	800966a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009062:	f003 0301 	and.w	r3, r3, #1
 8009066:	2b00      	cmp	r3, #0
 8009068:	f000 8088 	beq.w	800917c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2204      	movs	r2, #4
 8009070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a7a      	ldr	r2, [pc, #488]	; (8009264 <HAL_DMA_IRQHandler+0xa08>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d04a      	beq.n	8009114 <HAL_DMA_IRQHandler+0x8b8>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a79      	ldr	r2, [pc, #484]	; (8009268 <HAL_DMA_IRQHandler+0xa0c>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d045      	beq.n	8009114 <HAL_DMA_IRQHandler+0x8b8>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a77      	ldr	r2, [pc, #476]	; (800926c <HAL_DMA_IRQHandler+0xa10>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d040      	beq.n	8009114 <HAL_DMA_IRQHandler+0x8b8>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a76      	ldr	r2, [pc, #472]	; (8009270 <HAL_DMA_IRQHandler+0xa14>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d03b      	beq.n	8009114 <HAL_DMA_IRQHandler+0x8b8>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a74      	ldr	r2, [pc, #464]	; (8009274 <HAL_DMA_IRQHandler+0xa18>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d036      	beq.n	8009114 <HAL_DMA_IRQHandler+0x8b8>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a73      	ldr	r2, [pc, #460]	; (8009278 <HAL_DMA_IRQHandler+0xa1c>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d031      	beq.n	8009114 <HAL_DMA_IRQHandler+0x8b8>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a71      	ldr	r2, [pc, #452]	; (800927c <HAL_DMA_IRQHandler+0xa20>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d02c      	beq.n	8009114 <HAL_DMA_IRQHandler+0x8b8>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a70      	ldr	r2, [pc, #448]	; (8009280 <HAL_DMA_IRQHandler+0xa24>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d027      	beq.n	8009114 <HAL_DMA_IRQHandler+0x8b8>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a6e      	ldr	r2, [pc, #440]	; (8009284 <HAL_DMA_IRQHandler+0xa28>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d022      	beq.n	8009114 <HAL_DMA_IRQHandler+0x8b8>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a6d      	ldr	r2, [pc, #436]	; (8009288 <HAL_DMA_IRQHandler+0xa2c>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d01d      	beq.n	8009114 <HAL_DMA_IRQHandler+0x8b8>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a6b      	ldr	r2, [pc, #428]	; (800928c <HAL_DMA_IRQHandler+0xa30>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d018      	beq.n	8009114 <HAL_DMA_IRQHandler+0x8b8>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a6a      	ldr	r2, [pc, #424]	; (8009290 <HAL_DMA_IRQHandler+0xa34>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d013      	beq.n	8009114 <HAL_DMA_IRQHandler+0x8b8>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a68      	ldr	r2, [pc, #416]	; (8009294 <HAL_DMA_IRQHandler+0xa38>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d00e      	beq.n	8009114 <HAL_DMA_IRQHandler+0x8b8>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a67      	ldr	r2, [pc, #412]	; (8009298 <HAL_DMA_IRQHandler+0xa3c>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d009      	beq.n	8009114 <HAL_DMA_IRQHandler+0x8b8>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a65      	ldr	r2, [pc, #404]	; (800929c <HAL_DMA_IRQHandler+0xa40>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d004      	beq.n	8009114 <HAL_DMA_IRQHandler+0x8b8>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a64      	ldr	r2, [pc, #400]	; (80092a0 <HAL_DMA_IRQHandler+0xa44>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d108      	bne.n	8009126 <HAL_DMA_IRQHandler+0x8ca>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f022 0201 	bic.w	r2, r2, #1
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	e007      	b.n	8009136 <HAL_DMA_IRQHandler+0x8da>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f022 0201 	bic.w	r2, r2, #1
 8009134:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	3301      	adds	r3, #1
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800913e:	429a      	cmp	r2, r3
 8009140:	d307      	bcc.n	8009152 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0301 	and.w	r3, r3, #1
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1f2      	bne.n	8009136 <HAL_DMA_IRQHandler+0x8da>
 8009150:	e000      	b.n	8009154 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009152:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b00      	cmp	r3, #0
 8009160:	d004      	beq.n	800916c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2203      	movs	r2, #3
 8009166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800916a:	e003      	b.n	8009174 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 8272 	beq.w	800966a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	4798      	blx	r3
 800918e:	e26c      	b.n	800966a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a43      	ldr	r2, [pc, #268]	; (80092a4 <HAL_DMA_IRQHandler+0xa48>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d022      	beq.n	80091e0 <HAL_DMA_IRQHandler+0x984>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a42      	ldr	r2, [pc, #264]	; (80092a8 <HAL_DMA_IRQHandler+0xa4c>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d01d      	beq.n	80091e0 <HAL_DMA_IRQHandler+0x984>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a40      	ldr	r2, [pc, #256]	; (80092ac <HAL_DMA_IRQHandler+0xa50>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d018      	beq.n	80091e0 <HAL_DMA_IRQHandler+0x984>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a3f      	ldr	r2, [pc, #252]	; (80092b0 <HAL_DMA_IRQHandler+0xa54>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d013      	beq.n	80091e0 <HAL_DMA_IRQHandler+0x984>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a3d      	ldr	r2, [pc, #244]	; (80092b4 <HAL_DMA_IRQHandler+0xa58>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d00e      	beq.n	80091e0 <HAL_DMA_IRQHandler+0x984>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a3c      	ldr	r2, [pc, #240]	; (80092b8 <HAL_DMA_IRQHandler+0xa5c>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d009      	beq.n	80091e0 <HAL_DMA_IRQHandler+0x984>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a3a      	ldr	r2, [pc, #232]	; (80092bc <HAL_DMA_IRQHandler+0xa60>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d004      	beq.n	80091e0 <HAL_DMA_IRQHandler+0x984>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a39      	ldr	r2, [pc, #228]	; (80092c0 <HAL_DMA_IRQHandler+0xa64>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d101      	bne.n	80091e4 <HAL_DMA_IRQHandler+0x988>
 80091e0:	2301      	movs	r3, #1
 80091e2:	e000      	b.n	80091e6 <HAL_DMA_IRQHandler+0x98a>
 80091e4:	2300      	movs	r3, #0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f000 823f 	beq.w	800966a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091f8:	f003 031f 	and.w	r3, r3, #31
 80091fc:	2204      	movs	r2, #4
 80091fe:	409a      	lsls	r2, r3
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	4013      	ands	r3, r2
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 80cd 	beq.w	80093a4 <HAL_DMA_IRQHandler+0xb48>
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	f003 0304 	and.w	r3, r3, #4
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 80c7 	beq.w	80093a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800921a:	f003 031f 	and.w	r3, r3, #31
 800921e:	2204      	movs	r2, #4
 8009220:	409a      	lsls	r2, r3
 8009222:	69fb      	ldr	r3, [r7, #28]
 8009224:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800922c:	2b00      	cmp	r3, #0
 800922e:	d049      	beq.n	80092c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d109      	bne.n	800924e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 8210 	beq.w	8009664 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800924c:	e20a      	b.n	8009664 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 8206 	beq.w	8009664 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009260:	e200      	b.n	8009664 <HAL_DMA_IRQHandler+0xe08>
 8009262:	bf00      	nop
 8009264:	40020010 	.word	0x40020010
 8009268:	40020028 	.word	0x40020028
 800926c:	40020040 	.word	0x40020040
 8009270:	40020058 	.word	0x40020058
 8009274:	40020070 	.word	0x40020070
 8009278:	40020088 	.word	0x40020088
 800927c:	400200a0 	.word	0x400200a0
 8009280:	400200b8 	.word	0x400200b8
 8009284:	40020410 	.word	0x40020410
 8009288:	40020428 	.word	0x40020428
 800928c:	40020440 	.word	0x40020440
 8009290:	40020458 	.word	0x40020458
 8009294:	40020470 	.word	0x40020470
 8009298:	40020488 	.word	0x40020488
 800929c:	400204a0 	.word	0x400204a0
 80092a0:	400204b8 	.word	0x400204b8
 80092a4:	58025408 	.word	0x58025408
 80092a8:	5802541c 	.word	0x5802541c
 80092ac:	58025430 	.word	0x58025430
 80092b0:	58025444 	.word	0x58025444
 80092b4:	58025458 	.word	0x58025458
 80092b8:	5802546c 	.word	0x5802546c
 80092bc:	58025480 	.word	0x58025480
 80092c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	f003 0320 	and.w	r3, r3, #32
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d160      	bne.n	8009390 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a7f      	ldr	r2, [pc, #508]	; (80094d0 <HAL_DMA_IRQHandler+0xc74>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d04a      	beq.n	800936e <HAL_DMA_IRQHandler+0xb12>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a7d      	ldr	r2, [pc, #500]	; (80094d4 <HAL_DMA_IRQHandler+0xc78>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d045      	beq.n	800936e <HAL_DMA_IRQHandler+0xb12>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a7c      	ldr	r2, [pc, #496]	; (80094d8 <HAL_DMA_IRQHandler+0xc7c>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d040      	beq.n	800936e <HAL_DMA_IRQHandler+0xb12>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a7a      	ldr	r2, [pc, #488]	; (80094dc <HAL_DMA_IRQHandler+0xc80>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d03b      	beq.n	800936e <HAL_DMA_IRQHandler+0xb12>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a79      	ldr	r2, [pc, #484]	; (80094e0 <HAL_DMA_IRQHandler+0xc84>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d036      	beq.n	800936e <HAL_DMA_IRQHandler+0xb12>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a77      	ldr	r2, [pc, #476]	; (80094e4 <HAL_DMA_IRQHandler+0xc88>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d031      	beq.n	800936e <HAL_DMA_IRQHandler+0xb12>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a76      	ldr	r2, [pc, #472]	; (80094e8 <HAL_DMA_IRQHandler+0xc8c>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d02c      	beq.n	800936e <HAL_DMA_IRQHandler+0xb12>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a74      	ldr	r2, [pc, #464]	; (80094ec <HAL_DMA_IRQHandler+0xc90>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d027      	beq.n	800936e <HAL_DMA_IRQHandler+0xb12>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a73      	ldr	r2, [pc, #460]	; (80094f0 <HAL_DMA_IRQHandler+0xc94>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d022      	beq.n	800936e <HAL_DMA_IRQHandler+0xb12>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a71      	ldr	r2, [pc, #452]	; (80094f4 <HAL_DMA_IRQHandler+0xc98>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d01d      	beq.n	800936e <HAL_DMA_IRQHandler+0xb12>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a70      	ldr	r2, [pc, #448]	; (80094f8 <HAL_DMA_IRQHandler+0xc9c>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d018      	beq.n	800936e <HAL_DMA_IRQHandler+0xb12>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a6e      	ldr	r2, [pc, #440]	; (80094fc <HAL_DMA_IRQHandler+0xca0>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d013      	beq.n	800936e <HAL_DMA_IRQHandler+0xb12>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a6d      	ldr	r2, [pc, #436]	; (8009500 <HAL_DMA_IRQHandler+0xca4>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d00e      	beq.n	800936e <HAL_DMA_IRQHandler+0xb12>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a6b      	ldr	r2, [pc, #428]	; (8009504 <HAL_DMA_IRQHandler+0xca8>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d009      	beq.n	800936e <HAL_DMA_IRQHandler+0xb12>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a6a      	ldr	r2, [pc, #424]	; (8009508 <HAL_DMA_IRQHandler+0xcac>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d004      	beq.n	800936e <HAL_DMA_IRQHandler+0xb12>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a68      	ldr	r2, [pc, #416]	; (800950c <HAL_DMA_IRQHandler+0xcb0>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d108      	bne.n	8009380 <HAL_DMA_IRQHandler+0xb24>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f022 0208 	bic.w	r2, r2, #8
 800937c:	601a      	str	r2, [r3, #0]
 800937e:	e007      	b.n	8009390 <HAL_DMA_IRQHandler+0xb34>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f022 0204 	bic.w	r2, r2, #4
 800938e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 8165 	beq.w	8009664 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093a2:	e15f      	b.n	8009664 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093a8:	f003 031f 	and.w	r3, r3, #31
 80093ac:	2202      	movs	r2, #2
 80093ae:	409a      	lsls	r2, r3
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	4013      	ands	r3, r2
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f000 80c5 	beq.w	8009544 <HAL_DMA_IRQHandler+0xce8>
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f003 0302 	and.w	r3, r3, #2
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 80bf 	beq.w	8009544 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ca:	f003 031f 	and.w	r3, r3, #31
 80093ce:	2202      	movs	r2, #2
 80093d0:	409a      	lsls	r2, r3
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d018      	beq.n	8009412 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d109      	bne.n	80093fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 813a 	beq.w	8009668 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093fc:	e134      	b.n	8009668 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009402:	2b00      	cmp	r3, #0
 8009404:	f000 8130 	beq.w	8009668 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009410:	e12a      	b.n	8009668 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	f003 0320 	and.w	r3, r3, #32
 8009418:	2b00      	cmp	r3, #0
 800941a:	f040 8089 	bne.w	8009530 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a2b      	ldr	r2, [pc, #172]	; (80094d0 <HAL_DMA_IRQHandler+0xc74>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d04a      	beq.n	80094be <HAL_DMA_IRQHandler+0xc62>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a29      	ldr	r2, [pc, #164]	; (80094d4 <HAL_DMA_IRQHandler+0xc78>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d045      	beq.n	80094be <HAL_DMA_IRQHandler+0xc62>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a28      	ldr	r2, [pc, #160]	; (80094d8 <HAL_DMA_IRQHandler+0xc7c>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d040      	beq.n	80094be <HAL_DMA_IRQHandler+0xc62>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a26      	ldr	r2, [pc, #152]	; (80094dc <HAL_DMA_IRQHandler+0xc80>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d03b      	beq.n	80094be <HAL_DMA_IRQHandler+0xc62>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a25      	ldr	r2, [pc, #148]	; (80094e0 <HAL_DMA_IRQHandler+0xc84>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d036      	beq.n	80094be <HAL_DMA_IRQHandler+0xc62>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a23      	ldr	r2, [pc, #140]	; (80094e4 <HAL_DMA_IRQHandler+0xc88>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d031      	beq.n	80094be <HAL_DMA_IRQHandler+0xc62>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a22      	ldr	r2, [pc, #136]	; (80094e8 <HAL_DMA_IRQHandler+0xc8c>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d02c      	beq.n	80094be <HAL_DMA_IRQHandler+0xc62>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a20      	ldr	r2, [pc, #128]	; (80094ec <HAL_DMA_IRQHandler+0xc90>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d027      	beq.n	80094be <HAL_DMA_IRQHandler+0xc62>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a1f      	ldr	r2, [pc, #124]	; (80094f0 <HAL_DMA_IRQHandler+0xc94>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d022      	beq.n	80094be <HAL_DMA_IRQHandler+0xc62>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a1d      	ldr	r2, [pc, #116]	; (80094f4 <HAL_DMA_IRQHandler+0xc98>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d01d      	beq.n	80094be <HAL_DMA_IRQHandler+0xc62>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a1c      	ldr	r2, [pc, #112]	; (80094f8 <HAL_DMA_IRQHandler+0xc9c>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d018      	beq.n	80094be <HAL_DMA_IRQHandler+0xc62>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a1a      	ldr	r2, [pc, #104]	; (80094fc <HAL_DMA_IRQHandler+0xca0>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d013      	beq.n	80094be <HAL_DMA_IRQHandler+0xc62>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a19      	ldr	r2, [pc, #100]	; (8009500 <HAL_DMA_IRQHandler+0xca4>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d00e      	beq.n	80094be <HAL_DMA_IRQHandler+0xc62>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a17      	ldr	r2, [pc, #92]	; (8009504 <HAL_DMA_IRQHandler+0xca8>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d009      	beq.n	80094be <HAL_DMA_IRQHandler+0xc62>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a16      	ldr	r2, [pc, #88]	; (8009508 <HAL_DMA_IRQHandler+0xcac>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d004      	beq.n	80094be <HAL_DMA_IRQHandler+0xc62>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a14      	ldr	r2, [pc, #80]	; (800950c <HAL_DMA_IRQHandler+0xcb0>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d128      	bne.n	8009510 <HAL_DMA_IRQHandler+0xcb4>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 0214 	bic.w	r2, r2, #20
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	e027      	b.n	8009520 <HAL_DMA_IRQHandler+0xcc4>
 80094d0:	40020010 	.word	0x40020010
 80094d4:	40020028 	.word	0x40020028
 80094d8:	40020040 	.word	0x40020040
 80094dc:	40020058 	.word	0x40020058
 80094e0:	40020070 	.word	0x40020070
 80094e4:	40020088 	.word	0x40020088
 80094e8:	400200a0 	.word	0x400200a0
 80094ec:	400200b8 	.word	0x400200b8
 80094f0:	40020410 	.word	0x40020410
 80094f4:	40020428 	.word	0x40020428
 80094f8:	40020440 	.word	0x40020440
 80094fc:	40020458 	.word	0x40020458
 8009500:	40020470 	.word	0x40020470
 8009504:	40020488 	.word	0x40020488
 8009508:	400204a0 	.word	0x400204a0
 800950c:	400204b8 	.word	0x400204b8
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f022 020a 	bic.w	r2, r2, #10
 800951e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 8097 	beq.w	8009668 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009542:	e091      	b.n	8009668 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009548:	f003 031f 	and.w	r3, r3, #31
 800954c:	2208      	movs	r2, #8
 800954e:	409a      	lsls	r2, r3
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	4013      	ands	r3, r2
 8009554:	2b00      	cmp	r3, #0
 8009556:	f000 8088 	beq.w	800966a <HAL_DMA_IRQHandler+0xe0e>
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f003 0308 	and.w	r3, r3, #8
 8009560:	2b00      	cmp	r3, #0
 8009562:	f000 8082 	beq.w	800966a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a41      	ldr	r2, [pc, #260]	; (8009670 <HAL_DMA_IRQHandler+0xe14>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d04a      	beq.n	8009606 <HAL_DMA_IRQHandler+0xdaa>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a3f      	ldr	r2, [pc, #252]	; (8009674 <HAL_DMA_IRQHandler+0xe18>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d045      	beq.n	8009606 <HAL_DMA_IRQHandler+0xdaa>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a3e      	ldr	r2, [pc, #248]	; (8009678 <HAL_DMA_IRQHandler+0xe1c>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d040      	beq.n	8009606 <HAL_DMA_IRQHandler+0xdaa>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a3c      	ldr	r2, [pc, #240]	; (800967c <HAL_DMA_IRQHandler+0xe20>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d03b      	beq.n	8009606 <HAL_DMA_IRQHandler+0xdaa>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a3b      	ldr	r2, [pc, #236]	; (8009680 <HAL_DMA_IRQHandler+0xe24>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d036      	beq.n	8009606 <HAL_DMA_IRQHandler+0xdaa>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a39      	ldr	r2, [pc, #228]	; (8009684 <HAL_DMA_IRQHandler+0xe28>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d031      	beq.n	8009606 <HAL_DMA_IRQHandler+0xdaa>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a38      	ldr	r2, [pc, #224]	; (8009688 <HAL_DMA_IRQHandler+0xe2c>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d02c      	beq.n	8009606 <HAL_DMA_IRQHandler+0xdaa>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a36      	ldr	r2, [pc, #216]	; (800968c <HAL_DMA_IRQHandler+0xe30>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d027      	beq.n	8009606 <HAL_DMA_IRQHandler+0xdaa>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a35      	ldr	r2, [pc, #212]	; (8009690 <HAL_DMA_IRQHandler+0xe34>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d022      	beq.n	8009606 <HAL_DMA_IRQHandler+0xdaa>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a33      	ldr	r2, [pc, #204]	; (8009694 <HAL_DMA_IRQHandler+0xe38>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d01d      	beq.n	8009606 <HAL_DMA_IRQHandler+0xdaa>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a32      	ldr	r2, [pc, #200]	; (8009698 <HAL_DMA_IRQHandler+0xe3c>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d018      	beq.n	8009606 <HAL_DMA_IRQHandler+0xdaa>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a30      	ldr	r2, [pc, #192]	; (800969c <HAL_DMA_IRQHandler+0xe40>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d013      	beq.n	8009606 <HAL_DMA_IRQHandler+0xdaa>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a2f      	ldr	r2, [pc, #188]	; (80096a0 <HAL_DMA_IRQHandler+0xe44>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d00e      	beq.n	8009606 <HAL_DMA_IRQHandler+0xdaa>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a2d      	ldr	r2, [pc, #180]	; (80096a4 <HAL_DMA_IRQHandler+0xe48>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d009      	beq.n	8009606 <HAL_DMA_IRQHandler+0xdaa>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a2c      	ldr	r2, [pc, #176]	; (80096a8 <HAL_DMA_IRQHandler+0xe4c>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d004      	beq.n	8009606 <HAL_DMA_IRQHandler+0xdaa>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a2a      	ldr	r2, [pc, #168]	; (80096ac <HAL_DMA_IRQHandler+0xe50>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d108      	bne.n	8009618 <HAL_DMA_IRQHandler+0xdbc>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f022 021c 	bic.w	r2, r2, #28
 8009614:	601a      	str	r2, [r3, #0]
 8009616:	e007      	b.n	8009628 <HAL_DMA_IRQHandler+0xdcc>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f022 020e 	bic.w	r2, r2, #14
 8009626:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800962c:	f003 031f 	and.w	r3, r3, #31
 8009630:	2201      	movs	r2, #1
 8009632:	409a      	lsls	r2, r3
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2201      	movs	r2, #1
 800963c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009652:	2b00      	cmp	r3, #0
 8009654:	d009      	beq.n	800966a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	4798      	blx	r3
 800965e:	e004      	b.n	800966a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009660:	bf00      	nop
 8009662:	e002      	b.n	800966a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009664:	bf00      	nop
 8009666:	e000      	b.n	800966a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009668:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800966a:	3728      	adds	r7, #40	; 0x28
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	40020010 	.word	0x40020010
 8009674:	40020028 	.word	0x40020028
 8009678:	40020040 	.word	0x40020040
 800967c:	40020058 	.word	0x40020058
 8009680:	40020070 	.word	0x40020070
 8009684:	40020088 	.word	0x40020088
 8009688:	400200a0 	.word	0x400200a0
 800968c:	400200b8 	.word	0x400200b8
 8009690:	40020410 	.word	0x40020410
 8009694:	40020428 	.word	0x40020428
 8009698:	40020440 	.word	0x40020440
 800969c:	40020458 	.word	0x40020458
 80096a0:	40020470 	.word	0x40020470
 80096a4:	40020488 	.word	0x40020488
 80096a8:	400204a0 	.word	0x400204a0
 80096ac:	400204b8 	.word	0x400204b8

080096b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b087      	sub	sp, #28
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
 80096bc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096c8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a7f      	ldr	r2, [pc, #508]	; (80098cc <DMA_SetConfig+0x21c>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d072      	beq.n	80097ba <DMA_SetConfig+0x10a>
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a7d      	ldr	r2, [pc, #500]	; (80098d0 <DMA_SetConfig+0x220>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d06d      	beq.n	80097ba <DMA_SetConfig+0x10a>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a7c      	ldr	r2, [pc, #496]	; (80098d4 <DMA_SetConfig+0x224>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d068      	beq.n	80097ba <DMA_SetConfig+0x10a>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a7a      	ldr	r2, [pc, #488]	; (80098d8 <DMA_SetConfig+0x228>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d063      	beq.n	80097ba <DMA_SetConfig+0x10a>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a79      	ldr	r2, [pc, #484]	; (80098dc <DMA_SetConfig+0x22c>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d05e      	beq.n	80097ba <DMA_SetConfig+0x10a>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a77      	ldr	r2, [pc, #476]	; (80098e0 <DMA_SetConfig+0x230>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d059      	beq.n	80097ba <DMA_SetConfig+0x10a>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a76      	ldr	r2, [pc, #472]	; (80098e4 <DMA_SetConfig+0x234>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d054      	beq.n	80097ba <DMA_SetConfig+0x10a>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a74      	ldr	r2, [pc, #464]	; (80098e8 <DMA_SetConfig+0x238>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d04f      	beq.n	80097ba <DMA_SetConfig+0x10a>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a73      	ldr	r2, [pc, #460]	; (80098ec <DMA_SetConfig+0x23c>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d04a      	beq.n	80097ba <DMA_SetConfig+0x10a>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a71      	ldr	r2, [pc, #452]	; (80098f0 <DMA_SetConfig+0x240>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d045      	beq.n	80097ba <DMA_SetConfig+0x10a>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a70      	ldr	r2, [pc, #448]	; (80098f4 <DMA_SetConfig+0x244>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d040      	beq.n	80097ba <DMA_SetConfig+0x10a>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a6e      	ldr	r2, [pc, #440]	; (80098f8 <DMA_SetConfig+0x248>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d03b      	beq.n	80097ba <DMA_SetConfig+0x10a>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a6d      	ldr	r2, [pc, #436]	; (80098fc <DMA_SetConfig+0x24c>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d036      	beq.n	80097ba <DMA_SetConfig+0x10a>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a6b      	ldr	r2, [pc, #428]	; (8009900 <DMA_SetConfig+0x250>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d031      	beq.n	80097ba <DMA_SetConfig+0x10a>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a6a      	ldr	r2, [pc, #424]	; (8009904 <DMA_SetConfig+0x254>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d02c      	beq.n	80097ba <DMA_SetConfig+0x10a>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a68      	ldr	r2, [pc, #416]	; (8009908 <DMA_SetConfig+0x258>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d027      	beq.n	80097ba <DMA_SetConfig+0x10a>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a67      	ldr	r2, [pc, #412]	; (800990c <DMA_SetConfig+0x25c>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d022      	beq.n	80097ba <DMA_SetConfig+0x10a>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a65      	ldr	r2, [pc, #404]	; (8009910 <DMA_SetConfig+0x260>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d01d      	beq.n	80097ba <DMA_SetConfig+0x10a>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a64      	ldr	r2, [pc, #400]	; (8009914 <DMA_SetConfig+0x264>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d018      	beq.n	80097ba <DMA_SetConfig+0x10a>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a62      	ldr	r2, [pc, #392]	; (8009918 <DMA_SetConfig+0x268>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d013      	beq.n	80097ba <DMA_SetConfig+0x10a>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a61      	ldr	r2, [pc, #388]	; (800991c <DMA_SetConfig+0x26c>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d00e      	beq.n	80097ba <DMA_SetConfig+0x10a>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a5f      	ldr	r2, [pc, #380]	; (8009920 <DMA_SetConfig+0x270>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d009      	beq.n	80097ba <DMA_SetConfig+0x10a>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a5e      	ldr	r2, [pc, #376]	; (8009924 <DMA_SetConfig+0x274>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d004      	beq.n	80097ba <DMA_SetConfig+0x10a>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a5c      	ldr	r2, [pc, #368]	; (8009928 <DMA_SetConfig+0x278>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d101      	bne.n	80097be <DMA_SetConfig+0x10e>
 80097ba:	2301      	movs	r3, #1
 80097bc:	e000      	b.n	80097c0 <DMA_SetConfig+0x110>
 80097be:	2300      	movs	r3, #0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00d      	beq.n	80097e0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80097cc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d004      	beq.n	80097e0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80097de:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a39      	ldr	r2, [pc, #228]	; (80098cc <DMA_SetConfig+0x21c>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d04a      	beq.n	8009880 <DMA_SetConfig+0x1d0>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a38      	ldr	r2, [pc, #224]	; (80098d0 <DMA_SetConfig+0x220>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d045      	beq.n	8009880 <DMA_SetConfig+0x1d0>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a36      	ldr	r2, [pc, #216]	; (80098d4 <DMA_SetConfig+0x224>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d040      	beq.n	8009880 <DMA_SetConfig+0x1d0>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a35      	ldr	r2, [pc, #212]	; (80098d8 <DMA_SetConfig+0x228>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d03b      	beq.n	8009880 <DMA_SetConfig+0x1d0>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a33      	ldr	r2, [pc, #204]	; (80098dc <DMA_SetConfig+0x22c>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d036      	beq.n	8009880 <DMA_SetConfig+0x1d0>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a32      	ldr	r2, [pc, #200]	; (80098e0 <DMA_SetConfig+0x230>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d031      	beq.n	8009880 <DMA_SetConfig+0x1d0>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a30      	ldr	r2, [pc, #192]	; (80098e4 <DMA_SetConfig+0x234>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d02c      	beq.n	8009880 <DMA_SetConfig+0x1d0>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a2f      	ldr	r2, [pc, #188]	; (80098e8 <DMA_SetConfig+0x238>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d027      	beq.n	8009880 <DMA_SetConfig+0x1d0>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a2d      	ldr	r2, [pc, #180]	; (80098ec <DMA_SetConfig+0x23c>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d022      	beq.n	8009880 <DMA_SetConfig+0x1d0>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a2c      	ldr	r2, [pc, #176]	; (80098f0 <DMA_SetConfig+0x240>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d01d      	beq.n	8009880 <DMA_SetConfig+0x1d0>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a2a      	ldr	r2, [pc, #168]	; (80098f4 <DMA_SetConfig+0x244>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d018      	beq.n	8009880 <DMA_SetConfig+0x1d0>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a29      	ldr	r2, [pc, #164]	; (80098f8 <DMA_SetConfig+0x248>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d013      	beq.n	8009880 <DMA_SetConfig+0x1d0>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a27      	ldr	r2, [pc, #156]	; (80098fc <DMA_SetConfig+0x24c>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d00e      	beq.n	8009880 <DMA_SetConfig+0x1d0>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a26      	ldr	r2, [pc, #152]	; (8009900 <DMA_SetConfig+0x250>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d009      	beq.n	8009880 <DMA_SetConfig+0x1d0>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a24      	ldr	r2, [pc, #144]	; (8009904 <DMA_SetConfig+0x254>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d004      	beq.n	8009880 <DMA_SetConfig+0x1d0>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a23      	ldr	r2, [pc, #140]	; (8009908 <DMA_SetConfig+0x258>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d101      	bne.n	8009884 <DMA_SetConfig+0x1d4>
 8009880:	2301      	movs	r3, #1
 8009882:	e000      	b.n	8009886 <DMA_SetConfig+0x1d6>
 8009884:	2300      	movs	r3, #0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d059      	beq.n	800993e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800988e:	f003 031f 	and.w	r3, r3, #31
 8009892:	223f      	movs	r2, #63	; 0x3f
 8009894:	409a      	lsls	r2, r3
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80098a8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	2b40      	cmp	r3, #64	; 0x40
 80098b8:	d138      	bne.n	800992c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80098ca:	e086      	b.n	80099da <DMA_SetConfig+0x32a>
 80098cc:	40020010 	.word	0x40020010
 80098d0:	40020028 	.word	0x40020028
 80098d4:	40020040 	.word	0x40020040
 80098d8:	40020058 	.word	0x40020058
 80098dc:	40020070 	.word	0x40020070
 80098e0:	40020088 	.word	0x40020088
 80098e4:	400200a0 	.word	0x400200a0
 80098e8:	400200b8 	.word	0x400200b8
 80098ec:	40020410 	.word	0x40020410
 80098f0:	40020428 	.word	0x40020428
 80098f4:	40020440 	.word	0x40020440
 80098f8:	40020458 	.word	0x40020458
 80098fc:	40020470 	.word	0x40020470
 8009900:	40020488 	.word	0x40020488
 8009904:	400204a0 	.word	0x400204a0
 8009908:	400204b8 	.word	0x400204b8
 800990c:	58025408 	.word	0x58025408
 8009910:	5802541c 	.word	0x5802541c
 8009914:	58025430 	.word	0x58025430
 8009918:	58025444 	.word	0x58025444
 800991c:	58025458 	.word	0x58025458
 8009920:	5802546c 	.word	0x5802546c
 8009924:	58025480 	.word	0x58025480
 8009928:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	60da      	str	r2, [r3, #12]
}
 800993c:	e04d      	b.n	80099da <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a29      	ldr	r2, [pc, #164]	; (80099e8 <DMA_SetConfig+0x338>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d022      	beq.n	800998e <DMA_SetConfig+0x2de>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a27      	ldr	r2, [pc, #156]	; (80099ec <DMA_SetConfig+0x33c>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d01d      	beq.n	800998e <DMA_SetConfig+0x2de>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a26      	ldr	r2, [pc, #152]	; (80099f0 <DMA_SetConfig+0x340>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d018      	beq.n	800998e <DMA_SetConfig+0x2de>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a24      	ldr	r2, [pc, #144]	; (80099f4 <DMA_SetConfig+0x344>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d013      	beq.n	800998e <DMA_SetConfig+0x2de>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a23      	ldr	r2, [pc, #140]	; (80099f8 <DMA_SetConfig+0x348>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d00e      	beq.n	800998e <DMA_SetConfig+0x2de>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a21      	ldr	r2, [pc, #132]	; (80099fc <DMA_SetConfig+0x34c>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d009      	beq.n	800998e <DMA_SetConfig+0x2de>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a20      	ldr	r2, [pc, #128]	; (8009a00 <DMA_SetConfig+0x350>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d004      	beq.n	800998e <DMA_SetConfig+0x2de>
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a1e      	ldr	r2, [pc, #120]	; (8009a04 <DMA_SetConfig+0x354>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d101      	bne.n	8009992 <DMA_SetConfig+0x2e2>
 800998e:	2301      	movs	r3, #1
 8009990:	e000      	b.n	8009994 <DMA_SetConfig+0x2e4>
 8009992:	2300      	movs	r3, #0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d020      	beq.n	80099da <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800999c:	f003 031f 	and.w	r3, r3, #31
 80099a0:	2201      	movs	r2, #1
 80099a2:	409a      	lsls	r2, r3
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	683a      	ldr	r2, [r7, #0]
 80099ae:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	2b40      	cmp	r3, #64	; 0x40
 80099b6:	d108      	bne.n	80099ca <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68ba      	ldr	r2, [r7, #8]
 80099c6:	60da      	str	r2, [r3, #12]
}
 80099c8:	e007      	b.n	80099da <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	60da      	str	r2, [r3, #12]
}
 80099da:	bf00      	nop
 80099dc:	371c      	adds	r7, #28
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop
 80099e8:	58025408 	.word	0x58025408
 80099ec:	5802541c 	.word	0x5802541c
 80099f0:	58025430 	.word	0x58025430
 80099f4:	58025444 	.word	0x58025444
 80099f8:	58025458 	.word	0x58025458
 80099fc:	5802546c 	.word	0x5802546c
 8009a00:	58025480 	.word	0x58025480
 8009a04:	58025494 	.word	0x58025494

08009a08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a42      	ldr	r2, [pc, #264]	; (8009b20 <DMA_CalcBaseAndBitshift+0x118>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d04a      	beq.n	8009ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a41      	ldr	r2, [pc, #260]	; (8009b24 <DMA_CalcBaseAndBitshift+0x11c>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d045      	beq.n	8009ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a3f      	ldr	r2, [pc, #252]	; (8009b28 <DMA_CalcBaseAndBitshift+0x120>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d040      	beq.n	8009ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a3e      	ldr	r2, [pc, #248]	; (8009b2c <DMA_CalcBaseAndBitshift+0x124>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d03b      	beq.n	8009ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a3c      	ldr	r2, [pc, #240]	; (8009b30 <DMA_CalcBaseAndBitshift+0x128>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d036      	beq.n	8009ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a3b      	ldr	r2, [pc, #236]	; (8009b34 <DMA_CalcBaseAndBitshift+0x12c>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d031      	beq.n	8009ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a39      	ldr	r2, [pc, #228]	; (8009b38 <DMA_CalcBaseAndBitshift+0x130>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d02c      	beq.n	8009ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a38      	ldr	r2, [pc, #224]	; (8009b3c <DMA_CalcBaseAndBitshift+0x134>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d027      	beq.n	8009ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a36      	ldr	r2, [pc, #216]	; (8009b40 <DMA_CalcBaseAndBitshift+0x138>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d022      	beq.n	8009ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a35      	ldr	r2, [pc, #212]	; (8009b44 <DMA_CalcBaseAndBitshift+0x13c>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d01d      	beq.n	8009ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a33      	ldr	r2, [pc, #204]	; (8009b48 <DMA_CalcBaseAndBitshift+0x140>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d018      	beq.n	8009ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a32      	ldr	r2, [pc, #200]	; (8009b4c <DMA_CalcBaseAndBitshift+0x144>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d013      	beq.n	8009ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a30      	ldr	r2, [pc, #192]	; (8009b50 <DMA_CalcBaseAndBitshift+0x148>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d00e      	beq.n	8009ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a2f      	ldr	r2, [pc, #188]	; (8009b54 <DMA_CalcBaseAndBitshift+0x14c>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d009      	beq.n	8009ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a2d      	ldr	r2, [pc, #180]	; (8009b58 <DMA_CalcBaseAndBitshift+0x150>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d004      	beq.n	8009ab0 <DMA_CalcBaseAndBitshift+0xa8>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a2c      	ldr	r2, [pc, #176]	; (8009b5c <DMA_CalcBaseAndBitshift+0x154>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d101      	bne.n	8009ab4 <DMA_CalcBaseAndBitshift+0xac>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e000      	b.n	8009ab6 <DMA_CalcBaseAndBitshift+0xae>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d024      	beq.n	8009b04 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	3b10      	subs	r3, #16
 8009ac2:	4a27      	ldr	r2, [pc, #156]	; (8009b60 <DMA_CalcBaseAndBitshift+0x158>)
 8009ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac8:	091b      	lsrs	r3, r3, #4
 8009aca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f003 0307 	and.w	r3, r3, #7
 8009ad2:	4a24      	ldr	r2, [pc, #144]	; (8009b64 <DMA_CalcBaseAndBitshift+0x15c>)
 8009ad4:	5cd3      	ldrb	r3, [r2, r3]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	d908      	bls.n	8009af4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	4b1f      	ldr	r3, [pc, #124]	; (8009b68 <DMA_CalcBaseAndBitshift+0x160>)
 8009aea:	4013      	ands	r3, r2
 8009aec:	1d1a      	adds	r2, r3, #4
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	659a      	str	r2, [r3, #88]	; 0x58
 8009af2:	e00d      	b.n	8009b10 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	461a      	mov	r2, r3
 8009afa:	4b1b      	ldr	r3, [pc, #108]	; (8009b68 <DMA_CalcBaseAndBitshift+0x160>)
 8009afc:	4013      	ands	r3, r2
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	6593      	str	r3, [r2, #88]	; 0x58
 8009b02:	e005      	b.n	8009b10 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3714      	adds	r7, #20
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	40020010 	.word	0x40020010
 8009b24:	40020028 	.word	0x40020028
 8009b28:	40020040 	.word	0x40020040
 8009b2c:	40020058 	.word	0x40020058
 8009b30:	40020070 	.word	0x40020070
 8009b34:	40020088 	.word	0x40020088
 8009b38:	400200a0 	.word	0x400200a0
 8009b3c:	400200b8 	.word	0x400200b8
 8009b40:	40020410 	.word	0x40020410
 8009b44:	40020428 	.word	0x40020428
 8009b48:	40020440 	.word	0x40020440
 8009b4c:	40020458 	.word	0x40020458
 8009b50:	40020470 	.word	0x40020470
 8009b54:	40020488 	.word	0x40020488
 8009b58:	400204a0 	.word	0x400204a0
 8009b5c:	400204b8 	.word	0x400204b8
 8009b60:	aaaaaaab 	.word	0xaaaaaaab
 8009b64:	08014c90 	.word	0x08014c90
 8009b68:	fffffc00 	.word	0xfffffc00

08009b6c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	699b      	ldr	r3, [r3, #24]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d120      	bne.n	8009bc2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b84:	2b03      	cmp	r3, #3
 8009b86:	d858      	bhi.n	8009c3a <DMA_CheckFifoParam+0xce>
 8009b88:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <DMA_CheckFifoParam+0x24>)
 8009b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8e:	bf00      	nop
 8009b90:	08009ba1 	.word	0x08009ba1
 8009b94:	08009bb3 	.word	0x08009bb3
 8009b98:	08009ba1 	.word	0x08009ba1
 8009b9c:	08009c3b 	.word	0x08009c3b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d048      	beq.n	8009c3e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009bb0:	e045      	b.n	8009c3e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009bba:	d142      	bne.n	8009c42 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009bc0:	e03f      	b.n	8009c42 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bca:	d123      	bne.n	8009c14 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d838      	bhi.n	8009c46 <DMA_CheckFifoParam+0xda>
 8009bd4:	a201      	add	r2, pc, #4	; (adr r2, 8009bdc <DMA_CheckFifoParam+0x70>)
 8009bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bda:	bf00      	nop
 8009bdc:	08009bed 	.word	0x08009bed
 8009be0:	08009bf3 	.word	0x08009bf3
 8009be4:	08009bed 	.word	0x08009bed
 8009be8:	08009c05 	.word	0x08009c05
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	73fb      	strb	r3, [r7, #15]
        break;
 8009bf0:	e030      	b.n	8009c54 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d025      	beq.n	8009c4a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009c02:	e022      	b.n	8009c4a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009c0c:	d11f      	bne.n	8009c4e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009c12:	e01c      	b.n	8009c4e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d902      	bls.n	8009c22 <DMA_CheckFifoParam+0xb6>
 8009c1c:	2b03      	cmp	r3, #3
 8009c1e:	d003      	beq.n	8009c28 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009c20:	e018      	b.n	8009c54 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	73fb      	strb	r3, [r7, #15]
        break;
 8009c26:	e015      	b.n	8009c54 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00e      	beq.n	8009c52 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	73fb      	strb	r3, [r7, #15]
    break;
 8009c38:	e00b      	b.n	8009c52 <DMA_CheckFifoParam+0xe6>
        break;
 8009c3a:	bf00      	nop
 8009c3c:	e00a      	b.n	8009c54 <DMA_CheckFifoParam+0xe8>
        break;
 8009c3e:	bf00      	nop
 8009c40:	e008      	b.n	8009c54 <DMA_CheckFifoParam+0xe8>
        break;
 8009c42:	bf00      	nop
 8009c44:	e006      	b.n	8009c54 <DMA_CheckFifoParam+0xe8>
        break;
 8009c46:	bf00      	nop
 8009c48:	e004      	b.n	8009c54 <DMA_CheckFifoParam+0xe8>
        break;
 8009c4a:	bf00      	nop
 8009c4c:	e002      	b.n	8009c54 <DMA_CheckFifoParam+0xe8>
        break;
 8009c4e:	bf00      	nop
 8009c50:	e000      	b.n	8009c54 <DMA_CheckFifoParam+0xe8>
    break;
 8009c52:	bf00      	nop
    }
  }

  return status;
 8009c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop

08009c64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a38      	ldr	r2, [pc, #224]	; (8009d58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d022      	beq.n	8009cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a36      	ldr	r2, [pc, #216]	; (8009d5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d01d      	beq.n	8009cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a35      	ldr	r2, [pc, #212]	; (8009d60 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d018      	beq.n	8009cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a33      	ldr	r2, [pc, #204]	; (8009d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d013      	beq.n	8009cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a32      	ldr	r2, [pc, #200]	; (8009d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d00e      	beq.n	8009cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a30      	ldr	r2, [pc, #192]	; (8009d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d009      	beq.n	8009cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a2f      	ldr	r2, [pc, #188]	; (8009d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d004      	beq.n	8009cc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a2d      	ldr	r2, [pc, #180]	; (8009d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d101      	bne.n	8009cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e000      	b.n	8009cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01a      	beq.n	8009d02 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	3b08      	subs	r3, #8
 8009cd4:	4a28      	ldr	r2, [pc, #160]	; (8009d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cda:	091b      	lsrs	r3, r3, #4
 8009cdc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	4b26      	ldr	r3, [pc, #152]	; (8009d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009ce2:	4413      	add	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a24      	ldr	r2, [pc, #144]	; (8009d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009cf0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f003 031f 	and.w	r3, r3, #31
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	409a      	lsls	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009d00:	e024      	b.n	8009d4c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	b2db      	uxtb	r3, r3
 8009d08:	3b10      	subs	r3, #16
 8009d0a:	4a1e      	ldr	r2, [pc, #120]	; (8009d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d10:	091b      	lsrs	r3, r3, #4
 8009d12:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	4a1c      	ldr	r2, [pc, #112]	; (8009d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d806      	bhi.n	8009d2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	4a1b      	ldr	r2, [pc, #108]	; (8009d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d902      	bls.n	8009d2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	3308      	adds	r3, #8
 8009d28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	4b18      	ldr	r3, [pc, #96]	; (8009d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009d2e:	4413      	add	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	461a      	mov	r2, r3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a16      	ldr	r2, [pc, #88]	; (8009d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009d3c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f003 031f 	and.w	r3, r3, #31
 8009d44:	2201      	movs	r2, #1
 8009d46:	409a      	lsls	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009d4c:	bf00      	nop
 8009d4e:	3714      	adds	r7, #20
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	58025408 	.word	0x58025408
 8009d5c:	5802541c 	.word	0x5802541c
 8009d60:	58025430 	.word	0x58025430
 8009d64:	58025444 	.word	0x58025444
 8009d68:	58025458 	.word	0x58025458
 8009d6c:	5802546c 	.word	0x5802546c
 8009d70:	58025480 	.word	0x58025480
 8009d74:	58025494 	.word	0x58025494
 8009d78:	cccccccd 	.word	0xcccccccd
 8009d7c:	16009600 	.word	0x16009600
 8009d80:	58025880 	.word	0x58025880
 8009d84:	aaaaaaab 	.word	0xaaaaaaab
 8009d88:	400204b8 	.word	0x400204b8
 8009d8c:	4002040f 	.word	0x4002040f
 8009d90:	10008200 	.word	0x10008200
 8009d94:	40020880 	.word	0x40020880

08009d98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d04a      	beq.n	8009e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2b08      	cmp	r3, #8
 8009db2:	d847      	bhi.n	8009e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a25      	ldr	r2, [pc, #148]	; (8009e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d022      	beq.n	8009e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a24      	ldr	r2, [pc, #144]	; (8009e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d01d      	beq.n	8009e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a22      	ldr	r2, [pc, #136]	; (8009e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d018      	beq.n	8009e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a21      	ldr	r2, [pc, #132]	; (8009e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d013      	beq.n	8009e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a1f      	ldr	r2, [pc, #124]	; (8009e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d00e      	beq.n	8009e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a1e      	ldr	r2, [pc, #120]	; (8009e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d009      	beq.n	8009e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a1c      	ldr	r2, [pc, #112]	; (8009e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d004      	beq.n	8009e04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a1b      	ldr	r2, [pc, #108]	; (8009e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d101      	bne.n	8009e08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009e04:	2301      	movs	r3, #1
 8009e06:	e000      	b.n	8009e0a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00a      	beq.n	8009e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	4b17      	ldr	r3, [pc, #92]	; (8009e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009e12:	4413      	add	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	461a      	mov	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a15      	ldr	r2, [pc, #84]	; (8009e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009e20:	671a      	str	r2, [r3, #112]	; 0x70
 8009e22:	e009      	b.n	8009e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	4b14      	ldr	r3, [pc, #80]	; (8009e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009e28:	4413      	add	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a11      	ldr	r2, [pc, #68]	; (8009e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009e36:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	409a      	lsls	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009e44:	bf00      	nop
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	58025408 	.word	0x58025408
 8009e54:	5802541c 	.word	0x5802541c
 8009e58:	58025430 	.word	0x58025430
 8009e5c:	58025444 	.word	0x58025444
 8009e60:	58025458 	.word	0x58025458
 8009e64:	5802546c 	.word	0x5802546c
 8009e68:	58025480 	.word	0x58025480
 8009e6c:	58025494 	.word	0x58025494
 8009e70:	1600963f 	.word	0x1600963f
 8009e74:	58025940 	.word	0x58025940
 8009e78:	1000823f 	.word	0x1000823f
 8009e7c:	40020940 	.word	0x40020940

08009e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b089      	sub	sp, #36	; 0x24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009e8e:	4b89      	ldr	r3, [pc, #548]	; (800a0b4 <HAL_GPIO_Init+0x234>)
 8009e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009e92:	e194      	b.n	800a1be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	2101      	movs	r1, #1
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 8186 	beq.w	800a1b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	f003 0303 	and.w	r3, r3, #3
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	d005      	beq.n	8009ec4 <HAL_GPIO_Init+0x44>
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	f003 0303 	and.w	r3, r3, #3
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d130      	bne.n	8009f26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	005b      	lsls	r3, r3, #1
 8009ece:	2203      	movs	r2, #3
 8009ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ed4:	43db      	mvns	r3, r3
 8009ed6:	69ba      	ldr	r2, [r7, #24]
 8009ed8:	4013      	ands	r3, r2
 8009eda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	68da      	ldr	r2, [r3, #12]
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	005b      	lsls	r3, r3, #1
 8009ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee8:	69ba      	ldr	r2, [r7, #24]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	69ba      	ldr	r2, [r7, #24]
 8009ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009efa:	2201      	movs	r2, #1
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	fa02 f303 	lsl.w	r3, r2, r3
 8009f02:	43db      	mvns	r3, r3
 8009f04:	69ba      	ldr	r2, [r7, #24]
 8009f06:	4013      	ands	r3, r2
 8009f08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	091b      	lsrs	r3, r3, #4
 8009f10:	f003 0201 	and.w	r2, r3, #1
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	fa02 f303 	lsl.w	r3, r2, r3
 8009f1a:	69ba      	ldr	r2, [r7, #24]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	69ba      	ldr	r2, [r7, #24]
 8009f24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	f003 0303 	and.w	r3, r3, #3
 8009f2e:	2b03      	cmp	r3, #3
 8009f30:	d017      	beq.n	8009f62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	005b      	lsls	r3, r3, #1
 8009f3c:	2203      	movs	r2, #3
 8009f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f42:	43db      	mvns	r3, r3
 8009f44:	69ba      	ldr	r2, [r7, #24]
 8009f46:	4013      	ands	r3, r2
 8009f48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	689a      	ldr	r2, [r3, #8]
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	005b      	lsls	r3, r3, #1
 8009f52:	fa02 f303 	lsl.w	r3, r2, r3
 8009f56:	69ba      	ldr	r2, [r7, #24]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	69ba      	ldr	r2, [r7, #24]
 8009f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	f003 0303 	and.w	r3, r3, #3
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d123      	bne.n	8009fb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	08da      	lsrs	r2, r3, #3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	3208      	adds	r2, #8
 8009f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	f003 0307 	and.w	r3, r3, #7
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	220f      	movs	r2, #15
 8009f86:	fa02 f303 	lsl.w	r3, r2, r3
 8009f8a:	43db      	mvns	r3, r3
 8009f8c:	69ba      	ldr	r2, [r7, #24]
 8009f8e:	4013      	ands	r3, r2
 8009f90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	691a      	ldr	r2, [r3, #16]
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	f003 0307 	and.w	r3, r3, #7
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009fa2:	69ba      	ldr	r2, [r7, #24]
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	08da      	lsrs	r2, r3, #3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	3208      	adds	r2, #8
 8009fb0:	69b9      	ldr	r1, [r7, #24]
 8009fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	005b      	lsls	r3, r3, #1
 8009fc0:	2203      	movs	r2, #3
 8009fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009fc6:	43db      	mvns	r3, r3
 8009fc8:	69ba      	ldr	r2, [r7, #24]
 8009fca:	4013      	ands	r3, r2
 8009fcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	685b      	ldr	r3, [r3, #4]
 8009fd2:	f003 0203 	and.w	r2, r3, #3
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	005b      	lsls	r3, r3, #1
 8009fda:	fa02 f303 	lsl.w	r3, r2, r3
 8009fde:	69ba      	ldr	r2, [r7, #24]
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	69ba      	ldr	r2, [r7, #24]
 8009fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f000 80e0 	beq.w	800a1b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ff8:	4b2f      	ldr	r3, [pc, #188]	; (800a0b8 <HAL_GPIO_Init+0x238>)
 8009ffa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ffe:	4a2e      	ldr	r2, [pc, #184]	; (800a0b8 <HAL_GPIO_Init+0x238>)
 800a000:	f043 0302 	orr.w	r3, r3, #2
 800a004:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a008:	4b2b      	ldr	r3, [pc, #172]	; (800a0b8 <HAL_GPIO_Init+0x238>)
 800a00a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a00e:	f003 0302 	and.w	r3, r3, #2
 800a012:	60fb      	str	r3, [r7, #12]
 800a014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a016:	4a29      	ldr	r2, [pc, #164]	; (800a0bc <HAL_GPIO_Init+0x23c>)
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	089b      	lsrs	r3, r3, #2
 800a01c:	3302      	adds	r3, #2
 800a01e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a024:	69fb      	ldr	r3, [r7, #28]
 800a026:	f003 0303 	and.w	r3, r3, #3
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	220f      	movs	r2, #15
 800a02e:	fa02 f303 	lsl.w	r3, r2, r3
 800a032:	43db      	mvns	r3, r3
 800a034:	69ba      	ldr	r2, [r7, #24]
 800a036:	4013      	ands	r3, r2
 800a038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	4a20      	ldr	r2, [pc, #128]	; (800a0c0 <HAL_GPIO_Init+0x240>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d052      	beq.n	800a0e8 <HAL_GPIO_Init+0x268>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a1f      	ldr	r2, [pc, #124]	; (800a0c4 <HAL_GPIO_Init+0x244>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d031      	beq.n	800a0ae <HAL_GPIO_Init+0x22e>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a1e      	ldr	r2, [pc, #120]	; (800a0c8 <HAL_GPIO_Init+0x248>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d02b      	beq.n	800a0aa <HAL_GPIO_Init+0x22a>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	4a1d      	ldr	r2, [pc, #116]	; (800a0cc <HAL_GPIO_Init+0x24c>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d025      	beq.n	800a0a6 <HAL_GPIO_Init+0x226>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a1c      	ldr	r2, [pc, #112]	; (800a0d0 <HAL_GPIO_Init+0x250>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d01f      	beq.n	800a0a2 <HAL_GPIO_Init+0x222>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4a1b      	ldr	r2, [pc, #108]	; (800a0d4 <HAL_GPIO_Init+0x254>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d019      	beq.n	800a09e <HAL_GPIO_Init+0x21e>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a1a      	ldr	r2, [pc, #104]	; (800a0d8 <HAL_GPIO_Init+0x258>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d013      	beq.n	800a09a <HAL_GPIO_Init+0x21a>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a19      	ldr	r2, [pc, #100]	; (800a0dc <HAL_GPIO_Init+0x25c>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d00d      	beq.n	800a096 <HAL_GPIO_Init+0x216>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a18      	ldr	r2, [pc, #96]	; (800a0e0 <HAL_GPIO_Init+0x260>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d007      	beq.n	800a092 <HAL_GPIO_Init+0x212>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a17      	ldr	r2, [pc, #92]	; (800a0e4 <HAL_GPIO_Init+0x264>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d101      	bne.n	800a08e <HAL_GPIO_Init+0x20e>
 800a08a:	2309      	movs	r3, #9
 800a08c:	e02d      	b.n	800a0ea <HAL_GPIO_Init+0x26a>
 800a08e:	230a      	movs	r3, #10
 800a090:	e02b      	b.n	800a0ea <HAL_GPIO_Init+0x26a>
 800a092:	2308      	movs	r3, #8
 800a094:	e029      	b.n	800a0ea <HAL_GPIO_Init+0x26a>
 800a096:	2307      	movs	r3, #7
 800a098:	e027      	b.n	800a0ea <HAL_GPIO_Init+0x26a>
 800a09a:	2306      	movs	r3, #6
 800a09c:	e025      	b.n	800a0ea <HAL_GPIO_Init+0x26a>
 800a09e:	2305      	movs	r3, #5
 800a0a0:	e023      	b.n	800a0ea <HAL_GPIO_Init+0x26a>
 800a0a2:	2304      	movs	r3, #4
 800a0a4:	e021      	b.n	800a0ea <HAL_GPIO_Init+0x26a>
 800a0a6:	2303      	movs	r3, #3
 800a0a8:	e01f      	b.n	800a0ea <HAL_GPIO_Init+0x26a>
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	e01d      	b.n	800a0ea <HAL_GPIO_Init+0x26a>
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e01b      	b.n	800a0ea <HAL_GPIO_Init+0x26a>
 800a0b2:	bf00      	nop
 800a0b4:	58000080 	.word	0x58000080
 800a0b8:	58024400 	.word	0x58024400
 800a0bc:	58000400 	.word	0x58000400
 800a0c0:	58020000 	.word	0x58020000
 800a0c4:	58020400 	.word	0x58020400
 800a0c8:	58020800 	.word	0x58020800
 800a0cc:	58020c00 	.word	0x58020c00
 800a0d0:	58021000 	.word	0x58021000
 800a0d4:	58021400 	.word	0x58021400
 800a0d8:	58021800 	.word	0x58021800
 800a0dc:	58021c00 	.word	0x58021c00
 800a0e0:	58022000 	.word	0x58022000
 800a0e4:	58022400 	.word	0x58022400
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	69fa      	ldr	r2, [r7, #28]
 800a0ec:	f002 0203 	and.w	r2, r2, #3
 800a0f0:	0092      	lsls	r2, r2, #2
 800a0f2:	4093      	lsls	r3, r2
 800a0f4:	69ba      	ldr	r2, [r7, #24]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a0fa:	4938      	ldr	r1, [pc, #224]	; (800a1dc <HAL_GPIO_Init+0x35c>)
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	089b      	lsrs	r3, r3, #2
 800a100:	3302      	adds	r3, #2
 800a102:	69ba      	ldr	r2, [r7, #24]
 800a104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	43db      	mvns	r3, r3
 800a114:	69ba      	ldr	r2, [r7, #24]
 800a116:	4013      	ands	r3, r2
 800a118:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a122:	2b00      	cmp	r3, #0
 800a124:	d003      	beq.n	800a12e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a126:	69ba      	ldr	r2, [r7, #24]
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a12e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	43db      	mvns	r3, r3
 800a142:	69ba      	ldr	r2, [r7, #24]
 800a144:	4013      	ands	r3, r2
 800a146:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a150:	2b00      	cmp	r3, #0
 800a152:	d003      	beq.n	800a15c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a154:	69ba      	ldr	r2, [r7, #24]
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	4313      	orrs	r3, r2
 800a15a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a15c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	43db      	mvns	r3, r3
 800a16e:	69ba      	ldr	r2, [r7, #24]
 800a170:	4013      	ands	r3, r2
 800a172:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d003      	beq.n	800a188 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a180:	69ba      	ldr	r2, [r7, #24]
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	4313      	orrs	r3, r2
 800a186:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	43db      	mvns	r3, r3
 800a198:	69ba      	ldr	r2, [r7, #24]
 800a19a:	4013      	ands	r3, r2
 800a19c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d003      	beq.n	800a1b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a1aa:	69ba      	ldr	r2, [r7, #24]
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	69ba      	ldr	r2, [r7, #24]
 800a1b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	f47f ae63 	bne.w	8009e94 <HAL_GPIO_Init+0x14>
  }
}
 800a1ce:	bf00      	nop
 800a1d0:	bf00      	nop
 800a1d2:	3724      	adds	r7, #36	; 0x24
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1da:	4770      	bx	lr
 800a1dc:	58000400 	.word	0x58000400

0800a1e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	460b      	mov	r3, r1
 800a1ea:	807b      	strh	r3, [r7, #2]
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a1f0:	787b      	ldrb	r3, [r7, #1]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d003      	beq.n	800a1fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a1f6:	887a      	ldrh	r2, [r7, #2]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a1fc:	e003      	b.n	800a206 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a1fe:	887b      	ldrh	r3, [r7, #2]
 800a200:	041a      	lsls	r2, r3, #16
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	619a      	str	r2, [r3, #24]
}
 800a206:	bf00      	nop
 800a208:	370c      	adds	r7, #12
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b082      	sub	sp, #8
 800a216:	af00      	add	r7, sp, #0
 800a218:	4603      	mov	r3, r0
 800a21a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a21c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a220:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a224:	88fb      	ldrh	r3, [r7, #6]
 800a226:	4013      	ands	r3, r2
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d008      	beq.n	800a23e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a22c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a230:	88fb      	ldrh	r3, [r7, #6]
 800a232:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a236:	88fb      	ldrh	r3, [r7, #6]
 800a238:	4618      	mov	r0, r3
 800a23a:	f7fa fb53 	bl	80048e4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a23e:	bf00      	nop
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
	...

0800a248 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a250:	4b19      	ldr	r3, [pc, #100]	; (800a2b8 <HAL_PWREx_ConfigSupply+0x70>)
 800a252:	68db      	ldr	r3, [r3, #12]
 800a254:	f003 0304 	and.w	r3, r3, #4
 800a258:	2b04      	cmp	r3, #4
 800a25a:	d00a      	beq.n	800a272 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a25c:	4b16      	ldr	r3, [pc, #88]	; (800a2b8 <HAL_PWREx_ConfigSupply+0x70>)
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	f003 0307 	and.w	r3, r3, #7
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	429a      	cmp	r2, r3
 800a268:	d001      	beq.n	800a26e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e01f      	b.n	800a2ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	e01d      	b.n	800a2ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a272:	4b11      	ldr	r3, [pc, #68]	; (800a2b8 <HAL_PWREx_ConfigSupply+0x70>)
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	f023 0207 	bic.w	r2, r3, #7
 800a27a:	490f      	ldr	r1, [pc, #60]	; (800a2b8 <HAL_PWREx_ConfigSupply+0x70>)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4313      	orrs	r3, r2
 800a280:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a282:	f7fc fc6b 	bl	8006b5c <HAL_GetTick>
 800a286:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a288:	e009      	b.n	800a29e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a28a:	f7fc fc67 	bl	8006b5c <HAL_GetTick>
 800a28e:	4602      	mov	r2, r0
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a298:	d901      	bls.n	800a29e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e007      	b.n	800a2ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a29e:	4b06      	ldr	r3, [pc, #24]	; (800a2b8 <HAL_PWREx_ConfigSupply+0x70>)
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2aa:	d1ee      	bne.n	800a28a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	58024800 	.word	0x58024800

0800a2bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b08c      	sub	sp, #48	; 0x30
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d102      	bne.n	800a2d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	f000 bc1d 	b.w	800ab0a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 0301 	and.w	r3, r3, #1
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f000 8087 	beq.w	800a3ec <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2de:	4b99      	ldr	r3, [pc, #612]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a2e8:	4b96      	ldr	r3, [pc, #600]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f0:	2b10      	cmp	r3, #16
 800a2f2:	d007      	beq.n	800a304 <HAL_RCC_OscConfig+0x48>
 800a2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f6:	2b18      	cmp	r3, #24
 800a2f8:	d110      	bne.n	800a31c <HAL_RCC_OscConfig+0x60>
 800a2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fc:	f003 0303 	and.w	r3, r3, #3
 800a300:	2b02      	cmp	r3, #2
 800a302:	d10b      	bne.n	800a31c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a304:	4b8f      	ldr	r3, [pc, #572]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d06c      	beq.n	800a3ea <HAL_RCC_OscConfig+0x12e>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d168      	bne.n	800a3ea <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	e3f6      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a324:	d106      	bne.n	800a334 <HAL_RCC_OscConfig+0x78>
 800a326:	4b87      	ldr	r3, [pc, #540]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a86      	ldr	r2, [pc, #536]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a32c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a330:	6013      	str	r3, [r2, #0]
 800a332:	e02e      	b.n	800a392 <HAL_RCC_OscConfig+0xd6>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10c      	bne.n	800a356 <HAL_RCC_OscConfig+0x9a>
 800a33c:	4b81      	ldr	r3, [pc, #516]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a80      	ldr	r2, [pc, #512]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a346:	6013      	str	r3, [r2, #0]
 800a348:	4b7e      	ldr	r3, [pc, #504]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a7d      	ldr	r2, [pc, #500]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a34e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a352:	6013      	str	r3, [r2, #0]
 800a354:	e01d      	b.n	800a392 <HAL_RCC_OscConfig+0xd6>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a35e:	d10c      	bne.n	800a37a <HAL_RCC_OscConfig+0xbe>
 800a360:	4b78      	ldr	r3, [pc, #480]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a77      	ldr	r2, [pc, #476]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a36a:	6013      	str	r3, [r2, #0]
 800a36c:	4b75      	ldr	r3, [pc, #468]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a74      	ldr	r2, [pc, #464]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a376:	6013      	str	r3, [r2, #0]
 800a378:	e00b      	b.n	800a392 <HAL_RCC_OscConfig+0xd6>
 800a37a:	4b72      	ldr	r3, [pc, #456]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a71      	ldr	r2, [pc, #452]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a384:	6013      	str	r3, [r2, #0]
 800a386:	4b6f      	ldr	r3, [pc, #444]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a6e      	ldr	r2, [pc, #440]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a38c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a390:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d013      	beq.n	800a3c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a39a:	f7fc fbdf 	bl	8006b5c <HAL_GetTick>
 800a39e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a3a0:	e008      	b.n	800a3b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a3a2:	f7fc fbdb 	bl	8006b5c <HAL_GetTick>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	2b64      	cmp	r3, #100	; 0x64
 800a3ae:	d901      	bls.n	800a3b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	e3aa      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a3b4:	4b63      	ldr	r3, [pc, #396]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d0f0      	beq.n	800a3a2 <HAL_RCC_OscConfig+0xe6>
 800a3c0:	e014      	b.n	800a3ec <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3c2:	f7fc fbcb 	bl	8006b5c <HAL_GetTick>
 800a3c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a3c8:	e008      	b.n	800a3dc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a3ca:	f7fc fbc7 	bl	8006b5c <HAL_GetTick>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	2b64      	cmp	r3, #100	; 0x64
 800a3d6:	d901      	bls.n	800a3dc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	e396      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a3dc:	4b59      	ldr	r3, [pc, #356]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1f0      	bne.n	800a3ca <HAL_RCC_OscConfig+0x10e>
 800a3e8:	e000      	b.n	800a3ec <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0302 	and.w	r3, r3, #2
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f000 80cb 	beq.w	800a590 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a3fa:	4b52      	ldr	r3, [pc, #328]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a402:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a404:	4b4f      	ldr	r3, [pc, #316]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a408:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a40a:	6a3b      	ldr	r3, [r7, #32]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d007      	beq.n	800a420 <HAL_RCC_OscConfig+0x164>
 800a410:	6a3b      	ldr	r3, [r7, #32]
 800a412:	2b18      	cmp	r3, #24
 800a414:	d156      	bne.n	800a4c4 <HAL_RCC_OscConfig+0x208>
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	f003 0303 	and.w	r3, r3, #3
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d151      	bne.n	800a4c4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a420:	4b48      	ldr	r3, [pc, #288]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 0304 	and.w	r3, r3, #4
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d005      	beq.n	800a438 <HAL_RCC_OscConfig+0x17c>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d101      	bne.n	800a438 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	e368      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a438:	4b42      	ldr	r3, [pc, #264]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f023 0219 	bic.w	r2, r3, #25
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	493f      	ldr	r1, [pc, #252]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a446:	4313      	orrs	r3, r2
 800a448:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a44a:	f7fc fb87 	bl	8006b5c <HAL_GetTick>
 800a44e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a450:	e008      	b.n	800a464 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a452:	f7fc fb83 	bl	8006b5c <HAL_GetTick>
 800a456:	4602      	mov	r2, r0
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	1ad3      	subs	r3, r2, r3
 800a45c:	2b02      	cmp	r3, #2
 800a45e:	d901      	bls.n	800a464 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800a460:	2303      	movs	r3, #3
 800a462:	e352      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a464:	4b37      	ldr	r3, [pc, #220]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 0304 	and.w	r3, r3, #4
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d0f0      	beq.n	800a452 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a470:	f7fc fba4 	bl	8006bbc <HAL_GetREVID>
 800a474:	4603      	mov	r3, r0
 800a476:	f241 0203 	movw	r2, #4099	; 0x1003
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d817      	bhi.n	800a4ae <HAL_RCC_OscConfig+0x1f2>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	2b40      	cmp	r3, #64	; 0x40
 800a484:	d108      	bne.n	800a498 <HAL_RCC_OscConfig+0x1dc>
 800a486:	4b2f      	ldr	r3, [pc, #188]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a48e:	4a2d      	ldr	r2, [pc, #180]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a494:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a496:	e07b      	b.n	800a590 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a498:	4b2a      	ldr	r3, [pc, #168]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	031b      	lsls	r3, r3, #12
 800a4a6:	4927      	ldr	r1, [pc, #156]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a4ac:	e070      	b.n	800a590 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4ae:	4b25      	ldr	r3, [pc, #148]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	061b      	lsls	r3, r3, #24
 800a4bc:	4921      	ldr	r1, [pc, #132]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a4c2:	e065      	b.n	800a590 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d048      	beq.n	800a55e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a4cc:	4b1d      	ldr	r3, [pc, #116]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f023 0219 	bic.w	r2, r3, #25
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	491a      	ldr	r1, [pc, #104]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4de:	f7fc fb3d 	bl	8006b5c <HAL_GetTick>
 800a4e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4e4:	e008      	b.n	800a4f8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a4e6:	f7fc fb39 	bl	8006b5c <HAL_GetTick>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d901      	bls.n	800a4f8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e308      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4f8:	4b12      	ldr	r3, [pc, #72]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0304 	and.w	r3, r3, #4
 800a500:	2b00      	cmp	r3, #0
 800a502:	d0f0      	beq.n	800a4e6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a504:	f7fc fb5a 	bl	8006bbc <HAL_GetREVID>
 800a508:	4603      	mov	r3, r0
 800a50a:	f241 0203 	movw	r2, #4099	; 0x1003
 800a50e:	4293      	cmp	r3, r2
 800a510:	d81a      	bhi.n	800a548 <HAL_RCC_OscConfig+0x28c>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	2b40      	cmp	r3, #64	; 0x40
 800a518:	d108      	bne.n	800a52c <HAL_RCC_OscConfig+0x270>
 800a51a:	4b0a      	ldr	r3, [pc, #40]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a522:	4a08      	ldr	r2, [pc, #32]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a528:	6053      	str	r3, [r2, #4]
 800a52a:	e031      	b.n	800a590 <HAL_RCC_OscConfig+0x2d4>
 800a52c:	4b05      	ldr	r3, [pc, #20]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	031b      	lsls	r3, r3, #12
 800a53a:	4902      	ldr	r1, [pc, #8]	; (800a544 <HAL_RCC_OscConfig+0x288>)
 800a53c:	4313      	orrs	r3, r2
 800a53e:	604b      	str	r3, [r1, #4]
 800a540:	e026      	b.n	800a590 <HAL_RCC_OscConfig+0x2d4>
 800a542:	bf00      	nop
 800a544:	58024400 	.word	0x58024400
 800a548:	4b9a      	ldr	r3, [pc, #616]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	691b      	ldr	r3, [r3, #16]
 800a554:	061b      	lsls	r3, r3, #24
 800a556:	4997      	ldr	r1, [pc, #604]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a558:	4313      	orrs	r3, r2
 800a55a:	604b      	str	r3, [r1, #4]
 800a55c:	e018      	b.n	800a590 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a55e:	4b95      	ldr	r3, [pc, #596]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a94      	ldr	r2, [pc, #592]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a564:	f023 0301 	bic.w	r3, r3, #1
 800a568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a56a:	f7fc faf7 	bl	8006b5c <HAL_GetTick>
 800a56e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a570:	e008      	b.n	800a584 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a572:	f7fc faf3 	bl	8006b5c <HAL_GetTick>
 800a576:	4602      	mov	r2, r0
 800a578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d901      	bls.n	800a584 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a580:	2303      	movs	r3, #3
 800a582:	e2c2      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a584:	4b8b      	ldr	r3, [pc, #556]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 0304 	and.w	r3, r3, #4
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1f0      	bne.n	800a572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 0310 	and.w	r3, r3, #16
 800a598:	2b00      	cmp	r3, #0
 800a59a:	f000 80a9 	beq.w	800a6f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a59e:	4b85      	ldr	r3, [pc, #532]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a5a8:	4b82      	ldr	r3, [pc, #520]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	2b08      	cmp	r3, #8
 800a5b2:	d007      	beq.n	800a5c4 <HAL_RCC_OscConfig+0x308>
 800a5b4:	69bb      	ldr	r3, [r7, #24]
 800a5b6:	2b18      	cmp	r3, #24
 800a5b8:	d13a      	bne.n	800a630 <HAL_RCC_OscConfig+0x374>
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f003 0303 	and.w	r3, r3, #3
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d135      	bne.n	800a630 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a5c4:	4b7b      	ldr	r3, [pc, #492]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d005      	beq.n	800a5dc <HAL_RCC_OscConfig+0x320>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	69db      	ldr	r3, [r3, #28]
 800a5d4:	2b80      	cmp	r3, #128	; 0x80
 800a5d6:	d001      	beq.n	800a5dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e296      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a5dc:	f7fc faee 	bl	8006bbc <HAL_GetREVID>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	f241 0203 	movw	r2, #4099	; 0x1003
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d817      	bhi.n	800a61a <HAL_RCC_OscConfig+0x35e>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	2b20      	cmp	r3, #32
 800a5f0:	d108      	bne.n	800a604 <HAL_RCC_OscConfig+0x348>
 800a5f2:	4b70      	ldr	r3, [pc, #448]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a5fa:	4a6e      	ldr	r2, [pc, #440]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a5fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a600:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a602:	e075      	b.n	800a6f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a604:	4b6b      	ldr	r3, [pc, #428]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6a1b      	ldr	r3, [r3, #32]
 800a610:	069b      	lsls	r3, r3, #26
 800a612:	4968      	ldr	r1, [pc, #416]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a614:	4313      	orrs	r3, r2
 800a616:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a618:	e06a      	b.n	800a6f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a61a:	4b66      	ldr	r3, [pc, #408]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a1b      	ldr	r3, [r3, #32]
 800a626:	061b      	lsls	r3, r3, #24
 800a628:	4962      	ldr	r1, [pc, #392]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a62a:	4313      	orrs	r3, r2
 800a62c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a62e:	e05f      	b.n	800a6f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	69db      	ldr	r3, [r3, #28]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d042      	beq.n	800a6be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a638:	4b5e      	ldr	r3, [pc, #376]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a5d      	ldr	r2, [pc, #372]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a63e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a644:	f7fc fa8a 	bl	8006b5c <HAL_GetTick>
 800a648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a64a:	e008      	b.n	800a65e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a64c:	f7fc fa86 	bl	8006b5c <HAL_GetTick>
 800a650:	4602      	mov	r2, r0
 800a652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a654:	1ad3      	subs	r3, r2, r3
 800a656:	2b02      	cmp	r3, #2
 800a658:	d901      	bls.n	800a65e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a65a:	2303      	movs	r3, #3
 800a65c:	e255      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a65e:	4b55      	ldr	r3, [pc, #340]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a666:	2b00      	cmp	r3, #0
 800a668:	d0f0      	beq.n	800a64c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a66a:	f7fc faa7 	bl	8006bbc <HAL_GetREVID>
 800a66e:	4603      	mov	r3, r0
 800a670:	f241 0203 	movw	r2, #4099	; 0x1003
 800a674:	4293      	cmp	r3, r2
 800a676:	d817      	bhi.n	800a6a8 <HAL_RCC_OscConfig+0x3ec>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6a1b      	ldr	r3, [r3, #32]
 800a67c:	2b20      	cmp	r3, #32
 800a67e:	d108      	bne.n	800a692 <HAL_RCC_OscConfig+0x3d6>
 800a680:	4b4c      	ldr	r3, [pc, #304]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a688:	4a4a      	ldr	r2, [pc, #296]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a68a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a68e:	6053      	str	r3, [r2, #4]
 800a690:	e02e      	b.n	800a6f0 <HAL_RCC_OscConfig+0x434>
 800a692:	4b48      	ldr	r3, [pc, #288]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	069b      	lsls	r3, r3, #26
 800a6a0:	4944      	ldr	r1, [pc, #272]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	604b      	str	r3, [r1, #4]
 800a6a6:	e023      	b.n	800a6f0 <HAL_RCC_OscConfig+0x434>
 800a6a8:	4b42      	ldr	r3, [pc, #264]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a1b      	ldr	r3, [r3, #32]
 800a6b4:	061b      	lsls	r3, r3, #24
 800a6b6:	493f      	ldr	r1, [pc, #252]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	60cb      	str	r3, [r1, #12]
 800a6bc:	e018      	b.n	800a6f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a6be:	4b3d      	ldr	r3, [pc, #244]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a3c      	ldr	r2, [pc, #240]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a6c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6ca:	f7fc fa47 	bl	8006b5c <HAL_GetTick>
 800a6ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a6d0:	e008      	b.n	800a6e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a6d2:	f7fc fa43 	bl	8006b5c <HAL_GetTick>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d901      	bls.n	800a6e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	e212      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a6e4:	4b33      	ldr	r3, [pc, #204]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d1f0      	bne.n	800a6d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 0308 	and.w	r3, r3, #8
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d036      	beq.n	800a76a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	695b      	ldr	r3, [r3, #20]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d019      	beq.n	800a738 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a704:	4b2b      	ldr	r3, [pc, #172]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a708:	4a2a      	ldr	r2, [pc, #168]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a70a:	f043 0301 	orr.w	r3, r3, #1
 800a70e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a710:	f7fc fa24 	bl	8006b5c <HAL_GetTick>
 800a714:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a716:	e008      	b.n	800a72a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a718:	f7fc fa20 	bl	8006b5c <HAL_GetTick>
 800a71c:	4602      	mov	r2, r0
 800a71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	2b02      	cmp	r3, #2
 800a724:	d901      	bls.n	800a72a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a726:	2303      	movs	r3, #3
 800a728:	e1ef      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a72a:	4b22      	ldr	r3, [pc, #136]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a72c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a72e:	f003 0302 	and.w	r3, r3, #2
 800a732:	2b00      	cmp	r3, #0
 800a734:	d0f0      	beq.n	800a718 <HAL_RCC_OscConfig+0x45c>
 800a736:	e018      	b.n	800a76a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a738:	4b1e      	ldr	r3, [pc, #120]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a73a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a73c:	4a1d      	ldr	r2, [pc, #116]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a73e:	f023 0301 	bic.w	r3, r3, #1
 800a742:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a744:	f7fc fa0a 	bl	8006b5c <HAL_GetTick>
 800a748:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a74a:	e008      	b.n	800a75e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a74c:	f7fc fa06 	bl	8006b5c <HAL_GetTick>
 800a750:	4602      	mov	r2, r0
 800a752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a754:	1ad3      	subs	r3, r2, r3
 800a756:	2b02      	cmp	r3, #2
 800a758:	d901      	bls.n	800a75e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a75a:	2303      	movs	r3, #3
 800a75c:	e1d5      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a75e:	4b15      	ldr	r3, [pc, #84]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a762:	f003 0302 	and.w	r3, r3, #2
 800a766:	2b00      	cmp	r3, #0
 800a768:	d1f0      	bne.n	800a74c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 0320 	and.w	r3, r3, #32
 800a772:	2b00      	cmp	r3, #0
 800a774:	d039      	beq.n	800a7ea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d01c      	beq.n	800a7b8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a77e:	4b0d      	ldr	r3, [pc, #52]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a0c      	ldr	r2, [pc, #48]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a788:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a78a:	f7fc f9e7 	bl	8006b5c <HAL_GetTick>
 800a78e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a790:	e008      	b.n	800a7a4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a792:	f7fc f9e3 	bl	8006b5c <HAL_GetTick>
 800a796:	4602      	mov	r2, r0
 800a798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79a:	1ad3      	subs	r3, r2, r3
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	d901      	bls.n	800a7a4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a7a0:	2303      	movs	r3, #3
 800a7a2:	e1b2      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a7a4:	4b03      	ldr	r3, [pc, #12]	; (800a7b4 <HAL_RCC_OscConfig+0x4f8>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d0f0      	beq.n	800a792 <HAL_RCC_OscConfig+0x4d6>
 800a7b0:	e01b      	b.n	800a7ea <HAL_RCC_OscConfig+0x52e>
 800a7b2:	bf00      	nop
 800a7b4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a7b8:	4b9b      	ldr	r3, [pc, #620]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a9a      	ldr	r2, [pc, #616]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a7be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a7c4:	f7fc f9ca 	bl	8006b5c <HAL_GetTick>
 800a7c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a7ca:	e008      	b.n	800a7de <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a7cc:	f7fc f9c6 	bl	8006b5c <HAL_GetTick>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d901      	bls.n	800a7de <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	e195      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a7de:	4b92      	ldr	r3, [pc, #584]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d1f0      	bne.n	800a7cc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 0304 	and.w	r3, r3, #4
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	f000 8081 	beq.w	800a8fa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a7f8:	4b8c      	ldr	r3, [pc, #560]	; (800aa2c <HAL_RCC_OscConfig+0x770>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a8b      	ldr	r2, [pc, #556]	; (800aa2c <HAL_RCC_OscConfig+0x770>)
 800a7fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a802:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a804:	f7fc f9aa 	bl	8006b5c <HAL_GetTick>
 800a808:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a80a:	e008      	b.n	800a81e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a80c:	f7fc f9a6 	bl	8006b5c <HAL_GetTick>
 800a810:	4602      	mov	r2, r0
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	2b64      	cmp	r3, #100	; 0x64
 800a818:	d901      	bls.n	800a81e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a81a:	2303      	movs	r3, #3
 800a81c:	e175      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a81e:	4b83      	ldr	r3, [pc, #524]	; (800aa2c <HAL_RCC_OscConfig+0x770>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a826:	2b00      	cmp	r3, #0
 800a828:	d0f0      	beq.n	800a80c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	2b01      	cmp	r3, #1
 800a830:	d106      	bne.n	800a840 <HAL_RCC_OscConfig+0x584>
 800a832:	4b7d      	ldr	r3, [pc, #500]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a836:	4a7c      	ldr	r2, [pc, #496]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a838:	f043 0301 	orr.w	r3, r3, #1
 800a83c:	6713      	str	r3, [r2, #112]	; 0x70
 800a83e:	e02d      	b.n	800a89c <HAL_RCC_OscConfig+0x5e0>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d10c      	bne.n	800a862 <HAL_RCC_OscConfig+0x5a6>
 800a848:	4b77      	ldr	r3, [pc, #476]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a84a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a84c:	4a76      	ldr	r2, [pc, #472]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a84e:	f023 0301 	bic.w	r3, r3, #1
 800a852:	6713      	str	r3, [r2, #112]	; 0x70
 800a854:	4b74      	ldr	r3, [pc, #464]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a858:	4a73      	ldr	r2, [pc, #460]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a85a:	f023 0304 	bic.w	r3, r3, #4
 800a85e:	6713      	str	r3, [r2, #112]	; 0x70
 800a860:	e01c      	b.n	800a89c <HAL_RCC_OscConfig+0x5e0>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	2b05      	cmp	r3, #5
 800a868:	d10c      	bne.n	800a884 <HAL_RCC_OscConfig+0x5c8>
 800a86a:	4b6f      	ldr	r3, [pc, #444]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a86e:	4a6e      	ldr	r2, [pc, #440]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a870:	f043 0304 	orr.w	r3, r3, #4
 800a874:	6713      	str	r3, [r2, #112]	; 0x70
 800a876:	4b6c      	ldr	r3, [pc, #432]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a87a:	4a6b      	ldr	r2, [pc, #428]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a87c:	f043 0301 	orr.w	r3, r3, #1
 800a880:	6713      	str	r3, [r2, #112]	; 0x70
 800a882:	e00b      	b.n	800a89c <HAL_RCC_OscConfig+0x5e0>
 800a884:	4b68      	ldr	r3, [pc, #416]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a888:	4a67      	ldr	r2, [pc, #412]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a88a:	f023 0301 	bic.w	r3, r3, #1
 800a88e:	6713      	str	r3, [r2, #112]	; 0x70
 800a890:	4b65      	ldr	r3, [pc, #404]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a894:	4a64      	ldr	r2, [pc, #400]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a896:	f023 0304 	bic.w	r3, r3, #4
 800a89a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d015      	beq.n	800a8d0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8a4:	f7fc f95a 	bl	8006b5c <HAL_GetTick>
 800a8a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a8aa:	e00a      	b.n	800a8c2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a8ac:	f7fc f956 	bl	8006b5c <HAL_GetTick>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d901      	bls.n	800a8c2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a8be:	2303      	movs	r3, #3
 800a8c0:	e123      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a8c2:	4b59      	ldr	r3, [pc, #356]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c6:	f003 0302 	and.w	r3, r3, #2
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d0ee      	beq.n	800a8ac <HAL_RCC_OscConfig+0x5f0>
 800a8ce:	e014      	b.n	800a8fa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8d0:	f7fc f944 	bl	8006b5c <HAL_GetTick>
 800a8d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a8d6:	e00a      	b.n	800a8ee <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a8d8:	f7fc f940 	bl	8006b5c <HAL_GetTick>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d901      	bls.n	800a8ee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e10d      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a8ee:	4b4e      	ldr	r3, [pc, #312]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8f2:	f003 0302 	and.w	r3, r3, #2
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d1ee      	bne.n	800a8d8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f000 8102 	beq.w	800ab08 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a904:	4b48      	ldr	r3, [pc, #288]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a90c:	2b18      	cmp	r3, #24
 800a90e:	f000 80bd 	beq.w	800aa8c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a916:	2b02      	cmp	r3, #2
 800a918:	f040 809e 	bne.w	800aa58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a91c:	4b42      	ldr	r3, [pc, #264]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a41      	ldr	r2, [pc, #260]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a922:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a928:	f7fc f918 	bl	8006b5c <HAL_GetTick>
 800a92c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a92e:	e008      	b.n	800a942 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a930:	f7fc f914 	bl	8006b5c <HAL_GetTick>
 800a934:	4602      	mov	r2, r0
 800a936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a938:	1ad3      	subs	r3, r2, r3
 800a93a:	2b02      	cmp	r3, #2
 800a93c:	d901      	bls.n	800a942 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a93e:	2303      	movs	r3, #3
 800a940:	e0e3      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a942:	4b39      	ldr	r3, [pc, #228]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1f0      	bne.n	800a930 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a94e:	4b36      	ldr	r3, [pc, #216]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a952:	4b37      	ldr	r3, [pc, #220]	; (800aa30 <HAL_RCC_OscConfig+0x774>)
 800a954:	4013      	ands	r3, r2
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a95e:	0112      	lsls	r2, r2, #4
 800a960:	430a      	orrs	r2, r1
 800a962:	4931      	ldr	r1, [pc, #196]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a964:	4313      	orrs	r3, r2
 800a966:	628b      	str	r3, [r1, #40]	; 0x28
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a96c:	3b01      	subs	r3, #1
 800a96e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a976:	3b01      	subs	r3, #1
 800a978:	025b      	lsls	r3, r3, #9
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	431a      	orrs	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a982:	3b01      	subs	r3, #1
 800a984:	041b      	lsls	r3, r3, #16
 800a986:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a98a:	431a      	orrs	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a990:	3b01      	subs	r3, #1
 800a992:	061b      	lsls	r3, r3, #24
 800a994:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a998:	4923      	ldr	r1, [pc, #140]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a99a:	4313      	orrs	r3, r2
 800a99c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a99e:	4b22      	ldr	r3, [pc, #136]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a2:	4a21      	ldr	r2, [pc, #132]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a9a4:	f023 0301 	bic.w	r3, r3, #1
 800a9a8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a9aa:	4b1f      	ldr	r3, [pc, #124]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a9ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9ae:	4b21      	ldr	r3, [pc, #132]	; (800aa34 <HAL_RCC_OscConfig+0x778>)
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a9b6:	00d2      	lsls	r2, r2, #3
 800a9b8:	491b      	ldr	r1, [pc, #108]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a9be:	4b1a      	ldr	r3, [pc, #104]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c2:	f023 020c 	bic.w	r2, r3, #12
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ca:	4917      	ldr	r1, [pc, #92]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a9d0:	4b15      	ldr	r3, [pc, #84]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d4:	f023 0202 	bic.w	r2, r3, #2
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9dc:	4912      	ldr	r1, [pc, #72]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a9e2:	4b11      	ldr	r3, [pc, #68]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e6:	4a10      	ldr	r2, [pc, #64]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a9e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a9ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9ee:	4b0e      	ldr	r3, [pc, #56]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f2:	4a0d      	ldr	r2, [pc, #52]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a9f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a9fa:	4b0b      	ldr	r3, [pc, #44]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800a9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fe:	4a0a      	ldr	r2, [pc, #40]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800aa00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800aa06:	4b08      	ldr	r3, [pc, #32]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800aa08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0a:	4a07      	ldr	r2, [pc, #28]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800aa0c:	f043 0301 	orr.w	r3, r3, #1
 800aa10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa12:	4b05      	ldr	r3, [pc, #20]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a04      	ldr	r2, [pc, #16]	; (800aa28 <HAL_RCC_OscConfig+0x76c>)
 800aa18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa1e:	f7fc f89d 	bl	8006b5c <HAL_GetTick>
 800aa22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa24:	e011      	b.n	800aa4a <HAL_RCC_OscConfig+0x78e>
 800aa26:	bf00      	nop
 800aa28:	58024400 	.word	0x58024400
 800aa2c:	58024800 	.word	0x58024800
 800aa30:	fffffc0c 	.word	0xfffffc0c
 800aa34:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aa38:	f7fc f890 	bl	8006b5c <HAL_GetTick>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d901      	bls.n	800aa4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800aa46:	2303      	movs	r3, #3
 800aa48:	e05f      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa4a:	4b32      	ldr	r3, [pc, #200]	; (800ab14 <HAL_RCC_OscConfig+0x858>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d0f0      	beq.n	800aa38 <HAL_RCC_OscConfig+0x77c>
 800aa56:	e057      	b.n	800ab08 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa58:	4b2e      	ldr	r3, [pc, #184]	; (800ab14 <HAL_RCC_OscConfig+0x858>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a2d      	ldr	r2, [pc, #180]	; (800ab14 <HAL_RCC_OscConfig+0x858>)
 800aa5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa64:	f7fc f87a 	bl	8006b5c <HAL_GetTick>
 800aa68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa6a:	e008      	b.n	800aa7e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aa6c:	f7fc f876 	bl	8006b5c <HAL_GetTick>
 800aa70:	4602      	mov	r2, r0
 800aa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa74:	1ad3      	subs	r3, r2, r3
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d901      	bls.n	800aa7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800aa7a:	2303      	movs	r3, #3
 800aa7c:	e045      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa7e:	4b25      	ldr	r3, [pc, #148]	; (800ab14 <HAL_RCC_OscConfig+0x858>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d1f0      	bne.n	800aa6c <HAL_RCC_OscConfig+0x7b0>
 800aa8a:	e03d      	b.n	800ab08 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800aa8c:	4b21      	ldr	r3, [pc, #132]	; (800ab14 <HAL_RCC_OscConfig+0x858>)
 800aa8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aa92:	4b20      	ldr	r3, [pc, #128]	; (800ab14 <HAL_RCC_OscConfig+0x858>)
 800aa94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa96:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d031      	beq.n	800ab04 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	f003 0203 	and.w	r2, r3, #3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d12a      	bne.n	800ab04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	091b      	lsrs	r3, r3, #4
 800aab2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d122      	bne.n	800ab04 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d11a      	bne.n	800ab04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	0a5b      	lsrs	r3, r3, #9
 800aad2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aada:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aadc:	429a      	cmp	r2, r3
 800aade:	d111      	bne.n	800ab04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	0c1b      	lsrs	r3, r3, #16
 800aae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d108      	bne.n	800ab04 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	0e1b      	lsrs	r3, r3, #24
 800aaf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aafe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d001      	beq.n	800ab08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e000      	b.n	800ab0a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3730      	adds	r7, #48	; 0x30
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	58024400 	.word	0x58024400

0800ab18 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b086      	sub	sp, #24
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d101      	bne.n	800ab2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e19c      	b.n	800ae66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ab2c:	4b8a      	ldr	r3, [pc, #552]	; (800ad58 <HAL_RCC_ClockConfig+0x240>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f003 030f 	and.w	r3, r3, #15
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d910      	bls.n	800ab5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab3a:	4b87      	ldr	r3, [pc, #540]	; (800ad58 <HAL_RCC_ClockConfig+0x240>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f023 020f 	bic.w	r2, r3, #15
 800ab42:	4985      	ldr	r1, [pc, #532]	; (800ad58 <HAL_RCC_ClockConfig+0x240>)
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab4a:	4b83      	ldr	r3, [pc, #524]	; (800ad58 <HAL_RCC_ClockConfig+0x240>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f003 030f 	and.w	r3, r3, #15
 800ab52:	683a      	ldr	r2, [r7, #0]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d001      	beq.n	800ab5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e184      	b.n	800ae66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 0304 	and.w	r3, r3, #4
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d010      	beq.n	800ab8a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	691a      	ldr	r2, [r3, #16]
 800ab6c:	4b7b      	ldr	r3, [pc, #492]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800ab6e:	699b      	ldr	r3, [r3, #24]
 800ab70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d908      	bls.n	800ab8a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ab78:	4b78      	ldr	r3, [pc, #480]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800ab7a:	699b      	ldr	r3, [r3, #24]
 800ab7c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	4975      	ldr	r1, [pc, #468]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800ab86:	4313      	orrs	r3, r2
 800ab88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f003 0308 	and.w	r3, r3, #8
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d010      	beq.n	800abb8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	695a      	ldr	r2, [r3, #20]
 800ab9a:	4b70      	ldr	r3, [pc, #448]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800ab9c:	69db      	ldr	r3, [r3, #28]
 800ab9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d908      	bls.n	800abb8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aba6:	4b6d      	ldr	r3, [pc, #436]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	496a      	ldr	r1, [pc, #424]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800abb4:	4313      	orrs	r3, r2
 800abb6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f003 0310 	and.w	r3, r3, #16
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d010      	beq.n	800abe6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	699a      	ldr	r2, [r3, #24]
 800abc8:	4b64      	ldr	r3, [pc, #400]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800abca:	69db      	ldr	r3, [r3, #28]
 800abcc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d908      	bls.n	800abe6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800abd4:	4b61      	ldr	r3, [pc, #388]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800abd6:	69db      	ldr	r3, [r3, #28]
 800abd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	699b      	ldr	r3, [r3, #24]
 800abe0:	495e      	ldr	r1, [pc, #376]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800abe2:	4313      	orrs	r3, r2
 800abe4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 0320 	and.w	r3, r3, #32
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d010      	beq.n	800ac14 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	69da      	ldr	r2, [r3, #28]
 800abf6:	4b59      	ldr	r3, [pc, #356]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800abf8:	6a1b      	ldr	r3, [r3, #32]
 800abfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d908      	bls.n	800ac14 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ac02:	4b56      	ldr	r3, [pc, #344]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800ac04:	6a1b      	ldr	r3, [r3, #32]
 800ac06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	69db      	ldr	r3, [r3, #28]
 800ac0e:	4953      	ldr	r1, [pc, #332]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800ac10:	4313      	orrs	r3, r2
 800ac12:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f003 0302 	and.w	r3, r3, #2
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d010      	beq.n	800ac42 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	68da      	ldr	r2, [r3, #12]
 800ac24:	4b4d      	ldr	r3, [pc, #308]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800ac26:	699b      	ldr	r3, [r3, #24]
 800ac28:	f003 030f 	and.w	r3, r3, #15
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d908      	bls.n	800ac42 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ac30:	4b4a      	ldr	r3, [pc, #296]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	f023 020f 	bic.w	r2, r3, #15
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	4947      	ldr	r1, [pc, #284]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f003 0301 	and.w	r3, r3, #1
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d055      	beq.n	800acfa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ac4e:	4b43      	ldr	r3, [pc, #268]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800ac50:	699b      	ldr	r3, [r3, #24]
 800ac52:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	4940      	ldr	r1, [pc, #256]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	2b02      	cmp	r3, #2
 800ac66:	d107      	bne.n	800ac78 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ac68:	4b3c      	ldr	r3, [pc, #240]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d121      	bne.n	800acb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ac74:	2301      	movs	r3, #1
 800ac76:	e0f6      	b.n	800ae66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	2b03      	cmp	r3, #3
 800ac7e:	d107      	bne.n	800ac90 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac80:	4b36      	ldr	r3, [pc, #216]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d115      	bne.n	800acb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e0ea      	b.n	800ae66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d107      	bne.n	800aca8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ac98:	4b30      	ldr	r3, [pc, #192]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d109      	bne.n	800acb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	e0de      	b.n	800ae66 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aca8:	4b2c      	ldr	r3, [pc, #176]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f003 0304 	and.w	r3, r3, #4
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d101      	bne.n	800acb8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800acb4:	2301      	movs	r3, #1
 800acb6:	e0d6      	b.n	800ae66 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800acb8:	4b28      	ldr	r3, [pc, #160]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	f023 0207 	bic.w	r2, r3, #7
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	4925      	ldr	r1, [pc, #148]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800acc6:	4313      	orrs	r3, r2
 800acc8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acca:	f7fb ff47 	bl	8006b5c <HAL_GetTick>
 800acce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800acd0:	e00a      	b.n	800ace8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800acd2:	f7fb ff43 	bl	8006b5c <HAL_GetTick>
 800acd6:	4602      	mov	r2, r0
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	1ad3      	subs	r3, r2, r3
 800acdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d901      	bls.n	800ace8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800ace4:	2303      	movs	r3, #3
 800ace6:	e0be      	b.n	800ae66 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ace8:	4b1c      	ldr	r3, [pc, #112]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	00db      	lsls	r3, r3, #3
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d1eb      	bne.n	800acd2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f003 0302 	and.w	r3, r3, #2
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d010      	beq.n	800ad28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	68da      	ldr	r2, [r3, #12]
 800ad0a:	4b14      	ldr	r3, [pc, #80]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800ad0c:	699b      	ldr	r3, [r3, #24]
 800ad0e:	f003 030f 	and.w	r3, r3, #15
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d208      	bcs.n	800ad28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad16:	4b11      	ldr	r3, [pc, #68]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800ad18:	699b      	ldr	r3, [r3, #24]
 800ad1a:	f023 020f 	bic.w	r2, r3, #15
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	490e      	ldr	r1, [pc, #56]	; (800ad5c <HAL_RCC_ClockConfig+0x244>)
 800ad24:	4313      	orrs	r3, r2
 800ad26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ad28:	4b0b      	ldr	r3, [pc, #44]	; (800ad58 <HAL_RCC_ClockConfig+0x240>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 030f 	and.w	r3, r3, #15
 800ad30:	683a      	ldr	r2, [r7, #0]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d214      	bcs.n	800ad60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad36:	4b08      	ldr	r3, [pc, #32]	; (800ad58 <HAL_RCC_ClockConfig+0x240>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f023 020f 	bic.w	r2, r3, #15
 800ad3e:	4906      	ldr	r1, [pc, #24]	; (800ad58 <HAL_RCC_ClockConfig+0x240>)
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad46:	4b04      	ldr	r3, [pc, #16]	; (800ad58 <HAL_RCC_ClockConfig+0x240>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f003 030f 	and.w	r3, r3, #15
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d005      	beq.n	800ad60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	e086      	b.n	800ae66 <HAL_RCC_ClockConfig+0x34e>
 800ad58:	52002000 	.word	0x52002000
 800ad5c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f003 0304 	and.w	r3, r3, #4
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d010      	beq.n	800ad8e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	691a      	ldr	r2, [r3, #16]
 800ad70:	4b3f      	ldr	r3, [pc, #252]	; (800ae70 <HAL_RCC_ClockConfig+0x358>)
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d208      	bcs.n	800ad8e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ad7c:	4b3c      	ldr	r3, [pc, #240]	; (800ae70 <HAL_RCC_ClockConfig+0x358>)
 800ad7e:	699b      	ldr	r3, [r3, #24]
 800ad80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	4939      	ldr	r1, [pc, #228]	; (800ae70 <HAL_RCC_ClockConfig+0x358>)
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0308 	and.w	r3, r3, #8
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d010      	beq.n	800adbc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	695a      	ldr	r2, [r3, #20]
 800ad9e:	4b34      	ldr	r3, [pc, #208]	; (800ae70 <HAL_RCC_ClockConfig+0x358>)
 800ada0:	69db      	ldr	r3, [r3, #28]
 800ada2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d208      	bcs.n	800adbc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800adaa:	4b31      	ldr	r3, [pc, #196]	; (800ae70 <HAL_RCC_ClockConfig+0x358>)
 800adac:	69db      	ldr	r3, [r3, #28]
 800adae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	695b      	ldr	r3, [r3, #20]
 800adb6:	492e      	ldr	r1, [pc, #184]	; (800ae70 <HAL_RCC_ClockConfig+0x358>)
 800adb8:	4313      	orrs	r3, r2
 800adba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f003 0310 	and.w	r3, r3, #16
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d010      	beq.n	800adea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	699a      	ldr	r2, [r3, #24]
 800adcc:	4b28      	ldr	r3, [pc, #160]	; (800ae70 <HAL_RCC_ClockConfig+0x358>)
 800adce:	69db      	ldr	r3, [r3, #28]
 800add0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800add4:	429a      	cmp	r2, r3
 800add6:	d208      	bcs.n	800adea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800add8:	4b25      	ldr	r3, [pc, #148]	; (800ae70 <HAL_RCC_ClockConfig+0x358>)
 800adda:	69db      	ldr	r3, [r3, #28]
 800addc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	699b      	ldr	r3, [r3, #24]
 800ade4:	4922      	ldr	r1, [pc, #136]	; (800ae70 <HAL_RCC_ClockConfig+0x358>)
 800ade6:	4313      	orrs	r3, r2
 800ade8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f003 0320 	and.w	r3, r3, #32
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d010      	beq.n	800ae18 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	69da      	ldr	r2, [r3, #28]
 800adfa:	4b1d      	ldr	r3, [pc, #116]	; (800ae70 <HAL_RCC_ClockConfig+0x358>)
 800adfc:	6a1b      	ldr	r3, [r3, #32]
 800adfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d208      	bcs.n	800ae18 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ae06:	4b1a      	ldr	r3, [pc, #104]	; (800ae70 <HAL_RCC_ClockConfig+0x358>)
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	69db      	ldr	r3, [r3, #28]
 800ae12:	4917      	ldr	r1, [pc, #92]	; (800ae70 <HAL_RCC_ClockConfig+0x358>)
 800ae14:	4313      	orrs	r3, r2
 800ae16:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ae18:	f000 f834 	bl	800ae84 <HAL_RCC_GetSysClockFreq>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	4b14      	ldr	r3, [pc, #80]	; (800ae70 <HAL_RCC_ClockConfig+0x358>)
 800ae20:	699b      	ldr	r3, [r3, #24]
 800ae22:	0a1b      	lsrs	r3, r3, #8
 800ae24:	f003 030f 	and.w	r3, r3, #15
 800ae28:	4912      	ldr	r1, [pc, #72]	; (800ae74 <HAL_RCC_ClockConfig+0x35c>)
 800ae2a:	5ccb      	ldrb	r3, [r1, r3]
 800ae2c:	f003 031f 	and.w	r3, r3, #31
 800ae30:	fa22 f303 	lsr.w	r3, r2, r3
 800ae34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ae36:	4b0e      	ldr	r3, [pc, #56]	; (800ae70 <HAL_RCC_ClockConfig+0x358>)
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	f003 030f 	and.w	r3, r3, #15
 800ae3e:	4a0d      	ldr	r2, [pc, #52]	; (800ae74 <HAL_RCC_ClockConfig+0x35c>)
 800ae40:	5cd3      	ldrb	r3, [r2, r3]
 800ae42:	f003 031f 	and.w	r3, r3, #31
 800ae46:	693a      	ldr	r2, [r7, #16]
 800ae48:	fa22 f303 	lsr.w	r3, r2, r3
 800ae4c:	4a0a      	ldr	r2, [pc, #40]	; (800ae78 <HAL_RCC_ClockConfig+0x360>)
 800ae4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ae50:	4a0a      	ldr	r2, [pc, #40]	; (800ae7c <HAL_RCC_ClockConfig+0x364>)
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800ae56:	4b0a      	ldr	r3, [pc, #40]	; (800ae80 <HAL_RCC_ClockConfig+0x368>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fb fe34 	bl	8006ac8 <HAL_InitTick>
 800ae60:	4603      	mov	r3, r0
 800ae62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3718      	adds	r7, #24
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	58024400 	.word	0x58024400
 800ae74:	08014c80 	.word	0x08014c80
 800ae78:	2400023c 	.word	0x2400023c
 800ae7c:	24000238 	.word	0x24000238
 800ae80:	24000240 	.word	0x24000240

0800ae84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b089      	sub	sp, #36	; 0x24
 800ae88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ae8a:	4bb3      	ldr	r3, [pc, #716]	; (800b158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ae92:	2b18      	cmp	r3, #24
 800ae94:	f200 8155 	bhi.w	800b142 <HAL_RCC_GetSysClockFreq+0x2be>
 800ae98:	a201      	add	r2, pc, #4	; (adr r2, 800aea0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ae9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9e:	bf00      	nop
 800aea0:	0800af05 	.word	0x0800af05
 800aea4:	0800b143 	.word	0x0800b143
 800aea8:	0800b143 	.word	0x0800b143
 800aeac:	0800b143 	.word	0x0800b143
 800aeb0:	0800b143 	.word	0x0800b143
 800aeb4:	0800b143 	.word	0x0800b143
 800aeb8:	0800b143 	.word	0x0800b143
 800aebc:	0800b143 	.word	0x0800b143
 800aec0:	0800af2b 	.word	0x0800af2b
 800aec4:	0800b143 	.word	0x0800b143
 800aec8:	0800b143 	.word	0x0800b143
 800aecc:	0800b143 	.word	0x0800b143
 800aed0:	0800b143 	.word	0x0800b143
 800aed4:	0800b143 	.word	0x0800b143
 800aed8:	0800b143 	.word	0x0800b143
 800aedc:	0800b143 	.word	0x0800b143
 800aee0:	0800af31 	.word	0x0800af31
 800aee4:	0800b143 	.word	0x0800b143
 800aee8:	0800b143 	.word	0x0800b143
 800aeec:	0800b143 	.word	0x0800b143
 800aef0:	0800b143 	.word	0x0800b143
 800aef4:	0800b143 	.word	0x0800b143
 800aef8:	0800b143 	.word	0x0800b143
 800aefc:	0800b143 	.word	0x0800b143
 800af00:	0800af37 	.word	0x0800af37
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af04:	4b94      	ldr	r3, [pc, #592]	; (800b158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 0320 	and.w	r3, r3, #32
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d009      	beq.n	800af24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af10:	4b91      	ldr	r3, [pc, #580]	; (800b158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	08db      	lsrs	r3, r3, #3
 800af16:	f003 0303 	and.w	r3, r3, #3
 800af1a:	4a90      	ldr	r2, [pc, #576]	; (800b15c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800af1c:	fa22 f303 	lsr.w	r3, r2, r3
 800af20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800af22:	e111      	b.n	800b148 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800af24:	4b8d      	ldr	r3, [pc, #564]	; (800b15c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800af26:	61bb      	str	r3, [r7, #24]
    break;
 800af28:	e10e      	b.n	800b148 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800af2a:	4b8d      	ldr	r3, [pc, #564]	; (800b160 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800af2c:	61bb      	str	r3, [r7, #24]
    break;
 800af2e:	e10b      	b.n	800b148 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800af30:	4b8c      	ldr	r3, [pc, #560]	; (800b164 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800af32:	61bb      	str	r3, [r7, #24]
    break;
 800af34:	e108      	b.n	800b148 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af36:	4b88      	ldr	r3, [pc, #544]	; (800b158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af3a:	f003 0303 	and.w	r3, r3, #3
 800af3e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800af40:	4b85      	ldr	r3, [pc, #532]	; (800b158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af44:	091b      	lsrs	r3, r3, #4
 800af46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af4a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800af4c:	4b82      	ldr	r3, [pc, #520]	; (800b158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af50:	f003 0301 	and.w	r3, r3, #1
 800af54:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800af56:	4b80      	ldr	r3, [pc, #512]	; (800b158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af5a:	08db      	lsrs	r3, r3, #3
 800af5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af60:	68fa      	ldr	r2, [r7, #12]
 800af62:	fb02 f303 	mul.w	r3, r2, r3
 800af66:	ee07 3a90 	vmov	s15, r3
 800af6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	2b00      	cmp	r3, #0
 800af76:	f000 80e1 	beq.w	800b13c <HAL_RCC_GetSysClockFreq+0x2b8>
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	f000 8083 	beq.w	800b088 <HAL_RCC_GetSysClockFreq+0x204>
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	2b02      	cmp	r3, #2
 800af86:	f200 80a1 	bhi.w	800b0cc <HAL_RCC_GetSysClockFreq+0x248>
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d003      	beq.n	800af98 <HAL_RCC_GetSysClockFreq+0x114>
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	2b01      	cmp	r3, #1
 800af94:	d056      	beq.n	800b044 <HAL_RCC_GetSysClockFreq+0x1c0>
 800af96:	e099      	b.n	800b0cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af98:	4b6f      	ldr	r3, [pc, #444]	; (800b158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 0320 	and.w	r3, r3, #32
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d02d      	beq.n	800b000 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800afa4:	4b6c      	ldr	r3, [pc, #432]	; (800b158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	08db      	lsrs	r3, r3, #3
 800afaa:	f003 0303 	and.w	r3, r3, #3
 800afae:	4a6b      	ldr	r2, [pc, #428]	; (800b15c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800afb0:	fa22 f303 	lsr.w	r3, r2, r3
 800afb4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	ee07 3a90 	vmov	s15, r3
 800afbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	ee07 3a90 	vmov	s15, r3
 800afc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afce:	4b62      	ldr	r3, [pc, #392]	; (800b158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afd6:	ee07 3a90 	vmov	s15, r3
 800afda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afde:	ed97 6a02 	vldr	s12, [r7, #8]
 800afe2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b168 <HAL_RCC_GetSysClockFreq+0x2e4>
 800afe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800affa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800affe:	e087      	b.n	800b110 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	ee07 3a90 	vmov	s15, r3
 800b006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b00a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b16c <HAL_RCC_GetSysClockFreq+0x2e8>
 800b00e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b012:	4b51      	ldr	r3, [pc, #324]	; (800b158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b01a:	ee07 3a90 	vmov	s15, r3
 800b01e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b022:	ed97 6a02 	vldr	s12, [r7, #8]
 800b026:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b168 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b02a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b02e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b03a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b03e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b042:	e065      	b.n	800b110 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	ee07 3a90 	vmov	s15, r3
 800b04a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b04e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b170 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b056:	4b40      	ldr	r3, [pc, #256]	; (800b158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b05a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b05e:	ee07 3a90 	vmov	s15, r3
 800b062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b066:	ed97 6a02 	vldr	s12, [r7, #8]
 800b06a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b168 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b06e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b07a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b07e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b086:	e043      	b.n	800b110 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	ee07 3a90 	vmov	s15, r3
 800b08e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b092:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b174 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b09a:	4b2f      	ldr	r3, [pc, #188]	; (800b158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b09c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0a2:	ee07 3a90 	vmov	s15, r3
 800b0a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0aa:	ed97 6a02 	vldr	s12, [r7, #8]
 800b0ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b168 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b0b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0ca:	e021      	b.n	800b110 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	ee07 3a90 	vmov	s15, r3
 800b0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b170 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b0da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0de:	4b1e      	ldr	r3, [pc, #120]	; (800b158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0e6:	ee07 3a90 	vmov	s15, r3
 800b0ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ee:	ed97 6a02 	vldr	s12, [r7, #8]
 800b0f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b168 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b0f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b10a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b10e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800b110:	4b11      	ldr	r3, [pc, #68]	; (800b158 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b114:	0a5b      	lsrs	r3, r3, #9
 800b116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b11a:	3301      	adds	r3, #1
 800b11c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	ee07 3a90 	vmov	s15, r3
 800b124:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b128:	edd7 6a07 	vldr	s13, [r7, #28]
 800b12c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b134:	ee17 3a90 	vmov	r3, s15
 800b138:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800b13a:	e005      	b.n	800b148 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800b13c:	2300      	movs	r3, #0
 800b13e:	61bb      	str	r3, [r7, #24]
    break;
 800b140:	e002      	b.n	800b148 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800b142:	4b07      	ldr	r3, [pc, #28]	; (800b160 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b144:	61bb      	str	r3, [r7, #24]
    break;
 800b146:	bf00      	nop
  }

  return sysclockfreq;
 800b148:	69bb      	ldr	r3, [r7, #24]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3724      	adds	r7, #36	; 0x24
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	58024400 	.word	0x58024400
 800b15c:	03d09000 	.word	0x03d09000
 800b160:	003d0900 	.word	0x003d0900
 800b164:	02dc6c00 	.word	0x02dc6c00
 800b168:	46000000 	.word	0x46000000
 800b16c:	4c742400 	.word	0x4c742400
 800b170:	4a742400 	.word	0x4a742400
 800b174:	4c371b00 	.word	0x4c371b00

0800b178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b17e:	f7ff fe81 	bl	800ae84 <HAL_RCC_GetSysClockFreq>
 800b182:	4602      	mov	r2, r0
 800b184:	4b10      	ldr	r3, [pc, #64]	; (800b1c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b186:	699b      	ldr	r3, [r3, #24]
 800b188:	0a1b      	lsrs	r3, r3, #8
 800b18a:	f003 030f 	and.w	r3, r3, #15
 800b18e:	490f      	ldr	r1, [pc, #60]	; (800b1cc <HAL_RCC_GetHCLKFreq+0x54>)
 800b190:	5ccb      	ldrb	r3, [r1, r3]
 800b192:	f003 031f 	and.w	r3, r3, #31
 800b196:	fa22 f303 	lsr.w	r3, r2, r3
 800b19a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b19c:	4b0a      	ldr	r3, [pc, #40]	; (800b1c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	f003 030f 	and.w	r3, r3, #15
 800b1a4:	4a09      	ldr	r2, [pc, #36]	; (800b1cc <HAL_RCC_GetHCLKFreq+0x54>)
 800b1a6:	5cd3      	ldrb	r3, [r2, r3]
 800b1a8:	f003 031f 	and.w	r3, r3, #31
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b1b2:	4a07      	ldr	r2, [pc, #28]	; (800b1d0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b1b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b1b6:	4a07      	ldr	r2, [pc, #28]	; (800b1d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b1bc:	4b04      	ldr	r3, [pc, #16]	; (800b1d0 <HAL_RCC_GetHCLKFreq+0x58>)
 800b1be:	681b      	ldr	r3, [r3, #0]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3708      	adds	r7, #8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	58024400 	.word	0x58024400
 800b1cc:	08014c80 	.word	0x08014c80
 800b1d0:	2400023c 	.word	0x2400023c
 800b1d4:	24000238 	.word	0x24000238

0800b1d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b1dc:	f7ff ffcc 	bl	800b178 <HAL_RCC_GetHCLKFreq>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	4b06      	ldr	r3, [pc, #24]	; (800b1fc <HAL_RCC_GetPCLK1Freq+0x24>)
 800b1e4:	69db      	ldr	r3, [r3, #28]
 800b1e6:	091b      	lsrs	r3, r3, #4
 800b1e8:	f003 0307 	and.w	r3, r3, #7
 800b1ec:	4904      	ldr	r1, [pc, #16]	; (800b200 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b1ee:	5ccb      	ldrb	r3, [r1, r3]
 800b1f0:	f003 031f 	and.w	r3, r3, #31
 800b1f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	58024400 	.word	0x58024400
 800b200:	08014c80 	.word	0x08014c80

0800b204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b208:	f7ff ffb6 	bl	800b178 <HAL_RCC_GetHCLKFreq>
 800b20c:	4602      	mov	r2, r0
 800b20e:	4b06      	ldr	r3, [pc, #24]	; (800b228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b210:	69db      	ldr	r3, [r3, #28]
 800b212:	0a1b      	lsrs	r3, r3, #8
 800b214:	f003 0307 	and.w	r3, r3, #7
 800b218:	4904      	ldr	r1, [pc, #16]	; (800b22c <HAL_RCC_GetPCLK2Freq+0x28>)
 800b21a:	5ccb      	ldrb	r3, [r1, r3]
 800b21c:	f003 031f 	and.w	r3, r3, #31
 800b220:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b224:	4618      	mov	r0, r3
 800b226:	bd80      	pop	{r7, pc}
 800b228:	58024400 	.word	0x58024400
 800b22c:	08014c80 	.word	0x08014c80

0800b230 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b238:	2300      	movs	r3, #0
 800b23a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b23c:	2300      	movs	r3, #0
 800b23e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d03f      	beq.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b250:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b254:	d02a      	beq.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b256:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b25a:	d824      	bhi.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b25c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b260:	d018      	beq.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b262:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b266:	d81e      	bhi.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d003      	beq.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b26c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b270:	d007      	beq.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b272:	e018      	b.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b274:	4ba3      	ldr	r3, [pc, #652]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b278:	4aa2      	ldr	r2, [pc, #648]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b27a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b27e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b280:	e015      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	3304      	adds	r3, #4
 800b286:	2102      	movs	r1, #2
 800b288:	4618      	mov	r0, r3
 800b28a:	f001 f9d5 	bl	800c638 <RCCEx_PLL2_Config>
 800b28e:	4603      	mov	r3, r0
 800b290:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b292:	e00c      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	3324      	adds	r3, #36	; 0x24
 800b298:	2102      	movs	r1, #2
 800b29a:	4618      	mov	r0, r3
 800b29c:	f001 fa7e 	bl	800c79c <RCCEx_PLL3_Config>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800b2a4:	e003      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	75fb      	strb	r3, [r7, #23]
      break;
 800b2aa:	e000      	b.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b2ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2ae:	7dfb      	ldrb	r3, [r7, #23]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d109      	bne.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b2b4:	4b93      	ldr	r3, [pc, #588]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b2b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2c0:	4990      	ldr	r1, [pc, #576]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	650b      	str	r3, [r1, #80]	; 0x50
 800b2c6:	e001      	b.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2c8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d03d      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2dc:	2b04      	cmp	r3, #4
 800b2de:	d826      	bhi.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800b2e0:	a201      	add	r2, pc, #4	; (adr r2, 800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800b2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e6:	bf00      	nop
 800b2e8:	0800b2fd 	.word	0x0800b2fd
 800b2ec:	0800b30b 	.word	0x0800b30b
 800b2f0:	0800b31d 	.word	0x0800b31d
 800b2f4:	0800b335 	.word	0x0800b335
 800b2f8:	0800b335 	.word	0x0800b335
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2fc:	4b81      	ldr	r3, [pc, #516]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b300:	4a80      	ldr	r2, [pc, #512]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b306:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b308:	e015      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	3304      	adds	r3, #4
 800b30e:	2100      	movs	r1, #0
 800b310:	4618      	mov	r0, r3
 800b312:	f001 f991 	bl	800c638 <RCCEx_PLL2_Config>
 800b316:	4603      	mov	r3, r0
 800b318:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b31a:	e00c      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	3324      	adds	r3, #36	; 0x24
 800b320:	2100      	movs	r1, #0
 800b322:	4618      	mov	r0, r3
 800b324:	f001 fa3a 	bl	800c79c <RCCEx_PLL3_Config>
 800b328:	4603      	mov	r3, r0
 800b32a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b32c:	e003      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	75fb      	strb	r3, [r7, #23]
      break;
 800b332:	e000      	b.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800b334:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b336:	7dfb      	ldrb	r3, [r7, #23]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d109      	bne.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b33c:	4b71      	ldr	r3, [pc, #452]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b33e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b340:	f023 0207 	bic.w	r2, r3, #7
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b348:	496e      	ldr	r1, [pc, #440]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b34a:	4313      	orrs	r3, r2
 800b34c:	650b      	str	r3, [r1, #80]	; 0x50
 800b34e:	e001      	b.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b350:	7dfb      	ldrb	r3, [r7, #23]
 800b352:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d042      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b368:	d02b      	beq.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800b36a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b36e:	d825      	bhi.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b370:	2bc0      	cmp	r3, #192	; 0xc0
 800b372:	d028      	beq.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b374:	2bc0      	cmp	r3, #192	; 0xc0
 800b376:	d821      	bhi.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b378:	2b80      	cmp	r3, #128	; 0x80
 800b37a:	d016      	beq.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800b37c:	2b80      	cmp	r3, #128	; 0x80
 800b37e:	d81d      	bhi.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800b380:	2b00      	cmp	r3, #0
 800b382:	d002      	beq.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800b384:	2b40      	cmp	r3, #64	; 0x40
 800b386:	d007      	beq.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800b388:	e018      	b.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b38a:	4b5e      	ldr	r3, [pc, #376]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b38e:	4a5d      	ldr	r2, [pc, #372]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b394:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b396:	e017      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	3304      	adds	r3, #4
 800b39c:	2100      	movs	r1, #0
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f001 f94a 	bl	800c638 <RCCEx_PLL2_Config>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b3a8:	e00e      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	3324      	adds	r3, #36	; 0x24
 800b3ae:	2100      	movs	r1, #0
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f001 f9f3 	bl	800c79c <RCCEx_PLL3_Config>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b3ba:	e005      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	75fb      	strb	r3, [r7, #23]
      break;
 800b3c0:	e002      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b3c2:	bf00      	nop
 800b3c4:	e000      	b.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800b3c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3c8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d109      	bne.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b3ce:	4b4d      	ldr	r3, [pc, #308]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b3d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3d2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3da:	494a      	ldr	r1, [pc, #296]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	650b      	str	r3, [r1, #80]	; 0x50
 800b3e0:	e001      	b.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3e2:	7dfb      	ldrb	r3, [r7, #23]
 800b3e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d049      	beq.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b3f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b3fc:	d030      	beq.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800b3fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b402:	d82a      	bhi.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b404:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b408:	d02c      	beq.n	800b464 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800b40a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b40e:	d824      	bhi.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b414:	d018      	beq.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800b416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b41a:	d81e      	bhi.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d003      	beq.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b420:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b424:	d007      	beq.n	800b436 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b426:	e018      	b.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b428:	4b36      	ldr	r3, [pc, #216]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b42c:	4a35      	ldr	r2, [pc, #212]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b42e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b432:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b434:	e017      	b.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	3304      	adds	r3, #4
 800b43a:	2100      	movs	r1, #0
 800b43c:	4618      	mov	r0, r3
 800b43e:	f001 f8fb 	bl	800c638 <RCCEx_PLL2_Config>
 800b442:	4603      	mov	r3, r0
 800b444:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b446:	e00e      	b.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	3324      	adds	r3, #36	; 0x24
 800b44c:	2100      	movs	r1, #0
 800b44e:	4618      	mov	r0, r3
 800b450:	f001 f9a4 	bl	800c79c <RCCEx_PLL3_Config>
 800b454:	4603      	mov	r3, r0
 800b456:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b458:	e005      	b.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	75fb      	strb	r3, [r7, #23]
      break;
 800b45e:	e002      	b.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b460:	bf00      	nop
 800b462:	e000      	b.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800b464:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b466:	7dfb      	ldrb	r3, [r7, #23]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10a      	bne.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b46c:	4b25      	ldr	r3, [pc, #148]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b46e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b470:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b47a:	4922      	ldr	r1, [pc, #136]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b47c:	4313      	orrs	r3, r2
 800b47e:	658b      	str	r3, [r1, #88]	; 0x58
 800b480:	e001      	b.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b482:	7dfb      	ldrb	r3, [r7, #23]
 800b484:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d04b      	beq.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b498:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b49c:	d030      	beq.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800b49e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b4a2:	d82a      	bhi.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b4a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b4a8:	d02e      	beq.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800b4aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b4ae:	d824      	bhi.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b4b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4b4:	d018      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800b4b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b4ba:	d81e      	bhi.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d003      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b4c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b4c4:	d007      	beq.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b4c6:	e018      	b.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4c8:	4b0e      	ldr	r3, [pc, #56]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4cc:	4a0d      	ldr	r2, [pc, #52]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b4ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b4d4:	e019      	b.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	3304      	adds	r3, #4
 800b4da:	2100      	movs	r1, #0
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f001 f8ab 	bl	800c638 <RCCEx_PLL2_Config>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b4e6:	e010      	b.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3324      	adds	r3, #36	; 0x24
 800b4ec:	2100      	movs	r1, #0
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f001 f954 	bl	800c79c <RCCEx_PLL3_Config>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b4f8:	e007      	b.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	75fb      	strb	r3, [r7, #23]
      break;
 800b4fe:	e004      	b.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800b500:	bf00      	nop
 800b502:	e002      	b.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b504:	58024400 	.word	0x58024400
      break;
 800b508:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b50a:	7dfb      	ldrb	r3, [r7, #23]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d10a      	bne.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b510:	4b99      	ldr	r3, [pc, #612]	; (800b778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b514:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b51e:	4996      	ldr	r1, [pc, #600]	; (800b778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b520:	4313      	orrs	r3, r2
 800b522:	658b      	str	r3, [r1, #88]	; 0x58
 800b524:	e001      	b.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b526:	7dfb      	ldrb	r3, [r7, #23]
 800b528:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b532:	2b00      	cmp	r3, #0
 800b534:	d032      	beq.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b53a:	2b30      	cmp	r3, #48	; 0x30
 800b53c:	d01c      	beq.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800b53e:	2b30      	cmp	r3, #48	; 0x30
 800b540:	d817      	bhi.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b542:	2b20      	cmp	r3, #32
 800b544:	d00c      	beq.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800b546:	2b20      	cmp	r3, #32
 800b548:	d813      	bhi.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d016      	beq.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b54e:	2b10      	cmp	r3, #16
 800b550:	d10f      	bne.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b552:	4b89      	ldr	r3, [pc, #548]	; (800b778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b556:	4a88      	ldr	r2, [pc, #544]	; (800b778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b55c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b55e:	e00e      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	3304      	adds	r3, #4
 800b564:	2102      	movs	r1, #2
 800b566:	4618      	mov	r0, r3
 800b568:	f001 f866 	bl	800c638 <RCCEx_PLL2_Config>
 800b56c:	4603      	mov	r3, r0
 800b56e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b570:	e005      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b572:	2301      	movs	r3, #1
 800b574:	75fb      	strb	r3, [r7, #23]
      break;
 800b576:	e002      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800b578:	bf00      	nop
 800b57a:	e000      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800b57c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b57e:	7dfb      	ldrb	r3, [r7, #23]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d109      	bne.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b584:	4b7c      	ldr	r3, [pc, #496]	; (800b778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b588:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b590:	4979      	ldr	r1, [pc, #484]	; (800b778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b592:	4313      	orrs	r3, r2
 800b594:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b596:	e001      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b598:	7dfb      	ldrb	r3, [r7, #23]
 800b59a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d047      	beq.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5b0:	d030      	beq.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800b5b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b5b6:	d82a      	bhi.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b5b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b5bc:	d02c      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800b5be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b5c2:	d824      	bhi.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b5c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5c8:	d018      	beq.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800b5ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5ce:	d81e      	bhi.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d003      	beq.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800b5d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5d8:	d007      	beq.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800b5da:	e018      	b.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5dc:	4b66      	ldr	r3, [pc, #408]	; (800b778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e0:	4a65      	ldr	r2, [pc, #404]	; (800b778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b5e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b5e8:	e017      	b.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	3304      	adds	r3, #4
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f001 f821 	bl	800c638 <RCCEx_PLL2_Config>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b5fa:	e00e      	b.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	3324      	adds	r3, #36	; 0x24
 800b600:	2100      	movs	r1, #0
 800b602:	4618      	mov	r0, r3
 800b604:	f001 f8ca 	bl	800c79c <RCCEx_PLL3_Config>
 800b608:	4603      	mov	r3, r0
 800b60a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b60c:	e005      	b.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b60e:	2301      	movs	r3, #1
 800b610:	75fb      	strb	r3, [r7, #23]
      break;
 800b612:	e002      	b.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800b614:	bf00      	nop
 800b616:	e000      	b.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800b618:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b61a:	7dfb      	ldrb	r3, [r7, #23]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d109      	bne.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b620:	4b55      	ldr	r3, [pc, #340]	; (800b778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b624:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b62c:	4952      	ldr	r1, [pc, #328]	; (800b778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b62e:	4313      	orrs	r3, r2
 800b630:	650b      	str	r3, [r1, #80]	; 0x50
 800b632:	e001      	b.n	800b638 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b634:	7dfb      	ldrb	r3, [r7, #23]
 800b636:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b640:	2b00      	cmp	r3, #0
 800b642:	d049      	beq.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b64c:	d02e      	beq.n	800b6ac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b64e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b652:	d828      	bhi.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b654:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b658:	d02a      	beq.n	800b6b0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800b65a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b65e:	d822      	bhi.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b660:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b664:	d026      	beq.n	800b6b4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800b666:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b66a:	d81c      	bhi.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b66c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b670:	d010      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800b672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b676:	d816      	bhi.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d01d      	beq.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800b67c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b680:	d111      	bne.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	3304      	adds	r3, #4
 800b686:	2101      	movs	r1, #1
 800b688:	4618      	mov	r0, r3
 800b68a:	f000 ffd5 	bl	800c638 <RCCEx_PLL2_Config>
 800b68e:	4603      	mov	r3, r0
 800b690:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b692:	e012      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3324      	adds	r3, #36	; 0x24
 800b698:	2101      	movs	r1, #1
 800b69a:	4618      	mov	r0, r3
 800b69c:	f001 f87e 	bl	800c79c <RCCEx_PLL3_Config>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b6a4:	e009      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	75fb      	strb	r3, [r7, #23]
      break;
 800b6aa:	e006      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b6ac:	bf00      	nop
 800b6ae:	e004      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b6b0:	bf00      	nop
 800b6b2:	e002      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b6b4:	bf00      	nop
 800b6b6:	e000      	b.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800b6b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6ba:	7dfb      	ldrb	r3, [r7, #23]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d109      	bne.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b6c0:	4b2d      	ldr	r3, [pc, #180]	; (800b778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b6c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6cc:	492a      	ldr	r1, [pc, #168]	; (800b778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	650b      	str	r3, [r1, #80]	; 0x50
 800b6d2:	e001      	b.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6d4:	7dfb      	ldrb	r3, [r7, #23]
 800b6d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d04d      	beq.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b6ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6ee:	d02e      	beq.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800b6f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6f4:	d828      	bhi.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b6f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6fa:	d02a      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800b6fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b700:	d822      	bhi.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b702:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b706:	d026      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800b708:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b70c:	d81c      	bhi.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b70e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b712:	d010      	beq.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b718:	d816      	bhi.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d01d      	beq.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800b71e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b722:	d111      	bne.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	3304      	adds	r3, #4
 800b728:	2101      	movs	r1, #1
 800b72a:	4618      	mov	r0, r3
 800b72c:	f000 ff84 	bl	800c638 <RCCEx_PLL2_Config>
 800b730:	4603      	mov	r3, r0
 800b732:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b734:	e012      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	3324      	adds	r3, #36	; 0x24
 800b73a:	2101      	movs	r1, #1
 800b73c:	4618      	mov	r0, r3
 800b73e:	f001 f82d 	bl	800c79c <RCCEx_PLL3_Config>
 800b742:	4603      	mov	r3, r0
 800b744:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b746:	e009      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b748:	2301      	movs	r3, #1
 800b74a:	75fb      	strb	r3, [r7, #23]
      break;
 800b74c:	e006      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b74e:	bf00      	nop
 800b750:	e004      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b752:	bf00      	nop
 800b754:	e002      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b756:	bf00      	nop
 800b758:	e000      	b.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800b75a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b75c:	7dfb      	ldrb	r3, [r7, #23]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10c      	bne.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b762:	4b05      	ldr	r3, [pc, #20]	; (800b778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b766:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b770:	4901      	ldr	r1, [pc, #4]	; (800b778 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800b772:	4313      	orrs	r3, r2
 800b774:	658b      	str	r3, [r1, #88]	; 0x58
 800b776:	e003      	b.n	800b780 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800b778:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b77c:	7dfb      	ldrb	r3, [r7, #23]
 800b77e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d02f      	beq.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b794:	d00e      	beq.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800b796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b79a:	d814      	bhi.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d015      	beq.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800b7a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7a4:	d10f      	bne.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7a6:	4baf      	ldr	r3, [pc, #700]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7aa:	4aae      	ldr	r2, [pc, #696]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b7ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b7b2:	e00c      	b.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	3304      	adds	r3, #4
 800b7b8:	2101      	movs	r1, #1
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f000 ff3c 	bl	800c638 <RCCEx_PLL2_Config>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b7c4:	e003      	b.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	75fb      	strb	r3, [r7, #23]
      break;
 800b7ca:	e000      	b.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800b7cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7ce:	7dfb      	ldrb	r3, [r7, #23]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d109      	bne.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b7d4:	4ba3      	ldr	r3, [pc, #652]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b7d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b7e0:	49a0      	ldr	r1, [pc, #640]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	650b      	str	r3, [r1, #80]	; 0x50
 800b7e6:	e001      	b.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e8:	7dfb      	ldrb	r3, [r7, #23]
 800b7ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d032      	beq.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7fc:	2b03      	cmp	r3, #3
 800b7fe:	d81b      	bhi.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800b800:	a201      	add	r2, pc, #4	; (adr r2, 800b808 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800b802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b806:	bf00      	nop
 800b808:	0800b83f 	.word	0x0800b83f
 800b80c:	0800b819 	.word	0x0800b819
 800b810:	0800b827 	.word	0x0800b827
 800b814:	0800b83f 	.word	0x0800b83f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b818:	4b92      	ldr	r3, [pc, #584]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81c:	4a91      	ldr	r2, [pc, #580]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b81e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b824:	e00c      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	3304      	adds	r3, #4
 800b82a:	2102      	movs	r1, #2
 800b82c:	4618      	mov	r0, r3
 800b82e:	f000 ff03 	bl	800c638 <RCCEx_PLL2_Config>
 800b832:	4603      	mov	r3, r0
 800b834:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b836:	e003      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b838:	2301      	movs	r3, #1
 800b83a:	75fb      	strb	r3, [r7, #23]
      break;
 800b83c:	e000      	b.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800b83e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b840:	7dfb      	ldrb	r3, [r7, #23]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d109      	bne.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b846:	4b87      	ldr	r3, [pc, #540]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b84a:	f023 0203 	bic.w	r2, r3, #3
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b852:	4984      	ldr	r1, [pc, #528]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b854:	4313      	orrs	r3, r2
 800b856:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b858:	e001      	b.n	800b85e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b85a:	7dfb      	ldrb	r3, [r7, #23]
 800b85c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b866:	2b00      	cmp	r3, #0
 800b868:	f000 8086 	beq.w	800b978 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b86c:	4b7e      	ldr	r3, [pc, #504]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a7d      	ldr	r2, [pc, #500]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b876:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b878:	f7fb f970 	bl	8006b5c <HAL_GetTick>
 800b87c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b87e:	e009      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b880:	f7fb f96c 	bl	8006b5c <HAL_GetTick>
 800b884:	4602      	mov	r2, r0
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	1ad3      	subs	r3, r2, r3
 800b88a:	2b64      	cmp	r3, #100	; 0x64
 800b88c:	d902      	bls.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800b88e:	2303      	movs	r3, #3
 800b890:	75fb      	strb	r3, [r7, #23]
        break;
 800b892:	e005      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b894:	4b74      	ldr	r3, [pc, #464]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d0ef      	beq.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800b8a0:	7dfb      	ldrb	r3, [r7, #23]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d166      	bne.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b8a6:	4b6f      	ldr	r3, [pc, #444]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b8b0:	4053      	eors	r3, r2
 800b8b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d013      	beq.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b8ba:	4b6a      	ldr	r3, [pc, #424]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8c2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b8c4:	4b67      	ldr	r3, [pc, #412]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8c8:	4a66      	ldr	r2, [pc, #408]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8ce:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b8d0:	4b64      	ldr	r3, [pc, #400]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8d4:	4a63      	ldr	r2, [pc, #396]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8da:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b8dc:	4a61      	ldr	r2, [pc, #388]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b8e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ec:	d115      	bne.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8ee:	f7fb f935 	bl	8006b5c <HAL_GetTick>
 800b8f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b8f4:	e00b      	b.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8f6:	f7fb f931 	bl	8006b5c <HAL_GetTick>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	f241 3288 	movw	r2, #5000	; 0x1388
 800b904:	4293      	cmp	r3, r2
 800b906:	d902      	bls.n	800b90e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800b908:	2303      	movs	r3, #3
 800b90a:	75fb      	strb	r3, [r7, #23]
            break;
 800b90c:	e005      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b90e:	4b55      	ldr	r3, [pc, #340]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b912:	f003 0302 	and.w	r3, r3, #2
 800b916:	2b00      	cmp	r3, #0
 800b918:	d0ed      	beq.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800b91a:	7dfb      	ldrb	r3, [r7, #23]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d126      	bne.n	800b96e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b92a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b92e:	d10d      	bne.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800b930:	4b4c      	ldr	r3, [pc, #304]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b93e:	0919      	lsrs	r1, r3, #4
 800b940:	4b4a      	ldr	r3, [pc, #296]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800b942:	400b      	ands	r3, r1
 800b944:	4947      	ldr	r1, [pc, #284]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b946:	4313      	orrs	r3, r2
 800b948:	610b      	str	r3, [r1, #16]
 800b94a:	e005      	b.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800b94c:	4b45      	ldr	r3, [pc, #276]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b94e:	691b      	ldr	r3, [r3, #16]
 800b950:	4a44      	ldr	r2, [pc, #272]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b952:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b956:	6113      	str	r3, [r2, #16]
 800b958:	4b42      	ldr	r3, [pc, #264]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b95a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b966:	493f      	ldr	r1, [pc, #252]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800b968:	4313      	orrs	r3, r2
 800b96a:	670b      	str	r3, [r1, #112]	; 0x70
 800b96c:	e004      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b96e:	7dfb      	ldrb	r3, [r7, #23]
 800b970:	75bb      	strb	r3, [r7, #22]
 800b972:	e001      	b.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b974:	7dfb      	ldrb	r3, [r7, #23]
 800b976:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f003 0301 	and.w	r3, r3, #1
 800b980:	2b00      	cmp	r3, #0
 800b982:	f000 8085 	beq.w	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b98a:	2b28      	cmp	r3, #40	; 0x28
 800b98c:	d866      	bhi.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800b98e:	a201      	add	r2, pc, #4	; (adr r2, 800b994 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800b990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b994:	0800ba71 	.word	0x0800ba71
 800b998:	0800ba5d 	.word	0x0800ba5d
 800b99c:	0800ba5d 	.word	0x0800ba5d
 800b9a0:	0800ba5d 	.word	0x0800ba5d
 800b9a4:	0800ba5d 	.word	0x0800ba5d
 800b9a8:	0800ba5d 	.word	0x0800ba5d
 800b9ac:	0800ba5d 	.word	0x0800ba5d
 800b9b0:	0800ba5d 	.word	0x0800ba5d
 800b9b4:	0800ba39 	.word	0x0800ba39
 800b9b8:	0800ba5d 	.word	0x0800ba5d
 800b9bc:	0800ba5d 	.word	0x0800ba5d
 800b9c0:	0800ba5d 	.word	0x0800ba5d
 800b9c4:	0800ba5d 	.word	0x0800ba5d
 800b9c8:	0800ba5d 	.word	0x0800ba5d
 800b9cc:	0800ba5d 	.word	0x0800ba5d
 800b9d0:	0800ba5d 	.word	0x0800ba5d
 800b9d4:	0800ba4b 	.word	0x0800ba4b
 800b9d8:	0800ba5d 	.word	0x0800ba5d
 800b9dc:	0800ba5d 	.word	0x0800ba5d
 800b9e0:	0800ba5d 	.word	0x0800ba5d
 800b9e4:	0800ba5d 	.word	0x0800ba5d
 800b9e8:	0800ba5d 	.word	0x0800ba5d
 800b9ec:	0800ba5d 	.word	0x0800ba5d
 800b9f0:	0800ba5d 	.word	0x0800ba5d
 800b9f4:	0800ba71 	.word	0x0800ba71
 800b9f8:	0800ba5d 	.word	0x0800ba5d
 800b9fc:	0800ba5d 	.word	0x0800ba5d
 800ba00:	0800ba5d 	.word	0x0800ba5d
 800ba04:	0800ba5d 	.word	0x0800ba5d
 800ba08:	0800ba5d 	.word	0x0800ba5d
 800ba0c:	0800ba5d 	.word	0x0800ba5d
 800ba10:	0800ba5d 	.word	0x0800ba5d
 800ba14:	0800ba71 	.word	0x0800ba71
 800ba18:	0800ba5d 	.word	0x0800ba5d
 800ba1c:	0800ba5d 	.word	0x0800ba5d
 800ba20:	0800ba5d 	.word	0x0800ba5d
 800ba24:	0800ba5d 	.word	0x0800ba5d
 800ba28:	0800ba5d 	.word	0x0800ba5d
 800ba2c:	0800ba5d 	.word	0x0800ba5d
 800ba30:	0800ba5d 	.word	0x0800ba5d
 800ba34:	0800ba71 	.word	0x0800ba71
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	3304      	adds	r3, #4
 800ba3c:	2101      	movs	r1, #1
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f000 fdfa 	bl	800c638 <RCCEx_PLL2_Config>
 800ba44:	4603      	mov	r3, r0
 800ba46:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ba48:	e013      	b.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	3324      	adds	r3, #36	; 0x24
 800ba4e:	2101      	movs	r1, #1
 800ba50:	4618      	mov	r0, r3
 800ba52:	f000 fea3 	bl	800c79c <RCCEx_PLL3_Config>
 800ba56:	4603      	mov	r3, r0
 800ba58:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ba5a:	e00a      	b.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	75fb      	strb	r3, [r7, #23]
      break;
 800ba60:	e007      	b.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800ba62:	bf00      	nop
 800ba64:	58024400 	.word	0x58024400
 800ba68:	58024800 	.word	0x58024800
 800ba6c:	00ffffcf 	.word	0x00ffffcf
      break;
 800ba70:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ba72:	7dfb      	ldrb	r3, [r7, #23]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d109      	bne.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ba78:	4b96      	ldr	r3, [pc, #600]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ba7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba7c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba84:	4993      	ldr	r1, [pc, #588]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ba86:	4313      	orrs	r3, r2
 800ba88:	654b      	str	r3, [r1, #84]	; 0x54
 800ba8a:	e001      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba8c:	7dfb      	ldrb	r3, [r7, #23]
 800ba8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f003 0302 	and.w	r3, r3, #2
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d038      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800baa0:	2b05      	cmp	r3, #5
 800baa2:	d821      	bhi.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800baa4:	a201      	add	r2, pc, #4	; (adr r2, 800baac <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800baa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baaa:	bf00      	nop
 800baac:	0800baef 	.word	0x0800baef
 800bab0:	0800bac5 	.word	0x0800bac5
 800bab4:	0800bad7 	.word	0x0800bad7
 800bab8:	0800baef 	.word	0x0800baef
 800babc:	0800baef 	.word	0x0800baef
 800bac0:	0800baef 	.word	0x0800baef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	3304      	adds	r3, #4
 800bac8:	2101      	movs	r1, #1
 800baca:	4618      	mov	r0, r3
 800bacc:	f000 fdb4 	bl	800c638 <RCCEx_PLL2_Config>
 800bad0:	4603      	mov	r3, r0
 800bad2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bad4:	e00c      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	3324      	adds	r3, #36	; 0x24
 800bada:	2101      	movs	r1, #1
 800badc:	4618      	mov	r0, r3
 800bade:	f000 fe5d 	bl	800c79c <RCCEx_PLL3_Config>
 800bae2:	4603      	mov	r3, r0
 800bae4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800bae6:	e003      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bae8:	2301      	movs	r3, #1
 800baea:	75fb      	strb	r3, [r7, #23]
      break;
 800baec:	e000      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800baee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800baf0:	7dfb      	ldrb	r3, [r7, #23]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d109      	bne.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800baf6:	4b77      	ldr	r3, [pc, #476]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800baf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bafa:	f023 0207 	bic.w	r2, r3, #7
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb02:	4974      	ldr	r1, [pc, #464]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bb04:	4313      	orrs	r3, r2
 800bb06:	654b      	str	r3, [r1, #84]	; 0x54
 800bb08:	e001      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb0a:	7dfb      	ldrb	r3, [r7, #23]
 800bb0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f003 0304 	and.w	r3, r3, #4
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d03a      	beq.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb20:	2b05      	cmp	r3, #5
 800bb22:	d821      	bhi.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800bb24:	a201      	add	r2, pc, #4	; (adr r2, 800bb2c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800bb26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb2a:	bf00      	nop
 800bb2c:	0800bb6f 	.word	0x0800bb6f
 800bb30:	0800bb45 	.word	0x0800bb45
 800bb34:	0800bb57 	.word	0x0800bb57
 800bb38:	0800bb6f 	.word	0x0800bb6f
 800bb3c:	0800bb6f 	.word	0x0800bb6f
 800bb40:	0800bb6f 	.word	0x0800bb6f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3304      	adds	r3, #4
 800bb48:	2101      	movs	r1, #1
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 fd74 	bl	800c638 <RCCEx_PLL2_Config>
 800bb50:	4603      	mov	r3, r0
 800bb52:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bb54:	e00c      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	3324      	adds	r3, #36	; 0x24
 800bb5a:	2101      	movs	r1, #1
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	f000 fe1d 	bl	800c79c <RCCEx_PLL3_Config>
 800bb62:	4603      	mov	r3, r0
 800bb64:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800bb66:	e003      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb6c:	e000      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800bb6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb70:	7dfb      	ldrb	r3, [r7, #23]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10a      	bne.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bb76:	4b57      	ldr	r3, [pc, #348]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bb78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb7a:	f023 0207 	bic.w	r2, r3, #7
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb84:	4953      	ldr	r1, [pc, #332]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bb86:	4313      	orrs	r3, r2
 800bb88:	658b      	str	r3, [r1, #88]	; 0x58
 800bb8a:	e001      	b.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb8c:	7dfb      	ldrb	r3, [r7, #23]
 800bb8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 0320 	and.w	r3, r3, #32
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d04b      	beq.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bba6:	d02e      	beq.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800bba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbac:	d828      	bhi.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800bbae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbb2:	d02a      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800bbb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbb8:	d822      	bhi.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800bbba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbbe:	d026      	beq.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800bbc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbc4:	d81c      	bhi.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800bbc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbca:	d010      	beq.n	800bbee <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800bbcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbd0:	d816      	bhi.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d01d      	beq.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800bbd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bbda:	d111      	bne.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	3304      	adds	r3, #4
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f000 fd28 	bl	800c638 <RCCEx_PLL2_Config>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bbec:	e012      	b.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	3324      	adds	r3, #36	; 0x24
 800bbf2:	2102      	movs	r1, #2
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f000 fdd1 	bl	800c79c <RCCEx_PLL3_Config>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800bbfe:	e009      	b.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bc00:	2301      	movs	r3, #1
 800bc02:	75fb      	strb	r3, [r7, #23]
      break;
 800bc04:	e006      	b.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800bc06:	bf00      	nop
 800bc08:	e004      	b.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800bc0a:	bf00      	nop
 800bc0c:	e002      	b.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800bc0e:	bf00      	nop
 800bc10:	e000      	b.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800bc12:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc14:	7dfb      	ldrb	r3, [r7, #23]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d10a      	bne.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bc1a:	4b2e      	ldr	r3, [pc, #184]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bc1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc28:	492a      	ldr	r1, [pc, #168]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	654b      	str	r3, [r1, #84]	; 0x54
 800bc2e:	e001      	b.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc30:	7dfb      	ldrb	r3, [r7, #23]
 800bc32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d04d      	beq.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bc4a:	d02e      	beq.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800bc4c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bc50:	d828      	bhi.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800bc52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc56:	d02a      	beq.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800bc58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc5c:	d822      	bhi.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800bc5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc62:	d026      	beq.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800bc64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc68:	d81c      	bhi.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800bc6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc6e:	d010      	beq.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800bc70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc74:	d816      	bhi.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d01d      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800bc7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc7e:	d111      	bne.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	3304      	adds	r3, #4
 800bc84:	2100      	movs	r1, #0
 800bc86:	4618      	mov	r0, r3
 800bc88:	f000 fcd6 	bl	800c638 <RCCEx_PLL2_Config>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bc90:	e012      	b.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	3324      	adds	r3, #36	; 0x24
 800bc96:	2102      	movs	r1, #2
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f000 fd7f 	bl	800c79c <RCCEx_PLL3_Config>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800bca2:	e009      	b.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bca4:	2301      	movs	r3, #1
 800bca6:	75fb      	strb	r3, [r7, #23]
      break;
 800bca8:	e006      	b.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800bcaa:	bf00      	nop
 800bcac:	e004      	b.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800bcae:	bf00      	nop
 800bcb0:	e002      	b.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800bcb2:	bf00      	nop
 800bcb4:	e000      	b.n	800bcb8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800bcb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bcb8:	7dfb      	ldrb	r3, [r7, #23]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d10c      	bne.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bcbe:	4b05      	ldr	r3, [pc, #20]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bcc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcc2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bccc:	4901      	ldr	r1, [pc, #4]	; (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	658b      	str	r3, [r1, #88]	; 0x58
 800bcd2:	e003      	b.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800bcd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcd8:	7dfb      	ldrb	r3, [r7, #23]
 800bcda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d04b      	beq.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bcee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bcf2:	d02e      	beq.n	800bd52 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800bcf4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bcf8:	d828      	bhi.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800bcfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcfe:	d02a      	beq.n	800bd56 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800bd00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd04:	d822      	bhi.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800bd06:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bd0a:	d026      	beq.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800bd0c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bd10:	d81c      	bhi.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800bd12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd16:	d010      	beq.n	800bd3a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800bd18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd1c:	d816      	bhi.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d01d      	beq.n	800bd5e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800bd22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd26:	d111      	bne.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	3304      	adds	r3, #4
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f000 fc82 	bl	800c638 <RCCEx_PLL2_Config>
 800bd34:	4603      	mov	r3, r0
 800bd36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800bd38:	e012      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	3324      	adds	r3, #36	; 0x24
 800bd3e:	2102      	movs	r1, #2
 800bd40:	4618      	mov	r0, r3
 800bd42:	f000 fd2b 	bl	800c79c <RCCEx_PLL3_Config>
 800bd46:	4603      	mov	r3, r0
 800bd48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800bd4a:	e009      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	75fb      	strb	r3, [r7, #23]
      break;
 800bd50:	e006      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800bd52:	bf00      	nop
 800bd54:	e004      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800bd56:	bf00      	nop
 800bd58:	e002      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800bd5a:	bf00      	nop
 800bd5c:	e000      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800bd5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd60:	7dfb      	ldrb	r3, [r7, #23]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d10a      	bne.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bd66:	4b9d      	ldr	r3, [pc, #628]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bd68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd74:	4999      	ldr	r1, [pc, #612]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bd76:	4313      	orrs	r3, r2
 800bd78:	658b      	str	r3, [r1, #88]	; 0x58
 800bd7a:	e001      	b.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd7c:	7dfb      	ldrb	r3, [r7, #23]
 800bd7e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f003 0308 	and.w	r3, r3, #8
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d01a      	beq.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd96:	d10a      	bne.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	3324      	adds	r3, #36	; 0x24
 800bd9c:	2102      	movs	r1, #2
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f000 fcfc 	bl	800c79c <RCCEx_PLL3_Config>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d001      	beq.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bdae:	4b8b      	ldr	r3, [pc, #556]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bdb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bdbc:	4987      	ldr	r1, [pc, #540]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f003 0310 	and.w	r3, r3, #16
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d01a      	beq.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bdd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdd8:	d10a      	bne.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	3324      	adds	r3, #36	; 0x24
 800bdde:	2102      	movs	r1, #2
 800bde0:	4618      	mov	r0, r3
 800bde2:	f000 fcdb 	bl	800c79c <RCCEx_PLL3_Config>
 800bde6:	4603      	mov	r3, r0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d001      	beq.n	800bdf0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800bdec:	2301      	movs	r3, #1
 800bdee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bdf0:	4b7a      	ldr	r3, [pc, #488]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bdf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bdfe:	4977      	ldr	r1, [pc, #476]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800be00:	4313      	orrs	r3, r2
 800be02:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d034      	beq.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be1a:	d01d      	beq.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800be1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be20:	d817      	bhi.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800be22:	2b00      	cmp	r3, #0
 800be24:	d003      	beq.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800be26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be2a:	d009      	beq.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800be2c:	e011      	b.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	3304      	adds	r3, #4
 800be32:	2100      	movs	r1, #0
 800be34:	4618      	mov	r0, r3
 800be36:	f000 fbff 	bl	800c638 <RCCEx_PLL2_Config>
 800be3a:	4603      	mov	r3, r0
 800be3c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800be3e:	e00c      	b.n	800be5a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	3324      	adds	r3, #36	; 0x24
 800be44:	2102      	movs	r1, #2
 800be46:	4618      	mov	r0, r3
 800be48:	f000 fca8 	bl	800c79c <RCCEx_PLL3_Config>
 800be4c:	4603      	mov	r3, r0
 800be4e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800be50:	e003      	b.n	800be5a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	75fb      	strb	r3, [r7, #23]
      break;
 800be56:	e000      	b.n	800be5a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800be58:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be5a:	7dfb      	ldrb	r3, [r7, #23]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d10a      	bne.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800be60:	4b5e      	ldr	r3, [pc, #376]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800be62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be6e:	495b      	ldr	r1, [pc, #364]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800be70:	4313      	orrs	r3, r2
 800be72:	658b      	str	r3, [r1, #88]	; 0x58
 800be74:	e001      	b.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be76:	7dfb      	ldrb	r3, [r7, #23]
 800be78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be82:	2b00      	cmp	r3, #0
 800be84:	d033      	beq.n	800beee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be90:	d01c      	beq.n	800becc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800be92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be96:	d816      	bhi.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800be98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be9c:	d003      	beq.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800be9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bea2:	d007      	beq.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800bea4:	e00f      	b.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bea6:	4b4d      	ldr	r3, [pc, #308]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beaa:	4a4c      	ldr	r2, [pc, #304]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800beac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800beb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800beb2:	e00c      	b.n	800bece <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	3324      	adds	r3, #36	; 0x24
 800beb8:	2101      	movs	r1, #1
 800beba:	4618      	mov	r0, r3
 800bebc:	f000 fc6e 	bl	800c79c <RCCEx_PLL3_Config>
 800bec0:	4603      	mov	r3, r0
 800bec2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800bec4:	e003      	b.n	800bece <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
 800bec8:	75fb      	strb	r3, [r7, #23]
      break;
 800beca:	e000      	b.n	800bece <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800becc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bece:	7dfb      	ldrb	r3, [r7, #23]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10a      	bne.n	800beea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bed4:	4b41      	ldr	r3, [pc, #260]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bed8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bee2:	493e      	ldr	r1, [pc, #248]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bee4:	4313      	orrs	r3, r2
 800bee6:	654b      	str	r3, [r1, #84]	; 0x54
 800bee8:	e001      	b.n	800beee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beea:	7dfb      	ldrb	r3, [r7, #23]
 800beec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d029      	beq.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d003      	beq.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800bf02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf06:	d007      	beq.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800bf08:	e00f      	b.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf0a:	4b34      	ldr	r3, [pc, #208]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bf0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf0e:	4a33      	ldr	r2, [pc, #204]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bf10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bf16:	e00b      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	2102      	movs	r1, #2
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 fb8a 	bl	800c638 <RCCEx_PLL2_Config>
 800bf24:	4603      	mov	r3, r0
 800bf26:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bf28:	e002      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	75fb      	strb	r3, [r7, #23]
      break;
 800bf2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf30:	7dfb      	ldrb	r3, [r7, #23]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d109      	bne.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bf36:	4b29      	ldr	r3, [pc, #164]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bf38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf42:	4926      	ldr	r1, [pc, #152]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bf44:	4313      	orrs	r3, r2
 800bf46:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bf48:	e001      	b.n	800bf4e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf4a:	7dfb      	ldrb	r3, [r7, #23]
 800bf4c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00a      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	3324      	adds	r3, #36	; 0x24
 800bf5e:	2102      	movs	r1, #2
 800bf60:	4618      	mov	r0, r3
 800bf62:	f000 fc1b 	bl	800c79c <RCCEx_PLL3_Config>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d001      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d033      	beq.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bf80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf84:	d017      	beq.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800bf86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf8a:	d811      	bhi.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800bf8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf90:	d013      	beq.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800bf92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf96:	d80b      	bhi.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d010      	beq.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800bf9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bfa0:	d106      	bne.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfa2:	4b0e      	ldr	r3, [pc, #56]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa6:	4a0d      	ldr	r2, [pc, #52]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bfa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800bfae:	e007      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	75fb      	strb	r3, [r7, #23]
      break;
 800bfb4:	e004      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800bfb6:	bf00      	nop
 800bfb8:	e002      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800bfba:	bf00      	nop
 800bfbc:	e000      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800bfbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bfc0:	7dfb      	ldrb	r3, [r7, #23]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10c      	bne.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bfc6:	4b05      	ldr	r3, [pc, #20]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bfc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfd2:	4902      	ldr	r1, [pc, #8]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	654b      	str	r3, [r1, #84]	; 0x54
 800bfd8:	e004      	b.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800bfda:	bf00      	nop
 800bfdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfe0:	7dfb      	ldrb	r3, [r7, #23]
 800bfe2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d008      	beq.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bff0:	4b31      	ldr	r3, [pc, #196]	; (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bff4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bffc:	492e      	ldr	r1, [pc, #184]	; (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800bffe:	4313      	orrs	r3, r2
 800c000:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d009      	beq.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c00e:	4b2a      	ldr	r3, [pc, #168]	; (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c010:	691b      	ldr	r3, [r3, #16]
 800c012:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c01c:	4926      	ldr	r1, [pc, #152]	; (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c01e:	4313      	orrs	r3, r2
 800c020:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d008      	beq.n	800c040 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c02e:	4b22      	ldr	r3, [pc, #136]	; (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c032:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c03a:	491f      	ldr	r1, [pc, #124]	; (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c03c:	4313      	orrs	r3, r2
 800c03e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00d      	beq.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c04c:	4b1a      	ldr	r3, [pc, #104]	; (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c04e:	691b      	ldr	r3, [r3, #16]
 800c050:	4a19      	ldr	r2, [pc, #100]	; (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c052:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c056:	6113      	str	r3, [r2, #16]
 800c058:	4b17      	ldr	r3, [pc, #92]	; (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c05a:	691a      	ldr	r2, [r3, #16]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c062:	4915      	ldr	r1, [pc, #84]	; (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c064:	4313      	orrs	r3, r2
 800c066:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	da08      	bge.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c070:	4b11      	ldr	r3, [pc, #68]	; (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c074:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c07c:	490e      	ldr	r1, [pc, #56]	; (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c07e:	4313      	orrs	r3, r2
 800c080:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d009      	beq.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c08e:	4b0a      	ldr	r3, [pc, #40]	; (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c092:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c09c:	4906      	ldr	r1, [pc, #24]	; (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800c0a2:	7dbb      	ldrb	r3, [r7, #22]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d101      	bne.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	e000      	b.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800c0ac:	2301      	movs	r3, #1
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3718      	adds	r7, #24
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	58024400 	.word	0x58024400

0800c0bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c0c0:	f7ff f85a 	bl	800b178 <HAL_RCC_GetHCLKFreq>
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	4b06      	ldr	r3, [pc, #24]	; (800c0e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c0c8:	6a1b      	ldr	r3, [r3, #32]
 800c0ca:	091b      	lsrs	r3, r3, #4
 800c0cc:	f003 0307 	and.w	r3, r3, #7
 800c0d0:	4904      	ldr	r1, [pc, #16]	; (800c0e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c0d2:	5ccb      	ldrb	r3, [r1, r3]
 800c0d4:	f003 031f 	and.w	r3, r3, #31
 800c0d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	58024400 	.word	0x58024400
 800c0e4:	08014c80 	.word	0x08014c80

0800c0e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b089      	sub	sp, #36	; 0x24
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c0f0:	4ba1      	ldr	r3, [pc, #644]	; (800c378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0f4:	f003 0303 	and.w	r3, r3, #3
 800c0f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c0fa:	4b9f      	ldr	r3, [pc, #636]	; (800c378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0fe:	0b1b      	lsrs	r3, r3, #12
 800c100:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c104:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c106:	4b9c      	ldr	r3, [pc, #624]	; (800c378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c10a:	091b      	lsrs	r3, r3, #4
 800c10c:	f003 0301 	and.w	r3, r3, #1
 800c110:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c112:	4b99      	ldr	r3, [pc, #612]	; (800c378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c116:	08db      	lsrs	r3, r3, #3
 800c118:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c11c:	693a      	ldr	r2, [r7, #16]
 800c11e:	fb02 f303 	mul.w	r3, r2, r3
 800c122:	ee07 3a90 	vmov	s15, r3
 800c126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c12a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	2b00      	cmp	r3, #0
 800c132:	f000 8111 	beq.w	800c358 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c136:	69bb      	ldr	r3, [r7, #24]
 800c138:	2b02      	cmp	r3, #2
 800c13a:	f000 8083 	beq.w	800c244 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c13e:	69bb      	ldr	r3, [r7, #24]
 800c140:	2b02      	cmp	r3, #2
 800c142:	f200 80a1 	bhi.w	800c288 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d003      	beq.n	800c154 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d056      	beq.n	800c200 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c152:	e099      	b.n	800c288 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c154:	4b88      	ldr	r3, [pc, #544]	; (800c378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f003 0320 	and.w	r3, r3, #32
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d02d      	beq.n	800c1bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c160:	4b85      	ldr	r3, [pc, #532]	; (800c378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	08db      	lsrs	r3, r3, #3
 800c166:	f003 0303 	and.w	r3, r3, #3
 800c16a:	4a84      	ldr	r2, [pc, #528]	; (800c37c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c16c:	fa22 f303 	lsr.w	r3, r2, r3
 800c170:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	ee07 3a90 	vmov	s15, r3
 800c178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	ee07 3a90 	vmov	s15, r3
 800c182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c18a:	4b7b      	ldr	r3, [pc, #492]	; (800c378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c18e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c192:	ee07 3a90 	vmov	s15, r3
 800c196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c19a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c19e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c1a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c1ba:	e087      	b.n	800c2cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	ee07 3a90 	vmov	s15, r3
 800c1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c384 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c1ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1ce:	4b6a      	ldr	r3, [pc, #424]	; (800c378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1d6:	ee07 3a90 	vmov	s15, r3
 800c1da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c1e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c1f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c1fe:	e065      	b.n	800c2cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	ee07 3a90 	vmov	s15, r3
 800c206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c20a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c388 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c20e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c212:	4b59      	ldr	r3, [pc, #356]	; (800c378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c21a:	ee07 3a90 	vmov	s15, r3
 800c21e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c222:	ed97 6a03 	vldr	s12, [r7, #12]
 800c226:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c22a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c22e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c232:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c23a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c23e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c242:	e043      	b.n	800c2cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	ee07 3a90 	vmov	s15, r3
 800c24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c24e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c38c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c256:	4b48      	ldr	r3, [pc, #288]	; (800c378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c25a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c25e:	ee07 3a90 	vmov	s15, r3
 800c262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c266:	ed97 6a03 	vldr	s12, [r7, #12]
 800c26a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c26e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c276:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c27a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c27e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c282:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c286:	e021      	b.n	800c2cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	ee07 3a90 	vmov	s15, r3
 800c28e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c292:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c388 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c29a:	4b37      	ldr	r3, [pc, #220]	; (800c378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c29e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2a2:	ee07 3a90 	vmov	s15, r3
 800c2a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c380 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c2b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c2ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c2cc:	4b2a      	ldr	r3, [pc, #168]	; (800c378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d0:	0a5b      	lsrs	r3, r3, #9
 800c2d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2d6:	ee07 3a90 	vmov	s15, r3
 800c2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c2e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c2e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c2ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2f2:	ee17 2a90 	vmov	r2, s15
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c2fa:	4b1f      	ldr	r3, [pc, #124]	; (800c378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fe:	0c1b      	lsrs	r3, r3, #16
 800c300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c304:	ee07 3a90 	vmov	s15, r3
 800c308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c30c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c310:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c314:	edd7 6a07 	vldr	s13, [r7, #28]
 800c318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c31c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c320:	ee17 2a90 	vmov	r2, s15
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c328:	4b13      	ldr	r3, [pc, #76]	; (800c378 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c32a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c32c:	0e1b      	lsrs	r3, r3, #24
 800c32e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c332:	ee07 3a90 	vmov	s15, r3
 800c336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c33a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c33e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c342:	edd7 6a07 	vldr	s13, [r7, #28]
 800c346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c34a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c34e:	ee17 2a90 	vmov	r2, s15
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c356:	e008      	b.n	800c36a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2200      	movs	r2, #0
 800c35c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	609a      	str	r2, [r3, #8]
}
 800c36a:	bf00      	nop
 800c36c:	3724      	adds	r7, #36	; 0x24
 800c36e:	46bd      	mov	sp, r7
 800c370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c374:	4770      	bx	lr
 800c376:	bf00      	nop
 800c378:	58024400 	.word	0x58024400
 800c37c:	03d09000 	.word	0x03d09000
 800c380:	46000000 	.word	0x46000000
 800c384:	4c742400 	.word	0x4c742400
 800c388:	4a742400 	.word	0x4a742400
 800c38c:	4c371b00 	.word	0x4c371b00

0800c390 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c390:	b480      	push	{r7}
 800c392:	b089      	sub	sp, #36	; 0x24
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c398:	4ba1      	ldr	r3, [pc, #644]	; (800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c39c:	f003 0303 	and.w	r3, r3, #3
 800c3a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c3a2:	4b9f      	ldr	r3, [pc, #636]	; (800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3a6:	0d1b      	lsrs	r3, r3, #20
 800c3a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c3ae:	4b9c      	ldr	r3, [pc, #624]	; (800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b2:	0a1b      	lsrs	r3, r3, #8
 800c3b4:	f003 0301 	and.w	r3, r3, #1
 800c3b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c3ba:	4b99      	ldr	r3, [pc, #612]	; (800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3be:	08db      	lsrs	r3, r3, #3
 800c3c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c3c4:	693a      	ldr	r2, [r7, #16]
 800c3c6:	fb02 f303 	mul.w	r3, r2, r3
 800c3ca:	ee07 3a90 	vmov	s15, r3
 800c3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f000 8111 	beq.w	800c600 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	f000 8083 	beq.w	800c4ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	2b02      	cmp	r3, #2
 800c3ea:	f200 80a1 	bhi.w	800c530 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d003      	beq.n	800c3fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	d056      	beq.n	800c4a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c3fa:	e099      	b.n	800c530 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c3fc:	4b88      	ldr	r3, [pc, #544]	; (800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 0320 	and.w	r3, r3, #32
 800c404:	2b00      	cmp	r3, #0
 800c406:	d02d      	beq.n	800c464 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c408:	4b85      	ldr	r3, [pc, #532]	; (800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	08db      	lsrs	r3, r3, #3
 800c40e:	f003 0303 	and.w	r3, r3, #3
 800c412:	4a84      	ldr	r2, [pc, #528]	; (800c624 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c414:	fa22 f303 	lsr.w	r3, r2, r3
 800c418:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	ee07 3a90 	vmov	s15, r3
 800c420:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	ee07 3a90 	vmov	s15, r3
 800c42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c42e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c432:	4b7b      	ldr	r3, [pc, #492]	; (800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c43a:	ee07 3a90 	vmov	s15, r3
 800c43e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c442:	ed97 6a03 	vldr	s12, [r7, #12]
 800c446:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c44a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c44e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c45a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c45e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c462:	e087      	b.n	800c574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	ee07 3a90 	vmov	s15, r3
 800c46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c46e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c62c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c476:	4b6a      	ldr	r3, [pc, #424]	; (800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c47a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c47e:	ee07 3a90 	vmov	s15, r3
 800c482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c486:	ed97 6a03 	vldr	s12, [r7, #12]
 800c48a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c48e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c49a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c49e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4a6:	e065      	b.n	800c574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	ee07 3a90 	vmov	s15, r3
 800c4ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c630 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c4b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4ba:	4b59      	ldr	r3, [pc, #356]	; (800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4c2:	ee07 3a90 	vmov	s15, r3
 800c4c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c4ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c4ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c4d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c4d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c4da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c4de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c4ea:	e043      	b.n	800c574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	ee07 3a90 	vmov	s15, r3
 800c4f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c634 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c4fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c4fe:	4b48      	ldr	r3, [pc, #288]	; (800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c506:	ee07 3a90 	vmov	s15, r3
 800c50a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c50e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c512:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c51a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c51e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c52a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c52e:	e021      	b.n	800c574 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	ee07 3a90 	vmov	s15, r3
 800c536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c53a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c630 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c53e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c542:	4b37      	ldr	r3, [pc, #220]	; (800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c54a:	ee07 3a90 	vmov	s15, r3
 800c54e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c552:	ed97 6a03 	vldr	s12, [r7, #12]
 800c556:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c628 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c55a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c55e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c56a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c56e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c572:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c574:	4b2a      	ldr	r3, [pc, #168]	; (800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c578:	0a5b      	lsrs	r3, r3, #9
 800c57a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c57e:	ee07 3a90 	vmov	s15, r3
 800c582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c58a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c58e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c596:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c59a:	ee17 2a90 	vmov	r2, s15
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c5a2:	4b1f      	ldr	r3, [pc, #124]	; (800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a6:	0c1b      	lsrs	r3, r3, #16
 800c5a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5ac:	ee07 3a90 	vmov	s15, r3
 800c5b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c5bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5c8:	ee17 2a90 	vmov	r2, s15
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c5d0:	4b13      	ldr	r3, [pc, #76]	; (800c620 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5d4:	0e1b      	lsrs	r3, r3, #24
 800c5d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5da:	ee07 3a90 	vmov	s15, r3
 800c5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c5ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800c5ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c5f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5f6:	ee17 2a90 	vmov	r2, s15
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c5fe:	e008      	b.n	800c612 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2200      	movs	r2, #0
 800c60a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2200      	movs	r2, #0
 800c610:	609a      	str	r2, [r3, #8]
}
 800c612:	bf00      	nop
 800c614:	3724      	adds	r7, #36	; 0x24
 800c616:	46bd      	mov	sp, r7
 800c618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61c:	4770      	bx	lr
 800c61e:	bf00      	nop
 800c620:	58024400 	.word	0x58024400
 800c624:	03d09000 	.word	0x03d09000
 800c628:	46000000 	.word	0x46000000
 800c62c:	4c742400 	.word	0x4c742400
 800c630:	4a742400 	.word	0x4a742400
 800c634:	4c371b00 	.word	0x4c371b00

0800c638 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b084      	sub	sp, #16
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c642:	2300      	movs	r3, #0
 800c644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c646:	4b53      	ldr	r3, [pc, #332]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c64a:	f003 0303 	and.w	r3, r3, #3
 800c64e:	2b03      	cmp	r3, #3
 800c650:	d101      	bne.n	800c656 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c652:	2301      	movs	r3, #1
 800c654:	e099      	b.n	800c78a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c656:	4b4f      	ldr	r3, [pc, #316]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a4e      	ldr	r2, [pc, #312]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c65c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c662:	f7fa fa7b 	bl	8006b5c <HAL_GetTick>
 800c666:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c668:	e008      	b.n	800c67c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c66a:	f7fa fa77 	bl	8006b5c <HAL_GetTick>
 800c66e:	4602      	mov	r2, r0
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	1ad3      	subs	r3, r2, r3
 800c674:	2b02      	cmp	r3, #2
 800c676:	d901      	bls.n	800c67c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c678:	2303      	movs	r3, #3
 800c67a:	e086      	b.n	800c78a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c67c:	4b45      	ldr	r3, [pc, #276]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c684:	2b00      	cmp	r3, #0
 800c686:	d1f0      	bne.n	800c66a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c688:	4b42      	ldr	r3, [pc, #264]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c68a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c68c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	031b      	lsls	r3, r3, #12
 800c696:	493f      	ldr	r1, [pc, #252]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c698:	4313      	orrs	r3, r2
 800c69a:	628b      	str	r3, [r1, #40]	; 0x28
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	3b01      	subs	r3, #1
 800c6a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	3b01      	subs	r3, #1
 800c6ac:	025b      	lsls	r3, r3, #9
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	431a      	orrs	r2, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	3b01      	subs	r3, #1
 800c6b8:	041b      	lsls	r3, r3, #16
 800c6ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c6be:	431a      	orrs	r2, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	691b      	ldr	r3, [r3, #16]
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	061b      	lsls	r3, r3, #24
 800c6c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c6cc:	4931      	ldr	r1, [pc, #196]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c6d2:	4b30      	ldr	r3, [pc, #192]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	695b      	ldr	r3, [r3, #20]
 800c6de:	492d      	ldr	r1, [pc, #180]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c6e4:	4b2b      	ldr	r3, [pc, #172]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6e8:	f023 0220 	bic.w	r2, r3, #32
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	699b      	ldr	r3, [r3, #24]
 800c6f0:	4928      	ldr	r1, [pc, #160]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c6f6:	4b27      	ldr	r3, [pc, #156]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6fa:	4a26      	ldr	r2, [pc, #152]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c6fc:	f023 0310 	bic.w	r3, r3, #16
 800c700:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c702:	4b24      	ldr	r3, [pc, #144]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c704:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c706:	4b24      	ldr	r3, [pc, #144]	; (800c798 <RCCEx_PLL2_Config+0x160>)
 800c708:	4013      	ands	r3, r2
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	69d2      	ldr	r2, [r2, #28]
 800c70e:	00d2      	lsls	r2, r2, #3
 800c710:	4920      	ldr	r1, [pc, #128]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c712:	4313      	orrs	r3, r2
 800c714:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c716:	4b1f      	ldr	r3, [pc, #124]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c71a:	4a1e      	ldr	r2, [pc, #120]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c71c:	f043 0310 	orr.w	r3, r3, #16
 800c720:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d106      	bne.n	800c736 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c728:	4b1a      	ldr	r3, [pc, #104]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c72c:	4a19      	ldr	r2, [pc, #100]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c72e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c732:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c734:	e00f      	b.n	800c756 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d106      	bne.n	800c74a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c73c:	4b15      	ldr	r3, [pc, #84]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c740:	4a14      	ldr	r2, [pc, #80]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c746:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c748:	e005      	b.n	800c756 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c74a:	4b12      	ldr	r3, [pc, #72]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c74c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c74e:	4a11      	ldr	r2, [pc, #68]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c750:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c754:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c756:	4b0f      	ldr	r3, [pc, #60]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	4a0e      	ldr	r2, [pc, #56]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c75c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c762:	f7fa f9fb 	bl	8006b5c <HAL_GetTick>
 800c766:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c768:	e008      	b.n	800c77c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c76a:	f7fa f9f7 	bl	8006b5c <HAL_GetTick>
 800c76e:	4602      	mov	r2, r0
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	1ad3      	subs	r3, r2, r3
 800c774:	2b02      	cmp	r3, #2
 800c776:	d901      	bls.n	800c77c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c778:	2303      	movs	r3, #3
 800c77a:	e006      	b.n	800c78a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c77c:	4b05      	ldr	r3, [pc, #20]	; (800c794 <RCCEx_PLL2_Config+0x15c>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c784:	2b00      	cmp	r3, #0
 800c786:	d0f0      	beq.n	800c76a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c788:	7bfb      	ldrb	r3, [r7, #15]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop
 800c794:	58024400 	.word	0x58024400
 800c798:	ffff0007 	.word	0xffff0007

0800c79c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c7aa:	4b53      	ldr	r3, [pc, #332]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ae:	f003 0303 	and.w	r3, r3, #3
 800c7b2:	2b03      	cmp	r3, #3
 800c7b4:	d101      	bne.n	800c7ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	e099      	b.n	800c8ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c7ba:	4b4f      	ldr	r3, [pc, #316]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a4e      	ldr	r2, [pc, #312]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c7c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7c6:	f7fa f9c9 	bl	8006b5c <HAL_GetTick>
 800c7ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c7cc:	e008      	b.n	800c7e0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c7ce:	f7fa f9c5 	bl	8006b5c <HAL_GetTick>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	1ad3      	subs	r3, r2, r3
 800c7d8:	2b02      	cmp	r3, #2
 800c7da:	d901      	bls.n	800c7e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c7dc:	2303      	movs	r3, #3
 800c7de:	e086      	b.n	800c8ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c7e0:	4b45      	ldr	r3, [pc, #276]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d1f0      	bne.n	800c7ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c7ec:	4b42      	ldr	r3, [pc, #264]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c7ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	051b      	lsls	r3, r3, #20
 800c7fa:	493f      	ldr	r1, [pc, #252]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	628b      	str	r3, [r1, #40]	; 0x28
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	3b01      	subs	r3, #1
 800c806:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	3b01      	subs	r3, #1
 800c810:	025b      	lsls	r3, r3, #9
 800c812:	b29b      	uxth	r3, r3
 800c814:	431a      	orrs	r2, r3
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	3b01      	subs	r3, #1
 800c81c:	041b      	lsls	r3, r3, #16
 800c81e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c822:	431a      	orrs	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	691b      	ldr	r3, [r3, #16]
 800c828:	3b01      	subs	r3, #1
 800c82a:	061b      	lsls	r3, r3, #24
 800c82c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c830:	4931      	ldr	r1, [pc, #196]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c832:	4313      	orrs	r3, r2
 800c834:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c836:	4b30      	ldr	r3, [pc, #192]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c83a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	695b      	ldr	r3, [r3, #20]
 800c842:	492d      	ldr	r1, [pc, #180]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c844:	4313      	orrs	r3, r2
 800c846:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c848:	4b2b      	ldr	r3, [pc, #172]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c84c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	699b      	ldr	r3, [r3, #24]
 800c854:	4928      	ldr	r1, [pc, #160]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c856:	4313      	orrs	r3, r2
 800c858:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c85a:	4b27      	ldr	r3, [pc, #156]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85e:	4a26      	ldr	r2, [pc, #152]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c864:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c866:	4b24      	ldr	r3, [pc, #144]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c86a:	4b24      	ldr	r3, [pc, #144]	; (800c8fc <RCCEx_PLL3_Config+0x160>)
 800c86c:	4013      	ands	r3, r2
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	69d2      	ldr	r2, [r2, #28]
 800c872:	00d2      	lsls	r2, r2, #3
 800c874:	4920      	ldr	r1, [pc, #128]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c876:	4313      	orrs	r3, r2
 800c878:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c87a:	4b1f      	ldr	r3, [pc, #124]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87e:	4a1e      	ldr	r2, [pc, #120]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c884:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d106      	bne.n	800c89a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c88c:	4b1a      	ldr	r3, [pc, #104]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c890:	4a19      	ldr	r2, [pc, #100]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c892:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c896:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c898:	e00f      	b.n	800c8ba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d106      	bne.n	800c8ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c8a0:	4b15      	ldr	r3, [pc, #84]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a4:	4a14      	ldr	r2, [pc, #80]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c8a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c8aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c8ac:	e005      	b.n	800c8ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c8ae:	4b12      	ldr	r3, [pc, #72]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b2:	4a11      	ldr	r2, [pc, #68]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c8b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c8b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c8ba:	4b0f      	ldr	r3, [pc, #60]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a0e      	ldr	r2, [pc, #56]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c8c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c8c6:	f7fa f949 	bl	8006b5c <HAL_GetTick>
 800c8ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c8cc:	e008      	b.n	800c8e0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c8ce:	f7fa f945 	bl	8006b5c <HAL_GetTick>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	1ad3      	subs	r3, r2, r3
 800c8d8:	2b02      	cmp	r3, #2
 800c8da:	d901      	bls.n	800c8e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c8dc:	2303      	movs	r3, #3
 800c8de:	e006      	b.n	800c8ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c8e0:	4b05      	ldr	r3, [pc, #20]	; (800c8f8 <RCCEx_PLL3_Config+0x15c>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d0f0      	beq.n	800c8ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	58024400 	.word	0x58024400
 800c8fc:	ffff0007 	.word	0xffff0007

0800c900 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d101      	bne.n	800c912 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c90e:	2301      	movs	r3, #1
 800c910:	e0f1      	b.n	800caf6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4a78      	ldr	r2, [pc, #480]	; (800cb00 <HAL_SPI_Init+0x200>)
 800c91e:	4293      	cmp	r3, r2
 800c920:	d00f      	beq.n	800c942 <HAL_SPI_Init+0x42>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4a77      	ldr	r2, [pc, #476]	; (800cb04 <HAL_SPI_Init+0x204>)
 800c928:	4293      	cmp	r3, r2
 800c92a:	d00a      	beq.n	800c942 <HAL_SPI_Init+0x42>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a75      	ldr	r2, [pc, #468]	; (800cb08 <HAL_SPI_Init+0x208>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d005      	beq.n	800c942 <HAL_SPI_Init+0x42>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	2b0f      	cmp	r3, #15
 800c93c:	d901      	bls.n	800c942 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c93e:	2301      	movs	r3, #1
 800c940:	e0d9      	b.n	800caf6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 fba4 	bl	800d090 <SPI_GetPacketSize>
 800c948:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4a6c      	ldr	r2, [pc, #432]	; (800cb00 <HAL_SPI_Init+0x200>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d00c      	beq.n	800c96e <HAL_SPI_Init+0x6e>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a6a      	ldr	r2, [pc, #424]	; (800cb04 <HAL_SPI_Init+0x204>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d007      	beq.n	800c96e <HAL_SPI_Init+0x6e>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4a69      	ldr	r2, [pc, #420]	; (800cb08 <HAL_SPI_Init+0x208>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d002      	beq.n	800c96e <HAL_SPI_Init+0x6e>
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2b08      	cmp	r3, #8
 800c96c:	d811      	bhi.n	800c992 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c972:	4a63      	ldr	r2, [pc, #396]	; (800cb00 <HAL_SPI_Init+0x200>)
 800c974:	4293      	cmp	r3, r2
 800c976:	d009      	beq.n	800c98c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a61      	ldr	r2, [pc, #388]	; (800cb04 <HAL_SPI_Init+0x204>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d004      	beq.n	800c98c <HAL_SPI_Init+0x8c>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a60      	ldr	r2, [pc, #384]	; (800cb08 <HAL_SPI_Init+0x208>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d104      	bne.n	800c996 <HAL_SPI_Init+0x96>
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2b10      	cmp	r3, #16
 800c990:	d901      	bls.n	800c996 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c992:	2301      	movs	r3, #1
 800c994:	e0af      	b.n	800caf6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d106      	bne.n	800c9b0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f7f8 f92e 	bl	8004c0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2202      	movs	r2, #2
 800c9b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f022 0201 	bic.w	r2, r2, #1
 800c9c6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c9d2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	699b      	ldr	r3, [r3, #24]
 800c9d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c9dc:	d119      	bne.n	800ca12 <HAL_SPI_Init+0x112>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c9e6:	d103      	bne.n	800c9f0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d008      	beq.n	800ca02 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d10c      	bne.n	800ca12 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c9fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca00:	d107      	bne.n	800ca12 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ca10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	69da      	ldr	r2, [r3, #28]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca1a:	431a      	orrs	r2, r3
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	431a      	orrs	r2, r3
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca24:	ea42 0103 	orr.w	r1, r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	68da      	ldr	r2, [r3, #12]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	430a      	orrs	r2, r1
 800ca32:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca3c:	431a      	orrs	r2, r3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca42:	431a      	orrs	r2, r3
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	699b      	ldr	r3, [r3, #24]
 800ca48:	431a      	orrs	r2, r3
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	691b      	ldr	r3, [r3, #16]
 800ca4e:	431a      	orrs	r2, r3
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	695b      	ldr	r3, [r3, #20]
 800ca54:	431a      	orrs	r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a1b      	ldr	r3, [r3, #32]
 800ca5a:	431a      	orrs	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	431a      	orrs	r2, r3
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca66:	431a      	orrs	r2, r3
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	431a      	orrs	r2, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca72:	ea42 0103 	orr.w	r1, r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	430a      	orrs	r2, r1
 800ca80:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d113      	bne.n	800cab2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca9c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cab0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f022 0201 	bic.w	r2, r2, #1
 800cac0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00a      	beq.n	800cae4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	68db      	ldr	r3, [r3, #12]
 800cad4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	430a      	orrs	r2, r1
 800cae2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2201      	movs	r2, #1
 800caf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	40013000 	.word	0x40013000
 800cb04:	40003800 	.word	0x40003800
 800cb08:	40003c00 	.word	0x40003c00

0800cb0c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b08a      	sub	sp, #40	; 0x28
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	691b      	ldr	r3, [r3, #16]
 800cb1a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	695b      	ldr	r3, [r3, #20]
 800cb22:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800cb24:	6a3a      	ldr	r2, [r7, #32]
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	4013      	ands	r3, r2
 800cb2a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	689b      	ldr	r3, [r3, #8]
 800cb32:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800cb34:	2300      	movs	r3, #0
 800cb36:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cb3e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	3330      	adds	r3, #48	; 0x30
 800cb46:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d113      	bne.n	800cb7a <HAL_SPI_IRQHandler+0x6e>
 800cb52:	69bb      	ldr	r3, [r7, #24]
 800cb54:	f003 0320 	and.w	r3, r3, #32
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d10e      	bne.n	800cb7a <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800cb5c:	69bb      	ldr	r3, [r7, #24]
 800cb5e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d009      	beq.n	800cb7a <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	4798      	blx	r3
    hspi->RxISR(hspi);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	4798      	blx	r3
    handled = 1UL;
 800cb76:	2301      	movs	r3, #1
 800cb78:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cb7a:	69bb      	ldr	r3, [r7, #24]
 800cb7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d10f      	bne.n	800cba4 <HAL_SPI_IRQHandler+0x98>
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	f003 0301 	and.w	r3, r3, #1
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d00a      	beq.n	800cba4 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cb8e:	69bb      	ldr	r3, [r7, #24]
 800cb90:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d105      	bne.n	800cba4 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	4798      	blx	r3
    handled = 1UL;
 800cba0:	2301      	movs	r3, #1
 800cba2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800cba4:	69bb      	ldr	r3, [r7, #24]
 800cba6:	f003 0320 	and.w	r3, r3, #32
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d10f      	bne.n	800cbce <HAL_SPI_IRQHandler+0xc2>
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	f003 0302 	and.w	r3, r3, #2
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d00a      	beq.n	800cbce <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d105      	bne.n	800cbce <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	4798      	blx	r3
    handled = 1UL;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800cbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	f040 816f 	bne.w	800ceb4 <HAL_SPI_IRQHandler+0x3a8>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	f003 0308 	and.w	r3, r3, #8
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f000 80a0 	beq.w	800cd22 <HAL_SPI_IRQHandler+0x216>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	699a      	ldr	r2, [r3, #24]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f042 0208 	orr.w	r2, r2, #8
 800cbf0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	699a      	ldr	r2, [r3, #24]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f042 0210 	orr.w	r2, r2, #16
 800cc00:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	699a      	ldr	r2, [r3, #24]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc10:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	691a      	ldr	r2, [r3, #16]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f022 0208 	bic.w	r2, r2, #8
 800cc20:	611a      	str	r2, [r3, #16]

    /* DMA Normal Mode */
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00f      	beq.n	800cc4c <HAL_SPI_IRQHandler+0x140>
 800cc2c:	7cfb      	ldrb	r3, [r7, #19]
 800cc2e:	2b04      	cmp	r3, #4
 800cc30:	d004      	beq.n	800cc3c <HAL_SPI_IRQHandler+0x130>
        ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc36:	69db      	ldr	r3, [r3, #28]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d007      	beq.n	800cc4c <HAL_SPI_IRQHandler+0x140>
 800cc3c:	7cfb      	ldrb	r3, [r7, #19]
 800cc3e:	2b03      	cmp	r3, #3
 800cc40:	d059      	beq.n	800ccf6 <HAL_SPI_IRQHandler+0x1ea>
        ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cc46:	69db      	ldr	r3, [r3, #28]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d154      	bne.n	800ccf6 <HAL_SPI_IRQHandler+0x1ea>
    {
      /* For the IT based receive extra polling maybe required for last packet */
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d13d      	bne.n	800ccd6 <HAL_SPI_IRQHandler+0x1ca>
      {
        /* Pooling remaining data */
        while (hspi->RxXferCount != 0UL)
 800cc5a:	e036      	b.n	800ccca <HAL_SPI_IRQHandler+0x1be>
        {
          /* Receive data in 32 Bit mode */
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	68db      	ldr	r3, [r3, #12]
 800cc60:	2b0f      	cmp	r3, #15
 800cc62:	d90b      	bls.n	800cc7c <HAL_SPI_IRQHandler+0x170>
          {
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cc6e:	601a      	str	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc74:	1d1a      	adds	r2, r3, #4
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	665a      	str	r2, [r3, #100]	; 0x64
 800cc7a:	e01d      	b.n	800ccb8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 16 Bit mode */
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	2b07      	cmp	r3, #7
 800cc82:	d90b      	bls.n	800cc9c <HAL_SPI_IRQHandler+0x190>
          {
#if defined (__GNUC__)
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	8812      	ldrh	r2, [r2, #0]
 800cc8c:	b292      	uxth	r2, r2
 800cc8e:	801a      	strh	r2, [r3, #0]
#else
            *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
            hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc94:	1c9a      	adds	r2, r3, #2
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	665a      	str	r2, [r3, #100]	; 0x64
 800cc9a:	e00d      	b.n	800ccb8 <HAL_SPI_IRQHandler+0x1ac>
          }
          /* Receive data in 8 Bit mode */
          else
          {
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cca8:	7812      	ldrb	r2, [r2, #0]
 800ccaa:	b2d2      	uxtb	r2, r2
 800ccac:	701a      	strb	r2, [r3, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccb2:	1c5a      	adds	r2, r3, #1
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	665a      	str	r2, [r3, #100]	; 0x64
          }

          hspi->RxXferCount--;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	3b01      	subs	r3, #1
 800ccc2:	b29a      	uxth	r2, r3
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ccd0:	b29b      	uxth	r3, r3
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d1c2      	bne.n	800cc5c <HAL_SPI_IRQHandler+0x150>
        }
      }

      /* Call SPI Standard close procedure */
      SPI_CloseTransfer(hspi);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 f93a 	bl	800cf50 <SPI_CloseTransfer>

      hspi->State = HAL_SPI_STATE_READY;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2201      	movs	r2, #1
 800cce0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d003      	beq.n	800ccf6 <HAL_SPI_IRQHandler+0x1ea>
      {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 f90a 	bl	800cf08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
        return;
 800ccf4:	e0e3      	b.n	800cebe <HAL_SPI_IRQHandler+0x3b2>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ccf6:	7cfb      	ldrb	r3, [r7, #19]
 800ccf8:	2b05      	cmp	r3, #5
 800ccfa:	d103      	bne.n	800cd04 <HAL_SPI_IRQHandler+0x1f8>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 f8f9 	bl	800cef4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800cd02:	e0d9      	b.n	800ceb8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800cd04:	7cfb      	ldrb	r3, [r7, #19]
 800cd06:	2b04      	cmp	r3, #4
 800cd08:	d103      	bne.n	800cd12 <HAL_SPI_IRQHandler+0x206>
      HAL_SPI_RxCpltCallback(hspi);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 f8e8 	bl	800cee0 <HAL_SPI_RxCpltCallback>
    return;
 800cd10:	e0d2      	b.n	800ceb8 <HAL_SPI_IRQHandler+0x3ac>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800cd12:	7cfb      	ldrb	r3, [r7, #19]
 800cd14:	2b03      	cmp	r3, #3
 800cd16:	f040 80cf 	bne.w	800ceb8 <HAL_SPI_IRQHandler+0x3ac>
      HAL_SPI_TxCpltCallback(hspi);
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 f8d6 	bl	800cecc <HAL_SPI_TxCpltCallback>
    return;
 800cd20:	e0ca      	b.n	800ceb8 <HAL_SPI_IRQHandler+0x3ac>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d00d      	beq.n	800cd48 <HAL_SPI_IRQHandler+0x23c>
 800cd2c:	6a3b      	ldr	r3, [r7, #32]
 800cd2e:	f003 0308 	and.w	r3, r3, #8
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d008      	beq.n	800cd48 <HAL_SPI_IRQHandler+0x23c>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	699a      	ldr	r2, [r3, #24]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd44:	619a      	str	r2, [r3, #24]

    return;
 800cd46:	e0ba      	b.n	800cebe <HAL_SPI_IRQHandler+0x3b2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800cd48:	69bb      	ldr	r3, [r7, #24]
 800cd4a:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	f000 80b5 	beq.w	800cebe <HAL_SPI_IRQHandler+0x3b2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800cd54:	69bb      	ldr	r3, [r7, #24]
 800cd56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d00f      	beq.n	800cd7e <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd64:	f043 0204 	orr.w	r2, r3, #4
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	699a      	ldr	r2, [r3, #24]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd7c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d00f      	beq.n	800cda8 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd8e:	f043 0201 	orr.w	r2, r3, #1
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	699a      	ldr	r2, [r3, #24]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cda6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800cda8:	69bb      	ldr	r3, [r7, #24]
 800cdaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00f      	beq.n	800cdd2 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdb8:	f043 0208 	orr.w	r2, r3, #8
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	699a      	ldr	r2, [r3, #24]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cdd0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	f003 0320 	and.w	r3, r3, #32
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d00f      	beq.n	800cdfc <HAL_SPI_IRQHandler+0x2f0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cde2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	699a      	ldr	r2, [r3, #24]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f042 0220 	orr.w	r2, r2, #32
 800cdfa:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d05a      	beq.n	800cebc <HAL_SPI_IRQHandler+0x3b0>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	f022 0201 	bic.w	r2, r2, #1
 800ce14:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	6919      	ldr	r1, [r3, #16]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	4b28      	ldr	r3, [pc, #160]	; (800cec4 <HAL_SPI_IRQHandler+0x3b8>)
 800ce22:	400b      	ands	r3, r1
 800ce24:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ce2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ce30:	d138      	bne.n	800cea4 <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	689a      	ldr	r2, [r3, #8]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ce40:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d013      	beq.n	800ce72 <HAL_SPI_IRQHandler+0x366>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce4e:	4a1e      	ldr	r2, [pc, #120]	; (800cec8 <HAL_SPI_IRQHandler+0x3bc>)
 800ce50:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7fb faba 	bl	80083d0 <HAL_DMA_Abort_IT>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d007      	beq.n	800ce72 <HAL_SPI_IRQHandler+0x366>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d020      	beq.n	800cebc <HAL_SPI_IRQHandler+0x3b0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce7e:	4a12      	ldr	r2, [pc, #72]	; (800cec8 <HAL_SPI_IRQHandler+0x3bc>)
 800ce80:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7fb faa2 	bl	80083d0 <HAL_DMA_Abort_IT>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d014      	beq.n	800cebc <HAL_SPI_IRQHandler+0x3b0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cea2:	e00b      	b.n	800cebc <HAL_SPI_IRQHandler+0x3b0>
        hspi->State = HAL_SPI_STATE_READY;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2201      	movs	r2, #1
 800cea8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 f82b 	bl	800cf08 <HAL_SPI_ErrorCallback>
    return;
 800ceb2:	e003      	b.n	800cebc <HAL_SPI_IRQHandler+0x3b0>
    return;
 800ceb4:	bf00      	nop
 800ceb6:	e002      	b.n	800cebe <HAL_SPI_IRQHandler+0x3b2>
    return;
 800ceb8:	bf00      	nop
 800ceba:	e000      	b.n	800cebe <HAL_SPI_IRQHandler+0x3b2>
    return;
 800cebc:	bf00      	nop
  }
}
 800cebe:	3728      	adds	r7, #40	; 0x28
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	fffffc94 	.word	0xfffffc94
 800cec8:	0800cf1d 	.word	0x0800cf1d

0800cecc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800ced4:	bf00      	nop
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr

0800cee0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800cee8:	bf00      	nop
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b083      	sub	sp, #12
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800cefc:	bf00      	nop
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cf10:	bf00      	nop
 800cf12:	370c      	adds	r7, #12
 800cf14:	46bd      	mov	sp, r7
 800cf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1a:	4770      	bx	lr

0800cf1c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf28:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2200      	movs	r2, #0
 800cf36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f7ff ffe0 	bl	800cf08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cf48:	bf00      	nop
 800cf4a:	3710      	adds	r7, #16
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b085      	sub	sp, #20
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	695b      	ldr	r3, [r3, #20]
 800cf5e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	699a      	ldr	r2, [r3, #24]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f042 0208 	orr.w	r2, r2, #8
 800cf6e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	699a      	ldr	r2, [r3, #24]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f042 0210 	orr.w	r2, r2, #16
 800cf7e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	681a      	ldr	r2, [r3, #0]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f022 0201 	bic.w	r2, r2, #1
 800cf8e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	6919      	ldr	r1, [r3, #16]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	4b3c      	ldr	r3, [pc, #240]	; (800d08c <SPI_CloseTransfer+0x13c>)
 800cf9c:	400b      	ands	r3, r1
 800cf9e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	689a      	ldr	r2, [r3, #8]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800cfae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	2b04      	cmp	r3, #4
 800cfba:	d014      	beq.n	800cfe6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f003 0320 	and.w	r3, r3, #32
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00f      	beq.n	800cfe6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	699a      	ldr	r2, [r3, #24]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f042 0220 	orr.w	r2, r2, #32
 800cfe4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cfec:	b2db      	uxtb	r3, r3
 800cfee:	2b03      	cmp	r3, #3
 800cff0:	d014      	beq.n	800d01c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d00f      	beq.n	800d01c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d002:	f043 0204 	orr.w	r2, r3, #4
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	699a      	ldr	r2, [r3, #24]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d01a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d022:	2b00      	cmp	r3, #0
 800d024:	d00f      	beq.n	800d046 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d02c:	f043 0201 	orr.w	r2, r3, #1
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	699a      	ldr	r2, [r3, #24]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d044:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d00f      	beq.n	800d070 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d056:	f043 0208 	orr.w	r2, r3, #8
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	699a      	ldr	r2, [r3, #24]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d06e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d080:	bf00      	nop
 800d082:	3714      	adds	r7, #20
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr
 800d08c:	fffffc90 	.word	0xfffffc90

0800d090 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d090:	b480      	push	{r7}
 800d092:	b085      	sub	sp, #20
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d09c:	095b      	lsrs	r3, r3, #5
 800d09e:	3301      	adds	r3, #1
 800d0a0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	68db      	ldr	r3, [r3, #12]
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	3307      	adds	r3, #7
 800d0ae:	08db      	lsrs	r3, r3, #3
 800d0b0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	fb02 f303 	mul.w	r3, r2, r3
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3714      	adds	r7, #20
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr

0800d0c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	b082      	sub	sp, #8
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d101      	bne.n	800d0d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	e049      	b.n	800d16c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d106      	bne.n	800d0f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f7f8 fda3 	bl	8005c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2202      	movs	r2, #2
 800d0f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	3304      	adds	r3, #4
 800d102:	4619      	mov	r1, r3
 800d104:	4610      	mov	r0, r2
 800d106:	f000 fed3 	bl	800deb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2201      	movs	r2, #1
 800d10e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	2201      	movs	r2, #1
 800d116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2201      	movs	r2, #1
 800d11e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2201      	movs	r2, #1
 800d126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2201      	movs	r2, #1
 800d12e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2201      	movs	r2, #1
 800d136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2201      	movs	r2, #1
 800d13e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2201      	movs	r2, #1
 800d146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2201      	movs	r2, #1
 800d14e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2201      	movs	r2, #1
 800d156:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2201      	movs	r2, #1
 800d15e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2201      	movs	r2, #1
 800d166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d16a:	2300      	movs	r3, #0
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d174:	b480      	push	{r7}
 800d176:	b085      	sub	sp, #20
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d182:	b2db      	uxtb	r3, r3
 800d184:	2b01      	cmp	r3, #1
 800d186:	d001      	beq.n	800d18c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d188:	2301      	movs	r3, #1
 800d18a:	e054      	b.n	800d236 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2202      	movs	r2, #2
 800d190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	68da      	ldr	r2, [r3, #12]
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f042 0201 	orr.w	r2, r2, #1
 800d1a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a26      	ldr	r2, [pc, #152]	; (800d244 <HAL_TIM_Base_Start_IT+0xd0>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d022      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0x80>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1b6:	d01d      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0x80>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a22      	ldr	r2, [pc, #136]	; (800d248 <HAL_TIM_Base_Start_IT+0xd4>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d018      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0x80>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a21      	ldr	r2, [pc, #132]	; (800d24c <HAL_TIM_Base_Start_IT+0xd8>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d013      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0x80>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a1f      	ldr	r2, [pc, #124]	; (800d250 <HAL_TIM_Base_Start_IT+0xdc>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d00e      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0x80>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a1e      	ldr	r2, [pc, #120]	; (800d254 <HAL_TIM_Base_Start_IT+0xe0>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d009      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0x80>
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4a1c      	ldr	r2, [pc, #112]	; (800d258 <HAL_TIM_Base_Start_IT+0xe4>)
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	d004      	beq.n	800d1f4 <HAL_TIM_Base_Start_IT+0x80>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a1b      	ldr	r2, [pc, #108]	; (800d25c <HAL_TIM_Base_Start_IT+0xe8>)
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d115      	bne.n	800d220 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	689a      	ldr	r2, [r3, #8]
 800d1fa:	4b19      	ldr	r3, [pc, #100]	; (800d260 <HAL_TIM_Base_Start_IT+0xec>)
 800d1fc:	4013      	ands	r3, r2
 800d1fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2b06      	cmp	r3, #6
 800d204:	d015      	beq.n	800d232 <HAL_TIM_Base_Start_IT+0xbe>
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d20c:	d011      	beq.n	800d232 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f042 0201 	orr.w	r2, r2, #1
 800d21c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d21e:	e008      	b.n	800d232 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	f042 0201 	orr.w	r2, r2, #1
 800d22e:	601a      	str	r2, [r3, #0]
 800d230:	e000      	b.n	800d234 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d232:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d234:	2300      	movs	r3, #0
}
 800d236:	4618      	mov	r0, r3
 800d238:	3714      	adds	r7, #20
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop
 800d244:	40010000 	.word	0x40010000
 800d248:	40000400 	.word	0x40000400
 800d24c:	40000800 	.word	0x40000800
 800d250:	40000c00 	.word	0x40000c00
 800d254:	40010400 	.word	0x40010400
 800d258:	40001800 	.word	0x40001800
 800d25c:	40014000 	.word	0x40014000
 800d260:	00010007 	.word	0x00010007

0800d264 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d264:	b480      	push	{r7}
 800d266:	b083      	sub	sp, #12
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	68da      	ldr	r2, [r3, #12]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f022 0201 	bic.w	r2, r2, #1
 800d27a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	6a1a      	ldr	r2, [r3, #32]
 800d282:	f241 1311 	movw	r3, #4369	; 0x1111
 800d286:	4013      	ands	r3, r2
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d10f      	bne.n	800d2ac <HAL_TIM_Base_Stop_IT+0x48>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	6a1a      	ldr	r2, [r3, #32]
 800d292:	f240 4344 	movw	r3, #1092	; 0x444
 800d296:	4013      	ands	r3, r2
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d107      	bne.n	800d2ac <HAL_TIM_Base_Stop_IT+0x48>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f022 0201 	bic.w	r2, r2, #1
 800d2aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	370c      	adds	r7, #12
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr

0800d2c2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d2c2:	b580      	push	{r7, lr}
 800d2c4:	b082      	sub	sp, #8
 800d2c6:	af00      	add	r7, sp, #0
 800d2c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d101      	bne.n	800d2d4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	e049      	b.n	800d368 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d106      	bne.n	800d2ee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 f841 	bl	800d370 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2202      	movs	r2, #2
 800d2f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	3304      	adds	r3, #4
 800d2fe:	4619      	mov	r1, r3
 800d300:	4610      	mov	r0, r2
 800d302:	f000 fdd5 	bl	800deb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2201      	movs	r2, #1
 800d30a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	2201      	movs	r2, #1
 800d312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2201      	movs	r2, #1
 800d31a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2201      	movs	r2, #1
 800d322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2201      	movs	r2, #1
 800d32a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2201      	movs	r2, #1
 800d332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2201      	movs	r2, #1
 800d33a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2201      	movs	r2, #1
 800d342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2201      	movs	r2, #1
 800d34a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2201      	movs	r2, #1
 800d352:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2201      	movs	r2, #1
 800d35a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2201      	movs	r2, #1
 800d362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d366:	2300      	movs	r3, #0
}
 800d368:	4618      	mov	r0, r3
 800d36a:	3708      	adds	r7, #8
 800d36c:	46bd      	mov	sp, r7
 800d36e:	bd80      	pop	{r7, pc}

0800d370 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d378:	bf00      	nop
 800d37a:	370c      	adds	r7, #12
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d109      	bne.n	800d3a8 <HAL_TIM_PWM_Start+0x24>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d39a:	b2db      	uxtb	r3, r3
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	bf14      	ite	ne
 800d3a0:	2301      	movne	r3, #1
 800d3a2:	2300      	moveq	r3, #0
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	e03c      	b.n	800d422 <HAL_TIM_PWM_Start+0x9e>
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	2b04      	cmp	r3, #4
 800d3ac:	d109      	bne.n	800d3c2 <HAL_TIM_PWM_Start+0x3e>
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d3b4:	b2db      	uxtb	r3, r3
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	bf14      	ite	ne
 800d3ba:	2301      	movne	r3, #1
 800d3bc:	2300      	moveq	r3, #0
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	e02f      	b.n	800d422 <HAL_TIM_PWM_Start+0x9e>
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	2b08      	cmp	r3, #8
 800d3c6:	d109      	bne.n	800d3dc <HAL_TIM_PWM_Start+0x58>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	2b01      	cmp	r3, #1
 800d3d2:	bf14      	ite	ne
 800d3d4:	2301      	movne	r3, #1
 800d3d6:	2300      	moveq	r3, #0
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	e022      	b.n	800d422 <HAL_TIM_PWM_Start+0x9e>
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	2b0c      	cmp	r3, #12
 800d3e0:	d109      	bne.n	800d3f6 <HAL_TIM_PWM_Start+0x72>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	bf14      	ite	ne
 800d3ee:	2301      	movne	r3, #1
 800d3f0:	2300      	moveq	r3, #0
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	e015      	b.n	800d422 <HAL_TIM_PWM_Start+0x9e>
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	2b10      	cmp	r3, #16
 800d3fa:	d109      	bne.n	800d410 <HAL_TIM_PWM_Start+0x8c>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d402:	b2db      	uxtb	r3, r3
 800d404:	2b01      	cmp	r3, #1
 800d406:	bf14      	ite	ne
 800d408:	2301      	movne	r3, #1
 800d40a:	2300      	moveq	r3, #0
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	e008      	b.n	800d422 <HAL_TIM_PWM_Start+0x9e>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d416:	b2db      	uxtb	r3, r3
 800d418:	2b01      	cmp	r3, #1
 800d41a:	bf14      	ite	ne
 800d41c:	2301      	movne	r3, #1
 800d41e:	2300      	moveq	r3, #0
 800d420:	b2db      	uxtb	r3, r3
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d426:	2301      	movs	r3, #1
 800d428:	e0a1      	b.n	800d56e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d104      	bne.n	800d43a <HAL_TIM_PWM_Start+0xb6>
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2202      	movs	r2, #2
 800d434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d438:	e023      	b.n	800d482 <HAL_TIM_PWM_Start+0xfe>
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	2b04      	cmp	r3, #4
 800d43e:	d104      	bne.n	800d44a <HAL_TIM_PWM_Start+0xc6>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2202      	movs	r2, #2
 800d444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d448:	e01b      	b.n	800d482 <HAL_TIM_PWM_Start+0xfe>
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	2b08      	cmp	r3, #8
 800d44e:	d104      	bne.n	800d45a <HAL_TIM_PWM_Start+0xd6>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2202      	movs	r2, #2
 800d454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d458:	e013      	b.n	800d482 <HAL_TIM_PWM_Start+0xfe>
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	2b0c      	cmp	r3, #12
 800d45e:	d104      	bne.n	800d46a <HAL_TIM_PWM_Start+0xe6>
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2202      	movs	r2, #2
 800d464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d468:	e00b      	b.n	800d482 <HAL_TIM_PWM_Start+0xfe>
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	2b10      	cmp	r3, #16
 800d46e:	d104      	bne.n	800d47a <HAL_TIM_PWM_Start+0xf6>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2202      	movs	r2, #2
 800d474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d478:	e003      	b.n	800d482 <HAL_TIM_PWM_Start+0xfe>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2202      	movs	r2, #2
 800d47e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	2201      	movs	r2, #1
 800d488:	6839      	ldr	r1, [r7, #0]
 800d48a:	4618      	mov	r0, r3
 800d48c:	f001 f91e 	bl	800e6cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	4a38      	ldr	r2, [pc, #224]	; (800d578 <HAL_TIM_PWM_Start+0x1f4>)
 800d496:	4293      	cmp	r3, r2
 800d498:	d013      	beq.n	800d4c2 <HAL_TIM_PWM_Start+0x13e>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4a37      	ldr	r2, [pc, #220]	; (800d57c <HAL_TIM_PWM_Start+0x1f8>)
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d00e      	beq.n	800d4c2 <HAL_TIM_PWM_Start+0x13e>
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	4a35      	ldr	r2, [pc, #212]	; (800d580 <HAL_TIM_PWM_Start+0x1fc>)
 800d4aa:	4293      	cmp	r3, r2
 800d4ac:	d009      	beq.n	800d4c2 <HAL_TIM_PWM_Start+0x13e>
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	4a34      	ldr	r2, [pc, #208]	; (800d584 <HAL_TIM_PWM_Start+0x200>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d004      	beq.n	800d4c2 <HAL_TIM_PWM_Start+0x13e>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4a32      	ldr	r2, [pc, #200]	; (800d588 <HAL_TIM_PWM_Start+0x204>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d101      	bne.n	800d4c6 <HAL_TIM_PWM_Start+0x142>
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	e000      	b.n	800d4c8 <HAL_TIM_PWM_Start+0x144>
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d007      	beq.n	800d4dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d4da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4a25      	ldr	r2, [pc, #148]	; (800d578 <HAL_TIM_PWM_Start+0x1f4>)
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	d022      	beq.n	800d52c <HAL_TIM_PWM_Start+0x1a8>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4ee:	d01d      	beq.n	800d52c <HAL_TIM_PWM_Start+0x1a8>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a25      	ldr	r2, [pc, #148]	; (800d58c <HAL_TIM_PWM_Start+0x208>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d018      	beq.n	800d52c <HAL_TIM_PWM_Start+0x1a8>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	4a24      	ldr	r2, [pc, #144]	; (800d590 <HAL_TIM_PWM_Start+0x20c>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d013      	beq.n	800d52c <HAL_TIM_PWM_Start+0x1a8>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	4a22      	ldr	r2, [pc, #136]	; (800d594 <HAL_TIM_PWM_Start+0x210>)
 800d50a:	4293      	cmp	r3, r2
 800d50c:	d00e      	beq.n	800d52c <HAL_TIM_PWM_Start+0x1a8>
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4a1a      	ldr	r2, [pc, #104]	; (800d57c <HAL_TIM_PWM_Start+0x1f8>)
 800d514:	4293      	cmp	r3, r2
 800d516:	d009      	beq.n	800d52c <HAL_TIM_PWM_Start+0x1a8>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a1e      	ldr	r2, [pc, #120]	; (800d598 <HAL_TIM_PWM_Start+0x214>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d004      	beq.n	800d52c <HAL_TIM_PWM_Start+0x1a8>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	4a16      	ldr	r2, [pc, #88]	; (800d580 <HAL_TIM_PWM_Start+0x1fc>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	d115      	bne.n	800d558 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	689a      	ldr	r2, [r3, #8]
 800d532:	4b1a      	ldr	r3, [pc, #104]	; (800d59c <HAL_TIM_PWM_Start+0x218>)
 800d534:	4013      	ands	r3, r2
 800d536:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2b06      	cmp	r3, #6
 800d53c:	d015      	beq.n	800d56a <HAL_TIM_PWM_Start+0x1e6>
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d544:	d011      	beq.n	800d56a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f042 0201 	orr.w	r2, r2, #1
 800d554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d556:	e008      	b.n	800d56a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	681a      	ldr	r2, [r3, #0]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	f042 0201 	orr.w	r2, r2, #1
 800d566:	601a      	str	r2, [r3, #0]
 800d568:	e000      	b.n	800d56c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d56a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3710      	adds	r7, #16
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	40010000 	.word	0x40010000
 800d57c:	40010400 	.word	0x40010400
 800d580:	40014000 	.word	0x40014000
 800d584:	40014400 	.word	0x40014400
 800d588:	40014800 	.word	0x40014800
 800d58c:	40000400 	.word	0x40000400
 800d590:	40000800 	.word	0x40000800
 800d594:	40000c00 	.word	0x40000c00
 800d598:	40001800 	.word	0x40001800
 800d59c:	00010007 	.word	0x00010007

0800d5a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b086      	sub	sp, #24
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d101      	bne.n	800d5b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	e08f      	b.n	800d6d4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5ba:	b2db      	uxtb	r3, r3
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d106      	bne.n	800d5ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f7f8 fca7 	bl	8005f1c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2202      	movs	r2, #2
 800d5d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	6899      	ldr	r1, [r3, #8]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681a      	ldr	r2, [r3, #0]
 800d5e0:	4b3e      	ldr	r3, [pc, #248]	; (800d6dc <HAL_TIM_Encoder_Init+0x13c>)
 800d5e2:	400b      	ands	r3, r1
 800d5e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	3304      	adds	r3, #4
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	4610      	mov	r0, r2
 800d5f2:	f000 fc5d 	bl	800deb0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	699b      	ldr	r3, [r3, #24]
 800d604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	6a1b      	ldr	r3, [r3, #32]
 800d60c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	697a      	ldr	r2, [r7, #20]
 800d614:	4313      	orrs	r3, r2
 800d616:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d618:	693a      	ldr	r2, [r7, #16]
 800d61a:	4b31      	ldr	r3, [pc, #196]	; (800d6e0 <HAL_TIM_Encoder_Init+0x140>)
 800d61c:	4013      	ands	r3, r2
 800d61e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	689a      	ldr	r2, [r3, #8]
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	699b      	ldr	r3, [r3, #24]
 800d628:	021b      	lsls	r3, r3, #8
 800d62a:	4313      	orrs	r3, r2
 800d62c:	693a      	ldr	r2, [r7, #16]
 800d62e:	4313      	orrs	r3, r2
 800d630:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d632:	693a      	ldr	r2, [r7, #16]
 800d634:	4b2b      	ldr	r3, [pc, #172]	; (800d6e4 <HAL_TIM_Encoder_Init+0x144>)
 800d636:	4013      	ands	r3, r2
 800d638:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d63a:	693a      	ldr	r2, [r7, #16]
 800d63c:	4b2a      	ldr	r3, [pc, #168]	; (800d6e8 <HAL_TIM_Encoder_Init+0x148>)
 800d63e:	4013      	ands	r3, r2
 800d640:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	68da      	ldr	r2, [r3, #12]
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	69db      	ldr	r3, [r3, #28]
 800d64a:	021b      	lsls	r3, r3, #8
 800d64c:	4313      	orrs	r3, r2
 800d64e:	693a      	ldr	r2, [r7, #16]
 800d650:	4313      	orrs	r3, r2
 800d652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	691b      	ldr	r3, [r3, #16]
 800d658:	011a      	lsls	r2, r3, #4
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	6a1b      	ldr	r3, [r3, #32]
 800d65e:	031b      	lsls	r3, r3, #12
 800d660:	4313      	orrs	r3, r2
 800d662:	693a      	ldr	r2, [r7, #16]
 800d664:	4313      	orrs	r3, r2
 800d666:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d66e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d676:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	685a      	ldr	r2, [r3, #4]
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	695b      	ldr	r3, [r3, #20]
 800d680:	011b      	lsls	r3, r3, #4
 800d682:	4313      	orrs	r3, r2
 800d684:	68fa      	ldr	r2, [r7, #12]
 800d686:	4313      	orrs	r3, r2
 800d688:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	697a      	ldr	r2, [r7, #20]
 800d690:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	693a      	ldr	r2, [r7, #16]
 800d698:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	68fa      	ldr	r2, [r7, #12]
 800d6a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2201      	movs	r2, #1
 800d6b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2201      	movs	r2, #1
 800d6be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d6d2:	2300      	movs	r3, #0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3718      	adds	r7, #24
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	fffebff8 	.word	0xfffebff8
 800d6e0:	fffffcfc 	.word	0xfffffcfc
 800d6e4:	fffff3f3 	.word	0xfffff3f3
 800d6e8:	ffff0f0f 	.word	0xffff0f0f

0800d6ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d6fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d704:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d70c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d714:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d110      	bne.n	800d73e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d71c:	7bfb      	ldrb	r3, [r7, #15]
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d102      	bne.n	800d728 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d722:	7b7b      	ldrb	r3, [r7, #13]
 800d724:	2b01      	cmp	r3, #1
 800d726:	d001      	beq.n	800d72c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800d728:	2301      	movs	r3, #1
 800d72a:	e069      	b.n	800d800 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2202      	movs	r2, #2
 800d730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2202      	movs	r2, #2
 800d738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d73c:	e031      	b.n	800d7a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	2b04      	cmp	r3, #4
 800d742:	d110      	bne.n	800d766 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d744:	7bbb      	ldrb	r3, [r7, #14]
 800d746:	2b01      	cmp	r3, #1
 800d748:	d102      	bne.n	800d750 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d74a:	7b3b      	ldrb	r3, [r7, #12]
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d001      	beq.n	800d754 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800d750:	2301      	movs	r3, #1
 800d752:	e055      	b.n	800d800 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2202      	movs	r2, #2
 800d758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2202      	movs	r2, #2
 800d760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d764:	e01d      	b.n	800d7a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d766:	7bfb      	ldrb	r3, [r7, #15]
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d108      	bne.n	800d77e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d76c:	7bbb      	ldrb	r3, [r7, #14]
 800d76e:	2b01      	cmp	r3, #1
 800d770:	d105      	bne.n	800d77e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d772:	7b7b      	ldrb	r3, [r7, #13]
 800d774:	2b01      	cmp	r3, #1
 800d776:	d102      	bne.n	800d77e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d778:	7b3b      	ldrb	r3, [r7, #12]
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d001      	beq.n	800d782 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800d77e:	2301      	movs	r3, #1
 800d780:	e03e      	b.n	800d800 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2202      	movs	r2, #2
 800d786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2202      	movs	r2, #2
 800d78e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2202      	movs	r2, #2
 800d796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2202      	movs	r2, #2
 800d79e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d003      	beq.n	800d7b0 <HAL_TIM_Encoder_Start+0xc4>
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	2b04      	cmp	r3, #4
 800d7ac:	d008      	beq.n	800d7c0 <HAL_TIM_Encoder_Start+0xd4>
 800d7ae:	e00f      	b.n	800d7d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	2100      	movs	r1, #0
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f000 ff87 	bl	800e6cc <TIM_CCxChannelCmd>
      break;
 800d7be:	e016      	b.n	800d7ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	2104      	movs	r1, #4
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f000 ff7f 	bl	800e6cc <TIM_CCxChannelCmd>
      break;
 800d7ce:	e00e      	b.n	800d7ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	2100      	movs	r1, #0
 800d7d8:	4618      	mov	r0, r3
 800d7da:	f000 ff77 	bl	800e6cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	2104      	movs	r1, #4
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f000 ff70 	bl	800e6cc <TIM_CCxChannelCmd>
      break;
 800d7ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	681a      	ldr	r2, [r3, #0]
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f042 0201 	orr.w	r2, r2, #1
 800d7fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d7fe:	2300      	movs	r3, #0
}
 800d800:	4618      	mov	r0, r3
 800d802:	3710      	adds	r7, #16
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	691b      	ldr	r3, [r3, #16]
 800d816:	f003 0302 	and.w	r3, r3, #2
 800d81a:	2b02      	cmp	r3, #2
 800d81c:	d122      	bne.n	800d864 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	68db      	ldr	r3, [r3, #12]
 800d824:	f003 0302 	and.w	r3, r3, #2
 800d828:	2b02      	cmp	r3, #2
 800d82a:	d11b      	bne.n	800d864 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f06f 0202 	mvn.w	r2, #2
 800d834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2201      	movs	r2, #1
 800d83a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	699b      	ldr	r3, [r3, #24]
 800d842:	f003 0303 	and.w	r3, r3, #3
 800d846:	2b00      	cmp	r3, #0
 800d848:	d003      	beq.n	800d852 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 fb12 	bl	800de74 <HAL_TIM_IC_CaptureCallback>
 800d850:	e005      	b.n	800d85e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 fb04 	bl	800de60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 fb15 	bl	800de88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2200      	movs	r2, #0
 800d862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	691b      	ldr	r3, [r3, #16]
 800d86a:	f003 0304 	and.w	r3, r3, #4
 800d86e:	2b04      	cmp	r3, #4
 800d870:	d122      	bne.n	800d8b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	68db      	ldr	r3, [r3, #12]
 800d878:	f003 0304 	and.w	r3, r3, #4
 800d87c:	2b04      	cmp	r3, #4
 800d87e:	d11b      	bne.n	800d8b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	f06f 0204 	mvn.w	r2, #4
 800d888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2202      	movs	r2, #2
 800d88e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	699b      	ldr	r3, [r3, #24]
 800d896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d003      	beq.n	800d8a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f000 fae8 	bl	800de74 <HAL_TIM_IC_CaptureCallback>
 800d8a4:	e005      	b.n	800d8b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f000 fada 	bl	800de60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f000 faeb 	bl	800de88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	691b      	ldr	r3, [r3, #16]
 800d8be:	f003 0308 	and.w	r3, r3, #8
 800d8c2:	2b08      	cmp	r3, #8
 800d8c4:	d122      	bne.n	800d90c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	68db      	ldr	r3, [r3, #12]
 800d8cc:	f003 0308 	and.w	r3, r3, #8
 800d8d0:	2b08      	cmp	r3, #8
 800d8d2:	d11b      	bne.n	800d90c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f06f 0208 	mvn.w	r2, #8
 800d8dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2204      	movs	r2, #4
 800d8e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	69db      	ldr	r3, [r3, #28]
 800d8ea:	f003 0303 	and.w	r3, r3, #3
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d003      	beq.n	800d8fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 fabe 	bl	800de74 <HAL_TIM_IC_CaptureCallback>
 800d8f8:	e005      	b.n	800d906 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 fab0 	bl	800de60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 fac1 	bl	800de88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2200      	movs	r2, #0
 800d90a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	691b      	ldr	r3, [r3, #16]
 800d912:	f003 0310 	and.w	r3, r3, #16
 800d916:	2b10      	cmp	r3, #16
 800d918:	d122      	bne.n	800d960 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	68db      	ldr	r3, [r3, #12]
 800d920:	f003 0310 	and.w	r3, r3, #16
 800d924:	2b10      	cmp	r3, #16
 800d926:	d11b      	bne.n	800d960 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f06f 0210 	mvn.w	r2, #16
 800d930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2208      	movs	r2, #8
 800d936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	69db      	ldr	r3, [r3, #28]
 800d93e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d942:	2b00      	cmp	r3, #0
 800d944:	d003      	beq.n	800d94e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f000 fa94 	bl	800de74 <HAL_TIM_IC_CaptureCallback>
 800d94c:	e005      	b.n	800d95a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 fa86 	bl	800de60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 fa97 	bl	800de88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2200      	movs	r2, #0
 800d95e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	691b      	ldr	r3, [r3, #16]
 800d966:	f003 0301 	and.w	r3, r3, #1
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d10e      	bne.n	800d98c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	f003 0301 	and.w	r3, r3, #1
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d107      	bne.n	800d98c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f06f 0201 	mvn.w	r2, #1
 800d984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f7f5 fe86 	bl	8003698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	691b      	ldr	r3, [r3, #16]
 800d992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d996:	2b80      	cmp	r3, #128	; 0x80
 800d998:	d10e      	bne.n	800d9b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9a4:	2b80      	cmp	r3, #128	; 0x80
 800d9a6:	d107      	bne.n	800d9b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d9b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 ffc6 	bl	800e944 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	691b      	ldr	r3, [r3, #16]
 800d9be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9c6:	d10e      	bne.n	800d9e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9d2:	2b80      	cmp	r3, #128	; 0x80
 800d9d4:	d107      	bne.n	800d9e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d9de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 ffb9 	bl	800e958 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	691b      	ldr	r3, [r3, #16]
 800d9ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9f0:	2b40      	cmp	r3, #64	; 0x40
 800d9f2:	d10e      	bne.n	800da12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	68db      	ldr	r3, [r3, #12]
 800d9fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9fe:	2b40      	cmp	r3, #64	; 0x40
 800da00:	d107      	bne.n	800da12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800da0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 fa45 	bl	800de9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	691b      	ldr	r3, [r3, #16]
 800da18:	f003 0320 	and.w	r3, r3, #32
 800da1c:	2b20      	cmp	r3, #32
 800da1e:	d10e      	bne.n	800da3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	68db      	ldr	r3, [r3, #12]
 800da26:	f003 0320 	and.w	r3, r3, #32
 800da2a:	2b20      	cmp	r3, #32
 800da2c:	d107      	bne.n	800da3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f06f 0220 	mvn.w	r2, #32
 800da36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 ff79 	bl	800e930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800da3e:	bf00      	nop
 800da40:	3708      	adds	r7, #8
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
	...

0800da48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b086      	sub	sp, #24
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	60b9      	str	r1, [r7, #8]
 800da52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800da54:	2300      	movs	r3, #0
 800da56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d101      	bne.n	800da66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800da62:	2302      	movs	r3, #2
 800da64:	e0ff      	b.n	800dc66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2201      	movs	r2, #1
 800da6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2b14      	cmp	r3, #20
 800da72:	f200 80f0 	bhi.w	800dc56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800da76:	a201      	add	r2, pc, #4	; (adr r2, 800da7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800da78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da7c:	0800dad1 	.word	0x0800dad1
 800da80:	0800dc57 	.word	0x0800dc57
 800da84:	0800dc57 	.word	0x0800dc57
 800da88:	0800dc57 	.word	0x0800dc57
 800da8c:	0800db11 	.word	0x0800db11
 800da90:	0800dc57 	.word	0x0800dc57
 800da94:	0800dc57 	.word	0x0800dc57
 800da98:	0800dc57 	.word	0x0800dc57
 800da9c:	0800db53 	.word	0x0800db53
 800daa0:	0800dc57 	.word	0x0800dc57
 800daa4:	0800dc57 	.word	0x0800dc57
 800daa8:	0800dc57 	.word	0x0800dc57
 800daac:	0800db93 	.word	0x0800db93
 800dab0:	0800dc57 	.word	0x0800dc57
 800dab4:	0800dc57 	.word	0x0800dc57
 800dab8:	0800dc57 	.word	0x0800dc57
 800dabc:	0800dbd5 	.word	0x0800dbd5
 800dac0:	0800dc57 	.word	0x0800dc57
 800dac4:	0800dc57 	.word	0x0800dc57
 800dac8:	0800dc57 	.word	0x0800dc57
 800dacc:	0800dc15 	.word	0x0800dc15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	68b9      	ldr	r1, [r7, #8]
 800dad6:	4618      	mov	r0, r3
 800dad8:	f000 fa84 	bl	800dfe4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	699a      	ldr	r2, [r3, #24]
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f042 0208 	orr.w	r2, r2, #8
 800daea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	699a      	ldr	r2, [r3, #24]
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f022 0204 	bic.w	r2, r2, #4
 800dafa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	6999      	ldr	r1, [r3, #24]
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	691a      	ldr	r2, [r3, #16]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	430a      	orrs	r2, r1
 800db0c:	619a      	str	r2, [r3, #24]
      break;
 800db0e:	e0a5      	b.n	800dc5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	68b9      	ldr	r1, [r7, #8]
 800db16:	4618      	mov	r0, r3
 800db18:	f000 faf4 	bl	800e104 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	699a      	ldr	r2, [r3, #24]
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	699a      	ldr	r2, [r3, #24]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	6999      	ldr	r1, [r3, #24]
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	691b      	ldr	r3, [r3, #16]
 800db46:	021a      	lsls	r2, r3, #8
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	430a      	orrs	r2, r1
 800db4e:	619a      	str	r2, [r3, #24]
      break;
 800db50:	e084      	b.n	800dc5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	68b9      	ldr	r1, [r7, #8]
 800db58:	4618      	mov	r0, r3
 800db5a:	f000 fb5d 	bl	800e218 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	69da      	ldr	r2, [r3, #28]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f042 0208 	orr.w	r2, r2, #8
 800db6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	69da      	ldr	r2, [r3, #28]
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f022 0204 	bic.w	r2, r2, #4
 800db7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	69d9      	ldr	r1, [r3, #28]
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	691a      	ldr	r2, [r3, #16]
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	430a      	orrs	r2, r1
 800db8e:	61da      	str	r2, [r3, #28]
      break;
 800db90:	e064      	b.n	800dc5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	68b9      	ldr	r1, [r7, #8]
 800db98:	4618      	mov	r0, r3
 800db9a:	f000 fbc5 	bl	800e328 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	69da      	ldr	r2, [r3, #28]
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dbac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	69da      	ldr	r2, [r3, #28]
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dbbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	69d9      	ldr	r1, [r3, #28]
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	691b      	ldr	r3, [r3, #16]
 800dbc8:	021a      	lsls	r2, r3, #8
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	430a      	orrs	r2, r1
 800dbd0:	61da      	str	r2, [r3, #28]
      break;
 800dbd2:	e043      	b.n	800dc5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	68b9      	ldr	r1, [r7, #8]
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f000 fc0e 	bl	800e3fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f042 0208 	orr.w	r2, r2, #8
 800dbee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f022 0204 	bic.w	r2, r2, #4
 800dbfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	691a      	ldr	r2, [r3, #16]
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	430a      	orrs	r2, r1
 800dc10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dc12:	e023      	b.n	800dc5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	68b9      	ldr	r1, [r7, #8]
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f000 fc52 	bl	800e4c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	691b      	ldr	r3, [r3, #16]
 800dc4a:	021a      	lsls	r2, r3, #8
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	430a      	orrs	r2, r1
 800dc52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dc54:	e002      	b.n	800dc5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800dc56:	2301      	movs	r3, #1
 800dc58:	75fb      	strb	r3, [r7, #23]
      break;
 800dc5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dc64:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3718      	adds	r7, #24
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop

0800dc70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d101      	bne.n	800dc8c <HAL_TIM_ConfigClockSource+0x1c>
 800dc88:	2302      	movs	r3, #2
 800dc8a:	e0dc      	b.n	800de46 <HAL_TIM_ConfigClockSource+0x1d6>
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2201      	movs	r2, #1
 800dc90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2202      	movs	r2, #2
 800dc98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	689b      	ldr	r3, [r3, #8]
 800dca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dca4:	68ba      	ldr	r2, [r7, #8]
 800dca6:	4b6a      	ldr	r3, [pc, #424]	; (800de50 <HAL_TIM_ConfigClockSource+0x1e0>)
 800dca8:	4013      	ands	r3, r2
 800dcaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dcb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	68ba      	ldr	r2, [r7, #8]
 800dcba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4a64      	ldr	r2, [pc, #400]	; (800de54 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	f000 80a9 	beq.w	800de1a <HAL_TIM_ConfigClockSource+0x1aa>
 800dcc8:	4a62      	ldr	r2, [pc, #392]	; (800de54 <HAL_TIM_ConfigClockSource+0x1e4>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	f200 80ae 	bhi.w	800de2c <HAL_TIM_ConfigClockSource+0x1bc>
 800dcd0:	4a61      	ldr	r2, [pc, #388]	; (800de58 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	f000 80a1 	beq.w	800de1a <HAL_TIM_ConfigClockSource+0x1aa>
 800dcd8:	4a5f      	ldr	r2, [pc, #380]	; (800de58 <HAL_TIM_ConfigClockSource+0x1e8>)
 800dcda:	4293      	cmp	r3, r2
 800dcdc:	f200 80a6 	bhi.w	800de2c <HAL_TIM_ConfigClockSource+0x1bc>
 800dce0:	4a5e      	ldr	r2, [pc, #376]	; (800de5c <HAL_TIM_ConfigClockSource+0x1ec>)
 800dce2:	4293      	cmp	r3, r2
 800dce4:	f000 8099 	beq.w	800de1a <HAL_TIM_ConfigClockSource+0x1aa>
 800dce8:	4a5c      	ldr	r2, [pc, #368]	; (800de5c <HAL_TIM_ConfigClockSource+0x1ec>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	f200 809e 	bhi.w	800de2c <HAL_TIM_ConfigClockSource+0x1bc>
 800dcf0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dcf4:	f000 8091 	beq.w	800de1a <HAL_TIM_ConfigClockSource+0x1aa>
 800dcf8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dcfc:	f200 8096 	bhi.w	800de2c <HAL_TIM_ConfigClockSource+0x1bc>
 800dd00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd04:	f000 8089 	beq.w	800de1a <HAL_TIM_ConfigClockSource+0x1aa>
 800dd08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd0c:	f200 808e 	bhi.w	800de2c <HAL_TIM_ConfigClockSource+0x1bc>
 800dd10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dd14:	d03e      	beq.n	800dd94 <HAL_TIM_ConfigClockSource+0x124>
 800dd16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dd1a:	f200 8087 	bhi.w	800de2c <HAL_TIM_ConfigClockSource+0x1bc>
 800dd1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd22:	f000 8086 	beq.w	800de32 <HAL_TIM_ConfigClockSource+0x1c2>
 800dd26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd2a:	d87f      	bhi.n	800de2c <HAL_TIM_ConfigClockSource+0x1bc>
 800dd2c:	2b70      	cmp	r3, #112	; 0x70
 800dd2e:	d01a      	beq.n	800dd66 <HAL_TIM_ConfigClockSource+0xf6>
 800dd30:	2b70      	cmp	r3, #112	; 0x70
 800dd32:	d87b      	bhi.n	800de2c <HAL_TIM_ConfigClockSource+0x1bc>
 800dd34:	2b60      	cmp	r3, #96	; 0x60
 800dd36:	d050      	beq.n	800ddda <HAL_TIM_ConfigClockSource+0x16a>
 800dd38:	2b60      	cmp	r3, #96	; 0x60
 800dd3a:	d877      	bhi.n	800de2c <HAL_TIM_ConfigClockSource+0x1bc>
 800dd3c:	2b50      	cmp	r3, #80	; 0x50
 800dd3e:	d03c      	beq.n	800ddba <HAL_TIM_ConfigClockSource+0x14a>
 800dd40:	2b50      	cmp	r3, #80	; 0x50
 800dd42:	d873      	bhi.n	800de2c <HAL_TIM_ConfigClockSource+0x1bc>
 800dd44:	2b40      	cmp	r3, #64	; 0x40
 800dd46:	d058      	beq.n	800ddfa <HAL_TIM_ConfigClockSource+0x18a>
 800dd48:	2b40      	cmp	r3, #64	; 0x40
 800dd4a:	d86f      	bhi.n	800de2c <HAL_TIM_ConfigClockSource+0x1bc>
 800dd4c:	2b30      	cmp	r3, #48	; 0x30
 800dd4e:	d064      	beq.n	800de1a <HAL_TIM_ConfigClockSource+0x1aa>
 800dd50:	2b30      	cmp	r3, #48	; 0x30
 800dd52:	d86b      	bhi.n	800de2c <HAL_TIM_ConfigClockSource+0x1bc>
 800dd54:	2b20      	cmp	r3, #32
 800dd56:	d060      	beq.n	800de1a <HAL_TIM_ConfigClockSource+0x1aa>
 800dd58:	2b20      	cmp	r3, #32
 800dd5a:	d867      	bhi.n	800de2c <HAL_TIM_ConfigClockSource+0x1bc>
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d05c      	beq.n	800de1a <HAL_TIM_ConfigClockSource+0x1aa>
 800dd60:	2b10      	cmp	r3, #16
 800dd62:	d05a      	beq.n	800de1a <HAL_TIM_ConfigClockSource+0x1aa>
 800dd64:	e062      	b.n	800de2c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6818      	ldr	r0, [r3, #0]
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	6899      	ldr	r1, [r3, #8]
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	685a      	ldr	r2, [r3, #4]
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	f000 fc89 	bl	800e68c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	689b      	ldr	r3, [r3, #8]
 800dd80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dd88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	68ba      	ldr	r2, [r7, #8]
 800dd90:	609a      	str	r2, [r3, #8]
      break;
 800dd92:	e04f      	b.n	800de34 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6818      	ldr	r0, [r3, #0]
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	6899      	ldr	r1, [r3, #8]
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	685a      	ldr	r2, [r3, #4]
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	68db      	ldr	r3, [r3, #12]
 800dda4:	f000 fc72 	bl	800e68c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	689a      	ldr	r2, [r3, #8]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ddb6:	609a      	str	r2, [r3, #8]
      break;
 800ddb8:	e03c      	b.n	800de34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6818      	ldr	r0, [r3, #0]
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	6859      	ldr	r1, [r3, #4]
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	68db      	ldr	r3, [r3, #12]
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	f000 fbe2 	bl	800e590 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	2150      	movs	r1, #80	; 0x50
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f000 fc3c 	bl	800e650 <TIM_ITRx_SetConfig>
      break;
 800ddd8:	e02c      	b.n	800de34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6818      	ldr	r0, [r3, #0]
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	6859      	ldr	r1, [r3, #4]
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	461a      	mov	r2, r3
 800dde8:	f000 fc01 	bl	800e5ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	2160      	movs	r1, #96	; 0x60
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f000 fc2c 	bl	800e650 <TIM_ITRx_SetConfig>
      break;
 800ddf8:	e01c      	b.n	800de34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6818      	ldr	r0, [r3, #0]
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	6859      	ldr	r1, [r3, #4]
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	68db      	ldr	r3, [r3, #12]
 800de06:	461a      	mov	r2, r3
 800de08:	f000 fbc2 	bl	800e590 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2140      	movs	r1, #64	; 0x40
 800de12:	4618      	mov	r0, r3
 800de14:	f000 fc1c 	bl	800e650 <TIM_ITRx_SetConfig>
      break;
 800de18:	e00c      	b.n	800de34 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681a      	ldr	r2, [r3, #0]
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	4619      	mov	r1, r3
 800de24:	4610      	mov	r0, r2
 800de26:	f000 fc13 	bl	800e650 <TIM_ITRx_SetConfig>
      break;
 800de2a:	e003      	b.n	800de34 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800de2c:	2301      	movs	r3, #1
 800de2e:	73fb      	strb	r3, [r7, #15]
      break;
 800de30:	e000      	b.n	800de34 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800de32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2201      	movs	r2, #1
 800de38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2200      	movs	r2, #0
 800de40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800de44:	7bfb      	ldrb	r3, [r7, #15]
}
 800de46:	4618      	mov	r0, r3
 800de48:	3710      	adds	r7, #16
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}
 800de4e:	bf00      	nop
 800de50:	ffceff88 	.word	0xffceff88
 800de54:	00100040 	.word	0x00100040
 800de58:	00100030 	.word	0x00100030
 800de5c:	00100020 	.word	0x00100020

0800de60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800de60:	b480      	push	{r7}
 800de62:	b083      	sub	sp, #12
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800de68:	bf00      	nop
 800de6a:	370c      	adds	r7, #12
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr

0800de74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800de74:	b480      	push	{r7}
 800de76:	b083      	sub	sp, #12
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800de7c:	bf00      	nop
 800de7e:	370c      	adds	r7, #12
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800de88:	b480      	push	{r7}
 800de8a:	b083      	sub	sp, #12
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800de90:	bf00      	nop
 800de92:	370c      	adds	r7, #12
 800de94:	46bd      	mov	sp, r7
 800de96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9a:	4770      	bx	lr

0800de9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800de9c:	b480      	push	{r7}
 800de9e:	b083      	sub	sp, #12
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dea4:	bf00      	nop
 800dea6:	370c      	adds	r7, #12
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr

0800deb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800deb0:	b480      	push	{r7}
 800deb2:	b085      	sub	sp, #20
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	4a40      	ldr	r2, [pc, #256]	; (800dfc4 <TIM_Base_SetConfig+0x114>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d013      	beq.n	800def0 <TIM_Base_SetConfig+0x40>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dece:	d00f      	beq.n	800def0 <TIM_Base_SetConfig+0x40>
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	4a3d      	ldr	r2, [pc, #244]	; (800dfc8 <TIM_Base_SetConfig+0x118>)
 800ded4:	4293      	cmp	r3, r2
 800ded6:	d00b      	beq.n	800def0 <TIM_Base_SetConfig+0x40>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	4a3c      	ldr	r2, [pc, #240]	; (800dfcc <TIM_Base_SetConfig+0x11c>)
 800dedc:	4293      	cmp	r3, r2
 800dede:	d007      	beq.n	800def0 <TIM_Base_SetConfig+0x40>
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	4a3b      	ldr	r2, [pc, #236]	; (800dfd0 <TIM_Base_SetConfig+0x120>)
 800dee4:	4293      	cmp	r3, r2
 800dee6:	d003      	beq.n	800def0 <TIM_Base_SetConfig+0x40>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	4a3a      	ldr	r2, [pc, #232]	; (800dfd4 <TIM_Base_SetConfig+0x124>)
 800deec:	4293      	cmp	r3, r2
 800deee:	d108      	bne.n	800df02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800def6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	685b      	ldr	r3, [r3, #4]
 800defc:	68fa      	ldr	r2, [r7, #12]
 800defe:	4313      	orrs	r3, r2
 800df00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	4a2f      	ldr	r2, [pc, #188]	; (800dfc4 <TIM_Base_SetConfig+0x114>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d01f      	beq.n	800df4a <TIM_Base_SetConfig+0x9a>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800df10:	d01b      	beq.n	800df4a <TIM_Base_SetConfig+0x9a>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	4a2c      	ldr	r2, [pc, #176]	; (800dfc8 <TIM_Base_SetConfig+0x118>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d017      	beq.n	800df4a <TIM_Base_SetConfig+0x9a>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	4a2b      	ldr	r2, [pc, #172]	; (800dfcc <TIM_Base_SetConfig+0x11c>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d013      	beq.n	800df4a <TIM_Base_SetConfig+0x9a>
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	4a2a      	ldr	r2, [pc, #168]	; (800dfd0 <TIM_Base_SetConfig+0x120>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d00f      	beq.n	800df4a <TIM_Base_SetConfig+0x9a>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	4a29      	ldr	r2, [pc, #164]	; (800dfd4 <TIM_Base_SetConfig+0x124>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d00b      	beq.n	800df4a <TIM_Base_SetConfig+0x9a>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	4a28      	ldr	r2, [pc, #160]	; (800dfd8 <TIM_Base_SetConfig+0x128>)
 800df36:	4293      	cmp	r3, r2
 800df38:	d007      	beq.n	800df4a <TIM_Base_SetConfig+0x9a>
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	4a27      	ldr	r2, [pc, #156]	; (800dfdc <TIM_Base_SetConfig+0x12c>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d003      	beq.n	800df4a <TIM_Base_SetConfig+0x9a>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	4a26      	ldr	r2, [pc, #152]	; (800dfe0 <TIM_Base_SetConfig+0x130>)
 800df46:	4293      	cmp	r3, r2
 800df48:	d108      	bne.n	800df5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	68db      	ldr	r3, [r3, #12]
 800df56:	68fa      	ldr	r2, [r7, #12]
 800df58:	4313      	orrs	r3, r2
 800df5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	695b      	ldr	r3, [r3, #20]
 800df66:	4313      	orrs	r3, r2
 800df68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	68fa      	ldr	r2, [r7, #12]
 800df6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	689a      	ldr	r2, [r3, #8]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	4a10      	ldr	r2, [pc, #64]	; (800dfc4 <TIM_Base_SetConfig+0x114>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d00f      	beq.n	800dfa8 <TIM_Base_SetConfig+0xf8>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	4a12      	ldr	r2, [pc, #72]	; (800dfd4 <TIM_Base_SetConfig+0x124>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d00b      	beq.n	800dfa8 <TIM_Base_SetConfig+0xf8>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	4a11      	ldr	r2, [pc, #68]	; (800dfd8 <TIM_Base_SetConfig+0x128>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d007      	beq.n	800dfa8 <TIM_Base_SetConfig+0xf8>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	4a10      	ldr	r2, [pc, #64]	; (800dfdc <TIM_Base_SetConfig+0x12c>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d003      	beq.n	800dfa8 <TIM_Base_SetConfig+0xf8>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	4a0f      	ldr	r2, [pc, #60]	; (800dfe0 <TIM_Base_SetConfig+0x130>)
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d103      	bne.n	800dfb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	691a      	ldr	r2, [r3, #16]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	615a      	str	r2, [r3, #20]
}
 800dfb6:	bf00      	nop
 800dfb8:	3714      	adds	r7, #20
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc0:	4770      	bx	lr
 800dfc2:	bf00      	nop
 800dfc4:	40010000 	.word	0x40010000
 800dfc8:	40000400 	.word	0x40000400
 800dfcc:	40000800 	.word	0x40000800
 800dfd0:	40000c00 	.word	0x40000c00
 800dfd4:	40010400 	.word	0x40010400
 800dfd8:	40014000 	.word	0x40014000
 800dfdc:	40014400 	.word	0x40014400
 800dfe0:	40014800 	.word	0x40014800

0800dfe4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b087      	sub	sp, #28
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6a1b      	ldr	r3, [r3, #32]
 800dff2:	f023 0201 	bic.w	r2, r3, #1
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6a1b      	ldr	r3, [r3, #32]
 800dffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	699b      	ldr	r3, [r3, #24]
 800e00a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e00c:	68fa      	ldr	r2, [r7, #12]
 800e00e:	4b37      	ldr	r3, [pc, #220]	; (800e0ec <TIM_OC1_SetConfig+0x108>)
 800e010:	4013      	ands	r3, r2
 800e012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f023 0303 	bic.w	r3, r3, #3
 800e01a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	68fa      	ldr	r2, [r7, #12]
 800e022:	4313      	orrs	r3, r2
 800e024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	f023 0302 	bic.w	r3, r3, #2
 800e02c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	689b      	ldr	r3, [r3, #8]
 800e032:	697a      	ldr	r2, [r7, #20]
 800e034:	4313      	orrs	r3, r2
 800e036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	4a2d      	ldr	r2, [pc, #180]	; (800e0f0 <TIM_OC1_SetConfig+0x10c>)
 800e03c:	4293      	cmp	r3, r2
 800e03e:	d00f      	beq.n	800e060 <TIM_OC1_SetConfig+0x7c>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	4a2c      	ldr	r2, [pc, #176]	; (800e0f4 <TIM_OC1_SetConfig+0x110>)
 800e044:	4293      	cmp	r3, r2
 800e046:	d00b      	beq.n	800e060 <TIM_OC1_SetConfig+0x7c>
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	4a2b      	ldr	r2, [pc, #172]	; (800e0f8 <TIM_OC1_SetConfig+0x114>)
 800e04c:	4293      	cmp	r3, r2
 800e04e:	d007      	beq.n	800e060 <TIM_OC1_SetConfig+0x7c>
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	4a2a      	ldr	r2, [pc, #168]	; (800e0fc <TIM_OC1_SetConfig+0x118>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d003      	beq.n	800e060 <TIM_OC1_SetConfig+0x7c>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	4a29      	ldr	r2, [pc, #164]	; (800e100 <TIM_OC1_SetConfig+0x11c>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d10c      	bne.n	800e07a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	f023 0308 	bic.w	r3, r3, #8
 800e066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	68db      	ldr	r3, [r3, #12]
 800e06c:	697a      	ldr	r2, [r7, #20]
 800e06e:	4313      	orrs	r3, r2
 800e070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	f023 0304 	bic.w	r3, r3, #4
 800e078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	4a1c      	ldr	r2, [pc, #112]	; (800e0f0 <TIM_OC1_SetConfig+0x10c>)
 800e07e:	4293      	cmp	r3, r2
 800e080:	d00f      	beq.n	800e0a2 <TIM_OC1_SetConfig+0xbe>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	4a1b      	ldr	r2, [pc, #108]	; (800e0f4 <TIM_OC1_SetConfig+0x110>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d00b      	beq.n	800e0a2 <TIM_OC1_SetConfig+0xbe>
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4a1a      	ldr	r2, [pc, #104]	; (800e0f8 <TIM_OC1_SetConfig+0x114>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d007      	beq.n	800e0a2 <TIM_OC1_SetConfig+0xbe>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	4a19      	ldr	r2, [pc, #100]	; (800e0fc <TIM_OC1_SetConfig+0x118>)
 800e096:	4293      	cmp	r3, r2
 800e098:	d003      	beq.n	800e0a2 <TIM_OC1_SetConfig+0xbe>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4a18      	ldr	r2, [pc, #96]	; (800e100 <TIM_OC1_SetConfig+0x11c>)
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	d111      	bne.n	800e0c6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e0a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e0b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	695b      	ldr	r3, [r3, #20]
 800e0b6:	693a      	ldr	r2, [r7, #16]
 800e0b8:	4313      	orrs	r3, r2
 800e0ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	699b      	ldr	r3, [r3, #24]
 800e0c0:	693a      	ldr	r2, [r7, #16]
 800e0c2:	4313      	orrs	r3, r2
 800e0c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	693a      	ldr	r2, [r7, #16]
 800e0ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	68fa      	ldr	r2, [r7, #12]
 800e0d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	685a      	ldr	r2, [r3, #4]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	697a      	ldr	r2, [r7, #20]
 800e0de:	621a      	str	r2, [r3, #32]
}
 800e0e0:	bf00      	nop
 800e0e2:	371c      	adds	r7, #28
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr
 800e0ec:	fffeff8f 	.word	0xfffeff8f
 800e0f0:	40010000 	.word	0x40010000
 800e0f4:	40010400 	.word	0x40010400
 800e0f8:	40014000 	.word	0x40014000
 800e0fc:	40014400 	.word	0x40014400
 800e100:	40014800 	.word	0x40014800

0800e104 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e104:	b480      	push	{r7}
 800e106:	b087      	sub	sp, #28
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6a1b      	ldr	r3, [r3, #32]
 800e112:	f023 0210 	bic.w	r2, r3, #16
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6a1b      	ldr	r3, [r3, #32]
 800e11e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	699b      	ldr	r3, [r3, #24]
 800e12a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	4b34      	ldr	r3, [pc, #208]	; (800e200 <TIM_OC2_SetConfig+0xfc>)
 800e130:	4013      	ands	r3, r2
 800e132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e13a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	021b      	lsls	r3, r3, #8
 800e142:	68fa      	ldr	r2, [r7, #12]
 800e144:	4313      	orrs	r3, r2
 800e146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	f023 0320 	bic.w	r3, r3, #32
 800e14e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	011b      	lsls	r3, r3, #4
 800e156:	697a      	ldr	r2, [r7, #20]
 800e158:	4313      	orrs	r3, r2
 800e15a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	4a29      	ldr	r2, [pc, #164]	; (800e204 <TIM_OC2_SetConfig+0x100>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d003      	beq.n	800e16c <TIM_OC2_SetConfig+0x68>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	4a28      	ldr	r2, [pc, #160]	; (800e208 <TIM_OC2_SetConfig+0x104>)
 800e168:	4293      	cmp	r3, r2
 800e16a:	d10d      	bne.n	800e188 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	68db      	ldr	r3, [r3, #12]
 800e178:	011b      	lsls	r3, r3, #4
 800e17a:	697a      	ldr	r2, [r7, #20]
 800e17c:	4313      	orrs	r3, r2
 800e17e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e180:	697b      	ldr	r3, [r7, #20]
 800e182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e186:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	4a1e      	ldr	r2, [pc, #120]	; (800e204 <TIM_OC2_SetConfig+0x100>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d00f      	beq.n	800e1b0 <TIM_OC2_SetConfig+0xac>
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	4a1d      	ldr	r2, [pc, #116]	; (800e208 <TIM_OC2_SetConfig+0x104>)
 800e194:	4293      	cmp	r3, r2
 800e196:	d00b      	beq.n	800e1b0 <TIM_OC2_SetConfig+0xac>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	4a1c      	ldr	r2, [pc, #112]	; (800e20c <TIM_OC2_SetConfig+0x108>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d007      	beq.n	800e1b0 <TIM_OC2_SetConfig+0xac>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	4a1b      	ldr	r2, [pc, #108]	; (800e210 <TIM_OC2_SetConfig+0x10c>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d003      	beq.n	800e1b0 <TIM_OC2_SetConfig+0xac>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	4a1a      	ldr	r2, [pc, #104]	; (800e214 <TIM_OC2_SetConfig+0x110>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d113      	bne.n	800e1d8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e1b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e1be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	695b      	ldr	r3, [r3, #20]
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	693a      	ldr	r2, [r7, #16]
 800e1c8:	4313      	orrs	r3, r2
 800e1ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	699b      	ldr	r3, [r3, #24]
 800e1d0:	009b      	lsls	r3, r3, #2
 800e1d2:	693a      	ldr	r2, [r7, #16]
 800e1d4:	4313      	orrs	r3, r2
 800e1d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	693a      	ldr	r2, [r7, #16]
 800e1dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	685a      	ldr	r2, [r3, #4]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	697a      	ldr	r2, [r7, #20]
 800e1f0:	621a      	str	r2, [r3, #32]
}
 800e1f2:	bf00      	nop
 800e1f4:	371c      	adds	r7, #28
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fc:	4770      	bx	lr
 800e1fe:	bf00      	nop
 800e200:	feff8fff 	.word	0xfeff8fff
 800e204:	40010000 	.word	0x40010000
 800e208:	40010400 	.word	0x40010400
 800e20c:	40014000 	.word	0x40014000
 800e210:	40014400 	.word	0x40014400
 800e214:	40014800 	.word	0x40014800

0800e218 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e218:	b480      	push	{r7}
 800e21a:	b087      	sub	sp, #28
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6a1b      	ldr	r3, [r3, #32]
 800e226:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6a1b      	ldr	r3, [r3, #32]
 800e232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	69db      	ldr	r3, [r3, #28]
 800e23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e240:	68fa      	ldr	r2, [r7, #12]
 800e242:	4b33      	ldr	r3, [pc, #204]	; (800e310 <TIM_OC3_SetConfig+0xf8>)
 800e244:	4013      	ands	r3, r2
 800e246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	f023 0303 	bic.w	r3, r3, #3
 800e24e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	68fa      	ldr	r2, [r7, #12]
 800e256:	4313      	orrs	r3, r2
 800e258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	689b      	ldr	r3, [r3, #8]
 800e266:	021b      	lsls	r3, r3, #8
 800e268:	697a      	ldr	r2, [r7, #20]
 800e26a:	4313      	orrs	r3, r2
 800e26c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	4a28      	ldr	r2, [pc, #160]	; (800e314 <TIM_OC3_SetConfig+0xfc>)
 800e272:	4293      	cmp	r3, r2
 800e274:	d003      	beq.n	800e27e <TIM_OC3_SetConfig+0x66>
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	4a27      	ldr	r2, [pc, #156]	; (800e318 <TIM_OC3_SetConfig+0x100>)
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d10d      	bne.n	800e29a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e284:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	021b      	lsls	r3, r3, #8
 800e28c:	697a      	ldr	r2, [r7, #20]
 800e28e:	4313      	orrs	r3, r2
 800e290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4a1d      	ldr	r2, [pc, #116]	; (800e314 <TIM_OC3_SetConfig+0xfc>)
 800e29e:	4293      	cmp	r3, r2
 800e2a0:	d00f      	beq.n	800e2c2 <TIM_OC3_SetConfig+0xaa>
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	4a1c      	ldr	r2, [pc, #112]	; (800e318 <TIM_OC3_SetConfig+0x100>)
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d00b      	beq.n	800e2c2 <TIM_OC3_SetConfig+0xaa>
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	4a1b      	ldr	r2, [pc, #108]	; (800e31c <TIM_OC3_SetConfig+0x104>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d007      	beq.n	800e2c2 <TIM_OC3_SetConfig+0xaa>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	4a1a      	ldr	r2, [pc, #104]	; (800e320 <TIM_OC3_SetConfig+0x108>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d003      	beq.n	800e2c2 <TIM_OC3_SetConfig+0xaa>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	4a19      	ldr	r2, [pc, #100]	; (800e324 <TIM_OC3_SetConfig+0x10c>)
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	d113      	bne.n	800e2ea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e2c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e2d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	695b      	ldr	r3, [r3, #20]
 800e2d6:	011b      	lsls	r3, r3, #4
 800e2d8:	693a      	ldr	r2, [r7, #16]
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	699b      	ldr	r3, [r3, #24]
 800e2e2:	011b      	lsls	r3, r3, #4
 800e2e4:	693a      	ldr	r2, [r7, #16]
 800e2e6:	4313      	orrs	r3, r2
 800e2e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	693a      	ldr	r2, [r7, #16]
 800e2ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	68fa      	ldr	r2, [r7, #12]
 800e2f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	685a      	ldr	r2, [r3, #4]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	697a      	ldr	r2, [r7, #20]
 800e302:	621a      	str	r2, [r3, #32]
}
 800e304:	bf00      	nop
 800e306:	371c      	adds	r7, #28
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr
 800e310:	fffeff8f 	.word	0xfffeff8f
 800e314:	40010000 	.word	0x40010000
 800e318:	40010400 	.word	0x40010400
 800e31c:	40014000 	.word	0x40014000
 800e320:	40014400 	.word	0x40014400
 800e324:	40014800 	.word	0x40014800

0800e328 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e328:	b480      	push	{r7}
 800e32a:	b087      	sub	sp, #28
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
 800e330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	6a1b      	ldr	r3, [r3, #32]
 800e336:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6a1b      	ldr	r3, [r3, #32]
 800e342:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	69db      	ldr	r3, [r3, #28]
 800e34e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	4b24      	ldr	r3, [pc, #144]	; (800e3e4 <TIM_OC4_SetConfig+0xbc>)
 800e354:	4013      	ands	r3, r2
 800e356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e35e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	021b      	lsls	r3, r3, #8
 800e366:	68fa      	ldr	r2, [r7, #12]
 800e368:	4313      	orrs	r3, r2
 800e36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	689b      	ldr	r3, [r3, #8]
 800e378:	031b      	lsls	r3, r3, #12
 800e37a:	693a      	ldr	r2, [r7, #16]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	4a19      	ldr	r2, [pc, #100]	; (800e3e8 <TIM_OC4_SetConfig+0xc0>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d00f      	beq.n	800e3a8 <TIM_OC4_SetConfig+0x80>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	4a18      	ldr	r2, [pc, #96]	; (800e3ec <TIM_OC4_SetConfig+0xc4>)
 800e38c:	4293      	cmp	r3, r2
 800e38e:	d00b      	beq.n	800e3a8 <TIM_OC4_SetConfig+0x80>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	4a17      	ldr	r2, [pc, #92]	; (800e3f0 <TIM_OC4_SetConfig+0xc8>)
 800e394:	4293      	cmp	r3, r2
 800e396:	d007      	beq.n	800e3a8 <TIM_OC4_SetConfig+0x80>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	4a16      	ldr	r2, [pc, #88]	; (800e3f4 <TIM_OC4_SetConfig+0xcc>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d003      	beq.n	800e3a8 <TIM_OC4_SetConfig+0x80>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	4a15      	ldr	r2, [pc, #84]	; (800e3f8 <TIM_OC4_SetConfig+0xd0>)
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d109      	bne.n	800e3bc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e3ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	695b      	ldr	r3, [r3, #20]
 800e3b4:	019b      	lsls	r3, r3, #6
 800e3b6:	697a      	ldr	r2, [r7, #20]
 800e3b8:	4313      	orrs	r3, r2
 800e3ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	697a      	ldr	r2, [r7, #20]
 800e3c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	68fa      	ldr	r2, [r7, #12]
 800e3c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	685a      	ldr	r2, [r3, #4]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	693a      	ldr	r2, [r7, #16]
 800e3d4:	621a      	str	r2, [r3, #32]
}
 800e3d6:	bf00      	nop
 800e3d8:	371c      	adds	r7, #28
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr
 800e3e2:	bf00      	nop
 800e3e4:	feff8fff 	.word	0xfeff8fff
 800e3e8:	40010000 	.word	0x40010000
 800e3ec:	40010400 	.word	0x40010400
 800e3f0:	40014000 	.word	0x40014000
 800e3f4:	40014400 	.word	0x40014400
 800e3f8:	40014800 	.word	0x40014800

0800e3fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b087      	sub	sp, #28
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	6a1b      	ldr	r3, [r3, #32]
 800e40a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6a1b      	ldr	r3, [r3, #32]
 800e416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e424:	68fa      	ldr	r2, [r7, #12]
 800e426:	4b21      	ldr	r3, [pc, #132]	; (800e4ac <TIM_OC5_SetConfig+0xb0>)
 800e428:	4013      	ands	r3, r2
 800e42a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	68fa      	ldr	r2, [r7, #12]
 800e432:	4313      	orrs	r3, r2
 800e434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e43c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	689b      	ldr	r3, [r3, #8]
 800e442:	041b      	lsls	r3, r3, #16
 800e444:	693a      	ldr	r2, [r7, #16]
 800e446:	4313      	orrs	r3, r2
 800e448:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	4a18      	ldr	r2, [pc, #96]	; (800e4b0 <TIM_OC5_SetConfig+0xb4>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d00f      	beq.n	800e472 <TIM_OC5_SetConfig+0x76>
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	4a17      	ldr	r2, [pc, #92]	; (800e4b4 <TIM_OC5_SetConfig+0xb8>)
 800e456:	4293      	cmp	r3, r2
 800e458:	d00b      	beq.n	800e472 <TIM_OC5_SetConfig+0x76>
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	4a16      	ldr	r2, [pc, #88]	; (800e4b8 <TIM_OC5_SetConfig+0xbc>)
 800e45e:	4293      	cmp	r3, r2
 800e460:	d007      	beq.n	800e472 <TIM_OC5_SetConfig+0x76>
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	4a15      	ldr	r2, [pc, #84]	; (800e4bc <TIM_OC5_SetConfig+0xc0>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d003      	beq.n	800e472 <TIM_OC5_SetConfig+0x76>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	4a14      	ldr	r2, [pc, #80]	; (800e4c0 <TIM_OC5_SetConfig+0xc4>)
 800e46e:	4293      	cmp	r3, r2
 800e470:	d109      	bne.n	800e486 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e478:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	695b      	ldr	r3, [r3, #20]
 800e47e:	021b      	lsls	r3, r3, #8
 800e480:	697a      	ldr	r2, [r7, #20]
 800e482:	4313      	orrs	r3, r2
 800e484:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	697a      	ldr	r2, [r7, #20]
 800e48a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	68fa      	ldr	r2, [r7, #12]
 800e490:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	685a      	ldr	r2, [r3, #4]
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	693a      	ldr	r2, [r7, #16]
 800e49e:	621a      	str	r2, [r3, #32]
}
 800e4a0:	bf00      	nop
 800e4a2:	371c      	adds	r7, #28
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr
 800e4ac:	fffeff8f 	.word	0xfffeff8f
 800e4b0:	40010000 	.word	0x40010000
 800e4b4:	40010400 	.word	0x40010400
 800e4b8:	40014000 	.word	0x40014000
 800e4bc:	40014400 	.word	0x40014400
 800e4c0:	40014800 	.word	0x40014800

0800e4c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b087      	sub	sp, #28
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6a1b      	ldr	r3, [r3, #32]
 800e4d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6a1b      	ldr	r3, [r3, #32]
 800e4de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	685b      	ldr	r3, [r3, #4]
 800e4e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e4ec:	68fa      	ldr	r2, [r7, #12]
 800e4ee:	4b22      	ldr	r3, [pc, #136]	; (800e578 <TIM_OC6_SetConfig+0xb4>)
 800e4f0:	4013      	ands	r3, r2
 800e4f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	021b      	lsls	r3, r3, #8
 800e4fa:	68fa      	ldr	r2, [r7, #12]
 800e4fc:	4313      	orrs	r3, r2
 800e4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e506:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	689b      	ldr	r3, [r3, #8]
 800e50c:	051b      	lsls	r3, r3, #20
 800e50e:	693a      	ldr	r2, [r7, #16]
 800e510:	4313      	orrs	r3, r2
 800e512:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	4a19      	ldr	r2, [pc, #100]	; (800e57c <TIM_OC6_SetConfig+0xb8>)
 800e518:	4293      	cmp	r3, r2
 800e51a:	d00f      	beq.n	800e53c <TIM_OC6_SetConfig+0x78>
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	4a18      	ldr	r2, [pc, #96]	; (800e580 <TIM_OC6_SetConfig+0xbc>)
 800e520:	4293      	cmp	r3, r2
 800e522:	d00b      	beq.n	800e53c <TIM_OC6_SetConfig+0x78>
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	4a17      	ldr	r2, [pc, #92]	; (800e584 <TIM_OC6_SetConfig+0xc0>)
 800e528:	4293      	cmp	r3, r2
 800e52a:	d007      	beq.n	800e53c <TIM_OC6_SetConfig+0x78>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	4a16      	ldr	r2, [pc, #88]	; (800e588 <TIM_OC6_SetConfig+0xc4>)
 800e530:	4293      	cmp	r3, r2
 800e532:	d003      	beq.n	800e53c <TIM_OC6_SetConfig+0x78>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	4a15      	ldr	r2, [pc, #84]	; (800e58c <TIM_OC6_SetConfig+0xc8>)
 800e538:	4293      	cmp	r3, r2
 800e53a:	d109      	bne.n	800e550 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e542:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	695b      	ldr	r3, [r3, #20]
 800e548:	029b      	lsls	r3, r3, #10
 800e54a:	697a      	ldr	r2, [r7, #20]
 800e54c:	4313      	orrs	r3, r2
 800e54e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	697a      	ldr	r2, [r7, #20]
 800e554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	68fa      	ldr	r2, [r7, #12]
 800e55a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	685a      	ldr	r2, [r3, #4]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	693a      	ldr	r2, [r7, #16]
 800e568:	621a      	str	r2, [r3, #32]
}
 800e56a:	bf00      	nop
 800e56c:	371c      	adds	r7, #28
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr
 800e576:	bf00      	nop
 800e578:	feff8fff 	.word	0xfeff8fff
 800e57c:	40010000 	.word	0x40010000
 800e580:	40010400 	.word	0x40010400
 800e584:	40014000 	.word	0x40014000
 800e588:	40014400 	.word	0x40014400
 800e58c:	40014800 	.word	0x40014800

0800e590 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e590:	b480      	push	{r7}
 800e592:	b087      	sub	sp, #28
 800e594:	af00      	add	r7, sp, #0
 800e596:	60f8      	str	r0, [r7, #12]
 800e598:	60b9      	str	r1, [r7, #8]
 800e59a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	6a1b      	ldr	r3, [r3, #32]
 800e5a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	6a1b      	ldr	r3, [r3, #32]
 800e5a6:	f023 0201 	bic.w	r2, r3, #1
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	699b      	ldr	r3, [r3, #24]
 800e5b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e5ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	011b      	lsls	r3, r3, #4
 800e5c0:	693a      	ldr	r2, [r7, #16]
 800e5c2:	4313      	orrs	r3, r2
 800e5c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	f023 030a 	bic.w	r3, r3, #10
 800e5cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e5ce:	697a      	ldr	r2, [r7, #20]
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	4313      	orrs	r3, r2
 800e5d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	693a      	ldr	r2, [r7, #16]
 800e5da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	697a      	ldr	r2, [r7, #20]
 800e5e0:	621a      	str	r2, [r3, #32]
}
 800e5e2:	bf00      	nop
 800e5e4:	371c      	adds	r7, #28
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr

0800e5ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e5ee:	b480      	push	{r7}
 800e5f0:	b087      	sub	sp, #28
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	60f8      	str	r0, [r7, #12]
 800e5f6:	60b9      	str	r1, [r7, #8]
 800e5f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	6a1b      	ldr	r3, [r3, #32]
 800e5fe:	f023 0210 	bic.w	r2, r3, #16
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	699b      	ldr	r3, [r3, #24]
 800e60a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	6a1b      	ldr	r3, [r3, #32]
 800e610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e618:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	031b      	lsls	r3, r3, #12
 800e61e:	697a      	ldr	r2, [r7, #20]
 800e620:	4313      	orrs	r3, r2
 800e622:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e62a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	011b      	lsls	r3, r3, #4
 800e630:	693a      	ldr	r2, [r7, #16]
 800e632:	4313      	orrs	r3, r2
 800e634:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	697a      	ldr	r2, [r7, #20]
 800e63a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	693a      	ldr	r2, [r7, #16]
 800e640:	621a      	str	r2, [r3, #32]
}
 800e642:	bf00      	nop
 800e644:	371c      	adds	r7, #28
 800e646:	46bd      	mov	sp, r7
 800e648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64c:	4770      	bx	lr
	...

0800e650 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e650:	b480      	push	{r7}
 800e652:	b085      	sub	sp, #20
 800e654:	af00      	add	r7, sp, #0
 800e656:	6078      	str	r0, [r7, #4]
 800e658:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e660:	68fa      	ldr	r2, [r7, #12]
 800e662:	4b09      	ldr	r3, [pc, #36]	; (800e688 <TIM_ITRx_SetConfig+0x38>)
 800e664:	4013      	ands	r3, r2
 800e666:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e668:	683a      	ldr	r2, [r7, #0]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	4313      	orrs	r3, r2
 800e66e:	f043 0307 	orr.w	r3, r3, #7
 800e672:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	68fa      	ldr	r2, [r7, #12]
 800e678:	609a      	str	r2, [r3, #8]
}
 800e67a:	bf00      	nop
 800e67c:	3714      	adds	r7, #20
 800e67e:	46bd      	mov	sp, r7
 800e680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e684:	4770      	bx	lr
 800e686:	bf00      	nop
 800e688:	ffcfff8f 	.word	0xffcfff8f

0800e68c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b087      	sub	sp, #28
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	607a      	str	r2, [r7, #4]
 800e698:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	689b      	ldr	r3, [r3, #8]
 800e69e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e6a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	021a      	lsls	r2, r3, #8
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	431a      	orrs	r2, r3
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	4313      	orrs	r3, r2
 800e6b4:	697a      	ldr	r2, [r7, #20]
 800e6b6:	4313      	orrs	r3, r2
 800e6b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	697a      	ldr	r2, [r7, #20]
 800e6be:	609a      	str	r2, [r3, #8]
}
 800e6c0:	bf00      	nop
 800e6c2:	371c      	adds	r7, #28
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ca:	4770      	bx	lr

0800e6cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b087      	sub	sp, #28
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	60b9      	str	r1, [r7, #8]
 800e6d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	f003 031f 	and.w	r3, r3, #31
 800e6de:	2201      	movs	r2, #1
 800e6e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e6e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	6a1a      	ldr	r2, [r3, #32]
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	43db      	mvns	r3, r3
 800e6ee:	401a      	ands	r2, r3
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	6a1a      	ldr	r2, [r3, #32]
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	f003 031f 	and.w	r3, r3, #31
 800e6fe:	6879      	ldr	r1, [r7, #4]
 800e700:	fa01 f303 	lsl.w	r3, r1, r3
 800e704:	431a      	orrs	r2, r3
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	621a      	str	r2, [r3, #32]
}
 800e70a:	bf00      	nop
 800e70c:	371c      	adds	r7, #28
 800e70e:	46bd      	mov	sp, r7
 800e710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e714:	4770      	bx	lr
	...

0800e718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e718:	b480      	push	{r7}
 800e71a:	b085      	sub	sp, #20
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e728:	2b01      	cmp	r3, #1
 800e72a:	d101      	bne.n	800e730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e72c:	2302      	movs	r3, #2
 800e72e:	e06d      	b.n	800e80c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2201      	movs	r2, #1
 800e734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2202      	movs	r2, #2
 800e73c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	685b      	ldr	r3, [r3, #4]
 800e746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	689b      	ldr	r3, [r3, #8]
 800e74e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	4a30      	ldr	r2, [pc, #192]	; (800e818 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e756:	4293      	cmp	r3, r2
 800e758:	d004      	beq.n	800e764 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	4a2f      	ldr	r2, [pc, #188]	; (800e81c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e760:	4293      	cmp	r3, r2
 800e762:	d108      	bne.n	800e776 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e76a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	685b      	ldr	r3, [r3, #4]
 800e770:	68fa      	ldr	r2, [r7, #12]
 800e772:	4313      	orrs	r3, r2
 800e774:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e77c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	68fa      	ldr	r2, [r7, #12]
 800e784:	4313      	orrs	r3, r2
 800e786:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	68fa      	ldr	r2, [r7, #12]
 800e78e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	4a20      	ldr	r2, [pc, #128]	; (800e818 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d022      	beq.n	800e7e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7a2:	d01d      	beq.n	800e7e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4a1d      	ldr	r2, [pc, #116]	; (800e820 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d018      	beq.n	800e7e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	4a1c      	ldr	r2, [pc, #112]	; (800e824 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e7b4:	4293      	cmp	r3, r2
 800e7b6:	d013      	beq.n	800e7e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	4a1a      	ldr	r2, [pc, #104]	; (800e828 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e7be:	4293      	cmp	r3, r2
 800e7c0:	d00e      	beq.n	800e7e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	4a15      	ldr	r2, [pc, #84]	; (800e81c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d009      	beq.n	800e7e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	4a16      	ldr	r2, [pc, #88]	; (800e82c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d004      	beq.n	800e7e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	4a15      	ldr	r2, [pc, #84]	; (800e830 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e7dc:	4293      	cmp	r3, r2
 800e7de:	d10c      	bne.n	800e7fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e7e0:	68bb      	ldr	r3, [r7, #8]
 800e7e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	68ba      	ldr	r2, [r7, #8]
 800e7ee:	4313      	orrs	r3, r2
 800e7f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	68ba      	ldr	r2, [r7, #8]
 800e7f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2200      	movs	r2, #0
 800e806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e80a:	2300      	movs	r3, #0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3714      	adds	r7, #20
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr
 800e818:	40010000 	.word	0x40010000
 800e81c:	40010400 	.word	0x40010400
 800e820:	40000400 	.word	0x40000400
 800e824:	40000800 	.word	0x40000800
 800e828:	40000c00 	.word	0x40000c00
 800e82c:	40001800 	.word	0x40001800
 800e830:	40014000 	.word	0x40014000

0800e834 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e834:	b480      	push	{r7}
 800e836:	b085      	sub	sp, #20
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e83e:	2300      	movs	r3, #0
 800e840:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e848:	2b01      	cmp	r3, #1
 800e84a:	d101      	bne.n	800e850 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e84c:	2302      	movs	r3, #2
 800e84e:	e065      	b.n	800e91c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2201      	movs	r2, #1
 800e854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	68db      	ldr	r3, [r3, #12]
 800e862:	4313      	orrs	r3, r2
 800e864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	689b      	ldr	r3, [r3, #8]
 800e870:	4313      	orrs	r3, r2
 800e872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	4313      	orrs	r3, r2
 800e880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	4313      	orrs	r3, r2
 800e88e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	691b      	ldr	r3, [r3, #16]
 800e89a:	4313      	orrs	r3, r2
 800e89c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	695b      	ldr	r3, [r3, #20]
 800e8a8:	4313      	orrs	r3, r2
 800e8aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8b6:	4313      	orrs	r3, r2
 800e8b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	699b      	ldr	r3, [r3, #24]
 800e8c4:	041b      	lsls	r3, r3, #16
 800e8c6:	4313      	orrs	r3, r2
 800e8c8:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	4a16      	ldr	r2, [pc, #88]	; (800e928 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	d004      	beq.n	800e8de <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a14      	ldr	r2, [pc, #80]	; (800e92c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d115      	bne.n	800e90a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8e8:	051b      	lsls	r3, r3, #20
 800e8ea:	4313      	orrs	r3, r2
 800e8ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	69db      	ldr	r3, [r3, #28]
 800e8f8:	4313      	orrs	r3, r2
 800e8fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	6a1b      	ldr	r3, [r3, #32]
 800e906:	4313      	orrs	r3, r2
 800e908:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	68fa      	ldr	r2, [r7, #12]
 800e910:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2200      	movs	r2, #0
 800e916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e91a:	2300      	movs	r3, #0
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3714      	adds	r7, #20
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr
 800e928:	40010000 	.word	0x40010000
 800e92c:	40010400 	.word	0x40010400

0800e930 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e938:	bf00      	nop
 800e93a:	370c      	adds	r7, #12
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr

0800e944 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e94c:	bf00      	nop
 800e94e:	370c      	adds	r7, #12
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr

0800e958 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e958:	b480      	push	{r7}
 800e95a:	b083      	sub	sp, #12
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e960:	bf00      	nop
 800e962:	370c      	adds	r7, #12
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr

0800e96c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b082      	sub	sp, #8
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d101      	bne.n	800e97e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e97a:	2301      	movs	r3, #1
 800e97c:	e042      	b.n	800ea04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e984:	2b00      	cmp	r3, #0
 800e986:	d106      	bne.n	800e996 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2200      	movs	r2, #0
 800e98c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f7f7 fd43 	bl	800641c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2224      	movs	r2, #36	; 0x24
 800e99a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	681a      	ldr	r2, [r3, #0]
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	f022 0201 	bic.w	r2, r2, #1
 800e9ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f000 fdf8 	bl	800f5a4 <UART_SetConfig>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	2b01      	cmp	r3, #1
 800e9b8:	d101      	bne.n	800e9be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	e022      	b.n	800ea04 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d002      	beq.n	800e9cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f001 fb54 	bl	8010074 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	685a      	ldr	r2, [r3, #4]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e9da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	689a      	ldr	r2, [r3, #8]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e9ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f042 0201 	orr.w	r2, r2, #1
 800e9fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f001 fbdb 	bl	80101b8 <UART_CheckIdleState>
 800ea02:	4603      	mov	r3, r0
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3708      	adds	r7, #8
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}

0800ea0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b08a      	sub	sp, #40	; 0x28
 800ea10:	af02      	add	r7, sp, #8
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	603b      	str	r3, [r7, #0]
 800ea18:	4613      	mov	r3, r2
 800ea1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea22:	2b20      	cmp	r3, #32
 800ea24:	f040 8083 	bne.w	800eb2e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d002      	beq.n	800ea34 <HAL_UART_Transmit+0x28>
 800ea2e:	88fb      	ldrh	r3, [r7, #6]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d101      	bne.n	800ea38 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ea34:	2301      	movs	r3, #1
 800ea36:	e07b      	b.n	800eb30 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea3e:	2b01      	cmp	r3, #1
 800ea40:	d101      	bne.n	800ea46 <HAL_UART_Transmit+0x3a>
 800ea42:	2302      	movs	r3, #2
 800ea44:	e074      	b.n	800eb30 <HAL_UART_Transmit+0x124>
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	2201      	movs	r2, #1
 800ea4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2200      	movs	r2, #0
 800ea52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2221      	movs	r2, #33	; 0x21
 800ea5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ea5e:	f7f8 f87d 	bl	8006b5c <HAL_GetTick>
 800ea62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	88fa      	ldrh	r2, [r7, #6]
 800ea68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	88fa      	ldrh	r2, [r7, #6]
 800ea70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	689b      	ldr	r3, [r3, #8]
 800ea78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea7c:	d108      	bne.n	800ea90 <HAL_UART_Transmit+0x84>
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	691b      	ldr	r3, [r3, #16]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d104      	bne.n	800ea90 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ea86:	2300      	movs	r3, #0
 800ea88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	61bb      	str	r3, [r7, #24]
 800ea8e:	e003      	b.n	800ea98 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ea94:	2300      	movs	r3, #0
 800ea96:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800eaa0:	e02c      	b.n	800eafc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	9300      	str	r3, [sp, #0]
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	2180      	movs	r1, #128	; 0x80
 800eaac:	68f8      	ldr	r0, [r7, #12]
 800eaae:	f001 fbce 	bl	801024e <UART_WaitOnFlagUntilTimeout>
 800eab2:	4603      	mov	r3, r0
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d001      	beq.n	800eabc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800eab8:	2303      	movs	r3, #3
 800eaba:	e039      	b.n	800eb30 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d10b      	bne.n	800eada <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800eac2:	69bb      	ldr	r3, [r7, #24]
 800eac4:	881b      	ldrh	r3, [r3, #0]
 800eac6:	461a      	mov	r2, r3
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ead0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ead2:	69bb      	ldr	r3, [r7, #24]
 800ead4:	3302      	adds	r3, #2
 800ead6:	61bb      	str	r3, [r7, #24]
 800ead8:	e007      	b.n	800eaea <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800eada:	69fb      	ldr	r3, [r7, #28]
 800eadc:	781a      	ldrb	r2, [r3, #0]
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800eae4:	69fb      	ldr	r3, [r7, #28]
 800eae6:	3301      	adds	r3, #1
 800eae8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	3b01      	subs	r3, #1
 800eaf4:	b29a      	uxth	r2, r3
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d1cc      	bne.n	800eaa2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	9300      	str	r3, [sp, #0]
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	2140      	movs	r1, #64	; 0x40
 800eb12:	68f8      	ldr	r0, [r7, #12]
 800eb14:	f001 fb9b 	bl	801024e <UART_WaitOnFlagUntilTimeout>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d001      	beq.n	800eb22 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800eb1e:	2303      	movs	r3, #3
 800eb20:	e006      	b.n	800eb30 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2220      	movs	r2, #32
 800eb26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	e000      	b.n	800eb30 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800eb2e:	2302      	movs	r3, #2
  }
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	3720      	adds	r7, #32
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}

0800eb38 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b08a      	sub	sp, #40	; 0x28
 800eb3c:	af02      	add	r7, sp, #8
 800eb3e:	60f8      	str	r0, [r7, #12]
 800eb40:	60b9      	str	r1, [r7, #8]
 800eb42:	603b      	str	r3, [r7, #0]
 800eb44:	4613      	mov	r3, r2
 800eb46:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb4e:	2b20      	cmp	r3, #32
 800eb50:	f040 80c0 	bne.w	800ecd4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d002      	beq.n	800eb60 <HAL_UART_Receive+0x28>
 800eb5a:	88fb      	ldrh	r3, [r7, #6]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d101      	bne.n	800eb64 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800eb60:	2301      	movs	r3, #1
 800eb62:	e0b8      	b.n	800ecd6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb6a:	2b01      	cmp	r3, #1
 800eb6c:	d101      	bne.n	800eb72 <HAL_UART_Receive+0x3a>
 800eb6e:	2302      	movs	r3, #2
 800eb70:	e0b1      	b.n	800ecd6 <HAL_UART_Receive+0x19e>
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2201      	movs	r2, #1
 800eb76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2222      	movs	r2, #34	; 0x22
 800eb86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800eb90:	f7f7 ffe4 	bl	8006b5c <HAL_GetTick>
 800eb94:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	88fa      	ldrh	r2, [r7, #6]
 800eb9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	88fa      	ldrh	r2, [r7, #6]
 800eba2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	689b      	ldr	r3, [r3, #8]
 800ebaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ebae:	d10e      	bne.n	800ebce <HAL_UART_Receive+0x96>
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	691b      	ldr	r3, [r3, #16]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d105      	bne.n	800ebc4 <HAL_UART_Receive+0x8c>
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ebbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ebc2:	e02d      	b.n	800ec20 <HAL_UART_Receive+0xe8>
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	22ff      	movs	r2, #255	; 0xff
 800ebc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ebcc:	e028      	b.n	800ec20 <HAL_UART_Receive+0xe8>
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	689b      	ldr	r3, [r3, #8]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d10d      	bne.n	800ebf2 <HAL_UART_Receive+0xba>
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	691b      	ldr	r3, [r3, #16]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d104      	bne.n	800ebe8 <HAL_UART_Receive+0xb0>
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	22ff      	movs	r2, #255	; 0xff
 800ebe2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ebe6:	e01b      	b.n	800ec20 <HAL_UART_Receive+0xe8>
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	227f      	movs	r2, #127	; 0x7f
 800ebec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ebf0:	e016      	b.n	800ec20 <HAL_UART_Receive+0xe8>
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	689b      	ldr	r3, [r3, #8]
 800ebf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ebfa:	d10d      	bne.n	800ec18 <HAL_UART_Receive+0xe0>
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	691b      	ldr	r3, [r3, #16]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d104      	bne.n	800ec0e <HAL_UART_Receive+0xd6>
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	227f      	movs	r2, #127	; 0x7f
 800ec08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ec0c:	e008      	b.n	800ec20 <HAL_UART_Receive+0xe8>
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	223f      	movs	r2, #63	; 0x3f
 800ec12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ec16:	e003      	b.n	800ec20 <HAL_UART_Receive+0xe8>
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec26:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	689b      	ldr	r3, [r3, #8]
 800ec2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec30:	d108      	bne.n	800ec44 <HAL_UART_Receive+0x10c>
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	691b      	ldr	r3, [r3, #16]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d104      	bne.n	800ec44 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800ec3a:	2300      	movs	r3, #0
 800ec3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	61bb      	str	r3, [r7, #24]
 800ec42:	e003      	b.n	800ec4c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ec54:	e032      	b.n	800ecbc <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	9300      	str	r3, [sp, #0]
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	2120      	movs	r1, #32
 800ec60:	68f8      	ldr	r0, [r7, #12]
 800ec62:	f001 faf4 	bl	801024e <UART_WaitOnFlagUntilTimeout>
 800ec66:	4603      	mov	r3, r0
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d001      	beq.n	800ec70 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800ec6c:	2303      	movs	r3, #3
 800ec6e:	e032      	b.n	800ecd6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800ec70:	69fb      	ldr	r3, [r7, #28]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d10c      	bne.n	800ec90 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec7c:	b29a      	uxth	r2, r3
 800ec7e:	8a7b      	ldrh	r3, [r7, #18]
 800ec80:	4013      	ands	r3, r2
 800ec82:	b29a      	uxth	r2, r3
 800ec84:	69bb      	ldr	r3, [r7, #24]
 800ec86:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ec88:	69bb      	ldr	r3, [r7, #24]
 800ec8a:	3302      	adds	r3, #2
 800ec8c:	61bb      	str	r3, [r7, #24]
 800ec8e:	e00c      	b.n	800ecaa <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec96:	b2da      	uxtb	r2, r3
 800ec98:	8a7b      	ldrh	r3, [r7, #18]
 800ec9a:	b2db      	uxtb	r3, r3
 800ec9c:	4013      	ands	r3, r2
 800ec9e:	b2da      	uxtb	r2, r3
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800eca4:	69fb      	ldr	r3, [r7, #28]
 800eca6:	3301      	adds	r3, #1
 800eca8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	3b01      	subs	r3, #1
 800ecb4:	b29a      	uxth	r2, r3
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d1c6      	bne.n	800ec56 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2220      	movs	r2, #32
 800eccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	e000      	b.n	800ecd6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800ecd4:	2302      	movs	r3, #2
  }
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3720      	adds	r7, #32
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
	...

0800ece0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b08a      	sub	sp, #40	; 0x28
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	60f8      	str	r0, [r7, #12]
 800ece8:	60b9      	str	r1, [r7, #8]
 800ecea:	4613      	mov	r3, r2
 800ecec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecf4:	2b20      	cmp	r3, #32
 800ecf6:	d17a      	bne.n	800edee <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d002      	beq.n	800ed04 <HAL_UART_Transmit_DMA+0x24>
 800ecfe:	88fb      	ldrh	r3, [r7, #6]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d101      	bne.n	800ed08 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ed04:	2301      	movs	r3, #1
 800ed06:	e073      	b.n	800edf0 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed0e:	2b01      	cmp	r3, #1
 800ed10:	d101      	bne.n	800ed16 <HAL_UART_Transmit_DMA+0x36>
 800ed12:	2302      	movs	r3, #2
 800ed14:	e06c      	b.n	800edf0 <HAL_UART_Transmit_DMA+0x110>
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2201      	movs	r2, #1
 800ed1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	68ba      	ldr	r2, [r7, #8]
 800ed22:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	88fa      	ldrh	r2, [r7, #6]
 800ed28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	88fa      	ldrh	r2, [r7, #6]
 800ed30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2200      	movs	r2, #0
 800ed38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2221      	movs	r2, #33	; 0x21
 800ed40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d02c      	beq.n	800eda6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed50:	4a29      	ldr	r2, [pc, #164]	; (800edf8 <HAL_UART_Transmit_DMA+0x118>)
 800ed52:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed58:	4a28      	ldr	r2, [pc, #160]	; (800edfc <HAL_UART_Transmit_DMA+0x11c>)
 800ed5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed60:	4a27      	ldr	r2, [pc, #156]	; (800ee00 <HAL_UART_Transmit_DMA+0x120>)
 800ed62:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed68:	2200      	movs	r2, #0
 800ed6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed74:	4619      	mov	r1, r3
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	3328      	adds	r3, #40	; 0x28
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	88fb      	ldrh	r3, [r7, #6]
 800ed80:	f7f8 fd9e 	bl	80078c0 <HAL_DMA_Start_IT>
 800ed84:	4603      	mov	r3, r0
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d00d      	beq.n	800eda6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2210      	movs	r2, #16
 800ed8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2200      	movs	r2, #0
 800ed96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2220      	movs	r2, #32
 800ed9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800eda2:	2301      	movs	r3, #1
 800eda4:	e024      	b.n	800edf0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	2240      	movs	r2, #64	; 0x40
 800edac:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	2200      	movs	r2, #0
 800edb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	3308      	adds	r3, #8
 800edbc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	e853 3f00 	ldrex	r3, [r3]
 800edc4:	613b      	str	r3, [r7, #16]
   return(result);
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edcc:	627b      	str	r3, [r7, #36]	; 0x24
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	3308      	adds	r3, #8
 800edd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edd6:	623a      	str	r2, [r7, #32]
 800edd8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edda:	69f9      	ldr	r1, [r7, #28]
 800eddc:	6a3a      	ldr	r2, [r7, #32]
 800edde:	e841 2300 	strex	r3, r2, [r1]
 800ede2:	61bb      	str	r3, [r7, #24]
   return(result);
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d1e5      	bne.n	800edb6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800edea:	2300      	movs	r3, #0
 800edec:	e000      	b.n	800edf0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800edee:	2302      	movs	r3, #2
  }
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3728      	adds	r7, #40	; 0x28
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}
 800edf8:	08010681 	.word	0x08010681
 800edfc:	08010717 	.word	0x08010717
 800ee00:	0801088d 	.word	0x0801088d

0800ee04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b0ba      	sub	sp, #232	; 0xe8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	69db      	ldr	r3, [r3, #28]
 800ee12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	689b      	ldr	r3, [r3, #8]
 800ee26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ee2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ee2e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ee32:	4013      	ands	r3, r2
 800ee34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ee38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d11b      	bne.n	800ee78 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ee40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee44:	f003 0320 	and.w	r3, r3, #32
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d015      	beq.n	800ee78 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ee4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee50:	f003 0320 	and.w	r3, r3, #32
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d105      	bne.n	800ee64 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ee58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d009      	beq.n	800ee78 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	f000 835a 	beq.w	800f522 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	4798      	blx	r3
      }
      return;
 800ee76:	e354      	b.n	800f522 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ee78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	f000 811f 	beq.w	800f0c0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ee82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ee86:	4b8b      	ldr	r3, [pc, #556]	; (800f0b4 <HAL_UART_IRQHandler+0x2b0>)
 800ee88:	4013      	ands	r3, r2
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d106      	bne.n	800ee9c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ee8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ee92:	4b89      	ldr	r3, [pc, #548]	; (800f0b8 <HAL_UART_IRQHandler+0x2b4>)
 800ee94:	4013      	ands	r3, r2
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f000 8112 	beq.w	800f0c0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ee9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eea0:	f003 0301 	and.w	r3, r3, #1
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d011      	beq.n	800eecc <HAL_UART_IRQHandler+0xc8>
 800eea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eeac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d00b      	beq.n	800eecc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2201      	movs	r2, #1
 800eeba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eec2:	f043 0201 	orr.w	r2, r3, #1
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eed0:	f003 0302 	and.w	r3, r3, #2
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d011      	beq.n	800eefc <HAL_UART_IRQHandler+0xf8>
 800eed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eedc:	f003 0301 	and.w	r3, r3, #1
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d00b      	beq.n	800eefc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	2202      	movs	r2, #2
 800eeea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eef2:	f043 0204 	orr.w	r2, r3, #4
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eefc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef00:	f003 0304 	and.w	r3, r3, #4
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d011      	beq.n	800ef2c <HAL_UART_IRQHandler+0x128>
 800ef08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef0c:	f003 0301 	and.w	r3, r3, #1
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d00b      	beq.n	800ef2c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	2204      	movs	r2, #4
 800ef1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef22:	f043 0202 	orr.w	r2, r3, #2
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ef2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef30:	f003 0308 	and.w	r3, r3, #8
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d017      	beq.n	800ef68 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ef38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef3c:	f003 0320 	and.w	r3, r3, #32
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d105      	bne.n	800ef50 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ef44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ef48:	4b5a      	ldr	r3, [pc, #360]	; (800f0b4 <HAL_UART_IRQHandler+0x2b0>)
 800ef4a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d00b      	beq.n	800ef68 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	2208      	movs	r2, #8
 800ef56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef5e:	f043 0208 	orr.w	r2, r3, #8
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ef68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d012      	beq.n	800ef9a <HAL_UART_IRQHandler+0x196>
 800ef74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d00c      	beq.n	800ef9a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef90:	f043 0220 	orr.w	r2, r3, #32
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	f000 82c0 	beq.w	800f526 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800efa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efaa:	f003 0320 	and.w	r3, r3, #32
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d013      	beq.n	800efda <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800efb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800efb6:	f003 0320 	and.w	r3, r3, #32
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d105      	bne.n	800efca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800efbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800efc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d007      	beq.n	800efda <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d003      	beq.n	800efda <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800efe0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	689b      	ldr	r3, [r3, #8]
 800efea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efee:	2b40      	cmp	r3, #64	; 0x40
 800eff0:	d005      	beq.n	800effe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800eff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800eff6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800effa:	2b00      	cmp	r3, #0
 800effc:	d04f      	beq.n	800f09e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f001 fad8 	bl	80105b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	689b      	ldr	r3, [r3, #8]
 800f00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f00e:	2b40      	cmp	r3, #64	; 0x40
 800f010:	d141      	bne.n	800f096 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	3308      	adds	r3, #8
 800f018:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f01c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f020:	e853 3f00 	ldrex	r3, [r3]
 800f024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f028:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f02c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f030:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	3308      	adds	r3, #8
 800f03a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f03e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f046:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f04a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f04e:	e841 2300 	strex	r3, r2, [r1]
 800f052:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f056:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d1d9      	bne.n	800f012 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f062:	2b00      	cmp	r3, #0
 800f064:	d013      	beq.n	800f08e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f06a:	4a14      	ldr	r2, [pc, #80]	; (800f0bc <HAL_UART_IRQHandler+0x2b8>)
 800f06c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f072:	4618      	mov	r0, r3
 800f074:	f7f9 f9ac 	bl	80083d0 <HAL_DMA_Abort_IT>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d017      	beq.n	800f0ae <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f088:	4610      	mov	r0, r2
 800f08a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f08c:	e00f      	b.n	800f0ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f08e:	6878      	ldr	r0, [r7, #4]
 800f090:	f000 fa7e 	bl	800f590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f094:	e00b      	b.n	800f0ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f000 fa7a 	bl	800f590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f09c:	e007      	b.n	800f0ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f000 fa76 	bl	800f590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f0ac:	e23b      	b.n	800f526 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0ae:	bf00      	nop
    return;
 800f0b0:	e239      	b.n	800f526 <HAL_UART_IRQHandler+0x722>
 800f0b2:	bf00      	nop
 800f0b4:	10000001 	.word	0x10000001
 800f0b8:	04000120 	.word	0x04000120
 800f0bc:	0801090d 	.word	0x0801090d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0c4:	2b01      	cmp	r3, #1
 800f0c6:	f040 81ce 	bne.w	800f466 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f0ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0ce:	f003 0310 	and.w	r3, r3, #16
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	f000 81c7 	beq.w	800f466 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f0d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0dc:	f003 0310 	and.w	r3, r3, #16
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	f000 81c0 	beq.w	800f466 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	2210      	movs	r2, #16
 800f0ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	689b      	ldr	r3, [r3, #8]
 800f0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0f8:	2b40      	cmp	r3, #64	; 0x40
 800f0fa:	f040 813b 	bne.w	800f374 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	4a8b      	ldr	r2, [pc, #556]	; (800f334 <HAL_UART_IRQHandler+0x530>)
 800f106:	4293      	cmp	r3, r2
 800f108:	d059      	beq.n	800f1be <HAL_UART_IRQHandler+0x3ba>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4a89      	ldr	r2, [pc, #548]	; (800f338 <HAL_UART_IRQHandler+0x534>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d053      	beq.n	800f1be <HAL_UART_IRQHandler+0x3ba>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	4a87      	ldr	r2, [pc, #540]	; (800f33c <HAL_UART_IRQHandler+0x538>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d04d      	beq.n	800f1be <HAL_UART_IRQHandler+0x3ba>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	4a85      	ldr	r2, [pc, #532]	; (800f340 <HAL_UART_IRQHandler+0x53c>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d047      	beq.n	800f1be <HAL_UART_IRQHandler+0x3ba>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	4a83      	ldr	r2, [pc, #524]	; (800f344 <HAL_UART_IRQHandler+0x540>)
 800f136:	4293      	cmp	r3, r2
 800f138:	d041      	beq.n	800f1be <HAL_UART_IRQHandler+0x3ba>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	4a81      	ldr	r2, [pc, #516]	; (800f348 <HAL_UART_IRQHandler+0x544>)
 800f142:	4293      	cmp	r3, r2
 800f144:	d03b      	beq.n	800f1be <HAL_UART_IRQHandler+0x3ba>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	4a7f      	ldr	r2, [pc, #508]	; (800f34c <HAL_UART_IRQHandler+0x548>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d035      	beq.n	800f1be <HAL_UART_IRQHandler+0x3ba>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4a7d      	ldr	r2, [pc, #500]	; (800f350 <HAL_UART_IRQHandler+0x54c>)
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d02f      	beq.n	800f1be <HAL_UART_IRQHandler+0x3ba>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	4a7b      	ldr	r2, [pc, #492]	; (800f354 <HAL_UART_IRQHandler+0x550>)
 800f166:	4293      	cmp	r3, r2
 800f168:	d029      	beq.n	800f1be <HAL_UART_IRQHandler+0x3ba>
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	4a79      	ldr	r2, [pc, #484]	; (800f358 <HAL_UART_IRQHandler+0x554>)
 800f172:	4293      	cmp	r3, r2
 800f174:	d023      	beq.n	800f1be <HAL_UART_IRQHandler+0x3ba>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4a77      	ldr	r2, [pc, #476]	; (800f35c <HAL_UART_IRQHandler+0x558>)
 800f17e:	4293      	cmp	r3, r2
 800f180:	d01d      	beq.n	800f1be <HAL_UART_IRQHandler+0x3ba>
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	4a75      	ldr	r2, [pc, #468]	; (800f360 <HAL_UART_IRQHandler+0x55c>)
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d017      	beq.n	800f1be <HAL_UART_IRQHandler+0x3ba>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	4a73      	ldr	r2, [pc, #460]	; (800f364 <HAL_UART_IRQHandler+0x560>)
 800f196:	4293      	cmp	r3, r2
 800f198:	d011      	beq.n	800f1be <HAL_UART_IRQHandler+0x3ba>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	4a71      	ldr	r2, [pc, #452]	; (800f368 <HAL_UART_IRQHandler+0x564>)
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d00b      	beq.n	800f1be <HAL_UART_IRQHandler+0x3ba>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	4a6f      	ldr	r2, [pc, #444]	; (800f36c <HAL_UART_IRQHandler+0x568>)
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	d005      	beq.n	800f1be <HAL_UART_IRQHandler+0x3ba>
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	4a6d      	ldr	r2, [pc, #436]	; (800f370 <HAL_UART_IRQHandler+0x56c>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d105      	bne.n	800f1ca <HAL_UART_IRQHandler+0x3c6>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	b29b      	uxth	r3, r3
 800f1c8:	e004      	b.n	800f1d4 <HAL_UART_IRQHandler+0x3d0>
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	b29b      	uxth	r3, r3
 800f1d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f1d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	f000 81a4 	beq.w	800f52a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f1e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	f080 819c 	bcs.w	800f52a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f1f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f200:	69db      	ldr	r3, [r3, #28]
 800f202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f206:	f000 8086 	beq.w	800f316 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f212:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f216:	e853 3f00 	ldrex	r3, [r3]
 800f21a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f21e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f222:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f226:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	461a      	mov	r2, r3
 800f230:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f234:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f238:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f23c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f240:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f244:	e841 2300 	strex	r3, r2, [r1]
 800f248:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f24c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f250:	2b00      	cmp	r3, #0
 800f252:	d1da      	bne.n	800f20a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	3308      	adds	r3, #8
 800f25a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f25c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f25e:	e853 3f00 	ldrex	r3, [r3]
 800f262:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f264:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f266:	f023 0301 	bic.w	r3, r3, #1
 800f26a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	3308      	adds	r3, #8
 800f274:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f278:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f27c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f27e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f280:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f284:	e841 2300 	strex	r3, r2, [r1]
 800f288:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f28a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d1e1      	bne.n	800f254 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	3308      	adds	r3, #8
 800f296:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f298:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f29a:	e853 3f00 	ldrex	r3, [r3]
 800f29e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f2a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	3308      	adds	r3, #8
 800f2b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f2b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f2b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f2ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f2bc:	e841 2300 	strex	r3, r2, [r1]
 800f2c0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f2c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d1e3      	bne.n	800f290 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2220      	movs	r2, #32
 800f2cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2de:	e853 3f00 	ldrex	r3, [r3]
 800f2e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f2e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2e6:	f023 0310 	bic.w	r3, r3, #16
 800f2ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f2f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800f2fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f2fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f300:	e841 2300 	strex	r3, r2, [r1]
 800f304:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d1e4      	bne.n	800f2d6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f310:	4618      	mov	r0, r3
 800f312:	f7f8 fd3f 	bl	8007d94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f322:	b29b      	uxth	r3, r3
 800f324:	1ad3      	subs	r3, r2, r3
 800f326:	b29b      	uxth	r3, r3
 800f328:	4619      	mov	r1, r3
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f7f3 ffb4 	bl	8003298 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f330:	e0fb      	b.n	800f52a <HAL_UART_IRQHandler+0x726>
 800f332:	bf00      	nop
 800f334:	40020010 	.word	0x40020010
 800f338:	40020028 	.word	0x40020028
 800f33c:	40020040 	.word	0x40020040
 800f340:	40020058 	.word	0x40020058
 800f344:	40020070 	.word	0x40020070
 800f348:	40020088 	.word	0x40020088
 800f34c:	400200a0 	.word	0x400200a0
 800f350:	400200b8 	.word	0x400200b8
 800f354:	40020410 	.word	0x40020410
 800f358:	40020428 	.word	0x40020428
 800f35c:	40020440 	.word	0x40020440
 800f360:	40020458 	.word	0x40020458
 800f364:	40020470 	.word	0x40020470
 800f368:	40020488 	.word	0x40020488
 800f36c:	400204a0 	.word	0x400204a0
 800f370:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f380:	b29b      	uxth	r3, r3
 800f382:	1ad3      	subs	r3, r2, r3
 800f384:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f38e:	b29b      	uxth	r3, r3
 800f390:	2b00      	cmp	r3, #0
 800f392:	f000 80cc 	beq.w	800f52e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800f396:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	f000 80c7 	beq.w	800f52e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a8:	e853 3f00 	ldrex	r3, [r3]
 800f3ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f3b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	461a      	mov	r2, r3
 800f3be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f3c2:	647b      	str	r3, [r7, #68]	; 0x44
 800f3c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f3c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3ca:	e841 2300 	strex	r3, r2, [r1]
 800f3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f3d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d1e4      	bne.n	800f3a0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	3308      	adds	r3, #8
 800f3dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e0:	e853 3f00 	ldrex	r3, [r3]
 800f3e4:	623b      	str	r3, [r7, #32]
   return(result);
 800f3e6:	6a3a      	ldr	r2, [r7, #32]
 800f3e8:	4b54      	ldr	r3, [pc, #336]	; (800f53c <HAL_UART_IRQHandler+0x738>)
 800f3ea:	4013      	ands	r3, r2
 800f3ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	3308      	adds	r3, #8
 800f3f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f3fa:	633a      	str	r2, [r7, #48]	; 0x30
 800f3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f402:	e841 2300 	strex	r3, r2, [r1]
 800f406:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d1e3      	bne.n	800f3d6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2220      	movs	r2, #32
 800f412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2200      	movs	r2, #0
 800f420:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f428:	693b      	ldr	r3, [r7, #16]
 800f42a:	e853 3f00 	ldrex	r3, [r3]
 800f42e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f023 0310 	bic.w	r3, r3, #16
 800f436:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	461a      	mov	r2, r3
 800f440:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f444:	61fb      	str	r3, [r7, #28]
 800f446:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f448:	69b9      	ldr	r1, [r7, #24]
 800f44a:	69fa      	ldr	r2, [r7, #28]
 800f44c:	e841 2300 	strex	r3, r2, [r1]
 800f450:	617b      	str	r3, [r7, #20]
   return(result);
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d1e4      	bne.n	800f422 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f45c:	4619      	mov	r1, r3
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	f7f3 ff1a 	bl	8003298 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f464:	e063      	b.n	800f52e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f46a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d00e      	beq.n	800f490 <HAL_UART_IRQHandler+0x68c>
 800f472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d008      	beq.n	800f490 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f486:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f001 fa80 	bl	801098e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f48e:	e051      	b.n	800f534 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d014      	beq.n	800f4c6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f49c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d105      	bne.n	800f4b4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f4a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f4ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d008      	beq.n	800f4c6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d03a      	beq.n	800f532 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	4798      	blx	r3
    }
    return;
 800f4c4:	e035      	b.n	800f532 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f4c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d009      	beq.n	800f4e6 <HAL_UART_IRQHandler+0x6e2>
 800f4d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d003      	beq.n	800f4e6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f001 fa2a 	bl	8010938 <UART_EndTransmit_IT>
    return;
 800f4e4:	e026      	b.n	800f534 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f4e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d009      	beq.n	800f506 <HAL_UART_IRQHandler+0x702>
 800f4f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f4f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d003      	beq.n	800f506 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f001 fa59 	bl	80109b6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f504:	e016      	b.n	800f534 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f50a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d010      	beq.n	800f534 <HAL_UART_IRQHandler+0x730>
 800f512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f516:	2b00      	cmp	r3, #0
 800f518:	da0c      	bge.n	800f534 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f001 fa41 	bl	80109a2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f520:	e008      	b.n	800f534 <HAL_UART_IRQHandler+0x730>
      return;
 800f522:	bf00      	nop
 800f524:	e006      	b.n	800f534 <HAL_UART_IRQHandler+0x730>
    return;
 800f526:	bf00      	nop
 800f528:	e004      	b.n	800f534 <HAL_UART_IRQHandler+0x730>
      return;
 800f52a:	bf00      	nop
 800f52c:	e002      	b.n	800f534 <HAL_UART_IRQHandler+0x730>
      return;
 800f52e:	bf00      	nop
 800f530:	e000      	b.n	800f534 <HAL_UART_IRQHandler+0x730>
    return;
 800f532:	bf00      	nop
  }
}
 800f534:	37e8      	adds	r7, #232	; 0xe8
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}
 800f53a:	bf00      	nop
 800f53c:	effffffe 	.word	0xeffffffe

0800f540 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f540:	b480      	push	{r7}
 800f542:	b083      	sub	sp, #12
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f548:	bf00      	nop
 800f54a:	370c      	adds	r7, #12
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr

0800f554 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f554:	b480      	push	{r7}
 800f556:	b083      	sub	sp, #12
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800f55c:	bf00      	nop
 800f55e:	370c      	adds	r7, #12
 800f560:	46bd      	mov	sp, r7
 800f562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f566:	4770      	bx	lr

0800f568 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f568:	b480      	push	{r7}
 800f56a:	b083      	sub	sp, #12
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f570:	bf00      	nop
 800f572:	370c      	adds	r7, #12
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr

0800f57c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b083      	sub	sp, #12
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f584:	bf00      	nop
 800f586:	370c      	adds	r7, #12
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr

0800f590 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f590:	b480      	push	{r7}
 800f592:	b083      	sub	sp, #12
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f598:	bf00      	nop
 800f59a:	370c      	adds	r7, #12
 800f59c:	46bd      	mov	sp, r7
 800f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a2:	4770      	bx	lr

0800f5a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f5a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f5a8:	b092      	sub	sp, #72	; 0x48
 800f5aa:	af00      	add	r7, sp, #0
 800f5ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	689a      	ldr	r2, [r3, #8]
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	691b      	ldr	r3, [r3, #16]
 800f5bc:	431a      	orrs	r2, r3
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	695b      	ldr	r3, [r3, #20]
 800f5c2:	431a      	orrs	r2, r3
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	69db      	ldr	r3, [r3, #28]
 800f5c8:	4313      	orrs	r3, r2
 800f5ca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	681a      	ldr	r2, [r3, #0]
 800f5d2:	4bbe      	ldr	r3, [pc, #760]	; (800f8cc <UART_SetConfig+0x328>)
 800f5d4:	4013      	ands	r3, r2
 800f5d6:	697a      	ldr	r2, [r7, #20]
 800f5d8:	6812      	ldr	r2, [r2, #0]
 800f5da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f5dc:	430b      	orrs	r3, r1
 800f5de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	68da      	ldr	r2, [r3, #12]
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	430a      	orrs	r2, r1
 800f5f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	699b      	ldr	r3, [r3, #24]
 800f5fa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	4ab3      	ldr	r2, [pc, #716]	; (800f8d0 <UART_SetConfig+0x32c>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d004      	beq.n	800f610 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	6a1b      	ldr	r3, [r3, #32]
 800f60a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f60c:	4313      	orrs	r3, r2
 800f60e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	689a      	ldr	r2, [r3, #8]
 800f616:	4baf      	ldr	r3, [pc, #700]	; (800f8d4 <UART_SetConfig+0x330>)
 800f618:	4013      	ands	r3, r2
 800f61a:	697a      	ldr	r2, [r7, #20]
 800f61c:	6812      	ldr	r2, [r2, #0]
 800f61e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f620:	430b      	orrs	r3, r1
 800f622:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f62a:	f023 010f 	bic.w	r1, r3, #15
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f632:	697b      	ldr	r3, [r7, #20]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	430a      	orrs	r2, r1
 800f638:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	4aa6      	ldr	r2, [pc, #664]	; (800f8d8 <UART_SetConfig+0x334>)
 800f640:	4293      	cmp	r3, r2
 800f642:	d177      	bne.n	800f734 <UART_SetConfig+0x190>
 800f644:	4ba5      	ldr	r3, [pc, #660]	; (800f8dc <UART_SetConfig+0x338>)
 800f646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f648:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f64c:	2b28      	cmp	r3, #40	; 0x28
 800f64e:	d86d      	bhi.n	800f72c <UART_SetConfig+0x188>
 800f650:	a201      	add	r2, pc, #4	; (adr r2, 800f658 <UART_SetConfig+0xb4>)
 800f652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f656:	bf00      	nop
 800f658:	0800f6fd 	.word	0x0800f6fd
 800f65c:	0800f72d 	.word	0x0800f72d
 800f660:	0800f72d 	.word	0x0800f72d
 800f664:	0800f72d 	.word	0x0800f72d
 800f668:	0800f72d 	.word	0x0800f72d
 800f66c:	0800f72d 	.word	0x0800f72d
 800f670:	0800f72d 	.word	0x0800f72d
 800f674:	0800f72d 	.word	0x0800f72d
 800f678:	0800f705 	.word	0x0800f705
 800f67c:	0800f72d 	.word	0x0800f72d
 800f680:	0800f72d 	.word	0x0800f72d
 800f684:	0800f72d 	.word	0x0800f72d
 800f688:	0800f72d 	.word	0x0800f72d
 800f68c:	0800f72d 	.word	0x0800f72d
 800f690:	0800f72d 	.word	0x0800f72d
 800f694:	0800f72d 	.word	0x0800f72d
 800f698:	0800f70d 	.word	0x0800f70d
 800f69c:	0800f72d 	.word	0x0800f72d
 800f6a0:	0800f72d 	.word	0x0800f72d
 800f6a4:	0800f72d 	.word	0x0800f72d
 800f6a8:	0800f72d 	.word	0x0800f72d
 800f6ac:	0800f72d 	.word	0x0800f72d
 800f6b0:	0800f72d 	.word	0x0800f72d
 800f6b4:	0800f72d 	.word	0x0800f72d
 800f6b8:	0800f715 	.word	0x0800f715
 800f6bc:	0800f72d 	.word	0x0800f72d
 800f6c0:	0800f72d 	.word	0x0800f72d
 800f6c4:	0800f72d 	.word	0x0800f72d
 800f6c8:	0800f72d 	.word	0x0800f72d
 800f6cc:	0800f72d 	.word	0x0800f72d
 800f6d0:	0800f72d 	.word	0x0800f72d
 800f6d4:	0800f72d 	.word	0x0800f72d
 800f6d8:	0800f71d 	.word	0x0800f71d
 800f6dc:	0800f72d 	.word	0x0800f72d
 800f6e0:	0800f72d 	.word	0x0800f72d
 800f6e4:	0800f72d 	.word	0x0800f72d
 800f6e8:	0800f72d 	.word	0x0800f72d
 800f6ec:	0800f72d 	.word	0x0800f72d
 800f6f0:	0800f72d 	.word	0x0800f72d
 800f6f4:	0800f72d 	.word	0x0800f72d
 800f6f8:	0800f725 	.word	0x0800f725
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f702:	e222      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f704:	2304      	movs	r3, #4
 800f706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f70a:	e21e      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f70c:	2308      	movs	r3, #8
 800f70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f712:	e21a      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f714:	2310      	movs	r3, #16
 800f716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f71a:	e216      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f71c:	2320      	movs	r3, #32
 800f71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f722:	e212      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f724:	2340      	movs	r3, #64	; 0x40
 800f726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f72a:	e20e      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f72c:	2380      	movs	r3, #128	; 0x80
 800f72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f732:	e20a      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4a69      	ldr	r2, [pc, #420]	; (800f8e0 <UART_SetConfig+0x33c>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d130      	bne.n	800f7a0 <UART_SetConfig+0x1fc>
 800f73e:	4b67      	ldr	r3, [pc, #412]	; (800f8dc <UART_SetConfig+0x338>)
 800f740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f742:	f003 0307 	and.w	r3, r3, #7
 800f746:	2b05      	cmp	r3, #5
 800f748:	d826      	bhi.n	800f798 <UART_SetConfig+0x1f4>
 800f74a:	a201      	add	r2, pc, #4	; (adr r2, 800f750 <UART_SetConfig+0x1ac>)
 800f74c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f750:	0800f769 	.word	0x0800f769
 800f754:	0800f771 	.word	0x0800f771
 800f758:	0800f779 	.word	0x0800f779
 800f75c:	0800f781 	.word	0x0800f781
 800f760:	0800f789 	.word	0x0800f789
 800f764:	0800f791 	.word	0x0800f791
 800f768:	2300      	movs	r3, #0
 800f76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f76e:	e1ec      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f770:	2304      	movs	r3, #4
 800f772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f776:	e1e8      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f778:	2308      	movs	r3, #8
 800f77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f77e:	e1e4      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f780:	2310      	movs	r3, #16
 800f782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f786:	e1e0      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f788:	2320      	movs	r3, #32
 800f78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f78e:	e1dc      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f790:	2340      	movs	r3, #64	; 0x40
 800f792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f796:	e1d8      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f798:	2380      	movs	r3, #128	; 0x80
 800f79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f79e:	e1d4      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	4a4f      	ldr	r2, [pc, #316]	; (800f8e4 <UART_SetConfig+0x340>)
 800f7a6:	4293      	cmp	r3, r2
 800f7a8:	d130      	bne.n	800f80c <UART_SetConfig+0x268>
 800f7aa:	4b4c      	ldr	r3, [pc, #304]	; (800f8dc <UART_SetConfig+0x338>)
 800f7ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7ae:	f003 0307 	and.w	r3, r3, #7
 800f7b2:	2b05      	cmp	r3, #5
 800f7b4:	d826      	bhi.n	800f804 <UART_SetConfig+0x260>
 800f7b6:	a201      	add	r2, pc, #4	; (adr r2, 800f7bc <UART_SetConfig+0x218>)
 800f7b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7bc:	0800f7d5 	.word	0x0800f7d5
 800f7c0:	0800f7dd 	.word	0x0800f7dd
 800f7c4:	0800f7e5 	.word	0x0800f7e5
 800f7c8:	0800f7ed 	.word	0x0800f7ed
 800f7cc:	0800f7f5 	.word	0x0800f7f5
 800f7d0:	0800f7fd 	.word	0x0800f7fd
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7da:	e1b6      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f7dc:	2304      	movs	r3, #4
 800f7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7e2:	e1b2      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f7e4:	2308      	movs	r3, #8
 800f7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ea:	e1ae      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f7ec:	2310      	movs	r3, #16
 800f7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7f2:	e1aa      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f7f4:	2320      	movs	r3, #32
 800f7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7fa:	e1a6      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f7fc:	2340      	movs	r3, #64	; 0x40
 800f7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f802:	e1a2      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f804:	2380      	movs	r3, #128	; 0x80
 800f806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f80a:	e19e      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	4a35      	ldr	r2, [pc, #212]	; (800f8e8 <UART_SetConfig+0x344>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d130      	bne.n	800f878 <UART_SetConfig+0x2d4>
 800f816:	4b31      	ldr	r3, [pc, #196]	; (800f8dc <UART_SetConfig+0x338>)
 800f818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f81a:	f003 0307 	and.w	r3, r3, #7
 800f81e:	2b05      	cmp	r3, #5
 800f820:	d826      	bhi.n	800f870 <UART_SetConfig+0x2cc>
 800f822:	a201      	add	r2, pc, #4	; (adr r2, 800f828 <UART_SetConfig+0x284>)
 800f824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f828:	0800f841 	.word	0x0800f841
 800f82c:	0800f849 	.word	0x0800f849
 800f830:	0800f851 	.word	0x0800f851
 800f834:	0800f859 	.word	0x0800f859
 800f838:	0800f861 	.word	0x0800f861
 800f83c:	0800f869 	.word	0x0800f869
 800f840:	2300      	movs	r3, #0
 800f842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f846:	e180      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f848:	2304      	movs	r3, #4
 800f84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f84e:	e17c      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f850:	2308      	movs	r3, #8
 800f852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f856:	e178      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f858:	2310      	movs	r3, #16
 800f85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f85e:	e174      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f860:	2320      	movs	r3, #32
 800f862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f866:	e170      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f868:	2340      	movs	r3, #64	; 0x40
 800f86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f86e:	e16c      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f870:	2380      	movs	r3, #128	; 0x80
 800f872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f876:	e168      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	4a1b      	ldr	r2, [pc, #108]	; (800f8ec <UART_SetConfig+0x348>)
 800f87e:	4293      	cmp	r3, r2
 800f880:	d142      	bne.n	800f908 <UART_SetConfig+0x364>
 800f882:	4b16      	ldr	r3, [pc, #88]	; (800f8dc <UART_SetConfig+0x338>)
 800f884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f886:	f003 0307 	and.w	r3, r3, #7
 800f88a:	2b05      	cmp	r3, #5
 800f88c:	d838      	bhi.n	800f900 <UART_SetConfig+0x35c>
 800f88e:	a201      	add	r2, pc, #4	; (adr r2, 800f894 <UART_SetConfig+0x2f0>)
 800f890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f894:	0800f8ad 	.word	0x0800f8ad
 800f898:	0800f8b5 	.word	0x0800f8b5
 800f89c:	0800f8bd 	.word	0x0800f8bd
 800f8a0:	0800f8c5 	.word	0x0800f8c5
 800f8a4:	0800f8f1 	.word	0x0800f8f1
 800f8a8:	0800f8f9 	.word	0x0800f8f9
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8b2:	e14a      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f8b4:	2304      	movs	r3, #4
 800f8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ba:	e146      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f8bc:	2308      	movs	r3, #8
 800f8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8c2:	e142      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f8c4:	2310      	movs	r3, #16
 800f8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ca:	e13e      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f8cc:	cfff69f3 	.word	0xcfff69f3
 800f8d0:	58000c00 	.word	0x58000c00
 800f8d4:	11fff4ff 	.word	0x11fff4ff
 800f8d8:	40011000 	.word	0x40011000
 800f8dc:	58024400 	.word	0x58024400
 800f8e0:	40004400 	.word	0x40004400
 800f8e4:	40004800 	.word	0x40004800
 800f8e8:	40004c00 	.word	0x40004c00
 800f8ec:	40005000 	.word	0x40005000
 800f8f0:	2320      	movs	r3, #32
 800f8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8f6:	e128      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f8f8:	2340      	movs	r3, #64	; 0x40
 800f8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8fe:	e124      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f900:	2380      	movs	r3, #128	; 0x80
 800f902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f906:	e120      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	4acb      	ldr	r2, [pc, #812]	; (800fc3c <UART_SetConfig+0x698>)
 800f90e:	4293      	cmp	r3, r2
 800f910:	d176      	bne.n	800fa00 <UART_SetConfig+0x45c>
 800f912:	4bcb      	ldr	r3, [pc, #812]	; (800fc40 <UART_SetConfig+0x69c>)
 800f914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f91a:	2b28      	cmp	r3, #40	; 0x28
 800f91c:	d86c      	bhi.n	800f9f8 <UART_SetConfig+0x454>
 800f91e:	a201      	add	r2, pc, #4	; (adr r2, 800f924 <UART_SetConfig+0x380>)
 800f920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f924:	0800f9c9 	.word	0x0800f9c9
 800f928:	0800f9f9 	.word	0x0800f9f9
 800f92c:	0800f9f9 	.word	0x0800f9f9
 800f930:	0800f9f9 	.word	0x0800f9f9
 800f934:	0800f9f9 	.word	0x0800f9f9
 800f938:	0800f9f9 	.word	0x0800f9f9
 800f93c:	0800f9f9 	.word	0x0800f9f9
 800f940:	0800f9f9 	.word	0x0800f9f9
 800f944:	0800f9d1 	.word	0x0800f9d1
 800f948:	0800f9f9 	.word	0x0800f9f9
 800f94c:	0800f9f9 	.word	0x0800f9f9
 800f950:	0800f9f9 	.word	0x0800f9f9
 800f954:	0800f9f9 	.word	0x0800f9f9
 800f958:	0800f9f9 	.word	0x0800f9f9
 800f95c:	0800f9f9 	.word	0x0800f9f9
 800f960:	0800f9f9 	.word	0x0800f9f9
 800f964:	0800f9d9 	.word	0x0800f9d9
 800f968:	0800f9f9 	.word	0x0800f9f9
 800f96c:	0800f9f9 	.word	0x0800f9f9
 800f970:	0800f9f9 	.word	0x0800f9f9
 800f974:	0800f9f9 	.word	0x0800f9f9
 800f978:	0800f9f9 	.word	0x0800f9f9
 800f97c:	0800f9f9 	.word	0x0800f9f9
 800f980:	0800f9f9 	.word	0x0800f9f9
 800f984:	0800f9e1 	.word	0x0800f9e1
 800f988:	0800f9f9 	.word	0x0800f9f9
 800f98c:	0800f9f9 	.word	0x0800f9f9
 800f990:	0800f9f9 	.word	0x0800f9f9
 800f994:	0800f9f9 	.word	0x0800f9f9
 800f998:	0800f9f9 	.word	0x0800f9f9
 800f99c:	0800f9f9 	.word	0x0800f9f9
 800f9a0:	0800f9f9 	.word	0x0800f9f9
 800f9a4:	0800f9e9 	.word	0x0800f9e9
 800f9a8:	0800f9f9 	.word	0x0800f9f9
 800f9ac:	0800f9f9 	.word	0x0800f9f9
 800f9b0:	0800f9f9 	.word	0x0800f9f9
 800f9b4:	0800f9f9 	.word	0x0800f9f9
 800f9b8:	0800f9f9 	.word	0x0800f9f9
 800f9bc:	0800f9f9 	.word	0x0800f9f9
 800f9c0:	0800f9f9 	.word	0x0800f9f9
 800f9c4:	0800f9f1 	.word	0x0800f9f1
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ce:	e0bc      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f9d0:	2304      	movs	r3, #4
 800f9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9d6:	e0b8      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f9d8:	2308      	movs	r3, #8
 800f9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9de:	e0b4      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f9e0:	2310      	movs	r3, #16
 800f9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9e6:	e0b0      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f9e8:	2320      	movs	r3, #32
 800f9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ee:	e0ac      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f9f0:	2340      	movs	r3, #64	; 0x40
 800f9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9f6:	e0a8      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800f9f8:	2380      	movs	r3, #128	; 0x80
 800f9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9fe:	e0a4      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4a8f      	ldr	r2, [pc, #572]	; (800fc44 <UART_SetConfig+0x6a0>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d130      	bne.n	800fa6c <UART_SetConfig+0x4c8>
 800fa0a:	4b8d      	ldr	r3, [pc, #564]	; (800fc40 <UART_SetConfig+0x69c>)
 800fa0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa0e:	f003 0307 	and.w	r3, r3, #7
 800fa12:	2b05      	cmp	r3, #5
 800fa14:	d826      	bhi.n	800fa64 <UART_SetConfig+0x4c0>
 800fa16:	a201      	add	r2, pc, #4	; (adr r2, 800fa1c <UART_SetConfig+0x478>)
 800fa18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa1c:	0800fa35 	.word	0x0800fa35
 800fa20:	0800fa3d 	.word	0x0800fa3d
 800fa24:	0800fa45 	.word	0x0800fa45
 800fa28:	0800fa4d 	.word	0x0800fa4d
 800fa2c:	0800fa55 	.word	0x0800fa55
 800fa30:	0800fa5d 	.word	0x0800fa5d
 800fa34:	2300      	movs	r3, #0
 800fa36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa3a:	e086      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fa3c:	2304      	movs	r3, #4
 800fa3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa42:	e082      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fa44:	2308      	movs	r3, #8
 800fa46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa4a:	e07e      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fa4c:	2310      	movs	r3, #16
 800fa4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa52:	e07a      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fa54:	2320      	movs	r3, #32
 800fa56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa5a:	e076      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fa5c:	2340      	movs	r3, #64	; 0x40
 800fa5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa62:	e072      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fa64:	2380      	movs	r3, #128	; 0x80
 800fa66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa6a:	e06e      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	4a75      	ldr	r2, [pc, #468]	; (800fc48 <UART_SetConfig+0x6a4>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d130      	bne.n	800fad8 <UART_SetConfig+0x534>
 800fa76:	4b72      	ldr	r3, [pc, #456]	; (800fc40 <UART_SetConfig+0x69c>)
 800fa78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa7a:	f003 0307 	and.w	r3, r3, #7
 800fa7e:	2b05      	cmp	r3, #5
 800fa80:	d826      	bhi.n	800fad0 <UART_SetConfig+0x52c>
 800fa82:	a201      	add	r2, pc, #4	; (adr r2, 800fa88 <UART_SetConfig+0x4e4>)
 800fa84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa88:	0800faa1 	.word	0x0800faa1
 800fa8c:	0800faa9 	.word	0x0800faa9
 800fa90:	0800fab1 	.word	0x0800fab1
 800fa94:	0800fab9 	.word	0x0800fab9
 800fa98:	0800fac1 	.word	0x0800fac1
 800fa9c:	0800fac9 	.word	0x0800fac9
 800faa0:	2300      	movs	r3, #0
 800faa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faa6:	e050      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800faa8:	2304      	movs	r3, #4
 800faaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faae:	e04c      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fab0:	2308      	movs	r3, #8
 800fab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fab6:	e048      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fab8:	2310      	movs	r3, #16
 800faba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fabe:	e044      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fac0:	2320      	movs	r3, #32
 800fac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fac6:	e040      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fac8:	2340      	movs	r3, #64	; 0x40
 800faca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800face:	e03c      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fad0:	2380      	movs	r3, #128	; 0x80
 800fad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fad6:	e038      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	4a5b      	ldr	r2, [pc, #364]	; (800fc4c <UART_SetConfig+0x6a8>)
 800fade:	4293      	cmp	r3, r2
 800fae0:	d130      	bne.n	800fb44 <UART_SetConfig+0x5a0>
 800fae2:	4b57      	ldr	r3, [pc, #348]	; (800fc40 <UART_SetConfig+0x69c>)
 800fae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fae6:	f003 0307 	and.w	r3, r3, #7
 800faea:	2b05      	cmp	r3, #5
 800faec:	d826      	bhi.n	800fb3c <UART_SetConfig+0x598>
 800faee:	a201      	add	r2, pc, #4	; (adr r2, 800faf4 <UART_SetConfig+0x550>)
 800faf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faf4:	0800fb0d 	.word	0x0800fb0d
 800faf8:	0800fb15 	.word	0x0800fb15
 800fafc:	0800fb1d 	.word	0x0800fb1d
 800fb00:	0800fb25 	.word	0x0800fb25
 800fb04:	0800fb2d 	.word	0x0800fb2d
 800fb08:	0800fb35 	.word	0x0800fb35
 800fb0c:	2302      	movs	r3, #2
 800fb0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb12:	e01a      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fb14:	2304      	movs	r3, #4
 800fb16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb1a:	e016      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fb1c:	2308      	movs	r3, #8
 800fb1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb22:	e012      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fb24:	2310      	movs	r3, #16
 800fb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb2a:	e00e      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fb2c:	2320      	movs	r3, #32
 800fb2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb32:	e00a      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fb34:	2340      	movs	r3, #64	; 0x40
 800fb36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb3a:	e006      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fb3c:	2380      	movs	r3, #128	; 0x80
 800fb3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb42:	e002      	b.n	800fb4a <UART_SetConfig+0x5a6>
 800fb44:	2380      	movs	r3, #128	; 0x80
 800fb46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	4a3f      	ldr	r2, [pc, #252]	; (800fc4c <UART_SetConfig+0x6a8>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	f040 80f8 	bne.w	800fd46 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fb56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fb5a:	2b20      	cmp	r3, #32
 800fb5c:	dc46      	bgt.n	800fbec <UART_SetConfig+0x648>
 800fb5e:	2b02      	cmp	r3, #2
 800fb60:	f2c0 8082 	blt.w	800fc68 <UART_SetConfig+0x6c4>
 800fb64:	3b02      	subs	r3, #2
 800fb66:	2b1e      	cmp	r3, #30
 800fb68:	d87e      	bhi.n	800fc68 <UART_SetConfig+0x6c4>
 800fb6a:	a201      	add	r2, pc, #4	; (adr r2, 800fb70 <UART_SetConfig+0x5cc>)
 800fb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb70:	0800fbf3 	.word	0x0800fbf3
 800fb74:	0800fc69 	.word	0x0800fc69
 800fb78:	0800fbfb 	.word	0x0800fbfb
 800fb7c:	0800fc69 	.word	0x0800fc69
 800fb80:	0800fc69 	.word	0x0800fc69
 800fb84:	0800fc69 	.word	0x0800fc69
 800fb88:	0800fc0b 	.word	0x0800fc0b
 800fb8c:	0800fc69 	.word	0x0800fc69
 800fb90:	0800fc69 	.word	0x0800fc69
 800fb94:	0800fc69 	.word	0x0800fc69
 800fb98:	0800fc69 	.word	0x0800fc69
 800fb9c:	0800fc69 	.word	0x0800fc69
 800fba0:	0800fc69 	.word	0x0800fc69
 800fba4:	0800fc69 	.word	0x0800fc69
 800fba8:	0800fc1b 	.word	0x0800fc1b
 800fbac:	0800fc69 	.word	0x0800fc69
 800fbb0:	0800fc69 	.word	0x0800fc69
 800fbb4:	0800fc69 	.word	0x0800fc69
 800fbb8:	0800fc69 	.word	0x0800fc69
 800fbbc:	0800fc69 	.word	0x0800fc69
 800fbc0:	0800fc69 	.word	0x0800fc69
 800fbc4:	0800fc69 	.word	0x0800fc69
 800fbc8:	0800fc69 	.word	0x0800fc69
 800fbcc:	0800fc69 	.word	0x0800fc69
 800fbd0:	0800fc69 	.word	0x0800fc69
 800fbd4:	0800fc69 	.word	0x0800fc69
 800fbd8:	0800fc69 	.word	0x0800fc69
 800fbdc:	0800fc69 	.word	0x0800fc69
 800fbe0:	0800fc69 	.word	0x0800fc69
 800fbe4:	0800fc69 	.word	0x0800fc69
 800fbe8:	0800fc5b 	.word	0x0800fc5b
 800fbec:	2b40      	cmp	r3, #64	; 0x40
 800fbee:	d037      	beq.n	800fc60 <UART_SetConfig+0x6bc>
 800fbf0:	e03a      	b.n	800fc68 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fbf2:	f7fc fa63 	bl	800c0bc <HAL_RCCEx_GetD3PCLK1Freq>
 800fbf6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fbf8:	e03c      	b.n	800fc74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fbfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7fc fa72 	bl	800c0e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc08:	e034      	b.n	800fc74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc0a:	f107 0318 	add.w	r3, r7, #24
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f7fc fbbe 	bl	800c390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc14:	69fb      	ldr	r3, [r7, #28]
 800fc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc18:	e02c      	b.n	800fc74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc1a:	4b09      	ldr	r3, [pc, #36]	; (800fc40 <UART_SetConfig+0x69c>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	f003 0320 	and.w	r3, r3, #32
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d016      	beq.n	800fc54 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc26:	4b06      	ldr	r3, [pc, #24]	; (800fc40 <UART_SetConfig+0x69c>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	08db      	lsrs	r3, r3, #3
 800fc2c:	f003 0303 	and.w	r3, r3, #3
 800fc30:	4a07      	ldr	r2, [pc, #28]	; (800fc50 <UART_SetConfig+0x6ac>)
 800fc32:	fa22 f303 	lsr.w	r3, r2, r3
 800fc36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc38:	e01c      	b.n	800fc74 <UART_SetConfig+0x6d0>
 800fc3a:	bf00      	nop
 800fc3c:	40011400 	.word	0x40011400
 800fc40:	58024400 	.word	0x58024400
 800fc44:	40007800 	.word	0x40007800
 800fc48:	40007c00 	.word	0x40007c00
 800fc4c:	58000c00 	.word	0x58000c00
 800fc50:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800fc54:	4b9d      	ldr	r3, [pc, #628]	; (800fecc <UART_SetConfig+0x928>)
 800fc56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc58:	e00c      	b.n	800fc74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc5a:	4b9d      	ldr	r3, [pc, #628]	; (800fed0 <UART_SetConfig+0x92c>)
 800fc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc5e:	e009      	b.n	800fc74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc66:	e005      	b.n	800fc74 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fc72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fc74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	f000 81de 	beq.w	8010038 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc80:	4a94      	ldr	r2, [pc, #592]	; (800fed4 <UART_SetConfig+0x930>)
 800fc82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc86:	461a      	mov	r2, r3
 800fc88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc8a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc8e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	685a      	ldr	r2, [r3, #4]
 800fc94:	4613      	mov	r3, r2
 800fc96:	005b      	lsls	r3, r3, #1
 800fc98:	4413      	add	r3, r2
 800fc9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d305      	bcc.n	800fcac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	685b      	ldr	r3, [r3, #4]
 800fca4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d903      	bls.n	800fcb4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800fcac:	2301      	movs	r3, #1
 800fcae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fcb2:	e1c1      	b.n	8010038 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fcb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	60bb      	str	r3, [r7, #8]
 800fcba:	60fa      	str	r2, [r7, #12]
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcc0:	4a84      	ldr	r2, [pc, #528]	; (800fed4 <UART_SetConfig+0x930>)
 800fcc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	2200      	movs	r2, #0
 800fcca:	603b      	str	r3, [r7, #0]
 800fccc:	607a      	str	r2, [r7, #4]
 800fcce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fcd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fcd6:	f7f0 fb5b 	bl	8000390 <__aeabi_uldivmod>
 800fcda:	4602      	mov	r2, r0
 800fcdc:	460b      	mov	r3, r1
 800fcde:	4610      	mov	r0, r2
 800fce0:	4619      	mov	r1, r3
 800fce2:	f04f 0200 	mov.w	r2, #0
 800fce6:	f04f 0300 	mov.w	r3, #0
 800fcea:	020b      	lsls	r3, r1, #8
 800fcec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fcf0:	0202      	lsls	r2, r0, #8
 800fcf2:	6979      	ldr	r1, [r7, #20]
 800fcf4:	6849      	ldr	r1, [r1, #4]
 800fcf6:	0849      	lsrs	r1, r1, #1
 800fcf8:	2000      	movs	r0, #0
 800fcfa:	460c      	mov	r4, r1
 800fcfc:	4605      	mov	r5, r0
 800fcfe:	eb12 0804 	adds.w	r8, r2, r4
 800fd02:	eb43 0905 	adc.w	r9, r3, r5
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	685b      	ldr	r3, [r3, #4]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	469a      	mov	sl, r3
 800fd0e:	4693      	mov	fp, r2
 800fd10:	4652      	mov	r2, sl
 800fd12:	465b      	mov	r3, fp
 800fd14:	4640      	mov	r0, r8
 800fd16:	4649      	mov	r1, r9
 800fd18:	f7f0 fb3a 	bl	8000390 <__aeabi_uldivmod>
 800fd1c:	4602      	mov	r2, r0
 800fd1e:	460b      	mov	r3, r1
 800fd20:	4613      	mov	r3, r2
 800fd22:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd2a:	d308      	bcc.n	800fd3e <UART_SetConfig+0x79a>
 800fd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fd32:	d204      	bcs.n	800fd3e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd3a:	60da      	str	r2, [r3, #12]
 800fd3c:	e17c      	b.n	8010038 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fd3e:	2301      	movs	r3, #1
 800fd40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fd44:	e178      	b.n	8010038 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	69db      	ldr	r3, [r3, #28]
 800fd4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd4e:	f040 80c5 	bne.w	800fedc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fd52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fd56:	2b20      	cmp	r3, #32
 800fd58:	dc48      	bgt.n	800fdec <UART_SetConfig+0x848>
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	db7b      	blt.n	800fe56 <UART_SetConfig+0x8b2>
 800fd5e:	2b20      	cmp	r3, #32
 800fd60:	d879      	bhi.n	800fe56 <UART_SetConfig+0x8b2>
 800fd62:	a201      	add	r2, pc, #4	; (adr r2, 800fd68 <UART_SetConfig+0x7c4>)
 800fd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd68:	0800fdf3 	.word	0x0800fdf3
 800fd6c:	0800fdfb 	.word	0x0800fdfb
 800fd70:	0800fe57 	.word	0x0800fe57
 800fd74:	0800fe57 	.word	0x0800fe57
 800fd78:	0800fe03 	.word	0x0800fe03
 800fd7c:	0800fe57 	.word	0x0800fe57
 800fd80:	0800fe57 	.word	0x0800fe57
 800fd84:	0800fe57 	.word	0x0800fe57
 800fd88:	0800fe13 	.word	0x0800fe13
 800fd8c:	0800fe57 	.word	0x0800fe57
 800fd90:	0800fe57 	.word	0x0800fe57
 800fd94:	0800fe57 	.word	0x0800fe57
 800fd98:	0800fe57 	.word	0x0800fe57
 800fd9c:	0800fe57 	.word	0x0800fe57
 800fda0:	0800fe57 	.word	0x0800fe57
 800fda4:	0800fe57 	.word	0x0800fe57
 800fda8:	0800fe23 	.word	0x0800fe23
 800fdac:	0800fe57 	.word	0x0800fe57
 800fdb0:	0800fe57 	.word	0x0800fe57
 800fdb4:	0800fe57 	.word	0x0800fe57
 800fdb8:	0800fe57 	.word	0x0800fe57
 800fdbc:	0800fe57 	.word	0x0800fe57
 800fdc0:	0800fe57 	.word	0x0800fe57
 800fdc4:	0800fe57 	.word	0x0800fe57
 800fdc8:	0800fe57 	.word	0x0800fe57
 800fdcc:	0800fe57 	.word	0x0800fe57
 800fdd0:	0800fe57 	.word	0x0800fe57
 800fdd4:	0800fe57 	.word	0x0800fe57
 800fdd8:	0800fe57 	.word	0x0800fe57
 800fddc:	0800fe57 	.word	0x0800fe57
 800fde0:	0800fe57 	.word	0x0800fe57
 800fde4:	0800fe57 	.word	0x0800fe57
 800fde8:	0800fe49 	.word	0x0800fe49
 800fdec:	2b40      	cmp	r3, #64	; 0x40
 800fdee:	d02e      	beq.n	800fe4e <UART_SetConfig+0x8aa>
 800fdf0:	e031      	b.n	800fe56 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fdf2:	f7fb f9f1 	bl	800b1d8 <HAL_RCC_GetPCLK1Freq>
 800fdf6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fdf8:	e033      	b.n	800fe62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fdfa:	f7fb fa03 	bl	800b204 <HAL_RCC_GetPCLK2Freq>
 800fdfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fe00:	e02f      	b.n	800fe62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7fc f96e 	bl	800c0e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe10:	e027      	b.n	800fe62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe12:	f107 0318 	add.w	r3, r7, #24
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7fc faba 	bl	800c390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe1c:	69fb      	ldr	r3, [r7, #28]
 800fe1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe20:	e01f      	b.n	800fe62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe22:	4b2d      	ldr	r3, [pc, #180]	; (800fed8 <UART_SetConfig+0x934>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f003 0320 	and.w	r3, r3, #32
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d009      	beq.n	800fe42 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe2e:	4b2a      	ldr	r3, [pc, #168]	; (800fed8 <UART_SetConfig+0x934>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	08db      	lsrs	r3, r3, #3
 800fe34:	f003 0303 	and.w	r3, r3, #3
 800fe38:	4a24      	ldr	r2, [pc, #144]	; (800fecc <UART_SetConfig+0x928>)
 800fe3a:	fa22 f303 	lsr.w	r3, r2, r3
 800fe3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fe40:	e00f      	b.n	800fe62 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fe42:	4b22      	ldr	r3, [pc, #136]	; (800fecc <UART_SetConfig+0x928>)
 800fe44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe46:	e00c      	b.n	800fe62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fe48:	4b21      	ldr	r3, [pc, #132]	; (800fed0 <UART_SetConfig+0x92c>)
 800fe4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe4c:	e009      	b.n	800fe62 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fe52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe54:	e005      	b.n	800fe62 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fe56:	2300      	movs	r3, #0
 800fe58:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fe60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fe62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	f000 80e7 	beq.w	8010038 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe6e:	4a19      	ldr	r2, [pc, #100]	; (800fed4 <UART_SetConfig+0x930>)
 800fe70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe74:	461a      	mov	r2, r3
 800fe76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe78:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe7c:	005a      	lsls	r2, r3, #1
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	085b      	lsrs	r3, r3, #1
 800fe84:	441a      	add	r2, r3
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe8e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe92:	2b0f      	cmp	r3, #15
 800fe94:	d916      	bls.n	800fec4 <UART_SetConfig+0x920>
 800fe96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe9c:	d212      	bcs.n	800fec4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fe9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea0:	b29b      	uxth	r3, r3
 800fea2:	f023 030f 	bic.w	r3, r3, #15
 800fea6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feaa:	085b      	lsrs	r3, r3, #1
 800feac:	b29b      	uxth	r3, r3
 800feae:	f003 0307 	and.w	r3, r3, #7
 800feb2:	b29a      	uxth	r2, r3
 800feb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800feb6:	4313      	orrs	r3, r2
 800feb8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fec0:	60da      	str	r2, [r3, #12]
 800fec2:	e0b9      	b.n	8010038 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fec4:	2301      	movs	r3, #1
 800fec6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800feca:	e0b5      	b.n	8010038 <UART_SetConfig+0xa94>
 800fecc:	03d09000 	.word	0x03d09000
 800fed0:	003d0900 	.word	0x003d0900
 800fed4:	08014c98 	.word	0x08014c98
 800fed8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800fedc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fee0:	2b20      	cmp	r3, #32
 800fee2:	dc49      	bgt.n	800ff78 <UART_SetConfig+0x9d4>
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	db7c      	blt.n	800ffe2 <UART_SetConfig+0xa3e>
 800fee8:	2b20      	cmp	r3, #32
 800feea:	d87a      	bhi.n	800ffe2 <UART_SetConfig+0xa3e>
 800feec:	a201      	add	r2, pc, #4	; (adr r2, 800fef4 <UART_SetConfig+0x950>)
 800feee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fef2:	bf00      	nop
 800fef4:	0800ff7f 	.word	0x0800ff7f
 800fef8:	0800ff87 	.word	0x0800ff87
 800fefc:	0800ffe3 	.word	0x0800ffe3
 800ff00:	0800ffe3 	.word	0x0800ffe3
 800ff04:	0800ff8f 	.word	0x0800ff8f
 800ff08:	0800ffe3 	.word	0x0800ffe3
 800ff0c:	0800ffe3 	.word	0x0800ffe3
 800ff10:	0800ffe3 	.word	0x0800ffe3
 800ff14:	0800ff9f 	.word	0x0800ff9f
 800ff18:	0800ffe3 	.word	0x0800ffe3
 800ff1c:	0800ffe3 	.word	0x0800ffe3
 800ff20:	0800ffe3 	.word	0x0800ffe3
 800ff24:	0800ffe3 	.word	0x0800ffe3
 800ff28:	0800ffe3 	.word	0x0800ffe3
 800ff2c:	0800ffe3 	.word	0x0800ffe3
 800ff30:	0800ffe3 	.word	0x0800ffe3
 800ff34:	0800ffaf 	.word	0x0800ffaf
 800ff38:	0800ffe3 	.word	0x0800ffe3
 800ff3c:	0800ffe3 	.word	0x0800ffe3
 800ff40:	0800ffe3 	.word	0x0800ffe3
 800ff44:	0800ffe3 	.word	0x0800ffe3
 800ff48:	0800ffe3 	.word	0x0800ffe3
 800ff4c:	0800ffe3 	.word	0x0800ffe3
 800ff50:	0800ffe3 	.word	0x0800ffe3
 800ff54:	0800ffe3 	.word	0x0800ffe3
 800ff58:	0800ffe3 	.word	0x0800ffe3
 800ff5c:	0800ffe3 	.word	0x0800ffe3
 800ff60:	0800ffe3 	.word	0x0800ffe3
 800ff64:	0800ffe3 	.word	0x0800ffe3
 800ff68:	0800ffe3 	.word	0x0800ffe3
 800ff6c:	0800ffe3 	.word	0x0800ffe3
 800ff70:	0800ffe3 	.word	0x0800ffe3
 800ff74:	0800ffd5 	.word	0x0800ffd5
 800ff78:	2b40      	cmp	r3, #64	; 0x40
 800ff7a:	d02e      	beq.n	800ffda <UART_SetConfig+0xa36>
 800ff7c:	e031      	b.n	800ffe2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ff7e:	f7fb f92b 	bl	800b1d8 <HAL_RCC_GetPCLK1Freq>
 800ff82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ff84:	e033      	b.n	800ffee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ff86:	f7fb f93d 	bl	800b204 <HAL_RCC_GetPCLK2Freq>
 800ff8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ff8c:	e02f      	b.n	800ffee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ff8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fc f8a8 	bl	800c0e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff9c:	e027      	b.n	800ffee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff9e:	f107 0318 	add.w	r3, r7, #24
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fc f9f4 	bl	800c390 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffac:	e01f      	b.n	800ffee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ffae:	4b2d      	ldr	r3, [pc, #180]	; (8010064 <UART_SetConfig+0xac0>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	f003 0320 	and.w	r3, r3, #32
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d009      	beq.n	800ffce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ffba:	4b2a      	ldr	r3, [pc, #168]	; (8010064 <UART_SetConfig+0xac0>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	08db      	lsrs	r3, r3, #3
 800ffc0:	f003 0303 	and.w	r3, r3, #3
 800ffc4:	4a28      	ldr	r2, [pc, #160]	; (8010068 <UART_SetConfig+0xac4>)
 800ffc6:	fa22 f303 	lsr.w	r3, r2, r3
 800ffca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ffcc:	e00f      	b.n	800ffee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ffce:	4b26      	ldr	r3, [pc, #152]	; (8010068 <UART_SetConfig+0xac4>)
 800ffd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffd2:	e00c      	b.n	800ffee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ffd4:	4b25      	ldr	r3, [pc, #148]	; (801006c <UART_SetConfig+0xac8>)
 800ffd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffd8:	e009      	b.n	800ffee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ffda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ffde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ffe0:	e005      	b.n	800ffee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ffec:	bf00      	nop
    }

    if (pclk != 0U)
 800ffee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d021      	beq.n	8010038 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff8:	4a1d      	ldr	r2, [pc, #116]	; (8010070 <UART_SetConfig+0xacc>)
 800fffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fffe:	461a      	mov	r2, r3
 8010000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010002:	fbb3 f2f2 	udiv	r2, r3, r2
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	685b      	ldr	r3, [r3, #4]
 801000a:	085b      	lsrs	r3, r3, #1
 801000c:	441a      	add	r2, r3
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	685b      	ldr	r3, [r3, #4]
 8010012:	fbb2 f3f3 	udiv	r3, r2, r3
 8010016:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001a:	2b0f      	cmp	r3, #15
 801001c:	d909      	bls.n	8010032 <UART_SetConfig+0xa8e>
 801001e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010024:	d205      	bcs.n	8010032 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010028:	b29a      	uxth	r2, r3
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	60da      	str	r2, [r3, #12]
 8010030:	e002      	b.n	8010038 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8010032:	2301      	movs	r3, #1
 8010034:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	2201      	movs	r2, #1
 801003c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010040:	697b      	ldr	r3, [r7, #20]
 8010042:	2201      	movs	r2, #1
 8010044:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	2200      	movs	r2, #0
 801004c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	2200      	movs	r2, #0
 8010052:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8010054:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010058:	4618      	mov	r0, r3
 801005a:	3748      	adds	r7, #72	; 0x48
 801005c:	46bd      	mov	sp, r7
 801005e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010062:	bf00      	nop
 8010064:	58024400 	.word	0x58024400
 8010068:	03d09000 	.word	0x03d09000
 801006c:	003d0900 	.word	0x003d0900
 8010070:	08014c98 	.word	0x08014c98

08010074 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010074:	b480      	push	{r7}
 8010076:	b083      	sub	sp, #12
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010080:	f003 0301 	and.w	r3, r3, #1
 8010084:	2b00      	cmp	r3, #0
 8010086:	d00a      	beq.n	801009e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	430a      	orrs	r2, r1
 801009c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100a2:	f003 0302 	and.w	r3, r3, #2
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d00a      	beq.n	80100c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	430a      	orrs	r2, r1
 80100be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100c4:	f003 0304 	and.w	r3, r3, #4
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d00a      	beq.n	80100e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	685b      	ldr	r3, [r3, #4]
 80100d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	430a      	orrs	r2, r1
 80100e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100e6:	f003 0308 	and.w	r3, r3, #8
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d00a      	beq.n	8010104 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	430a      	orrs	r2, r1
 8010102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010108:	f003 0310 	and.w	r3, r3, #16
 801010c:	2b00      	cmp	r3, #0
 801010e:	d00a      	beq.n	8010126 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	689b      	ldr	r3, [r3, #8]
 8010116:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	430a      	orrs	r2, r1
 8010124:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801012a:	f003 0320 	and.w	r3, r3, #32
 801012e:	2b00      	cmp	r3, #0
 8010130:	d00a      	beq.n	8010148 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	689b      	ldr	r3, [r3, #8]
 8010138:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	430a      	orrs	r2, r1
 8010146:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801014c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010150:	2b00      	cmp	r3, #0
 8010152:	d01a      	beq.n	801018a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	430a      	orrs	r2, r1
 8010168:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801016e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010172:	d10a      	bne.n	801018a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	685b      	ldr	r3, [r3, #4]
 801017a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	430a      	orrs	r2, r1
 8010188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801018e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010192:	2b00      	cmp	r3, #0
 8010194:	d00a      	beq.n	80101ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	685b      	ldr	r3, [r3, #4]
 801019c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	430a      	orrs	r2, r1
 80101aa:	605a      	str	r2, [r3, #4]
  }
}
 80101ac:	bf00      	nop
 80101ae:	370c      	adds	r7, #12
 80101b0:	46bd      	mov	sp, r7
 80101b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b6:	4770      	bx	lr

080101b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b086      	sub	sp, #24
 80101bc:	af02      	add	r7, sp, #8
 80101be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2200      	movs	r2, #0
 80101c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80101c8:	f7f6 fcc8 	bl	8006b5c <HAL_GetTick>
 80101cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	f003 0308 	and.w	r3, r3, #8
 80101d8:	2b08      	cmp	r3, #8
 80101da:	d10e      	bne.n	80101fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80101dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80101e0:	9300      	str	r3, [sp, #0]
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	2200      	movs	r2, #0
 80101e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f000 f82f 	bl	801024e <UART_WaitOnFlagUntilTimeout>
 80101f0:	4603      	mov	r3, r0
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d001      	beq.n	80101fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80101f6:	2303      	movs	r3, #3
 80101f8:	e025      	b.n	8010246 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	f003 0304 	and.w	r3, r3, #4
 8010204:	2b04      	cmp	r3, #4
 8010206:	d10e      	bne.n	8010226 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010208:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801020c:	9300      	str	r3, [sp, #0]
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	2200      	movs	r2, #0
 8010212:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010216:	6878      	ldr	r0, [r7, #4]
 8010218:	f000 f819 	bl	801024e <UART_WaitOnFlagUntilTimeout>
 801021c:	4603      	mov	r3, r0
 801021e:	2b00      	cmp	r3, #0
 8010220:	d001      	beq.n	8010226 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010222:	2303      	movs	r3, #3
 8010224:	e00f      	b.n	8010246 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2220      	movs	r2, #32
 801022a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	2220      	movs	r2, #32
 8010232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2200      	movs	r2, #0
 801023a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2200      	movs	r2, #0
 8010240:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010244:	2300      	movs	r3, #0
}
 8010246:	4618      	mov	r0, r3
 8010248:	3710      	adds	r7, #16
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}

0801024e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801024e:	b580      	push	{r7, lr}
 8010250:	b09c      	sub	sp, #112	; 0x70
 8010252:	af00      	add	r7, sp, #0
 8010254:	60f8      	str	r0, [r7, #12]
 8010256:	60b9      	str	r1, [r7, #8]
 8010258:	603b      	str	r3, [r7, #0]
 801025a:	4613      	mov	r3, r2
 801025c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801025e:	e0a9      	b.n	80103b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010260:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010266:	f000 80a5 	beq.w	80103b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801026a:	f7f6 fc77 	bl	8006b5c <HAL_GetTick>
 801026e:	4602      	mov	r2, r0
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	1ad3      	subs	r3, r2, r3
 8010274:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010276:	429a      	cmp	r2, r3
 8010278:	d302      	bcc.n	8010280 <UART_WaitOnFlagUntilTimeout+0x32>
 801027a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801027c:	2b00      	cmp	r3, #0
 801027e:	d140      	bne.n	8010302 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010288:	e853 3f00 	ldrex	r3, [r3]
 801028c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801028e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010290:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010294:	667b      	str	r3, [r7, #100]	; 0x64
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	461a      	mov	r2, r3
 801029c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801029e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80102a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80102a6:	e841 2300 	strex	r3, r2, [r1]
 80102aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80102ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d1e6      	bne.n	8010280 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	3308      	adds	r3, #8
 80102b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102bc:	e853 3f00 	ldrex	r3, [r3]
 80102c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80102c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c4:	f023 0301 	bic.w	r3, r3, #1
 80102c8:	663b      	str	r3, [r7, #96]	; 0x60
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	3308      	adds	r3, #8
 80102d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80102d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80102d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80102d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102da:	e841 2300 	strex	r3, r2, [r1]
 80102de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80102e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d1e5      	bne.n	80102b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	2220      	movs	r2, #32
 80102ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	2220      	movs	r2, #32
 80102f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	2200      	movs	r2, #0
 80102fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80102fe:	2303      	movs	r3, #3
 8010300:	e069      	b.n	80103d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	f003 0304 	and.w	r3, r3, #4
 801030c:	2b00      	cmp	r3, #0
 801030e:	d051      	beq.n	80103b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	69db      	ldr	r3, [r3, #28]
 8010316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801031a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801031e:	d149      	bne.n	80103b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010328:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010332:	e853 3f00 	ldrex	r3, [r3]
 8010336:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801033a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801033e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	461a      	mov	r2, r3
 8010346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010348:	637b      	str	r3, [r7, #52]	; 0x34
 801034a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801034c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801034e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010350:	e841 2300 	strex	r3, r2, [r1]
 8010354:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010358:	2b00      	cmp	r3, #0
 801035a:	d1e6      	bne.n	801032a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	3308      	adds	r3, #8
 8010362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	e853 3f00 	ldrex	r3, [r3]
 801036a:	613b      	str	r3, [r7, #16]
   return(result);
 801036c:	693b      	ldr	r3, [r7, #16]
 801036e:	f023 0301 	bic.w	r3, r3, #1
 8010372:	66bb      	str	r3, [r7, #104]	; 0x68
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	3308      	adds	r3, #8
 801037a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801037c:	623a      	str	r2, [r7, #32]
 801037e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010380:	69f9      	ldr	r1, [r7, #28]
 8010382:	6a3a      	ldr	r2, [r7, #32]
 8010384:	e841 2300 	strex	r3, r2, [r1]
 8010388:	61bb      	str	r3, [r7, #24]
   return(result);
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d1e5      	bne.n	801035c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	2220      	movs	r2, #32
 8010394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2220      	movs	r2, #32
 801039c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	2220      	movs	r2, #32
 80103a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2200      	movs	r2, #0
 80103ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80103b0:	2303      	movs	r3, #3
 80103b2:	e010      	b.n	80103d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	69da      	ldr	r2, [r3, #28]
 80103ba:	68bb      	ldr	r3, [r7, #8]
 80103bc:	4013      	ands	r3, r2
 80103be:	68ba      	ldr	r2, [r7, #8]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	bf0c      	ite	eq
 80103c4:	2301      	moveq	r3, #1
 80103c6:	2300      	movne	r3, #0
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	461a      	mov	r2, r3
 80103cc:	79fb      	ldrb	r3, [r7, #7]
 80103ce:	429a      	cmp	r2, r3
 80103d0:	f43f af46 	beq.w	8010260 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80103d4:	2300      	movs	r3, #0
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3770      	adds	r7, #112	; 0x70
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
	...

080103e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b096      	sub	sp, #88	; 0x58
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	60f8      	str	r0, [r7, #12]
 80103e8:	60b9      	str	r1, [r7, #8]
 80103ea:	4613      	mov	r3, r2
 80103ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	68ba      	ldr	r2, [r7, #8]
 80103f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	88fa      	ldrh	r2, [r7, #6]
 80103f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	2200      	movs	r2, #0
 8010400:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2222      	movs	r2, #34	; 0x22
 8010408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010410:	2b00      	cmp	r3, #0
 8010412:	d02c      	beq.n	801046e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010418:	4a42      	ldr	r2, [pc, #264]	; (8010524 <UART_Start_Receive_DMA+0x144>)
 801041a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010420:	4a41      	ldr	r2, [pc, #260]	; (8010528 <UART_Start_Receive_DMA+0x148>)
 8010422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010428:	4a40      	ldr	r2, [pc, #256]	; (801052c <UART_Start_Receive_DMA+0x14c>)
 801042a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010430:	2200      	movs	r2, #0
 8010432:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	3324      	adds	r3, #36	; 0x24
 801043e:	4619      	mov	r1, r3
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010444:	461a      	mov	r2, r3
 8010446:	88fb      	ldrh	r3, [r7, #6]
 8010448:	f7f7 fa3a 	bl	80078c0 <HAL_DMA_Start_IT>
 801044c:	4603      	mov	r3, r0
 801044e:	2b00      	cmp	r3, #0
 8010450:	d00d      	beq.n	801046e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	2210      	movs	r2, #16
 8010456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	2200      	movs	r2, #0
 801045e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	2220      	movs	r2, #32
 8010466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 801046a:	2301      	movs	r3, #1
 801046c:	e055      	b.n	801051a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	2200      	movs	r2, #0
 8010472:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	691b      	ldr	r3, [r3, #16]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d018      	beq.n	80104b0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010486:	e853 3f00 	ldrex	r3, [r3]
 801048a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801048c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801048e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010492:	657b      	str	r3, [r7, #84]	; 0x54
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	461a      	mov	r2, r3
 801049a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801049c:	64bb      	str	r3, [r7, #72]	; 0x48
 801049e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80104a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80104a4:	e841 2300 	strex	r3, r2, [r1]
 80104a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80104aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d1e6      	bne.n	801047e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	3308      	adds	r3, #8
 80104b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ba:	e853 3f00 	ldrex	r3, [r3]
 80104be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80104c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104c2:	f043 0301 	orr.w	r3, r3, #1
 80104c6:	653b      	str	r3, [r7, #80]	; 0x50
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	3308      	adds	r3, #8
 80104ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80104d0:	637a      	str	r2, [r7, #52]	; 0x34
 80104d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80104d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104d8:	e841 2300 	strex	r3, r2, [r1]
 80104dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80104de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d1e5      	bne.n	80104b0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	3308      	adds	r3, #8
 80104ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	e853 3f00 	ldrex	r3, [r3]
 80104f2:	613b      	str	r3, [r7, #16]
   return(result);
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	3308      	adds	r3, #8
 8010502:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010504:	623a      	str	r2, [r7, #32]
 8010506:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010508:	69f9      	ldr	r1, [r7, #28]
 801050a:	6a3a      	ldr	r2, [r7, #32]
 801050c:	e841 2300 	strex	r3, r2, [r1]
 8010510:	61bb      	str	r3, [r7, #24]
   return(result);
 8010512:	69bb      	ldr	r3, [r7, #24]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d1e5      	bne.n	80104e4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8010518:	2300      	movs	r3, #0
}
 801051a:	4618      	mov	r0, r3
 801051c:	3758      	adds	r7, #88	; 0x58
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
 8010522:	bf00      	nop
 8010524:	08010733 	.word	0x08010733
 8010528:	08010855 	.word	0x08010855
 801052c:	0801088d 	.word	0x0801088d

08010530 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010530:	b480      	push	{r7}
 8010532:	b08f      	sub	sp, #60	; 0x3c
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801053e:	6a3b      	ldr	r3, [r7, #32]
 8010540:	e853 3f00 	ldrex	r3, [r3]
 8010544:	61fb      	str	r3, [r7, #28]
   return(result);
 8010546:	69fb      	ldr	r3, [r7, #28]
 8010548:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801054c:	637b      	str	r3, [r7, #52]	; 0x34
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	461a      	mov	r2, r3
 8010554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010558:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801055a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801055c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801055e:	e841 2300 	strex	r3, r2, [r1]
 8010562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010566:	2b00      	cmp	r3, #0
 8010568:	d1e6      	bne.n	8010538 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	3308      	adds	r3, #8
 8010570:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	e853 3f00 	ldrex	r3, [r3]
 8010578:	60bb      	str	r3, [r7, #8]
   return(result);
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010580:	633b      	str	r3, [r7, #48]	; 0x30
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	3308      	adds	r3, #8
 8010588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801058a:	61ba      	str	r2, [r7, #24]
 801058c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801058e:	6979      	ldr	r1, [r7, #20]
 8010590:	69ba      	ldr	r2, [r7, #24]
 8010592:	e841 2300 	strex	r3, r2, [r1]
 8010596:	613b      	str	r3, [r7, #16]
   return(result);
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d1e5      	bne.n	801056a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2220      	movs	r2, #32
 80105a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80105a6:	bf00      	nop
 80105a8:	373c      	adds	r7, #60	; 0x3c
 80105aa:	46bd      	mov	sp, r7
 80105ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b0:	4770      	bx	lr
	...

080105b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80105b4:	b480      	push	{r7}
 80105b6:	b095      	sub	sp, #84	; 0x54
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105c4:	e853 3f00 	ldrex	r3, [r3]
 80105c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80105ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80105d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	461a      	mov	r2, r3
 80105d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105da:	643b      	str	r3, [r7, #64]	; 0x40
 80105dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80105e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80105e2:	e841 2300 	strex	r3, r2, [r1]
 80105e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80105e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d1e6      	bne.n	80105bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	3308      	adds	r3, #8
 80105f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105f6:	6a3b      	ldr	r3, [r7, #32]
 80105f8:	e853 3f00 	ldrex	r3, [r3]
 80105fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80105fe:	69fa      	ldr	r2, [r7, #28]
 8010600:	4b1e      	ldr	r3, [pc, #120]	; (801067c <UART_EndRxTransfer+0xc8>)
 8010602:	4013      	ands	r3, r2
 8010604:	64bb      	str	r3, [r7, #72]	; 0x48
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	3308      	adds	r3, #8
 801060c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801060e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010610:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010612:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010616:	e841 2300 	strex	r3, r2, [r1]
 801061a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801061c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801061e:	2b00      	cmp	r3, #0
 8010620:	d1e5      	bne.n	80105ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010626:	2b01      	cmp	r3, #1
 8010628:	d118      	bne.n	801065c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	e853 3f00 	ldrex	r3, [r3]
 8010636:	60bb      	str	r3, [r7, #8]
   return(result);
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	f023 0310 	bic.w	r3, r3, #16
 801063e:	647b      	str	r3, [r7, #68]	; 0x44
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	461a      	mov	r2, r3
 8010646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010648:	61bb      	str	r3, [r7, #24]
 801064a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801064c:	6979      	ldr	r1, [r7, #20]
 801064e:	69ba      	ldr	r2, [r7, #24]
 8010650:	e841 2300 	strex	r3, r2, [r1]
 8010654:	613b      	str	r3, [r7, #16]
   return(result);
 8010656:	693b      	ldr	r3, [r7, #16]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d1e6      	bne.n	801062a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2220      	movs	r2, #32
 8010660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2200      	movs	r2, #0
 8010668:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2200      	movs	r2, #0
 801066e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010670:	bf00      	nop
 8010672:	3754      	adds	r7, #84	; 0x54
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr
 801067c:	effffffe 	.word	0xeffffffe

08010680 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b090      	sub	sp, #64	; 0x40
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801068c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	69db      	ldr	r3, [r3, #28]
 8010692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010696:	d037      	beq.n	8010708 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8010698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801069a:	2200      	movs	r2, #0
 801069c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80106a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	3308      	adds	r3, #8
 80106a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106aa:	e853 3f00 	ldrex	r3, [r3]
 80106ae:	623b      	str	r3, [r7, #32]
   return(result);
 80106b0:	6a3b      	ldr	r3, [r7, #32]
 80106b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80106b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80106b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	3308      	adds	r3, #8
 80106be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106c0:	633a      	str	r2, [r7, #48]	; 0x30
 80106c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80106c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106c8:	e841 2300 	strex	r3, r2, [r1]
 80106cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80106ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d1e5      	bne.n	80106a0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80106d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	e853 3f00 	ldrex	r3, [r3]
 80106e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106e8:	637b      	str	r3, [r7, #52]	; 0x34
 80106ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	461a      	mov	r2, r3
 80106f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106f2:	61fb      	str	r3, [r7, #28]
 80106f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106f6:	69b9      	ldr	r1, [r7, #24]
 80106f8:	69fa      	ldr	r2, [r7, #28]
 80106fa:	e841 2300 	strex	r3, r2, [r1]
 80106fe:	617b      	str	r3, [r7, #20]
   return(result);
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d1e6      	bne.n	80106d4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010706:	e002      	b.n	801070e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8010708:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801070a:	f7fe ff19 	bl	800f540 <HAL_UART_TxCpltCallback>
}
 801070e:	bf00      	nop
 8010710:	3740      	adds	r7, #64	; 0x40
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}

08010716 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010716:	b580      	push	{r7, lr}
 8010718:	b084      	sub	sp, #16
 801071a:	af00      	add	r7, sp, #0
 801071c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010722:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010724:	68f8      	ldr	r0, [r7, #12]
 8010726:	f7fe ff15 	bl	800f554 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801072a:	bf00      	nop
 801072c:	3710      	adds	r7, #16
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}

08010732 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010732:	b580      	push	{r7, lr}
 8010734:	b09c      	sub	sp, #112	; 0x70
 8010736:	af00      	add	r7, sp, #0
 8010738:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801073e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	69db      	ldr	r3, [r3, #28]
 8010744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010748:	d071      	beq.n	801082e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801074a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801074c:	2200      	movs	r2, #0
 801074e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801075a:	e853 3f00 	ldrex	r3, [r3]
 801075e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010762:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010766:	66bb      	str	r3, [r7, #104]	; 0x68
 8010768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	461a      	mov	r2, r3
 801076e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010770:	65bb      	str	r3, [r7, #88]	; 0x58
 8010772:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010774:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010776:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010778:	e841 2300 	strex	r3, r2, [r1]
 801077c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801077e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010780:	2b00      	cmp	r3, #0
 8010782:	d1e6      	bne.n	8010752 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	3308      	adds	r3, #8
 801078a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801078c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801078e:	e853 3f00 	ldrex	r3, [r3]
 8010792:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010796:	f023 0301 	bic.w	r3, r3, #1
 801079a:	667b      	str	r3, [r7, #100]	; 0x64
 801079c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	3308      	adds	r3, #8
 80107a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80107a4:	647a      	str	r2, [r7, #68]	; 0x44
 80107a6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80107aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80107ac:	e841 2300 	strex	r3, r2, [r1]
 80107b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80107b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d1e5      	bne.n	8010784 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80107b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	3308      	adds	r3, #8
 80107be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c2:	e853 3f00 	ldrex	r3, [r3]
 80107c6:	623b      	str	r3, [r7, #32]
   return(result);
 80107c8:	6a3b      	ldr	r3, [r7, #32]
 80107ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107ce:	663b      	str	r3, [r7, #96]	; 0x60
 80107d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	3308      	adds	r3, #8
 80107d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80107d8:	633a      	str	r2, [r7, #48]	; 0x30
 80107da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80107de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107e0:	e841 2300 	strex	r3, r2, [r1]
 80107e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80107e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d1e5      	bne.n	80107b8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80107ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107ee:	2220      	movs	r2, #32
 80107f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	d118      	bne.n	801082e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	e853 3f00 	ldrex	r3, [r3]
 8010808:	60fb      	str	r3, [r7, #12]
   return(result);
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	f023 0310 	bic.w	r3, r3, #16
 8010810:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	461a      	mov	r2, r3
 8010818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801081a:	61fb      	str	r3, [r7, #28]
 801081c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801081e:	69b9      	ldr	r1, [r7, #24]
 8010820:	69fa      	ldr	r2, [r7, #28]
 8010822:	e841 2300 	strex	r3, r2, [r1]
 8010826:	617b      	str	r3, [r7, #20]
   return(result);
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	2b00      	cmp	r3, #0
 801082c:	d1e6      	bne.n	80107fc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801082e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010832:	2b01      	cmp	r3, #1
 8010834:	d107      	bne.n	8010846 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010838:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801083c:	4619      	mov	r1, r3
 801083e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010840:	f7f2 fd2a 	bl	8003298 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010844:	e002      	b.n	801084c <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8010846:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010848:	f7fe fe8e 	bl	800f568 <HAL_UART_RxCpltCallback>
}
 801084c:	bf00      	nop
 801084e:	3770      	adds	r7, #112	; 0x70
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b084      	sub	sp, #16
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010860:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010866:	2b01      	cmp	r3, #1
 8010868:	d109      	bne.n	801087e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010870:	085b      	lsrs	r3, r3, #1
 8010872:	b29b      	uxth	r3, r3
 8010874:	4619      	mov	r1, r3
 8010876:	68f8      	ldr	r0, [r7, #12]
 8010878:	f7f2 fd0e 	bl	8003298 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801087c:	e002      	b.n	8010884 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 801087e:	68f8      	ldr	r0, [r7, #12]
 8010880:	f7fe fe7c 	bl	800f57c <HAL_UART_RxHalfCpltCallback>
}
 8010884:	bf00      	nop
 8010886:	3710      	adds	r7, #16
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}

0801088c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b086      	sub	sp, #24
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010898:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80108a0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	689b      	ldr	r3, [r3, #8]
 80108b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80108b4:	2b80      	cmp	r3, #128	; 0x80
 80108b6:	d109      	bne.n	80108cc <UART_DMAError+0x40>
 80108b8:	693b      	ldr	r3, [r7, #16]
 80108ba:	2b21      	cmp	r3, #33	; 0x21
 80108bc:	d106      	bne.n	80108cc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	2200      	movs	r2, #0
 80108c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80108c6:	6978      	ldr	r0, [r7, #20]
 80108c8:	f7ff fe32 	bl	8010530 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	689b      	ldr	r3, [r3, #8]
 80108d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108d6:	2b40      	cmp	r3, #64	; 0x40
 80108d8:	d109      	bne.n	80108ee <UART_DMAError+0x62>
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	2b22      	cmp	r3, #34	; 0x22
 80108de:	d106      	bne.n	80108ee <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	2200      	movs	r2, #0
 80108e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80108e8:	6978      	ldr	r0, [r7, #20]
 80108ea:	f7ff fe63 	bl	80105b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80108f4:	f043 0210 	orr.w	r2, r3, #16
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80108fe:	6978      	ldr	r0, [r7, #20]
 8010900:	f7fe fe46 	bl	800f590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010904:	bf00      	nop
 8010906:	3718      	adds	r7, #24
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}

0801090c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b084      	sub	sp, #16
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010918:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	2200      	movs	r2, #0
 801091e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	2200      	movs	r2, #0
 8010926:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801092a:	68f8      	ldr	r0, [r7, #12]
 801092c:	f7fe fe30 	bl	800f590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010930:	bf00      	nop
 8010932:	3710      	adds	r7, #16
 8010934:	46bd      	mov	sp, r7
 8010936:	bd80      	pop	{r7, pc}

08010938 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b088      	sub	sp, #32
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	e853 3f00 	ldrex	r3, [r3]
 801094c:	60bb      	str	r3, [r7, #8]
   return(result);
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010954:	61fb      	str	r3, [r7, #28]
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	461a      	mov	r2, r3
 801095c:	69fb      	ldr	r3, [r7, #28]
 801095e:	61bb      	str	r3, [r7, #24]
 8010960:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010962:	6979      	ldr	r1, [r7, #20]
 8010964:	69ba      	ldr	r2, [r7, #24]
 8010966:	e841 2300 	strex	r3, r2, [r1]
 801096a:	613b      	str	r3, [r7, #16]
   return(result);
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d1e6      	bne.n	8010940 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2220      	movs	r2, #32
 8010976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	2200      	movs	r2, #0
 801097e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010980:	6878      	ldr	r0, [r7, #4]
 8010982:	f7fe fddd 	bl	800f540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010986:	bf00      	nop
 8010988:	3720      	adds	r7, #32
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}

0801098e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801098e:	b480      	push	{r7}
 8010990:	b083      	sub	sp, #12
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010996:	bf00      	nop
 8010998:	370c      	adds	r7, #12
 801099a:	46bd      	mov	sp, r7
 801099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a0:	4770      	bx	lr

080109a2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80109a2:	b480      	push	{r7}
 80109a4:	b083      	sub	sp, #12
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80109aa:	bf00      	nop
 80109ac:	370c      	adds	r7, #12
 80109ae:	46bd      	mov	sp, r7
 80109b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b4:	4770      	bx	lr

080109b6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80109b6:	b480      	push	{r7}
 80109b8:	b083      	sub	sp, #12
 80109ba:	af00      	add	r7, sp, #0
 80109bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80109be:	bf00      	nop
 80109c0:	370c      	adds	r7, #12
 80109c2:	46bd      	mov	sp, r7
 80109c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c8:	4770      	bx	lr

080109ca <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80109ca:	b580      	push	{r7, lr}
 80109cc:	b084      	sub	sp, #16
 80109ce:	af00      	add	r7, sp, #0
 80109d0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80109d8:	2b01      	cmp	r3, #1
 80109da:	d101      	bne.n	80109e0 <HAL_UARTEx_EnableFifoMode+0x16>
 80109dc:	2302      	movs	r3, #2
 80109de:	e02b      	b.n	8010a38 <HAL_UARTEx_EnableFifoMode+0x6e>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2201      	movs	r2, #1
 80109e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2224      	movs	r2, #36	; 0x24
 80109ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	681a      	ldr	r2, [r3, #0]
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	f022 0201 	bic.w	r2, r2, #1
 8010a06:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010a0e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8010a16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	68fa      	ldr	r2, [r7, #12]
 8010a1e:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f000 f91f 	bl	8010c64 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2220      	movs	r2, #32
 8010a2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2200      	movs	r2, #0
 8010a32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010a36:	2300      	movs	r3, #0
}
 8010a38:	4618      	mov	r0, r3
 8010a3a:	3710      	adds	r7, #16
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}

08010a40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010a40:	b480      	push	{r7}
 8010a42:	b085      	sub	sp, #20
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010a4e:	2b01      	cmp	r3, #1
 8010a50:	d101      	bne.n	8010a56 <HAL_UARTEx_DisableFifoMode+0x16>
 8010a52:	2302      	movs	r3, #2
 8010a54:	e027      	b.n	8010aa6 <HAL_UARTEx_DisableFifoMode+0x66>
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2201      	movs	r2, #1
 8010a5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2224      	movs	r2, #36	; 0x24
 8010a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	681a      	ldr	r2, [r3, #0]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	f022 0201 	bic.w	r2, r2, #1
 8010a7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010a84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	68fa      	ldr	r2, [r7, #12]
 8010a92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2220      	movs	r2, #32
 8010a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010aa4:	2300      	movs	r3, #0
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3714      	adds	r7, #20
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab0:	4770      	bx	lr

08010ab2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010ab2:	b580      	push	{r7, lr}
 8010ab4:	b084      	sub	sp, #16
 8010ab6:	af00      	add	r7, sp, #0
 8010ab8:	6078      	str	r0, [r7, #4]
 8010aba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010ac2:	2b01      	cmp	r3, #1
 8010ac4:	d101      	bne.n	8010aca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010ac6:	2302      	movs	r3, #2
 8010ac8:	e02d      	b.n	8010b26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2201      	movs	r2, #1
 8010ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2224      	movs	r2, #36	; 0x24
 8010ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	681a      	ldr	r2, [r3, #0]
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	f022 0201 	bic.w	r2, r2, #1
 8010af0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	689b      	ldr	r3, [r3, #8]
 8010af8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	683a      	ldr	r2, [r7, #0]
 8010b02:	430a      	orrs	r2, r1
 8010b04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f000 f8ac 	bl	8010c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	68fa      	ldr	r2, [r7, #12]
 8010b12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2220      	movs	r2, #32
 8010b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010b24:	2300      	movs	r3, #0
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3710      	adds	r7, #16
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010b2e:	b580      	push	{r7, lr}
 8010b30:	b084      	sub	sp, #16
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	6078      	str	r0, [r7, #4]
 8010b36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010b3e:	2b01      	cmp	r3, #1
 8010b40:	d101      	bne.n	8010b46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010b42:	2302      	movs	r3, #2
 8010b44:	e02d      	b.n	8010ba2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2201      	movs	r2, #1
 8010b4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2224      	movs	r2, #36	; 0x24
 8010b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f022 0201 	bic.w	r2, r2, #1
 8010b6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	689b      	ldr	r3, [r3, #8]
 8010b74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	683a      	ldr	r2, [r7, #0]
 8010b7e:	430a      	orrs	r2, r1
 8010b80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f000 f86e 	bl	8010c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	68fa      	ldr	r2, [r7, #12]
 8010b8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2220      	movs	r2, #32
 8010b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010ba0:	2300      	movs	r3, #0
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3710      	adds	r7, #16
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b08c      	sub	sp, #48	; 0x30
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	60f8      	str	r0, [r7, #12]
 8010bb2:	60b9      	str	r1, [r7, #8]
 8010bb4:	4613      	mov	r3, r2
 8010bb6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bbe:	2b20      	cmp	r3, #32
 8010bc0:	d14a      	bne.n	8010c58 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d002      	beq.n	8010bce <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8010bc8:	88fb      	ldrh	r3, [r7, #6]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d101      	bne.n	8010bd2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8010bce:	2301      	movs	r3, #1
 8010bd0:	e043      	b.n	8010c5a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010bd8:	2b01      	cmp	r3, #1
 8010bda:	d101      	bne.n	8010be0 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 8010bdc:	2302      	movs	r3, #2
 8010bde:	e03c      	b.n	8010c5a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	2201      	movs	r2, #1
 8010be4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	2201      	movs	r2, #1
 8010bec:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8010bee:	88fb      	ldrh	r3, [r7, #6]
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	68b9      	ldr	r1, [r7, #8]
 8010bf4:	68f8      	ldr	r0, [r7, #12]
 8010bf6:	f7ff fbf3 	bl	80103e0 <UART_Start_Receive_DMA>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8010c00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d124      	bne.n	8010c52 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c0c:	2b01      	cmp	r3, #1
 8010c0e:	d11d      	bne.n	8010c4c <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	2210      	movs	r2, #16
 8010c16:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c1e:	69bb      	ldr	r3, [r7, #24]
 8010c20:	e853 3f00 	ldrex	r3, [r3]
 8010c24:	617b      	str	r3, [r7, #20]
   return(result);
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	f043 0310 	orr.w	r3, r3, #16
 8010c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	461a      	mov	r2, r3
 8010c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c36:	627b      	str	r3, [r7, #36]	; 0x24
 8010c38:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c3a:	6a39      	ldr	r1, [r7, #32]
 8010c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c3e:	e841 2300 	strex	r3, r2, [r1]
 8010c42:	61fb      	str	r3, [r7, #28]
   return(result);
 8010c44:	69fb      	ldr	r3, [r7, #28]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d1e6      	bne.n	8010c18 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8010c4a:	e002      	b.n	8010c52 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8010c52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c56:	e000      	b.n	8010c5a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8010c58:	2302      	movs	r3, #2
  }
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3730      	adds	r7, #48	; 0x30
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
	...

08010c64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010c64:	b480      	push	{r7}
 8010c66:	b085      	sub	sp, #20
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d108      	bne.n	8010c86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2201      	movs	r2, #1
 8010c78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2201      	movs	r2, #1
 8010c80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010c84:	e031      	b.n	8010cea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010c86:	2310      	movs	r3, #16
 8010c88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010c8a:	2310      	movs	r3, #16
 8010c8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	689b      	ldr	r3, [r3, #8]
 8010c94:	0e5b      	lsrs	r3, r3, #25
 8010c96:	b2db      	uxtb	r3, r3
 8010c98:	f003 0307 	and.w	r3, r3, #7
 8010c9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	689b      	ldr	r3, [r3, #8]
 8010ca4:	0f5b      	lsrs	r3, r3, #29
 8010ca6:	b2db      	uxtb	r3, r3
 8010ca8:	f003 0307 	and.w	r3, r3, #7
 8010cac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010cae:	7bbb      	ldrb	r3, [r7, #14]
 8010cb0:	7b3a      	ldrb	r2, [r7, #12]
 8010cb2:	4911      	ldr	r1, [pc, #68]	; (8010cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8010cb4:	5c8a      	ldrb	r2, [r1, r2]
 8010cb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010cba:	7b3a      	ldrb	r2, [r7, #12]
 8010cbc:	490f      	ldr	r1, [pc, #60]	; (8010cfc <UARTEx_SetNbDataToProcess+0x98>)
 8010cbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8010cc4:	b29a      	uxth	r2, r3
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010ccc:	7bfb      	ldrb	r3, [r7, #15]
 8010cce:	7b7a      	ldrb	r2, [r7, #13]
 8010cd0:	4909      	ldr	r1, [pc, #36]	; (8010cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8010cd2:	5c8a      	ldrb	r2, [r1, r2]
 8010cd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010cd8:	7b7a      	ldrb	r2, [r7, #13]
 8010cda:	4908      	ldr	r1, [pc, #32]	; (8010cfc <UARTEx_SetNbDataToProcess+0x98>)
 8010cdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010cde:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ce2:	b29a      	uxth	r2, r3
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010cea:	bf00      	nop
 8010cec:	3714      	adds	r7, #20
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf4:	4770      	bx	lr
 8010cf6:	bf00      	nop
 8010cf8:	08014cb0 	.word	0x08014cb0
 8010cfc:	08014cb8 	.word	0x08014cb8

08010d00 <checkint>:
 8010d00:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010d04:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	b570      	push	{r4, r5, r6, lr}
 8010d0c:	dd2a      	ble.n	8010d64 <checkint+0x64>
 8010d0e:	f240 4333 	movw	r3, #1075	; 0x433
 8010d12:	429a      	cmp	r2, r3
 8010d14:	dc24      	bgt.n	8010d60 <checkint+0x60>
 8010d16:	1a9b      	subs	r3, r3, r2
 8010d18:	f1a3 0620 	sub.w	r6, r3, #32
 8010d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010d20:	fa02 f403 	lsl.w	r4, r2, r3
 8010d24:	fa02 f606 	lsl.w	r6, r2, r6
 8010d28:	f1c3 0520 	rsb	r5, r3, #32
 8010d2c:	fa22 f505 	lsr.w	r5, r2, r5
 8010d30:	4334      	orrs	r4, r6
 8010d32:	432c      	orrs	r4, r5
 8010d34:	409a      	lsls	r2, r3
 8010d36:	ea20 0202 	bic.w	r2, r0, r2
 8010d3a:	ea21 0404 	bic.w	r4, r1, r4
 8010d3e:	4322      	orrs	r2, r4
 8010d40:	f1a3 0420 	sub.w	r4, r3, #32
 8010d44:	f1c3 0220 	rsb	r2, r3, #32
 8010d48:	d10c      	bne.n	8010d64 <checkint+0x64>
 8010d4a:	40d8      	lsrs	r0, r3
 8010d4c:	fa01 f302 	lsl.w	r3, r1, r2
 8010d50:	4318      	orrs	r0, r3
 8010d52:	40e1      	lsrs	r1, r4
 8010d54:	4308      	orrs	r0, r1
 8010d56:	f000 0001 	and.w	r0, r0, #1
 8010d5a:	f1d0 0002 	rsbs	r0, r0, #2
 8010d5e:	bd70      	pop	{r4, r5, r6, pc}
 8010d60:	2002      	movs	r0, #2
 8010d62:	e7fc      	b.n	8010d5e <checkint+0x5e>
 8010d64:	2000      	movs	r0, #0
 8010d66:	e7fa      	b.n	8010d5e <checkint+0x5e>

08010d68 <pow>:
 8010d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d6c:	ee10 4a90 	vmov	r4, s1
 8010d70:	ed2d 8b0a 	vpush	{d8-d12}
 8010d74:	ea4f 5a14 	mov.w	sl, r4, lsr #20
 8010d78:	ee11 7a90 	vmov	r7, s3
 8010d7c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8010d80:	f240 73fd 	movw	r3, #2045	; 0x7fd
 8010d84:	429a      	cmp	r2, r3
 8010d86:	ee10 6a10 	vmov	r6, s0
 8010d8a:	ee11 0a10 	vmov	r0, s2
 8010d8e:	b086      	sub	sp, #24
 8010d90:	46d4      	mov	ip, sl
 8010d92:	ea4f 5517 	mov.w	r5, r7, lsr #20
 8010d96:	d806      	bhi.n	8010da6 <pow+0x3e>
 8010d98:	f3c5 030a 	ubfx	r3, r5, #0, #11
 8010d9c:	f2a3 33be 	subw	r3, r3, #958	; 0x3be
 8010da0:	2b7f      	cmp	r3, #127	; 0x7f
 8010da2:	f240 8156 	bls.w	8011052 <pow+0x2ea>
 8010da6:	1802      	adds	r2, r0, r0
 8010da8:	eb47 0107 	adc.w	r1, r7, r7
 8010dac:	f06f 0e01 	mvn.w	lr, #1
 8010db0:	f112 39ff 	adds.w	r9, r2, #4294967295	; 0xffffffff
 8010db4:	f141 38ff 	adc.w	r8, r1, #4294967295	; 0xffffffff
 8010db8:	f46f 1300 	mvn.w	r3, #2097152	; 0x200000
 8010dbc:	45ce      	cmp	lr, r9
 8010dbe:	eb73 0808 	sbcs.w	r8, r3, r8
 8010dc2:	d23f      	bcs.n	8010e44 <pow+0xdc>
 8010dc4:	ea52 0301 	orrs.w	r3, r2, r1
 8010dc8:	f04f 0300 	mov.w	r3, #0
 8010dcc:	d10c      	bne.n	8010de8 <pow+0x80>
 8010dce:	19b6      	adds	r6, r6, r6
 8010dd0:	f484 2400 	eor.w	r4, r4, #524288	; 0x80000
 8010dd4:	4164      	adcs	r4, r4
 8010dd6:	42b3      	cmp	r3, r6
 8010dd8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010ddc:	41a3      	sbcs	r3, r4
 8010dde:	f0c0 808c 	bcc.w	8010efa <pow+0x192>
 8010de2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010de6:	e028      	b.n	8010e3a <pow+0xd2>
 8010de8:	4da3      	ldr	r5, [pc, #652]	; (8011078 <pow+0x310>)
 8010dea:	42ac      	cmp	r4, r5
 8010dec:	bf08      	it	eq
 8010dee:	429e      	cmpeq	r6, r3
 8010df0:	d107      	bne.n	8010e02 <pow+0x9a>
 8010df2:	1800      	adds	r0, r0, r0
 8010df4:	f487 2700 	eor.w	r7, r7, #524288	; 0x80000
 8010df8:	417f      	adcs	r7, r7
 8010dfa:	4283      	cmp	r3, r0
 8010dfc:	4b9f      	ldr	r3, [pc, #636]	; (801107c <pow+0x314>)
 8010dfe:	41bb      	sbcs	r3, r7
 8010e00:	e7ed      	b.n	8010dde <pow+0x76>
 8010e02:	19b6      	adds	r6, r6, r6
 8010e04:	489e      	ldr	r0, [pc, #632]	; (8011080 <pow+0x318>)
 8010e06:	4164      	adcs	r4, r4
 8010e08:	42b3      	cmp	r3, r6
 8010e0a:	eb70 0504 	sbcs.w	r5, r0, r4
 8010e0e:	d374      	bcc.n	8010efa <pow+0x192>
 8010e10:	4281      	cmp	r1, r0
 8010e12:	bf08      	it	eq
 8010e14:	429a      	cmpeq	r2, r3
 8010e16:	d170      	bne.n	8010efa <pow+0x192>
 8010e18:	4a9a      	ldr	r2, [pc, #616]	; (8011084 <pow+0x31c>)
 8010e1a:	4294      	cmp	r4, r2
 8010e1c:	bf08      	it	eq
 8010e1e:	429e      	cmpeq	r6, r3
 8010e20:	d0df      	beq.n	8010de2 <pow+0x7a>
 8010e22:	4294      	cmp	r4, r2
 8010e24:	ea6f 0707 	mvn.w	r7, r7
 8010e28:	bf34      	ite	cc
 8010e2a:	2400      	movcc	r4, #0
 8010e2c:	2401      	movcs	r4, #1
 8010e2e:	0fff      	lsrs	r7, r7, #31
 8010e30:	42bc      	cmp	r4, r7
 8010e32:	f040 81d9 	bne.w	80111e8 <pow+0x480>
 8010e36:	ee21 0b01 	vmul.f64	d0, d1, d1
 8010e3a:	b006      	add	sp, #24
 8010e3c:	ecbd 8b0a 	vpop	{d8-d12}
 8010e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e44:	eb16 0806 	adds.w	r8, r6, r6
 8010e48:	eb44 0904 	adc.w	r9, r4, r4
 8010e4c:	f118 31ff 	adds.w	r1, r8, #4294967295	; 0xffffffff
 8010e50:	f169 0200 	sbc.w	r2, r9, #0
 8010e54:	458e      	cmp	lr, r1
 8010e56:	4193      	sbcs	r3, r2
 8010e58:	d223      	bcs.n	8010ea2 <pow+0x13a>
 8010e5a:	ee20 0b00 	vmul.f64	d0, d0, d0
 8010e5e:	2c00      	cmp	r4, #0
 8010e60:	da12      	bge.n	8010e88 <pow+0x120>
 8010e62:	4639      	mov	r1, r7
 8010e64:	f7ff ff4c 	bl	8010d00 <checkint>
 8010e68:	2801      	cmp	r0, #1
 8010e6a:	d10d      	bne.n	8010e88 <pow+0x120>
 8010e6c:	eeb1 0b40 	vneg.f64	d0, d0
 8010e70:	ea58 0309 	orrs.w	r3, r8, r9
 8010e74:	d10a      	bne.n	8010e8c <pow+0x124>
 8010e76:	2f00      	cmp	r7, #0
 8010e78:	dadf      	bge.n	8010e3a <pow+0xd2>
 8010e7a:	b006      	add	sp, #24
 8010e7c:	ecbd 8b0a 	vpop	{d8-d12}
 8010e80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e84:	f001 b810 	b.w	8011ea8 <__math_divzero>
 8010e88:	2000      	movs	r0, #0
 8010e8a:	e7f1      	b.n	8010e70 <pow+0x108>
 8010e8c:	2f00      	cmp	r7, #0
 8010e8e:	dad4      	bge.n	8010e3a <pow+0xd2>
 8010e90:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010e94:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010e98:	ed8d 7b00 	vstr	d7, [sp]
 8010e9c:	ed9d 0b00 	vldr	d0, [sp]
 8010ea0:	e7cb      	b.n	8010e3a <pow+0xd2>
 8010ea2:	2c00      	cmp	r4, #0
 8010ea4:	da2c      	bge.n	8010f00 <pow+0x198>
 8010ea6:	4639      	mov	r1, r7
 8010ea8:	f7ff ff2a 	bl	8010d00 <checkint>
 8010eac:	b930      	cbnz	r0, 8010ebc <pow+0x154>
 8010eae:	b006      	add	sp, #24
 8010eb0:	ecbd 8b0a 	vpop	{d8-d12}
 8010eb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010eb8:	f001 b80e 	b.w	8011ed8 <__math_invalid>
 8010ebc:	2801      	cmp	r0, #1
 8010ebe:	bf14      	ite	ne
 8010ec0:	2000      	movne	r0, #0
 8010ec2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8010ec6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8010eca:	f3ca 0c0a 	ubfx	ip, sl, #0, #11
 8010ece:	f3c5 020a 	ubfx	r2, r5, #0, #11
 8010ed2:	f2a2 33be 	subw	r3, r2, #958	; 0x3be
 8010ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8010ed8:	d92d      	bls.n	8010f36 <pow+0x1ce>
 8010eda:	4b67      	ldr	r3, [pc, #412]	; (8011078 <pow+0x310>)
 8010edc:	2000      	movs	r0, #0
 8010ede:	429c      	cmp	r4, r3
 8010ee0:	bf08      	it	eq
 8010ee2:	4286      	cmpeq	r6, r0
 8010ee4:	f43f af7d 	beq.w	8010de2 <pow+0x7a>
 8010ee8:	f240 31bd 	movw	r1, #957	; 0x3bd
 8010eec:	428a      	cmp	r2, r1
 8010eee:	d80c      	bhi.n	8010f0a <pow+0x1a2>
 8010ef0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010ef4:	42b0      	cmp	r0, r6
 8010ef6:	41a3      	sbcs	r3, r4
 8010ef8:	d204      	bcs.n	8010f04 <pow+0x19c>
 8010efa:	ee31 0b00 	vadd.f64	d0, d1, d0
 8010efe:	e79c      	b.n	8010e3a <pow+0xd2>
 8010f00:	2000      	movs	r0, #0
 8010f02:	e7e4      	b.n	8010ece <pow+0x166>
 8010f04:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010f08:	e797      	b.n	8010e3a <pow+0xd2>
 8010f0a:	2e01      	cmp	r6, #1
 8010f0c:	eb74 0303 	sbcs.w	r3, r4, r3
 8010f10:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8010f14:	bf34      	ite	cc
 8010f16:	2301      	movcc	r3, #1
 8010f18:	2300      	movcs	r3, #0
 8010f1a:	4295      	cmp	r5, r2
 8010f1c:	bf8c      	ite	hi
 8010f1e:	2500      	movhi	r5, #0
 8010f20:	2501      	movls	r5, #1
 8010f22:	42ab      	cmp	r3, r5
 8010f24:	f000 809d 	beq.w	8011062 <pow+0x2fa>
 8010f28:	b006      	add	sp, #24
 8010f2a:	ecbd 8b0a 	vpop	{d8-d12}
 8010f2e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f32:	f000 bfb1 	b.w	8011e98 <__math_oflow>
 8010f36:	f1bc 0f00 	cmp.w	ip, #0
 8010f3a:	d10b      	bne.n	8010f54 <pow+0x1ec>
 8010f3c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011070 <pow+0x308>
 8010f40:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010f44:	ec53 2b17 	vmov	r2, r3, d7
 8010f48:	ee17 6a10 	vmov	r6, s14
 8010f4c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8010f50:	f1a4 7450 	sub.w	r4, r4, #54525952	; 0x3400000
 8010f54:	4b4c      	ldr	r3, [pc, #304]	; (8011088 <pow+0x320>)
 8010f56:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8010f5a:	4423      	add	r3, r4
 8010f5c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8010f60:	1519      	asrs	r1, r3, #20
 8010f62:	0d1b      	lsrs	r3, r3, #20
 8010f64:	051b      	lsls	r3, r3, #20
 8010f66:	eba4 0903 	sub.w	r9, r4, r3
 8010f6a:	4b48      	ldr	r3, [pc, #288]	; (801108c <pow+0x324>)
 8010f6c:	ee04 1a10 	vmov	s8, r1
 8010f70:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8010f74:	f1b6 0800 	subs.w	r8, r6, #0
 8010f78:	ed91 7b12 	vldr	d7, [r1, #72]	; 0x48
 8010f7c:	ec49 8b15 	vmov	d5, r8, r9
 8010f80:	ed91 2b16 	vldr	d2, [r1, #88]	; 0x58
 8010f84:	eea5 6b07 	vfma.f64	d6, d5, d7
 8010f88:	ed93 7b00 	vldr	d7, [r3]
 8010f8c:	ed93 5b02 	vldr	d5, [r3, #8]
 8010f90:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
 8010f94:	eea4 2b07 	vfma.f64	d2, d4, d7
 8010f98:	ed91 7b18 	vldr	d7, [r1, #96]	; 0x60
 8010f9c:	ee36 ab02 	vadd.f64	d10, d6, d2
 8010fa0:	ee32 2b4a 	vsub.f64	d2, d2, d10
 8010fa4:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010fa8:	ed93 5b04 	vldr	d5, [r3, #16]
 8010fac:	ee32 2b06 	vadd.f64	d2, d2, d6
 8010fb0:	ee37 7b02 	vadd.f64	d7, d7, d2
 8010fb4:	ee26 5b05 	vmul.f64	d5, d6, d5
 8010fb8:	ed93 4b08 	vldr	d4, [r3, #32]
 8010fbc:	ee26 0b05 	vmul.f64	d0, d6, d5
 8010fc0:	eeb0 9b40 	vmov.f64	d9, d0
 8010fc4:	ee95 9b06 	vfnms.f64	d9, d5, d6
 8010fc8:	ed93 5b06 	vldr	d5, [r3, #24]
 8010fcc:	ee3a 8b00 	vadd.f64	d8, d10, d0
 8010fd0:	ee26 bb00 	vmul.f64	d11, d6, d0
 8010fd4:	ed93 3b0c 	vldr	d3, [r3, #48]	; 0x30
 8010fd8:	eea6 5b04 	vfma.f64	d5, d6, d4
 8010fdc:	ee3a ab48 	vsub.f64	d10, d10, d8
 8010fe0:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8010fe4:	ee37 9b09 	vadd.f64	d9, d7, d9
 8010fe8:	ee3a ab00 	vadd.f64	d10, d10, d0
 8010fec:	eea6 4b03 	vfma.f64	d4, d6, d3
 8010ff0:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8010ff4:	ee39 ab0a 	vadd.f64	d10, d9, d10
 8010ff8:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 8010ffc:	eea6 3b0c 	vfma.f64	d3, d6, d12
 8011000:	eea0 4b03 	vfma.f64	d4, d0, d3
 8011004:	eea0 5b04 	vfma.f64	d5, d0, d4
 8011008:	eeab ab05 	vfma.f64	d10, d11, d5
 801100c:	ee38 6b0a 	vadd.f64	d6, d8, d10
 8011010:	ee21 7b06 	vmul.f64	d7, d1, d6
 8011014:	ee17 3a90 	vmov	r3, s15
 8011018:	eeb0 5b47 	vmov.f64	d5, d7
 801101c:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8011020:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8011024:	18b2      	adds	r2, r6, r2
 8011026:	2a3e      	cmp	r2, #62	; 0x3e
 8011028:	ee91 5b06 	vfnms.f64	d5, d1, d6
 801102c:	ee38 8b46 	vsub.f64	d8, d8, d6
 8011030:	ee38 ab0a 	vadd.f64	d10, d8, d10
 8011034:	eea1 5b0a 	vfma.f64	d5, d1, d10
 8011038:	d92b      	bls.n	8011092 <pow+0x32a>
 801103a:	2a00      	cmp	r2, #0
 801103c:	da0b      	bge.n	8011056 <pow+0x2ee>
 801103e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011042:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011046:	2800      	cmp	r0, #0
 8011048:	f43f aef7 	beq.w	8010e3a <pow+0xd2>
 801104c:	eeb1 0b40 	vneg.f64	d0, d0
 8011050:	e6f3      	b.n	8010e3a <pow+0xd2>
 8011052:	2000      	movs	r0, #0
 8011054:	e77e      	b.n	8010f54 <pow+0x1ec>
 8011056:	f5b6 6f81 	cmp.w	r6, #1032	; 0x408
 801105a:	d919      	bls.n	8011090 <pow+0x328>
 801105c:	2b00      	cmp	r3, #0
 801105e:	f6bf af63 	bge.w	8010f28 <pow+0x1c0>
 8011062:	b006      	add	sp, #24
 8011064:	ecbd 8b0a 	vpop	{d8-d12}
 8011068:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801106c:	f000 bf0c 	b.w	8011e88 <__math_uflow>
 8011070:	00000000 	.word	0x00000000
 8011074:	43300000 	.word	0x43300000
 8011078:	3ff00000 	.word	0x3ff00000
 801107c:	fff00000 	.word	0xfff00000
 8011080:	ffe00000 	.word	0xffe00000
 8011084:	7fe00000 	.word	0x7fe00000
 8011088:	c0196aab 	.word	0xc0196aab
 801108c:	08014cc0 	.word	0x08014cc0
 8011090:	2600      	movs	r6, #0
 8011092:	495d      	ldr	r1, [pc, #372]	; (8011208 <pow+0x4a0>)
 8011094:	ed91 4b02 	vldr	d4, [r1, #8]
 8011098:	ed91 3b00 	vldr	d3, [r1]
 801109c:	eeb0 6b44 	vmov.f64	d6, d4
 80110a0:	eea7 6b03 	vfma.f64	d6, d7, d3
 80110a4:	ee16 5a10 	vmov	r5, s12
 80110a8:	ee36 6b44 	vsub.f64	d6, d6, d4
 80110ac:	ed91 4b04 	vldr	d4, [r1, #16]
 80110b0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80110b4:	eea6 7b04 	vfma.f64	d7, d6, d4
 80110b8:	eeb0 0b47 	vmov.f64	d0, d7
 80110bc:	ed91 7b06 	vldr	d7, [r1, #24]
 80110c0:	18dc      	adds	r4, r3, r3
 80110c2:	f104 030f 	add.w	r3, r4, #15
 80110c6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80110ca:	eea6 0b07 	vfma.f64	d0, d6, d7
 80110ce:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 80110d2:	ee35 0b00 	vadd.f64	d0, d5, d0
 80110d6:	ee20 6b00 	vmul.f64	d6, d0, d0
 80110da:	ed94 7b1c 	vldr	d7, [r4, #112]	; 0x70
 80110de:	ed91 5b08 	vldr	d5, [r1, #32]
 80110e2:	ee30 7b07 	vadd.f64	d7, d0, d7
 80110e6:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 80110ea:	eea0 5b04 	vfma.f64	d5, d0, d4
 80110ee:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 80110f2:	eea6 7b05 	vfma.f64	d7, d6, d5
 80110f6:	ee26 6b06 	vmul.f64	d6, d6, d6
 80110fa:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 80110fe:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 8011102:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8011106:	eea0 5b04 	vfma.f64	d5, d0, d4
 801110a:	1940      	adds	r0, r0, r5
 801110c:	2700      	movs	r7, #0
 801110e:	eb17 020c 	adds.w	r2, r7, ip
 8011112:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 8011116:	eea6 7b05 	vfma.f64	d7, d6, d5
 801111a:	2e00      	cmp	r6, #0
 801111c:	d15f      	bne.n	80111de <pow+0x476>
 801111e:	42bd      	cmp	r5, r7
 8011120:	db13      	blt.n	801114a <pow+0x3e2>
 8011122:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8011126:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801112a:	4610      	mov	r0, r2
 801112c:	ec41 0b10 	vmov	d0, r0, r1
 8011130:	eea7 0b00 	vfma.f64	d0, d7, d0
 8011134:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80111f0 <pow+0x488>
 8011138:	ee20 0b07 	vmul.f64	d0, d0, d7
 801113c:	b006      	add	sp, #24
 801113e:	ecbd 8b0a 	vpop	{d8-d12}
 8011142:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011146:	f000 bedf 	b.w	8011f08 <__math_check_oflow>
 801114a:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801114e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8011152:	4610      	mov	r0, r2
 8011154:	ec41 0b15 	vmov	d5, r0, r1
 8011158:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801115c:	ee27 6b05 	vmul.f64	d6, d7, d5
 8011160:	ee35 7b06 	vadd.f64	d7, d5, d6
 8011164:	eeb0 3bc7 	vabs.f64	d3, d7
 8011168:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801116c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011170:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80111f8 <pow+0x490>
 8011174:	d52a      	bpl.n	80111cc <pow+0x464>
 8011176:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801117a:	ee35 5b47 	vsub.f64	d5, d5, d7
 801117e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011182:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8011186:	ee35 6b06 	vadd.f64	d6, d5, d6
 801118a:	bf48      	it	mi
 801118c:	eeb0 4b43 	vmovmi.f64	d4, d3
 8011190:	ee37 3b04 	vadd.f64	d3, d7, d4
 8011194:	ee34 5b43 	vsub.f64	d5, d4, d3
 8011198:	ee35 7b07 	vadd.f64	d7, d5, d7
 801119c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80111a0:	ee37 7b03 	vadd.f64	d7, d7, d3
 80111a4:	ee37 7b44 	vsub.f64	d7, d7, d4
 80111a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80111ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b0:	d104      	bne.n	80111bc <pow+0x454>
 80111b2:	4632      	mov	r2, r6
 80111b4:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80111b8:	ec43 2b17 	vmov	d7, r2, r3
 80111bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80111c0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80111c4:	ee26 6b00 	vmul.f64	d6, d6, d0
 80111c8:	ed8d 6b04 	vstr	d6, [sp, #16]
 80111cc:	ee27 0b00 	vmul.f64	d0, d7, d0
 80111d0:	b006      	add	sp, #24
 80111d2:	ecbd 8b0a 	vpop	{d8-d12}
 80111d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111da:	f000 be8c 	b.w	8011ef6 <__math_check_uflow>
 80111de:	ec43 2b10 	vmov	d0, r2, r3
 80111e2:	eea7 0b00 	vfma.f64	d0, d7, d0
 80111e6:	e628      	b.n	8010e3a <pow+0xd2>
 80111e8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8011200 <pow+0x498>
 80111ec:	e625      	b.n	8010e3a <pow+0xd2>
 80111ee:	bf00      	nop
 80111f0:	00000000 	.word	0x00000000
 80111f4:	7f000000 	.word	0x7f000000
 80111f8:	00000000 	.word	0x00000000
 80111fc:	00100000 	.word	0x00100000
	...
 8011208:	08015ea8 	.word	0x08015ea8
 801120c:	00000000 	.word	0x00000000

08011210 <cos>:
 8011210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011212:	eeb0 7b40 	vmov.f64	d7, d0
 8011216:	ee17 3a90 	vmov	r3, s15
 801121a:	4a21      	ldr	r2, [pc, #132]	; (80112a0 <cos+0x90>)
 801121c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011220:	4293      	cmp	r3, r2
 8011222:	dc06      	bgt.n	8011232 <cos+0x22>
 8011224:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011298 <cos+0x88>
 8011228:	b005      	add	sp, #20
 801122a:	f85d eb04 	ldr.w	lr, [sp], #4
 801122e:	f000 bab3 	b.w	8011798 <__kernel_cos>
 8011232:	4a1c      	ldr	r2, [pc, #112]	; (80112a4 <cos+0x94>)
 8011234:	4293      	cmp	r3, r2
 8011236:	dd04      	ble.n	8011242 <cos+0x32>
 8011238:	ee30 0b40 	vsub.f64	d0, d0, d0
 801123c:	b005      	add	sp, #20
 801123e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011242:	4668      	mov	r0, sp
 8011244:	f000 f8bc 	bl	80113c0 <__ieee754_rem_pio2>
 8011248:	f000 0003 	and.w	r0, r0, #3
 801124c:	2801      	cmp	r0, #1
 801124e:	d009      	beq.n	8011264 <cos+0x54>
 8011250:	2802      	cmp	r0, #2
 8011252:	d010      	beq.n	8011276 <cos+0x66>
 8011254:	b9b0      	cbnz	r0, 8011284 <cos+0x74>
 8011256:	ed9d 1b02 	vldr	d1, [sp, #8]
 801125a:	ed9d 0b00 	vldr	d0, [sp]
 801125e:	f000 fa9b 	bl	8011798 <__kernel_cos>
 8011262:	e7eb      	b.n	801123c <cos+0x2c>
 8011264:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011268:	ed9d 0b00 	vldr	d0, [sp]
 801126c:	f000 fd98 	bl	8011da0 <__kernel_sin>
 8011270:	eeb1 0b40 	vneg.f64	d0, d0
 8011274:	e7e2      	b.n	801123c <cos+0x2c>
 8011276:	ed9d 1b02 	vldr	d1, [sp, #8]
 801127a:	ed9d 0b00 	vldr	d0, [sp]
 801127e:	f000 fa8b 	bl	8011798 <__kernel_cos>
 8011282:	e7f5      	b.n	8011270 <cos+0x60>
 8011284:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011288:	ed9d 0b00 	vldr	d0, [sp]
 801128c:	2001      	movs	r0, #1
 801128e:	f000 fd87 	bl	8011da0 <__kernel_sin>
 8011292:	e7d3      	b.n	801123c <cos+0x2c>
 8011294:	f3af 8000 	nop.w
	...
 80112a0:	3fe921fb 	.word	0x3fe921fb
 80112a4:	7fefffff 	.word	0x7fefffff

080112a8 <sin>:
 80112a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80112aa:	eeb0 7b40 	vmov.f64	d7, d0
 80112ae:	ee17 3a90 	vmov	r3, s15
 80112b2:	4a21      	ldr	r2, [pc, #132]	; (8011338 <sin+0x90>)
 80112b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80112b8:	4293      	cmp	r3, r2
 80112ba:	dc07      	bgt.n	80112cc <sin+0x24>
 80112bc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8011330 <sin+0x88>
 80112c0:	2000      	movs	r0, #0
 80112c2:	b005      	add	sp, #20
 80112c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80112c8:	f000 bd6a 	b.w	8011da0 <__kernel_sin>
 80112cc:	4a1b      	ldr	r2, [pc, #108]	; (801133c <sin+0x94>)
 80112ce:	4293      	cmp	r3, r2
 80112d0:	dd04      	ble.n	80112dc <sin+0x34>
 80112d2:	ee30 0b40 	vsub.f64	d0, d0, d0
 80112d6:	b005      	add	sp, #20
 80112d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80112dc:	4668      	mov	r0, sp
 80112de:	f000 f86f 	bl	80113c0 <__ieee754_rem_pio2>
 80112e2:	f000 0003 	and.w	r0, r0, #3
 80112e6:	2801      	cmp	r0, #1
 80112e8:	d00a      	beq.n	8011300 <sin+0x58>
 80112ea:	2802      	cmp	r0, #2
 80112ec:	d00f      	beq.n	801130e <sin+0x66>
 80112ee:	b9c0      	cbnz	r0, 8011322 <sin+0x7a>
 80112f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80112f4:	ed9d 0b00 	vldr	d0, [sp]
 80112f8:	2001      	movs	r0, #1
 80112fa:	f000 fd51 	bl	8011da0 <__kernel_sin>
 80112fe:	e7ea      	b.n	80112d6 <sin+0x2e>
 8011300:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011304:	ed9d 0b00 	vldr	d0, [sp]
 8011308:	f000 fa46 	bl	8011798 <__kernel_cos>
 801130c:	e7e3      	b.n	80112d6 <sin+0x2e>
 801130e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011312:	ed9d 0b00 	vldr	d0, [sp]
 8011316:	2001      	movs	r0, #1
 8011318:	f000 fd42 	bl	8011da0 <__kernel_sin>
 801131c:	eeb1 0b40 	vneg.f64	d0, d0
 8011320:	e7d9      	b.n	80112d6 <sin+0x2e>
 8011322:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011326:	ed9d 0b00 	vldr	d0, [sp]
 801132a:	f000 fa35 	bl	8011798 <__kernel_cos>
 801132e:	e7f5      	b.n	801131c <sin+0x74>
	...
 8011338:	3fe921fb 	.word	0x3fe921fb
 801133c:	7fefffff 	.word	0x7fefffff

08011340 <sqrt>:
 8011340:	b508      	push	{r3, lr}
 8011342:	ed2d 8b04 	vpush	{d8-d9}
 8011346:	eeb0 8b40 	vmov.f64	d8, d0
 801134a:	f000 f97d 	bl	8011648 <__ieee754_sqrt>
 801134e:	eeb4 8b48 	vcmp.f64	d8, d8
 8011352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011356:	d60c      	bvs.n	8011372 <sqrt+0x32>
 8011358:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8011378 <sqrt+0x38>
 801135c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8011360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011364:	d505      	bpl.n	8011372 <sqrt+0x32>
 8011366:	f000 ffc9 	bl	80122fc <__errno>
 801136a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801136e:	2321      	movs	r3, #33	; 0x21
 8011370:	6003      	str	r3, [r0, #0]
 8011372:	ecbd 8b04 	vpop	{d8-d9}
 8011376:	bd08      	pop	{r3, pc}
	...

08011380 <atan2f>:
 8011380:	f000 b966 	b.w	8011650 <__ieee754_atan2f>

08011384 <sqrtf>:
 8011384:	b508      	push	{r3, lr}
 8011386:	ed2d 8b02 	vpush	{d8}
 801138a:	eeb0 8a40 	vmov.f32	s16, s0
 801138e:	f000 f9fd 	bl	801178c <__ieee754_sqrtf>
 8011392:	eeb4 8a48 	vcmp.f32	s16, s16
 8011396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801139a:	d60c      	bvs.n	80113b6 <sqrtf+0x32>
 801139c:	eddf 8a07 	vldr	s17, [pc, #28]	; 80113bc <sqrtf+0x38>
 80113a0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80113a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113a8:	d505      	bpl.n	80113b6 <sqrtf+0x32>
 80113aa:	f000 ffa7 	bl	80122fc <__errno>
 80113ae:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80113b2:	2321      	movs	r3, #33	; 0x21
 80113b4:	6003      	str	r3, [r0, #0]
 80113b6:	ecbd 8b02 	vpop	{d8}
 80113ba:	bd08      	pop	{r3, pc}
 80113bc:	00000000 	.word	0x00000000

080113c0 <__ieee754_rem_pio2>:
 80113c0:	b570      	push	{r4, r5, r6, lr}
 80113c2:	eeb0 7b40 	vmov.f64	d7, d0
 80113c6:	ee17 5a90 	vmov	r5, s15
 80113ca:	4b99      	ldr	r3, [pc, #612]	; (8011630 <__ieee754_rem_pio2+0x270>)
 80113cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80113d0:	429e      	cmp	r6, r3
 80113d2:	b088      	sub	sp, #32
 80113d4:	4604      	mov	r4, r0
 80113d6:	dc07      	bgt.n	80113e8 <__ieee754_rem_pio2+0x28>
 80113d8:	2200      	movs	r2, #0
 80113da:	2300      	movs	r3, #0
 80113dc:	ed84 0b00 	vstr	d0, [r4]
 80113e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80113e4:	2000      	movs	r0, #0
 80113e6:	e01b      	b.n	8011420 <__ieee754_rem_pio2+0x60>
 80113e8:	4b92      	ldr	r3, [pc, #584]	; (8011634 <__ieee754_rem_pio2+0x274>)
 80113ea:	429e      	cmp	r6, r3
 80113ec:	dc3b      	bgt.n	8011466 <__ieee754_rem_pio2+0xa6>
 80113ee:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80113f2:	2d00      	cmp	r5, #0
 80113f4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 80115f0 <__ieee754_rem_pio2+0x230>
 80113f8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80113fc:	dd19      	ble.n	8011432 <__ieee754_rem_pio2+0x72>
 80113fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8011402:	429e      	cmp	r6, r3
 8011404:	d00e      	beq.n	8011424 <__ieee754_rem_pio2+0x64>
 8011406:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80115f8 <__ieee754_rem_pio2+0x238>
 801140a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801140e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011412:	ed84 5b00 	vstr	d5, [r4]
 8011416:	ee37 7b46 	vsub.f64	d7, d7, d6
 801141a:	ed84 7b02 	vstr	d7, [r4, #8]
 801141e:	2001      	movs	r0, #1
 8011420:	b008      	add	sp, #32
 8011422:	bd70      	pop	{r4, r5, r6, pc}
 8011424:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011600 <__ieee754_rem_pio2+0x240>
 8011428:	ee37 7b46 	vsub.f64	d7, d7, d6
 801142c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8011608 <__ieee754_rem_pio2+0x248>
 8011430:	e7eb      	b.n	801140a <__ieee754_rem_pio2+0x4a>
 8011432:	429e      	cmp	r6, r3
 8011434:	ee30 7b06 	vadd.f64	d7, d0, d6
 8011438:	d00e      	beq.n	8011458 <__ieee754_rem_pio2+0x98>
 801143a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 80115f8 <__ieee754_rem_pio2+0x238>
 801143e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8011442:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011446:	ed84 5b00 	vstr	d5, [r4]
 801144a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801144e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011452:	ed84 7b02 	vstr	d7, [r4, #8]
 8011456:	e7e3      	b.n	8011420 <__ieee754_rem_pio2+0x60>
 8011458:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011600 <__ieee754_rem_pio2+0x240>
 801145c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011460:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8011608 <__ieee754_rem_pio2+0x248>
 8011464:	e7eb      	b.n	801143e <__ieee754_rem_pio2+0x7e>
 8011466:	4b74      	ldr	r3, [pc, #464]	; (8011638 <__ieee754_rem_pio2+0x278>)
 8011468:	429e      	cmp	r6, r3
 801146a:	dc70      	bgt.n	801154e <__ieee754_rem_pio2+0x18e>
 801146c:	f000 fd60 	bl	8011f30 <fabs>
 8011470:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011474:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8011610 <__ieee754_rem_pio2+0x250>
 8011478:	eea0 7b06 	vfma.f64	d7, d0, d6
 801147c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8011480:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011484:	ee17 0a90 	vmov	r0, s15
 8011488:	eeb1 4b45 	vneg.f64	d4, d5
 801148c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80115f0 <__ieee754_rem_pio2+0x230>
 8011490:	eea5 0b47 	vfms.f64	d0, d5, d7
 8011494:	ed9f 7b58 	vldr	d7, [pc, #352]	; 80115f8 <__ieee754_rem_pio2+0x238>
 8011498:	281f      	cmp	r0, #31
 801149a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801149e:	ee30 6b47 	vsub.f64	d6, d0, d7
 80114a2:	dc08      	bgt.n	80114b6 <__ieee754_rem_pio2+0xf6>
 80114a4:	4b65      	ldr	r3, [pc, #404]	; (801163c <__ieee754_rem_pio2+0x27c>)
 80114a6:	1e42      	subs	r2, r0, #1
 80114a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114ac:	42b3      	cmp	r3, r6
 80114ae:	d002      	beq.n	80114b6 <__ieee754_rem_pio2+0xf6>
 80114b0:	ed84 6b00 	vstr	d6, [r4]
 80114b4:	e026      	b.n	8011504 <__ieee754_rem_pio2+0x144>
 80114b6:	ee16 3a90 	vmov	r3, s13
 80114ba:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80114be:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80114c2:	2b10      	cmp	r3, #16
 80114c4:	ea4f 5226 	mov.w	r2, r6, asr #20
 80114c8:	ddf2      	ble.n	80114b0 <__ieee754_rem_pio2+0xf0>
 80114ca:	eeb0 6b40 	vmov.f64	d6, d0
 80114ce:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8011600 <__ieee754_rem_pio2+0x240>
 80114d2:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8011608 <__ieee754_rem_pio2+0x248>
 80114d6:	eea4 6b07 	vfma.f64	d6, d4, d7
 80114da:	ee30 0b46 	vsub.f64	d0, d0, d6
 80114de:	eea4 0b07 	vfma.f64	d0, d4, d7
 80114e2:	eeb0 7b40 	vmov.f64	d7, d0
 80114e6:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80114ea:	ee36 3b47 	vsub.f64	d3, d6, d7
 80114ee:	ee13 3a90 	vmov	r3, s7
 80114f2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80114f6:	1ad3      	subs	r3, r2, r3
 80114f8:	2b31      	cmp	r3, #49	; 0x31
 80114fa:	dc17      	bgt.n	801152c <__ieee754_rem_pio2+0x16c>
 80114fc:	eeb0 0b46 	vmov.f64	d0, d6
 8011500:	ed84 3b00 	vstr	d3, [r4]
 8011504:	ed94 6b00 	vldr	d6, [r4]
 8011508:	2d00      	cmp	r5, #0
 801150a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801150e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8011512:	ed84 0b02 	vstr	d0, [r4, #8]
 8011516:	da83      	bge.n	8011420 <__ieee754_rem_pio2+0x60>
 8011518:	eeb1 6b46 	vneg.f64	d6, d6
 801151c:	eeb1 0b40 	vneg.f64	d0, d0
 8011520:	ed84 6b00 	vstr	d6, [r4]
 8011524:	ed84 0b02 	vstr	d0, [r4, #8]
 8011528:	4240      	negs	r0, r0
 801152a:	e779      	b.n	8011420 <__ieee754_rem_pio2+0x60>
 801152c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8011618 <__ieee754_rem_pio2+0x258>
 8011530:	eeb0 0b46 	vmov.f64	d0, d6
 8011534:	eea4 0b03 	vfma.f64	d0, d4, d3
 8011538:	ee36 7b40 	vsub.f64	d7, d6, d0
 801153c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8011620 <__ieee754_rem_pio2+0x260>
 8011540:	eea4 7b03 	vfma.f64	d7, d4, d3
 8011544:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8011548:	ee30 6b47 	vsub.f64	d6, d0, d7
 801154c:	e7b0      	b.n	80114b0 <__ieee754_rem_pio2+0xf0>
 801154e:	4b3c      	ldr	r3, [pc, #240]	; (8011640 <__ieee754_rem_pio2+0x280>)
 8011550:	429e      	cmp	r6, r3
 8011552:	dd06      	ble.n	8011562 <__ieee754_rem_pio2+0x1a2>
 8011554:	ee30 7b40 	vsub.f64	d7, d0, d0
 8011558:	ed80 7b02 	vstr	d7, [r0, #8]
 801155c:	ed80 7b00 	vstr	d7, [r0]
 8011560:	e740      	b.n	80113e4 <__ieee754_rem_pio2+0x24>
 8011562:	1532      	asrs	r2, r6, #20
 8011564:	ee10 0a10 	vmov	r0, s0
 8011568:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801156c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8011570:	ec41 0b17 	vmov	d7, r0, r1
 8011574:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011578:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8011628 <__ieee754_rem_pio2+0x268>
 801157c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011580:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011584:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011588:	ee27 7b05 	vmul.f64	d7, d7, d5
 801158c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8011590:	a902      	add	r1, sp, #8
 8011592:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8011596:	ee37 7b46 	vsub.f64	d7, d7, d6
 801159a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801159e:	ee27 7b05 	vmul.f64	d7, d7, d5
 80115a2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80115a6:	2603      	movs	r6, #3
 80115a8:	4608      	mov	r0, r1
 80115aa:	ed91 7b04 	vldr	d7, [r1, #16]
 80115ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80115b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115b6:	4633      	mov	r3, r6
 80115b8:	f1a1 0108 	sub.w	r1, r1, #8
 80115bc:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 80115c0:	d0f3      	beq.n	80115aa <__ieee754_rem_pio2+0x1ea>
 80115c2:	4920      	ldr	r1, [pc, #128]	; (8011644 <__ieee754_rem_pio2+0x284>)
 80115c4:	9101      	str	r1, [sp, #4]
 80115c6:	2102      	movs	r1, #2
 80115c8:	9100      	str	r1, [sp, #0]
 80115ca:	4621      	mov	r1, r4
 80115cc:	f000 f950 	bl	8011870 <__kernel_rem_pio2>
 80115d0:	2d00      	cmp	r5, #0
 80115d2:	f6bf af25 	bge.w	8011420 <__ieee754_rem_pio2+0x60>
 80115d6:	ed94 7b00 	vldr	d7, [r4]
 80115da:	eeb1 7b47 	vneg.f64	d7, d7
 80115de:	ed84 7b00 	vstr	d7, [r4]
 80115e2:	ed94 7b02 	vldr	d7, [r4, #8]
 80115e6:	eeb1 7b47 	vneg.f64	d7, d7
 80115ea:	ed84 7b02 	vstr	d7, [r4, #8]
 80115ee:	e79b      	b.n	8011528 <__ieee754_rem_pio2+0x168>
 80115f0:	54400000 	.word	0x54400000
 80115f4:	3ff921fb 	.word	0x3ff921fb
 80115f8:	1a626331 	.word	0x1a626331
 80115fc:	3dd0b461 	.word	0x3dd0b461
 8011600:	1a600000 	.word	0x1a600000
 8011604:	3dd0b461 	.word	0x3dd0b461
 8011608:	2e037073 	.word	0x2e037073
 801160c:	3ba3198a 	.word	0x3ba3198a
 8011610:	6dc9c883 	.word	0x6dc9c883
 8011614:	3fe45f30 	.word	0x3fe45f30
 8011618:	2e000000 	.word	0x2e000000
 801161c:	3ba3198a 	.word	0x3ba3198a
 8011620:	252049c1 	.word	0x252049c1
 8011624:	397b839a 	.word	0x397b839a
 8011628:	00000000 	.word	0x00000000
 801162c:	41700000 	.word	0x41700000
 8011630:	3fe921fb 	.word	0x3fe921fb
 8011634:	4002d97b 	.word	0x4002d97b
 8011638:	413921fb 	.word	0x413921fb
 801163c:	08015d08 	.word	0x08015d08
 8011640:	7fefffff 	.word	0x7fefffff
 8011644:	08015d88 	.word	0x08015d88

08011648 <__ieee754_sqrt>:
 8011648:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801164c:	4770      	bx	lr
	...

08011650 <__ieee754_atan2f>:
 8011650:	ee10 2a90 	vmov	r2, s1
 8011654:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8011658:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801165c:	b510      	push	{r4, lr}
 801165e:	eef0 7a40 	vmov.f32	s15, s0
 8011662:	dc06      	bgt.n	8011672 <__ieee754_atan2f+0x22>
 8011664:	ee10 0a10 	vmov	r0, s0
 8011668:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801166c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011670:	dd04      	ble.n	801167c <__ieee754_atan2f+0x2c>
 8011672:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011676:	eeb0 0a67 	vmov.f32	s0, s15
 801167a:	bd10      	pop	{r4, pc}
 801167c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8011680:	d103      	bne.n	801168a <__ieee754_atan2f+0x3a>
 8011682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011686:	f000 bd5d 	b.w	8012144 <atanf>
 801168a:	1794      	asrs	r4, r2, #30
 801168c:	f004 0402 	and.w	r4, r4, #2
 8011690:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011694:	b93b      	cbnz	r3, 80116a6 <__ieee754_atan2f+0x56>
 8011696:	2c02      	cmp	r4, #2
 8011698:	d05c      	beq.n	8011754 <__ieee754_atan2f+0x104>
 801169a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8011768 <__ieee754_atan2f+0x118>
 801169e:	2c03      	cmp	r4, #3
 80116a0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80116a4:	e7e7      	b.n	8011676 <__ieee754_atan2f+0x26>
 80116a6:	b939      	cbnz	r1, 80116b8 <__ieee754_atan2f+0x68>
 80116a8:	eddf 7a30 	vldr	s15, [pc, #192]	; 801176c <__ieee754_atan2f+0x11c>
 80116ac:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8011770 <__ieee754_atan2f+0x120>
 80116b0:	2800      	cmp	r0, #0
 80116b2:	fe67 7a80 	vselge.f32	s15, s15, s0
 80116b6:	e7de      	b.n	8011676 <__ieee754_atan2f+0x26>
 80116b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80116bc:	d110      	bne.n	80116e0 <__ieee754_atan2f+0x90>
 80116be:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80116c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80116c6:	d107      	bne.n	80116d8 <__ieee754_atan2f+0x88>
 80116c8:	2c02      	cmp	r4, #2
 80116ca:	d846      	bhi.n	801175a <__ieee754_atan2f+0x10a>
 80116cc:	4b29      	ldr	r3, [pc, #164]	; (8011774 <__ieee754_atan2f+0x124>)
 80116ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80116d2:	edd4 7a00 	vldr	s15, [r4]
 80116d6:	e7ce      	b.n	8011676 <__ieee754_atan2f+0x26>
 80116d8:	2c02      	cmp	r4, #2
 80116da:	d841      	bhi.n	8011760 <__ieee754_atan2f+0x110>
 80116dc:	4b26      	ldr	r3, [pc, #152]	; (8011778 <__ieee754_atan2f+0x128>)
 80116de:	e7f6      	b.n	80116ce <__ieee754_atan2f+0x7e>
 80116e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80116e4:	d0e0      	beq.n	80116a8 <__ieee754_atan2f+0x58>
 80116e6:	1a5b      	subs	r3, r3, r1
 80116e8:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 80116ec:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80116f0:	da1a      	bge.n	8011728 <__ieee754_atan2f+0xd8>
 80116f2:	2a00      	cmp	r2, #0
 80116f4:	da01      	bge.n	80116fa <__ieee754_atan2f+0xaa>
 80116f6:	313c      	adds	r1, #60	; 0x3c
 80116f8:	db19      	blt.n	801172e <__ieee754_atan2f+0xde>
 80116fa:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80116fe:	f000 fdf5 	bl	80122ec <fabsf>
 8011702:	f000 fd1f 	bl	8012144 <atanf>
 8011706:	eef0 7a40 	vmov.f32	s15, s0
 801170a:	2c01      	cmp	r4, #1
 801170c:	d012      	beq.n	8011734 <__ieee754_atan2f+0xe4>
 801170e:	2c02      	cmp	r4, #2
 8011710:	d017      	beq.n	8011742 <__ieee754_atan2f+0xf2>
 8011712:	2c00      	cmp	r4, #0
 8011714:	d0af      	beq.n	8011676 <__ieee754_atan2f+0x26>
 8011716:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801177c <__ieee754_atan2f+0x12c>
 801171a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801171e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8011780 <__ieee754_atan2f+0x130>
 8011722:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011726:	e7a6      	b.n	8011676 <__ieee754_atan2f+0x26>
 8011728:	eddf 7a10 	vldr	s15, [pc, #64]	; 801176c <__ieee754_atan2f+0x11c>
 801172c:	e7ed      	b.n	801170a <__ieee754_atan2f+0xba>
 801172e:	eddf 7a15 	vldr	s15, [pc, #84]	; 8011784 <__ieee754_atan2f+0x134>
 8011732:	e7ea      	b.n	801170a <__ieee754_atan2f+0xba>
 8011734:	ee17 3a90 	vmov	r3, s15
 8011738:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801173c:	ee07 3a90 	vmov	s15, r3
 8011740:	e799      	b.n	8011676 <__ieee754_atan2f+0x26>
 8011742:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801177c <__ieee754_atan2f+0x12c>
 8011746:	ee77 7a80 	vadd.f32	s15, s15, s0
 801174a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8011780 <__ieee754_atan2f+0x130>
 801174e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011752:	e790      	b.n	8011676 <__ieee754_atan2f+0x26>
 8011754:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8011780 <__ieee754_atan2f+0x130>
 8011758:	e78d      	b.n	8011676 <__ieee754_atan2f+0x26>
 801175a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8011788 <__ieee754_atan2f+0x138>
 801175e:	e78a      	b.n	8011676 <__ieee754_atan2f+0x26>
 8011760:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011784 <__ieee754_atan2f+0x134>
 8011764:	e787      	b.n	8011676 <__ieee754_atan2f+0x26>
 8011766:	bf00      	nop
 8011768:	c0490fdb 	.word	0xc0490fdb
 801176c:	3fc90fdb 	.word	0x3fc90fdb
 8011770:	bfc90fdb 	.word	0xbfc90fdb
 8011774:	08015e90 	.word	0x08015e90
 8011778:	08015e9c 	.word	0x08015e9c
 801177c:	33bbbd2e 	.word	0x33bbbd2e
 8011780:	40490fdb 	.word	0x40490fdb
 8011784:	00000000 	.word	0x00000000
 8011788:	3f490fdb 	.word	0x3f490fdb

0801178c <__ieee754_sqrtf>:
 801178c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011790:	4770      	bx	lr
 8011792:	0000      	movs	r0, r0
 8011794:	0000      	movs	r0, r0
	...

08011798 <__kernel_cos>:
 8011798:	ee10 1a90 	vmov	r1, s1
 801179c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80117a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80117a4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80117a8:	da05      	bge.n	80117b6 <__kernel_cos+0x1e>
 80117aa:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80117ae:	ee17 3a90 	vmov	r3, s15
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d03d      	beq.n	8011832 <__kernel_cos+0x9a>
 80117b6:	ee20 3b00 	vmul.f64	d3, d0, d0
 80117ba:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8011838 <__kernel_cos+0xa0>
 80117be:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011840 <__kernel_cos+0xa8>
 80117c2:	eea3 6b07 	vfma.f64	d6, d3, d7
 80117c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011848 <__kernel_cos+0xb0>
 80117ca:	eea6 7b03 	vfma.f64	d7, d6, d3
 80117ce:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8011850 <__kernel_cos+0xb8>
 80117d2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80117d6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011858 <__kernel_cos+0xc0>
 80117da:	4b23      	ldr	r3, [pc, #140]	; (8011868 <__kernel_cos+0xd0>)
 80117dc:	eea6 7b03 	vfma.f64	d7, d6, d3
 80117e0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8011860 <__kernel_cos+0xc8>
 80117e4:	4299      	cmp	r1, r3
 80117e6:	eea7 6b03 	vfma.f64	d6, d7, d3
 80117ea:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80117ee:	ee26 5b03 	vmul.f64	d5, d6, d3
 80117f2:	ee23 7b07 	vmul.f64	d7, d3, d7
 80117f6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80117fa:	eea3 6b05 	vfma.f64	d6, d3, d5
 80117fe:	dc04      	bgt.n	801180a <__kernel_cos+0x72>
 8011800:	ee37 6b46 	vsub.f64	d6, d7, d6
 8011804:	ee34 0b46 	vsub.f64	d0, d4, d6
 8011808:	4770      	bx	lr
 801180a:	4b18      	ldr	r3, [pc, #96]	; (801186c <__kernel_cos+0xd4>)
 801180c:	4299      	cmp	r1, r3
 801180e:	dc0d      	bgt.n	801182c <__kernel_cos+0x94>
 8011810:	2200      	movs	r2, #0
 8011812:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8011816:	ec43 2b15 	vmov	d5, r2, r3
 801181a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801181e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8011822:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011826:	ee30 0b47 	vsub.f64	d0, d0, d7
 801182a:	4770      	bx	lr
 801182c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8011830:	e7f3      	b.n	801181a <__kernel_cos+0x82>
 8011832:	eeb0 0b44 	vmov.f64	d0, d4
 8011836:	4770      	bx	lr
 8011838:	be8838d4 	.word	0xbe8838d4
 801183c:	bda8fae9 	.word	0xbda8fae9
 8011840:	bdb4b1c4 	.word	0xbdb4b1c4
 8011844:	3e21ee9e 	.word	0x3e21ee9e
 8011848:	809c52ad 	.word	0x809c52ad
 801184c:	be927e4f 	.word	0xbe927e4f
 8011850:	19cb1590 	.word	0x19cb1590
 8011854:	3efa01a0 	.word	0x3efa01a0
 8011858:	16c15177 	.word	0x16c15177
 801185c:	bf56c16c 	.word	0xbf56c16c
 8011860:	5555554c 	.word	0x5555554c
 8011864:	3fa55555 	.word	0x3fa55555
 8011868:	3fd33332 	.word	0x3fd33332
 801186c:	3fe90000 	.word	0x3fe90000

08011870 <__kernel_rem_pio2>:
 8011870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011874:	ed2d 8b06 	vpush	{d8-d10}
 8011878:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801187c:	460f      	mov	r7, r1
 801187e:	9002      	str	r0, [sp, #8]
 8011880:	49c5      	ldr	r1, [pc, #788]	; (8011b98 <__kernel_rem_pio2+0x328>)
 8011882:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8011884:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8011888:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801188c:	9301      	str	r3, [sp, #4]
 801188e:	f112 0f14 	cmn.w	r2, #20
 8011892:	bfa8      	it	ge
 8011894:	2018      	movge	r0, #24
 8011896:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 801189a:	bfb8      	it	lt
 801189c:	2000      	movlt	r0, #0
 801189e:	f06f 0417 	mvn.w	r4, #23
 80118a2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8011b80 <__kernel_rem_pio2+0x310>
 80118a6:	bfa4      	itt	ge
 80118a8:	f1a2 0a03 	subge.w	sl, r2, #3
 80118ac:	fb9a f0f0 	sdivge	r0, sl, r0
 80118b0:	fb00 4404 	mla	r4, r0, r4, r4
 80118b4:	1a46      	subs	r6, r0, r1
 80118b6:	4414      	add	r4, r2
 80118b8:	eb09 0c01 	add.w	ip, r9, r1
 80118bc:	ad1a      	add	r5, sp, #104	; 0x68
 80118be:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80118c2:	2200      	movs	r2, #0
 80118c4:	4562      	cmp	r2, ip
 80118c6:	dd10      	ble.n	80118ea <__kernel_rem_pio2+0x7a>
 80118c8:	9a01      	ldr	r2, [sp, #4]
 80118ca:	ab1a      	add	r3, sp, #104	; 0x68
 80118cc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80118d0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 80118d4:	f04f 0c00 	mov.w	ip, #0
 80118d8:	45cc      	cmp	ip, r9
 80118da:	dc26      	bgt.n	801192a <__kernel_rem_pio2+0xba>
 80118dc:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8011b80 <__kernel_rem_pio2+0x310>
 80118e0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80118e4:	4616      	mov	r6, r2
 80118e6:	2500      	movs	r5, #0
 80118e8:	e015      	b.n	8011916 <__kernel_rem_pio2+0xa6>
 80118ea:	42d6      	cmn	r6, r2
 80118ec:	d409      	bmi.n	8011902 <__kernel_rem_pio2+0x92>
 80118ee:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 80118f2:	ee07 3a90 	vmov	s15, r3
 80118f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80118fa:	eca5 7b02 	vstmia	r5!, {d7}
 80118fe:	3201      	adds	r2, #1
 8011900:	e7e0      	b.n	80118c4 <__kernel_rem_pio2+0x54>
 8011902:	eeb0 7b46 	vmov.f64	d7, d6
 8011906:	e7f8      	b.n	80118fa <__kernel_rem_pio2+0x8a>
 8011908:	ecb8 5b02 	vldmia	r8!, {d5}
 801190c:	ed96 6b00 	vldr	d6, [r6]
 8011910:	3501      	adds	r5, #1
 8011912:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011916:	428d      	cmp	r5, r1
 8011918:	f1a6 0608 	sub.w	r6, r6, #8
 801191c:	ddf4      	ble.n	8011908 <__kernel_rem_pio2+0x98>
 801191e:	ecaa 7b02 	vstmia	sl!, {d7}
 8011922:	f10c 0c01 	add.w	ip, ip, #1
 8011926:	3208      	adds	r2, #8
 8011928:	e7d6      	b.n	80118d8 <__kernel_rem_pio2+0x68>
 801192a:	ab06      	add	r3, sp, #24
 801192c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8011b88 <__kernel_rem_pio2+0x318>
 8011930:	ed9f ab97 	vldr	d10, [pc, #604]	; 8011b90 <__kernel_rem_pio2+0x320>
 8011934:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8011938:	9303      	str	r3, [sp, #12]
 801193a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 801193e:	464d      	mov	r5, r9
 8011940:	00eb      	lsls	r3, r5, #3
 8011942:	9304      	str	r3, [sp, #16]
 8011944:	ab92      	add	r3, sp, #584	; 0x248
 8011946:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801194a:	f10d 0b18 	add.w	fp, sp, #24
 801194e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8011950:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8011954:	465e      	mov	r6, fp
 8011956:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801195a:	4628      	mov	r0, r5
 801195c:	2800      	cmp	r0, #0
 801195e:	f1a2 0208 	sub.w	r2, r2, #8
 8011962:	dc4c      	bgt.n	80119fe <__kernel_rem_pio2+0x18e>
 8011964:	4620      	mov	r0, r4
 8011966:	9105      	str	r1, [sp, #20]
 8011968:	f000 fb62 	bl	8012030 <scalbn>
 801196c:	eeb0 8b40 	vmov.f64	d8, d0
 8011970:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8011974:	ee28 0b00 	vmul.f64	d0, d8, d0
 8011978:	f000 fae6 	bl	8011f48 <floor>
 801197c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8011980:	eea0 8b47 	vfms.f64	d8, d0, d7
 8011984:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8011988:	2c00      	cmp	r4, #0
 801198a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801198e:	ee17 8a90 	vmov	r8, s15
 8011992:	ee38 8b40 	vsub.f64	d8, d8, d0
 8011996:	9905      	ldr	r1, [sp, #20]
 8011998:	dd43      	ble.n	8011a22 <__kernel_rem_pio2+0x1b2>
 801199a:	1e68      	subs	r0, r5, #1
 801199c:	ab06      	add	r3, sp, #24
 801199e:	f1c4 0c18 	rsb	ip, r4, #24
 80119a2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80119a6:	fa46 f20c 	asr.w	r2, r6, ip
 80119aa:	4490      	add	r8, r2
 80119ac:	fa02 f20c 	lsl.w	r2, r2, ip
 80119b0:	1ab6      	subs	r6, r6, r2
 80119b2:	f1c4 0217 	rsb	r2, r4, #23
 80119b6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80119ba:	4116      	asrs	r6, r2
 80119bc:	2e00      	cmp	r6, #0
 80119be:	dd3f      	ble.n	8011a40 <__kernel_rem_pio2+0x1d0>
 80119c0:	f04f 0c00 	mov.w	ip, #0
 80119c4:	f108 0801 	add.w	r8, r8, #1
 80119c8:	4660      	mov	r0, ip
 80119ca:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80119ce:	4565      	cmp	r5, ip
 80119d0:	dc6e      	bgt.n	8011ab0 <__kernel_rem_pio2+0x240>
 80119d2:	2c00      	cmp	r4, #0
 80119d4:	dd04      	ble.n	80119e0 <__kernel_rem_pio2+0x170>
 80119d6:	2c01      	cmp	r4, #1
 80119d8:	d07f      	beq.n	8011ada <__kernel_rem_pio2+0x26a>
 80119da:	2c02      	cmp	r4, #2
 80119dc:	f000 8087 	beq.w	8011aee <__kernel_rem_pio2+0x27e>
 80119e0:	2e02      	cmp	r6, #2
 80119e2:	d12d      	bne.n	8011a40 <__kernel_rem_pio2+0x1d0>
 80119e4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80119e8:	ee30 8b48 	vsub.f64	d8, d0, d8
 80119ec:	b340      	cbz	r0, 8011a40 <__kernel_rem_pio2+0x1d0>
 80119ee:	4620      	mov	r0, r4
 80119f0:	9105      	str	r1, [sp, #20]
 80119f2:	f000 fb1d 	bl	8012030 <scalbn>
 80119f6:	9905      	ldr	r1, [sp, #20]
 80119f8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80119fc:	e020      	b.n	8011a40 <__kernel_rem_pio2+0x1d0>
 80119fe:	ee20 7b09 	vmul.f64	d7, d0, d9
 8011a02:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011a06:	3801      	subs	r0, #1
 8011a08:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8011a0c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8011a10:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011a14:	eca6 0a01 	vstmia	r6!, {s0}
 8011a18:	ed92 0b00 	vldr	d0, [r2]
 8011a1c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8011a20:	e79c      	b.n	801195c <__kernel_rem_pio2+0xec>
 8011a22:	d105      	bne.n	8011a30 <__kernel_rem_pio2+0x1c0>
 8011a24:	1e6a      	subs	r2, r5, #1
 8011a26:	ab06      	add	r3, sp, #24
 8011a28:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8011a2c:	15f6      	asrs	r6, r6, #23
 8011a2e:	e7c5      	b.n	80119bc <__kernel_rem_pio2+0x14c>
 8011a30:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8011a34:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a3c:	da36      	bge.n	8011aac <__kernel_rem_pio2+0x23c>
 8011a3e:	2600      	movs	r6, #0
 8011a40:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a48:	f040 80aa 	bne.w	8011ba0 <__kernel_rem_pio2+0x330>
 8011a4c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8011a50:	4658      	mov	r0, fp
 8011a52:	2200      	movs	r2, #0
 8011a54:	4548      	cmp	r0, r9
 8011a56:	da52      	bge.n	8011afe <__kernel_rem_pio2+0x28e>
 8011a58:	2a00      	cmp	r2, #0
 8011a5a:	f000 8081 	beq.w	8011b60 <__kernel_rem_pio2+0x2f0>
 8011a5e:	ab06      	add	r3, sp, #24
 8011a60:	3c18      	subs	r4, #24
 8011a62:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	f000 8087 	beq.w	8011b7a <__kernel_rem_pio2+0x30a>
 8011a6c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8011a70:	4620      	mov	r0, r4
 8011a72:	f000 fadd 	bl	8012030 <scalbn>
 8011a76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8011a7a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8011b88 <__kernel_rem_pio2+0x318>
 8011a7e:	a96a      	add	r1, sp, #424	; 0x1a8
 8011a80:	f103 0208 	add.w	r2, r3, #8
 8011a84:	1888      	adds	r0, r1, r2
 8011a86:	4659      	mov	r1, fp
 8011a88:	2900      	cmp	r1, #0
 8011a8a:	f280 80b7 	bge.w	8011bfc <__kernel_rem_pio2+0x38c>
 8011a8e:	4659      	mov	r1, fp
 8011a90:	2900      	cmp	r1, #0
 8011a92:	f2c0 80d5 	blt.w	8011c40 <__kernel_rem_pio2+0x3d0>
 8011a96:	a86a      	add	r0, sp, #424	; 0x1a8
 8011a98:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8011a9c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8011b80 <__kernel_rem_pio2+0x310>
 8011aa0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8011b9c <__kernel_rem_pio2+0x32c>
 8011aa4:	2400      	movs	r4, #0
 8011aa6:	ebab 0001 	sub.w	r0, fp, r1
 8011aaa:	e0be      	b.n	8011c2a <__kernel_rem_pio2+0x3ba>
 8011aac:	2602      	movs	r6, #2
 8011aae:	e787      	b.n	80119c0 <__kernel_rem_pio2+0x150>
 8011ab0:	f8db 2000 	ldr.w	r2, [fp]
 8011ab4:	b958      	cbnz	r0, 8011ace <__kernel_rem_pio2+0x25e>
 8011ab6:	b122      	cbz	r2, 8011ac2 <__kernel_rem_pio2+0x252>
 8011ab8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8011abc:	f8cb 2000 	str.w	r2, [fp]
 8011ac0:	2201      	movs	r2, #1
 8011ac2:	f10c 0c01 	add.w	ip, ip, #1
 8011ac6:	f10b 0b04 	add.w	fp, fp, #4
 8011aca:	4610      	mov	r0, r2
 8011acc:	e77f      	b.n	80119ce <__kernel_rem_pio2+0x15e>
 8011ace:	ebae 0202 	sub.w	r2, lr, r2
 8011ad2:	f8cb 2000 	str.w	r2, [fp]
 8011ad6:	4602      	mov	r2, r0
 8011ad8:	e7f3      	b.n	8011ac2 <__kernel_rem_pio2+0x252>
 8011ada:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011ade:	ab06      	add	r3, sp, #24
 8011ae0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011ae4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8011ae8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8011aec:	e778      	b.n	80119e0 <__kernel_rem_pio2+0x170>
 8011aee:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8011af2:	ab06      	add	r3, sp, #24
 8011af4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8011af8:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8011afc:	e7f4      	b.n	8011ae8 <__kernel_rem_pio2+0x278>
 8011afe:	ab06      	add	r3, sp, #24
 8011b00:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011b04:	3801      	subs	r0, #1
 8011b06:	431a      	orrs	r2, r3
 8011b08:	e7a4      	b.n	8011a54 <__kernel_rem_pio2+0x1e4>
 8011b0a:	f10c 0c01 	add.w	ip, ip, #1
 8011b0e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8011b12:	2800      	cmp	r0, #0
 8011b14:	d0f9      	beq.n	8011b0a <__kernel_rem_pio2+0x29a>
 8011b16:	9b04      	ldr	r3, [sp, #16]
 8011b18:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8011b1c:	eb0d 0203 	add.w	r2, sp, r3
 8011b20:	9b01      	ldr	r3, [sp, #4]
 8011b22:	18e8      	adds	r0, r5, r3
 8011b24:	ab1a      	add	r3, sp, #104	; 0x68
 8011b26:	1c6e      	adds	r6, r5, #1
 8011b28:	3a98      	subs	r2, #152	; 0x98
 8011b2a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8011b2e:	4465      	add	r5, ip
 8011b30:	42b5      	cmp	r5, r6
 8011b32:	f6ff af05 	blt.w	8011940 <__kernel_rem_pio2+0xd0>
 8011b36:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8011b3a:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011b3e:	ee07 3a90 	vmov	s15, r3
 8011b42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011b46:	f04f 0c00 	mov.w	ip, #0
 8011b4a:	eca0 7b02 	vstmia	r0!, {d7}
 8011b4e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8011b80 <__kernel_rem_pio2+0x310>
 8011b52:	4680      	mov	r8, r0
 8011b54:	458c      	cmp	ip, r1
 8011b56:	dd07      	ble.n	8011b68 <__kernel_rem_pio2+0x2f8>
 8011b58:	eca2 7b02 	vstmia	r2!, {d7}
 8011b5c:	3601      	adds	r6, #1
 8011b5e:	e7e7      	b.n	8011b30 <__kernel_rem_pio2+0x2c0>
 8011b60:	9a03      	ldr	r2, [sp, #12]
 8011b62:	f04f 0c01 	mov.w	ip, #1
 8011b66:	e7d2      	b.n	8011b0e <__kernel_rem_pio2+0x29e>
 8011b68:	ecbe 5b02 	vldmia	lr!, {d5}
 8011b6c:	ed38 6b02 	vldmdb	r8!, {d6}
 8011b70:	f10c 0c01 	add.w	ip, ip, #1
 8011b74:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011b78:	e7ec      	b.n	8011b54 <__kernel_rem_pio2+0x2e4>
 8011b7a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011b7e:	e76e      	b.n	8011a5e <__kernel_rem_pio2+0x1ee>
	...
 8011b8c:	3e700000 	.word	0x3e700000
 8011b90:	00000000 	.word	0x00000000
 8011b94:	41700000 	.word	0x41700000
 8011b98:	08016758 	.word	0x08016758
 8011b9c:	08016718 	.word	0x08016718
 8011ba0:	4260      	negs	r0, r4
 8011ba2:	eeb0 0b48 	vmov.f64	d0, d8
 8011ba6:	f000 fa43 	bl	8012030 <scalbn>
 8011baa:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8011d88 <__kernel_rem_pio2+0x518>
 8011bae:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8011bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb6:	db18      	blt.n	8011bea <__kernel_rem_pio2+0x37a>
 8011bb8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8011d90 <__kernel_rem_pio2+0x520>
 8011bbc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8011bc0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8011bc4:	aa06      	add	r2, sp, #24
 8011bc6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8011bca:	eea5 0b46 	vfms.f64	d0, d5, d6
 8011bce:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011bd2:	f105 0b01 	add.w	fp, r5, #1
 8011bd6:	ee10 3a10 	vmov	r3, s0
 8011bda:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011bde:	ee17 3a10 	vmov	r3, s14
 8011be2:	3418      	adds	r4, #24
 8011be4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8011be8:	e740      	b.n	8011a6c <__kernel_rem_pio2+0x1fc>
 8011bea:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8011bee:	aa06      	add	r2, sp, #24
 8011bf0:	ee10 3a10 	vmov	r3, s0
 8011bf4:	46ab      	mov	fp, r5
 8011bf6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8011bfa:	e737      	b.n	8011a6c <__kernel_rem_pio2+0x1fc>
 8011bfc:	ac06      	add	r4, sp, #24
 8011bfe:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8011c02:	9401      	str	r4, [sp, #4]
 8011c04:	ee07 4a90 	vmov	s15, r4
 8011c08:	3901      	subs	r1, #1
 8011c0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011c0e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8011c12:	ee20 0b06 	vmul.f64	d0, d0, d6
 8011c16:	ed20 7b02 	vstmdb	r0!, {d7}
 8011c1a:	e735      	b.n	8011a88 <__kernel_rem_pio2+0x218>
 8011c1c:	ecbc 5b02 	vldmia	ip!, {d5}
 8011c20:	ecb5 6b02 	vldmia	r5!, {d6}
 8011c24:	3401      	adds	r4, #1
 8011c26:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011c2a:	454c      	cmp	r4, r9
 8011c2c:	dc01      	bgt.n	8011c32 <__kernel_rem_pio2+0x3c2>
 8011c2e:	4284      	cmp	r4, r0
 8011c30:	ddf4      	ble.n	8011c1c <__kernel_rem_pio2+0x3ac>
 8011c32:	ac42      	add	r4, sp, #264	; 0x108
 8011c34:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8011c38:	ed80 7b00 	vstr	d7, [r0]
 8011c3c:	3901      	subs	r1, #1
 8011c3e:	e727      	b.n	8011a90 <__kernel_rem_pio2+0x220>
 8011c40:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8011c42:	2902      	cmp	r1, #2
 8011c44:	dc0a      	bgt.n	8011c5c <__kernel_rem_pio2+0x3ec>
 8011c46:	2900      	cmp	r1, #0
 8011c48:	dc2c      	bgt.n	8011ca4 <__kernel_rem_pio2+0x434>
 8011c4a:	d045      	beq.n	8011cd8 <__kernel_rem_pio2+0x468>
 8011c4c:	f008 0007 	and.w	r0, r8, #7
 8011c50:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8011c54:	ecbd 8b06 	vpop	{d8-d10}
 8011c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c5c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8011c5e:	2a03      	cmp	r2, #3
 8011c60:	d1f4      	bne.n	8011c4c <__kernel_rem_pio2+0x3dc>
 8011c62:	aa42      	add	r2, sp, #264	; 0x108
 8011c64:	4413      	add	r3, r2
 8011c66:	461a      	mov	r2, r3
 8011c68:	4619      	mov	r1, r3
 8011c6a:	4658      	mov	r0, fp
 8011c6c:	2800      	cmp	r0, #0
 8011c6e:	f1a1 0108 	sub.w	r1, r1, #8
 8011c72:	dc54      	bgt.n	8011d1e <__kernel_rem_pio2+0x4ae>
 8011c74:	4659      	mov	r1, fp
 8011c76:	2901      	cmp	r1, #1
 8011c78:	f1a2 0208 	sub.w	r2, r2, #8
 8011c7c:	dc5f      	bgt.n	8011d3e <__kernel_rem_pio2+0x4ce>
 8011c7e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8011d98 <__kernel_rem_pio2+0x528>
 8011c82:	3308      	adds	r3, #8
 8011c84:	f1bb 0f01 	cmp.w	fp, #1
 8011c88:	dc69      	bgt.n	8011d5e <__kernel_rem_pio2+0x4ee>
 8011c8a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8011c8e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8011c92:	2e00      	cmp	r6, #0
 8011c94:	d16a      	bne.n	8011d6c <__kernel_rem_pio2+0x4fc>
 8011c96:	ed87 5b00 	vstr	d5, [r7]
 8011c9a:	ed87 6b02 	vstr	d6, [r7, #8]
 8011c9e:	ed87 7b04 	vstr	d7, [r7, #16]
 8011ca2:	e7d3      	b.n	8011c4c <__kernel_rem_pio2+0x3dc>
 8011ca4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8011d98 <__kernel_rem_pio2+0x528>
 8011ca8:	ab42      	add	r3, sp, #264	; 0x108
 8011caa:	441a      	add	r2, r3
 8011cac:	465b      	mov	r3, fp
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	da26      	bge.n	8011d00 <__kernel_rem_pio2+0x490>
 8011cb2:	b35e      	cbz	r6, 8011d0c <__kernel_rem_pio2+0x49c>
 8011cb4:	eeb1 7b46 	vneg.f64	d7, d6
 8011cb8:	ed87 7b00 	vstr	d7, [r7]
 8011cbc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8011cc0:	aa44      	add	r2, sp, #272	; 0x110
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011cc8:	459b      	cmp	fp, r3
 8011cca:	da22      	bge.n	8011d12 <__kernel_rem_pio2+0x4a2>
 8011ccc:	b10e      	cbz	r6, 8011cd2 <__kernel_rem_pio2+0x462>
 8011cce:	eeb1 7b47 	vneg.f64	d7, d7
 8011cd2:	ed87 7b02 	vstr	d7, [r7, #8]
 8011cd6:	e7b9      	b.n	8011c4c <__kernel_rem_pio2+0x3dc>
 8011cd8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8011d98 <__kernel_rem_pio2+0x528>
 8011cdc:	ab42      	add	r3, sp, #264	; 0x108
 8011cde:	441a      	add	r2, r3
 8011ce0:	f1bb 0f00 	cmp.w	fp, #0
 8011ce4:	da05      	bge.n	8011cf2 <__kernel_rem_pio2+0x482>
 8011ce6:	b10e      	cbz	r6, 8011cec <__kernel_rem_pio2+0x47c>
 8011ce8:	eeb1 7b47 	vneg.f64	d7, d7
 8011cec:	ed87 7b00 	vstr	d7, [r7]
 8011cf0:	e7ac      	b.n	8011c4c <__kernel_rem_pio2+0x3dc>
 8011cf2:	ed32 6b02 	vldmdb	r2!, {d6}
 8011cf6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011cfa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011cfe:	e7ef      	b.n	8011ce0 <__kernel_rem_pio2+0x470>
 8011d00:	ed32 7b02 	vldmdb	r2!, {d7}
 8011d04:	3b01      	subs	r3, #1
 8011d06:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011d0a:	e7d0      	b.n	8011cae <__kernel_rem_pio2+0x43e>
 8011d0c:	eeb0 7b46 	vmov.f64	d7, d6
 8011d10:	e7d2      	b.n	8011cb8 <__kernel_rem_pio2+0x448>
 8011d12:	ecb2 6b02 	vldmia	r2!, {d6}
 8011d16:	3301      	adds	r3, #1
 8011d18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011d1c:	e7d4      	b.n	8011cc8 <__kernel_rem_pio2+0x458>
 8011d1e:	ed91 7b00 	vldr	d7, [r1]
 8011d22:	ed91 5b02 	vldr	d5, [r1, #8]
 8011d26:	3801      	subs	r0, #1
 8011d28:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011d2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011d30:	ed81 6b00 	vstr	d6, [r1]
 8011d34:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011d38:	ed81 7b02 	vstr	d7, [r1, #8]
 8011d3c:	e796      	b.n	8011c6c <__kernel_rem_pio2+0x3fc>
 8011d3e:	ed92 7b00 	vldr	d7, [r2]
 8011d42:	ed92 5b02 	vldr	d5, [r2, #8]
 8011d46:	3901      	subs	r1, #1
 8011d48:	ee37 6b05 	vadd.f64	d6, d7, d5
 8011d4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011d50:	ed82 6b00 	vstr	d6, [r2]
 8011d54:	ee37 7b05 	vadd.f64	d7, d7, d5
 8011d58:	ed82 7b02 	vstr	d7, [r2, #8]
 8011d5c:	e78b      	b.n	8011c76 <__kernel_rem_pio2+0x406>
 8011d5e:	ed33 6b02 	vldmdb	r3!, {d6}
 8011d62:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011d66:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011d6a:	e78b      	b.n	8011c84 <__kernel_rem_pio2+0x414>
 8011d6c:	eeb1 5b45 	vneg.f64	d5, d5
 8011d70:	eeb1 6b46 	vneg.f64	d6, d6
 8011d74:	ed87 5b00 	vstr	d5, [r7]
 8011d78:	eeb1 7b47 	vneg.f64	d7, d7
 8011d7c:	ed87 6b02 	vstr	d6, [r7, #8]
 8011d80:	e78d      	b.n	8011c9e <__kernel_rem_pio2+0x42e>
 8011d82:	bf00      	nop
 8011d84:	f3af 8000 	nop.w
 8011d88:	00000000 	.word	0x00000000
 8011d8c:	41700000 	.word	0x41700000
 8011d90:	00000000 	.word	0x00000000
 8011d94:	3e700000 	.word	0x3e700000
	...

08011da0 <__kernel_sin>:
 8011da0:	ee10 3a90 	vmov	r3, s1
 8011da4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011da8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011dac:	da04      	bge.n	8011db8 <__kernel_sin+0x18>
 8011dae:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8011db2:	ee17 3a90 	vmov	r3, s15
 8011db6:	b35b      	cbz	r3, 8011e10 <__kernel_sin+0x70>
 8011db8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8011dbc:	ee20 5b06 	vmul.f64	d5, d0, d6
 8011dc0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011e18 <__kernel_sin+0x78>
 8011dc4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011e20 <__kernel_sin+0x80>
 8011dc8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011dcc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011e28 <__kernel_sin+0x88>
 8011dd0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011dd4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011e30 <__kernel_sin+0x90>
 8011dd8:	eea7 4b06 	vfma.f64	d4, d7, d6
 8011ddc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8011e38 <__kernel_sin+0x98>
 8011de0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8011de4:	b930      	cbnz	r0, 8011df4 <__kernel_sin+0x54>
 8011de6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8011e40 <__kernel_sin+0xa0>
 8011dea:	eea6 4b07 	vfma.f64	d4, d6, d7
 8011dee:	eea4 0b05 	vfma.f64	d0, d4, d5
 8011df2:	4770      	bx	lr
 8011df4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8011df8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011dfc:	eea1 7b04 	vfma.f64	d7, d1, d4
 8011e00:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8011e04:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8011e48 <__kernel_sin+0xa8>
 8011e08:	eea5 1b07 	vfma.f64	d1, d5, d7
 8011e0c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8011e10:	4770      	bx	lr
 8011e12:	bf00      	nop
 8011e14:	f3af 8000 	nop.w
 8011e18:	5acfd57c 	.word	0x5acfd57c
 8011e1c:	3de5d93a 	.word	0x3de5d93a
 8011e20:	8a2b9ceb 	.word	0x8a2b9ceb
 8011e24:	be5ae5e6 	.word	0xbe5ae5e6
 8011e28:	57b1fe7d 	.word	0x57b1fe7d
 8011e2c:	3ec71de3 	.word	0x3ec71de3
 8011e30:	19c161d5 	.word	0x19c161d5
 8011e34:	bf2a01a0 	.word	0xbf2a01a0
 8011e38:	1110f8a6 	.word	0x1110f8a6
 8011e3c:	3f811111 	.word	0x3f811111
 8011e40:	55555549 	.word	0x55555549
 8011e44:	bfc55555 	.word	0xbfc55555
 8011e48:	55555549 	.word	0x55555549
 8011e4c:	3fc55555 	.word	0x3fc55555

08011e50 <with_errno>:
 8011e50:	b513      	push	{r0, r1, r4, lr}
 8011e52:	4604      	mov	r4, r0
 8011e54:	ed8d 0b00 	vstr	d0, [sp]
 8011e58:	f000 fa50 	bl	80122fc <__errno>
 8011e5c:	ed9d 0b00 	vldr	d0, [sp]
 8011e60:	6004      	str	r4, [r0, #0]
 8011e62:	b002      	add	sp, #8
 8011e64:	bd10      	pop	{r4, pc}

08011e66 <xflow>:
 8011e66:	b082      	sub	sp, #8
 8011e68:	b158      	cbz	r0, 8011e82 <xflow+0x1c>
 8011e6a:	eeb1 7b40 	vneg.f64	d7, d0
 8011e6e:	ed8d 7b00 	vstr	d7, [sp]
 8011e72:	ed9d 7b00 	vldr	d7, [sp]
 8011e76:	2022      	movs	r0, #34	; 0x22
 8011e78:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011e7c:	b002      	add	sp, #8
 8011e7e:	f7ff bfe7 	b.w	8011e50 <with_errno>
 8011e82:	eeb0 7b40 	vmov.f64	d7, d0
 8011e86:	e7f2      	b.n	8011e6e <xflow+0x8>

08011e88 <__math_uflow>:
 8011e88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011e90 <__math_uflow+0x8>
 8011e8c:	f7ff bfeb 	b.w	8011e66 <xflow>
 8011e90:	00000000 	.word	0x00000000
 8011e94:	10000000 	.word	0x10000000

08011e98 <__math_oflow>:
 8011e98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011ea0 <__math_oflow+0x8>
 8011e9c:	f7ff bfe3 	b.w	8011e66 <xflow>
 8011ea0:	00000000 	.word	0x00000000
 8011ea4:	70000000 	.word	0x70000000

08011ea8 <__math_divzero>:
 8011ea8:	b082      	sub	sp, #8
 8011eaa:	2800      	cmp	r0, #0
 8011eac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8011eb0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8011eb4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8011eb8:	ed8d 7b00 	vstr	d7, [sp]
 8011ebc:	ed9d 0b00 	vldr	d0, [sp]
 8011ec0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8011ed0 <__math_divzero+0x28>
 8011ec4:	2022      	movs	r0, #34	; 0x22
 8011ec6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8011eca:	b002      	add	sp, #8
 8011ecc:	f7ff bfc0 	b.w	8011e50 <with_errno>
	...

08011ed8 <__math_invalid>:
 8011ed8:	eeb0 7b40 	vmov.f64	d7, d0
 8011edc:	eeb4 7b47 	vcmp.f64	d7, d7
 8011ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ee4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8011ee8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8011eec:	d602      	bvs.n	8011ef4 <__math_invalid+0x1c>
 8011eee:	2021      	movs	r0, #33	; 0x21
 8011ef0:	f7ff bfae 	b.w	8011e50 <with_errno>
 8011ef4:	4770      	bx	lr

08011ef6 <__math_check_uflow>:
 8011ef6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8011efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011efe:	d102      	bne.n	8011f06 <__math_check_uflow+0x10>
 8011f00:	2022      	movs	r0, #34	; 0x22
 8011f02:	f7ff bfa5 	b.w	8011e50 <with_errno>
 8011f06:	4770      	bx	lr

08011f08 <__math_check_oflow>:
 8011f08:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011f28 <__math_check_oflow+0x20>
 8011f0c:	eeb0 7bc0 	vabs.f64	d7, d0
 8011f10:	eeb4 7b46 	vcmp.f64	d7, d6
 8011f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f18:	dd02      	ble.n	8011f20 <__math_check_oflow+0x18>
 8011f1a:	2022      	movs	r0, #34	; 0x22
 8011f1c:	f7ff bf98 	b.w	8011e50 <with_errno>
 8011f20:	4770      	bx	lr
 8011f22:	bf00      	nop
 8011f24:	f3af 8000 	nop.w
 8011f28:	ffffffff 	.word	0xffffffff
 8011f2c:	7fefffff 	.word	0x7fefffff

08011f30 <fabs>:
 8011f30:	ec51 0b10 	vmov	r0, r1, d0
 8011f34:	ee10 2a10 	vmov	r2, s0
 8011f38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011f3c:	ec43 2b10 	vmov	d0, r2, r3
 8011f40:	4770      	bx	lr
 8011f42:	0000      	movs	r0, r0
 8011f44:	0000      	movs	r0, r0
	...

08011f48 <floor>:
 8011f48:	ee10 1a90 	vmov	r1, s1
 8011f4c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011f50:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8011f54:	2b13      	cmp	r3, #19
 8011f56:	b530      	push	{r4, r5, lr}
 8011f58:	ee10 0a10 	vmov	r0, s0
 8011f5c:	ee10 5a10 	vmov	r5, s0
 8011f60:	dc31      	bgt.n	8011fc6 <floor+0x7e>
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	da15      	bge.n	8011f92 <floor+0x4a>
 8011f66:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012020 <floor+0xd8>
 8011f6a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011f6e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f76:	dd07      	ble.n	8011f88 <floor+0x40>
 8011f78:	2900      	cmp	r1, #0
 8011f7a:	da4e      	bge.n	801201a <floor+0xd2>
 8011f7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011f80:	4318      	orrs	r0, r3
 8011f82:	d001      	beq.n	8011f88 <floor+0x40>
 8011f84:	4928      	ldr	r1, [pc, #160]	; (8012028 <floor+0xe0>)
 8011f86:	2000      	movs	r0, #0
 8011f88:	460b      	mov	r3, r1
 8011f8a:	4602      	mov	r2, r0
 8011f8c:	ec43 2b10 	vmov	d0, r2, r3
 8011f90:	e020      	b.n	8011fd4 <floor+0x8c>
 8011f92:	4a26      	ldr	r2, [pc, #152]	; (801202c <floor+0xe4>)
 8011f94:	411a      	asrs	r2, r3
 8011f96:	ea01 0402 	and.w	r4, r1, r2
 8011f9a:	4304      	orrs	r4, r0
 8011f9c:	d01a      	beq.n	8011fd4 <floor+0x8c>
 8011f9e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8012020 <floor+0xd8>
 8011fa2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011fa6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fae:	ddeb      	ble.n	8011f88 <floor+0x40>
 8011fb0:	2900      	cmp	r1, #0
 8011fb2:	bfbe      	ittt	lt
 8011fb4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8011fb8:	fa40 f303 	asrlt.w	r3, r0, r3
 8011fbc:	18c9      	addlt	r1, r1, r3
 8011fbe:	ea21 0102 	bic.w	r1, r1, r2
 8011fc2:	2000      	movs	r0, #0
 8011fc4:	e7e0      	b.n	8011f88 <floor+0x40>
 8011fc6:	2b33      	cmp	r3, #51	; 0x33
 8011fc8:	dd05      	ble.n	8011fd6 <floor+0x8e>
 8011fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011fce:	d101      	bne.n	8011fd4 <floor+0x8c>
 8011fd0:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011fd4:	bd30      	pop	{r4, r5, pc}
 8011fd6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011fda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011fde:	40e2      	lsrs	r2, r4
 8011fe0:	4202      	tst	r2, r0
 8011fe2:	d0f7      	beq.n	8011fd4 <floor+0x8c>
 8011fe4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8012020 <floor+0xd8>
 8011fe8:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011fec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff4:	ddc8      	ble.n	8011f88 <floor+0x40>
 8011ff6:	2900      	cmp	r1, #0
 8011ff8:	da02      	bge.n	8012000 <floor+0xb8>
 8011ffa:	2b14      	cmp	r3, #20
 8011ffc:	d103      	bne.n	8012006 <floor+0xbe>
 8011ffe:	3101      	adds	r1, #1
 8012000:	ea20 0002 	bic.w	r0, r0, r2
 8012004:	e7c0      	b.n	8011f88 <floor+0x40>
 8012006:	2401      	movs	r4, #1
 8012008:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801200c:	fa04 f303 	lsl.w	r3, r4, r3
 8012010:	4418      	add	r0, r3
 8012012:	42a8      	cmp	r0, r5
 8012014:	bf38      	it	cc
 8012016:	1909      	addcc	r1, r1, r4
 8012018:	e7f2      	b.n	8012000 <floor+0xb8>
 801201a:	2000      	movs	r0, #0
 801201c:	4601      	mov	r1, r0
 801201e:	e7b3      	b.n	8011f88 <floor+0x40>
 8012020:	8800759c 	.word	0x8800759c
 8012024:	7e37e43c 	.word	0x7e37e43c
 8012028:	bff00000 	.word	0xbff00000
 801202c:	000fffff 	.word	0x000fffff

08012030 <scalbn>:
 8012030:	ee10 1a90 	vmov	r1, s1
 8012034:	b510      	push	{r4, lr}
 8012036:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801203a:	b98c      	cbnz	r4, 8012060 <scalbn+0x30>
 801203c:	ee10 3a10 	vmov	r3, s0
 8012040:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012044:	430b      	orrs	r3, r1
 8012046:	d011      	beq.n	801206c <scalbn+0x3c>
 8012048:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8012110 <scalbn+0xe0>
 801204c:	4b3c      	ldr	r3, [pc, #240]	; (8012140 <scalbn+0x110>)
 801204e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012052:	4298      	cmp	r0, r3
 8012054:	da0b      	bge.n	801206e <scalbn+0x3e>
 8012056:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8012118 <scalbn+0xe8>
 801205a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801205e:	e005      	b.n	801206c <scalbn+0x3c>
 8012060:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8012064:	429c      	cmp	r4, r3
 8012066:	d107      	bne.n	8012078 <scalbn+0x48>
 8012068:	ee30 0b00 	vadd.f64	d0, d0, d0
 801206c:	bd10      	pop	{r4, pc}
 801206e:	ee10 1a90 	vmov	r1, s1
 8012072:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8012076:	3c36      	subs	r4, #54	; 0x36
 8012078:	4404      	add	r4, r0
 801207a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801207e:	429c      	cmp	r4, r3
 8012080:	dd0d      	ble.n	801209e <scalbn+0x6e>
 8012082:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8012120 <scalbn+0xf0>
 8012086:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8012128 <scalbn+0xf8>
 801208a:	eeb0 6b47 	vmov.f64	d6, d7
 801208e:	ee10 3a90 	vmov	r3, s1
 8012092:	2b00      	cmp	r3, #0
 8012094:	fe27 7b05 	vselge.f64	d7, d7, d5
 8012098:	ee27 0b06 	vmul.f64	d0, d7, d6
 801209c:	e7e6      	b.n	801206c <scalbn+0x3c>
 801209e:	2c00      	cmp	r4, #0
 80120a0:	dd0a      	ble.n	80120b8 <scalbn+0x88>
 80120a2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80120a6:	ec53 2b10 	vmov	r2, r3, d0
 80120aa:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80120ae:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80120b2:	ec43 2b10 	vmov	d0, r2, r3
 80120b6:	e7d9      	b.n	801206c <scalbn+0x3c>
 80120b8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 80120bc:	da19      	bge.n	80120f2 <scalbn+0xc2>
 80120be:	f24c 3350 	movw	r3, #50000	; 0xc350
 80120c2:	4298      	cmp	r0, r3
 80120c4:	ee10 3a90 	vmov	r3, s1
 80120c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80120cc:	dd09      	ble.n	80120e2 <scalbn+0xb2>
 80120ce:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8012120 <scalbn+0xf0>
 80120d2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8012128 <scalbn+0xf8>
 80120d6:	eeb0 7b40 	vmov.f64	d7, d0
 80120da:	2b00      	cmp	r3, #0
 80120dc:	fe00 0b06 	vseleq.f64	d0, d0, d6
 80120e0:	e7bb      	b.n	801205a <scalbn+0x2a>
 80120e2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8012118 <scalbn+0xe8>
 80120e6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8012130 <scalbn+0x100>
 80120ea:	eeb0 7b40 	vmov.f64	d7, d0
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	e7f4      	b.n	80120dc <scalbn+0xac>
 80120f2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80120f6:	ec53 2b10 	vmov	r2, r3, d0
 80120fa:	3436      	adds	r4, #54	; 0x36
 80120fc:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8012100:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8012104:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8012138 <scalbn+0x108>
 8012108:	ec43 2b10 	vmov	d0, r2, r3
 801210c:	e7a5      	b.n	801205a <scalbn+0x2a>
 801210e:	bf00      	nop
 8012110:	00000000 	.word	0x00000000
 8012114:	43500000 	.word	0x43500000
 8012118:	c2f8f359 	.word	0xc2f8f359
 801211c:	01a56e1f 	.word	0x01a56e1f
 8012120:	8800759c 	.word	0x8800759c
 8012124:	7e37e43c 	.word	0x7e37e43c
 8012128:	8800759c 	.word	0x8800759c
 801212c:	fe37e43c 	.word	0xfe37e43c
 8012130:	c2f8f359 	.word	0xc2f8f359
 8012134:	81a56e1f 	.word	0x81a56e1f
 8012138:	00000000 	.word	0x00000000
 801213c:	3c900000 	.word	0x3c900000
 8012140:	ffff3cb0 	.word	0xffff3cb0

08012144 <atanf>:
 8012144:	b538      	push	{r3, r4, r5, lr}
 8012146:	ee10 5a10 	vmov	r5, s0
 801214a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801214e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8012152:	eef0 7a40 	vmov.f32	s15, s0
 8012156:	db0f      	blt.n	8012178 <atanf+0x34>
 8012158:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801215c:	dd04      	ble.n	8012168 <atanf+0x24>
 801215e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8012162:	eeb0 0a67 	vmov.f32	s0, s15
 8012166:	bd38      	pop	{r3, r4, r5, pc}
 8012168:	eddf 7a4d 	vldr	s15, [pc, #308]	; 80122a0 <atanf+0x15c>
 801216c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80122a4 <atanf+0x160>
 8012170:	2d00      	cmp	r5, #0
 8012172:	fe77 7a80 	vselgt.f32	s15, s15, s0
 8012176:	e7f4      	b.n	8012162 <atanf+0x1e>
 8012178:	4b4b      	ldr	r3, [pc, #300]	; (80122a8 <atanf+0x164>)
 801217a:	429c      	cmp	r4, r3
 801217c:	dc10      	bgt.n	80121a0 <atanf+0x5c>
 801217e:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8012182:	da0a      	bge.n	801219a <atanf+0x56>
 8012184:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80122ac <atanf+0x168>
 8012188:	ee30 7a07 	vadd.f32	s14, s0, s14
 801218c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012190:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012198:	dce3      	bgt.n	8012162 <atanf+0x1e>
 801219a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801219e:	e013      	b.n	80121c8 <atanf+0x84>
 80121a0:	f000 f8a4 	bl	80122ec <fabsf>
 80121a4:	4b42      	ldr	r3, [pc, #264]	; (80122b0 <atanf+0x16c>)
 80121a6:	429c      	cmp	r4, r3
 80121a8:	dc4f      	bgt.n	801224a <atanf+0x106>
 80121aa:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 80121ae:	429c      	cmp	r4, r3
 80121b0:	dc41      	bgt.n	8012236 <atanf+0xf2>
 80121b2:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80121b6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80121ba:	eea0 7a27 	vfma.f32	s14, s0, s15
 80121be:	2300      	movs	r3, #0
 80121c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80121c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80121c8:	1c5a      	adds	r2, r3, #1
 80121ca:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80121ce:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80122b4 <atanf+0x170>
 80121d2:	eddf 5a39 	vldr	s11, [pc, #228]	; 80122b8 <atanf+0x174>
 80121d6:	ed9f 5a39 	vldr	s10, [pc, #228]	; 80122bc <atanf+0x178>
 80121da:	ee66 6a06 	vmul.f32	s13, s12, s12
 80121de:	eee6 5a87 	vfma.f32	s11, s13, s14
 80121e2:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80122c0 <atanf+0x17c>
 80121e6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80121ea:	eddf 5a36 	vldr	s11, [pc, #216]	; 80122c4 <atanf+0x180>
 80121ee:	eee7 5a26 	vfma.f32	s11, s14, s13
 80121f2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80122c8 <atanf+0x184>
 80121f6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80121fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80122cc <atanf+0x188>
 80121fe:	eee7 5a26 	vfma.f32	s11, s14, s13
 8012202:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80122d0 <atanf+0x18c>
 8012206:	eea6 5a87 	vfma.f32	s10, s13, s14
 801220a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80122d4 <atanf+0x190>
 801220e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012212:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80122d8 <atanf+0x194>
 8012216:	eea7 5a26 	vfma.f32	s10, s14, s13
 801221a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80122dc <atanf+0x198>
 801221e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8012222:	ee27 7a26 	vmul.f32	s14, s14, s13
 8012226:	eea5 7a86 	vfma.f32	s14, s11, s12
 801222a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801222e:	d121      	bne.n	8012274 <atanf+0x130>
 8012230:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012234:	e795      	b.n	8012162 <atanf+0x1e>
 8012236:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801223a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801223e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012242:	2301      	movs	r3, #1
 8012244:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012248:	e7be      	b.n	80121c8 <atanf+0x84>
 801224a:	4b25      	ldr	r3, [pc, #148]	; (80122e0 <atanf+0x19c>)
 801224c:	429c      	cmp	r4, r3
 801224e:	dc0b      	bgt.n	8012268 <atanf+0x124>
 8012250:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8012254:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012258:	eea0 7a27 	vfma.f32	s14, s0, s15
 801225c:	2302      	movs	r3, #2
 801225e:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012266:	e7af      	b.n	80121c8 <atanf+0x84>
 8012268:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801226c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012270:	2303      	movs	r3, #3
 8012272:	e7a9      	b.n	80121c8 <atanf+0x84>
 8012274:	4a1b      	ldr	r2, [pc, #108]	; (80122e4 <atanf+0x1a0>)
 8012276:	491c      	ldr	r1, [pc, #112]	; (80122e8 <atanf+0x1a4>)
 8012278:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801227c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012280:	ed93 0a00 	vldr	s0, [r3]
 8012284:	ee37 7a40 	vsub.f32	s14, s14, s0
 8012288:	ed92 0a00 	vldr	s0, [r2]
 801228c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012290:	2d00      	cmp	r5, #0
 8012292:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012296:	bfb8      	it	lt
 8012298:	eef1 7a67 	vneglt.f32	s15, s15
 801229c:	e761      	b.n	8012162 <atanf+0x1e>
 801229e:	bf00      	nop
 80122a0:	3fc90fdb 	.word	0x3fc90fdb
 80122a4:	bfc90fdb 	.word	0xbfc90fdb
 80122a8:	3edfffff 	.word	0x3edfffff
 80122ac:	7149f2ca 	.word	0x7149f2ca
 80122b0:	3f97ffff 	.word	0x3f97ffff
 80122b4:	3c8569d7 	.word	0x3c8569d7
 80122b8:	3d4bda59 	.word	0x3d4bda59
 80122bc:	bd6ef16b 	.word	0xbd6ef16b
 80122c0:	3d886b35 	.word	0x3d886b35
 80122c4:	3dba2e6e 	.word	0x3dba2e6e
 80122c8:	3e124925 	.word	0x3e124925
 80122cc:	3eaaaaab 	.word	0x3eaaaaab
 80122d0:	bd15a221 	.word	0xbd15a221
 80122d4:	bd9d8795 	.word	0xbd9d8795
 80122d8:	bde38e38 	.word	0xbde38e38
 80122dc:	be4ccccd 	.word	0xbe4ccccd
 80122e0:	401bffff 	.word	0x401bffff
 80122e4:	08016768 	.word	0x08016768
 80122e8:	08016778 	.word	0x08016778

080122ec <fabsf>:
 80122ec:	ee10 3a10 	vmov	r3, s0
 80122f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80122f4:	ee00 3a10 	vmov	s0, r3
 80122f8:	4770      	bx	lr
	...

080122fc <__errno>:
 80122fc:	4b01      	ldr	r3, [pc, #4]	; (8012304 <__errno+0x8>)
 80122fe:	6818      	ldr	r0, [r3, #0]
 8012300:	4770      	bx	lr
 8012302:	bf00      	nop
 8012304:	24000248 	.word	0x24000248

08012308 <__libc_init_array>:
 8012308:	b570      	push	{r4, r5, r6, lr}
 801230a:	4d0d      	ldr	r5, [pc, #52]	; (8012340 <__libc_init_array+0x38>)
 801230c:	4c0d      	ldr	r4, [pc, #52]	; (8012344 <__libc_init_array+0x3c>)
 801230e:	1b64      	subs	r4, r4, r5
 8012310:	10a4      	asrs	r4, r4, #2
 8012312:	2600      	movs	r6, #0
 8012314:	42a6      	cmp	r6, r4
 8012316:	d109      	bne.n	801232c <__libc_init_array+0x24>
 8012318:	4d0b      	ldr	r5, [pc, #44]	; (8012348 <__libc_init_array+0x40>)
 801231a:	4c0c      	ldr	r4, [pc, #48]	; (801234c <__libc_init_array+0x44>)
 801231c:	f002 fc90 	bl	8014c40 <_init>
 8012320:	1b64      	subs	r4, r4, r5
 8012322:	10a4      	asrs	r4, r4, #2
 8012324:	2600      	movs	r6, #0
 8012326:	42a6      	cmp	r6, r4
 8012328:	d105      	bne.n	8012336 <__libc_init_array+0x2e>
 801232a:	bd70      	pop	{r4, r5, r6, pc}
 801232c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012330:	4798      	blx	r3
 8012332:	3601      	adds	r6, #1
 8012334:	e7ee      	b.n	8012314 <__libc_init_array+0xc>
 8012336:	f855 3b04 	ldr.w	r3, [r5], #4
 801233a:	4798      	blx	r3
 801233c:	3601      	adds	r6, #1
 801233e:	e7f2      	b.n	8012326 <__libc_init_array+0x1e>
 8012340:	08016b6c 	.word	0x08016b6c
 8012344:	08016b6c 	.word	0x08016b6c
 8012348:	08016b6c 	.word	0x08016b6c
 801234c:	08016b74 	.word	0x08016b74

08012350 <memset>:
 8012350:	4402      	add	r2, r0
 8012352:	4603      	mov	r3, r0
 8012354:	4293      	cmp	r3, r2
 8012356:	d100      	bne.n	801235a <memset+0xa>
 8012358:	4770      	bx	lr
 801235a:	f803 1b01 	strb.w	r1, [r3], #1
 801235e:	e7f9      	b.n	8012354 <memset+0x4>

08012360 <__cvt>:
 8012360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012362:	ed2d 8b02 	vpush	{d8}
 8012366:	eeb0 8b40 	vmov.f64	d8, d0
 801236a:	b085      	sub	sp, #20
 801236c:	4617      	mov	r7, r2
 801236e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012370:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012372:	ee18 2a90 	vmov	r2, s17
 8012376:	f025 0520 	bic.w	r5, r5, #32
 801237a:	2a00      	cmp	r2, #0
 801237c:	bfb6      	itet	lt
 801237e:	222d      	movlt	r2, #45	; 0x2d
 8012380:	2200      	movge	r2, #0
 8012382:	eeb1 8b40 	vneglt.f64	d8, d0
 8012386:	2d46      	cmp	r5, #70	; 0x46
 8012388:	460c      	mov	r4, r1
 801238a:	701a      	strb	r2, [r3, #0]
 801238c:	d004      	beq.n	8012398 <__cvt+0x38>
 801238e:	2d45      	cmp	r5, #69	; 0x45
 8012390:	d100      	bne.n	8012394 <__cvt+0x34>
 8012392:	3401      	adds	r4, #1
 8012394:	2102      	movs	r1, #2
 8012396:	e000      	b.n	801239a <__cvt+0x3a>
 8012398:	2103      	movs	r1, #3
 801239a:	ab03      	add	r3, sp, #12
 801239c:	9301      	str	r3, [sp, #4]
 801239e:	ab02      	add	r3, sp, #8
 80123a0:	9300      	str	r3, [sp, #0]
 80123a2:	4622      	mov	r2, r4
 80123a4:	4633      	mov	r3, r6
 80123a6:	eeb0 0b48 	vmov.f64	d0, d8
 80123aa:	f000 fca9 	bl	8012d00 <_dtoa_r>
 80123ae:	2d47      	cmp	r5, #71	; 0x47
 80123b0:	d101      	bne.n	80123b6 <__cvt+0x56>
 80123b2:	07fb      	lsls	r3, r7, #31
 80123b4:	d51a      	bpl.n	80123ec <__cvt+0x8c>
 80123b6:	2d46      	cmp	r5, #70	; 0x46
 80123b8:	eb00 0204 	add.w	r2, r0, r4
 80123bc:	d10c      	bne.n	80123d8 <__cvt+0x78>
 80123be:	7803      	ldrb	r3, [r0, #0]
 80123c0:	2b30      	cmp	r3, #48	; 0x30
 80123c2:	d107      	bne.n	80123d4 <__cvt+0x74>
 80123c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80123c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123cc:	bf1c      	itt	ne
 80123ce:	f1c4 0401 	rsbne	r4, r4, #1
 80123d2:	6034      	strne	r4, [r6, #0]
 80123d4:	6833      	ldr	r3, [r6, #0]
 80123d6:	441a      	add	r2, r3
 80123d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80123dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123e0:	bf08      	it	eq
 80123e2:	9203      	streq	r2, [sp, #12]
 80123e4:	2130      	movs	r1, #48	; 0x30
 80123e6:	9b03      	ldr	r3, [sp, #12]
 80123e8:	4293      	cmp	r3, r2
 80123ea:	d307      	bcc.n	80123fc <__cvt+0x9c>
 80123ec:	9b03      	ldr	r3, [sp, #12]
 80123ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80123f0:	1a1b      	subs	r3, r3, r0
 80123f2:	6013      	str	r3, [r2, #0]
 80123f4:	b005      	add	sp, #20
 80123f6:	ecbd 8b02 	vpop	{d8}
 80123fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123fc:	1c5c      	adds	r4, r3, #1
 80123fe:	9403      	str	r4, [sp, #12]
 8012400:	7019      	strb	r1, [r3, #0]
 8012402:	e7f0      	b.n	80123e6 <__cvt+0x86>

08012404 <__exponent>:
 8012404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012406:	4603      	mov	r3, r0
 8012408:	2900      	cmp	r1, #0
 801240a:	bfb8      	it	lt
 801240c:	4249      	neglt	r1, r1
 801240e:	f803 2b02 	strb.w	r2, [r3], #2
 8012412:	bfb4      	ite	lt
 8012414:	222d      	movlt	r2, #45	; 0x2d
 8012416:	222b      	movge	r2, #43	; 0x2b
 8012418:	2909      	cmp	r1, #9
 801241a:	7042      	strb	r2, [r0, #1]
 801241c:	dd2a      	ble.n	8012474 <__exponent+0x70>
 801241e:	f10d 0407 	add.w	r4, sp, #7
 8012422:	46a4      	mov	ip, r4
 8012424:	270a      	movs	r7, #10
 8012426:	46a6      	mov	lr, r4
 8012428:	460a      	mov	r2, r1
 801242a:	fb91 f6f7 	sdiv	r6, r1, r7
 801242e:	fb07 1516 	mls	r5, r7, r6, r1
 8012432:	3530      	adds	r5, #48	; 0x30
 8012434:	2a63      	cmp	r2, #99	; 0x63
 8012436:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801243a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801243e:	4631      	mov	r1, r6
 8012440:	dcf1      	bgt.n	8012426 <__exponent+0x22>
 8012442:	3130      	adds	r1, #48	; 0x30
 8012444:	f1ae 0502 	sub.w	r5, lr, #2
 8012448:	f804 1c01 	strb.w	r1, [r4, #-1]
 801244c:	1c44      	adds	r4, r0, #1
 801244e:	4629      	mov	r1, r5
 8012450:	4561      	cmp	r1, ip
 8012452:	d30a      	bcc.n	801246a <__exponent+0x66>
 8012454:	f10d 0209 	add.w	r2, sp, #9
 8012458:	eba2 020e 	sub.w	r2, r2, lr
 801245c:	4565      	cmp	r5, ip
 801245e:	bf88      	it	hi
 8012460:	2200      	movhi	r2, #0
 8012462:	4413      	add	r3, r2
 8012464:	1a18      	subs	r0, r3, r0
 8012466:	b003      	add	sp, #12
 8012468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801246a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801246e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012472:	e7ed      	b.n	8012450 <__exponent+0x4c>
 8012474:	2330      	movs	r3, #48	; 0x30
 8012476:	3130      	adds	r1, #48	; 0x30
 8012478:	7083      	strb	r3, [r0, #2]
 801247a:	70c1      	strb	r1, [r0, #3]
 801247c:	1d03      	adds	r3, r0, #4
 801247e:	e7f1      	b.n	8012464 <__exponent+0x60>

08012480 <_printf_float>:
 8012480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012484:	b08b      	sub	sp, #44	; 0x2c
 8012486:	460c      	mov	r4, r1
 8012488:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801248c:	4616      	mov	r6, r2
 801248e:	461f      	mov	r7, r3
 8012490:	4605      	mov	r5, r0
 8012492:	f001 f9a3 	bl	80137dc <_localeconv_r>
 8012496:	f8d0 b000 	ldr.w	fp, [r0]
 801249a:	4658      	mov	r0, fp
 801249c:	f7ed ff20 	bl	80002e0 <strlen>
 80124a0:	2300      	movs	r3, #0
 80124a2:	9308      	str	r3, [sp, #32]
 80124a4:	f8d8 3000 	ldr.w	r3, [r8]
 80124a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80124ac:	6822      	ldr	r2, [r4, #0]
 80124ae:	3307      	adds	r3, #7
 80124b0:	f023 0307 	bic.w	r3, r3, #7
 80124b4:	f103 0108 	add.w	r1, r3, #8
 80124b8:	f8c8 1000 	str.w	r1, [r8]
 80124bc:	4682      	mov	sl, r0
 80124be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80124c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80124c6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8012728 <_printf_float+0x2a8>
 80124ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80124ce:	eeb0 6bc0 	vabs.f64	d6, d0
 80124d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80124d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124da:	dd24      	ble.n	8012526 <_printf_float+0xa6>
 80124dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80124e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124e4:	d502      	bpl.n	80124ec <_printf_float+0x6c>
 80124e6:	232d      	movs	r3, #45	; 0x2d
 80124e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80124ec:	4b90      	ldr	r3, [pc, #576]	; (8012730 <_printf_float+0x2b0>)
 80124ee:	4891      	ldr	r0, [pc, #580]	; (8012734 <_printf_float+0x2b4>)
 80124f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80124f4:	bf94      	ite	ls
 80124f6:	4698      	movls	r8, r3
 80124f8:	4680      	movhi	r8, r0
 80124fa:	2303      	movs	r3, #3
 80124fc:	6123      	str	r3, [r4, #16]
 80124fe:	f022 0204 	bic.w	r2, r2, #4
 8012502:	2300      	movs	r3, #0
 8012504:	6022      	str	r2, [r4, #0]
 8012506:	9304      	str	r3, [sp, #16]
 8012508:	9700      	str	r7, [sp, #0]
 801250a:	4633      	mov	r3, r6
 801250c:	aa09      	add	r2, sp, #36	; 0x24
 801250e:	4621      	mov	r1, r4
 8012510:	4628      	mov	r0, r5
 8012512:	f000 f9d3 	bl	80128bc <_printf_common>
 8012516:	3001      	adds	r0, #1
 8012518:	f040 808a 	bne.w	8012630 <_printf_float+0x1b0>
 801251c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012520:	b00b      	add	sp, #44	; 0x2c
 8012522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012526:	eeb4 0b40 	vcmp.f64	d0, d0
 801252a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801252e:	d709      	bvc.n	8012544 <_printf_float+0xc4>
 8012530:	ee10 3a90 	vmov	r3, s1
 8012534:	2b00      	cmp	r3, #0
 8012536:	bfbc      	itt	lt
 8012538:	232d      	movlt	r3, #45	; 0x2d
 801253a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801253e:	487e      	ldr	r0, [pc, #504]	; (8012738 <_printf_float+0x2b8>)
 8012540:	4b7e      	ldr	r3, [pc, #504]	; (801273c <_printf_float+0x2bc>)
 8012542:	e7d5      	b.n	80124f0 <_printf_float+0x70>
 8012544:	6863      	ldr	r3, [r4, #4]
 8012546:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801254a:	9104      	str	r1, [sp, #16]
 801254c:	1c59      	adds	r1, r3, #1
 801254e:	d13c      	bne.n	80125ca <_printf_float+0x14a>
 8012550:	2306      	movs	r3, #6
 8012552:	6063      	str	r3, [r4, #4]
 8012554:	2300      	movs	r3, #0
 8012556:	9303      	str	r3, [sp, #12]
 8012558:	ab08      	add	r3, sp, #32
 801255a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801255e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012562:	ab07      	add	r3, sp, #28
 8012564:	6861      	ldr	r1, [r4, #4]
 8012566:	9300      	str	r3, [sp, #0]
 8012568:	6022      	str	r2, [r4, #0]
 801256a:	f10d 031b 	add.w	r3, sp, #27
 801256e:	4628      	mov	r0, r5
 8012570:	f7ff fef6 	bl	8012360 <__cvt>
 8012574:	9b04      	ldr	r3, [sp, #16]
 8012576:	9907      	ldr	r1, [sp, #28]
 8012578:	2b47      	cmp	r3, #71	; 0x47
 801257a:	4680      	mov	r8, r0
 801257c:	d108      	bne.n	8012590 <_printf_float+0x110>
 801257e:	1cc8      	adds	r0, r1, #3
 8012580:	db02      	blt.n	8012588 <_printf_float+0x108>
 8012582:	6863      	ldr	r3, [r4, #4]
 8012584:	4299      	cmp	r1, r3
 8012586:	dd41      	ble.n	801260c <_printf_float+0x18c>
 8012588:	f1a9 0902 	sub.w	r9, r9, #2
 801258c:	fa5f f989 	uxtb.w	r9, r9
 8012590:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012594:	d820      	bhi.n	80125d8 <_printf_float+0x158>
 8012596:	3901      	subs	r1, #1
 8012598:	464a      	mov	r2, r9
 801259a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801259e:	9107      	str	r1, [sp, #28]
 80125a0:	f7ff ff30 	bl	8012404 <__exponent>
 80125a4:	9a08      	ldr	r2, [sp, #32]
 80125a6:	9004      	str	r0, [sp, #16]
 80125a8:	1813      	adds	r3, r2, r0
 80125aa:	2a01      	cmp	r2, #1
 80125ac:	6123      	str	r3, [r4, #16]
 80125ae:	dc02      	bgt.n	80125b6 <_printf_float+0x136>
 80125b0:	6822      	ldr	r2, [r4, #0]
 80125b2:	07d2      	lsls	r2, r2, #31
 80125b4:	d501      	bpl.n	80125ba <_printf_float+0x13a>
 80125b6:	3301      	adds	r3, #1
 80125b8:	6123      	str	r3, [r4, #16]
 80125ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d0a2      	beq.n	8012508 <_printf_float+0x88>
 80125c2:	232d      	movs	r3, #45	; 0x2d
 80125c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80125c8:	e79e      	b.n	8012508 <_printf_float+0x88>
 80125ca:	9904      	ldr	r1, [sp, #16]
 80125cc:	2947      	cmp	r1, #71	; 0x47
 80125ce:	d1c1      	bne.n	8012554 <_printf_float+0xd4>
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d1bf      	bne.n	8012554 <_printf_float+0xd4>
 80125d4:	2301      	movs	r3, #1
 80125d6:	e7bc      	b.n	8012552 <_printf_float+0xd2>
 80125d8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80125dc:	d118      	bne.n	8012610 <_printf_float+0x190>
 80125de:	2900      	cmp	r1, #0
 80125e0:	6863      	ldr	r3, [r4, #4]
 80125e2:	dd0b      	ble.n	80125fc <_printf_float+0x17c>
 80125e4:	6121      	str	r1, [r4, #16]
 80125e6:	b913      	cbnz	r3, 80125ee <_printf_float+0x16e>
 80125e8:	6822      	ldr	r2, [r4, #0]
 80125ea:	07d0      	lsls	r0, r2, #31
 80125ec:	d502      	bpl.n	80125f4 <_printf_float+0x174>
 80125ee:	3301      	adds	r3, #1
 80125f0:	440b      	add	r3, r1
 80125f2:	6123      	str	r3, [r4, #16]
 80125f4:	2300      	movs	r3, #0
 80125f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80125f8:	9304      	str	r3, [sp, #16]
 80125fa:	e7de      	b.n	80125ba <_printf_float+0x13a>
 80125fc:	b913      	cbnz	r3, 8012604 <_printf_float+0x184>
 80125fe:	6822      	ldr	r2, [r4, #0]
 8012600:	07d2      	lsls	r2, r2, #31
 8012602:	d501      	bpl.n	8012608 <_printf_float+0x188>
 8012604:	3302      	adds	r3, #2
 8012606:	e7f4      	b.n	80125f2 <_printf_float+0x172>
 8012608:	2301      	movs	r3, #1
 801260a:	e7f2      	b.n	80125f2 <_printf_float+0x172>
 801260c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012610:	9b08      	ldr	r3, [sp, #32]
 8012612:	4299      	cmp	r1, r3
 8012614:	db05      	blt.n	8012622 <_printf_float+0x1a2>
 8012616:	6823      	ldr	r3, [r4, #0]
 8012618:	6121      	str	r1, [r4, #16]
 801261a:	07d8      	lsls	r0, r3, #31
 801261c:	d5ea      	bpl.n	80125f4 <_printf_float+0x174>
 801261e:	1c4b      	adds	r3, r1, #1
 8012620:	e7e7      	b.n	80125f2 <_printf_float+0x172>
 8012622:	2900      	cmp	r1, #0
 8012624:	bfd4      	ite	le
 8012626:	f1c1 0202 	rsble	r2, r1, #2
 801262a:	2201      	movgt	r2, #1
 801262c:	4413      	add	r3, r2
 801262e:	e7e0      	b.n	80125f2 <_printf_float+0x172>
 8012630:	6823      	ldr	r3, [r4, #0]
 8012632:	055a      	lsls	r2, r3, #21
 8012634:	d407      	bmi.n	8012646 <_printf_float+0x1c6>
 8012636:	6923      	ldr	r3, [r4, #16]
 8012638:	4642      	mov	r2, r8
 801263a:	4631      	mov	r1, r6
 801263c:	4628      	mov	r0, r5
 801263e:	47b8      	blx	r7
 8012640:	3001      	adds	r0, #1
 8012642:	d12a      	bne.n	801269a <_printf_float+0x21a>
 8012644:	e76a      	b.n	801251c <_printf_float+0x9c>
 8012646:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801264a:	f240 80e2 	bls.w	8012812 <_printf_float+0x392>
 801264e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012652:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801265a:	d133      	bne.n	80126c4 <_printf_float+0x244>
 801265c:	4a38      	ldr	r2, [pc, #224]	; (8012740 <_printf_float+0x2c0>)
 801265e:	2301      	movs	r3, #1
 8012660:	4631      	mov	r1, r6
 8012662:	4628      	mov	r0, r5
 8012664:	47b8      	blx	r7
 8012666:	3001      	adds	r0, #1
 8012668:	f43f af58 	beq.w	801251c <_printf_float+0x9c>
 801266c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012670:	429a      	cmp	r2, r3
 8012672:	db02      	blt.n	801267a <_printf_float+0x1fa>
 8012674:	6823      	ldr	r3, [r4, #0]
 8012676:	07d8      	lsls	r0, r3, #31
 8012678:	d50f      	bpl.n	801269a <_printf_float+0x21a>
 801267a:	4653      	mov	r3, sl
 801267c:	465a      	mov	r2, fp
 801267e:	4631      	mov	r1, r6
 8012680:	4628      	mov	r0, r5
 8012682:	47b8      	blx	r7
 8012684:	3001      	adds	r0, #1
 8012686:	f43f af49 	beq.w	801251c <_printf_float+0x9c>
 801268a:	f04f 0800 	mov.w	r8, #0
 801268e:	f104 091a 	add.w	r9, r4, #26
 8012692:	9b08      	ldr	r3, [sp, #32]
 8012694:	3b01      	subs	r3, #1
 8012696:	4543      	cmp	r3, r8
 8012698:	dc09      	bgt.n	80126ae <_printf_float+0x22e>
 801269a:	6823      	ldr	r3, [r4, #0]
 801269c:	079b      	lsls	r3, r3, #30
 801269e:	f100 8108 	bmi.w	80128b2 <_printf_float+0x432>
 80126a2:	68e0      	ldr	r0, [r4, #12]
 80126a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126a6:	4298      	cmp	r0, r3
 80126a8:	bfb8      	it	lt
 80126aa:	4618      	movlt	r0, r3
 80126ac:	e738      	b.n	8012520 <_printf_float+0xa0>
 80126ae:	2301      	movs	r3, #1
 80126b0:	464a      	mov	r2, r9
 80126b2:	4631      	mov	r1, r6
 80126b4:	4628      	mov	r0, r5
 80126b6:	47b8      	blx	r7
 80126b8:	3001      	adds	r0, #1
 80126ba:	f43f af2f 	beq.w	801251c <_printf_float+0x9c>
 80126be:	f108 0801 	add.w	r8, r8, #1
 80126c2:	e7e6      	b.n	8012692 <_printf_float+0x212>
 80126c4:	9b07      	ldr	r3, [sp, #28]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	dc3c      	bgt.n	8012744 <_printf_float+0x2c4>
 80126ca:	4a1d      	ldr	r2, [pc, #116]	; (8012740 <_printf_float+0x2c0>)
 80126cc:	2301      	movs	r3, #1
 80126ce:	4631      	mov	r1, r6
 80126d0:	4628      	mov	r0, r5
 80126d2:	47b8      	blx	r7
 80126d4:	3001      	adds	r0, #1
 80126d6:	f43f af21 	beq.w	801251c <_printf_float+0x9c>
 80126da:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80126de:	4313      	orrs	r3, r2
 80126e0:	d102      	bne.n	80126e8 <_printf_float+0x268>
 80126e2:	6823      	ldr	r3, [r4, #0]
 80126e4:	07d9      	lsls	r1, r3, #31
 80126e6:	d5d8      	bpl.n	801269a <_printf_float+0x21a>
 80126e8:	4653      	mov	r3, sl
 80126ea:	465a      	mov	r2, fp
 80126ec:	4631      	mov	r1, r6
 80126ee:	4628      	mov	r0, r5
 80126f0:	47b8      	blx	r7
 80126f2:	3001      	adds	r0, #1
 80126f4:	f43f af12 	beq.w	801251c <_printf_float+0x9c>
 80126f8:	f04f 0900 	mov.w	r9, #0
 80126fc:	f104 0a1a 	add.w	sl, r4, #26
 8012700:	9b07      	ldr	r3, [sp, #28]
 8012702:	425b      	negs	r3, r3
 8012704:	454b      	cmp	r3, r9
 8012706:	dc01      	bgt.n	801270c <_printf_float+0x28c>
 8012708:	9b08      	ldr	r3, [sp, #32]
 801270a:	e795      	b.n	8012638 <_printf_float+0x1b8>
 801270c:	2301      	movs	r3, #1
 801270e:	4652      	mov	r2, sl
 8012710:	4631      	mov	r1, r6
 8012712:	4628      	mov	r0, r5
 8012714:	47b8      	blx	r7
 8012716:	3001      	adds	r0, #1
 8012718:	f43f af00 	beq.w	801251c <_printf_float+0x9c>
 801271c:	f109 0901 	add.w	r9, r9, #1
 8012720:	e7ee      	b.n	8012700 <_printf_float+0x280>
 8012722:	bf00      	nop
 8012724:	f3af 8000 	nop.w
 8012728:	ffffffff 	.word	0xffffffff
 801272c:	7fefffff 	.word	0x7fefffff
 8012730:	0801678c 	.word	0x0801678c
 8012734:	08016790 	.word	0x08016790
 8012738:	08016798 	.word	0x08016798
 801273c:	08016794 	.word	0x08016794
 8012740:	0801679c 	.word	0x0801679c
 8012744:	9a08      	ldr	r2, [sp, #32]
 8012746:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012748:	429a      	cmp	r2, r3
 801274a:	bfa8      	it	ge
 801274c:	461a      	movge	r2, r3
 801274e:	2a00      	cmp	r2, #0
 8012750:	4691      	mov	r9, r2
 8012752:	dc38      	bgt.n	80127c6 <_printf_float+0x346>
 8012754:	2300      	movs	r3, #0
 8012756:	9305      	str	r3, [sp, #20]
 8012758:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801275c:	f104 021a 	add.w	r2, r4, #26
 8012760:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012762:	9905      	ldr	r1, [sp, #20]
 8012764:	9304      	str	r3, [sp, #16]
 8012766:	eba3 0309 	sub.w	r3, r3, r9
 801276a:	428b      	cmp	r3, r1
 801276c:	dc33      	bgt.n	80127d6 <_printf_float+0x356>
 801276e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012772:	429a      	cmp	r2, r3
 8012774:	db3c      	blt.n	80127f0 <_printf_float+0x370>
 8012776:	6823      	ldr	r3, [r4, #0]
 8012778:	07da      	lsls	r2, r3, #31
 801277a:	d439      	bmi.n	80127f0 <_printf_float+0x370>
 801277c:	9b08      	ldr	r3, [sp, #32]
 801277e:	9a04      	ldr	r2, [sp, #16]
 8012780:	9907      	ldr	r1, [sp, #28]
 8012782:	1a9a      	subs	r2, r3, r2
 8012784:	eba3 0901 	sub.w	r9, r3, r1
 8012788:	4591      	cmp	r9, r2
 801278a:	bfa8      	it	ge
 801278c:	4691      	movge	r9, r2
 801278e:	f1b9 0f00 	cmp.w	r9, #0
 8012792:	dc35      	bgt.n	8012800 <_printf_float+0x380>
 8012794:	f04f 0800 	mov.w	r8, #0
 8012798:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801279c:	f104 0a1a 	add.w	sl, r4, #26
 80127a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80127a4:	1a9b      	subs	r3, r3, r2
 80127a6:	eba3 0309 	sub.w	r3, r3, r9
 80127aa:	4543      	cmp	r3, r8
 80127ac:	f77f af75 	ble.w	801269a <_printf_float+0x21a>
 80127b0:	2301      	movs	r3, #1
 80127b2:	4652      	mov	r2, sl
 80127b4:	4631      	mov	r1, r6
 80127b6:	4628      	mov	r0, r5
 80127b8:	47b8      	blx	r7
 80127ba:	3001      	adds	r0, #1
 80127bc:	f43f aeae 	beq.w	801251c <_printf_float+0x9c>
 80127c0:	f108 0801 	add.w	r8, r8, #1
 80127c4:	e7ec      	b.n	80127a0 <_printf_float+0x320>
 80127c6:	4613      	mov	r3, r2
 80127c8:	4631      	mov	r1, r6
 80127ca:	4642      	mov	r2, r8
 80127cc:	4628      	mov	r0, r5
 80127ce:	47b8      	blx	r7
 80127d0:	3001      	adds	r0, #1
 80127d2:	d1bf      	bne.n	8012754 <_printf_float+0x2d4>
 80127d4:	e6a2      	b.n	801251c <_printf_float+0x9c>
 80127d6:	2301      	movs	r3, #1
 80127d8:	4631      	mov	r1, r6
 80127da:	4628      	mov	r0, r5
 80127dc:	9204      	str	r2, [sp, #16]
 80127de:	47b8      	blx	r7
 80127e0:	3001      	adds	r0, #1
 80127e2:	f43f ae9b 	beq.w	801251c <_printf_float+0x9c>
 80127e6:	9b05      	ldr	r3, [sp, #20]
 80127e8:	9a04      	ldr	r2, [sp, #16]
 80127ea:	3301      	adds	r3, #1
 80127ec:	9305      	str	r3, [sp, #20]
 80127ee:	e7b7      	b.n	8012760 <_printf_float+0x2e0>
 80127f0:	4653      	mov	r3, sl
 80127f2:	465a      	mov	r2, fp
 80127f4:	4631      	mov	r1, r6
 80127f6:	4628      	mov	r0, r5
 80127f8:	47b8      	blx	r7
 80127fa:	3001      	adds	r0, #1
 80127fc:	d1be      	bne.n	801277c <_printf_float+0x2fc>
 80127fe:	e68d      	b.n	801251c <_printf_float+0x9c>
 8012800:	9a04      	ldr	r2, [sp, #16]
 8012802:	464b      	mov	r3, r9
 8012804:	4442      	add	r2, r8
 8012806:	4631      	mov	r1, r6
 8012808:	4628      	mov	r0, r5
 801280a:	47b8      	blx	r7
 801280c:	3001      	adds	r0, #1
 801280e:	d1c1      	bne.n	8012794 <_printf_float+0x314>
 8012810:	e684      	b.n	801251c <_printf_float+0x9c>
 8012812:	9a08      	ldr	r2, [sp, #32]
 8012814:	2a01      	cmp	r2, #1
 8012816:	dc01      	bgt.n	801281c <_printf_float+0x39c>
 8012818:	07db      	lsls	r3, r3, #31
 801281a:	d537      	bpl.n	801288c <_printf_float+0x40c>
 801281c:	2301      	movs	r3, #1
 801281e:	4642      	mov	r2, r8
 8012820:	4631      	mov	r1, r6
 8012822:	4628      	mov	r0, r5
 8012824:	47b8      	blx	r7
 8012826:	3001      	adds	r0, #1
 8012828:	f43f ae78 	beq.w	801251c <_printf_float+0x9c>
 801282c:	4653      	mov	r3, sl
 801282e:	465a      	mov	r2, fp
 8012830:	4631      	mov	r1, r6
 8012832:	4628      	mov	r0, r5
 8012834:	47b8      	blx	r7
 8012836:	3001      	adds	r0, #1
 8012838:	f43f ae70 	beq.w	801251c <_printf_float+0x9c>
 801283c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012840:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012848:	d01b      	beq.n	8012882 <_printf_float+0x402>
 801284a:	9b08      	ldr	r3, [sp, #32]
 801284c:	f108 0201 	add.w	r2, r8, #1
 8012850:	3b01      	subs	r3, #1
 8012852:	4631      	mov	r1, r6
 8012854:	4628      	mov	r0, r5
 8012856:	47b8      	blx	r7
 8012858:	3001      	adds	r0, #1
 801285a:	d10e      	bne.n	801287a <_printf_float+0x3fa>
 801285c:	e65e      	b.n	801251c <_printf_float+0x9c>
 801285e:	2301      	movs	r3, #1
 8012860:	464a      	mov	r2, r9
 8012862:	4631      	mov	r1, r6
 8012864:	4628      	mov	r0, r5
 8012866:	47b8      	blx	r7
 8012868:	3001      	adds	r0, #1
 801286a:	f43f ae57 	beq.w	801251c <_printf_float+0x9c>
 801286e:	f108 0801 	add.w	r8, r8, #1
 8012872:	9b08      	ldr	r3, [sp, #32]
 8012874:	3b01      	subs	r3, #1
 8012876:	4543      	cmp	r3, r8
 8012878:	dcf1      	bgt.n	801285e <_printf_float+0x3de>
 801287a:	9b04      	ldr	r3, [sp, #16]
 801287c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012880:	e6db      	b.n	801263a <_printf_float+0x1ba>
 8012882:	f04f 0800 	mov.w	r8, #0
 8012886:	f104 091a 	add.w	r9, r4, #26
 801288a:	e7f2      	b.n	8012872 <_printf_float+0x3f2>
 801288c:	2301      	movs	r3, #1
 801288e:	4642      	mov	r2, r8
 8012890:	e7df      	b.n	8012852 <_printf_float+0x3d2>
 8012892:	2301      	movs	r3, #1
 8012894:	464a      	mov	r2, r9
 8012896:	4631      	mov	r1, r6
 8012898:	4628      	mov	r0, r5
 801289a:	47b8      	blx	r7
 801289c:	3001      	adds	r0, #1
 801289e:	f43f ae3d 	beq.w	801251c <_printf_float+0x9c>
 80128a2:	f108 0801 	add.w	r8, r8, #1
 80128a6:	68e3      	ldr	r3, [r4, #12]
 80128a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80128aa:	1a5b      	subs	r3, r3, r1
 80128ac:	4543      	cmp	r3, r8
 80128ae:	dcf0      	bgt.n	8012892 <_printf_float+0x412>
 80128b0:	e6f7      	b.n	80126a2 <_printf_float+0x222>
 80128b2:	f04f 0800 	mov.w	r8, #0
 80128b6:	f104 0919 	add.w	r9, r4, #25
 80128ba:	e7f4      	b.n	80128a6 <_printf_float+0x426>

080128bc <_printf_common>:
 80128bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128c0:	4616      	mov	r6, r2
 80128c2:	4699      	mov	r9, r3
 80128c4:	688a      	ldr	r2, [r1, #8]
 80128c6:	690b      	ldr	r3, [r1, #16]
 80128c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80128cc:	4293      	cmp	r3, r2
 80128ce:	bfb8      	it	lt
 80128d0:	4613      	movlt	r3, r2
 80128d2:	6033      	str	r3, [r6, #0]
 80128d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80128d8:	4607      	mov	r7, r0
 80128da:	460c      	mov	r4, r1
 80128dc:	b10a      	cbz	r2, 80128e2 <_printf_common+0x26>
 80128de:	3301      	adds	r3, #1
 80128e0:	6033      	str	r3, [r6, #0]
 80128e2:	6823      	ldr	r3, [r4, #0]
 80128e4:	0699      	lsls	r1, r3, #26
 80128e6:	bf42      	ittt	mi
 80128e8:	6833      	ldrmi	r3, [r6, #0]
 80128ea:	3302      	addmi	r3, #2
 80128ec:	6033      	strmi	r3, [r6, #0]
 80128ee:	6825      	ldr	r5, [r4, #0]
 80128f0:	f015 0506 	ands.w	r5, r5, #6
 80128f4:	d106      	bne.n	8012904 <_printf_common+0x48>
 80128f6:	f104 0a19 	add.w	sl, r4, #25
 80128fa:	68e3      	ldr	r3, [r4, #12]
 80128fc:	6832      	ldr	r2, [r6, #0]
 80128fe:	1a9b      	subs	r3, r3, r2
 8012900:	42ab      	cmp	r3, r5
 8012902:	dc26      	bgt.n	8012952 <_printf_common+0x96>
 8012904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012908:	1e13      	subs	r3, r2, #0
 801290a:	6822      	ldr	r2, [r4, #0]
 801290c:	bf18      	it	ne
 801290e:	2301      	movne	r3, #1
 8012910:	0692      	lsls	r2, r2, #26
 8012912:	d42b      	bmi.n	801296c <_printf_common+0xb0>
 8012914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012918:	4649      	mov	r1, r9
 801291a:	4638      	mov	r0, r7
 801291c:	47c0      	blx	r8
 801291e:	3001      	adds	r0, #1
 8012920:	d01e      	beq.n	8012960 <_printf_common+0xa4>
 8012922:	6823      	ldr	r3, [r4, #0]
 8012924:	68e5      	ldr	r5, [r4, #12]
 8012926:	6832      	ldr	r2, [r6, #0]
 8012928:	f003 0306 	and.w	r3, r3, #6
 801292c:	2b04      	cmp	r3, #4
 801292e:	bf08      	it	eq
 8012930:	1aad      	subeq	r5, r5, r2
 8012932:	68a3      	ldr	r3, [r4, #8]
 8012934:	6922      	ldr	r2, [r4, #16]
 8012936:	bf0c      	ite	eq
 8012938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801293c:	2500      	movne	r5, #0
 801293e:	4293      	cmp	r3, r2
 8012940:	bfc4      	itt	gt
 8012942:	1a9b      	subgt	r3, r3, r2
 8012944:	18ed      	addgt	r5, r5, r3
 8012946:	2600      	movs	r6, #0
 8012948:	341a      	adds	r4, #26
 801294a:	42b5      	cmp	r5, r6
 801294c:	d11a      	bne.n	8012984 <_printf_common+0xc8>
 801294e:	2000      	movs	r0, #0
 8012950:	e008      	b.n	8012964 <_printf_common+0xa8>
 8012952:	2301      	movs	r3, #1
 8012954:	4652      	mov	r2, sl
 8012956:	4649      	mov	r1, r9
 8012958:	4638      	mov	r0, r7
 801295a:	47c0      	blx	r8
 801295c:	3001      	adds	r0, #1
 801295e:	d103      	bne.n	8012968 <_printf_common+0xac>
 8012960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012968:	3501      	adds	r5, #1
 801296a:	e7c6      	b.n	80128fa <_printf_common+0x3e>
 801296c:	18e1      	adds	r1, r4, r3
 801296e:	1c5a      	adds	r2, r3, #1
 8012970:	2030      	movs	r0, #48	; 0x30
 8012972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012976:	4422      	add	r2, r4
 8012978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801297c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012980:	3302      	adds	r3, #2
 8012982:	e7c7      	b.n	8012914 <_printf_common+0x58>
 8012984:	2301      	movs	r3, #1
 8012986:	4622      	mov	r2, r4
 8012988:	4649      	mov	r1, r9
 801298a:	4638      	mov	r0, r7
 801298c:	47c0      	blx	r8
 801298e:	3001      	adds	r0, #1
 8012990:	d0e6      	beq.n	8012960 <_printf_common+0xa4>
 8012992:	3601      	adds	r6, #1
 8012994:	e7d9      	b.n	801294a <_printf_common+0x8e>
	...

08012998 <_printf_i>:
 8012998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801299c:	7e0f      	ldrb	r7, [r1, #24]
 801299e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80129a0:	2f78      	cmp	r7, #120	; 0x78
 80129a2:	4691      	mov	r9, r2
 80129a4:	4680      	mov	r8, r0
 80129a6:	460c      	mov	r4, r1
 80129a8:	469a      	mov	sl, r3
 80129aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80129ae:	d807      	bhi.n	80129c0 <_printf_i+0x28>
 80129b0:	2f62      	cmp	r7, #98	; 0x62
 80129b2:	d80a      	bhi.n	80129ca <_printf_i+0x32>
 80129b4:	2f00      	cmp	r7, #0
 80129b6:	f000 80d8 	beq.w	8012b6a <_printf_i+0x1d2>
 80129ba:	2f58      	cmp	r7, #88	; 0x58
 80129bc:	f000 80a3 	beq.w	8012b06 <_printf_i+0x16e>
 80129c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80129c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80129c8:	e03a      	b.n	8012a40 <_printf_i+0xa8>
 80129ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80129ce:	2b15      	cmp	r3, #21
 80129d0:	d8f6      	bhi.n	80129c0 <_printf_i+0x28>
 80129d2:	a101      	add	r1, pc, #4	; (adr r1, 80129d8 <_printf_i+0x40>)
 80129d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80129d8:	08012a31 	.word	0x08012a31
 80129dc:	08012a45 	.word	0x08012a45
 80129e0:	080129c1 	.word	0x080129c1
 80129e4:	080129c1 	.word	0x080129c1
 80129e8:	080129c1 	.word	0x080129c1
 80129ec:	080129c1 	.word	0x080129c1
 80129f0:	08012a45 	.word	0x08012a45
 80129f4:	080129c1 	.word	0x080129c1
 80129f8:	080129c1 	.word	0x080129c1
 80129fc:	080129c1 	.word	0x080129c1
 8012a00:	080129c1 	.word	0x080129c1
 8012a04:	08012b51 	.word	0x08012b51
 8012a08:	08012a75 	.word	0x08012a75
 8012a0c:	08012b33 	.word	0x08012b33
 8012a10:	080129c1 	.word	0x080129c1
 8012a14:	080129c1 	.word	0x080129c1
 8012a18:	08012b73 	.word	0x08012b73
 8012a1c:	080129c1 	.word	0x080129c1
 8012a20:	08012a75 	.word	0x08012a75
 8012a24:	080129c1 	.word	0x080129c1
 8012a28:	080129c1 	.word	0x080129c1
 8012a2c:	08012b3b 	.word	0x08012b3b
 8012a30:	682b      	ldr	r3, [r5, #0]
 8012a32:	1d1a      	adds	r2, r3, #4
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	602a      	str	r2, [r5, #0]
 8012a38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012a40:	2301      	movs	r3, #1
 8012a42:	e0a3      	b.n	8012b8c <_printf_i+0x1f4>
 8012a44:	6820      	ldr	r0, [r4, #0]
 8012a46:	6829      	ldr	r1, [r5, #0]
 8012a48:	0606      	lsls	r6, r0, #24
 8012a4a:	f101 0304 	add.w	r3, r1, #4
 8012a4e:	d50a      	bpl.n	8012a66 <_printf_i+0xce>
 8012a50:	680e      	ldr	r6, [r1, #0]
 8012a52:	602b      	str	r3, [r5, #0]
 8012a54:	2e00      	cmp	r6, #0
 8012a56:	da03      	bge.n	8012a60 <_printf_i+0xc8>
 8012a58:	232d      	movs	r3, #45	; 0x2d
 8012a5a:	4276      	negs	r6, r6
 8012a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a60:	485e      	ldr	r0, [pc, #376]	; (8012bdc <_printf_i+0x244>)
 8012a62:	230a      	movs	r3, #10
 8012a64:	e019      	b.n	8012a9a <_printf_i+0x102>
 8012a66:	680e      	ldr	r6, [r1, #0]
 8012a68:	602b      	str	r3, [r5, #0]
 8012a6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012a6e:	bf18      	it	ne
 8012a70:	b236      	sxthne	r6, r6
 8012a72:	e7ef      	b.n	8012a54 <_printf_i+0xbc>
 8012a74:	682b      	ldr	r3, [r5, #0]
 8012a76:	6820      	ldr	r0, [r4, #0]
 8012a78:	1d19      	adds	r1, r3, #4
 8012a7a:	6029      	str	r1, [r5, #0]
 8012a7c:	0601      	lsls	r1, r0, #24
 8012a7e:	d501      	bpl.n	8012a84 <_printf_i+0xec>
 8012a80:	681e      	ldr	r6, [r3, #0]
 8012a82:	e002      	b.n	8012a8a <_printf_i+0xf2>
 8012a84:	0646      	lsls	r6, r0, #25
 8012a86:	d5fb      	bpl.n	8012a80 <_printf_i+0xe8>
 8012a88:	881e      	ldrh	r6, [r3, #0]
 8012a8a:	4854      	ldr	r0, [pc, #336]	; (8012bdc <_printf_i+0x244>)
 8012a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8012a8e:	bf0c      	ite	eq
 8012a90:	2308      	moveq	r3, #8
 8012a92:	230a      	movne	r3, #10
 8012a94:	2100      	movs	r1, #0
 8012a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012a9a:	6865      	ldr	r5, [r4, #4]
 8012a9c:	60a5      	str	r5, [r4, #8]
 8012a9e:	2d00      	cmp	r5, #0
 8012aa0:	bfa2      	ittt	ge
 8012aa2:	6821      	ldrge	r1, [r4, #0]
 8012aa4:	f021 0104 	bicge.w	r1, r1, #4
 8012aa8:	6021      	strge	r1, [r4, #0]
 8012aaa:	b90e      	cbnz	r6, 8012ab0 <_printf_i+0x118>
 8012aac:	2d00      	cmp	r5, #0
 8012aae:	d04d      	beq.n	8012b4c <_printf_i+0x1b4>
 8012ab0:	4615      	mov	r5, r2
 8012ab2:	fbb6 f1f3 	udiv	r1, r6, r3
 8012ab6:	fb03 6711 	mls	r7, r3, r1, r6
 8012aba:	5dc7      	ldrb	r7, [r0, r7]
 8012abc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012ac0:	4637      	mov	r7, r6
 8012ac2:	42bb      	cmp	r3, r7
 8012ac4:	460e      	mov	r6, r1
 8012ac6:	d9f4      	bls.n	8012ab2 <_printf_i+0x11a>
 8012ac8:	2b08      	cmp	r3, #8
 8012aca:	d10b      	bne.n	8012ae4 <_printf_i+0x14c>
 8012acc:	6823      	ldr	r3, [r4, #0]
 8012ace:	07de      	lsls	r6, r3, #31
 8012ad0:	d508      	bpl.n	8012ae4 <_printf_i+0x14c>
 8012ad2:	6923      	ldr	r3, [r4, #16]
 8012ad4:	6861      	ldr	r1, [r4, #4]
 8012ad6:	4299      	cmp	r1, r3
 8012ad8:	bfde      	ittt	le
 8012ada:	2330      	movle	r3, #48	; 0x30
 8012adc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012ae0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012ae4:	1b52      	subs	r2, r2, r5
 8012ae6:	6122      	str	r2, [r4, #16]
 8012ae8:	f8cd a000 	str.w	sl, [sp]
 8012aec:	464b      	mov	r3, r9
 8012aee:	aa03      	add	r2, sp, #12
 8012af0:	4621      	mov	r1, r4
 8012af2:	4640      	mov	r0, r8
 8012af4:	f7ff fee2 	bl	80128bc <_printf_common>
 8012af8:	3001      	adds	r0, #1
 8012afa:	d14c      	bne.n	8012b96 <_printf_i+0x1fe>
 8012afc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b00:	b004      	add	sp, #16
 8012b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b06:	4835      	ldr	r0, [pc, #212]	; (8012bdc <_printf_i+0x244>)
 8012b08:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012b0c:	6829      	ldr	r1, [r5, #0]
 8012b0e:	6823      	ldr	r3, [r4, #0]
 8012b10:	f851 6b04 	ldr.w	r6, [r1], #4
 8012b14:	6029      	str	r1, [r5, #0]
 8012b16:	061d      	lsls	r5, r3, #24
 8012b18:	d514      	bpl.n	8012b44 <_printf_i+0x1ac>
 8012b1a:	07df      	lsls	r7, r3, #31
 8012b1c:	bf44      	itt	mi
 8012b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8012b22:	6023      	strmi	r3, [r4, #0]
 8012b24:	b91e      	cbnz	r6, 8012b2e <_printf_i+0x196>
 8012b26:	6823      	ldr	r3, [r4, #0]
 8012b28:	f023 0320 	bic.w	r3, r3, #32
 8012b2c:	6023      	str	r3, [r4, #0]
 8012b2e:	2310      	movs	r3, #16
 8012b30:	e7b0      	b.n	8012a94 <_printf_i+0xfc>
 8012b32:	6823      	ldr	r3, [r4, #0]
 8012b34:	f043 0320 	orr.w	r3, r3, #32
 8012b38:	6023      	str	r3, [r4, #0]
 8012b3a:	2378      	movs	r3, #120	; 0x78
 8012b3c:	4828      	ldr	r0, [pc, #160]	; (8012be0 <_printf_i+0x248>)
 8012b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012b42:	e7e3      	b.n	8012b0c <_printf_i+0x174>
 8012b44:	0659      	lsls	r1, r3, #25
 8012b46:	bf48      	it	mi
 8012b48:	b2b6      	uxthmi	r6, r6
 8012b4a:	e7e6      	b.n	8012b1a <_printf_i+0x182>
 8012b4c:	4615      	mov	r5, r2
 8012b4e:	e7bb      	b.n	8012ac8 <_printf_i+0x130>
 8012b50:	682b      	ldr	r3, [r5, #0]
 8012b52:	6826      	ldr	r6, [r4, #0]
 8012b54:	6961      	ldr	r1, [r4, #20]
 8012b56:	1d18      	adds	r0, r3, #4
 8012b58:	6028      	str	r0, [r5, #0]
 8012b5a:	0635      	lsls	r5, r6, #24
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	d501      	bpl.n	8012b64 <_printf_i+0x1cc>
 8012b60:	6019      	str	r1, [r3, #0]
 8012b62:	e002      	b.n	8012b6a <_printf_i+0x1d2>
 8012b64:	0670      	lsls	r0, r6, #25
 8012b66:	d5fb      	bpl.n	8012b60 <_printf_i+0x1c8>
 8012b68:	8019      	strh	r1, [r3, #0]
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	6123      	str	r3, [r4, #16]
 8012b6e:	4615      	mov	r5, r2
 8012b70:	e7ba      	b.n	8012ae8 <_printf_i+0x150>
 8012b72:	682b      	ldr	r3, [r5, #0]
 8012b74:	1d1a      	adds	r2, r3, #4
 8012b76:	602a      	str	r2, [r5, #0]
 8012b78:	681d      	ldr	r5, [r3, #0]
 8012b7a:	6862      	ldr	r2, [r4, #4]
 8012b7c:	2100      	movs	r1, #0
 8012b7e:	4628      	mov	r0, r5
 8012b80:	f7ed fbb6 	bl	80002f0 <memchr>
 8012b84:	b108      	cbz	r0, 8012b8a <_printf_i+0x1f2>
 8012b86:	1b40      	subs	r0, r0, r5
 8012b88:	6060      	str	r0, [r4, #4]
 8012b8a:	6863      	ldr	r3, [r4, #4]
 8012b8c:	6123      	str	r3, [r4, #16]
 8012b8e:	2300      	movs	r3, #0
 8012b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b94:	e7a8      	b.n	8012ae8 <_printf_i+0x150>
 8012b96:	6923      	ldr	r3, [r4, #16]
 8012b98:	462a      	mov	r2, r5
 8012b9a:	4649      	mov	r1, r9
 8012b9c:	4640      	mov	r0, r8
 8012b9e:	47d0      	blx	sl
 8012ba0:	3001      	adds	r0, #1
 8012ba2:	d0ab      	beq.n	8012afc <_printf_i+0x164>
 8012ba4:	6823      	ldr	r3, [r4, #0]
 8012ba6:	079b      	lsls	r3, r3, #30
 8012ba8:	d413      	bmi.n	8012bd2 <_printf_i+0x23a>
 8012baa:	68e0      	ldr	r0, [r4, #12]
 8012bac:	9b03      	ldr	r3, [sp, #12]
 8012bae:	4298      	cmp	r0, r3
 8012bb0:	bfb8      	it	lt
 8012bb2:	4618      	movlt	r0, r3
 8012bb4:	e7a4      	b.n	8012b00 <_printf_i+0x168>
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	4632      	mov	r2, r6
 8012bba:	4649      	mov	r1, r9
 8012bbc:	4640      	mov	r0, r8
 8012bbe:	47d0      	blx	sl
 8012bc0:	3001      	adds	r0, #1
 8012bc2:	d09b      	beq.n	8012afc <_printf_i+0x164>
 8012bc4:	3501      	adds	r5, #1
 8012bc6:	68e3      	ldr	r3, [r4, #12]
 8012bc8:	9903      	ldr	r1, [sp, #12]
 8012bca:	1a5b      	subs	r3, r3, r1
 8012bcc:	42ab      	cmp	r3, r5
 8012bce:	dcf2      	bgt.n	8012bb6 <_printf_i+0x21e>
 8012bd0:	e7eb      	b.n	8012baa <_printf_i+0x212>
 8012bd2:	2500      	movs	r5, #0
 8012bd4:	f104 0619 	add.w	r6, r4, #25
 8012bd8:	e7f5      	b.n	8012bc6 <_printf_i+0x22e>
 8012bda:	bf00      	nop
 8012bdc:	0801679e 	.word	0x0801679e
 8012be0:	080167af 	.word	0x080167af

08012be4 <quorem>:
 8012be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012be8:	6903      	ldr	r3, [r0, #16]
 8012bea:	690c      	ldr	r4, [r1, #16]
 8012bec:	42a3      	cmp	r3, r4
 8012bee:	4607      	mov	r7, r0
 8012bf0:	f2c0 8081 	blt.w	8012cf6 <quorem+0x112>
 8012bf4:	3c01      	subs	r4, #1
 8012bf6:	f101 0814 	add.w	r8, r1, #20
 8012bfa:	f100 0514 	add.w	r5, r0, #20
 8012bfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012c02:	9301      	str	r3, [sp, #4]
 8012c04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012c08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012c0c:	3301      	adds	r3, #1
 8012c0e:	429a      	cmp	r2, r3
 8012c10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012c14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012c18:	fbb2 f6f3 	udiv	r6, r2, r3
 8012c1c:	d331      	bcc.n	8012c82 <quorem+0x9e>
 8012c1e:	f04f 0e00 	mov.w	lr, #0
 8012c22:	4640      	mov	r0, r8
 8012c24:	46ac      	mov	ip, r5
 8012c26:	46f2      	mov	sl, lr
 8012c28:	f850 2b04 	ldr.w	r2, [r0], #4
 8012c2c:	b293      	uxth	r3, r2
 8012c2e:	fb06 e303 	mla	r3, r6, r3, lr
 8012c32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012c36:	b29b      	uxth	r3, r3
 8012c38:	ebaa 0303 	sub.w	r3, sl, r3
 8012c3c:	f8dc a000 	ldr.w	sl, [ip]
 8012c40:	0c12      	lsrs	r2, r2, #16
 8012c42:	fa13 f38a 	uxtah	r3, r3, sl
 8012c46:	fb06 e202 	mla	r2, r6, r2, lr
 8012c4a:	9300      	str	r3, [sp, #0]
 8012c4c:	9b00      	ldr	r3, [sp, #0]
 8012c4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012c52:	b292      	uxth	r2, r2
 8012c54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012c58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012c5c:	f8bd 3000 	ldrh.w	r3, [sp]
 8012c60:	4581      	cmp	r9, r0
 8012c62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012c66:	f84c 3b04 	str.w	r3, [ip], #4
 8012c6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012c6e:	d2db      	bcs.n	8012c28 <quorem+0x44>
 8012c70:	f855 300b 	ldr.w	r3, [r5, fp]
 8012c74:	b92b      	cbnz	r3, 8012c82 <quorem+0x9e>
 8012c76:	9b01      	ldr	r3, [sp, #4]
 8012c78:	3b04      	subs	r3, #4
 8012c7a:	429d      	cmp	r5, r3
 8012c7c:	461a      	mov	r2, r3
 8012c7e:	d32e      	bcc.n	8012cde <quorem+0xfa>
 8012c80:	613c      	str	r4, [r7, #16]
 8012c82:	4638      	mov	r0, r7
 8012c84:	f001 f846 	bl	8013d14 <__mcmp>
 8012c88:	2800      	cmp	r0, #0
 8012c8a:	db24      	blt.n	8012cd6 <quorem+0xf2>
 8012c8c:	3601      	adds	r6, #1
 8012c8e:	4628      	mov	r0, r5
 8012c90:	f04f 0c00 	mov.w	ip, #0
 8012c94:	f858 2b04 	ldr.w	r2, [r8], #4
 8012c98:	f8d0 e000 	ldr.w	lr, [r0]
 8012c9c:	b293      	uxth	r3, r2
 8012c9e:	ebac 0303 	sub.w	r3, ip, r3
 8012ca2:	0c12      	lsrs	r2, r2, #16
 8012ca4:	fa13 f38e 	uxtah	r3, r3, lr
 8012ca8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012cac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012cb0:	b29b      	uxth	r3, r3
 8012cb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012cb6:	45c1      	cmp	r9, r8
 8012cb8:	f840 3b04 	str.w	r3, [r0], #4
 8012cbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012cc0:	d2e8      	bcs.n	8012c94 <quorem+0xb0>
 8012cc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012cc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012cca:	b922      	cbnz	r2, 8012cd6 <quorem+0xf2>
 8012ccc:	3b04      	subs	r3, #4
 8012cce:	429d      	cmp	r5, r3
 8012cd0:	461a      	mov	r2, r3
 8012cd2:	d30a      	bcc.n	8012cea <quorem+0x106>
 8012cd4:	613c      	str	r4, [r7, #16]
 8012cd6:	4630      	mov	r0, r6
 8012cd8:	b003      	add	sp, #12
 8012cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cde:	6812      	ldr	r2, [r2, #0]
 8012ce0:	3b04      	subs	r3, #4
 8012ce2:	2a00      	cmp	r2, #0
 8012ce4:	d1cc      	bne.n	8012c80 <quorem+0x9c>
 8012ce6:	3c01      	subs	r4, #1
 8012ce8:	e7c7      	b.n	8012c7a <quorem+0x96>
 8012cea:	6812      	ldr	r2, [r2, #0]
 8012cec:	3b04      	subs	r3, #4
 8012cee:	2a00      	cmp	r2, #0
 8012cf0:	d1f0      	bne.n	8012cd4 <quorem+0xf0>
 8012cf2:	3c01      	subs	r4, #1
 8012cf4:	e7eb      	b.n	8012cce <quorem+0xea>
 8012cf6:	2000      	movs	r0, #0
 8012cf8:	e7ee      	b.n	8012cd8 <quorem+0xf4>
 8012cfa:	0000      	movs	r0, r0
 8012cfc:	0000      	movs	r0, r0
	...

08012d00 <_dtoa_r>:
 8012d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d04:	ed2d 8b02 	vpush	{d8}
 8012d08:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012d0a:	b091      	sub	sp, #68	; 0x44
 8012d0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012d10:	ec59 8b10 	vmov	r8, r9, d0
 8012d14:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8012d16:	9106      	str	r1, [sp, #24]
 8012d18:	4606      	mov	r6, r0
 8012d1a:	9208      	str	r2, [sp, #32]
 8012d1c:	930c      	str	r3, [sp, #48]	; 0x30
 8012d1e:	b975      	cbnz	r5, 8012d3e <_dtoa_r+0x3e>
 8012d20:	2010      	movs	r0, #16
 8012d22:	f000 fd5f 	bl	80137e4 <malloc>
 8012d26:	4602      	mov	r2, r0
 8012d28:	6270      	str	r0, [r6, #36]	; 0x24
 8012d2a:	b920      	cbnz	r0, 8012d36 <_dtoa_r+0x36>
 8012d2c:	4baa      	ldr	r3, [pc, #680]	; (8012fd8 <_dtoa_r+0x2d8>)
 8012d2e:	21ea      	movs	r1, #234	; 0xea
 8012d30:	48aa      	ldr	r0, [pc, #680]	; (8012fdc <_dtoa_r+0x2dc>)
 8012d32:	f001 f9f7 	bl	8014124 <__assert_func>
 8012d36:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012d3a:	6005      	str	r5, [r0, #0]
 8012d3c:	60c5      	str	r5, [r0, #12]
 8012d3e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012d40:	6819      	ldr	r1, [r3, #0]
 8012d42:	b151      	cbz	r1, 8012d5a <_dtoa_r+0x5a>
 8012d44:	685a      	ldr	r2, [r3, #4]
 8012d46:	604a      	str	r2, [r1, #4]
 8012d48:	2301      	movs	r3, #1
 8012d4a:	4093      	lsls	r3, r2
 8012d4c:	608b      	str	r3, [r1, #8]
 8012d4e:	4630      	mov	r0, r6
 8012d50:	f000 fd9e 	bl	8013890 <_Bfree>
 8012d54:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012d56:	2200      	movs	r2, #0
 8012d58:	601a      	str	r2, [r3, #0]
 8012d5a:	f1b9 0300 	subs.w	r3, r9, #0
 8012d5e:	bfbb      	ittet	lt
 8012d60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012d64:	9303      	strlt	r3, [sp, #12]
 8012d66:	2300      	movge	r3, #0
 8012d68:	2201      	movlt	r2, #1
 8012d6a:	bfac      	ite	ge
 8012d6c:	6023      	strge	r3, [r4, #0]
 8012d6e:	6022      	strlt	r2, [r4, #0]
 8012d70:	4b9b      	ldr	r3, [pc, #620]	; (8012fe0 <_dtoa_r+0x2e0>)
 8012d72:	9c03      	ldr	r4, [sp, #12]
 8012d74:	43a3      	bics	r3, r4
 8012d76:	d11c      	bne.n	8012db2 <_dtoa_r+0xb2>
 8012d78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012d7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8012d7e:	6013      	str	r3, [r2, #0]
 8012d80:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8012d84:	ea53 0308 	orrs.w	r3, r3, r8
 8012d88:	f000 84fd 	beq.w	8013786 <_dtoa_r+0xa86>
 8012d8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012d8e:	b963      	cbnz	r3, 8012daa <_dtoa_r+0xaa>
 8012d90:	4b94      	ldr	r3, [pc, #592]	; (8012fe4 <_dtoa_r+0x2e4>)
 8012d92:	e01f      	b.n	8012dd4 <_dtoa_r+0xd4>
 8012d94:	4b94      	ldr	r3, [pc, #592]	; (8012fe8 <_dtoa_r+0x2e8>)
 8012d96:	9301      	str	r3, [sp, #4]
 8012d98:	3308      	adds	r3, #8
 8012d9a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012d9c:	6013      	str	r3, [r2, #0]
 8012d9e:	9801      	ldr	r0, [sp, #4]
 8012da0:	b011      	add	sp, #68	; 0x44
 8012da2:	ecbd 8b02 	vpop	{d8}
 8012da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012daa:	4b8e      	ldr	r3, [pc, #568]	; (8012fe4 <_dtoa_r+0x2e4>)
 8012dac:	9301      	str	r3, [sp, #4]
 8012dae:	3303      	adds	r3, #3
 8012db0:	e7f3      	b.n	8012d9a <_dtoa_r+0x9a>
 8012db2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012db6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dbe:	d10b      	bne.n	8012dd8 <_dtoa_r+0xd8>
 8012dc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012dc2:	2301      	movs	r3, #1
 8012dc4:	6013      	str	r3, [r2, #0]
 8012dc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	f000 84d9 	beq.w	8013780 <_dtoa_r+0xa80>
 8012dce:	4887      	ldr	r0, [pc, #540]	; (8012fec <_dtoa_r+0x2ec>)
 8012dd0:	6018      	str	r0, [r3, #0]
 8012dd2:	1e43      	subs	r3, r0, #1
 8012dd4:	9301      	str	r3, [sp, #4]
 8012dd6:	e7e2      	b.n	8012d9e <_dtoa_r+0x9e>
 8012dd8:	a90f      	add	r1, sp, #60	; 0x3c
 8012dda:	aa0e      	add	r2, sp, #56	; 0x38
 8012ddc:	4630      	mov	r0, r6
 8012dde:	eeb0 0b48 	vmov.f64	d0, d8
 8012de2:	f001 f83d 	bl	8013e60 <__d2b>
 8012de6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8012dea:	4605      	mov	r5, r0
 8012dec:	980e      	ldr	r0, [sp, #56]	; 0x38
 8012dee:	2900      	cmp	r1, #0
 8012df0:	d046      	beq.n	8012e80 <_dtoa_r+0x180>
 8012df2:	ee18 4a90 	vmov	r4, s17
 8012df6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012dfa:	ec53 2b18 	vmov	r2, r3, d8
 8012dfe:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8012e02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012e06:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012e0a:	2400      	movs	r4, #0
 8012e0c:	ec43 2b16 	vmov	d6, r2, r3
 8012e10:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012e14:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8012fc0 <_dtoa_r+0x2c0>
 8012e18:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012e1c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8012fc8 <_dtoa_r+0x2c8>
 8012e20:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012e24:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8012fd0 <_dtoa_r+0x2d0>
 8012e28:	ee07 1a90 	vmov	s15, r1
 8012e2c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012e30:	eeb0 7b46 	vmov.f64	d7, d6
 8012e34:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012e38:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012e3c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e44:	ee16 ba90 	vmov	fp, s13
 8012e48:	940a      	str	r4, [sp, #40]	; 0x28
 8012e4a:	d508      	bpl.n	8012e5e <_dtoa_r+0x15e>
 8012e4c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012e50:	eeb4 6b47 	vcmp.f64	d6, d7
 8012e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e58:	bf18      	it	ne
 8012e5a:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8012e5e:	f1bb 0f16 	cmp.w	fp, #22
 8012e62:	d82f      	bhi.n	8012ec4 <_dtoa_r+0x1c4>
 8012e64:	4b62      	ldr	r3, [pc, #392]	; (8012ff0 <_dtoa_r+0x2f0>)
 8012e66:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012e6a:	ed93 7b00 	vldr	d7, [r3]
 8012e6e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e76:	d501      	bpl.n	8012e7c <_dtoa_r+0x17c>
 8012e78:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012e7c:	2300      	movs	r3, #0
 8012e7e:	e022      	b.n	8012ec6 <_dtoa_r+0x1c6>
 8012e80:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012e82:	4401      	add	r1, r0
 8012e84:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8012e88:	2b20      	cmp	r3, #32
 8012e8a:	bfc1      	itttt	gt
 8012e8c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012e90:	fa04 f303 	lslgt.w	r3, r4, r3
 8012e94:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8012e98:	fa28 f804 	lsrgt.w	r8, r8, r4
 8012e9c:	bfd6      	itet	le
 8012e9e:	f1c3 0320 	rsble	r3, r3, #32
 8012ea2:	ea43 0808 	orrgt.w	r8, r3, r8
 8012ea6:	fa08 f803 	lslle.w	r8, r8, r3
 8012eaa:	ee07 8a90 	vmov	s15, r8
 8012eae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012eb2:	3901      	subs	r1, #1
 8012eb4:	ee17 4a90 	vmov	r4, s15
 8012eb8:	ec53 2b17 	vmov	r2, r3, d7
 8012ebc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8012ec0:	2401      	movs	r4, #1
 8012ec2:	e7a3      	b.n	8012e0c <_dtoa_r+0x10c>
 8012ec4:	2301      	movs	r3, #1
 8012ec6:	930b      	str	r3, [sp, #44]	; 0x2c
 8012ec8:	1a43      	subs	r3, r0, r1
 8012eca:	1e5a      	subs	r2, r3, #1
 8012ecc:	bf45      	ittet	mi
 8012ece:	f1c3 0301 	rsbmi	r3, r3, #1
 8012ed2:	9304      	strmi	r3, [sp, #16]
 8012ed4:	2300      	movpl	r3, #0
 8012ed6:	2300      	movmi	r3, #0
 8012ed8:	9205      	str	r2, [sp, #20]
 8012eda:	bf54      	ite	pl
 8012edc:	9304      	strpl	r3, [sp, #16]
 8012ede:	9305      	strmi	r3, [sp, #20]
 8012ee0:	f1bb 0f00 	cmp.w	fp, #0
 8012ee4:	db18      	blt.n	8012f18 <_dtoa_r+0x218>
 8012ee6:	9b05      	ldr	r3, [sp, #20]
 8012ee8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8012eec:	445b      	add	r3, fp
 8012eee:	9305      	str	r3, [sp, #20]
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	9a06      	ldr	r2, [sp, #24]
 8012ef4:	2a09      	cmp	r2, #9
 8012ef6:	d849      	bhi.n	8012f8c <_dtoa_r+0x28c>
 8012ef8:	2a05      	cmp	r2, #5
 8012efa:	bfc4      	itt	gt
 8012efc:	3a04      	subgt	r2, #4
 8012efe:	9206      	strgt	r2, [sp, #24]
 8012f00:	9a06      	ldr	r2, [sp, #24]
 8012f02:	f1a2 0202 	sub.w	r2, r2, #2
 8012f06:	bfcc      	ite	gt
 8012f08:	2400      	movgt	r4, #0
 8012f0a:	2401      	movle	r4, #1
 8012f0c:	2a03      	cmp	r2, #3
 8012f0e:	d848      	bhi.n	8012fa2 <_dtoa_r+0x2a2>
 8012f10:	e8df f002 	tbb	[pc, r2]
 8012f14:	3a2c2e0b 	.word	0x3a2c2e0b
 8012f18:	9b04      	ldr	r3, [sp, #16]
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	eba3 030b 	sub.w	r3, r3, fp
 8012f20:	9304      	str	r3, [sp, #16]
 8012f22:	9209      	str	r2, [sp, #36]	; 0x24
 8012f24:	f1cb 0300 	rsb	r3, fp, #0
 8012f28:	e7e3      	b.n	8012ef2 <_dtoa_r+0x1f2>
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	9207      	str	r2, [sp, #28]
 8012f2e:	9a08      	ldr	r2, [sp, #32]
 8012f30:	2a00      	cmp	r2, #0
 8012f32:	dc39      	bgt.n	8012fa8 <_dtoa_r+0x2a8>
 8012f34:	f04f 0a01 	mov.w	sl, #1
 8012f38:	46d1      	mov	r9, sl
 8012f3a:	4652      	mov	r2, sl
 8012f3c:	f8cd a020 	str.w	sl, [sp, #32]
 8012f40:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8012f42:	2100      	movs	r1, #0
 8012f44:	6079      	str	r1, [r7, #4]
 8012f46:	2004      	movs	r0, #4
 8012f48:	f100 0c14 	add.w	ip, r0, #20
 8012f4c:	4594      	cmp	ip, r2
 8012f4e:	6879      	ldr	r1, [r7, #4]
 8012f50:	d92f      	bls.n	8012fb2 <_dtoa_r+0x2b2>
 8012f52:	4630      	mov	r0, r6
 8012f54:	930d      	str	r3, [sp, #52]	; 0x34
 8012f56:	f000 fc5b 	bl	8013810 <_Balloc>
 8012f5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f5c:	9001      	str	r0, [sp, #4]
 8012f5e:	4602      	mov	r2, r0
 8012f60:	2800      	cmp	r0, #0
 8012f62:	d149      	bne.n	8012ff8 <_dtoa_r+0x2f8>
 8012f64:	4b23      	ldr	r3, [pc, #140]	; (8012ff4 <_dtoa_r+0x2f4>)
 8012f66:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012f6a:	e6e1      	b.n	8012d30 <_dtoa_r+0x30>
 8012f6c:	2201      	movs	r2, #1
 8012f6e:	e7dd      	b.n	8012f2c <_dtoa_r+0x22c>
 8012f70:	2200      	movs	r2, #0
 8012f72:	9207      	str	r2, [sp, #28]
 8012f74:	9a08      	ldr	r2, [sp, #32]
 8012f76:	eb0b 0a02 	add.w	sl, fp, r2
 8012f7a:	f10a 0901 	add.w	r9, sl, #1
 8012f7e:	464a      	mov	r2, r9
 8012f80:	2a01      	cmp	r2, #1
 8012f82:	bfb8      	it	lt
 8012f84:	2201      	movlt	r2, #1
 8012f86:	e7db      	b.n	8012f40 <_dtoa_r+0x240>
 8012f88:	2201      	movs	r2, #1
 8012f8a:	e7f2      	b.n	8012f72 <_dtoa_r+0x272>
 8012f8c:	2401      	movs	r4, #1
 8012f8e:	2200      	movs	r2, #0
 8012f90:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8012f94:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8012f98:	2100      	movs	r1, #0
 8012f9a:	46d1      	mov	r9, sl
 8012f9c:	2212      	movs	r2, #18
 8012f9e:	9108      	str	r1, [sp, #32]
 8012fa0:	e7ce      	b.n	8012f40 <_dtoa_r+0x240>
 8012fa2:	2201      	movs	r2, #1
 8012fa4:	9207      	str	r2, [sp, #28]
 8012fa6:	e7f5      	b.n	8012f94 <_dtoa_r+0x294>
 8012fa8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012fac:	46d1      	mov	r9, sl
 8012fae:	4652      	mov	r2, sl
 8012fb0:	e7c6      	b.n	8012f40 <_dtoa_r+0x240>
 8012fb2:	3101      	adds	r1, #1
 8012fb4:	6079      	str	r1, [r7, #4]
 8012fb6:	0040      	lsls	r0, r0, #1
 8012fb8:	e7c6      	b.n	8012f48 <_dtoa_r+0x248>
 8012fba:	bf00      	nop
 8012fbc:	f3af 8000 	nop.w
 8012fc0:	636f4361 	.word	0x636f4361
 8012fc4:	3fd287a7 	.word	0x3fd287a7
 8012fc8:	8b60c8b3 	.word	0x8b60c8b3
 8012fcc:	3fc68a28 	.word	0x3fc68a28
 8012fd0:	509f79fb 	.word	0x509f79fb
 8012fd4:	3fd34413 	.word	0x3fd34413
 8012fd8:	080167cd 	.word	0x080167cd
 8012fdc:	080167e4 	.word	0x080167e4
 8012fe0:	7ff00000 	.word	0x7ff00000
 8012fe4:	080167c9 	.word	0x080167c9
 8012fe8:	080167c0 	.word	0x080167c0
 8012fec:	0801679d 	.word	0x0801679d
 8012ff0:	080168d8 	.word	0x080168d8
 8012ff4:	0801683f 	.word	0x0801683f
 8012ff8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8012ffa:	9901      	ldr	r1, [sp, #4]
 8012ffc:	6011      	str	r1, [r2, #0]
 8012ffe:	f1b9 0f0e 	cmp.w	r9, #14
 8013002:	d86c      	bhi.n	80130de <_dtoa_r+0x3de>
 8013004:	2c00      	cmp	r4, #0
 8013006:	d06a      	beq.n	80130de <_dtoa_r+0x3de>
 8013008:	f1bb 0f00 	cmp.w	fp, #0
 801300c:	f340 80a0 	ble.w	8013150 <_dtoa_r+0x450>
 8013010:	49c1      	ldr	r1, [pc, #772]	; (8013318 <_dtoa_r+0x618>)
 8013012:	f00b 020f 	and.w	r2, fp, #15
 8013016:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801301a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801301e:	ed92 7b00 	vldr	d7, [r2]
 8013022:	ea4f 112b 	mov.w	r1, fp, asr #4
 8013026:	f000 8087 	beq.w	8013138 <_dtoa_r+0x438>
 801302a:	4abc      	ldr	r2, [pc, #752]	; (801331c <_dtoa_r+0x61c>)
 801302c:	ed92 6b08 	vldr	d6, [r2, #32]
 8013030:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013034:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013038:	f001 010f 	and.w	r1, r1, #15
 801303c:	2203      	movs	r2, #3
 801303e:	48b7      	ldr	r0, [pc, #732]	; (801331c <_dtoa_r+0x61c>)
 8013040:	2900      	cmp	r1, #0
 8013042:	d17b      	bne.n	801313c <_dtoa_r+0x43c>
 8013044:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013048:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801304c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013050:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013052:	2900      	cmp	r1, #0
 8013054:	f000 80a2 	beq.w	801319c <_dtoa_r+0x49c>
 8013058:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801305c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013060:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013068:	f140 8098 	bpl.w	801319c <_dtoa_r+0x49c>
 801306c:	f1b9 0f00 	cmp.w	r9, #0
 8013070:	f000 8094 	beq.w	801319c <_dtoa_r+0x49c>
 8013074:	f1ba 0f00 	cmp.w	sl, #0
 8013078:	dd2f      	ble.n	80130da <_dtoa_r+0x3da>
 801307a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801307e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013082:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013086:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801308a:	3201      	adds	r2, #1
 801308c:	4650      	mov	r0, sl
 801308e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013092:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8013096:	ee07 2a90 	vmov	s15, r2
 801309a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801309e:	eea7 5b06 	vfma.f64	d5, d7, d6
 80130a2:	ee15 4a90 	vmov	r4, s11
 80130a6:	ec52 1b15 	vmov	r1, r2, d5
 80130aa:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80130ae:	2800      	cmp	r0, #0
 80130b0:	d177      	bne.n	80131a2 <_dtoa_r+0x4a2>
 80130b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80130b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80130ba:	ec42 1b17 	vmov	d7, r1, r2
 80130be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80130c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130c6:	f300 8263 	bgt.w	8013590 <_dtoa_r+0x890>
 80130ca:	eeb1 7b47 	vneg.f64	d7, d7
 80130ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80130d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130d6:	f100 8258 	bmi.w	801358a <_dtoa_r+0x88a>
 80130da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80130de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80130e0:	2a00      	cmp	r2, #0
 80130e2:	f2c0 811d 	blt.w	8013320 <_dtoa_r+0x620>
 80130e6:	f1bb 0f0e 	cmp.w	fp, #14
 80130ea:	f300 8119 	bgt.w	8013320 <_dtoa_r+0x620>
 80130ee:	4b8a      	ldr	r3, [pc, #552]	; (8013318 <_dtoa_r+0x618>)
 80130f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80130f4:	ed93 6b00 	vldr	d6, [r3]
 80130f8:	9b08      	ldr	r3, [sp, #32]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	f280 80b7 	bge.w	801326e <_dtoa_r+0x56e>
 8013100:	f1b9 0f00 	cmp.w	r9, #0
 8013104:	f300 80b3 	bgt.w	801326e <_dtoa_r+0x56e>
 8013108:	f040 823f 	bne.w	801358a <_dtoa_r+0x88a>
 801310c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013110:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013114:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013118:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801311c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013120:	464c      	mov	r4, r9
 8013122:	464f      	mov	r7, r9
 8013124:	f280 8215 	bge.w	8013552 <_dtoa_r+0x852>
 8013128:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801312c:	2331      	movs	r3, #49	; 0x31
 801312e:	f808 3b01 	strb.w	r3, [r8], #1
 8013132:	f10b 0b01 	add.w	fp, fp, #1
 8013136:	e211      	b.n	801355c <_dtoa_r+0x85c>
 8013138:	2202      	movs	r2, #2
 801313a:	e780      	b.n	801303e <_dtoa_r+0x33e>
 801313c:	07cc      	lsls	r4, r1, #31
 801313e:	d504      	bpl.n	801314a <_dtoa_r+0x44a>
 8013140:	ed90 6b00 	vldr	d6, [r0]
 8013144:	3201      	adds	r2, #1
 8013146:	ee27 7b06 	vmul.f64	d7, d7, d6
 801314a:	1049      	asrs	r1, r1, #1
 801314c:	3008      	adds	r0, #8
 801314e:	e777      	b.n	8013040 <_dtoa_r+0x340>
 8013150:	d022      	beq.n	8013198 <_dtoa_r+0x498>
 8013152:	f1cb 0100 	rsb	r1, fp, #0
 8013156:	4a70      	ldr	r2, [pc, #448]	; (8013318 <_dtoa_r+0x618>)
 8013158:	f001 000f 	and.w	r0, r1, #15
 801315c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013160:	ed92 7b00 	vldr	d7, [r2]
 8013164:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013168:	ed8d 7b02 	vstr	d7, [sp, #8]
 801316c:	486b      	ldr	r0, [pc, #428]	; (801331c <_dtoa_r+0x61c>)
 801316e:	1109      	asrs	r1, r1, #4
 8013170:	2400      	movs	r4, #0
 8013172:	2202      	movs	r2, #2
 8013174:	b929      	cbnz	r1, 8013182 <_dtoa_r+0x482>
 8013176:	2c00      	cmp	r4, #0
 8013178:	f43f af6a 	beq.w	8013050 <_dtoa_r+0x350>
 801317c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013180:	e766      	b.n	8013050 <_dtoa_r+0x350>
 8013182:	07cf      	lsls	r7, r1, #31
 8013184:	d505      	bpl.n	8013192 <_dtoa_r+0x492>
 8013186:	ed90 6b00 	vldr	d6, [r0]
 801318a:	3201      	adds	r2, #1
 801318c:	2401      	movs	r4, #1
 801318e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013192:	1049      	asrs	r1, r1, #1
 8013194:	3008      	adds	r0, #8
 8013196:	e7ed      	b.n	8013174 <_dtoa_r+0x474>
 8013198:	2202      	movs	r2, #2
 801319a:	e759      	b.n	8013050 <_dtoa_r+0x350>
 801319c:	465f      	mov	r7, fp
 801319e:	4648      	mov	r0, r9
 80131a0:	e775      	b.n	801308e <_dtoa_r+0x38e>
 80131a2:	ec42 1b17 	vmov	d7, r1, r2
 80131a6:	4a5c      	ldr	r2, [pc, #368]	; (8013318 <_dtoa_r+0x618>)
 80131a8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80131ac:	ed12 4b02 	vldr	d4, [r2, #-8]
 80131b0:	9a01      	ldr	r2, [sp, #4]
 80131b2:	1814      	adds	r4, r2, r0
 80131b4:	9a07      	ldr	r2, [sp, #28]
 80131b6:	b352      	cbz	r2, 801320e <_dtoa_r+0x50e>
 80131b8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80131bc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80131c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80131c4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80131c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80131cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80131d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80131d4:	ee14 2a90 	vmov	r2, s9
 80131d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80131dc:	3230      	adds	r2, #48	; 0x30
 80131de:	ee36 6b45 	vsub.f64	d6, d6, d5
 80131e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80131e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ea:	f808 2b01 	strb.w	r2, [r8], #1
 80131ee:	d439      	bmi.n	8013264 <_dtoa_r+0x564>
 80131f0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80131f4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80131f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131fc:	d472      	bmi.n	80132e4 <_dtoa_r+0x5e4>
 80131fe:	45a0      	cmp	r8, r4
 8013200:	f43f af6b 	beq.w	80130da <_dtoa_r+0x3da>
 8013204:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013208:	ee26 6b03 	vmul.f64	d6, d6, d3
 801320c:	e7e0      	b.n	80131d0 <_dtoa_r+0x4d0>
 801320e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013212:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013216:	4621      	mov	r1, r4
 8013218:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801321c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013220:	ee14 2a90 	vmov	r2, s9
 8013224:	3230      	adds	r2, #48	; 0x30
 8013226:	f808 2b01 	strb.w	r2, [r8], #1
 801322a:	45a0      	cmp	r8, r4
 801322c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013230:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013234:	d118      	bne.n	8013268 <_dtoa_r+0x568>
 8013236:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801323a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801323e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013246:	dc4d      	bgt.n	80132e4 <_dtoa_r+0x5e4>
 8013248:	ee35 7b47 	vsub.f64	d7, d5, d7
 801324c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013254:	f57f af41 	bpl.w	80130da <_dtoa_r+0x3da>
 8013258:	4688      	mov	r8, r1
 801325a:	3901      	subs	r1, #1
 801325c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8013260:	2b30      	cmp	r3, #48	; 0x30
 8013262:	d0f9      	beq.n	8013258 <_dtoa_r+0x558>
 8013264:	46bb      	mov	fp, r7
 8013266:	e02a      	b.n	80132be <_dtoa_r+0x5be>
 8013268:	ee26 6b03 	vmul.f64	d6, d6, d3
 801326c:	e7d6      	b.n	801321c <_dtoa_r+0x51c>
 801326e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013272:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013276:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801327a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801327e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013282:	ee15 3a10 	vmov	r3, s10
 8013286:	3330      	adds	r3, #48	; 0x30
 8013288:	f808 3b01 	strb.w	r3, [r8], #1
 801328c:	9b01      	ldr	r3, [sp, #4]
 801328e:	eba8 0303 	sub.w	r3, r8, r3
 8013292:	4599      	cmp	r9, r3
 8013294:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013298:	eea3 7b46 	vfms.f64	d7, d3, d6
 801329c:	d133      	bne.n	8013306 <_dtoa_r+0x606>
 801329e:	ee37 7b07 	vadd.f64	d7, d7, d7
 80132a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80132a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132aa:	dc1a      	bgt.n	80132e2 <_dtoa_r+0x5e2>
 80132ac:	eeb4 7b46 	vcmp.f64	d7, d6
 80132b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132b4:	d103      	bne.n	80132be <_dtoa_r+0x5be>
 80132b6:	ee15 3a10 	vmov	r3, s10
 80132ba:	07d9      	lsls	r1, r3, #31
 80132bc:	d411      	bmi.n	80132e2 <_dtoa_r+0x5e2>
 80132be:	4629      	mov	r1, r5
 80132c0:	4630      	mov	r0, r6
 80132c2:	f000 fae5 	bl	8013890 <_Bfree>
 80132c6:	2300      	movs	r3, #0
 80132c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80132ca:	f888 3000 	strb.w	r3, [r8]
 80132ce:	f10b 0301 	add.w	r3, fp, #1
 80132d2:	6013      	str	r3, [r2, #0]
 80132d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	f43f ad61 	beq.w	8012d9e <_dtoa_r+0x9e>
 80132dc:	f8c3 8000 	str.w	r8, [r3]
 80132e0:	e55d      	b.n	8012d9e <_dtoa_r+0x9e>
 80132e2:	465f      	mov	r7, fp
 80132e4:	4643      	mov	r3, r8
 80132e6:	4698      	mov	r8, r3
 80132e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80132ec:	2a39      	cmp	r2, #57	; 0x39
 80132ee:	d106      	bne.n	80132fe <_dtoa_r+0x5fe>
 80132f0:	9a01      	ldr	r2, [sp, #4]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d1f7      	bne.n	80132e6 <_dtoa_r+0x5e6>
 80132f6:	9901      	ldr	r1, [sp, #4]
 80132f8:	2230      	movs	r2, #48	; 0x30
 80132fa:	3701      	adds	r7, #1
 80132fc:	700a      	strb	r2, [r1, #0]
 80132fe:	781a      	ldrb	r2, [r3, #0]
 8013300:	3201      	adds	r2, #1
 8013302:	701a      	strb	r2, [r3, #0]
 8013304:	e7ae      	b.n	8013264 <_dtoa_r+0x564>
 8013306:	ee27 7b04 	vmul.f64	d7, d7, d4
 801330a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801330e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013312:	d1b2      	bne.n	801327a <_dtoa_r+0x57a>
 8013314:	e7d3      	b.n	80132be <_dtoa_r+0x5be>
 8013316:	bf00      	nop
 8013318:	080168d8 	.word	0x080168d8
 801331c:	080168b0 	.word	0x080168b0
 8013320:	9907      	ldr	r1, [sp, #28]
 8013322:	2900      	cmp	r1, #0
 8013324:	f000 80d0 	beq.w	80134c8 <_dtoa_r+0x7c8>
 8013328:	9906      	ldr	r1, [sp, #24]
 801332a:	2901      	cmp	r1, #1
 801332c:	f300 80b4 	bgt.w	8013498 <_dtoa_r+0x798>
 8013330:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013332:	2900      	cmp	r1, #0
 8013334:	f000 80ac 	beq.w	8013490 <_dtoa_r+0x790>
 8013338:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801333c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013340:	461c      	mov	r4, r3
 8013342:	930a      	str	r3, [sp, #40]	; 0x28
 8013344:	9b04      	ldr	r3, [sp, #16]
 8013346:	4413      	add	r3, r2
 8013348:	9304      	str	r3, [sp, #16]
 801334a:	9b05      	ldr	r3, [sp, #20]
 801334c:	2101      	movs	r1, #1
 801334e:	4413      	add	r3, r2
 8013350:	4630      	mov	r0, r6
 8013352:	9305      	str	r3, [sp, #20]
 8013354:	f000 fb54 	bl	8013a00 <__i2b>
 8013358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801335a:	4607      	mov	r7, r0
 801335c:	f1b8 0f00 	cmp.w	r8, #0
 8013360:	dd0d      	ble.n	801337e <_dtoa_r+0x67e>
 8013362:	9a05      	ldr	r2, [sp, #20]
 8013364:	2a00      	cmp	r2, #0
 8013366:	dd0a      	ble.n	801337e <_dtoa_r+0x67e>
 8013368:	4542      	cmp	r2, r8
 801336a:	9904      	ldr	r1, [sp, #16]
 801336c:	bfa8      	it	ge
 801336e:	4642      	movge	r2, r8
 8013370:	1a89      	subs	r1, r1, r2
 8013372:	9104      	str	r1, [sp, #16]
 8013374:	9905      	ldr	r1, [sp, #20]
 8013376:	eba8 0802 	sub.w	r8, r8, r2
 801337a:	1a8a      	subs	r2, r1, r2
 801337c:	9205      	str	r2, [sp, #20]
 801337e:	b303      	cbz	r3, 80133c2 <_dtoa_r+0x6c2>
 8013380:	9a07      	ldr	r2, [sp, #28]
 8013382:	2a00      	cmp	r2, #0
 8013384:	f000 80a5 	beq.w	80134d2 <_dtoa_r+0x7d2>
 8013388:	2c00      	cmp	r4, #0
 801338a:	dd13      	ble.n	80133b4 <_dtoa_r+0x6b4>
 801338c:	4639      	mov	r1, r7
 801338e:	4622      	mov	r2, r4
 8013390:	4630      	mov	r0, r6
 8013392:	930d      	str	r3, [sp, #52]	; 0x34
 8013394:	f000 fbf4 	bl	8013b80 <__pow5mult>
 8013398:	462a      	mov	r2, r5
 801339a:	4601      	mov	r1, r0
 801339c:	4607      	mov	r7, r0
 801339e:	4630      	mov	r0, r6
 80133a0:	f000 fb44 	bl	8013a2c <__multiply>
 80133a4:	4629      	mov	r1, r5
 80133a6:	900a      	str	r0, [sp, #40]	; 0x28
 80133a8:	4630      	mov	r0, r6
 80133aa:	f000 fa71 	bl	8013890 <_Bfree>
 80133ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80133b2:	4615      	mov	r5, r2
 80133b4:	1b1a      	subs	r2, r3, r4
 80133b6:	d004      	beq.n	80133c2 <_dtoa_r+0x6c2>
 80133b8:	4629      	mov	r1, r5
 80133ba:	4630      	mov	r0, r6
 80133bc:	f000 fbe0 	bl	8013b80 <__pow5mult>
 80133c0:	4605      	mov	r5, r0
 80133c2:	2101      	movs	r1, #1
 80133c4:	4630      	mov	r0, r6
 80133c6:	f000 fb1b 	bl	8013a00 <__i2b>
 80133ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	4604      	mov	r4, r0
 80133d0:	f340 8081 	ble.w	80134d6 <_dtoa_r+0x7d6>
 80133d4:	461a      	mov	r2, r3
 80133d6:	4601      	mov	r1, r0
 80133d8:	4630      	mov	r0, r6
 80133da:	f000 fbd1 	bl	8013b80 <__pow5mult>
 80133de:	9b06      	ldr	r3, [sp, #24]
 80133e0:	2b01      	cmp	r3, #1
 80133e2:	4604      	mov	r4, r0
 80133e4:	dd7a      	ble.n	80134dc <_dtoa_r+0x7dc>
 80133e6:	2300      	movs	r3, #0
 80133e8:	930a      	str	r3, [sp, #40]	; 0x28
 80133ea:	6922      	ldr	r2, [r4, #16]
 80133ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80133f0:	6910      	ldr	r0, [r2, #16]
 80133f2:	f000 fab5 	bl	8013960 <__hi0bits>
 80133f6:	f1c0 0020 	rsb	r0, r0, #32
 80133fa:	9b05      	ldr	r3, [sp, #20]
 80133fc:	4418      	add	r0, r3
 80133fe:	f010 001f 	ands.w	r0, r0, #31
 8013402:	f000 808c 	beq.w	801351e <_dtoa_r+0x81e>
 8013406:	f1c0 0220 	rsb	r2, r0, #32
 801340a:	2a04      	cmp	r2, #4
 801340c:	f340 8085 	ble.w	801351a <_dtoa_r+0x81a>
 8013410:	f1c0 001c 	rsb	r0, r0, #28
 8013414:	9b04      	ldr	r3, [sp, #16]
 8013416:	4403      	add	r3, r0
 8013418:	9304      	str	r3, [sp, #16]
 801341a:	9b05      	ldr	r3, [sp, #20]
 801341c:	4403      	add	r3, r0
 801341e:	4480      	add	r8, r0
 8013420:	9305      	str	r3, [sp, #20]
 8013422:	9b04      	ldr	r3, [sp, #16]
 8013424:	2b00      	cmp	r3, #0
 8013426:	dd05      	ble.n	8013434 <_dtoa_r+0x734>
 8013428:	4629      	mov	r1, r5
 801342a:	461a      	mov	r2, r3
 801342c:	4630      	mov	r0, r6
 801342e:	f000 fc01 	bl	8013c34 <__lshift>
 8013432:	4605      	mov	r5, r0
 8013434:	9b05      	ldr	r3, [sp, #20]
 8013436:	2b00      	cmp	r3, #0
 8013438:	dd05      	ble.n	8013446 <_dtoa_r+0x746>
 801343a:	4621      	mov	r1, r4
 801343c:	461a      	mov	r2, r3
 801343e:	4630      	mov	r0, r6
 8013440:	f000 fbf8 	bl	8013c34 <__lshift>
 8013444:	4604      	mov	r4, r0
 8013446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013448:	2b00      	cmp	r3, #0
 801344a:	d06a      	beq.n	8013522 <_dtoa_r+0x822>
 801344c:	4621      	mov	r1, r4
 801344e:	4628      	mov	r0, r5
 8013450:	f000 fc60 	bl	8013d14 <__mcmp>
 8013454:	2800      	cmp	r0, #0
 8013456:	da64      	bge.n	8013522 <_dtoa_r+0x822>
 8013458:	2300      	movs	r3, #0
 801345a:	4629      	mov	r1, r5
 801345c:	220a      	movs	r2, #10
 801345e:	4630      	mov	r0, r6
 8013460:	f000 fa38 	bl	80138d4 <__multadd>
 8013464:	9b07      	ldr	r3, [sp, #28]
 8013466:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801346a:	4605      	mov	r5, r0
 801346c:	2b00      	cmp	r3, #0
 801346e:	f000 8191 	beq.w	8013794 <_dtoa_r+0xa94>
 8013472:	4639      	mov	r1, r7
 8013474:	2300      	movs	r3, #0
 8013476:	220a      	movs	r2, #10
 8013478:	4630      	mov	r0, r6
 801347a:	f000 fa2b 	bl	80138d4 <__multadd>
 801347e:	f1ba 0f00 	cmp.w	sl, #0
 8013482:	4607      	mov	r7, r0
 8013484:	f300 808d 	bgt.w	80135a2 <_dtoa_r+0x8a2>
 8013488:	9b06      	ldr	r3, [sp, #24]
 801348a:	2b02      	cmp	r3, #2
 801348c:	dc50      	bgt.n	8013530 <_dtoa_r+0x830>
 801348e:	e088      	b.n	80135a2 <_dtoa_r+0x8a2>
 8013490:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013492:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013496:	e751      	b.n	801333c <_dtoa_r+0x63c>
 8013498:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 801349c:	42a3      	cmp	r3, r4
 801349e:	bfbf      	itttt	lt
 80134a0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80134a2:	1ae3      	sublt	r3, r4, r3
 80134a4:	18d2      	addlt	r2, r2, r3
 80134a6:	9209      	strlt	r2, [sp, #36]	; 0x24
 80134a8:	bfb6      	itet	lt
 80134aa:	4623      	movlt	r3, r4
 80134ac:	1b1c      	subge	r4, r3, r4
 80134ae:	2400      	movlt	r4, #0
 80134b0:	f1b9 0f00 	cmp.w	r9, #0
 80134b4:	bfb5      	itete	lt
 80134b6:	9a04      	ldrlt	r2, [sp, #16]
 80134b8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80134bc:	eba2 0809 	sublt.w	r8, r2, r9
 80134c0:	464a      	movge	r2, r9
 80134c2:	bfb8      	it	lt
 80134c4:	2200      	movlt	r2, #0
 80134c6:	e73c      	b.n	8013342 <_dtoa_r+0x642>
 80134c8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80134cc:	9f07      	ldr	r7, [sp, #28]
 80134ce:	461c      	mov	r4, r3
 80134d0:	e744      	b.n	801335c <_dtoa_r+0x65c>
 80134d2:	461a      	mov	r2, r3
 80134d4:	e770      	b.n	80133b8 <_dtoa_r+0x6b8>
 80134d6:	9b06      	ldr	r3, [sp, #24]
 80134d8:	2b01      	cmp	r3, #1
 80134da:	dc18      	bgt.n	801350e <_dtoa_r+0x80e>
 80134dc:	9b02      	ldr	r3, [sp, #8]
 80134de:	b9b3      	cbnz	r3, 801350e <_dtoa_r+0x80e>
 80134e0:	9b03      	ldr	r3, [sp, #12]
 80134e2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80134e6:	b9a2      	cbnz	r2, 8013512 <_dtoa_r+0x812>
 80134e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80134ec:	0d12      	lsrs	r2, r2, #20
 80134ee:	0512      	lsls	r2, r2, #20
 80134f0:	b18a      	cbz	r2, 8013516 <_dtoa_r+0x816>
 80134f2:	9b04      	ldr	r3, [sp, #16]
 80134f4:	3301      	adds	r3, #1
 80134f6:	9304      	str	r3, [sp, #16]
 80134f8:	9b05      	ldr	r3, [sp, #20]
 80134fa:	3301      	adds	r3, #1
 80134fc:	9305      	str	r3, [sp, #20]
 80134fe:	2301      	movs	r3, #1
 8013500:	930a      	str	r3, [sp, #40]	; 0x28
 8013502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013504:	2b00      	cmp	r3, #0
 8013506:	f47f af70 	bne.w	80133ea <_dtoa_r+0x6ea>
 801350a:	2001      	movs	r0, #1
 801350c:	e775      	b.n	80133fa <_dtoa_r+0x6fa>
 801350e:	2300      	movs	r3, #0
 8013510:	e7f6      	b.n	8013500 <_dtoa_r+0x800>
 8013512:	9b02      	ldr	r3, [sp, #8]
 8013514:	e7f4      	b.n	8013500 <_dtoa_r+0x800>
 8013516:	920a      	str	r2, [sp, #40]	; 0x28
 8013518:	e7f3      	b.n	8013502 <_dtoa_r+0x802>
 801351a:	d082      	beq.n	8013422 <_dtoa_r+0x722>
 801351c:	4610      	mov	r0, r2
 801351e:	301c      	adds	r0, #28
 8013520:	e778      	b.n	8013414 <_dtoa_r+0x714>
 8013522:	f1b9 0f00 	cmp.w	r9, #0
 8013526:	dc37      	bgt.n	8013598 <_dtoa_r+0x898>
 8013528:	9b06      	ldr	r3, [sp, #24]
 801352a:	2b02      	cmp	r3, #2
 801352c:	dd34      	ble.n	8013598 <_dtoa_r+0x898>
 801352e:	46ca      	mov	sl, r9
 8013530:	f1ba 0f00 	cmp.w	sl, #0
 8013534:	d10d      	bne.n	8013552 <_dtoa_r+0x852>
 8013536:	4621      	mov	r1, r4
 8013538:	4653      	mov	r3, sl
 801353a:	2205      	movs	r2, #5
 801353c:	4630      	mov	r0, r6
 801353e:	f000 f9c9 	bl	80138d4 <__multadd>
 8013542:	4601      	mov	r1, r0
 8013544:	4604      	mov	r4, r0
 8013546:	4628      	mov	r0, r5
 8013548:	f000 fbe4 	bl	8013d14 <__mcmp>
 801354c:	2800      	cmp	r0, #0
 801354e:	f73f adeb 	bgt.w	8013128 <_dtoa_r+0x428>
 8013552:	9b08      	ldr	r3, [sp, #32]
 8013554:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013558:	ea6f 0b03 	mvn.w	fp, r3
 801355c:	f04f 0900 	mov.w	r9, #0
 8013560:	4621      	mov	r1, r4
 8013562:	4630      	mov	r0, r6
 8013564:	f000 f994 	bl	8013890 <_Bfree>
 8013568:	2f00      	cmp	r7, #0
 801356a:	f43f aea8 	beq.w	80132be <_dtoa_r+0x5be>
 801356e:	f1b9 0f00 	cmp.w	r9, #0
 8013572:	d005      	beq.n	8013580 <_dtoa_r+0x880>
 8013574:	45b9      	cmp	r9, r7
 8013576:	d003      	beq.n	8013580 <_dtoa_r+0x880>
 8013578:	4649      	mov	r1, r9
 801357a:	4630      	mov	r0, r6
 801357c:	f000 f988 	bl	8013890 <_Bfree>
 8013580:	4639      	mov	r1, r7
 8013582:	4630      	mov	r0, r6
 8013584:	f000 f984 	bl	8013890 <_Bfree>
 8013588:	e699      	b.n	80132be <_dtoa_r+0x5be>
 801358a:	2400      	movs	r4, #0
 801358c:	4627      	mov	r7, r4
 801358e:	e7e0      	b.n	8013552 <_dtoa_r+0x852>
 8013590:	46bb      	mov	fp, r7
 8013592:	4604      	mov	r4, r0
 8013594:	4607      	mov	r7, r0
 8013596:	e5c7      	b.n	8013128 <_dtoa_r+0x428>
 8013598:	9b07      	ldr	r3, [sp, #28]
 801359a:	46ca      	mov	sl, r9
 801359c:	2b00      	cmp	r3, #0
 801359e:	f000 8100 	beq.w	80137a2 <_dtoa_r+0xaa2>
 80135a2:	f1b8 0f00 	cmp.w	r8, #0
 80135a6:	dd05      	ble.n	80135b4 <_dtoa_r+0x8b4>
 80135a8:	4639      	mov	r1, r7
 80135aa:	4642      	mov	r2, r8
 80135ac:	4630      	mov	r0, r6
 80135ae:	f000 fb41 	bl	8013c34 <__lshift>
 80135b2:	4607      	mov	r7, r0
 80135b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d05d      	beq.n	8013676 <_dtoa_r+0x976>
 80135ba:	6879      	ldr	r1, [r7, #4]
 80135bc:	4630      	mov	r0, r6
 80135be:	f000 f927 	bl	8013810 <_Balloc>
 80135c2:	4680      	mov	r8, r0
 80135c4:	b928      	cbnz	r0, 80135d2 <_dtoa_r+0x8d2>
 80135c6:	4b82      	ldr	r3, [pc, #520]	; (80137d0 <_dtoa_r+0xad0>)
 80135c8:	4602      	mov	r2, r0
 80135ca:	f240 21ea 	movw	r1, #746	; 0x2ea
 80135ce:	f7ff bbaf 	b.w	8012d30 <_dtoa_r+0x30>
 80135d2:	693a      	ldr	r2, [r7, #16]
 80135d4:	3202      	adds	r2, #2
 80135d6:	0092      	lsls	r2, r2, #2
 80135d8:	f107 010c 	add.w	r1, r7, #12
 80135dc:	300c      	adds	r0, #12
 80135de:	f000 f909 	bl	80137f4 <memcpy>
 80135e2:	2201      	movs	r2, #1
 80135e4:	4641      	mov	r1, r8
 80135e6:	4630      	mov	r0, r6
 80135e8:	f000 fb24 	bl	8013c34 <__lshift>
 80135ec:	9b01      	ldr	r3, [sp, #4]
 80135ee:	3301      	adds	r3, #1
 80135f0:	9304      	str	r3, [sp, #16]
 80135f2:	9b01      	ldr	r3, [sp, #4]
 80135f4:	4453      	add	r3, sl
 80135f6:	9308      	str	r3, [sp, #32]
 80135f8:	9b02      	ldr	r3, [sp, #8]
 80135fa:	f003 0301 	and.w	r3, r3, #1
 80135fe:	46b9      	mov	r9, r7
 8013600:	9307      	str	r3, [sp, #28]
 8013602:	4607      	mov	r7, r0
 8013604:	9b04      	ldr	r3, [sp, #16]
 8013606:	4621      	mov	r1, r4
 8013608:	3b01      	subs	r3, #1
 801360a:	4628      	mov	r0, r5
 801360c:	9302      	str	r3, [sp, #8]
 801360e:	f7ff fae9 	bl	8012be4 <quorem>
 8013612:	4603      	mov	r3, r0
 8013614:	3330      	adds	r3, #48	; 0x30
 8013616:	9005      	str	r0, [sp, #20]
 8013618:	4649      	mov	r1, r9
 801361a:	4628      	mov	r0, r5
 801361c:	9309      	str	r3, [sp, #36]	; 0x24
 801361e:	f000 fb79 	bl	8013d14 <__mcmp>
 8013622:	463a      	mov	r2, r7
 8013624:	4682      	mov	sl, r0
 8013626:	4621      	mov	r1, r4
 8013628:	4630      	mov	r0, r6
 801362a:	f000 fb8f 	bl	8013d4c <__mdiff>
 801362e:	68c2      	ldr	r2, [r0, #12]
 8013630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013632:	4680      	mov	r8, r0
 8013634:	bb0a      	cbnz	r2, 801367a <_dtoa_r+0x97a>
 8013636:	4601      	mov	r1, r0
 8013638:	4628      	mov	r0, r5
 801363a:	f000 fb6b 	bl	8013d14 <__mcmp>
 801363e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013640:	4602      	mov	r2, r0
 8013642:	4641      	mov	r1, r8
 8013644:	4630      	mov	r0, r6
 8013646:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801364a:	f000 f921 	bl	8013890 <_Bfree>
 801364e:	9b06      	ldr	r3, [sp, #24]
 8013650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013652:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013656:	ea43 0102 	orr.w	r1, r3, r2
 801365a:	9b07      	ldr	r3, [sp, #28]
 801365c:	430b      	orrs	r3, r1
 801365e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013660:	d10d      	bne.n	801367e <_dtoa_r+0x97e>
 8013662:	2b39      	cmp	r3, #57	; 0x39
 8013664:	d029      	beq.n	80136ba <_dtoa_r+0x9ba>
 8013666:	f1ba 0f00 	cmp.w	sl, #0
 801366a:	dd01      	ble.n	8013670 <_dtoa_r+0x970>
 801366c:	9b05      	ldr	r3, [sp, #20]
 801366e:	3331      	adds	r3, #49	; 0x31
 8013670:	9a02      	ldr	r2, [sp, #8]
 8013672:	7013      	strb	r3, [r2, #0]
 8013674:	e774      	b.n	8013560 <_dtoa_r+0x860>
 8013676:	4638      	mov	r0, r7
 8013678:	e7b8      	b.n	80135ec <_dtoa_r+0x8ec>
 801367a:	2201      	movs	r2, #1
 801367c:	e7e1      	b.n	8013642 <_dtoa_r+0x942>
 801367e:	f1ba 0f00 	cmp.w	sl, #0
 8013682:	db06      	blt.n	8013692 <_dtoa_r+0x992>
 8013684:	9906      	ldr	r1, [sp, #24]
 8013686:	ea41 0a0a 	orr.w	sl, r1, sl
 801368a:	9907      	ldr	r1, [sp, #28]
 801368c:	ea5a 0101 	orrs.w	r1, sl, r1
 8013690:	d120      	bne.n	80136d4 <_dtoa_r+0x9d4>
 8013692:	2a00      	cmp	r2, #0
 8013694:	ddec      	ble.n	8013670 <_dtoa_r+0x970>
 8013696:	4629      	mov	r1, r5
 8013698:	2201      	movs	r2, #1
 801369a:	4630      	mov	r0, r6
 801369c:	9304      	str	r3, [sp, #16]
 801369e:	f000 fac9 	bl	8013c34 <__lshift>
 80136a2:	4621      	mov	r1, r4
 80136a4:	4605      	mov	r5, r0
 80136a6:	f000 fb35 	bl	8013d14 <__mcmp>
 80136aa:	2800      	cmp	r0, #0
 80136ac:	9b04      	ldr	r3, [sp, #16]
 80136ae:	dc02      	bgt.n	80136b6 <_dtoa_r+0x9b6>
 80136b0:	d1de      	bne.n	8013670 <_dtoa_r+0x970>
 80136b2:	07da      	lsls	r2, r3, #31
 80136b4:	d5dc      	bpl.n	8013670 <_dtoa_r+0x970>
 80136b6:	2b39      	cmp	r3, #57	; 0x39
 80136b8:	d1d8      	bne.n	801366c <_dtoa_r+0x96c>
 80136ba:	9a02      	ldr	r2, [sp, #8]
 80136bc:	2339      	movs	r3, #57	; 0x39
 80136be:	7013      	strb	r3, [r2, #0]
 80136c0:	4643      	mov	r3, r8
 80136c2:	4698      	mov	r8, r3
 80136c4:	3b01      	subs	r3, #1
 80136c6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80136ca:	2a39      	cmp	r2, #57	; 0x39
 80136cc:	d051      	beq.n	8013772 <_dtoa_r+0xa72>
 80136ce:	3201      	adds	r2, #1
 80136d0:	701a      	strb	r2, [r3, #0]
 80136d2:	e745      	b.n	8013560 <_dtoa_r+0x860>
 80136d4:	2a00      	cmp	r2, #0
 80136d6:	dd03      	ble.n	80136e0 <_dtoa_r+0x9e0>
 80136d8:	2b39      	cmp	r3, #57	; 0x39
 80136da:	d0ee      	beq.n	80136ba <_dtoa_r+0x9ba>
 80136dc:	3301      	adds	r3, #1
 80136de:	e7c7      	b.n	8013670 <_dtoa_r+0x970>
 80136e0:	9a04      	ldr	r2, [sp, #16]
 80136e2:	9908      	ldr	r1, [sp, #32]
 80136e4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80136e8:	428a      	cmp	r2, r1
 80136ea:	d02b      	beq.n	8013744 <_dtoa_r+0xa44>
 80136ec:	4629      	mov	r1, r5
 80136ee:	2300      	movs	r3, #0
 80136f0:	220a      	movs	r2, #10
 80136f2:	4630      	mov	r0, r6
 80136f4:	f000 f8ee 	bl	80138d4 <__multadd>
 80136f8:	45b9      	cmp	r9, r7
 80136fa:	4605      	mov	r5, r0
 80136fc:	f04f 0300 	mov.w	r3, #0
 8013700:	f04f 020a 	mov.w	r2, #10
 8013704:	4649      	mov	r1, r9
 8013706:	4630      	mov	r0, r6
 8013708:	d107      	bne.n	801371a <_dtoa_r+0xa1a>
 801370a:	f000 f8e3 	bl	80138d4 <__multadd>
 801370e:	4681      	mov	r9, r0
 8013710:	4607      	mov	r7, r0
 8013712:	9b04      	ldr	r3, [sp, #16]
 8013714:	3301      	adds	r3, #1
 8013716:	9304      	str	r3, [sp, #16]
 8013718:	e774      	b.n	8013604 <_dtoa_r+0x904>
 801371a:	f000 f8db 	bl	80138d4 <__multadd>
 801371e:	4639      	mov	r1, r7
 8013720:	4681      	mov	r9, r0
 8013722:	2300      	movs	r3, #0
 8013724:	220a      	movs	r2, #10
 8013726:	4630      	mov	r0, r6
 8013728:	f000 f8d4 	bl	80138d4 <__multadd>
 801372c:	4607      	mov	r7, r0
 801372e:	e7f0      	b.n	8013712 <_dtoa_r+0xa12>
 8013730:	f1ba 0f00 	cmp.w	sl, #0
 8013734:	9a01      	ldr	r2, [sp, #4]
 8013736:	bfcc      	ite	gt
 8013738:	46d0      	movgt	r8, sl
 801373a:	f04f 0801 	movle.w	r8, #1
 801373e:	4490      	add	r8, r2
 8013740:	f04f 0900 	mov.w	r9, #0
 8013744:	4629      	mov	r1, r5
 8013746:	2201      	movs	r2, #1
 8013748:	4630      	mov	r0, r6
 801374a:	9302      	str	r3, [sp, #8]
 801374c:	f000 fa72 	bl	8013c34 <__lshift>
 8013750:	4621      	mov	r1, r4
 8013752:	4605      	mov	r5, r0
 8013754:	f000 fade 	bl	8013d14 <__mcmp>
 8013758:	2800      	cmp	r0, #0
 801375a:	dcb1      	bgt.n	80136c0 <_dtoa_r+0x9c0>
 801375c:	d102      	bne.n	8013764 <_dtoa_r+0xa64>
 801375e:	9b02      	ldr	r3, [sp, #8]
 8013760:	07db      	lsls	r3, r3, #31
 8013762:	d4ad      	bmi.n	80136c0 <_dtoa_r+0x9c0>
 8013764:	4643      	mov	r3, r8
 8013766:	4698      	mov	r8, r3
 8013768:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801376c:	2a30      	cmp	r2, #48	; 0x30
 801376e:	d0fa      	beq.n	8013766 <_dtoa_r+0xa66>
 8013770:	e6f6      	b.n	8013560 <_dtoa_r+0x860>
 8013772:	9a01      	ldr	r2, [sp, #4]
 8013774:	429a      	cmp	r2, r3
 8013776:	d1a4      	bne.n	80136c2 <_dtoa_r+0x9c2>
 8013778:	f10b 0b01 	add.w	fp, fp, #1
 801377c:	2331      	movs	r3, #49	; 0x31
 801377e:	e778      	b.n	8013672 <_dtoa_r+0x972>
 8013780:	4b14      	ldr	r3, [pc, #80]	; (80137d4 <_dtoa_r+0xad4>)
 8013782:	f7ff bb27 	b.w	8012dd4 <_dtoa_r+0xd4>
 8013786:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013788:	2b00      	cmp	r3, #0
 801378a:	f47f ab03 	bne.w	8012d94 <_dtoa_r+0x94>
 801378e:	4b12      	ldr	r3, [pc, #72]	; (80137d8 <_dtoa_r+0xad8>)
 8013790:	f7ff bb20 	b.w	8012dd4 <_dtoa_r+0xd4>
 8013794:	f1ba 0f00 	cmp.w	sl, #0
 8013798:	dc03      	bgt.n	80137a2 <_dtoa_r+0xaa2>
 801379a:	9b06      	ldr	r3, [sp, #24]
 801379c:	2b02      	cmp	r3, #2
 801379e:	f73f aec7 	bgt.w	8013530 <_dtoa_r+0x830>
 80137a2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80137a6:	4621      	mov	r1, r4
 80137a8:	4628      	mov	r0, r5
 80137aa:	f7ff fa1b 	bl	8012be4 <quorem>
 80137ae:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80137b2:	f808 3b01 	strb.w	r3, [r8], #1
 80137b6:	9a01      	ldr	r2, [sp, #4]
 80137b8:	eba8 0202 	sub.w	r2, r8, r2
 80137bc:	4592      	cmp	sl, r2
 80137be:	ddb7      	ble.n	8013730 <_dtoa_r+0xa30>
 80137c0:	4629      	mov	r1, r5
 80137c2:	2300      	movs	r3, #0
 80137c4:	220a      	movs	r2, #10
 80137c6:	4630      	mov	r0, r6
 80137c8:	f000 f884 	bl	80138d4 <__multadd>
 80137cc:	4605      	mov	r5, r0
 80137ce:	e7ea      	b.n	80137a6 <_dtoa_r+0xaa6>
 80137d0:	0801683f 	.word	0x0801683f
 80137d4:	0801679c 	.word	0x0801679c
 80137d8:	080167c0 	.word	0x080167c0

080137dc <_localeconv_r>:
 80137dc:	4800      	ldr	r0, [pc, #0]	; (80137e0 <_localeconv_r+0x4>)
 80137de:	4770      	bx	lr
 80137e0:	2400039c 	.word	0x2400039c

080137e4 <malloc>:
 80137e4:	4b02      	ldr	r3, [pc, #8]	; (80137f0 <malloc+0xc>)
 80137e6:	4601      	mov	r1, r0
 80137e8:	6818      	ldr	r0, [r3, #0]
 80137ea:	f000 bc17 	b.w	801401c <_malloc_r>
 80137ee:	bf00      	nop
 80137f0:	24000248 	.word	0x24000248

080137f4 <memcpy>:
 80137f4:	440a      	add	r2, r1
 80137f6:	4291      	cmp	r1, r2
 80137f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80137fc:	d100      	bne.n	8013800 <memcpy+0xc>
 80137fe:	4770      	bx	lr
 8013800:	b510      	push	{r4, lr}
 8013802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013806:	f803 4f01 	strb.w	r4, [r3, #1]!
 801380a:	4291      	cmp	r1, r2
 801380c:	d1f9      	bne.n	8013802 <memcpy+0xe>
 801380e:	bd10      	pop	{r4, pc}

08013810 <_Balloc>:
 8013810:	b570      	push	{r4, r5, r6, lr}
 8013812:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013814:	4604      	mov	r4, r0
 8013816:	460d      	mov	r5, r1
 8013818:	b976      	cbnz	r6, 8013838 <_Balloc+0x28>
 801381a:	2010      	movs	r0, #16
 801381c:	f7ff ffe2 	bl	80137e4 <malloc>
 8013820:	4602      	mov	r2, r0
 8013822:	6260      	str	r0, [r4, #36]	; 0x24
 8013824:	b920      	cbnz	r0, 8013830 <_Balloc+0x20>
 8013826:	4b18      	ldr	r3, [pc, #96]	; (8013888 <_Balloc+0x78>)
 8013828:	4818      	ldr	r0, [pc, #96]	; (801388c <_Balloc+0x7c>)
 801382a:	2166      	movs	r1, #102	; 0x66
 801382c:	f000 fc7a 	bl	8014124 <__assert_func>
 8013830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013834:	6006      	str	r6, [r0, #0]
 8013836:	60c6      	str	r6, [r0, #12]
 8013838:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801383a:	68f3      	ldr	r3, [r6, #12]
 801383c:	b183      	cbz	r3, 8013860 <_Balloc+0x50>
 801383e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013840:	68db      	ldr	r3, [r3, #12]
 8013842:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013846:	b9b8      	cbnz	r0, 8013878 <_Balloc+0x68>
 8013848:	2101      	movs	r1, #1
 801384a:	fa01 f605 	lsl.w	r6, r1, r5
 801384e:	1d72      	adds	r2, r6, #5
 8013850:	0092      	lsls	r2, r2, #2
 8013852:	4620      	mov	r0, r4
 8013854:	f000 fb60 	bl	8013f18 <_calloc_r>
 8013858:	b160      	cbz	r0, 8013874 <_Balloc+0x64>
 801385a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801385e:	e00e      	b.n	801387e <_Balloc+0x6e>
 8013860:	2221      	movs	r2, #33	; 0x21
 8013862:	2104      	movs	r1, #4
 8013864:	4620      	mov	r0, r4
 8013866:	f000 fb57 	bl	8013f18 <_calloc_r>
 801386a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801386c:	60f0      	str	r0, [r6, #12]
 801386e:	68db      	ldr	r3, [r3, #12]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d1e4      	bne.n	801383e <_Balloc+0x2e>
 8013874:	2000      	movs	r0, #0
 8013876:	bd70      	pop	{r4, r5, r6, pc}
 8013878:	6802      	ldr	r2, [r0, #0]
 801387a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801387e:	2300      	movs	r3, #0
 8013880:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013884:	e7f7      	b.n	8013876 <_Balloc+0x66>
 8013886:	bf00      	nop
 8013888:	080167cd 	.word	0x080167cd
 801388c:	08016850 	.word	0x08016850

08013890 <_Bfree>:
 8013890:	b570      	push	{r4, r5, r6, lr}
 8013892:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013894:	4605      	mov	r5, r0
 8013896:	460c      	mov	r4, r1
 8013898:	b976      	cbnz	r6, 80138b8 <_Bfree+0x28>
 801389a:	2010      	movs	r0, #16
 801389c:	f7ff ffa2 	bl	80137e4 <malloc>
 80138a0:	4602      	mov	r2, r0
 80138a2:	6268      	str	r0, [r5, #36]	; 0x24
 80138a4:	b920      	cbnz	r0, 80138b0 <_Bfree+0x20>
 80138a6:	4b09      	ldr	r3, [pc, #36]	; (80138cc <_Bfree+0x3c>)
 80138a8:	4809      	ldr	r0, [pc, #36]	; (80138d0 <_Bfree+0x40>)
 80138aa:	218a      	movs	r1, #138	; 0x8a
 80138ac:	f000 fc3a 	bl	8014124 <__assert_func>
 80138b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80138b4:	6006      	str	r6, [r0, #0]
 80138b6:	60c6      	str	r6, [r0, #12]
 80138b8:	b13c      	cbz	r4, 80138ca <_Bfree+0x3a>
 80138ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80138bc:	6862      	ldr	r2, [r4, #4]
 80138be:	68db      	ldr	r3, [r3, #12]
 80138c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80138c4:	6021      	str	r1, [r4, #0]
 80138c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80138ca:	bd70      	pop	{r4, r5, r6, pc}
 80138cc:	080167cd 	.word	0x080167cd
 80138d0:	08016850 	.word	0x08016850

080138d4 <__multadd>:
 80138d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138d8:	690d      	ldr	r5, [r1, #16]
 80138da:	4607      	mov	r7, r0
 80138dc:	460c      	mov	r4, r1
 80138de:	461e      	mov	r6, r3
 80138e0:	f101 0c14 	add.w	ip, r1, #20
 80138e4:	2000      	movs	r0, #0
 80138e6:	f8dc 3000 	ldr.w	r3, [ip]
 80138ea:	b299      	uxth	r1, r3
 80138ec:	fb02 6101 	mla	r1, r2, r1, r6
 80138f0:	0c1e      	lsrs	r6, r3, #16
 80138f2:	0c0b      	lsrs	r3, r1, #16
 80138f4:	fb02 3306 	mla	r3, r2, r6, r3
 80138f8:	b289      	uxth	r1, r1
 80138fa:	3001      	adds	r0, #1
 80138fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013900:	4285      	cmp	r5, r0
 8013902:	f84c 1b04 	str.w	r1, [ip], #4
 8013906:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801390a:	dcec      	bgt.n	80138e6 <__multadd+0x12>
 801390c:	b30e      	cbz	r6, 8013952 <__multadd+0x7e>
 801390e:	68a3      	ldr	r3, [r4, #8]
 8013910:	42ab      	cmp	r3, r5
 8013912:	dc19      	bgt.n	8013948 <__multadd+0x74>
 8013914:	6861      	ldr	r1, [r4, #4]
 8013916:	4638      	mov	r0, r7
 8013918:	3101      	adds	r1, #1
 801391a:	f7ff ff79 	bl	8013810 <_Balloc>
 801391e:	4680      	mov	r8, r0
 8013920:	b928      	cbnz	r0, 801392e <__multadd+0x5a>
 8013922:	4602      	mov	r2, r0
 8013924:	4b0c      	ldr	r3, [pc, #48]	; (8013958 <__multadd+0x84>)
 8013926:	480d      	ldr	r0, [pc, #52]	; (801395c <__multadd+0x88>)
 8013928:	21b5      	movs	r1, #181	; 0xb5
 801392a:	f000 fbfb 	bl	8014124 <__assert_func>
 801392e:	6922      	ldr	r2, [r4, #16]
 8013930:	3202      	adds	r2, #2
 8013932:	f104 010c 	add.w	r1, r4, #12
 8013936:	0092      	lsls	r2, r2, #2
 8013938:	300c      	adds	r0, #12
 801393a:	f7ff ff5b 	bl	80137f4 <memcpy>
 801393e:	4621      	mov	r1, r4
 8013940:	4638      	mov	r0, r7
 8013942:	f7ff ffa5 	bl	8013890 <_Bfree>
 8013946:	4644      	mov	r4, r8
 8013948:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801394c:	3501      	adds	r5, #1
 801394e:	615e      	str	r6, [r3, #20]
 8013950:	6125      	str	r5, [r4, #16]
 8013952:	4620      	mov	r0, r4
 8013954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013958:	0801683f 	.word	0x0801683f
 801395c:	08016850 	.word	0x08016850

08013960 <__hi0bits>:
 8013960:	0c03      	lsrs	r3, r0, #16
 8013962:	041b      	lsls	r3, r3, #16
 8013964:	b9d3      	cbnz	r3, 801399c <__hi0bits+0x3c>
 8013966:	0400      	lsls	r0, r0, #16
 8013968:	2310      	movs	r3, #16
 801396a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801396e:	bf04      	itt	eq
 8013970:	0200      	lsleq	r0, r0, #8
 8013972:	3308      	addeq	r3, #8
 8013974:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013978:	bf04      	itt	eq
 801397a:	0100      	lsleq	r0, r0, #4
 801397c:	3304      	addeq	r3, #4
 801397e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013982:	bf04      	itt	eq
 8013984:	0080      	lsleq	r0, r0, #2
 8013986:	3302      	addeq	r3, #2
 8013988:	2800      	cmp	r0, #0
 801398a:	db05      	blt.n	8013998 <__hi0bits+0x38>
 801398c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013990:	f103 0301 	add.w	r3, r3, #1
 8013994:	bf08      	it	eq
 8013996:	2320      	moveq	r3, #32
 8013998:	4618      	mov	r0, r3
 801399a:	4770      	bx	lr
 801399c:	2300      	movs	r3, #0
 801399e:	e7e4      	b.n	801396a <__hi0bits+0xa>

080139a0 <__lo0bits>:
 80139a0:	6803      	ldr	r3, [r0, #0]
 80139a2:	f013 0207 	ands.w	r2, r3, #7
 80139a6:	4601      	mov	r1, r0
 80139a8:	d00b      	beq.n	80139c2 <__lo0bits+0x22>
 80139aa:	07da      	lsls	r2, r3, #31
 80139ac:	d423      	bmi.n	80139f6 <__lo0bits+0x56>
 80139ae:	0798      	lsls	r0, r3, #30
 80139b0:	bf49      	itett	mi
 80139b2:	085b      	lsrmi	r3, r3, #1
 80139b4:	089b      	lsrpl	r3, r3, #2
 80139b6:	2001      	movmi	r0, #1
 80139b8:	600b      	strmi	r3, [r1, #0]
 80139ba:	bf5c      	itt	pl
 80139bc:	600b      	strpl	r3, [r1, #0]
 80139be:	2002      	movpl	r0, #2
 80139c0:	4770      	bx	lr
 80139c2:	b298      	uxth	r0, r3
 80139c4:	b9a8      	cbnz	r0, 80139f2 <__lo0bits+0x52>
 80139c6:	0c1b      	lsrs	r3, r3, #16
 80139c8:	2010      	movs	r0, #16
 80139ca:	b2da      	uxtb	r2, r3
 80139cc:	b90a      	cbnz	r2, 80139d2 <__lo0bits+0x32>
 80139ce:	3008      	adds	r0, #8
 80139d0:	0a1b      	lsrs	r3, r3, #8
 80139d2:	071a      	lsls	r2, r3, #28
 80139d4:	bf04      	itt	eq
 80139d6:	091b      	lsreq	r3, r3, #4
 80139d8:	3004      	addeq	r0, #4
 80139da:	079a      	lsls	r2, r3, #30
 80139dc:	bf04      	itt	eq
 80139de:	089b      	lsreq	r3, r3, #2
 80139e0:	3002      	addeq	r0, #2
 80139e2:	07da      	lsls	r2, r3, #31
 80139e4:	d403      	bmi.n	80139ee <__lo0bits+0x4e>
 80139e6:	085b      	lsrs	r3, r3, #1
 80139e8:	f100 0001 	add.w	r0, r0, #1
 80139ec:	d005      	beq.n	80139fa <__lo0bits+0x5a>
 80139ee:	600b      	str	r3, [r1, #0]
 80139f0:	4770      	bx	lr
 80139f2:	4610      	mov	r0, r2
 80139f4:	e7e9      	b.n	80139ca <__lo0bits+0x2a>
 80139f6:	2000      	movs	r0, #0
 80139f8:	4770      	bx	lr
 80139fa:	2020      	movs	r0, #32
 80139fc:	4770      	bx	lr
	...

08013a00 <__i2b>:
 8013a00:	b510      	push	{r4, lr}
 8013a02:	460c      	mov	r4, r1
 8013a04:	2101      	movs	r1, #1
 8013a06:	f7ff ff03 	bl	8013810 <_Balloc>
 8013a0a:	4602      	mov	r2, r0
 8013a0c:	b928      	cbnz	r0, 8013a1a <__i2b+0x1a>
 8013a0e:	4b05      	ldr	r3, [pc, #20]	; (8013a24 <__i2b+0x24>)
 8013a10:	4805      	ldr	r0, [pc, #20]	; (8013a28 <__i2b+0x28>)
 8013a12:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013a16:	f000 fb85 	bl	8014124 <__assert_func>
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	6144      	str	r4, [r0, #20]
 8013a1e:	6103      	str	r3, [r0, #16]
 8013a20:	bd10      	pop	{r4, pc}
 8013a22:	bf00      	nop
 8013a24:	0801683f 	.word	0x0801683f
 8013a28:	08016850 	.word	0x08016850

08013a2c <__multiply>:
 8013a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a30:	4691      	mov	r9, r2
 8013a32:	690a      	ldr	r2, [r1, #16]
 8013a34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	bfb8      	it	lt
 8013a3c:	460b      	movlt	r3, r1
 8013a3e:	460c      	mov	r4, r1
 8013a40:	bfbc      	itt	lt
 8013a42:	464c      	movlt	r4, r9
 8013a44:	4699      	movlt	r9, r3
 8013a46:	6927      	ldr	r7, [r4, #16]
 8013a48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013a4c:	68a3      	ldr	r3, [r4, #8]
 8013a4e:	6861      	ldr	r1, [r4, #4]
 8013a50:	eb07 060a 	add.w	r6, r7, sl
 8013a54:	42b3      	cmp	r3, r6
 8013a56:	b085      	sub	sp, #20
 8013a58:	bfb8      	it	lt
 8013a5a:	3101      	addlt	r1, #1
 8013a5c:	f7ff fed8 	bl	8013810 <_Balloc>
 8013a60:	b930      	cbnz	r0, 8013a70 <__multiply+0x44>
 8013a62:	4602      	mov	r2, r0
 8013a64:	4b44      	ldr	r3, [pc, #272]	; (8013b78 <__multiply+0x14c>)
 8013a66:	4845      	ldr	r0, [pc, #276]	; (8013b7c <__multiply+0x150>)
 8013a68:	f240 115d 	movw	r1, #349	; 0x15d
 8013a6c:	f000 fb5a 	bl	8014124 <__assert_func>
 8013a70:	f100 0514 	add.w	r5, r0, #20
 8013a74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013a78:	462b      	mov	r3, r5
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	4543      	cmp	r3, r8
 8013a7e:	d321      	bcc.n	8013ac4 <__multiply+0x98>
 8013a80:	f104 0314 	add.w	r3, r4, #20
 8013a84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013a88:	f109 0314 	add.w	r3, r9, #20
 8013a8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013a90:	9202      	str	r2, [sp, #8]
 8013a92:	1b3a      	subs	r2, r7, r4
 8013a94:	3a15      	subs	r2, #21
 8013a96:	f022 0203 	bic.w	r2, r2, #3
 8013a9a:	3204      	adds	r2, #4
 8013a9c:	f104 0115 	add.w	r1, r4, #21
 8013aa0:	428f      	cmp	r7, r1
 8013aa2:	bf38      	it	cc
 8013aa4:	2204      	movcc	r2, #4
 8013aa6:	9201      	str	r2, [sp, #4]
 8013aa8:	9a02      	ldr	r2, [sp, #8]
 8013aaa:	9303      	str	r3, [sp, #12]
 8013aac:	429a      	cmp	r2, r3
 8013aae:	d80c      	bhi.n	8013aca <__multiply+0x9e>
 8013ab0:	2e00      	cmp	r6, #0
 8013ab2:	dd03      	ble.n	8013abc <__multiply+0x90>
 8013ab4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d05a      	beq.n	8013b72 <__multiply+0x146>
 8013abc:	6106      	str	r6, [r0, #16]
 8013abe:	b005      	add	sp, #20
 8013ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ac4:	f843 2b04 	str.w	r2, [r3], #4
 8013ac8:	e7d8      	b.n	8013a7c <__multiply+0x50>
 8013aca:	f8b3 a000 	ldrh.w	sl, [r3]
 8013ace:	f1ba 0f00 	cmp.w	sl, #0
 8013ad2:	d024      	beq.n	8013b1e <__multiply+0xf2>
 8013ad4:	f104 0e14 	add.w	lr, r4, #20
 8013ad8:	46a9      	mov	r9, r5
 8013ada:	f04f 0c00 	mov.w	ip, #0
 8013ade:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013ae2:	f8d9 1000 	ldr.w	r1, [r9]
 8013ae6:	fa1f fb82 	uxth.w	fp, r2
 8013aea:	b289      	uxth	r1, r1
 8013aec:	fb0a 110b 	mla	r1, sl, fp, r1
 8013af0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013af4:	f8d9 2000 	ldr.w	r2, [r9]
 8013af8:	4461      	add	r1, ip
 8013afa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013afe:	fb0a c20b 	mla	r2, sl, fp, ip
 8013b02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013b06:	b289      	uxth	r1, r1
 8013b08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013b0c:	4577      	cmp	r7, lr
 8013b0e:	f849 1b04 	str.w	r1, [r9], #4
 8013b12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013b16:	d8e2      	bhi.n	8013ade <__multiply+0xb2>
 8013b18:	9a01      	ldr	r2, [sp, #4]
 8013b1a:	f845 c002 	str.w	ip, [r5, r2]
 8013b1e:	9a03      	ldr	r2, [sp, #12]
 8013b20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013b24:	3304      	adds	r3, #4
 8013b26:	f1b9 0f00 	cmp.w	r9, #0
 8013b2a:	d020      	beq.n	8013b6e <__multiply+0x142>
 8013b2c:	6829      	ldr	r1, [r5, #0]
 8013b2e:	f104 0c14 	add.w	ip, r4, #20
 8013b32:	46ae      	mov	lr, r5
 8013b34:	f04f 0a00 	mov.w	sl, #0
 8013b38:	f8bc b000 	ldrh.w	fp, [ip]
 8013b3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013b40:	fb09 220b 	mla	r2, r9, fp, r2
 8013b44:	4492      	add	sl, r2
 8013b46:	b289      	uxth	r1, r1
 8013b48:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013b4c:	f84e 1b04 	str.w	r1, [lr], #4
 8013b50:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013b54:	f8be 1000 	ldrh.w	r1, [lr]
 8013b58:	0c12      	lsrs	r2, r2, #16
 8013b5a:	fb09 1102 	mla	r1, r9, r2, r1
 8013b5e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013b62:	4567      	cmp	r7, ip
 8013b64:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013b68:	d8e6      	bhi.n	8013b38 <__multiply+0x10c>
 8013b6a:	9a01      	ldr	r2, [sp, #4]
 8013b6c:	50a9      	str	r1, [r5, r2]
 8013b6e:	3504      	adds	r5, #4
 8013b70:	e79a      	b.n	8013aa8 <__multiply+0x7c>
 8013b72:	3e01      	subs	r6, #1
 8013b74:	e79c      	b.n	8013ab0 <__multiply+0x84>
 8013b76:	bf00      	nop
 8013b78:	0801683f 	.word	0x0801683f
 8013b7c:	08016850 	.word	0x08016850

08013b80 <__pow5mult>:
 8013b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b84:	4615      	mov	r5, r2
 8013b86:	f012 0203 	ands.w	r2, r2, #3
 8013b8a:	4606      	mov	r6, r0
 8013b8c:	460f      	mov	r7, r1
 8013b8e:	d007      	beq.n	8013ba0 <__pow5mult+0x20>
 8013b90:	4c25      	ldr	r4, [pc, #148]	; (8013c28 <__pow5mult+0xa8>)
 8013b92:	3a01      	subs	r2, #1
 8013b94:	2300      	movs	r3, #0
 8013b96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013b9a:	f7ff fe9b 	bl	80138d4 <__multadd>
 8013b9e:	4607      	mov	r7, r0
 8013ba0:	10ad      	asrs	r5, r5, #2
 8013ba2:	d03d      	beq.n	8013c20 <__pow5mult+0xa0>
 8013ba4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013ba6:	b97c      	cbnz	r4, 8013bc8 <__pow5mult+0x48>
 8013ba8:	2010      	movs	r0, #16
 8013baa:	f7ff fe1b 	bl	80137e4 <malloc>
 8013bae:	4602      	mov	r2, r0
 8013bb0:	6270      	str	r0, [r6, #36]	; 0x24
 8013bb2:	b928      	cbnz	r0, 8013bc0 <__pow5mult+0x40>
 8013bb4:	4b1d      	ldr	r3, [pc, #116]	; (8013c2c <__pow5mult+0xac>)
 8013bb6:	481e      	ldr	r0, [pc, #120]	; (8013c30 <__pow5mult+0xb0>)
 8013bb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013bbc:	f000 fab2 	bl	8014124 <__assert_func>
 8013bc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013bc4:	6004      	str	r4, [r0, #0]
 8013bc6:	60c4      	str	r4, [r0, #12]
 8013bc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013bcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013bd0:	b94c      	cbnz	r4, 8013be6 <__pow5mult+0x66>
 8013bd2:	f240 2171 	movw	r1, #625	; 0x271
 8013bd6:	4630      	mov	r0, r6
 8013bd8:	f7ff ff12 	bl	8013a00 <__i2b>
 8013bdc:	2300      	movs	r3, #0
 8013bde:	f8c8 0008 	str.w	r0, [r8, #8]
 8013be2:	4604      	mov	r4, r0
 8013be4:	6003      	str	r3, [r0, #0]
 8013be6:	f04f 0900 	mov.w	r9, #0
 8013bea:	07eb      	lsls	r3, r5, #31
 8013bec:	d50a      	bpl.n	8013c04 <__pow5mult+0x84>
 8013bee:	4639      	mov	r1, r7
 8013bf0:	4622      	mov	r2, r4
 8013bf2:	4630      	mov	r0, r6
 8013bf4:	f7ff ff1a 	bl	8013a2c <__multiply>
 8013bf8:	4639      	mov	r1, r7
 8013bfa:	4680      	mov	r8, r0
 8013bfc:	4630      	mov	r0, r6
 8013bfe:	f7ff fe47 	bl	8013890 <_Bfree>
 8013c02:	4647      	mov	r7, r8
 8013c04:	106d      	asrs	r5, r5, #1
 8013c06:	d00b      	beq.n	8013c20 <__pow5mult+0xa0>
 8013c08:	6820      	ldr	r0, [r4, #0]
 8013c0a:	b938      	cbnz	r0, 8013c1c <__pow5mult+0x9c>
 8013c0c:	4622      	mov	r2, r4
 8013c0e:	4621      	mov	r1, r4
 8013c10:	4630      	mov	r0, r6
 8013c12:	f7ff ff0b 	bl	8013a2c <__multiply>
 8013c16:	6020      	str	r0, [r4, #0]
 8013c18:	f8c0 9000 	str.w	r9, [r0]
 8013c1c:	4604      	mov	r4, r0
 8013c1e:	e7e4      	b.n	8013bea <__pow5mult+0x6a>
 8013c20:	4638      	mov	r0, r7
 8013c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c26:	bf00      	nop
 8013c28:	080169a0 	.word	0x080169a0
 8013c2c:	080167cd 	.word	0x080167cd
 8013c30:	08016850 	.word	0x08016850

08013c34 <__lshift>:
 8013c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c38:	460c      	mov	r4, r1
 8013c3a:	6849      	ldr	r1, [r1, #4]
 8013c3c:	6923      	ldr	r3, [r4, #16]
 8013c3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013c42:	68a3      	ldr	r3, [r4, #8]
 8013c44:	4607      	mov	r7, r0
 8013c46:	4691      	mov	r9, r2
 8013c48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013c4c:	f108 0601 	add.w	r6, r8, #1
 8013c50:	42b3      	cmp	r3, r6
 8013c52:	db0b      	blt.n	8013c6c <__lshift+0x38>
 8013c54:	4638      	mov	r0, r7
 8013c56:	f7ff fddb 	bl	8013810 <_Balloc>
 8013c5a:	4605      	mov	r5, r0
 8013c5c:	b948      	cbnz	r0, 8013c72 <__lshift+0x3e>
 8013c5e:	4602      	mov	r2, r0
 8013c60:	4b2a      	ldr	r3, [pc, #168]	; (8013d0c <__lshift+0xd8>)
 8013c62:	482b      	ldr	r0, [pc, #172]	; (8013d10 <__lshift+0xdc>)
 8013c64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013c68:	f000 fa5c 	bl	8014124 <__assert_func>
 8013c6c:	3101      	adds	r1, #1
 8013c6e:	005b      	lsls	r3, r3, #1
 8013c70:	e7ee      	b.n	8013c50 <__lshift+0x1c>
 8013c72:	2300      	movs	r3, #0
 8013c74:	f100 0114 	add.w	r1, r0, #20
 8013c78:	f100 0210 	add.w	r2, r0, #16
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	4553      	cmp	r3, sl
 8013c80:	db37      	blt.n	8013cf2 <__lshift+0xbe>
 8013c82:	6920      	ldr	r0, [r4, #16]
 8013c84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013c88:	f104 0314 	add.w	r3, r4, #20
 8013c8c:	f019 091f 	ands.w	r9, r9, #31
 8013c90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013c94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013c98:	d02f      	beq.n	8013cfa <__lshift+0xc6>
 8013c9a:	f1c9 0e20 	rsb	lr, r9, #32
 8013c9e:	468a      	mov	sl, r1
 8013ca0:	f04f 0c00 	mov.w	ip, #0
 8013ca4:	681a      	ldr	r2, [r3, #0]
 8013ca6:	fa02 f209 	lsl.w	r2, r2, r9
 8013caa:	ea42 020c 	orr.w	r2, r2, ip
 8013cae:	f84a 2b04 	str.w	r2, [sl], #4
 8013cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013cb6:	4298      	cmp	r0, r3
 8013cb8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013cbc:	d8f2      	bhi.n	8013ca4 <__lshift+0x70>
 8013cbe:	1b03      	subs	r3, r0, r4
 8013cc0:	3b15      	subs	r3, #21
 8013cc2:	f023 0303 	bic.w	r3, r3, #3
 8013cc6:	3304      	adds	r3, #4
 8013cc8:	f104 0215 	add.w	r2, r4, #21
 8013ccc:	4290      	cmp	r0, r2
 8013cce:	bf38      	it	cc
 8013cd0:	2304      	movcc	r3, #4
 8013cd2:	f841 c003 	str.w	ip, [r1, r3]
 8013cd6:	f1bc 0f00 	cmp.w	ip, #0
 8013cda:	d001      	beq.n	8013ce0 <__lshift+0xac>
 8013cdc:	f108 0602 	add.w	r6, r8, #2
 8013ce0:	3e01      	subs	r6, #1
 8013ce2:	4638      	mov	r0, r7
 8013ce4:	612e      	str	r6, [r5, #16]
 8013ce6:	4621      	mov	r1, r4
 8013ce8:	f7ff fdd2 	bl	8013890 <_Bfree>
 8013cec:	4628      	mov	r0, r5
 8013cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cf2:	f842 0f04 	str.w	r0, [r2, #4]!
 8013cf6:	3301      	adds	r3, #1
 8013cf8:	e7c1      	b.n	8013c7e <__lshift+0x4a>
 8013cfa:	3904      	subs	r1, #4
 8013cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d00:	f841 2f04 	str.w	r2, [r1, #4]!
 8013d04:	4298      	cmp	r0, r3
 8013d06:	d8f9      	bhi.n	8013cfc <__lshift+0xc8>
 8013d08:	e7ea      	b.n	8013ce0 <__lshift+0xac>
 8013d0a:	bf00      	nop
 8013d0c:	0801683f 	.word	0x0801683f
 8013d10:	08016850 	.word	0x08016850

08013d14 <__mcmp>:
 8013d14:	b530      	push	{r4, r5, lr}
 8013d16:	6902      	ldr	r2, [r0, #16]
 8013d18:	690c      	ldr	r4, [r1, #16]
 8013d1a:	1b12      	subs	r2, r2, r4
 8013d1c:	d10e      	bne.n	8013d3c <__mcmp+0x28>
 8013d1e:	f100 0314 	add.w	r3, r0, #20
 8013d22:	3114      	adds	r1, #20
 8013d24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013d28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013d2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013d30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013d34:	42a5      	cmp	r5, r4
 8013d36:	d003      	beq.n	8013d40 <__mcmp+0x2c>
 8013d38:	d305      	bcc.n	8013d46 <__mcmp+0x32>
 8013d3a:	2201      	movs	r2, #1
 8013d3c:	4610      	mov	r0, r2
 8013d3e:	bd30      	pop	{r4, r5, pc}
 8013d40:	4283      	cmp	r3, r0
 8013d42:	d3f3      	bcc.n	8013d2c <__mcmp+0x18>
 8013d44:	e7fa      	b.n	8013d3c <__mcmp+0x28>
 8013d46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013d4a:	e7f7      	b.n	8013d3c <__mcmp+0x28>

08013d4c <__mdiff>:
 8013d4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d50:	460c      	mov	r4, r1
 8013d52:	4606      	mov	r6, r0
 8013d54:	4611      	mov	r1, r2
 8013d56:	4620      	mov	r0, r4
 8013d58:	4690      	mov	r8, r2
 8013d5a:	f7ff ffdb 	bl	8013d14 <__mcmp>
 8013d5e:	1e05      	subs	r5, r0, #0
 8013d60:	d110      	bne.n	8013d84 <__mdiff+0x38>
 8013d62:	4629      	mov	r1, r5
 8013d64:	4630      	mov	r0, r6
 8013d66:	f7ff fd53 	bl	8013810 <_Balloc>
 8013d6a:	b930      	cbnz	r0, 8013d7a <__mdiff+0x2e>
 8013d6c:	4b3a      	ldr	r3, [pc, #232]	; (8013e58 <__mdiff+0x10c>)
 8013d6e:	4602      	mov	r2, r0
 8013d70:	f240 2132 	movw	r1, #562	; 0x232
 8013d74:	4839      	ldr	r0, [pc, #228]	; (8013e5c <__mdiff+0x110>)
 8013d76:	f000 f9d5 	bl	8014124 <__assert_func>
 8013d7a:	2301      	movs	r3, #1
 8013d7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013d80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d84:	bfa4      	itt	ge
 8013d86:	4643      	movge	r3, r8
 8013d88:	46a0      	movge	r8, r4
 8013d8a:	4630      	mov	r0, r6
 8013d8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013d90:	bfa6      	itte	ge
 8013d92:	461c      	movge	r4, r3
 8013d94:	2500      	movge	r5, #0
 8013d96:	2501      	movlt	r5, #1
 8013d98:	f7ff fd3a 	bl	8013810 <_Balloc>
 8013d9c:	b920      	cbnz	r0, 8013da8 <__mdiff+0x5c>
 8013d9e:	4b2e      	ldr	r3, [pc, #184]	; (8013e58 <__mdiff+0x10c>)
 8013da0:	4602      	mov	r2, r0
 8013da2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013da6:	e7e5      	b.n	8013d74 <__mdiff+0x28>
 8013da8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013dac:	6926      	ldr	r6, [r4, #16]
 8013dae:	60c5      	str	r5, [r0, #12]
 8013db0:	f104 0914 	add.w	r9, r4, #20
 8013db4:	f108 0514 	add.w	r5, r8, #20
 8013db8:	f100 0e14 	add.w	lr, r0, #20
 8013dbc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013dc0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013dc4:	f108 0210 	add.w	r2, r8, #16
 8013dc8:	46f2      	mov	sl, lr
 8013dca:	2100      	movs	r1, #0
 8013dcc:	f859 3b04 	ldr.w	r3, [r9], #4
 8013dd0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013dd4:	fa1f f883 	uxth.w	r8, r3
 8013dd8:	fa11 f18b 	uxtah	r1, r1, fp
 8013ddc:	0c1b      	lsrs	r3, r3, #16
 8013dde:	eba1 0808 	sub.w	r8, r1, r8
 8013de2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013de6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013dea:	fa1f f888 	uxth.w	r8, r8
 8013dee:	1419      	asrs	r1, r3, #16
 8013df0:	454e      	cmp	r6, r9
 8013df2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013df6:	f84a 3b04 	str.w	r3, [sl], #4
 8013dfa:	d8e7      	bhi.n	8013dcc <__mdiff+0x80>
 8013dfc:	1b33      	subs	r3, r6, r4
 8013dfe:	3b15      	subs	r3, #21
 8013e00:	f023 0303 	bic.w	r3, r3, #3
 8013e04:	3304      	adds	r3, #4
 8013e06:	3415      	adds	r4, #21
 8013e08:	42a6      	cmp	r6, r4
 8013e0a:	bf38      	it	cc
 8013e0c:	2304      	movcc	r3, #4
 8013e0e:	441d      	add	r5, r3
 8013e10:	4473      	add	r3, lr
 8013e12:	469e      	mov	lr, r3
 8013e14:	462e      	mov	r6, r5
 8013e16:	4566      	cmp	r6, ip
 8013e18:	d30e      	bcc.n	8013e38 <__mdiff+0xec>
 8013e1a:	f10c 0203 	add.w	r2, ip, #3
 8013e1e:	1b52      	subs	r2, r2, r5
 8013e20:	f022 0203 	bic.w	r2, r2, #3
 8013e24:	3d03      	subs	r5, #3
 8013e26:	45ac      	cmp	ip, r5
 8013e28:	bf38      	it	cc
 8013e2a:	2200      	movcc	r2, #0
 8013e2c:	441a      	add	r2, r3
 8013e2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013e32:	b17b      	cbz	r3, 8013e54 <__mdiff+0x108>
 8013e34:	6107      	str	r7, [r0, #16]
 8013e36:	e7a3      	b.n	8013d80 <__mdiff+0x34>
 8013e38:	f856 8b04 	ldr.w	r8, [r6], #4
 8013e3c:	fa11 f288 	uxtah	r2, r1, r8
 8013e40:	1414      	asrs	r4, r2, #16
 8013e42:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013e46:	b292      	uxth	r2, r2
 8013e48:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013e4c:	f84e 2b04 	str.w	r2, [lr], #4
 8013e50:	1421      	asrs	r1, r4, #16
 8013e52:	e7e0      	b.n	8013e16 <__mdiff+0xca>
 8013e54:	3f01      	subs	r7, #1
 8013e56:	e7ea      	b.n	8013e2e <__mdiff+0xe2>
 8013e58:	0801683f 	.word	0x0801683f
 8013e5c:	08016850 	.word	0x08016850

08013e60 <__d2b>:
 8013e60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013e64:	4689      	mov	r9, r1
 8013e66:	2101      	movs	r1, #1
 8013e68:	ec57 6b10 	vmov	r6, r7, d0
 8013e6c:	4690      	mov	r8, r2
 8013e6e:	f7ff fccf 	bl	8013810 <_Balloc>
 8013e72:	4604      	mov	r4, r0
 8013e74:	b930      	cbnz	r0, 8013e84 <__d2b+0x24>
 8013e76:	4602      	mov	r2, r0
 8013e78:	4b25      	ldr	r3, [pc, #148]	; (8013f10 <__d2b+0xb0>)
 8013e7a:	4826      	ldr	r0, [pc, #152]	; (8013f14 <__d2b+0xb4>)
 8013e7c:	f240 310a 	movw	r1, #778	; 0x30a
 8013e80:	f000 f950 	bl	8014124 <__assert_func>
 8013e84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013e88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013e8c:	bb35      	cbnz	r5, 8013edc <__d2b+0x7c>
 8013e8e:	2e00      	cmp	r6, #0
 8013e90:	9301      	str	r3, [sp, #4]
 8013e92:	d028      	beq.n	8013ee6 <__d2b+0x86>
 8013e94:	4668      	mov	r0, sp
 8013e96:	9600      	str	r6, [sp, #0]
 8013e98:	f7ff fd82 	bl	80139a0 <__lo0bits>
 8013e9c:	9900      	ldr	r1, [sp, #0]
 8013e9e:	b300      	cbz	r0, 8013ee2 <__d2b+0x82>
 8013ea0:	9a01      	ldr	r2, [sp, #4]
 8013ea2:	f1c0 0320 	rsb	r3, r0, #32
 8013ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8013eaa:	430b      	orrs	r3, r1
 8013eac:	40c2      	lsrs	r2, r0
 8013eae:	6163      	str	r3, [r4, #20]
 8013eb0:	9201      	str	r2, [sp, #4]
 8013eb2:	9b01      	ldr	r3, [sp, #4]
 8013eb4:	61a3      	str	r3, [r4, #24]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	bf14      	ite	ne
 8013eba:	2202      	movne	r2, #2
 8013ebc:	2201      	moveq	r2, #1
 8013ebe:	6122      	str	r2, [r4, #16]
 8013ec0:	b1d5      	cbz	r5, 8013ef8 <__d2b+0x98>
 8013ec2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013ec6:	4405      	add	r5, r0
 8013ec8:	f8c9 5000 	str.w	r5, [r9]
 8013ecc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013ed0:	f8c8 0000 	str.w	r0, [r8]
 8013ed4:	4620      	mov	r0, r4
 8013ed6:	b003      	add	sp, #12
 8013ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013edc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013ee0:	e7d5      	b.n	8013e8e <__d2b+0x2e>
 8013ee2:	6161      	str	r1, [r4, #20]
 8013ee4:	e7e5      	b.n	8013eb2 <__d2b+0x52>
 8013ee6:	a801      	add	r0, sp, #4
 8013ee8:	f7ff fd5a 	bl	80139a0 <__lo0bits>
 8013eec:	9b01      	ldr	r3, [sp, #4]
 8013eee:	6163      	str	r3, [r4, #20]
 8013ef0:	2201      	movs	r2, #1
 8013ef2:	6122      	str	r2, [r4, #16]
 8013ef4:	3020      	adds	r0, #32
 8013ef6:	e7e3      	b.n	8013ec0 <__d2b+0x60>
 8013ef8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013efc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013f00:	f8c9 0000 	str.w	r0, [r9]
 8013f04:	6918      	ldr	r0, [r3, #16]
 8013f06:	f7ff fd2b 	bl	8013960 <__hi0bits>
 8013f0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013f0e:	e7df      	b.n	8013ed0 <__d2b+0x70>
 8013f10:	0801683f 	.word	0x0801683f
 8013f14:	08016850 	.word	0x08016850

08013f18 <_calloc_r>:
 8013f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f1a:	fba1 2402 	umull	r2, r4, r1, r2
 8013f1e:	b94c      	cbnz	r4, 8013f34 <_calloc_r+0x1c>
 8013f20:	4611      	mov	r1, r2
 8013f22:	9201      	str	r2, [sp, #4]
 8013f24:	f000 f87a 	bl	801401c <_malloc_r>
 8013f28:	9a01      	ldr	r2, [sp, #4]
 8013f2a:	4605      	mov	r5, r0
 8013f2c:	b930      	cbnz	r0, 8013f3c <_calloc_r+0x24>
 8013f2e:	4628      	mov	r0, r5
 8013f30:	b003      	add	sp, #12
 8013f32:	bd30      	pop	{r4, r5, pc}
 8013f34:	220c      	movs	r2, #12
 8013f36:	6002      	str	r2, [r0, #0]
 8013f38:	2500      	movs	r5, #0
 8013f3a:	e7f8      	b.n	8013f2e <_calloc_r+0x16>
 8013f3c:	4621      	mov	r1, r4
 8013f3e:	f7fe fa07 	bl	8012350 <memset>
 8013f42:	e7f4      	b.n	8013f2e <_calloc_r+0x16>

08013f44 <_free_r>:
 8013f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f46:	2900      	cmp	r1, #0
 8013f48:	d044      	beq.n	8013fd4 <_free_r+0x90>
 8013f4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f4e:	9001      	str	r0, [sp, #4]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	f1a1 0404 	sub.w	r4, r1, #4
 8013f56:	bfb8      	it	lt
 8013f58:	18e4      	addlt	r4, r4, r3
 8013f5a:	f000 f925 	bl	80141a8 <__malloc_lock>
 8013f5e:	4a1e      	ldr	r2, [pc, #120]	; (8013fd8 <_free_r+0x94>)
 8013f60:	9801      	ldr	r0, [sp, #4]
 8013f62:	6813      	ldr	r3, [r2, #0]
 8013f64:	b933      	cbnz	r3, 8013f74 <_free_r+0x30>
 8013f66:	6063      	str	r3, [r4, #4]
 8013f68:	6014      	str	r4, [r2, #0]
 8013f6a:	b003      	add	sp, #12
 8013f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f70:	f000 b920 	b.w	80141b4 <__malloc_unlock>
 8013f74:	42a3      	cmp	r3, r4
 8013f76:	d908      	bls.n	8013f8a <_free_r+0x46>
 8013f78:	6825      	ldr	r5, [r4, #0]
 8013f7a:	1961      	adds	r1, r4, r5
 8013f7c:	428b      	cmp	r3, r1
 8013f7e:	bf01      	itttt	eq
 8013f80:	6819      	ldreq	r1, [r3, #0]
 8013f82:	685b      	ldreq	r3, [r3, #4]
 8013f84:	1949      	addeq	r1, r1, r5
 8013f86:	6021      	streq	r1, [r4, #0]
 8013f88:	e7ed      	b.n	8013f66 <_free_r+0x22>
 8013f8a:	461a      	mov	r2, r3
 8013f8c:	685b      	ldr	r3, [r3, #4]
 8013f8e:	b10b      	cbz	r3, 8013f94 <_free_r+0x50>
 8013f90:	42a3      	cmp	r3, r4
 8013f92:	d9fa      	bls.n	8013f8a <_free_r+0x46>
 8013f94:	6811      	ldr	r1, [r2, #0]
 8013f96:	1855      	adds	r5, r2, r1
 8013f98:	42a5      	cmp	r5, r4
 8013f9a:	d10b      	bne.n	8013fb4 <_free_r+0x70>
 8013f9c:	6824      	ldr	r4, [r4, #0]
 8013f9e:	4421      	add	r1, r4
 8013fa0:	1854      	adds	r4, r2, r1
 8013fa2:	42a3      	cmp	r3, r4
 8013fa4:	6011      	str	r1, [r2, #0]
 8013fa6:	d1e0      	bne.n	8013f6a <_free_r+0x26>
 8013fa8:	681c      	ldr	r4, [r3, #0]
 8013faa:	685b      	ldr	r3, [r3, #4]
 8013fac:	6053      	str	r3, [r2, #4]
 8013fae:	4421      	add	r1, r4
 8013fb0:	6011      	str	r1, [r2, #0]
 8013fb2:	e7da      	b.n	8013f6a <_free_r+0x26>
 8013fb4:	d902      	bls.n	8013fbc <_free_r+0x78>
 8013fb6:	230c      	movs	r3, #12
 8013fb8:	6003      	str	r3, [r0, #0]
 8013fba:	e7d6      	b.n	8013f6a <_free_r+0x26>
 8013fbc:	6825      	ldr	r5, [r4, #0]
 8013fbe:	1961      	adds	r1, r4, r5
 8013fc0:	428b      	cmp	r3, r1
 8013fc2:	bf04      	itt	eq
 8013fc4:	6819      	ldreq	r1, [r3, #0]
 8013fc6:	685b      	ldreq	r3, [r3, #4]
 8013fc8:	6063      	str	r3, [r4, #4]
 8013fca:	bf04      	itt	eq
 8013fcc:	1949      	addeq	r1, r1, r5
 8013fce:	6021      	streq	r1, [r4, #0]
 8013fd0:	6054      	str	r4, [r2, #4]
 8013fd2:	e7ca      	b.n	8013f6a <_free_r+0x26>
 8013fd4:	b003      	add	sp, #12
 8013fd6:	bd30      	pop	{r4, r5, pc}
 8013fd8:	24001750 	.word	0x24001750

08013fdc <sbrk_aligned>:
 8013fdc:	b570      	push	{r4, r5, r6, lr}
 8013fde:	4e0e      	ldr	r6, [pc, #56]	; (8014018 <sbrk_aligned+0x3c>)
 8013fe0:	460c      	mov	r4, r1
 8013fe2:	6831      	ldr	r1, [r6, #0]
 8013fe4:	4605      	mov	r5, r0
 8013fe6:	b911      	cbnz	r1, 8013fee <sbrk_aligned+0x12>
 8013fe8:	f000 f88c 	bl	8014104 <_sbrk_r>
 8013fec:	6030      	str	r0, [r6, #0]
 8013fee:	4621      	mov	r1, r4
 8013ff0:	4628      	mov	r0, r5
 8013ff2:	f000 f887 	bl	8014104 <_sbrk_r>
 8013ff6:	1c43      	adds	r3, r0, #1
 8013ff8:	d00a      	beq.n	8014010 <sbrk_aligned+0x34>
 8013ffa:	1cc4      	adds	r4, r0, #3
 8013ffc:	f024 0403 	bic.w	r4, r4, #3
 8014000:	42a0      	cmp	r0, r4
 8014002:	d007      	beq.n	8014014 <sbrk_aligned+0x38>
 8014004:	1a21      	subs	r1, r4, r0
 8014006:	4628      	mov	r0, r5
 8014008:	f000 f87c 	bl	8014104 <_sbrk_r>
 801400c:	3001      	adds	r0, #1
 801400e:	d101      	bne.n	8014014 <sbrk_aligned+0x38>
 8014010:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014014:	4620      	mov	r0, r4
 8014016:	bd70      	pop	{r4, r5, r6, pc}
 8014018:	24001754 	.word	0x24001754

0801401c <_malloc_r>:
 801401c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014020:	1ccd      	adds	r5, r1, #3
 8014022:	f025 0503 	bic.w	r5, r5, #3
 8014026:	3508      	adds	r5, #8
 8014028:	2d0c      	cmp	r5, #12
 801402a:	bf38      	it	cc
 801402c:	250c      	movcc	r5, #12
 801402e:	2d00      	cmp	r5, #0
 8014030:	4607      	mov	r7, r0
 8014032:	db01      	blt.n	8014038 <_malloc_r+0x1c>
 8014034:	42a9      	cmp	r1, r5
 8014036:	d905      	bls.n	8014044 <_malloc_r+0x28>
 8014038:	230c      	movs	r3, #12
 801403a:	603b      	str	r3, [r7, #0]
 801403c:	2600      	movs	r6, #0
 801403e:	4630      	mov	r0, r6
 8014040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014044:	4e2e      	ldr	r6, [pc, #184]	; (8014100 <_malloc_r+0xe4>)
 8014046:	f000 f8af 	bl	80141a8 <__malloc_lock>
 801404a:	6833      	ldr	r3, [r6, #0]
 801404c:	461c      	mov	r4, r3
 801404e:	bb34      	cbnz	r4, 801409e <_malloc_r+0x82>
 8014050:	4629      	mov	r1, r5
 8014052:	4638      	mov	r0, r7
 8014054:	f7ff ffc2 	bl	8013fdc <sbrk_aligned>
 8014058:	1c43      	adds	r3, r0, #1
 801405a:	4604      	mov	r4, r0
 801405c:	d14d      	bne.n	80140fa <_malloc_r+0xde>
 801405e:	6834      	ldr	r4, [r6, #0]
 8014060:	4626      	mov	r6, r4
 8014062:	2e00      	cmp	r6, #0
 8014064:	d140      	bne.n	80140e8 <_malloc_r+0xcc>
 8014066:	6823      	ldr	r3, [r4, #0]
 8014068:	4631      	mov	r1, r6
 801406a:	4638      	mov	r0, r7
 801406c:	eb04 0803 	add.w	r8, r4, r3
 8014070:	f000 f848 	bl	8014104 <_sbrk_r>
 8014074:	4580      	cmp	r8, r0
 8014076:	d13a      	bne.n	80140ee <_malloc_r+0xd2>
 8014078:	6821      	ldr	r1, [r4, #0]
 801407a:	3503      	adds	r5, #3
 801407c:	1a6d      	subs	r5, r5, r1
 801407e:	f025 0503 	bic.w	r5, r5, #3
 8014082:	3508      	adds	r5, #8
 8014084:	2d0c      	cmp	r5, #12
 8014086:	bf38      	it	cc
 8014088:	250c      	movcc	r5, #12
 801408a:	4629      	mov	r1, r5
 801408c:	4638      	mov	r0, r7
 801408e:	f7ff ffa5 	bl	8013fdc <sbrk_aligned>
 8014092:	3001      	adds	r0, #1
 8014094:	d02b      	beq.n	80140ee <_malloc_r+0xd2>
 8014096:	6823      	ldr	r3, [r4, #0]
 8014098:	442b      	add	r3, r5
 801409a:	6023      	str	r3, [r4, #0]
 801409c:	e00e      	b.n	80140bc <_malloc_r+0xa0>
 801409e:	6822      	ldr	r2, [r4, #0]
 80140a0:	1b52      	subs	r2, r2, r5
 80140a2:	d41e      	bmi.n	80140e2 <_malloc_r+0xc6>
 80140a4:	2a0b      	cmp	r2, #11
 80140a6:	d916      	bls.n	80140d6 <_malloc_r+0xba>
 80140a8:	1961      	adds	r1, r4, r5
 80140aa:	42a3      	cmp	r3, r4
 80140ac:	6025      	str	r5, [r4, #0]
 80140ae:	bf18      	it	ne
 80140b0:	6059      	strne	r1, [r3, #4]
 80140b2:	6863      	ldr	r3, [r4, #4]
 80140b4:	bf08      	it	eq
 80140b6:	6031      	streq	r1, [r6, #0]
 80140b8:	5162      	str	r2, [r4, r5]
 80140ba:	604b      	str	r3, [r1, #4]
 80140bc:	4638      	mov	r0, r7
 80140be:	f104 060b 	add.w	r6, r4, #11
 80140c2:	f000 f877 	bl	80141b4 <__malloc_unlock>
 80140c6:	f026 0607 	bic.w	r6, r6, #7
 80140ca:	1d23      	adds	r3, r4, #4
 80140cc:	1af2      	subs	r2, r6, r3
 80140ce:	d0b6      	beq.n	801403e <_malloc_r+0x22>
 80140d0:	1b9b      	subs	r3, r3, r6
 80140d2:	50a3      	str	r3, [r4, r2]
 80140d4:	e7b3      	b.n	801403e <_malloc_r+0x22>
 80140d6:	6862      	ldr	r2, [r4, #4]
 80140d8:	42a3      	cmp	r3, r4
 80140da:	bf0c      	ite	eq
 80140dc:	6032      	streq	r2, [r6, #0]
 80140de:	605a      	strne	r2, [r3, #4]
 80140e0:	e7ec      	b.n	80140bc <_malloc_r+0xa0>
 80140e2:	4623      	mov	r3, r4
 80140e4:	6864      	ldr	r4, [r4, #4]
 80140e6:	e7b2      	b.n	801404e <_malloc_r+0x32>
 80140e8:	4634      	mov	r4, r6
 80140ea:	6876      	ldr	r6, [r6, #4]
 80140ec:	e7b9      	b.n	8014062 <_malloc_r+0x46>
 80140ee:	230c      	movs	r3, #12
 80140f0:	603b      	str	r3, [r7, #0]
 80140f2:	4638      	mov	r0, r7
 80140f4:	f000 f85e 	bl	80141b4 <__malloc_unlock>
 80140f8:	e7a1      	b.n	801403e <_malloc_r+0x22>
 80140fa:	6025      	str	r5, [r4, #0]
 80140fc:	e7de      	b.n	80140bc <_malloc_r+0xa0>
 80140fe:	bf00      	nop
 8014100:	24001750 	.word	0x24001750

08014104 <_sbrk_r>:
 8014104:	b538      	push	{r3, r4, r5, lr}
 8014106:	4d06      	ldr	r5, [pc, #24]	; (8014120 <_sbrk_r+0x1c>)
 8014108:	2300      	movs	r3, #0
 801410a:	4604      	mov	r4, r0
 801410c:	4608      	mov	r0, r1
 801410e:	602b      	str	r3, [r5, #0]
 8014110:	f7f1 f832 	bl	8005178 <_sbrk>
 8014114:	1c43      	adds	r3, r0, #1
 8014116:	d102      	bne.n	801411e <_sbrk_r+0x1a>
 8014118:	682b      	ldr	r3, [r5, #0]
 801411a:	b103      	cbz	r3, 801411e <_sbrk_r+0x1a>
 801411c:	6023      	str	r3, [r4, #0]
 801411e:	bd38      	pop	{r3, r4, r5, pc}
 8014120:	24001758 	.word	0x24001758

08014124 <__assert_func>:
 8014124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014126:	4614      	mov	r4, r2
 8014128:	461a      	mov	r2, r3
 801412a:	4b09      	ldr	r3, [pc, #36]	; (8014150 <__assert_func+0x2c>)
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	4605      	mov	r5, r0
 8014130:	68d8      	ldr	r0, [r3, #12]
 8014132:	b14c      	cbz	r4, 8014148 <__assert_func+0x24>
 8014134:	4b07      	ldr	r3, [pc, #28]	; (8014154 <__assert_func+0x30>)
 8014136:	9100      	str	r1, [sp, #0]
 8014138:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801413c:	4906      	ldr	r1, [pc, #24]	; (8014158 <__assert_func+0x34>)
 801413e:	462b      	mov	r3, r5
 8014140:	f000 f80e 	bl	8014160 <fiprintf>
 8014144:	f000 fa64 	bl	8014610 <abort>
 8014148:	4b04      	ldr	r3, [pc, #16]	; (801415c <__assert_func+0x38>)
 801414a:	461c      	mov	r4, r3
 801414c:	e7f3      	b.n	8014136 <__assert_func+0x12>
 801414e:	bf00      	nop
 8014150:	24000248 	.word	0x24000248
 8014154:	080169ac 	.word	0x080169ac
 8014158:	080169b9 	.word	0x080169b9
 801415c:	080169e7 	.word	0x080169e7

08014160 <fiprintf>:
 8014160:	b40e      	push	{r1, r2, r3}
 8014162:	b503      	push	{r0, r1, lr}
 8014164:	4601      	mov	r1, r0
 8014166:	ab03      	add	r3, sp, #12
 8014168:	4805      	ldr	r0, [pc, #20]	; (8014180 <fiprintf+0x20>)
 801416a:	f853 2b04 	ldr.w	r2, [r3], #4
 801416e:	6800      	ldr	r0, [r0, #0]
 8014170:	9301      	str	r3, [sp, #4]
 8014172:	f000 f84f 	bl	8014214 <_vfiprintf_r>
 8014176:	b002      	add	sp, #8
 8014178:	f85d eb04 	ldr.w	lr, [sp], #4
 801417c:	b003      	add	sp, #12
 801417e:	4770      	bx	lr
 8014180:	24000248 	.word	0x24000248

08014184 <__ascii_mbtowc>:
 8014184:	b082      	sub	sp, #8
 8014186:	b901      	cbnz	r1, 801418a <__ascii_mbtowc+0x6>
 8014188:	a901      	add	r1, sp, #4
 801418a:	b142      	cbz	r2, 801419e <__ascii_mbtowc+0x1a>
 801418c:	b14b      	cbz	r3, 80141a2 <__ascii_mbtowc+0x1e>
 801418e:	7813      	ldrb	r3, [r2, #0]
 8014190:	600b      	str	r3, [r1, #0]
 8014192:	7812      	ldrb	r2, [r2, #0]
 8014194:	1e10      	subs	r0, r2, #0
 8014196:	bf18      	it	ne
 8014198:	2001      	movne	r0, #1
 801419a:	b002      	add	sp, #8
 801419c:	4770      	bx	lr
 801419e:	4610      	mov	r0, r2
 80141a0:	e7fb      	b.n	801419a <__ascii_mbtowc+0x16>
 80141a2:	f06f 0001 	mvn.w	r0, #1
 80141a6:	e7f8      	b.n	801419a <__ascii_mbtowc+0x16>

080141a8 <__malloc_lock>:
 80141a8:	4801      	ldr	r0, [pc, #4]	; (80141b0 <__malloc_lock+0x8>)
 80141aa:	f000 bbf1 	b.w	8014990 <__retarget_lock_acquire_recursive>
 80141ae:	bf00      	nop
 80141b0:	2400175c 	.word	0x2400175c

080141b4 <__malloc_unlock>:
 80141b4:	4801      	ldr	r0, [pc, #4]	; (80141bc <__malloc_unlock+0x8>)
 80141b6:	f000 bbec 	b.w	8014992 <__retarget_lock_release_recursive>
 80141ba:	bf00      	nop
 80141bc:	2400175c 	.word	0x2400175c

080141c0 <__sfputc_r>:
 80141c0:	6893      	ldr	r3, [r2, #8]
 80141c2:	3b01      	subs	r3, #1
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	b410      	push	{r4}
 80141c8:	6093      	str	r3, [r2, #8]
 80141ca:	da08      	bge.n	80141de <__sfputc_r+0x1e>
 80141cc:	6994      	ldr	r4, [r2, #24]
 80141ce:	42a3      	cmp	r3, r4
 80141d0:	db01      	blt.n	80141d6 <__sfputc_r+0x16>
 80141d2:	290a      	cmp	r1, #10
 80141d4:	d103      	bne.n	80141de <__sfputc_r+0x1e>
 80141d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141da:	f000 b94b 	b.w	8014474 <__swbuf_r>
 80141de:	6813      	ldr	r3, [r2, #0]
 80141e0:	1c58      	adds	r0, r3, #1
 80141e2:	6010      	str	r0, [r2, #0]
 80141e4:	7019      	strb	r1, [r3, #0]
 80141e6:	4608      	mov	r0, r1
 80141e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80141ec:	4770      	bx	lr

080141ee <__sfputs_r>:
 80141ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141f0:	4606      	mov	r6, r0
 80141f2:	460f      	mov	r7, r1
 80141f4:	4614      	mov	r4, r2
 80141f6:	18d5      	adds	r5, r2, r3
 80141f8:	42ac      	cmp	r4, r5
 80141fa:	d101      	bne.n	8014200 <__sfputs_r+0x12>
 80141fc:	2000      	movs	r0, #0
 80141fe:	e007      	b.n	8014210 <__sfputs_r+0x22>
 8014200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014204:	463a      	mov	r2, r7
 8014206:	4630      	mov	r0, r6
 8014208:	f7ff ffda 	bl	80141c0 <__sfputc_r>
 801420c:	1c43      	adds	r3, r0, #1
 801420e:	d1f3      	bne.n	80141f8 <__sfputs_r+0xa>
 8014210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014214 <_vfiprintf_r>:
 8014214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014218:	460d      	mov	r5, r1
 801421a:	b09d      	sub	sp, #116	; 0x74
 801421c:	4614      	mov	r4, r2
 801421e:	4698      	mov	r8, r3
 8014220:	4606      	mov	r6, r0
 8014222:	b118      	cbz	r0, 801422c <_vfiprintf_r+0x18>
 8014224:	6983      	ldr	r3, [r0, #24]
 8014226:	b90b      	cbnz	r3, 801422c <_vfiprintf_r+0x18>
 8014228:	f000 fb14 	bl	8014854 <__sinit>
 801422c:	4b89      	ldr	r3, [pc, #548]	; (8014454 <_vfiprintf_r+0x240>)
 801422e:	429d      	cmp	r5, r3
 8014230:	d11b      	bne.n	801426a <_vfiprintf_r+0x56>
 8014232:	6875      	ldr	r5, [r6, #4]
 8014234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014236:	07d9      	lsls	r1, r3, #31
 8014238:	d405      	bmi.n	8014246 <_vfiprintf_r+0x32>
 801423a:	89ab      	ldrh	r3, [r5, #12]
 801423c:	059a      	lsls	r2, r3, #22
 801423e:	d402      	bmi.n	8014246 <_vfiprintf_r+0x32>
 8014240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014242:	f000 fba5 	bl	8014990 <__retarget_lock_acquire_recursive>
 8014246:	89ab      	ldrh	r3, [r5, #12]
 8014248:	071b      	lsls	r3, r3, #28
 801424a:	d501      	bpl.n	8014250 <_vfiprintf_r+0x3c>
 801424c:	692b      	ldr	r3, [r5, #16]
 801424e:	b9eb      	cbnz	r3, 801428c <_vfiprintf_r+0x78>
 8014250:	4629      	mov	r1, r5
 8014252:	4630      	mov	r0, r6
 8014254:	f000 f96e 	bl	8014534 <__swsetup_r>
 8014258:	b1c0      	cbz	r0, 801428c <_vfiprintf_r+0x78>
 801425a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801425c:	07dc      	lsls	r4, r3, #31
 801425e:	d50e      	bpl.n	801427e <_vfiprintf_r+0x6a>
 8014260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014264:	b01d      	add	sp, #116	; 0x74
 8014266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801426a:	4b7b      	ldr	r3, [pc, #492]	; (8014458 <_vfiprintf_r+0x244>)
 801426c:	429d      	cmp	r5, r3
 801426e:	d101      	bne.n	8014274 <_vfiprintf_r+0x60>
 8014270:	68b5      	ldr	r5, [r6, #8]
 8014272:	e7df      	b.n	8014234 <_vfiprintf_r+0x20>
 8014274:	4b79      	ldr	r3, [pc, #484]	; (801445c <_vfiprintf_r+0x248>)
 8014276:	429d      	cmp	r5, r3
 8014278:	bf08      	it	eq
 801427a:	68f5      	ldreq	r5, [r6, #12]
 801427c:	e7da      	b.n	8014234 <_vfiprintf_r+0x20>
 801427e:	89ab      	ldrh	r3, [r5, #12]
 8014280:	0598      	lsls	r0, r3, #22
 8014282:	d4ed      	bmi.n	8014260 <_vfiprintf_r+0x4c>
 8014284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014286:	f000 fb84 	bl	8014992 <__retarget_lock_release_recursive>
 801428a:	e7e9      	b.n	8014260 <_vfiprintf_r+0x4c>
 801428c:	2300      	movs	r3, #0
 801428e:	9309      	str	r3, [sp, #36]	; 0x24
 8014290:	2320      	movs	r3, #32
 8014292:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014296:	f8cd 800c 	str.w	r8, [sp, #12]
 801429a:	2330      	movs	r3, #48	; 0x30
 801429c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014460 <_vfiprintf_r+0x24c>
 80142a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80142a4:	f04f 0901 	mov.w	r9, #1
 80142a8:	4623      	mov	r3, r4
 80142aa:	469a      	mov	sl, r3
 80142ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80142b0:	b10a      	cbz	r2, 80142b6 <_vfiprintf_r+0xa2>
 80142b2:	2a25      	cmp	r2, #37	; 0x25
 80142b4:	d1f9      	bne.n	80142aa <_vfiprintf_r+0x96>
 80142b6:	ebba 0b04 	subs.w	fp, sl, r4
 80142ba:	d00b      	beq.n	80142d4 <_vfiprintf_r+0xc0>
 80142bc:	465b      	mov	r3, fp
 80142be:	4622      	mov	r2, r4
 80142c0:	4629      	mov	r1, r5
 80142c2:	4630      	mov	r0, r6
 80142c4:	f7ff ff93 	bl	80141ee <__sfputs_r>
 80142c8:	3001      	adds	r0, #1
 80142ca:	f000 80aa 	beq.w	8014422 <_vfiprintf_r+0x20e>
 80142ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142d0:	445a      	add	r2, fp
 80142d2:	9209      	str	r2, [sp, #36]	; 0x24
 80142d4:	f89a 3000 	ldrb.w	r3, [sl]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	f000 80a2 	beq.w	8014422 <_vfiprintf_r+0x20e>
 80142de:	2300      	movs	r3, #0
 80142e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80142e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80142e8:	f10a 0a01 	add.w	sl, sl, #1
 80142ec:	9304      	str	r3, [sp, #16]
 80142ee:	9307      	str	r3, [sp, #28]
 80142f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80142f4:	931a      	str	r3, [sp, #104]	; 0x68
 80142f6:	4654      	mov	r4, sl
 80142f8:	2205      	movs	r2, #5
 80142fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142fe:	4858      	ldr	r0, [pc, #352]	; (8014460 <_vfiprintf_r+0x24c>)
 8014300:	f7eb fff6 	bl	80002f0 <memchr>
 8014304:	9a04      	ldr	r2, [sp, #16]
 8014306:	b9d8      	cbnz	r0, 8014340 <_vfiprintf_r+0x12c>
 8014308:	06d1      	lsls	r1, r2, #27
 801430a:	bf44      	itt	mi
 801430c:	2320      	movmi	r3, #32
 801430e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014312:	0713      	lsls	r3, r2, #28
 8014314:	bf44      	itt	mi
 8014316:	232b      	movmi	r3, #43	; 0x2b
 8014318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801431c:	f89a 3000 	ldrb.w	r3, [sl]
 8014320:	2b2a      	cmp	r3, #42	; 0x2a
 8014322:	d015      	beq.n	8014350 <_vfiprintf_r+0x13c>
 8014324:	9a07      	ldr	r2, [sp, #28]
 8014326:	4654      	mov	r4, sl
 8014328:	2000      	movs	r0, #0
 801432a:	f04f 0c0a 	mov.w	ip, #10
 801432e:	4621      	mov	r1, r4
 8014330:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014334:	3b30      	subs	r3, #48	; 0x30
 8014336:	2b09      	cmp	r3, #9
 8014338:	d94e      	bls.n	80143d8 <_vfiprintf_r+0x1c4>
 801433a:	b1b0      	cbz	r0, 801436a <_vfiprintf_r+0x156>
 801433c:	9207      	str	r2, [sp, #28]
 801433e:	e014      	b.n	801436a <_vfiprintf_r+0x156>
 8014340:	eba0 0308 	sub.w	r3, r0, r8
 8014344:	fa09 f303 	lsl.w	r3, r9, r3
 8014348:	4313      	orrs	r3, r2
 801434a:	9304      	str	r3, [sp, #16]
 801434c:	46a2      	mov	sl, r4
 801434e:	e7d2      	b.n	80142f6 <_vfiprintf_r+0xe2>
 8014350:	9b03      	ldr	r3, [sp, #12]
 8014352:	1d19      	adds	r1, r3, #4
 8014354:	681b      	ldr	r3, [r3, #0]
 8014356:	9103      	str	r1, [sp, #12]
 8014358:	2b00      	cmp	r3, #0
 801435a:	bfbb      	ittet	lt
 801435c:	425b      	neglt	r3, r3
 801435e:	f042 0202 	orrlt.w	r2, r2, #2
 8014362:	9307      	strge	r3, [sp, #28]
 8014364:	9307      	strlt	r3, [sp, #28]
 8014366:	bfb8      	it	lt
 8014368:	9204      	strlt	r2, [sp, #16]
 801436a:	7823      	ldrb	r3, [r4, #0]
 801436c:	2b2e      	cmp	r3, #46	; 0x2e
 801436e:	d10c      	bne.n	801438a <_vfiprintf_r+0x176>
 8014370:	7863      	ldrb	r3, [r4, #1]
 8014372:	2b2a      	cmp	r3, #42	; 0x2a
 8014374:	d135      	bne.n	80143e2 <_vfiprintf_r+0x1ce>
 8014376:	9b03      	ldr	r3, [sp, #12]
 8014378:	1d1a      	adds	r2, r3, #4
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	9203      	str	r2, [sp, #12]
 801437e:	2b00      	cmp	r3, #0
 8014380:	bfb8      	it	lt
 8014382:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014386:	3402      	adds	r4, #2
 8014388:	9305      	str	r3, [sp, #20]
 801438a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014470 <_vfiprintf_r+0x25c>
 801438e:	7821      	ldrb	r1, [r4, #0]
 8014390:	2203      	movs	r2, #3
 8014392:	4650      	mov	r0, sl
 8014394:	f7eb ffac 	bl	80002f0 <memchr>
 8014398:	b140      	cbz	r0, 80143ac <_vfiprintf_r+0x198>
 801439a:	2340      	movs	r3, #64	; 0x40
 801439c:	eba0 000a 	sub.w	r0, r0, sl
 80143a0:	fa03 f000 	lsl.w	r0, r3, r0
 80143a4:	9b04      	ldr	r3, [sp, #16]
 80143a6:	4303      	orrs	r3, r0
 80143a8:	3401      	adds	r4, #1
 80143aa:	9304      	str	r3, [sp, #16]
 80143ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143b0:	482c      	ldr	r0, [pc, #176]	; (8014464 <_vfiprintf_r+0x250>)
 80143b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80143b6:	2206      	movs	r2, #6
 80143b8:	f7eb ff9a 	bl	80002f0 <memchr>
 80143bc:	2800      	cmp	r0, #0
 80143be:	d03f      	beq.n	8014440 <_vfiprintf_r+0x22c>
 80143c0:	4b29      	ldr	r3, [pc, #164]	; (8014468 <_vfiprintf_r+0x254>)
 80143c2:	bb1b      	cbnz	r3, 801440c <_vfiprintf_r+0x1f8>
 80143c4:	9b03      	ldr	r3, [sp, #12]
 80143c6:	3307      	adds	r3, #7
 80143c8:	f023 0307 	bic.w	r3, r3, #7
 80143cc:	3308      	adds	r3, #8
 80143ce:	9303      	str	r3, [sp, #12]
 80143d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143d2:	443b      	add	r3, r7
 80143d4:	9309      	str	r3, [sp, #36]	; 0x24
 80143d6:	e767      	b.n	80142a8 <_vfiprintf_r+0x94>
 80143d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80143dc:	460c      	mov	r4, r1
 80143de:	2001      	movs	r0, #1
 80143e0:	e7a5      	b.n	801432e <_vfiprintf_r+0x11a>
 80143e2:	2300      	movs	r3, #0
 80143e4:	3401      	adds	r4, #1
 80143e6:	9305      	str	r3, [sp, #20]
 80143e8:	4619      	mov	r1, r3
 80143ea:	f04f 0c0a 	mov.w	ip, #10
 80143ee:	4620      	mov	r0, r4
 80143f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80143f4:	3a30      	subs	r2, #48	; 0x30
 80143f6:	2a09      	cmp	r2, #9
 80143f8:	d903      	bls.n	8014402 <_vfiprintf_r+0x1ee>
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d0c5      	beq.n	801438a <_vfiprintf_r+0x176>
 80143fe:	9105      	str	r1, [sp, #20]
 8014400:	e7c3      	b.n	801438a <_vfiprintf_r+0x176>
 8014402:	fb0c 2101 	mla	r1, ip, r1, r2
 8014406:	4604      	mov	r4, r0
 8014408:	2301      	movs	r3, #1
 801440a:	e7f0      	b.n	80143ee <_vfiprintf_r+0x1da>
 801440c:	ab03      	add	r3, sp, #12
 801440e:	9300      	str	r3, [sp, #0]
 8014410:	462a      	mov	r2, r5
 8014412:	4b16      	ldr	r3, [pc, #88]	; (801446c <_vfiprintf_r+0x258>)
 8014414:	a904      	add	r1, sp, #16
 8014416:	4630      	mov	r0, r6
 8014418:	f7fe f832 	bl	8012480 <_printf_float>
 801441c:	4607      	mov	r7, r0
 801441e:	1c78      	adds	r0, r7, #1
 8014420:	d1d6      	bne.n	80143d0 <_vfiprintf_r+0x1bc>
 8014422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014424:	07d9      	lsls	r1, r3, #31
 8014426:	d405      	bmi.n	8014434 <_vfiprintf_r+0x220>
 8014428:	89ab      	ldrh	r3, [r5, #12]
 801442a:	059a      	lsls	r2, r3, #22
 801442c:	d402      	bmi.n	8014434 <_vfiprintf_r+0x220>
 801442e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014430:	f000 faaf 	bl	8014992 <__retarget_lock_release_recursive>
 8014434:	89ab      	ldrh	r3, [r5, #12]
 8014436:	065b      	lsls	r3, r3, #25
 8014438:	f53f af12 	bmi.w	8014260 <_vfiprintf_r+0x4c>
 801443c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801443e:	e711      	b.n	8014264 <_vfiprintf_r+0x50>
 8014440:	ab03      	add	r3, sp, #12
 8014442:	9300      	str	r3, [sp, #0]
 8014444:	462a      	mov	r2, r5
 8014446:	4b09      	ldr	r3, [pc, #36]	; (801446c <_vfiprintf_r+0x258>)
 8014448:	a904      	add	r1, sp, #16
 801444a:	4630      	mov	r0, r6
 801444c:	f7fe faa4 	bl	8012998 <_printf_i>
 8014450:	e7e4      	b.n	801441c <_vfiprintf_r+0x208>
 8014452:	bf00      	nop
 8014454:	08016b24 	.word	0x08016b24
 8014458:	08016b44 	.word	0x08016b44
 801445c:	08016b04 	.word	0x08016b04
 8014460:	080169f2 	.word	0x080169f2
 8014464:	080169fc 	.word	0x080169fc
 8014468:	08012481 	.word	0x08012481
 801446c:	080141ef 	.word	0x080141ef
 8014470:	080169f8 	.word	0x080169f8

08014474 <__swbuf_r>:
 8014474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014476:	460e      	mov	r6, r1
 8014478:	4614      	mov	r4, r2
 801447a:	4605      	mov	r5, r0
 801447c:	b118      	cbz	r0, 8014486 <__swbuf_r+0x12>
 801447e:	6983      	ldr	r3, [r0, #24]
 8014480:	b90b      	cbnz	r3, 8014486 <__swbuf_r+0x12>
 8014482:	f000 f9e7 	bl	8014854 <__sinit>
 8014486:	4b21      	ldr	r3, [pc, #132]	; (801450c <__swbuf_r+0x98>)
 8014488:	429c      	cmp	r4, r3
 801448a:	d12b      	bne.n	80144e4 <__swbuf_r+0x70>
 801448c:	686c      	ldr	r4, [r5, #4]
 801448e:	69a3      	ldr	r3, [r4, #24]
 8014490:	60a3      	str	r3, [r4, #8]
 8014492:	89a3      	ldrh	r3, [r4, #12]
 8014494:	071a      	lsls	r2, r3, #28
 8014496:	d52f      	bpl.n	80144f8 <__swbuf_r+0x84>
 8014498:	6923      	ldr	r3, [r4, #16]
 801449a:	b36b      	cbz	r3, 80144f8 <__swbuf_r+0x84>
 801449c:	6923      	ldr	r3, [r4, #16]
 801449e:	6820      	ldr	r0, [r4, #0]
 80144a0:	1ac0      	subs	r0, r0, r3
 80144a2:	6963      	ldr	r3, [r4, #20]
 80144a4:	b2f6      	uxtb	r6, r6
 80144a6:	4283      	cmp	r3, r0
 80144a8:	4637      	mov	r7, r6
 80144aa:	dc04      	bgt.n	80144b6 <__swbuf_r+0x42>
 80144ac:	4621      	mov	r1, r4
 80144ae:	4628      	mov	r0, r5
 80144b0:	f000 f93c 	bl	801472c <_fflush_r>
 80144b4:	bb30      	cbnz	r0, 8014504 <__swbuf_r+0x90>
 80144b6:	68a3      	ldr	r3, [r4, #8]
 80144b8:	3b01      	subs	r3, #1
 80144ba:	60a3      	str	r3, [r4, #8]
 80144bc:	6823      	ldr	r3, [r4, #0]
 80144be:	1c5a      	adds	r2, r3, #1
 80144c0:	6022      	str	r2, [r4, #0]
 80144c2:	701e      	strb	r6, [r3, #0]
 80144c4:	6963      	ldr	r3, [r4, #20]
 80144c6:	3001      	adds	r0, #1
 80144c8:	4283      	cmp	r3, r0
 80144ca:	d004      	beq.n	80144d6 <__swbuf_r+0x62>
 80144cc:	89a3      	ldrh	r3, [r4, #12]
 80144ce:	07db      	lsls	r3, r3, #31
 80144d0:	d506      	bpl.n	80144e0 <__swbuf_r+0x6c>
 80144d2:	2e0a      	cmp	r6, #10
 80144d4:	d104      	bne.n	80144e0 <__swbuf_r+0x6c>
 80144d6:	4621      	mov	r1, r4
 80144d8:	4628      	mov	r0, r5
 80144da:	f000 f927 	bl	801472c <_fflush_r>
 80144de:	b988      	cbnz	r0, 8014504 <__swbuf_r+0x90>
 80144e0:	4638      	mov	r0, r7
 80144e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144e4:	4b0a      	ldr	r3, [pc, #40]	; (8014510 <__swbuf_r+0x9c>)
 80144e6:	429c      	cmp	r4, r3
 80144e8:	d101      	bne.n	80144ee <__swbuf_r+0x7a>
 80144ea:	68ac      	ldr	r4, [r5, #8]
 80144ec:	e7cf      	b.n	801448e <__swbuf_r+0x1a>
 80144ee:	4b09      	ldr	r3, [pc, #36]	; (8014514 <__swbuf_r+0xa0>)
 80144f0:	429c      	cmp	r4, r3
 80144f2:	bf08      	it	eq
 80144f4:	68ec      	ldreq	r4, [r5, #12]
 80144f6:	e7ca      	b.n	801448e <__swbuf_r+0x1a>
 80144f8:	4621      	mov	r1, r4
 80144fa:	4628      	mov	r0, r5
 80144fc:	f000 f81a 	bl	8014534 <__swsetup_r>
 8014500:	2800      	cmp	r0, #0
 8014502:	d0cb      	beq.n	801449c <__swbuf_r+0x28>
 8014504:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014508:	e7ea      	b.n	80144e0 <__swbuf_r+0x6c>
 801450a:	bf00      	nop
 801450c:	08016b24 	.word	0x08016b24
 8014510:	08016b44 	.word	0x08016b44
 8014514:	08016b04 	.word	0x08016b04

08014518 <__ascii_wctomb>:
 8014518:	b149      	cbz	r1, 801452e <__ascii_wctomb+0x16>
 801451a:	2aff      	cmp	r2, #255	; 0xff
 801451c:	bf85      	ittet	hi
 801451e:	238a      	movhi	r3, #138	; 0x8a
 8014520:	6003      	strhi	r3, [r0, #0]
 8014522:	700a      	strbls	r2, [r1, #0]
 8014524:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014528:	bf98      	it	ls
 801452a:	2001      	movls	r0, #1
 801452c:	4770      	bx	lr
 801452e:	4608      	mov	r0, r1
 8014530:	4770      	bx	lr
	...

08014534 <__swsetup_r>:
 8014534:	4b32      	ldr	r3, [pc, #200]	; (8014600 <__swsetup_r+0xcc>)
 8014536:	b570      	push	{r4, r5, r6, lr}
 8014538:	681d      	ldr	r5, [r3, #0]
 801453a:	4606      	mov	r6, r0
 801453c:	460c      	mov	r4, r1
 801453e:	b125      	cbz	r5, 801454a <__swsetup_r+0x16>
 8014540:	69ab      	ldr	r3, [r5, #24]
 8014542:	b913      	cbnz	r3, 801454a <__swsetup_r+0x16>
 8014544:	4628      	mov	r0, r5
 8014546:	f000 f985 	bl	8014854 <__sinit>
 801454a:	4b2e      	ldr	r3, [pc, #184]	; (8014604 <__swsetup_r+0xd0>)
 801454c:	429c      	cmp	r4, r3
 801454e:	d10f      	bne.n	8014570 <__swsetup_r+0x3c>
 8014550:	686c      	ldr	r4, [r5, #4]
 8014552:	89a3      	ldrh	r3, [r4, #12]
 8014554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014558:	0719      	lsls	r1, r3, #28
 801455a:	d42c      	bmi.n	80145b6 <__swsetup_r+0x82>
 801455c:	06dd      	lsls	r5, r3, #27
 801455e:	d411      	bmi.n	8014584 <__swsetup_r+0x50>
 8014560:	2309      	movs	r3, #9
 8014562:	6033      	str	r3, [r6, #0]
 8014564:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014568:	81a3      	strh	r3, [r4, #12]
 801456a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801456e:	e03e      	b.n	80145ee <__swsetup_r+0xba>
 8014570:	4b25      	ldr	r3, [pc, #148]	; (8014608 <__swsetup_r+0xd4>)
 8014572:	429c      	cmp	r4, r3
 8014574:	d101      	bne.n	801457a <__swsetup_r+0x46>
 8014576:	68ac      	ldr	r4, [r5, #8]
 8014578:	e7eb      	b.n	8014552 <__swsetup_r+0x1e>
 801457a:	4b24      	ldr	r3, [pc, #144]	; (801460c <__swsetup_r+0xd8>)
 801457c:	429c      	cmp	r4, r3
 801457e:	bf08      	it	eq
 8014580:	68ec      	ldreq	r4, [r5, #12]
 8014582:	e7e6      	b.n	8014552 <__swsetup_r+0x1e>
 8014584:	0758      	lsls	r0, r3, #29
 8014586:	d512      	bpl.n	80145ae <__swsetup_r+0x7a>
 8014588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801458a:	b141      	cbz	r1, 801459e <__swsetup_r+0x6a>
 801458c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014590:	4299      	cmp	r1, r3
 8014592:	d002      	beq.n	801459a <__swsetup_r+0x66>
 8014594:	4630      	mov	r0, r6
 8014596:	f7ff fcd5 	bl	8013f44 <_free_r>
 801459a:	2300      	movs	r3, #0
 801459c:	6363      	str	r3, [r4, #52]	; 0x34
 801459e:	89a3      	ldrh	r3, [r4, #12]
 80145a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80145a4:	81a3      	strh	r3, [r4, #12]
 80145a6:	2300      	movs	r3, #0
 80145a8:	6063      	str	r3, [r4, #4]
 80145aa:	6923      	ldr	r3, [r4, #16]
 80145ac:	6023      	str	r3, [r4, #0]
 80145ae:	89a3      	ldrh	r3, [r4, #12]
 80145b0:	f043 0308 	orr.w	r3, r3, #8
 80145b4:	81a3      	strh	r3, [r4, #12]
 80145b6:	6923      	ldr	r3, [r4, #16]
 80145b8:	b94b      	cbnz	r3, 80145ce <__swsetup_r+0x9a>
 80145ba:	89a3      	ldrh	r3, [r4, #12]
 80145bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80145c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80145c4:	d003      	beq.n	80145ce <__swsetup_r+0x9a>
 80145c6:	4621      	mov	r1, r4
 80145c8:	4630      	mov	r0, r6
 80145ca:	f000 fa09 	bl	80149e0 <__smakebuf_r>
 80145ce:	89a0      	ldrh	r0, [r4, #12]
 80145d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80145d4:	f010 0301 	ands.w	r3, r0, #1
 80145d8:	d00a      	beq.n	80145f0 <__swsetup_r+0xbc>
 80145da:	2300      	movs	r3, #0
 80145dc:	60a3      	str	r3, [r4, #8]
 80145de:	6963      	ldr	r3, [r4, #20]
 80145e0:	425b      	negs	r3, r3
 80145e2:	61a3      	str	r3, [r4, #24]
 80145e4:	6923      	ldr	r3, [r4, #16]
 80145e6:	b943      	cbnz	r3, 80145fa <__swsetup_r+0xc6>
 80145e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80145ec:	d1ba      	bne.n	8014564 <__swsetup_r+0x30>
 80145ee:	bd70      	pop	{r4, r5, r6, pc}
 80145f0:	0781      	lsls	r1, r0, #30
 80145f2:	bf58      	it	pl
 80145f4:	6963      	ldrpl	r3, [r4, #20]
 80145f6:	60a3      	str	r3, [r4, #8]
 80145f8:	e7f4      	b.n	80145e4 <__swsetup_r+0xb0>
 80145fa:	2000      	movs	r0, #0
 80145fc:	e7f7      	b.n	80145ee <__swsetup_r+0xba>
 80145fe:	bf00      	nop
 8014600:	24000248 	.word	0x24000248
 8014604:	08016b24 	.word	0x08016b24
 8014608:	08016b44 	.word	0x08016b44
 801460c:	08016b04 	.word	0x08016b04

08014610 <abort>:
 8014610:	b508      	push	{r3, lr}
 8014612:	2006      	movs	r0, #6
 8014614:	f000 fa4c 	bl	8014ab0 <raise>
 8014618:	2001      	movs	r0, #1
 801461a:	f7f0 fd35 	bl	8005088 <_exit>
	...

08014620 <__sflush_r>:
 8014620:	898a      	ldrh	r2, [r1, #12]
 8014622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014626:	4605      	mov	r5, r0
 8014628:	0710      	lsls	r0, r2, #28
 801462a:	460c      	mov	r4, r1
 801462c:	d458      	bmi.n	80146e0 <__sflush_r+0xc0>
 801462e:	684b      	ldr	r3, [r1, #4]
 8014630:	2b00      	cmp	r3, #0
 8014632:	dc05      	bgt.n	8014640 <__sflush_r+0x20>
 8014634:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014636:	2b00      	cmp	r3, #0
 8014638:	dc02      	bgt.n	8014640 <__sflush_r+0x20>
 801463a:	2000      	movs	r0, #0
 801463c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014642:	2e00      	cmp	r6, #0
 8014644:	d0f9      	beq.n	801463a <__sflush_r+0x1a>
 8014646:	2300      	movs	r3, #0
 8014648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801464c:	682f      	ldr	r7, [r5, #0]
 801464e:	602b      	str	r3, [r5, #0]
 8014650:	d032      	beq.n	80146b8 <__sflush_r+0x98>
 8014652:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014654:	89a3      	ldrh	r3, [r4, #12]
 8014656:	075a      	lsls	r2, r3, #29
 8014658:	d505      	bpl.n	8014666 <__sflush_r+0x46>
 801465a:	6863      	ldr	r3, [r4, #4]
 801465c:	1ac0      	subs	r0, r0, r3
 801465e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014660:	b10b      	cbz	r3, 8014666 <__sflush_r+0x46>
 8014662:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014664:	1ac0      	subs	r0, r0, r3
 8014666:	2300      	movs	r3, #0
 8014668:	4602      	mov	r2, r0
 801466a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801466c:	6a21      	ldr	r1, [r4, #32]
 801466e:	4628      	mov	r0, r5
 8014670:	47b0      	blx	r6
 8014672:	1c43      	adds	r3, r0, #1
 8014674:	89a3      	ldrh	r3, [r4, #12]
 8014676:	d106      	bne.n	8014686 <__sflush_r+0x66>
 8014678:	6829      	ldr	r1, [r5, #0]
 801467a:	291d      	cmp	r1, #29
 801467c:	d82c      	bhi.n	80146d8 <__sflush_r+0xb8>
 801467e:	4a2a      	ldr	r2, [pc, #168]	; (8014728 <__sflush_r+0x108>)
 8014680:	40ca      	lsrs	r2, r1
 8014682:	07d6      	lsls	r6, r2, #31
 8014684:	d528      	bpl.n	80146d8 <__sflush_r+0xb8>
 8014686:	2200      	movs	r2, #0
 8014688:	6062      	str	r2, [r4, #4]
 801468a:	04d9      	lsls	r1, r3, #19
 801468c:	6922      	ldr	r2, [r4, #16]
 801468e:	6022      	str	r2, [r4, #0]
 8014690:	d504      	bpl.n	801469c <__sflush_r+0x7c>
 8014692:	1c42      	adds	r2, r0, #1
 8014694:	d101      	bne.n	801469a <__sflush_r+0x7a>
 8014696:	682b      	ldr	r3, [r5, #0]
 8014698:	b903      	cbnz	r3, 801469c <__sflush_r+0x7c>
 801469a:	6560      	str	r0, [r4, #84]	; 0x54
 801469c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801469e:	602f      	str	r7, [r5, #0]
 80146a0:	2900      	cmp	r1, #0
 80146a2:	d0ca      	beq.n	801463a <__sflush_r+0x1a>
 80146a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146a8:	4299      	cmp	r1, r3
 80146aa:	d002      	beq.n	80146b2 <__sflush_r+0x92>
 80146ac:	4628      	mov	r0, r5
 80146ae:	f7ff fc49 	bl	8013f44 <_free_r>
 80146b2:	2000      	movs	r0, #0
 80146b4:	6360      	str	r0, [r4, #52]	; 0x34
 80146b6:	e7c1      	b.n	801463c <__sflush_r+0x1c>
 80146b8:	6a21      	ldr	r1, [r4, #32]
 80146ba:	2301      	movs	r3, #1
 80146bc:	4628      	mov	r0, r5
 80146be:	47b0      	blx	r6
 80146c0:	1c41      	adds	r1, r0, #1
 80146c2:	d1c7      	bne.n	8014654 <__sflush_r+0x34>
 80146c4:	682b      	ldr	r3, [r5, #0]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d0c4      	beq.n	8014654 <__sflush_r+0x34>
 80146ca:	2b1d      	cmp	r3, #29
 80146cc:	d001      	beq.n	80146d2 <__sflush_r+0xb2>
 80146ce:	2b16      	cmp	r3, #22
 80146d0:	d101      	bne.n	80146d6 <__sflush_r+0xb6>
 80146d2:	602f      	str	r7, [r5, #0]
 80146d4:	e7b1      	b.n	801463a <__sflush_r+0x1a>
 80146d6:	89a3      	ldrh	r3, [r4, #12]
 80146d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80146dc:	81a3      	strh	r3, [r4, #12]
 80146de:	e7ad      	b.n	801463c <__sflush_r+0x1c>
 80146e0:	690f      	ldr	r7, [r1, #16]
 80146e2:	2f00      	cmp	r7, #0
 80146e4:	d0a9      	beq.n	801463a <__sflush_r+0x1a>
 80146e6:	0793      	lsls	r3, r2, #30
 80146e8:	680e      	ldr	r6, [r1, #0]
 80146ea:	bf08      	it	eq
 80146ec:	694b      	ldreq	r3, [r1, #20]
 80146ee:	600f      	str	r7, [r1, #0]
 80146f0:	bf18      	it	ne
 80146f2:	2300      	movne	r3, #0
 80146f4:	eba6 0807 	sub.w	r8, r6, r7
 80146f8:	608b      	str	r3, [r1, #8]
 80146fa:	f1b8 0f00 	cmp.w	r8, #0
 80146fe:	dd9c      	ble.n	801463a <__sflush_r+0x1a>
 8014700:	6a21      	ldr	r1, [r4, #32]
 8014702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014704:	4643      	mov	r3, r8
 8014706:	463a      	mov	r2, r7
 8014708:	4628      	mov	r0, r5
 801470a:	47b0      	blx	r6
 801470c:	2800      	cmp	r0, #0
 801470e:	dc06      	bgt.n	801471e <__sflush_r+0xfe>
 8014710:	89a3      	ldrh	r3, [r4, #12]
 8014712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014716:	81a3      	strh	r3, [r4, #12]
 8014718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801471c:	e78e      	b.n	801463c <__sflush_r+0x1c>
 801471e:	4407      	add	r7, r0
 8014720:	eba8 0800 	sub.w	r8, r8, r0
 8014724:	e7e9      	b.n	80146fa <__sflush_r+0xda>
 8014726:	bf00      	nop
 8014728:	20400001 	.word	0x20400001

0801472c <_fflush_r>:
 801472c:	b538      	push	{r3, r4, r5, lr}
 801472e:	690b      	ldr	r3, [r1, #16]
 8014730:	4605      	mov	r5, r0
 8014732:	460c      	mov	r4, r1
 8014734:	b913      	cbnz	r3, 801473c <_fflush_r+0x10>
 8014736:	2500      	movs	r5, #0
 8014738:	4628      	mov	r0, r5
 801473a:	bd38      	pop	{r3, r4, r5, pc}
 801473c:	b118      	cbz	r0, 8014746 <_fflush_r+0x1a>
 801473e:	6983      	ldr	r3, [r0, #24]
 8014740:	b90b      	cbnz	r3, 8014746 <_fflush_r+0x1a>
 8014742:	f000 f887 	bl	8014854 <__sinit>
 8014746:	4b14      	ldr	r3, [pc, #80]	; (8014798 <_fflush_r+0x6c>)
 8014748:	429c      	cmp	r4, r3
 801474a:	d11b      	bne.n	8014784 <_fflush_r+0x58>
 801474c:	686c      	ldr	r4, [r5, #4]
 801474e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d0ef      	beq.n	8014736 <_fflush_r+0xa>
 8014756:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014758:	07d0      	lsls	r0, r2, #31
 801475a:	d404      	bmi.n	8014766 <_fflush_r+0x3a>
 801475c:	0599      	lsls	r1, r3, #22
 801475e:	d402      	bmi.n	8014766 <_fflush_r+0x3a>
 8014760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014762:	f000 f915 	bl	8014990 <__retarget_lock_acquire_recursive>
 8014766:	4628      	mov	r0, r5
 8014768:	4621      	mov	r1, r4
 801476a:	f7ff ff59 	bl	8014620 <__sflush_r>
 801476e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014770:	07da      	lsls	r2, r3, #31
 8014772:	4605      	mov	r5, r0
 8014774:	d4e0      	bmi.n	8014738 <_fflush_r+0xc>
 8014776:	89a3      	ldrh	r3, [r4, #12]
 8014778:	059b      	lsls	r3, r3, #22
 801477a:	d4dd      	bmi.n	8014738 <_fflush_r+0xc>
 801477c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801477e:	f000 f908 	bl	8014992 <__retarget_lock_release_recursive>
 8014782:	e7d9      	b.n	8014738 <_fflush_r+0xc>
 8014784:	4b05      	ldr	r3, [pc, #20]	; (801479c <_fflush_r+0x70>)
 8014786:	429c      	cmp	r4, r3
 8014788:	d101      	bne.n	801478e <_fflush_r+0x62>
 801478a:	68ac      	ldr	r4, [r5, #8]
 801478c:	e7df      	b.n	801474e <_fflush_r+0x22>
 801478e:	4b04      	ldr	r3, [pc, #16]	; (80147a0 <_fflush_r+0x74>)
 8014790:	429c      	cmp	r4, r3
 8014792:	bf08      	it	eq
 8014794:	68ec      	ldreq	r4, [r5, #12]
 8014796:	e7da      	b.n	801474e <_fflush_r+0x22>
 8014798:	08016b24 	.word	0x08016b24
 801479c:	08016b44 	.word	0x08016b44
 80147a0:	08016b04 	.word	0x08016b04

080147a4 <std>:
 80147a4:	2300      	movs	r3, #0
 80147a6:	b510      	push	{r4, lr}
 80147a8:	4604      	mov	r4, r0
 80147aa:	e9c0 3300 	strd	r3, r3, [r0]
 80147ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80147b2:	6083      	str	r3, [r0, #8]
 80147b4:	8181      	strh	r1, [r0, #12]
 80147b6:	6643      	str	r3, [r0, #100]	; 0x64
 80147b8:	81c2      	strh	r2, [r0, #14]
 80147ba:	6183      	str	r3, [r0, #24]
 80147bc:	4619      	mov	r1, r3
 80147be:	2208      	movs	r2, #8
 80147c0:	305c      	adds	r0, #92	; 0x5c
 80147c2:	f7fd fdc5 	bl	8012350 <memset>
 80147c6:	4b05      	ldr	r3, [pc, #20]	; (80147dc <std+0x38>)
 80147c8:	6263      	str	r3, [r4, #36]	; 0x24
 80147ca:	4b05      	ldr	r3, [pc, #20]	; (80147e0 <std+0x3c>)
 80147cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80147ce:	4b05      	ldr	r3, [pc, #20]	; (80147e4 <std+0x40>)
 80147d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80147d2:	4b05      	ldr	r3, [pc, #20]	; (80147e8 <std+0x44>)
 80147d4:	6224      	str	r4, [r4, #32]
 80147d6:	6323      	str	r3, [r4, #48]	; 0x30
 80147d8:	bd10      	pop	{r4, pc}
 80147da:	bf00      	nop
 80147dc:	08014ae9 	.word	0x08014ae9
 80147e0:	08014b0b 	.word	0x08014b0b
 80147e4:	08014b43 	.word	0x08014b43
 80147e8:	08014b67 	.word	0x08014b67

080147ec <_cleanup_r>:
 80147ec:	4901      	ldr	r1, [pc, #4]	; (80147f4 <_cleanup_r+0x8>)
 80147ee:	f000 b8af 	b.w	8014950 <_fwalk_reent>
 80147f2:	bf00      	nop
 80147f4:	0801472d 	.word	0x0801472d

080147f8 <__sfmoreglue>:
 80147f8:	b570      	push	{r4, r5, r6, lr}
 80147fa:	2268      	movs	r2, #104	; 0x68
 80147fc:	1e4d      	subs	r5, r1, #1
 80147fe:	4355      	muls	r5, r2
 8014800:	460e      	mov	r6, r1
 8014802:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014806:	f7ff fc09 	bl	801401c <_malloc_r>
 801480a:	4604      	mov	r4, r0
 801480c:	b140      	cbz	r0, 8014820 <__sfmoreglue+0x28>
 801480e:	2100      	movs	r1, #0
 8014810:	e9c0 1600 	strd	r1, r6, [r0]
 8014814:	300c      	adds	r0, #12
 8014816:	60a0      	str	r0, [r4, #8]
 8014818:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801481c:	f7fd fd98 	bl	8012350 <memset>
 8014820:	4620      	mov	r0, r4
 8014822:	bd70      	pop	{r4, r5, r6, pc}

08014824 <__sfp_lock_acquire>:
 8014824:	4801      	ldr	r0, [pc, #4]	; (801482c <__sfp_lock_acquire+0x8>)
 8014826:	f000 b8b3 	b.w	8014990 <__retarget_lock_acquire_recursive>
 801482a:	bf00      	nop
 801482c:	2400175d 	.word	0x2400175d

08014830 <__sfp_lock_release>:
 8014830:	4801      	ldr	r0, [pc, #4]	; (8014838 <__sfp_lock_release+0x8>)
 8014832:	f000 b8ae 	b.w	8014992 <__retarget_lock_release_recursive>
 8014836:	bf00      	nop
 8014838:	2400175d 	.word	0x2400175d

0801483c <__sinit_lock_acquire>:
 801483c:	4801      	ldr	r0, [pc, #4]	; (8014844 <__sinit_lock_acquire+0x8>)
 801483e:	f000 b8a7 	b.w	8014990 <__retarget_lock_acquire_recursive>
 8014842:	bf00      	nop
 8014844:	2400175e 	.word	0x2400175e

08014848 <__sinit_lock_release>:
 8014848:	4801      	ldr	r0, [pc, #4]	; (8014850 <__sinit_lock_release+0x8>)
 801484a:	f000 b8a2 	b.w	8014992 <__retarget_lock_release_recursive>
 801484e:	bf00      	nop
 8014850:	2400175e 	.word	0x2400175e

08014854 <__sinit>:
 8014854:	b510      	push	{r4, lr}
 8014856:	4604      	mov	r4, r0
 8014858:	f7ff fff0 	bl	801483c <__sinit_lock_acquire>
 801485c:	69a3      	ldr	r3, [r4, #24]
 801485e:	b11b      	cbz	r3, 8014868 <__sinit+0x14>
 8014860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014864:	f7ff bff0 	b.w	8014848 <__sinit_lock_release>
 8014868:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801486c:	6523      	str	r3, [r4, #80]	; 0x50
 801486e:	4b13      	ldr	r3, [pc, #76]	; (80148bc <__sinit+0x68>)
 8014870:	4a13      	ldr	r2, [pc, #76]	; (80148c0 <__sinit+0x6c>)
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	62a2      	str	r2, [r4, #40]	; 0x28
 8014876:	42a3      	cmp	r3, r4
 8014878:	bf04      	itt	eq
 801487a:	2301      	moveq	r3, #1
 801487c:	61a3      	streq	r3, [r4, #24]
 801487e:	4620      	mov	r0, r4
 8014880:	f000 f820 	bl	80148c4 <__sfp>
 8014884:	6060      	str	r0, [r4, #4]
 8014886:	4620      	mov	r0, r4
 8014888:	f000 f81c 	bl	80148c4 <__sfp>
 801488c:	60a0      	str	r0, [r4, #8]
 801488e:	4620      	mov	r0, r4
 8014890:	f000 f818 	bl	80148c4 <__sfp>
 8014894:	2200      	movs	r2, #0
 8014896:	60e0      	str	r0, [r4, #12]
 8014898:	2104      	movs	r1, #4
 801489a:	6860      	ldr	r0, [r4, #4]
 801489c:	f7ff ff82 	bl	80147a4 <std>
 80148a0:	68a0      	ldr	r0, [r4, #8]
 80148a2:	2201      	movs	r2, #1
 80148a4:	2109      	movs	r1, #9
 80148a6:	f7ff ff7d 	bl	80147a4 <std>
 80148aa:	68e0      	ldr	r0, [r4, #12]
 80148ac:	2202      	movs	r2, #2
 80148ae:	2112      	movs	r1, #18
 80148b0:	f7ff ff78 	bl	80147a4 <std>
 80148b4:	2301      	movs	r3, #1
 80148b6:	61a3      	str	r3, [r4, #24]
 80148b8:	e7d2      	b.n	8014860 <__sinit+0xc>
 80148ba:	bf00      	nop
 80148bc:	08016788 	.word	0x08016788
 80148c0:	080147ed 	.word	0x080147ed

080148c4 <__sfp>:
 80148c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148c6:	4607      	mov	r7, r0
 80148c8:	f7ff ffac 	bl	8014824 <__sfp_lock_acquire>
 80148cc:	4b1e      	ldr	r3, [pc, #120]	; (8014948 <__sfp+0x84>)
 80148ce:	681e      	ldr	r6, [r3, #0]
 80148d0:	69b3      	ldr	r3, [r6, #24]
 80148d2:	b913      	cbnz	r3, 80148da <__sfp+0x16>
 80148d4:	4630      	mov	r0, r6
 80148d6:	f7ff ffbd 	bl	8014854 <__sinit>
 80148da:	3648      	adds	r6, #72	; 0x48
 80148dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80148e0:	3b01      	subs	r3, #1
 80148e2:	d503      	bpl.n	80148ec <__sfp+0x28>
 80148e4:	6833      	ldr	r3, [r6, #0]
 80148e6:	b30b      	cbz	r3, 801492c <__sfp+0x68>
 80148e8:	6836      	ldr	r6, [r6, #0]
 80148ea:	e7f7      	b.n	80148dc <__sfp+0x18>
 80148ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80148f0:	b9d5      	cbnz	r5, 8014928 <__sfp+0x64>
 80148f2:	4b16      	ldr	r3, [pc, #88]	; (801494c <__sfp+0x88>)
 80148f4:	60e3      	str	r3, [r4, #12]
 80148f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80148fa:	6665      	str	r5, [r4, #100]	; 0x64
 80148fc:	f000 f847 	bl	801498e <__retarget_lock_init_recursive>
 8014900:	f7ff ff96 	bl	8014830 <__sfp_lock_release>
 8014904:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014908:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801490c:	6025      	str	r5, [r4, #0]
 801490e:	61a5      	str	r5, [r4, #24]
 8014910:	2208      	movs	r2, #8
 8014912:	4629      	mov	r1, r5
 8014914:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014918:	f7fd fd1a 	bl	8012350 <memset>
 801491c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014920:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014924:	4620      	mov	r0, r4
 8014926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014928:	3468      	adds	r4, #104	; 0x68
 801492a:	e7d9      	b.n	80148e0 <__sfp+0x1c>
 801492c:	2104      	movs	r1, #4
 801492e:	4638      	mov	r0, r7
 8014930:	f7ff ff62 	bl	80147f8 <__sfmoreglue>
 8014934:	4604      	mov	r4, r0
 8014936:	6030      	str	r0, [r6, #0]
 8014938:	2800      	cmp	r0, #0
 801493a:	d1d5      	bne.n	80148e8 <__sfp+0x24>
 801493c:	f7ff ff78 	bl	8014830 <__sfp_lock_release>
 8014940:	230c      	movs	r3, #12
 8014942:	603b      	str	r3, [r7, #0]
 8014944:	e7ee      	b.n	8014924 <__sfp+0x60>
 8014946:	bf00      	nop
 8014948:	08016788 	.word	0x08016788
 801494c:	ffff0001 	.word	0xffff0001

08014950 <_fwalk_reent>:
 8014950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014954:	4606      	mov	r6, r0
 8014956:	4688      	mov	r8, r1
 8014958:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801495c:	2700      	movs	r7, #0
 801495e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014962:	f1b9 0901 	subs.w	r9, r9, #1
 8014966:	d505      	bpl.n	8014974 <_fwalk_reent+0x24>
 8014968:	6824      	ldr	r4, [r4, #0]
 801496a:	2c00      	cmp	r4, #0
 801496c:	d1f7      	bne.n	801495e <_fwalk_reent+0xe>
 801496e:	4638      	mov	r0, r7
 8014970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014974:	89ab      	ldrh	r3, [r5, #12]
 8014976:	2b01      	cmp	r3, #1
 8014978:	d907      	bls.n	801498a <_fwalk_reent+0x3a>
 801497a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801497e:	3301      	adds	r3, #1
 8014980:	d003      	beq.n	801498a <_fwalk_reent+0x3a>
 8014982:	4629      	mov	r1, r5
 8014984:	4630      	mov	r0, r6
 8014986:	47c0      	blx	r8
 8014988:	4307      	orrs	r7, r0
 801498a:	3568      	adds	r5, #104	; 0x68
 801498c:	e7e9      	b.n	8014962 <_fwalk_reent+0x12>

0801498e <__retarget_lock_init_recursive>:
 801498e:	4770      	bx	lr

08014990 <__retarget_lock_acquire_recursive>:
 8014990:	4770      	bx	lr

08014992 <__retarget_lock_release_recursive>:
 8014992:	4770      	bx	lr

08014994 <__swhatbuf_r>:
 8014994:	b570      	push	{r4, r5, r6, lr}
 8014996:	460e      	mov	r6, r1
 8014998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801499c:	2900      	cmp	r1, #0
 801499e:	b096      	sub	sp, #88	; 0x58
 80149a0:	4614      	mov	r4, r2
 80149a2:	461d      	mov	r5, r3
 80149a4:	da08      	bge.n	80149b8 <__swhatbuf_r+0x24>
 80149a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80149aa:	2200      	movs	r2, #0
 80149ac:	602a      	str	r2, [r5, #0]
 80149ae:	061a      	lsls	r2, r3, #24
 80149b0:	d410      	bmi.n	80149d4 <__swhatbuf_r+0x40>
 80149b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80149b6:	e00e      	b.n	80149d6 <__swhatbuf_r+0x42>
 80149b8:	466a      	mov	r2, sp
 80149ba:	f000 f8fb 	bl	8014bb4 <_fstat_r>
 80149be:	2800      	cmp	r0, #0
 80149c0:	dbf1      	blt.n	80149a6 <__swhatbuf_r+0x12>
 80149c2:	9a01      	ldr	r2, [sp, #4]
 80149c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80149c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80149cc:	425a      	negs	r2, r3
 80149ce:	415a      	adcs	r2, r3
 80149d0:	602a      	str	r2, [r5, #0]
 80149d2:	e7ee      	b.n	80149b2 <__swhatbuf_r+0x1e>
 80149d4:	2340      	movs	r3, #64	; 0x40
 80149d6:	2000      	movs	r0, #0
 80149d8:	6023      	str	r3, [r4, #0]
 80149da:	b016      	add	sp, #88	; 0x58
 80149dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080149e0 <__smakebuf_r>:
 80149e0:	898b      	ldrh	r3, [r1, #12]
 80149e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80149e4:	079d      	lsls	r5, r3, #30
 80149e6:	4606      	mov	r6, r0
 80149e8:	460c      	mov	r4, r1
 80149ea:	d507      	bpl.n	80149fc <__smakebuf_r+0x1c>
 80149ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80149f0:	6023      	str	r3, [r4, #0]
 80149f2:	6123      	str	r3, [r4, #16]
 80149f4:	2301      	movs	r3, #1
 80149f6:	6163      	str	r3, [r4, #20]
 80149f8:	b002      	add	sp, #8
 80149fa:	bd70      	pop	{r4, r5, r6, pc}
 80149fc:	ab01      	add	r3, sp, #4
 80149fe:	466a      	mov	r2, sp
 8014a00:	f7ff ffc8 	bl	8014994 <__swhatbuf_r>
 8014a04:	9900      	ldr	r1, [sp, #0]
 8014a06:	4605      	mov	r5, r0
 8014a08:	4630      	mov	r0, r6
 8014a0a:	f7ff fb07 	bl	801401c <_malloc_r>
 8014a0e:	b948      	cbnz	r0, 8014a24 <__smakebuf_r+0x44>
 8014a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a14:	059a      	lsls	r2, r3, #22
 8014a16:	d4ef      	bmi.n	80149f8 <__smakebuf_r+0x18>
 8014a18:	f023 0303 	bic.w	r3, r3, #3
 8014a1c:	f043 0302 	orr.w	r3, r3, #2
 8014a20:	81a3      	strh	r3, [r4, #12]
 8014a22:	e7e3      	b.n	80149ec <__smakebuf_r+0xc>
 8014a24:	4b0d      	ldr	r3, [pc, #52]	; (8014a5c <__smakebuf_r+0x7c>)
 8014a26:	62b3      	str	r3, [r6, #40]	; 0x28
 8014a28:	89a3      	ldrh	r3, [r4, #12]
 8014a2a:	6020      	str	r0, [r4, #0]
 8014a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a30:	81a3      	strh	r3, [r4, #12]
 8014a32:	9b00      	ldr	r3, [sp, #0]
 8014a34:	6163      	str	r3, [r4, #20]
 8014a36:	9b01      	ldr	r3, [sp, #4]
 8014a38:	6120      	str	r0, [r4, #16]
 8014a3a:	b15b      	cbz	r3, 8014a54 <__smakebuf_r+0x74>
 8014a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a40:	4630      	mov	r0, r6
 8014a42:	f000 f8c9 	bl	8014bd8 <_isatty_r>
 8014a46:	b128      	cbz	r0, 8014a54 <__smakebuf_r+0x74>
 8014a48:	89a3      	ldrh	r3, [r4, #12]
 8014a4a:	f023 0303 	bic.w	r3, r3, #3
 8014a4e:	f043 0301 	orr.w	r3, r3, #1
 8014a52:	81a3      	strh	r3, [r4, #12]
 8014a54:	89a0      	ldrh	r0, [r4, #12]
 8014a56:	4305      	orrs	r5, r0
 8014a58:	81a5      	strh	r5, [r4, #12]
 8014a5a:	e7cd      	b.n	80149f8 <__smakebuf_r+0x18>
 8014a5c:	080147ed 	.word	0x080147ed

08014a60 <_raise_r>:
 8014a60:	291f      	cmp	r1, #31
 8014a62:	b538      	push	{r3, r4, r5, lr}
 8014a64:	4604      	mov	r4, r0
 8014a66:	460d      	mov	r5, r1
 8014a68:	d904      	bls.n	8014a74 <_raise_r+0x14>
 8014a6a:	2316      	movs	r3, #22
 8014a6c:	6003      	str	r3, [r0, #0]
 8014a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014a72:	bd38      	pop	{r3, r4, r5, pc}
 8014a74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014a76:	b112      	cbz	r2, 8014a7e <_raise_r+0x1e>
 8014a78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014a7c:	b94b      	cbnz	r3, 8014a92 <_raise_r+0x32>
 8014a7e:	4620      	mov	r0, r4
 8014a80:	f000 f830 	bl	8014ae4 <_getpid_r>
 8014a84:	462a      	mov	r2, r5
 8014a86:	4601      	mov	r1, r0
 8014a88:	4620      	mov	r0, r4
 8014a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a8e:	f000 b817 	b.w	8014ac0 <_kill_r>
 8014a92:	2b01      	cmp	r3, #1
 8014a94:	d00a      	beq.n	8014aac <_raise_r+0x4c>
 8014a96:	1c59      	adds	r1, r3, #1
 8014a98:	d103      	bne.n	8014aa2 <_raise_r+0x42>
 8014a9a:	2316      	movs	r3, #22
 8014a9c:	6003      	str	r3, [r0, #0]
 8014a9e:	2001      	movs	r0, #1
 8014aa0:	e7e7      	b.n	8014a72 <_raise_r+0x12>
 8014aa2:	2400      	movs	r4, #0
 8014aa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014aa8:	4628      	mov	r0, r5
 8014aaa:	4798      	blx	r3
 8014aac:	2000      	movs	r0, #0
 8014aae:	e7e0      	b.n	8014a72 <_raise_r+0x12>

08014ab0 <raise>:
 8014ab0:	4b02      	ldr	r3, [pc, #8]	; (8014abc <raise+0xc>)
 8014ab2:	4601      	mov	r1, r0
 8014ab4:	6818      	ldr	r0, [r3, #0]
 8014ab6:	f7ff bfd3 	b.w	8014a60 <_raise_r>
 8014aba:	bf00      	nop
 8014abc:	24000248 	.word	0x24000248

08014ac0 <_kill_r>:
 8014ac0:	b538      	push	{r3, r4, r5, lr}
 8014ac2:	4d07      	ldr	r5, [pc, #28]	; (8014ae0 <_kill_r+0x20>)
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	4604      	mov	r4, r0
 8014ac8:	4608      	mov	r0, r1
 8014aca:	4611      	mov	r1, r2
 8014acc:	602b      	str	r3, [r5, #0]
 8014ace:	f7f0 facb 	bl	8005068 <_kill>
 8014ad2:	1c43      	adds	r3, r0, #1
 8014ad4:	d102      	bne.n	8014adc <_kill_r+0x1c>
 8014ad6:	682b      	ldr	r3, [r5, #0]
 8014ad8:	b103      	cbz	r3, 8014adc <_kill_r+0x1c>
 8014ada:	6023      	str	r3, [r4, #0]
 8014adc:	bd38      	pop	{r3, r4, r5, pc}
 8014ade:	bf00      	nop
 8014ae0:	24001758 	.word	0x24001758

08014ae4 <_getpid_r>:
 8014ae4:	f7f0 bab8 	b.w	8005058 <_getpid>

08014ae8 <__sread>:
 8014ae8:	b510      	push	{r4, lr}
 8014aea:	460c      	mov	r4, r1
 8014aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014af0:	f000 f894 	bl	8014c1c <_read_r>
 8014af4:	2800      	cmp	r0, #0
 8014af6:	bfab      	itete	ge
 8014af8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014afa:	89a3      	ldrhlt	r3, [r4, #12]
 8014afc:	181b      	addge	r3, r3, r0
 8014afe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014b02:	bfac      	ite	ge
 8014b04:	6563      	strge	r3, [r4, #84]	; 0x54
 8014b06:	81a3      	strhlt	r3, [r4, #12]
 8014b08:	bd10      	pop	{r4, pc}

08014b0a <__swrite>:
 8014b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b0e:	461f      	mov	r7, r3
 8014b10:	898b      	ldrh	r3, [r1, #12]
 8014b12:	05db      	lsls	r3, r3, #23
 8014b14:	4605      	mov	r5, r0
 8014b16:	460c      	mov	r4, r1
 8014b18:	4616      	mov	r6, r2
 8014b1a:	d505      	bpl.n	8014b28 <__swrite+0x1e>
 8014b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b20:	2302      	movs	r3, #2
 8014b22:	2200      	movs	r2, #0
 8014b24:	f000 f868 	bl	8014bf8 <_lseek_r>
 8014b28:	89a3      	ldrh	r3, [r4, #12]
 8014b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014b32:	81a3      	strh	r3, [r4, #12]
 8014b34:	4632      	mov	r2, r6
 8014b36:	463b      	mov	r3, r7
 8014b38:	4628      	mov	r0, r5
 8014b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b3e:	f000 b817 	b.w	8014b70 <_write_r>

08014b42 <__sseek>:
 8014b42:	b510      	push	{r4, lr}
 8014b44:	460c      	mov	r4, r1
 8014b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b4a:	f000 f855 	bl	8014bf8 <_lseek_r>
 8014b4e:	1c43      	adds	r3, r0, #1
 8014b50:	89a3      	ldrh	r3, [r4, #12]
 8014b52:	bf15      	itete	ne
 8014b54:	6560      	strne	r0, [r4, #84]	; 0x54
 8014b56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014b5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014b5e:	81a3      	strheq	r3, [r4, #12]
 8014b60:	bf18      	it	ne
 8014b62:	81a3      	strhne	r3, [r4, #12]
 8014b64:	bd10      	pop	{r4, pc}

08014b66 <__sclose>:
 8014b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b6a:	f000 b813 	b.w	8014b94 <_close_r>
	...

08014b70 <_write_r>:
 8014b70:	b538      	push	{r3, r4, r5, lr}
 8014b72:	4d07      	ldr	r5, [pc, #28]	; (8014b90 <_write_r+0x20>)
 8014b74:	4604      	mov	r4, r0
 8014b76:	4608      	mov	r0, r1
 8014b78:	4611      	mov	r1, r2
 8014b7a:	2200      	movs	r2, #0
 8014b7c:	602a      	str	r2, [r5, #0]
 8014b7e:	461a      	mov	r2, r3
 8014b80:	f7f0 faa9 	bl	80050d6 <_write>
 8014b84:	1c43      	adds	r3, r0, #1
 8014b86:	d102      	bne.n	8014b8e <_write_r+0x1e>
 8014b88:	682b      	ldr	r3, [r5, #0]
 8014b8a:	b103      	cbz	r3, 8014b8e <_write_r+0x1e>
 8014b8c:	6023      	str	r3, [r4, #0]
 8014b8e:	bd38      	pop	{r3, r4, r5, pc}
 8014b90:	24001758 	.word	0x24001758

08014b94 <_close_r>:
 8014b94:	b538      	push	{r3, r4, r5, lr}
 8014b96:	4d06      	ldr	r5, [pc, #24]	; (8014bb0 <_close_r+0x1c>)
 8014b98:	2300      	movs	r3, #0
 8014b9a:	4604      	mov	r4, r0
 8014b9c:	4608      	mov	r0, r1
 8014b9e:	602b      	str	r3, [r5, #0]
 8014ba0:	f7f0 fab5 	bl	800510e <_close>
 8014ba4:	1c43      	adds	r3, r0, #1
 8014ba6:	d102      	bne.n	8014bae <_close_r+0x1a>
 8014ba8:	682b      	ldr	r3, [r5, #0]
 8014baa:	b103      	cbz	r3, 8014bae <_close_r+0x1a>
 8014bac:	6023      	str	r3, [r4, #0]
 8014bae:	bd38      	pop	{r3, r4, r5, pc}
 8014bb0:	24001758 	.word	0x24001758

08014bb4 <_fstat_r>:
 8014bb4:	b538      	push	{r3, r4, r5, lr}
 8014bb6:	4d07      	ldr	r5, [pc, #28]	; (8014bd4 <_fstat_r+0x20>)
 8014bb8:	2300      	movs	r3, #0
 8014bba:	4604      	mov	r4, r0
 8014bbc:	4608      	mov	r0, r1
 8014bbe:	4611      	mov	r1, r2
 8014bc0:	602b      	str	r3, [r5, #0]
 8014bc2:	f7f0 fab0 	bl	8005126 <_fstat>
 8014bc6:	1c43      	adds	r3, r0, #1
 8014bc8:	d102      	bne.n	8014bd0 <_fstat_r+0x1c>
 8014bca:	682b      	ldr	r3, [r5, #0]
 8014bcc:	b103      	cbz	r3, 8014bd0 <_fstat_r+0x1c>
 8014bce:	6023      	str	r3, [r4, #0]
 8014bd0:	bd38      	pop	{r3, r4, r5, pc}
 8014bd2:	bf00      	nop
 8014bd4:	24001758 	.word	0x24001758

08014bd8 <_isatty_r>:
 8014bd8:	b538      	push	{r3, r4, r5, lr}
 8014bda:	4d06      	ldr	r5, [pc, #24]	; (8014bf4 <_isatty_r+0x1c>)
 8014bdc:	2300      	movs	r3, #0
 8014bde:	4604      	mov	r4, r0
 8014be0:	4608      	mov	r0, r1
 8014be2:	602b      	str	r3, [r5, #0]
 8014be4:	f7f0 faaf 	bl	8005146 <_isatty>
 8014be8:	1c43      	adds	r3, r0, #1
 8014bea:	d102      	bne.n	8014bf2 <_isatty_r+0x1a>
 8014bec:	682b      	ldr	r3, [r5, #0]
 8014bee:	b103      	cbz	r3, 8014bf2 <_isatty_r+0x1a>
 8014bf0:	6023      	str	r3, [r4, #0]
 8014bf2:	bd38      	pop	{r3, r4, r5, pc}
 8014bf4:	24001758 	.word	0x24001758

08014bf8 <_lseek_r>:
 8014bf8:	b538      	push	{r3, r4, r5, lr}
 8014bfa:	4d07      	ldr	r5, [pc, #28]	; (8014c18 <_lseek_r+0x20>)
 8014bfc:	4604      	mov	r4, r0
 8014bfe:	4608      	mov	r0, r1
 8014c00:	4611      	mov	r1, r2
 8014c02:	2200      	movs	r2, #0
 8014c04:	602a      	str	r2, [r5, #0]
 8014c06:	461a      	mov	r2, r3
 8014c08:	f7f0 faa8 	bl	800515c <_lseek>
 8014c0c:	1c43      	adds	r3, r0, #1
 8014c0e:	d102      	bne.n	8014c16 <_lseek_r+0x1e>
 8014c10:	682b      	ldr	r3, [r5, #0]
 8014c12:	b103      	cbz	r3, 8014c16 <_lseek_r+0x1e>
 8014c14:	6023      	str	r3, [r4, #0]
 8014c16:	bd38      	pop	{r3, r4, r5, pc}
 8014c18:	24001758 	.word	0x24001758

08014c1c <_read_r>:
 8014c1c:	b538      	push	{r3, r4, r5, lr}
 8014c1e:	4d07      	ldr	r5, [pc, #28]	; (8014c3c <_read_r+0x20>)
 8014c20:	4604      	mov	r4, r0
 8014c22:	4608      	mov	r0, r1
 8014c24:	4611      	mov	r1, r2
 8014c26:	2200      	movs	r2, #0
 8014c28:	602a      	str	r2, [r5, #0]
 8014c2a:	461a      	mov	r2, r3
 8014c2c:	f7f0 fa36 	bl	800509c <_read>
 8014c30:	1c43      	adds	r3, r0, #1
 8014c32:	d102      	bne.n	8014c3a <_read_r+0x1e>
 8014c34:	682b      	ldr	r3, [r5, #0]
 8014c36:	b103      	cbz	r3, 8014c3a <_read_r+0x1e>
 8014c38:	6023      	str	r3, [r4, #0]
 8014c3a:	bd38      	pop	{r3, r4, r5, pc}
 8014c3c:	24001758 	.word	0x24001758

08014c40 <_init>:
 8014c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c42:	bf00      	nop
 8014c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c46:	bc08      	pop	{r3}
 8014c48:	469e      	mov	lr, r3
 8014c4a:	4770      	bx	lr

08014c4c <_fini>:
 8014c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c4e:	bf00      	nop
 8014c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c52:	bc08      	pop	{r3}
 8014c54:	469e      	mov	lr, r3
 8014c56:	4770      	bx	lr
