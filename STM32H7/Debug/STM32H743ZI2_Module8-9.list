
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a52c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a7c4  0800a7c4  0001a7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a804  0800a804  0001a804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a80c  0800a80c  0001a80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a810  0800a810  0001a810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  0800a814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000604  20000010  0800a824  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000614  0800a824  00020614  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021e0b  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000034dd  00000000  00000000  00041e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001358  00000000  00000000  00045328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001260  00000000  00000000  00046680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037d4b  00000000  00000000  000478e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018ccd  00000000  00000000  0007f62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016647d  00000000  00000000  000982f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001fe775  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005290  00000000  00000000  001fe7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a7ac 	.word	0x0800a7ac

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	0800a7ac 	.word	0x0800a7ac

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <StepDriveRad>:
/*
 * Stepper motor driving function (Radian input)
 * Updated : 18 Mar 2021 16:44
 * */
void StepDriveRad(char _ch, double _ang_v)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	ed87 0b00 	vstr	d0, [r7]
 80005dc:	73fb      	strb	r3, [r7, #15]
	switch(_ch)
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	3b01      	subs	r3, #1
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	f200 81f1 	bhi.w	80009ca <StepDriveRad+0x3fa>
 80005e8:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <StepDriveRad+0x20>)
 80005ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ee:	bf00      	nop
 80005f0:	08000605 	.word	0x08000605
 80005f4:	080006bd 	.word	0x080006bd
 80005f8:	08000781 	.word	0x08000781
 80005fc:	08000835 	.word	0x08000835
 8000600:	080008ed 	.word	0x080008ed
	{
		case STEPJ1:
		{
			/* Direction of Joint1's Stepper Motor */
			if(_ang_v < 0)
 8000604:	ed97 7b00 	vldr	d7, [r7]
 8000608:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800060c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000610:	d506      	bpl.n	8000620 <StepDriveRad+0x50>
			{
				HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000618:	48c9      	ldr	r0, [pc, #804]	; (8000940 <StepDriveRad+0x370>)
 800061a:	f004 fd39 	bl	8005090 <HAL_GPIO_WritePin>
 800061e:	e005      	b.n	800062c <StepDriveRad+0x5c>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000626:	48c6      	ldr	r0, [pc, #792]	; (8000940 <StepDriveRad+0x370>)
 8000628:	f004 fd32 	bl	8005090 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint1's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM1->ARR is undefined value.
 800062c:	ed97 7b00 	vldr	d7, [r7]
 8000630:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000638:	d107      	bne.n	800064a <StepDriveRad+0x7a>
			{
				TIM1->CCR2 = 0;
 800063a:	4bc2      	ldr	r3, [pc, #776]	; (8000944 <StepDriveRad+0x374>)
 800063c:	2200      	movs	r2, #0
 800063e:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->ARR = 625-1;
 8000640:	4bc0      	ldr	r3, [pc, #768]	; (8000944 <StepDriveRad+0x374>)
 8000642:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000646:	62da      	str	r2, [r3, #44]	; 0x2c
			else
			{
				TIM1->ARR = round((6.283*_FCY)/(1600*((TIM1->PSC)+1)*abs(_ang_v))) - 1;
				TIM1->CCR2 = round(((TIM1->ARR)+1)/2);
			}
			break;
 8000648:	e1bf      	b.n	80009ca <StepDriveRad+0x3fa>
				TIM1->ARR = round((6.283*_FCY)/(1600*((TIM1->PSC)+1)*abs(_ang_v))) - 1;
 800064a:	4bbe      	ldr	r3, [pc, #760]	; (8000944 <StepDriveRad+0x374>)
 800064c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800064e:	3301      	adds	r3, #1
 8000650:	ed97 7b00 	vldr	d7, [r7]
 8000654:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000658:	ee17 2a90 	vmov	r2, s15
 800065c:	2a00      	cmp	r2, #0
 800065e:	bfb8      	it	lt
 8000660:	4252      	neglt	r2, r2
 8000662:	fb02 f303 	mul.w	r3, r2, r3
 8000666:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800066a:	fb02 f303 	mul.w	r3, r2, r3
 800066e:	ee07 3a90 	vmov	s15, r3
 8000672:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000676:	ed9f 5bb0 	vldr	d5, [pc, #704]	; 8000938 <StepDriveRad+0x368>
 800067a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800067e:	eeb0 0b46 	vmov.f64	d0, d6
 8000682:	f00a f821 	bl	800a6c8 <round>
 8000686:	eeb0 7b40 	vmov.f64	d7, d0
 800068a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800068e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000692:	4bac      	ldr	r3, [pc, #688]	; (8000944 <StepDriveRad+0x374>)
 8000694:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000698:	ee17 2a90 	vmov	r2, s15
 800069c:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM1->CCR2 = round(((TIM1->ARR)+1)/2);
 800069e:	4ba9      	ldr	r3, [pc, #676]	; (8000944 <StepDriveRad+0x374>)
 80006a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006a2:	3301      	adds	r3, #1
 80006a4:	085b      	lsrs	r3, r3, #1
 80006a6:	ee07 3a90 	vmov	s15, r3
 80006aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80006ae:	4ba5      	ldr	r3, [pc, #660]	; (8000944 <StepDriveRad+0x374>)
 80006b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006b4:	ee17 2a90 	vmov	r2, s15
 80006b8:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80006ba:	e186      	b.n	80009ca <StepDriveRad+0x3fa>
		}
		case STEPJ2:
		{
			/* Direction of Joint2's Stepper Motor */
			if(_ang_v < 0)
 80006bc:	ed97 7b00 	vldr	d7, [r7]
 80006c0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c8:	d506      	bpl.n	80006d8 <StepDriveRad+0x108>
			{
				HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d0:	489d      	ldr	r0, [pc, #628]	; (8000948 <StepDriveRad+0x378>)
 80006d2:	f004 fcdd 	bl	8005090 <HAL_GPIO_WritePin>
 80006d6:	e005      	b.n	80006e4 <StepDriveRad+0x114>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006de:	489a      	ldr	r0, [pc, #616]	; (8000948 <StepDriveRad+0x378>)
 80006e0:	f004 fcd6 	bl	8005090 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint2's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM2->ARR is undefined value.
 80006e4:	ed97 7b00 	vldr	d7, [r7]
 80006e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80006ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f0:	d109      	bne.n	8000706 <StepDriveRad+0x136>
			{
				TIM2->CCR3 = 0;
 80006f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006f6:	2200      	movs	r2, #0
 80006f8:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM2->ARR = 625-1;
 80006fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006fe:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
			else
			{
				TIM2->ARR = round((6.283*_FCY)/(1600*((TIM2->PSC)+1)*abs(_ang_v))) - 1;
				TIM2->CCR3 = round(((TIM2->ARR)+1)/2);
			}
			break;
 8000704:	e161      	b.n	80009ca <StepDriveRad+0x3fa>
				TIM2->ARR = round((6.283*_FCY)/(1600*((TIM2->PSC)+1)*abs(_ang_v))) - 1;
 8000706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800070a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800070c:	3301      	adds	r3, #1
 800070e:	ed97 7b00 	vldr	d7, [r7]
 8000712:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000716:	ee17 2a90 	vmov	r2, s15
 800071a:	2a00      	cmp	r2, #0
 800071c:	bfb8      	it	lt
 800071e:	4252      	neglt	r2, r2
 8000720:	fb02 f303 	mul.w	r3, r2, r3
 8000724:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000728:	fb02 f303 	mul.w	r3, r2, r3
 800072c:	ee07 3a90 	vmov	s15, r3
 8000730:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000734:	ed9f 5b80 	vldr	d5, [pc, #512]	; 8000938 <StepDriveRad+0x368>
 8000738:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800073c:	eeb0 0b46 	vmov.f64	d0, d6
 8000740:	f009 ffc2 	bl	800a6c8 <round>
 8000744:	eeb0 7b40 	vmov.f64	d7, d0
 8000748:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800074c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000750:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000754:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000758:	ee17 2a90 	vmov	r2, s15
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM2->CCR3 = round(((TIM2->ARR)+1)/2);
 800075e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000764:	3301      	adds	r3, #1
 8000766:	085b      	lsrs	r3, r3, #1
 8000768:	ee07 3a90 	vmov	s15, r3
 800076c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000770:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000774:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000778:	ee17 2a90 	vmov	r2, s15
 800077c:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800077e:	e124      	b.n	80009ca <StepDriveRad+0x3fa>
		}
		case STEPJ3:
		{
			/* Direction of Joint3's Stepper Motor */
			if(_ang_v < 0)
 8000780:	ed97 7b00 	vldr	d7, [r7]
 8000784:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078c:	d505      	bpl.n	800079a <StepDriveRad+0x1ca>
			{
				HAL_GPIO_WritePin(DIR_3_GPIO_Port, DIR_3_Pin, GPIO_PIN_SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2120      	movs	r1, #32
 8000792:	486d      	ldr	r0, [pc, #436]	; (8000948 <StepDriveRad+0x378>)
 8000794:	f004 fc7c 	bl	8005090 <HAL_GPIO_WritePin>
 8000798:	e004      	b.n	80007a4 <StepDriveRad+0x1d4>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_3_GPIO_Port, DIR_3_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2120      	movs	r1, #32
 800079e:	486a      	ldr	r0, [pc, #424]	; (8000948 <StepDriveRad+0x378>)
 80007a0:	f004 fc76 	bl	8005090 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint3's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM3->ARR is undefined value.
 80007a4:	ed97 7b00 	vldr	d7, [r7]
 80007a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80007ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007b0:	d107      	bne.n	80007c2 <StepDriveRad+0x1f2>
			{
				TIM3->CCR1 = 0;
 80007b2:	4b66      	ldr	r3, [pc, #408]	; (800094c <StepDriveRad+0x37c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3->ARR = 625-1;
 80007b8:	4b64      	ldr	r3, [pc, #400]	; (800094c <StepDriveRad+0x37c>)
 80007ba:	f44f 721c 	mov.w	r2, #624	; 0x270
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
			else
			{
				TIM3->ARR = round((6.283*_FCY)/(1600*((TIM3->PSC)+1)*abs(_ang_v))) - 1;
				TIM3->CCR1 = round(((TIM3->ARR)+1)/2);
			}
			break;
 80007c0:	e103      	b.n	80009ca <StepDriveRad+0x3fa>
				TIM3->ARR = round((6.283*_FCY)/(1600*((TIM3->PSC)+1)*abs(_ang_v))) - 1;
 80007c2:	4b62      	ldr	r3, [pc, #392]	; (800094c <StepDriveRad+0x37c>)
 80007c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c6:	3301      	adds	r3, #1
 80007c8:	ed97 7b00 	vldr	d7, [r7]
 80007cc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007d0:	ee17 2a90 	vmov	r2, s15
 80007d4:	2a00      	cmp	r2, #0
 80007d6:	bfb8      	it	lt
 80007d8:	4252      	neglt	r2, r2
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80007e2:	fb02 f303 	mul.w	r3, r2, r3
 80007e6:	ee07 3a90 	vmov	s15, r3
 80007ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007ee:	ed9f 5b52 	vldr	d5, [pc, #328]	; 8000938 <StepDriveRad+0x368>
 80007f2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80007f6:	eeb0 0b46 	vmov.f64	d0, d6
 80007fa:	f009 ff65 	bl	800a6c8 <round>
 80007fe:	eeb0 7b40 	vmov.f64	d7, d0
 8000802:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000806:	ee37 7b46 	vsub.f64	d7, d7, d6
 800080a:	4b50      	ldr	r3, [pc, #320]	; (800094c <StepDriveRad+0x37c>)
 800080c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000810:	ee17 2a90 	vmov	r2, s15
 8000814:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM3->CCR1 = round(((TIM3->ARR)+1)/2);
 8000816:	4b4d      	ldr	r3, [pc, #308]	; (800094c <StepDriveRad+0x37c>)
 8000818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081a:	3301      	adds	r3, #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ee07 3a90 	vmov	s15, r3
 8000822:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000826:	4b49      	ldr	r3, [pc, #292]	; (800094c <StepDriveRad+0x37c>)
 8000828:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800082c:	ee17 2a90 	vmov	r2, s15
 8000830:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000832:	e0ca      	b.n	80009ca <StepDriveRad+0x3fa>
		}
		case STEPJ4:
		{
			/* Direction of Joint4's Stepper Motor */
			if(_ang_v < 0)
 8000834:	ed97 7b00 	vldr	d7, [r7]
 8000838:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800083c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000840:	d506      	bpl.n	8000850 <StepDriveRad+0x280>
			{
				HAL_GPIO_WritePin(DIR_4_GPIO_Port, DIR_4_Pin, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000848:	483f      	ldr	r0, [pc, #252]	; (8000948 <StepDriveRad+0x378>)
 800084a:	f004 fc21 	bl	8005090 <HAL_GPIO_WritePin>
 800084e:	e005      	b.n	800085c <StepDriveRad+0x28c>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_4_GPIO_Port, DIR_4_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000856:	483c      	ldr	r0, [pc, #240]	; (8000948 <StepDriveRad+0x378>)
 8000858:	f004 fc1a 	bl	8005090 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint4's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM4->ARR is undefined value.
 800085c:	ed97 7b00 	vldr	d7, [r7]
 8000860:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000868:	d107      	bne.n	800087a <StepDriveRad+0x2aa>
			{
				TIM4->CCR3 = 0;
 800086a:	4b39      	ldr	r3, [pc, #228]	; (8000950 <StepDriveRad+0x380>)
 800086c:	2200      	movs	r2, #0
 800086e:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM4->ARR = 625-1;
 8000870:	4b37      	ldr	r3, [pc, #220]	; (8000950 <StepDriveRad+0x380>)
 8000872:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
			else
			{
				TIM4->ARR = round((6.283*_FCY)/(1600*((TIM4->PSC)+1)*abs(_ang_v))) - 1;
				TIM4->CCR3 = round(((TIM4->ARR)+1)/2);
			}
			break;
 8000878:	e0a7      	b.n	80009ca <StepDriveRad+0x3fa>
				TIM4->ARR = round((6.283*_FCY)/(1600*((TIM4->PSC)+1)*abs(_ang_v))) - 1;
 800087a:	4b35      	ldr	r3, [pc, #212]	; (8000950 <StepDriveRad+0x380>)
 800087c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800087e:	3301      	adds	r3, #1
 8000880:	ed97 7b00 	vldr	d7, [r7]
 8000884:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000888:	ee17 2a90 	vmov	r2, s15
 800088c:	2a00      	cmp	r2, #0
 800088e:	bfb8      	it	lt
 8000890:	4252      	neglt	r2, r2
 8000892:	fb02 f303 	mul.w	r3, r2, r3
 8000896:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800089a:	fb02 f303 	mul.w	r3, r2, r3
 800089e:	ee07 3a90 	vmov	s15, r3
 80008a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80008a6:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8000938 <StepDriveRad+0x368>
 80008aa:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80008ae:	eeb0 0b46 	vmov.f64	d0, d6
 80008b2:	f009 ff09 	bl	800a6c8 <round>
 80008b6:	eeb0 7b40 	vmov.f64	d7, d0
 80008ba:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80008be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80008c2:	4b23      	ldr	r3, [pc, #140]	; (8000950 <StepDriveRad+0x380>)
 80008c4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008c8:	ee17 2a90 	vmov	r2, s15
 80008cc:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM4->CCR3 = round(((TIM4->ARR)+1)/2);
 80008ce:	4b20      	ldr	r3, [pc, #128]	; (8000950 <StepDriveRad+0x380>)
 80008d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d2:	3301      	adds	r3, #1
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ee07 3a90 	vmov	s15, r3
 80008da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80008de:	4b1c      	ldr	r3, [pc, #112]	; (8000950 <StepDriveRad+0x380>)
 80008e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008e4:	ee17 2a90 	vmov	r2, s15
 80008e8:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80008ea:	e06e      	b.n	80009ca <StepDriveRad+0x3fa>
		}
		case STEPGripper:
		{
			/* Direction of Gripper's Stepper Motor */
			if(_ang_v < 0)
 80008ec:	ed97 7b00 	vldr	d7, [r7]
 80008f0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80008f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f8:	d506      	bpl.n	8000908 <StepDriveRad+0x338>
			{
				HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000900:	480f      	ldr	r0, [pc, #60]	; (8000940 <StepDriveRad+0x370>)
 8000902:	f004 fbc5 	bl	8005090 <HAL_GPIO_WritePin>
 8000906:	e005      	b.n	8000914 <StepDriveRad+0x344>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800090e:	480c      	ldr	r0, [pc, #48]	; (8000940 <StepDriveRad+0x370>)
 8000910:	f004 fbbe 	bl	8005090 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Gripper's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM2->ARR is undefined value.
 8000914:	ed97 7b00 	vldr	d7, [r7]
 8000918:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800091c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000920:	d11a      	bne.n	8000958 <StepDriveRad+0x388>
			{
				TIM15->CCR2 = 0;
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <StepDriveRad+0x384>)
 8000924:	2200      	movs	r2, #0
 8000926:	639a      	str	r2, [r3, #56]	; 0x38
				TIM15->ARR = 625-1;
 8000928:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <StepDriveRad+0x384>)
 800092a:	f44f 721c 	mov.w	r2, #624	; 0x270
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c
			else
			{
				TIM15->ARR = round((6.283*_FCY)/(1600*((TIM15->PSC)+1)*abs(_ang_v))) - 1;
				TIM15->CCR2 = round(((TIM15->ARR)+1)/2);
			}
			break;
 8000930:	e04a      	b.n	80009c8 <StepDriveRad+0x3f8>
 8000932:	bf00      	nop
 8000934:	f3af 8000 	nop.w
 8000938:	20000000 	.word	0x20000000
 800093c:	41d67842 	.word	0x41d67842
 8000940:	58021000 	.word	0x58021000
 8000944:	40010000 	.word	0x40010000
 8000948:	58020400 	.word	0x58020400
 800094c:	40000400 	.word	0x40000400
 8000950:	40000800 	.word	0x40000800
 8000954:	40014000 	.word	0x40014000
				TIM15->ARR = round((6.283*_FCY)/(1600*((TIM15->PSC)+1)*abs(_ang_v))) - 1;
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <StepDriveRad+0x410>)
 800095a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095c:	3301      	adds	r3, #1
 800095e:	ed97 7b00 	vldr	d7, [r7]
 8000962:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000966:	ee17 2a90 	vmov	r2, s15
 800096a:	2a00      	cmp	r2, #0
 800096c:	bfb8      	it	lt
 800096e:	4252      	neglt	r2, r2
 8000970:	fb02 f303 	mul.w	r3, r2, r3
 8000974:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000978:	fb02 f303 	mul.w	r3, r2, r3
 800097c:	ee07 3a90 	vmov	s15, r3
 8000980:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000984:	ed9f 5b14 	vldr	d5, [pc, #80]	; 80009d8 <StepDriveRad+0x408>
 8000988:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800098c:	eeb0 0b46 	vmov.f64	d0, d6
 8000990:	f009 fe9a 	bl	800a6c8 <round>
 8000994:	eeb0 7b40 	vmov.f64	d7, d0
 8000998:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800099c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <StepDriveRad+0x410>)
 80009a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009a6:	ee17 2a90 	vmov	r2, s15
 80009aa:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM15->CCR2 = round(((TIM15->ARR)+1)/2);
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <StepDriveRad+0x410>)
 80009ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b0:	3301      	adds	r3, #1
 80009b2:	085b      	lsrs	r3, r3, #1
 80009b4:	ee07 3a90 	vmov	s15, r3
 80009b8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <StepDriveRad+0x410>)
 80009be:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009c2:	ee17 2a90 	vmov	r2, s15
 80009c6:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80009c8:	bf00      	nop
//			TIM4->CCR3 = 0;
//			TIM15->CCR2 = 0;
		}
	}

}
 80009ca:	bf00      	nop
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	f3af 8000 	nop.w
 80009d8:	20000000 	.word	0x20000000
 80009dc:	41d67842 	.word	0x41d67842
 80009e0:	40014000 	.word	0x40014000

080009e4 <StepStop>:
//			TIM15->CCR2 = 0;
		}
	}
}
void StepStop(char _ch)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	switch(_ch)
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	3b01      	subs	r3, #1
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	d831      	bhi.n	8000a5a <StepStop+0x76>
 80009f6:	a201      	add	r2, pc, #4	; (adr r2, 80009fc <StepStop+0x18>)
 80009f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009fc:	08000a11 	.word	0x08000a11
 8000a00:	08000a1f 	.word	0x08000a1f
 8000a04:	08000a31 	.word	0x08000a31
 8000a08:	08000a3f 	.word	0x08000a3f
 8000a0c:	08000a4d 	.word	0x08000a4d
		{
			case STEPJ1:
			{
				TIM1->CCR2 = 0;
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <StepStop+0x84>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->ARR = 625-1;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <StepStop+0x84>)
 8000a18:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
			}
			case STEPJ2:
			{
				TIM2->CCR3 = 0;
 8000a1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a22:	2200      	movs	r2, #0
 8000a24:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM2->ARR = 625-1;
 8000a26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a2a:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
			}
			case STEPJ3:
			{
				TIM3->CCR1 = 0;
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <StepStop+0x88>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	635a      	str	r2, [r3, #52]	; 0x34
				TIM3->ARR = 625-1;
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <StepStop+0x88>)
 8000a38:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
			}
			case STEPJ4:
			{
				TIM4->CCR3 = 0;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <StepStop+0x8c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM4->ARR = 625-1;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <StepStop+0x8c>)
 8000a46:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
			}
			case STEPGripper:
			{
				TIM15->CCR2 = 0;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <StepStop+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	639a      	str	r2, [r3, #56]	; 0x38
				TIM15->ARR = 625-1;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <StepStop+0x90>)
 8000a54:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000a58:	62da      	str	r2, [r3, #44]	; 0x2c
//				TIM3->CCR1 = 0;
//				TIM4->CCR3 = 0;
//				TIM15->CCR2 = 0;
			}
		}
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40010000 	.word	0x40010000
 8000a6c:	40000400 	.word	0x40000400
 8000a70:	40000800 	.word	0x40000800
 8000a74:	40014000 	.word	0x40014000

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f001 fc78 	bl	8002370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f8ac 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f000 fdc0 	bl	8001608 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a88:	f000 fd76 	bl	8001578 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000a8c:	f000 fd28 	bl	80014e0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000a90:	f000 fa46 	bl	8000f20 <MX_TIM2_Init>
  MX_UART4_Init();
 8000a94:	f000 fcd8 	bl	8001448 <MX_UART4_Init>
  MX_TIM4_Init();
 8000a98:	f000 fb32 	bl	8001100 <MX_TIM4_Init>
  MX_SPI3_Init();
 8000a9c:	f000 f93c 	bl	8000d18 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000aa0:	f000 f990 	bl	8000dc4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000aa4:	f000 fab4 	bl	8001010 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000aa8:	f000 fba2 	bl	80011f0 <MX_TIM5_Init>
  MX_TIM15_Init();
 8000aac:	f000 fc28 	bl	8001300 <MX_TIM15_Init>
  MX_TIM12_Init();
 8000ab0:	f000 fbec 	bl	800128c <MX_TIM12_Init>
  MX_CRC_Init();
 8000ab4:	f000 f90e 	bl	8000cd4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2101      	movs	r1, #1
 8000abc:	4842      	ldr	r0, [pc, #264]	; (8000bc8 <main+0x150>)
 8000abe:	f004 fae7 	bl	8005090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	4841      	ldr	r0, [pc, #260]	; (8000bcc <main+0x154>)
 8000ac8:	f004 fae2 	bl	8005090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad2:	483d      	ldr	r0, [pc, #244]	; (8000bc8 <main+0x150>)
 8000ad4:	f004 fadc 	bl	8005090 <HAL_GPIO_WritePin>

//  HAL_TIM_Base_Start_IT(&htim5);
//  HAL_TIM_Base_Start_IT(&htim12);
//  TIM1->CCR2 = 0;
//  TIM2->CCR3 = 0;
  TIM3->CCR1 = 0;
 8000ad8:	4b3d      	ldr	r3, [pc, #244]	; (8000bd0 <main+0x158>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34
//  TIM15->CCR2 = 0;
//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
//  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
//  HAL_TIM_Base_Start(&htim4);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ade:	2100      	movs	r1, #0
 8000ae0:	483c      	ldr	r0, [pc, #240]	; (8000bd4 <main+0x15c>)
 8000ae2:	f007 f845 	bl	8007b70 <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
//  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);

  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000ae6:	4b3c      	ldr	r3, [pc, #240]	; (8000bd8 <main+0x160>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b3a      	ldr	r3, [pc, #232]	; (8000bd8 <main+0x160>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f042 0220 	orr.w	r2, r2, #32
 8000af4:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 8000af6:	4b38      	ldr	r3, [pc, #224]	; (8000bd8 <main+0x160>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <main+0x160>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b04:	601a      	str	r2, [r3, #0]
//	  if(State_Casade_Control_Timer)
//	  {
////		  HAL_TIM_Base_Start_IT(&htim12);
//		  State_Casade_Control_Timer = 0;
//	  }
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2101      	movs	r1, #1
 8000b0a:	482f      	ldr	r0, [pc, #188]	; (8000bc8 <main+0x150>)
 8000b0c:	f004 fac0 	bl	8005090 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	2102      	movs	r1, #2
 8000b14:	482d      	ldr	r0, [pc, #180]	; (8000bcc <main+0x154>)
 8000b16:	f004 fabb 	bl	8005090 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b20:	4829      	ldr	r0, [pc, #164]	; (8000bc8 <main+0x150>)
 8000b22:	f004 fab5 	bl	8005090 <HAL_GPIO_WritePin>
	  StepStop(STEPJ3);
 8000b26:	2003      	movs	r0, #3
 8000b28:	f7ff ff5c 	bl	80009e4 <StepStop>
	  HAL_Delay(3000);
 8000b2c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b30:	f001 fcb0 	bl	8002494 <HAL_Delay>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2101      	movs	r1, #1
 8000b38:	4823      	ldr	r0, [pc, #140]	; (8000bc8 <main+0x150>)
 8000b3a:	f004 faa9 	bl	8005090 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2102      	movs	r1, #2
 8000b42:	4822      	ldr	r0, [pc, #136]	; (8000bcc <main+0x154>)
 8000b44:	f004 faa4 	bl	8005090 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b4e:	481e      	ldr	r0, [pc, #120]	; (8000bc8 <main+0x150>)
 8000b50:	f004 fa9e 	bl	8005090 <HAL_GPIO_WritePin>
	  StepDriveRad(STEPJ3, 7.00);
 8000b54:	eeb1 0b0c 	vmov.f64	d0, #28	; 0x40e00000  7.0
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f7ff fd39 	bl	80005d0 <StepDriveRad>
	  HAL_Delay(1000);
 8000b5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b62:	f001 fc97 	bl	8002494 <HAL_Delay>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2101      	movs	r1, #1
 8000b6a:	4817      	ldr	r0, [pc, #92]	; (8000bc8 <main+0x150>)
 8000b6c:	f004 fa90 	bl	8005090 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2102      	movs	r1, #2
 8000b74:	4815      	ldr	r0, [pc, #84]	; (8000bcc <main+0x154>)
 8000b76:	f004 fa8b 	bl	8005090 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b80:	4811      	ldr	r0, [pc, #68]	; (8000bc8 <main+0x150>)
 8000b82:	f004 fa85 	bl	8005090 <HAL_GPIO_WritePin>
	  StepStop(STEPJ3);
 8000b86:	2003      	movs	r0, #3
 8000b88:	f7ff ff2c 	bl	80009e4 <StepStop>
	  HAL_Delay(3000);
 8000b8c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b90:	f001 fc80 	bl	8002494 <HAL_Delay>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2101      	movs	r1, #1
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <main+0x150>)
 8000b9a:	f004 fa79 	bl	8005090 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	480a      	ldr	r0, [pc, #40]	; (8000bcc <main+0x154>)
 8000ba4:	f004 fa74 	bl	8005090 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bae:	4806      	ldr	r0, [pc, #24]	; (8000bc8 <main+0x150>)
 8000bb0:	f004 fa6e 	bl	8005090 <HAL_GPIO_WritePin>
	  StepDriveRad(STEPJ3, -7.00);
 8000bb4:	eeb9 0b0c 	vmov.f64	d0, #156	; 0xc0e00000 -7.0
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f7ff fd09 	bl	80005d0 <StepDriveRad>
	  HAL_Delay(1000);
 8000bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bc2:	f001 fc67 	bl	8002494 <HAL_Delay>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000bc6:	e79e      	b.n	8000b06 <main+0x8e>
 8000bc8:	58020400 	.word	0x58020400
 8000bcc:	58021000 	.word	0x58021000
 8000bd0:	40000400 	.word	0x40000400
 8000bd4:	20000338 	.word	0x20000338
 8000bd8:	2000016c 	.word	0x2000016c

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b09c      	sub	sp, #112	; 0x70
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be6:	224c      	movs	r2, #76	; 0x4c
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f009 fdd6 	bl	800a79c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2220      	movs	r2, #32
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f009 fdd0 	bl	800a79c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bfc:	2002      	movs	r0, #2
 8000bfe:	f004 fa7b 	bl	80050f8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c02:	2300      	movs	r3, #0
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <SystemClock_Config+0xf0>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	4a30      	ldr	r2, [pc, #192]	; (8000ccc <SystemClock_Config+0xf0>)
 8000c0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c10:	6193      	str	r3, [r2, #24]
 8000c12:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <SystemClock_Config+0xf0>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <SystemClock_Config+0xf4>)
 8000c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c20:	4a2b      	ldr	r2, [pc, #172]	; (8000cd0 <SystemClock_Config+0xf4>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c28:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <SystemClock_Config+0xf4>)
 8000c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c34:	bf00      	nop
 8000c36:	4b25      	ldr	r3, [pc, #148]	; (8000ccc <SystemClock_Config+0xf0>)
 8000c38:	699b      	ldr	r3, [r3, #24]
 8000c3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c42:	d1f8      	bne.n	8000c36 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c44:	2302      	movs	r3, #2
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c4c:	2340      	movs	r3, #64	; 0x40
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c50:	2302      	movs	r3, #2
 8000c52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c54:	2300      	movs	r3, #0
 8000c56:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000c5c:	233c      	movs	r3, #60	; 0x3c
 8000c5e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000c64:	2306      	movs	r3, #6
 8000c66:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f004 fa75 	bl	800516c <HAL_RCC_OscConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000c88:	f000 fe4e 	bl	8001928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8c:	233f      	movs	r3, #63	; 0x3f
 8000c8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c90:	2303      	movs	r3, #3
 8000c92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c98:	2308      	movs	r3, #8
 8000c9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c9c:	2340      	movs	r3, #64	; 0x40
 8000c9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ca0:	2340      	movs	r3, #64	; 0x40
 8000ca2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000caa:	2340      	movs	r3, #64	; 0x40
 8000cac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2104      	movs	r1, #4
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f004 fe6a 	bl	800598c <HAL_RCC_ClockConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000cbe:	f000 fe33 	bl	8001928 <Error_Handler>
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3770      	adds	r7, #112	; 0x70
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	58024800 	.word	0x58024800
 8000cd0:	58000400 	.word	0x58000400

08000cd4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <MX_CRC_Init+0x3c>)
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <MX_CRC_Init+0x40>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_CRC_Init+0x3c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <MX_CRC_Init+0x3c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_CRC_Init+0x3c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <MX_CRC_Init+0x3c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_CRC_Init+0x3c>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_CRC_Init+0x3c>)
 8000cfe:	f001 fd09 	bl	8002714 <HAL_CRC_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d08:	f000 fe0e 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000248 	.word	0x20000248
 8000d14:	58024c00 	.word	0x58024c00

08000d18 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d1e:	4a28      	ldr	r2, [pc, #160]	; (8000dc0 <MX_SPI3_Init+0xa8>)
 8000d20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d22:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d28:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d2a:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d30:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d32:	2203      	movs	r2, #3
 8000d34:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d36:	4b21      	ldr	r3, [pc, #132]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d48:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d4a:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d50:	4b1a      	ldr	r3, [pc, #104]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d56:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d76:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000da6:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_SPI3_Init+0xa4>)
 8000da8:	f006 fcde 	bl	8007768 <HAL_SPI_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000db2:	f000 fdb9 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000384 	.word	0x20000384
 8000dc0:	40003c00 	.word	0x40003c00

08000dc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b09a      	sub	sp, #104	; 0x68
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
 8000df4:	615a      	str	r2, [r3, #20]
 8000df6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	222c      	movs	r2, #44	; 0x2c
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f009 fccc 	bl	800a79c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e04:	4b44      	ldr	r3, [pc, #272]	; (8000f18 <MX_TIM1_Init+0x154>)
 8000e06:	4a45      	ldr	r2, [pc, #276]	; (8000f1c <MX_TIM1_Init+0x158>)
 8000e08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8000e0a:	4b43      	ldr	r3, [pc, #268]	; (8000f18 <MX_TIM1_Init+0x154>)
 8000e0c:	22ef      	movs	r2, #239	; 0xef
 8000e0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e10:	4b41      	ldr	r3, [pc, #260]	; (8000f18 <MX_TIM1_Init+0x154>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625-1;
 8000e16:	4b40      	ldr	r3, [pc, #256]	; (8000f18 <MX_TIM1_Init+0x154>)
 8000e18:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000e1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1e:	4b3e      	ldr	r3, [pc, #248]	; (8000f18 <MX_TIM1_Init+0x154>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e24:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <MX_TIM1_Init+0x154>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2a:	4b3b      	ldr	r3, [pc, #236]	; (8000f18 <MX_TIM1_Init+0x154>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e30:	4839      	ldr	r0, [pc, #228]	; (8000f18 <MX_TIM1_Init+0x154>)
 8000e32:	f006 fdb6 	bl	80079a2 <HAL_TIM_Base_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e3c:	f000 fd74 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e44:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4832      	ldr	r0, [pc, #200]	; (8000f18 <MX_TIM1_Init+0x154>)
 8000e4e:	f007 fa5d 	bl	800830c <HAL_TIM_ConfigClockSource>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e58:	f000 fd66 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e5c:	482e      	ldr	r0, [pc, #184]	; (8000f18 <MX_TIM1_Init+0x154>)
 8000e5e:	f006 fe26 	bl	8007aae <HAL_TIM_PWM_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000e68:	f000 fd5e 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4826      	ldr	r0, [pc, #152]	; (8000f18 <MX_TIM1_Init+0x154>)
 8000e80:	f007 ff8c 	bl	8008d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000e8a:	f000 fd4d 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e8e:	2360      	movs	r3, #96	; 0x60
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000e92:	f240 1339 	movw	r3, #313	; 0x139
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4818      	ldr	r0, [pc, #96]	; (8000f18 <MX_TIM1_Init+0x154>)
 8000eb6:	f007 f919 	bl	80080ec <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000ec0:	f000 fd32 	bl	8001928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000edc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4807      	ldr	r0, [pc, #28]	; (8000f18 <MX_TIM1_Init+0x154>)
 8000efa:	f007 ffd7 	bl	8008eac <HAL_TIMEx_ConfigBreakDeadTime>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000f04:	f000 fd10 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f08:	4803      	ldr	r0, [pc, #12]	; (8000f18 <MX_TIM1_Init+0x154>)
 8000f0a:	f000 fe75 	bl	8001bf8 <HAL_TIM_MspPostInit>

}
 8000f0e:	bf00      	nop
 8000f10:	3768      	adds	r7, #104	; 0x68
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000414 	.word	0x20000414
 8000f1c:	40010000 	.word	0x40010000

08000f20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08e      	sub	sp, #56	; 0x38
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f40:	463b      	mov	r3, r7
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]
 8000f4e:	615a      	str	r2, [r3, #20]
 8000f50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f52:	4b2e      	ldr	r3, [pc, #184]	; (800100c <MX_TIM2_Init+0xec>)
 8000f54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8000f5a:	4b2c      	ldr	r3, [pc, #176]	; (800100c <MX_TIM2_Init+0xec>)
 8000f5c:	22ef      	movs	r2, #239	; 0xef
 8000f5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b2a      	ldr	r3, [pc, #168]	; (800100c <MX_TIM2_Init+0xec>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 8000f66:	4b29      	ldr	r3, [pc, #164]	; (800100c <MX_TIM2_Init+0xec>)
 8000f68:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000f6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6e:	4b27      	ldr	r3, [pc, #156]	; (800100c <MX_TIM2_Init+0xec>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f74:	4b25      	ldr	r3, [pc, #148]	; (800100c <MX_TIM2_Init+0xec>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f7a:	4824      	ldr	r0, [pc, #144]	; (800100c <MX_TIM2_Init+0xec>)
 8000f7c:	f006 fd11 	bl	80079a2 <HAL_TIM_Base_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f86:	f000 fccf 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f94:	4619      	mov	r1, r3
 8000f96:	481d      	ldr	r0, [pc, #116]	; (800100c <MX_TIM2_Init+0xec>)
 8000f98:	f007 f9b8 	bl	800830c <HAL_TIM_ConfigClockSource>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000fa2:	f000 fcc1 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fa6:	4819      	ldr	r0, [pc, #100]	; (800100c <MX_TIM2_Init+0xec>)
 8000fa8:	f006 fd81 	bl	8007aae <HAL_TIM_PWM_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000fb2:	f000 fcb9 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4811      	ldr	r0, [pc, #68]	; (800100c <MX_TIM2_Init+0xec>)
 8000fc6:	f007 fee9 	bl	8008d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000fd0:	f000 fcaa 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd4:	2360      	movs	r3, #96	; 0x60
 8000fd6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000fd8:	f240 1339 	movw	r3, #313	; 0x139
 8000fdc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2208      	movs	r2, #8
 8000fea:	4619      	mov	r1, r3
 8000fec:	4807      	ldr	r0, [pc, #28]	; (800100c <MX_TIM2_Init+0xec>)
 8000fee:	f007 f87d 	bl	80080ec <HAL_TIM_PWM_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000ff8:	f000 fc96 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <MX_TIM2_Init+0xec>)
 8000ffe:	f000 fdfb 	bl	8001bf8 <HAL_TIM_MspPostInit>

}
 8001002:	bf00      	nop
 8001004:	3738      	adds	r7, #56	; 0x38
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200004f4 	.word	0x200004f4

08001010 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08e      	sub	sp, #56	; 0x38
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001030:	463b      	mov	r3, r7
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]
 800103e:	615a      	str	r2, [r3, #20]
 8001040:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001042:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <MX_TIM3_Init+0xe8>)
 8001044:	4a2d      	ldr	r2, [pc, #180]	; (80010fc <MX_TIM3_Init+0xec>)
 8001046:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 8001048:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <MX_TIM3_Init+0xe8>)
 800104a:	22ef      	movs	r2, #239	; 0xef
 800104c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104e:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <MX_TIM3_Init+0xe8>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625-1;
 8001054:	4b28      	ldr	r3, [pc, #160]	; (80010f8 <MX_TIM3_Init+0xe8>)
 8001056:	f44f 721c 	mov.w	r2, #624	; 0x270
 800105a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105c:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <MX_TIM3_Init+0xe8>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001062:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <MX_TIM3_Init+0xe8>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001068:	4823      	ldr	r0, [pc, #140]	; (80010f8 <MX_TIM3_Init+0xe8>)
 800106a:	f006 fc9a 	bl	80079a2 <HAL_TIM_Base_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001074:	f000 fc58 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800107e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001082:	4619      	mov	r1, r3
 8001084:	481c      	ldr	r0, [pc, #112]	; (80010f8 <MX_TIM3_Init+0xe8>)
 8001086:	f007 f941 	bl	800830c <HAL_TIM_ConfigClockSource>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001090:	f000 fc4a 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001094:	4818      	ldr	r0, [pc, #96]	; (80010f8 <MX_TIM3_Init+0xe8>)
 8001096:	f006 fd0a 	bl	8007aae <HAL_TIM_PWM_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80010a0:	f000 fc42 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010ac:	f107 031c 	add.w	r3, r7, #28
 80010b0:	4619      	mov	r1, r3
 80010b2:	4811      	ldr	r0, [pc, #68]	; (80010f8 <MX_TIM3_Init+0xe8>)
 80010b4:	f007 fe72 	bl	8008d9c <HAL_TIMEx_MasterConfigSynchronization>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80010be:	f000 fc33 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c2:	2360      	movs	r3, #96	; 0x60
 80010c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80010c6:	f240 1339 	movw	r3, #313	; 0x139
 80010ca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d4:	463b      	mov	r3, r7
 80010d6:	2200      	movs	r2, #0
 80010d8:	4619      	mov	r1, r3
 80010da:	4807      	ldr	r0, [pc, #28]	; (80010f8 <MX_TIM3_Init+0xe8>)
 80010dc:	f007 f806 	bl	80080ec <HAL_TIM_PWM_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80010e6:	f000 fc1f 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010ea:	4803      	ldr	r0, [pc, #12]	; (80010f8 <MX_TIM3_Init+0xe8>)
 80010ec:	f000 fd84 	bl	8001bf8 <HAL_TIM_MspPostInit>

}
 80010f0:	bf00      	nop
 80010f2:	3738      	adds	r7, #56	; 0x38
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000338 	.word	0x20000338
 80010fc:	40000400 	.word	0x40000400

08001100 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08e      	sub	sp, #56	; 0x38
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001106:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001120:	463b      	mov	r3, r7
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	615a      	str	r2, [r3, #20]
 8001130:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001132:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <MX_TIM4_Init+0xe8>)
 8001134:	4a2d      	ldr	r2, [pc, #180]	; (80011ec <MX_TIM4_Init+0xec>)
 8001136:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8001138:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <MX_TIM4_Init+0xe8>)
 800113a:	22ef      	movs	r2, #239	; 0xef
 800113c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113e:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <MX_TIM4_Init+0xe8>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 8001144:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <MX_TIM4_Init+0xe8>)
 8001146:	f44f 721c 	mov.w	r2, #624	; 0x270
 800114a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114c:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <MX_TIM4_Init+0xe8>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <MX_TIM4_Init+0xe8>)
 8001154:	2280      	movs	r2, #128	; 0x80
 8001156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001158:	4823      	ldr	r0, [pc, #140]	; (80011e8 <MX_TIM4_Init+0xe8>)
 800115a:	f006 fc22 	bl	80079a2 <HAL_TIM_Base_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001164:	f000 fbe0 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800116e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001172:	4619      	mov	r1, r3
 8001174:	481c      	ldr	r0, [pc, #112]	; (80011e8 <MX_TIM4_Init+0xe8>)
 8001176:	f007 f8c9 	bl	800830c <HAL_TIM_ConfigClockSource>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001180:	f000 fbd2 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001184:	4818      	ldr	r0, [pc, #96]	; (80011e8 <MX_TIM4_Init+0xe8>)
 8001186:	f006 fc92 	bl	8007aae <HAL_TIM_PWM_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001190:	f000 fbca 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4619      	mov	r1, r3
 80011a2:	4811      	ldr	r0, [pc, #68]	; (80011e8 <MX_TIM4_Init+0xe8>)
 80011a4:	f007 fdfa 	bl	8008d9c <HAL_TIMEx_MasterConfigSynchronization>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80011ae:	f000 fbbb 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b2:	2360      	movs	r3, #96	; 0x60
 80011b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80011b6:	f240 1339 	movw	r3, #313	; 0x139
 80011ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011c4:	463b      	mov	r3, r7
 80011c6:	2208      	movs	r2, #8
 80011c8:	4619      	mov	r1, r3
 80011ca:	4807      	ldr	r0, [pc, #28]	; (80011e8 <MX_TIM4_Init+0xe8>)
 80011cc:	f006 ff8e 	bl	80080ec <HAL_TIM_PWM_ConfigChannel>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80011d6:	f000 fba7 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011da:	4803      	ldr	r0, [pc, #12]	; (80011e8 <MX_TIM4_Init+0xe8>)
 80011dc:	f000 fd0c 	bl	8001bf8 <HAL_TIM_MspPostInit>

}
 80011e0:	bf00      	nop
 80011e2:	3738      	adds	r7, #56	; 0x38
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200000a8 	.word	0x200000a8
 80011ec:	40000800 	.word	0x40000800

080011f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <MX_TIM5_Init+0x94>)
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <MX_TIM5_Init+0x98>)
 8001212:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <MX_TIM5_Init+0x94>)
 8001216:	22ef      	movs	r2, #239	; 0xef
 8001218:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_TIM5_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_TIM5_Init+0x94>)
 8001222:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001226:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <MX_TIM5_Init+0x94>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <MX_TIM5_Init+0x94>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001234:	4813      	ldr	r0, [pc, #76]	; (8001284 <MX_TIM5_Init+0x94>)
 8001236:	f006 fbb4 	bl	80079a2 <HAL_TIM_Base_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001240:	f000 fb72 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001248:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	4619      	mov	r1, r3
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <MX_TIM5_Init+0x94>)
 8001252:	f007 f85b 	bl	800830c <HAL_TIM_ConfigClockSource>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800125c:	f000 fb64 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001260:	2300      	movs	r3, #0
 8001262:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_TIM5_Init+0x94>)
 800126e:	f007 fd95 	bl	8008d9c <HAL_TIMEx_MasterConfigSynchronization>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001278:	f000 fb56 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	3720      	adds	r7, #32
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200002e8 	.word	0x200002e8
 8001288:	40000c00 	.word	0x40000c00

0800128c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	463b      	mov	r3, r7
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <MX_TIM12_Init+0x6c>)
 80012a0:	4a16      	ldr	r2, [pc, #88]	; (80012fc <MX_TIM12_Init+0x70>)
 80012a2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 240-1;
 80012a4:	4b14      	ldr	r3, [pc, #80]	; (80012f8 <MX_TIM12_Init+0x6c>)
 80012a6:	22ef      	movs	r2, #239	; 0xef
 80012a8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <MX_TIM12_Init+0x6c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 500-1;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <MX_TIM12_Init+0x6c>)
 80012b2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80012b6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <MX_TIM12_Init+0x6c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <MX_TIM12_Init+0x6c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <MX_TIM12_Init+0x6c>)
 80012c6:	f006 fb6c 	bl	80079a2 <HAL_TIM_Base_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80012d0:	f000 fb2a 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80012da:	463b      	mov	r3, r7
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MX_TIM12_Init+0x6c>)
 80012e0:	f007 f814 	bl	800830c <HAL_TIM_ConfigClockSource>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80012ea:	f000 fb1d 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000540 	.word	0x20000540
 80012fc:	40001800 	.word	0x40001800

08001300 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b09a      	sub	sp, #104	; 0x68
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001314:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001320:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
 8001330:	615a      	str	r2, [r3, #20]
 8001332:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	222c      	movs	r2, #44	; 0x2c
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f009 fa2e 	bl	800a79c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001340:	4b3f      	ldr	r3, [pc, #252]	; (8001440 <MX_TIM15_Init+0x140>)
 8001342:	4a40      	ldr	r2, [pc, #256]	; (8001444 <MX_TIM15_Init+0x144>)
 8001344:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8001346:	4b3e      	ldr	r3, [pc, #248]	; (8001440 <MX_TIM15_Init+0x140>)
 8001348:	22ef      	movs	r2, #239	; 0xef
 800134a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b3c      	ldr	r3, [pc, #240]	; (8001440 <MX_TIM15_Init+0x140>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 625-1;
 8001352:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <MX_TIM15_Init+0x140>)
 8001354:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001358:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135a:	4b39      	ldr	r3, [pc, #228]	; (8001440 <MX_TIM15_Init+0x140>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001360:	4b37      	ldr	r3, [pc, #220]	; (8001440 <MX_TIM15_Init+0x140>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001366:	4b36      	ldr	r3, [pc, #216]	; (8001440 <MX_TIM15_Init+0x140>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800136c:	4834      	ldr	r0, [pc, #208]	; (8001440 <MX_TIM15_Init+0x140>)
 800136e:	f006 fb18 	bl	80079a2 <HAL_TIM_Base_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001378:	f000 fad6 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800137c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001380:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001382:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001386:	4619      	mov	r1, r3
 8001388:	482d      	ldr	r0, [pc, #180]	; (8001440 <MX_TIM15_Init+0x140>)
 800138a:	f006 ffbf 	bl	800830c <HAL_TIM_ConfigClockSource>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001394:	f000 fac8 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001398:	4829      	ldr	r0, [pc, #164]	; (8001440 <MX_TIM15_Init+0x140>)
 800139a:	f006 fb88 	bl	8007aae <HAL_TIM_PWM_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80013a4:	f000 fac0 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80013b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013b4:	4619      	mov	r1, r3
 80013b6:	4822      	ldr	r0, [pc, #136]	; (8001440 <MX_TIM15_Init+0x140>)
 80013b8:	f007 fcf0 	bl	8008d9c <HAL_TIMEx_MasterConfigSynchronization>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80013c2:	f000 fab1 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013c6:	2360      	movs	r3, #96	; 0x60
 80013c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80013ca:	f240 1339 	movw	r3, #313	; 0x139
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d0:	2300      	movs	r3, #0
 80013d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013d4:	2300      	movs	r3, #0
 80013d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013e8:	2204      	movs	r2, #4
 80013ea:	4619      	mov	r1, r3
 80013ec:	4814      	ldr	r0, [pc, #80]	; (8001440 <MX_TIM15_Init+0x140>)
 80013ee:	f006 fe7d 	bl	80080ec <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80013f8:	f000 fa96 	bl	8001928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001414:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	4619      	mov	r1, r3
 8001422:	4807      	ldr	r0, [pc, #28]	; (8001440 <MX_TIM15_Init+0x140>)
 8001424:	f007 fd42 	bl	8008eac <HAL_TIMEx_ConfigBreakDeadTime>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 800142e:	f000 fa7b 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001432:	4803      	ldr	r0, [pc, #12]	; (8001440 <MX_TIM15_Init+0x140>)
 8001434:	f000 fbe0 	bl	8001bf8 <HAL_TIM_MspPostInit>

}
 8001438:	bf00      	nop
 800143a:	3768      	adds	r7, #104	; 0x68
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200001fc 	.word	0x200001fc
 8001444:	40014000 	.word	0x40014000

08001448 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800144c:	4b22      	ldr	r3, [pc, #136]	; (80014d8 <MX_UART4_Init+0x90>)
 800144e:	4a23      	ldr	r2, [pc, #140]	; (80014dc <MX_UART4_Init+0x94>)
 8001450:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001452:	4b21      	ldr	r3, [pc, #132]	; (80014d8 <MX_UART4_Init+0x90>)
 8001454:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001458:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <MX_UART4_Init+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <MX_UART4_Init+0x90>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001466:	4b1c      	ldr	r3, [pc, #112]	; (80014d8 <MX_UART4_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <MX_UART4_Init+0x90>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <MX_UART4_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <MX_UART4_Init+0x90>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <MX_UART4_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001484:	4b14      	ldr	r3, [pc, #80]	; (80014d8 <MX_UART4_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <MX_UART4_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001490:	4811      	ldr	r0, [pc, #68]	; (80014d8 <MX_UART4_Init+0x90>)
 8001492:	f007 fda7 	bl	8008fe4 <HAL_UART_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800149c:	f000 fa44 	bl	8001928 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a0:	2100      	movs	r1, #0
 80014a2:	480d      	ldr	r0, [pc, #52]	; (80014d8 <MX_UART4_Init+0x90>)
 80014a4:	f009 f845 	bl	800a532 <HAL_UARTEx_SetTxFifoThreshold>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80014ae:	f000 fa3b 	bl	8001928 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b2:	2100      	movs	r1, #0
 80014b4:	4808      	ldr	r0, [pc, #32]	; (80014d8 <MX_UART4_Init+0x90>)
 80014b6:	f009 f87a 	bl	800a5ae <HAL_UARTEx_SetRxFifoThreshold>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80014c0:	f000 fa32 	bl	8001928 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <MX_UART4_Init+0x90>)
 80014c6:	f008 fffb 	bl	800a4c0 <HAL_UARTEx_DisableFifoMode>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80014d0:	f000 fa2a 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000460 	.word	0x20000460
 80014dc:	40004c00 	.word	0x40004c00

080014e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <MX_USART3_UART_Init+0x90>)
 80014e6:	4a23      	ldr	r2, [pc, #140]	; (8001574 <MX_USART3_UART_Init+0x94>)
 80014e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <MX_USART3_UART_Init+0x90>)
 80014ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <MX_USART3_UART_Init+0x90>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014f8:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <MX_USART3_UART_Init+0x90>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <MX_USART3_UART_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_USART3_UART_Init+0x90>)
 8001506:	220c      	movs	r2, #12
 8001508:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <MX_USART3_UART_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_USART3_UART_Init+0x90>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <MX_USART3_UART_Init+0x90>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_USART3_UART_Init+0x90>)
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <MX_USART3_UART_Init+0x90>)
 8001524:	2200      	movs	r2, #0
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001528:	4811      	ldr	r0, [pc, #68]	; (8001570 <MX_USART3_UART_Init+0x90>)
 800152a:	f007 fd5b 	bl	8008fe4 <HAL_UART_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001534:	f000 f9f8 	bl	8001928 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001538:	2100      	movs	r1, #0
 800153a:	480d      	ldr	r0, [pc, #52]	; (8001570 <MX_USART3_UART_Init+0x90>)
 800153c:	f008 fff9 	bl	800a532 <HAL_UARTEx_SetTxFifoThreshold>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001546:	f000 f9ef 	bl	8001928 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800154a:	2100      	movs	r1, #0
 800154c:	4808      	ldr	r0, [pc, #32]	; (8001570 <MX_USART3_UART_Init+0x90>)
 800154e:	f009 f82e 	bl	800a5ae <HAL_UARTEx_SetRxFifoThreshold>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001558:	f000 f9e6 	bl	8001928 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MX_USART3_UART_Init+0x90>)
 800155e:	f008 ffaf 	bl	800a4c0 <HAL_UARTEx_DisableFifoMode>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001568:	f000 f9de 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2000016c 	.word	0x2000016c
 8001574:	40004800 	.word	0x40004800

08001578 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <MX_DMA_Init+0x8c>)
 8001580:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001584:	4a1f      	ldr	r2, [pc, #124]	; (8001604 <MX_DMA_Init+0x8c>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800158e:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <MX_DMA_Init+0x8c>)
 8001590:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <MX_DMA_Init+0x8c>)
 800159e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015a2:	4a18      	ldr	r2, [pc, #96]	; (8001604 <MX_DMA_Init+0x8c>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <MX_DMA_Init+0x8c>)
 80015ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	200c      	movs	r0, #12
 80015c0:	f001 f873 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80015c4:	200c      	movs	r0, #12
 80015c6:	f001 f88a 	bl	80026de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	200d      	movs	r0, #13
 80015d0:	f001 f86b 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80015d4:	200d      	movs	r0, #13
 80015d6:	f001 f882 	bl	80026de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	2038      	movs	r0, #56	; 0x38
 80015e0:	f001 f863 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015e4:	2038      	movs	r0, #56	; 0x38
 80015e6:	f001 f87a 	bl	80026de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	2039      	movs	r0, #57	; 0x39
 80015f0:	f001 f85b 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80015f4:	2039      	movs	r0, #57	; 0x39
 80015f6:	f001 f872 	bl	80026de <HAL_NVIC_EnableIRQ>

}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	58024400 	.word	0x58024400

08001608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08c      	sub	sp, #48	; 0x30
 800160c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800161e:	4b82      	ldr	r3, [pc, #520]	; (8001828 <MX_GPIO_Init+0x220>)
 8001620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001624:	4a80      	ldr	r2, [pc, #512]	; (8001828 <MX_GPIO_Init+0x220>)
 8001626:	f043 0310 	orr.w	r3, r3, #16
 800162a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800162e:	4b7e      	ldr	r3, [pc, #504]	; (8001828 <MX_GPIO_Init+0x220>)
 8001630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163c:	4b7a      	ldr	r3, [pc, #488]	; (8001828 <MX_GPIO_Init+0x220>)
 800163e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001642:	4a79      	ldr	r2, [pc, #484]	; (8001828 <MX_GPIO_Init+0x220>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800164c:	4b76      	ldr	r3, [pc, #472]	; (8001828 <MX_GPIO_Init+0x220>)
 800164e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800165a:	4b73      	ldr	r3, [pc, #460]	; (8001828 <MX_GPIO_Init+0x220>)
 800165c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001660:	4a71      	ldr	r2, [pc, #452]	; (8001828 <MX_GPIO_Init+0x220>)
 8001662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001666:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800166a:	4b6f      	ldr	r3, [pc, #444]	; (8001828 <MX_GPIO_Init+0x220>)
 800166c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001678:	4b6b      	ldr	r3, [pc, #428]	; (8001828 <MX_GPIO_Init+0x220>)
 800167a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167e:	4a6a      	ldr	r2, [pc, #424]	; (8001828 <MX_GPIO_Init+0x220>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001688:	4b67      	ldr	r3, [pc, #412]	; (8001828 <MX_GPIO_Init+0x220>)
 800168a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	4b64      	ldr	r3, [pc, #400]	; (8001828 <MX_GPIO_Init+0x220>)
 8001698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169c:	4a62      	ldr	r2, [pc, #392]	; (8001828 <MX_GPIO_Init+0x220>)
 800169e:	f043 0302 	orr.w	r3, r3, #2
 80016a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a6:	4b60      	ldr	r3, [pc, #384]	; (8001828 <MX_GPIO_Init+0x220>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b4:	4b5c      	ldr	r3, [pc, #368]	; (8001828 <MX_GPIO_Init+0x220>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ba:	4a5b      	ldr	r2, [pc, #364]	; (8001828 <MX_GPIO_Init+0x220>)
 80016bc:	f043 0308 	orr.w	r3, r3, #8
 80016c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c4:	4b58      	ldr	r3, [pc, #352]	; (8001828 <MX_GPIO_Init+0x220>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	607b      	str	r3, [r7, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016d2:	4b55      	ldr	r3, [pc, #340]	; (8001828 <MX_GPIO_Init+0x220>)
 80016d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d8:	4a53      	ldr	r2, [pc, #332]	; (8001828 <MX_GPIO_Init+0x220>)
 80016da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e2:	4b51      	ldr	r3, [pc, #324]	; (8001828 <MX_GPIO_Init+0x220>)
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ec:	603b      	str	r3, [r7, #0]
 80016ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80016f0:	2200      	movs	r2, #0
 80016f2:	f644 2121 	movw	r1, #18977	; 0x4a21
 80016f6:	484d      	ldr	r0, [pc, #308]	; (800182c <MX_GPIO_Init+0x224>)
 80016f8:	f003 fcca 	bl	8005090 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f24c 0102 	movw	r1, #49154	; 0xc002
 8001702:	484b      	ldr	r0, [pc, #300]	; (8001830 <MX_GPIO_Init+0x228>)
 8001704:	f003 fcc4 	bl	8005090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800170e:	4849      	ldr	r0, [pc, #292]	; (8001834 <MX_GPIO_Init+0x22c>)
 8001710:	f003 fcbe 	bl	8005090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	f44f 7100 	mov.w	r1, #512	; 0x200
 800171a:	4847      	ldr	r0, [pc, #284]	; (8001838 <MX_GPIO_Init+0x230>)
 800171c:	f003 fcb8 	bl	8005090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin;
 8001720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001726:	4b45      	ldr	r3, [pc, #276]	; (800183c <MX_GPIO_Init+0x234>)
 8001728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 031c 	add.w	r3, r7, #28
 8001732:	4619      	mov	r1, r3
 8001734:	4840      	ldr	r0, [pc, #256]	; (8001838 <MX_GPIO_Init+0x230>)
 8001736:	f003 fafb 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 800173a:	f644 2321 	movw	r3, #18977	; 0x4a21
 800173e:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	2301      	movs	r3, #1
 8001742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	4619      	mov	r1, r3
 8001752:	4836      	ldr	r0, [pc, #216]	; (800182c <MX_GPIO_Init+0x224>)
 8001754:	f003 faec 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8001758:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800175e:	4b37      	ldr	r3, [pc, #220]	; (800183c <MX_GPIO_Init+0x234>)
 8001760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	4830      	ldr	r0, [pc, #192]	; (8001830 <MX_GPIO_Init+0x228>)
 800176e:	f003 fadf 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001772:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	2301      	movs	r3, #1
 800177a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	4829      	ldr	r0, [pc, #164]	; (8001830 <MX_GPIO_Init+0x228>)
 800178c:	f003 fad0 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4822      	ldr	r0, [pc, #136]	; (8001834 <MX_GPIO_Init+0x22c>)
 80017aa:	f003 fac1 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80017ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b4:	2301      	movs	r3, #1
 80017b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	481c      	ldr	r0, [pc, #112]	; (8001838 <MX_GPIO_Init+0x230>)
 80017c8:	f003 fab2 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 80017cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_GPIO_Init+0x234>)
 80017d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 80017da:	f107 031c 	add.w	r3, r7, #28
 80017de:	4619      	mov	r1, r3
 80017e0:	4817      	ldr	r0, [pc, #92]	; (8001840 <MX_GPIO_Init+0x238>)
 80017e2:	f003 faa5 	bl	8004d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 80017e6:	23c0      	movs	r3, #192	; 0xc0
 80017e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_GPIO_Init+0x234>)
 80017ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	4619      	mov	r1, r3
 80017f8:	480c      	ldr	r0, [pc, #48]	; (800182c <MX_GPIO_Init+0x224>)
 80017fa:	f003 fa99 	bl	8004d30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2103      	movs	r1, #3
 8001802:	2017      	movs	r0, #23
 8001804:	f000 ff51 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001808:	2017      	movs	r0, #23
 800180a:	f000 ff68 	bl	80026de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2103      	movs	r1, #3
 8001812:	2028      	movs	r0, #40	; 0x28
 8001814:	f000 ff49 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001818:	2028      	movs	r0, #40	; 0x28
 800181a:	f000 ff60 	bl	80026de <HAL_NVIC_EnableIRQ>

}
 800181e:	bf00      	nop
 8001820:	3730      	adds	r7, #48	; 0x30
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	58024400 	.word	0x58024400
 800182c:	58020400 	.word	0x58020400
 8001830:	58021000 	.word	0x58021000
 8001834:	58020c00 	.word	0x58020c00
 8001838:	58020800 	.word	0x58020800
 800183c:	11110000 	.word	0x11110000
 8001840:	58021800 	.word	0x58021800

08001844 <HAL_UART_TxCpltCallback>:
		}
		HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, BUFFSIZE);
	}
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LM1_Pin || GPIO_Pin == LM2_Pin || GPIO_Pin == LM3_Pin || GPIO_Pin == LM4_Pin || GPIO_Pin == LM5_Pin || GPIO_Pin == Blue_Button_Pin)
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001868:	d011      	beq.n	800188e <HAL_GPIO_EXTI_Callback+0x36>
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001870:	d00d      	beq.n	800188e <HAL_GPIO_EXTI_Callback+0x36>
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	2b80      	cmp	r3, #128	; 0x80
 8001876:	d00a      	beq.n	800188e <HAL_GPIO_EXTI_Callback+0x36>
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	2b40      	cmp	r3, #64	; 0x40
 800187c:	d007      	beq.n	800188e <HAL_GPIO_EXTI_Callback+0x36>
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001884:	d003      	beq.n	800188e <HAL_GPIO_EXTI_Callback+0x36>
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800188c:	d12b      	bne.n	80018e6 <HAL_GPIO_EXTI_Callback+0x8e>
	{

		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	2101      	movs	r1, #1
 8001892:	4817      	ldr	r0, [pc, #92]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x98>)
 8001894:	f003 fbfc 	bl	8005090 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	2102      	movs	r1, #2
 800189c:	4815      	ldr	r0, [pc, #84]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x9c>)
 800189e:	f003 fbf7 	bl	8005090 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80018a2:	2201      	movs	r2, #1
 80018a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018a8:	4811      	ldr	r0, [pc, #68]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x98>)
 80018aa:	f003 fbf1 	bl	8005090 <HAL_GPIO_WritePin>

		  HAL_TIM_Base_Stop_IT(&htim5);
 80018ae:	4812      	ldr	r0, [pc, #72]	; (80018f8 <HAL_GPIO_EXTI_Callback+0xa0>)
 80018b0:	f006 f8ce 	bl	8007a50 <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_Stop_IT(&htim12);
 80018b4:	4811      	ldr	r0, [pc, #68]	; (80018fc <HAL_GPIO_EXTI_Callback+0xa4>)
 80018b6:	f006 f8cb 	bl	8007a50 <HAL_TIM_Base_Stop_IT>

		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80018ba:	2104      	movs	r1, #4
 80018bc:	4810      	ldr	r0, [pc, #64]	; (8001900 <HAL_GPIO_EXTI_Callback+0xa8>)
 80018be:	f006 fa5f 	bl	8007d80 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80018c2:	2108      	movs	r1, #8
 80018c4:	480f      	ldr	r0, [pc, #60]	; (8001904 <HAL_GPIO_EXTI_Callback+0xac>)
 80018c6:	f006 fa5b 	bl	8007d80 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80018ca:	2100      	movs	r1, #0
 80018cc:	480e      	ldr	r0, [pc, #56]	; (8001908 <HAL_GPIO_EXTI_Callback+0xb0>)
 80018ce:	f006 fa57 	bl	8007d80 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 80018d2:	2108      	movs	r1, #8
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <HAL_GPIO_EXTI_Callback+0xb4>)
 80018d6:	f006 fa53 	bl	8007d80 <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 80018da:	2104      	movs	r1, #4
 80018dc:	480c      	ldr	r0, [pc, #48]	; (8001910 <HAL_GPIO_EXTI_Callback+0xb8>)
 80018de:	f006 fa4f 	bl	8007d80 <HAL_TIM_PWM_Stop>
		  Error_Handler();
 80018e2:	f000 f821 	bl	8001928 <Error_Handler>

	}
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	58020400 	.word	0x58020400
 80018f4:	58021000 	.word	0x58021000
 80018f8:	200002e8 	.word	0x200002e8
 80018fc:	20000540 	.word	0x20000540
 8001900:	20000414 	.word	0x20000414
 8001904:	200004f4 	.word	0x200004f4
 8001908:	20000338 	.word	0x20000338
 800190c:	200000a8 	.word	0x200000a8
 8001910:	200001fc 	.word	0x200001fc

08001914 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Timer12 Interrupt Trajectory*/
  if (htim == &htim12)
  {

  }
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001930:	e7fe      	b.n	8001930 <Error_Handler+0x8>
	...

08001934 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_MspInit+0x30>)
 800193c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001940:	4a08      	ldr	r2, [pc, #32]	; (8001964 <HAL_MspInit+0x30>)
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_MspInit+0x30>)
 800194c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	58024400 	.word	0x58024400

08001968 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0b      	ldr	r2, [pc, #44]	; (80019a4 <HAL_CRC_MspInit+0x3c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d10e      	bne.n	8001998 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_CRC_MspInit+0x40>)
 800197c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001980:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <HAL_CRC_MspInit+0x40>)
 8001982:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <HAL_CRC_MspInit+0x40>)
 800198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001990:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	58024c00 	.word	0x58024c00
 80019a8:	58024400 	.word	0x58024400

080019ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b0b8      	sub	sp, #224	; 0xe0
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c4:	f107 0310 	add.w	r3, r7, #16
 80019c8:	22bc      	movs	r2, #188	; 0xbc
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f008 fee5 	bl	800a79c <memset>
  if(hspi->Instance==SPI3)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a25      	ldr	r2, [pc, #148]	; (8001a6c <HAL_SPI_MspInit+0xc0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d142      	bne.n	8001a62 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80019dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e6:	f107 0310 	add.w	r3, r7, #16
 80019ea:	4618      	mov	r0, r3
 80019ec:	f004 fb5a 	bl	80060a4 <HAL_RCCEx_PeriphCLKConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80019f6:	f7ff ff97 	bl	8001928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_SPI_MspInit+0xc4>)
 80019fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a00:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <HAL_SPI_MspInit+0xc4>)
 8001a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a0a:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <HAL_SPI_MspInit+0xc4>)
 8001a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_SPI_MspInit+0xc4>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1e:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <HAL_SPI_MspInit+0xc4>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_SPI_MspInit+0xc4>)
 8001a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a36:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a50:	2306      	movs	r3, #6
 8001a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a56:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <HAL_SPI_MspInit+0xc8>)
 8001a5e:	f003 f967 	bl	8004d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	37e0      	adds	r7, #224	; 0xe0
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40003c00 	.word	0x40003c00
 8001a70:	58024400 	.word	0x58024400
 8001a74:	58020800 	.word	0x58020800

08001a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a55      	ldr	r2, [pc, #340]	; (8001bdc <HAL_TIM_Base_MspInit+0x164>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d10f      	bne.n	8001aaa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a8a:	4b55      	ldr	r3, [pc, #340]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001a8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a90:	4a53      	ldr	r2, [pc, #332]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a9a:	4b51      	ldr	r3, [pc, #324]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001aa8:	e094      	b.n	8001bd4 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab2:	d10f      	bne.n	8001ad4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ab4:	4b4a      	ldr	r3, [pc, #296]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001ab6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aba:	4a49      	ldr	r2, [pc, #292]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ac4:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001ac6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	623b      	str	r3, [r7, #32]
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
}
 8001ad2:	e07f      	b.n	8001bd4 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM3)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a42      	ldr	r2, [pc, #264]	; (8001be4 <HAL_TIM_Base_MspInit+0x16c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d10f      	bne.n	8001afe <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ade:	4b40      	ldr	r3, [pc, #256]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ae4:	4a3e      	ldr	r2, [pc, #248]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001ae6:	f043 0302 	orr.w	r3, r3, #2
 8001aea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001aee:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	69fb      	ldr	r3, [r7, #28]
}
 8001afc:	e06a      	b.n	8001bd4 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM4)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a39      	ldr	r2, [pc, #228]	; (8001be8 <HAL_TIM_Base_MspInit+0x170>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d10f      	bne.n	8001b28 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b08:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b0e:	4a34      	ldr	r2, [pc, #208]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b18:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001b1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	69bb      	ldr	r3, [r7, #24]
}
 8001b26:	e055      	b.n	8001bd4 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM5)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a2f      	ldr	r2, [pc, #188]	; (8001bec <HAL_TIM_Base_MspInit+0x174>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d117      	bne.n	8001b62 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b32:	4b2b      	ldr	r3, [pc, #172]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001b34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b38:	4a29      	ldr	r2, [pc, #164]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001b3a:	f043 0308 	orr.w	r3, r3, #8
 8001b3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b42:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001b44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	2032      	movs	r0, #50	; 0x32
 8001b56:	f000 fda8 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b5a:	2032      	movs	r0, #50	; 0x32
 8001b5c:	f000 fdbf 	bl	80026de <HAL_NVIC_EnableIRQ>
}
 8001b60:	e038      	b.n	8001bd4 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM12)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a22      	ldr	r2, [pc, #136]	; (8001bf0 <HAL_TIM_Base_MspInit+0x178>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d117      	bne.n	8001b9c <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001b6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b72:	4a1b      	ldr	r2, [pc, #108]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b78:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001b7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	202b      	movs	r0, #43	; 0x2b
 8001b90:	f000 fd8b 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001b94:	202b      	movs	r0, #43	; 0x2b
 8001b96:	f000 fda2 	bl	80026de <HAL_NVIC_EnableIRQ>
}
 8001b9a:	e01b      	b.n	8001bd4 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM15)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a14      	ldr	r2, [pc, #80]	; (8001bf4 <HAL_TIM_Base_MspInit+0x17c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d116      	bne.n	8001bd4 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bac:	4a0c      	ldr	r2, [pc, #48]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001bae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_TIM_Base_MspInit+0x168>)
 8001bb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	2074      	movs	r0, #116	; 0x74
 8001bca:	f000 fd6e 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001bce:	2074      	movs	r0, #116	; 0x74
 8001bd0:	f000 fd85 	bl	80026de <HAL_NVIC_EnableIRQ>
}
 8001bd4:	bf00      	nop
 8001bd6:	3728      	adds	r7, #40	; 0x28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40010000 	.word	0x40010000
 8001be0:	58024400 	.word	0x58024400
 8001be4:	40000400 	.word	0x40000400
 8001be8:	40000800 	.word	0x40000800
 8001bec:	40000c00 	.word	0x40000c00
 8001bf0:	40001800 	.word	0x40001800
 8001bf4:	40014000 	.word	0x40014000

08001bf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08c      	sub	sp, #48	; 0x30
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a5e      	ldr	r2, [pc, #376]	; (8001d90 <HAL_TIM_MspPostInit+0x198>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d120      	bne.n	8001c5c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c1a:	4b5e      	ldr	r3, [pc, #376]	; (8001d94 <HAL_TIM_MspPostInit+0x19c>)
 8001c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c20:	4a5c      	ldr	r2, [pc, #368]	; (8001d94 <HAL_TIM_MspPostInit+0x19c>)
 8001c22:	f043 0310 	orr.w	r3, r3, #16
 8001c26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c2a:	4b5a      	ldr	r3, [pc, #360]	; (8001d94 <HAL_TIM_MspPostInit+0x19c>)
 8001c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	61bb      	str	r3, [r7, #24]
 8001c36:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8001c38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 031c 	add.w	r3, r7, #28
 8001c52:	4619      	mov	r1, r3
 8001c54:	4850      	ldr	r0, [pc, #320]	; (8001d98 <HAL_TIM_MspPostInit+0x1a0>)
 8001c56:	f003 f86b 	bl	8004d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001c5a:	e094      	b.n	8001d86 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c64:	d120      	bne.n	8001ca8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	4b4b      	ldr	r3, [pc, #300]	; (8001d94 <HAL_TIM_MspPostInit+0x19c>)
 8001c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6c:	4a49      	ldr	r2, [pc, #292]	; (8001d94 <HAL_TIM_MspPostInit+0x19c>)
 8001c6e:	f043 0302 	orr.w	r3, r3, #2
 8001c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c76:	4b47      	ldr	r3, [pc, #284]	; (8001d94 <HAL_TIM_MspPostInit+0x19c>)
 8001c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8001c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c92:	2300      	movs	r3, #0
 8001c94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c96:	2301      	movs	r3, #1
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 031c 	add.w	r3, r7, #28
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	483e      	ldr	r0, [pc, #248]	; (8001d9c <HAL_TIM_MspPostInit+0x1a4>)
 8001ca2:	f003 f845 	bl	8004d30 <HAL_GPIO_Init>
}
 8001ca6:	e06e      	b.n	8001d86 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a3c      	ldr	r2, [pc, #240]	; (8001da0 <HAL_TIM_MspPostInit+0x1a8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d11f      	bne.n	8001cf2 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb2:	4b38      	ldr	r3, [pc, #224]	; (8001d94 <HAL_TIM_MspPostInit+0x19c>)
 8001cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb8:	4a36      	ldr	r2, [pc, #216]	; (8001d94 <HAL_TIM_MspPostInit+0x19c>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc2:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <HAL_TIM_MspPostInit+0x19c>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8001cd0:	2340      	movs	r3, #64	; 0x40
 8001cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8001ce4:	f107 031c 	add.w	r3, r7, #28
 8001ce8:	4619      	mov	r1, r3
 8001cea:	482e      	ldr	r0, [pc, #184]	; (8001da4 <HAL_TIM_MspPostInit+0x1ac>)
 8001cec:	f003 f820 	bl	8004d30 <HAL_GPIO_Init>
}
 8001cf0:	e049      	b.n	8001d86 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a2c      	ldr	r2, [pc, #176]	; (8001da8 <HAL_TIM_MspPostInit+0x1b0>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d120      	bne.n	8001d3e <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfc:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <HAL_TIM_MspPostInit+0x19c>)
 8001cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d02:	4a24      	ldr	r2, [pc, #144]	; (8001d94 <HAL_TIM_MspPostInit+0x19c>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_TIM_MspPostInit+0x19c>)
 8001d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8001d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8001d30:	f107 031c 	add.w	r3, r7, #28
 8001d34:	4619      	mov	r1, r3
 8001d36:	4819      	ldr	r0, [pc, #100]	; (8001d9c <HAL_TIM_MspPostInit+0x1a4>)
 8001d38:	f002 fffa 	bl	8004d30 <HAL_GPIO_Init>
}
 8001d3c:	e023      	b.n	8001d86 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a1a      	ldr	r2, [pc, #104]	; (8001dac <HAL_TIM_MspPostInit+0x1b4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d11e      	bne.n	8001d86 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d48:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_TIM_MspPostInit+0x19c>)
 8001d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4e:	4a11      	ldr	r2, [pc, #68]	; (8001d94 <HAL_TIM_MspPostInit+0x19c>)
 8001d50:	f043 0310 	orr.w	r3, r3, #16
 8001d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_TIM_MspPostInit+0x19c>)
 8001d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8001d66:	2340      	movs	r3, #64	; 0x40
 8001d68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8001d76:	2304      	movs	r3, #4
 8001d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4805      	ldr	r0, [pc, #20]	; (8001d98 <HAL_TIM_MspPostInit+0x1a0>)
 8001d82:	f002 ffd5 	bl	8004d30 <HAL_GPIO_Init>
}
 8001d86:	bf00      	nop
 8001d88:	3730      	adds	r7, #48	; 0x30
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40010000 	.word	0x40010000
 8001d94:	58024400 	.word	0x58024400
 8001d98:	58021000 	.word	0x58021000
 8001d9c:	58020400 	.word	0x58020400
 8001da0:	40000400 	.word	0x40000400
 8001da4:	58020000 	.word	0x58020000
 8001da8:	40000800 	.word	0x40000800
 8001dac:	40014000 	.word	0x40014000

08001db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b0ba      	sub	sp, #232	; 0xe8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dc8:	f107 0318 	add.w	r3, r7, #24
 8001dcc:	22bc      	movs	r2, #188	; 0xbc
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f008 fce3 	bl	800a79c <memset>
  if(huart->Instance==UART4)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4aad      	ldr	r2, [pc, #692]	; (8002090 <HAL_UART_MspInit+0x2e0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	f040 80a5 	bne.w	8001f2c <HAL_UART_MspInit+0x17c>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001de2:	2302      	movs	r3, #2
 8001de4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001de6:	2300      	movs	r3, #0
 8001de8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dec:	f107 0318 	add.w	r3, r7, #24
 8001df0:	4618      	mov	r0, r3
 8001df2:	f004 f957 	bl	80060a4 <HAL_RCCEx_PeriphCLKConfig>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001dfc:	f7ff fd94 	bl	8001928 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e00:	4ba4      	ldr	r3, [pc, #656]	; (8002094 <HAL_UART_MspInit+0x2e4>)
 8001e02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e06:	4aa3      	ldr	r2, [pc, #652]	; (8002094 <HAL_UART_MspInit+0x2e4>)
 8001e08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001e0c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e10:	4ba0      	ldr	r3, [pc, #640]	; (8002094 <HAL_UART_MspInit+0x2e4>)
 8001e12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e1e:	4b9d      	ldr	r3, [pc, #628]	; (8002094 <HAL_UART_MspInit+0x2e4>)
 8001e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e24:	4a9b      	ldr	r2, [pc, #620]	; (8002094 <HAL_UART_MspInit+0x2e4>)
 8001e26:	f043 0308 	orr.w	r3, r3, #8
 8001e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e2e:	4b99      	ldr	r3, [pc, #612]	; (8002094 <HAL_UART_MspInit+0x2e4>)
 8001e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e54:	2308      	movs	r3, #8
 8001e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e5a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e5e:	4619      	mov	r1, r3
 8001e60:	488d      	ldr	r0, [pc, #564]	; (8002098 <HAL_UART_MspInit+0x2e8>)
 8001e62:	f002 ff65 	bl	8004d30 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 8001e66:	4b8d      	ldr	r3, [pc, #564]	; (800209c <HAL_UART_MspInit+0x2ec>)
 8001e68:	4a8d      	ldr	r2, [pc, #564]	; (80020a0 <HAL_UART_MspInit+0x2f0>)
 8001e6a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001e6c:	4b8b      	ldr	r3, [pc, #556]	; (800209c <HAL_UART_MspInit+0x2ec>)
 8001e6e:	223f      	movs	r2, #63	; 0x3f
 8001e70:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e72:	4b8a      	ldr	r3, [pc, #552]	; (800209c <HAL_UART_MspInit+0x2ec>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e78:	4b88      	ldr	r3, [pc, #544]	; (800209c <HAL_UART_MspInit+0x2ec>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e7e:	4b87      	ldr	r3, [pc, #540]	; (800209c <HAL_UART_MspInit+0x2ec>)
 8001e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e84:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e86:	4b85      	ldr	r3, [pc, #532]	; (800209c <HAL_UART_MspInit+0x2ec>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e8c:	4b83      	ldr	r3, [pc, #524]	; (800209c <HAL_UART_MspInit+0x2ec>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001e92:	4b82      	ldr	r3, [pc, #520]	; (800209c <HAL_UART_MspInit+0x2ec>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e98:	4b80      	ldr	r3, [pc, #512]	; (800209c <HAL_UART_MspInit+0x2ec>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e9e:	4b7f      	ldr	r3, [pc, #508]	; (800209c <HAL_UART_MspInit+0x2ec>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001ea4:	487d      	ldr	r0, [pc, #500]	; (800209c <HAL_UART_MspInit+0x2ec>)
 8001ea6:	f000 fd1f 	bl	80028e8 <HAL_DMA_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8001eb0:	f7ff fd3a 	bl	8001928 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a79      	ldr	r2, [pc, #484]	; (800209c <HAL_UART_MspInit+0x2ec>)
 8001eb8:	67da      	str	r2, [r3, #124]	; 0x7c
 8001eba:	4a78      	ldr	r2, [pc, #480]	; (800209c <HAL_UART_MspInit+0x2ec>)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 8001ec0:	4b78      	ldr	r3, [pc, #480]	; (80020a4 <HAL_UART_MspInit+0x2f4>)
 8001ec2:	4a79      	ldr	r2, [pc, #484]	; (80020a8 <HAL_UART_MspInit+0x2f8>)
 8001ec4:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001ec6:	4b77      	ldr	r3, [pc, #476]	; (80020a4 <HAL_UART_MspInit+0x2f4>)
 8001ec8:	2240      	movs	r2, #64	; 0x40
 8001eca:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ecc:	4b75      	ldr	r3, [pc, #468]	; (80020a4 <HAL_UART_MspInit+0x2f4>)
 8001ece:	2240      	movs	r2, #64	; 0x40
 8001ed0:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed2:	4b74      	ldr	r3, [pc, #464]	; (80020a4 <HAL_UART_MspInit+0x2f4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed8:	4b72      	ldr	r3, [pc, #456]	; (80020a4 <HAL_UART_MspInit+0x2f4>)
 8001eda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ede:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ee0:	4b70      	ldr	r3, [pc, #448]	; (80020a4 <HAL_UART_MspInit+0x2f4>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ee6:	4b6f      	ldr	r3, [pc, #444]	; (80020a4 <HAL_UART_MspInit+0x2f4>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001eec:	4b6d      	ldr	r3, [pc, #436]	; (80020a4 <HAL_UART_MspInit+0x2f4>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ef2:	4b6c      	ldr	r3, [pc, #432]	; (80020a4 <HAL_UART_MspInit+0x2f4>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef8:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <HAL_UART_MspInit+0x2f4>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001efe:	4869      	ldr	r0, [pc, #420]	; (80020a4 <HAL_UART_MspInit+0x2f4>)
 8001f00:	f000 fcf2 	bl	80028e8 <HAL_DMA_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8001f0a:	f7ff fd0d 	bl	8001928 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a64      	ldr	r2, [pc, #400]	; (80020a4 <HAL_UART_MspInit+0x2f4>)
 8001f12:	679a      	str	r2, [r3, #120]	; 0x78
 8001f14:	4a63      	ldr	r2, [pc, #396]	; (80020a4 <HAL_UART_MspInit+0x2f4>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2034      	movs	r0, #52	; 0x34
 8001f20:	f000 fbc3 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f24:	2034      	movs	r0, #52	; 0x34
 8001f26:	f000 fbda 	bl	80026de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f2a:	e0ac      	b.n	8002086 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a5e      	ldr	r2, [pc, #376]	; (80020ac <HAL_UART_MspInit+0x2fc>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	f040 80a7 	bne.w	8002086 <HAL_UART_MspInit+0x2d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f42:	f107 0318 	add.w	r3, r7, #24
 8001f46:	4618      	mov	r0, r3
 8001f48:	f004 f8ac 	bl	80060a4 <HAL_RCCEx_PeriphCLKConfig>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8001f52:	f7ff fce9 	bl	8001928 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f56:	4b4f      	ldr	r3, [pc, #316]	; (8002094 <HAL_UART_MspInit+0x2e4>)
 8001f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f5c:	4a4d      	ldr	r2, [pc, #308]	; (8002094 <HAL_UART_MspInit+0x2e4>)
 8001f5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f66:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <HAL_UART_MspInit+0x2e4>)
 8001f68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f74:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_UART_MspInit+0x2e4>)
 8001f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7a:	4a46      	ldr	r2, [pc, #280]	; (8002094 <HAL_UART_MspInit+0x2e4>)
 8001f7c:	f043 0308 	orr.w	r3, r3, #8
 8001f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f84:	4b43      	ldr	r3, [pc, #268]	; (8002094 <HAL_UART_MspInit+0x2e4>)
 8001f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fac:	2307      	movs	r3, #7
 8001fae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4837      	ldr	r0, [pc, #220]	; (8002098 <HAL_UART_MspInit+0x2e8>)
 8001fba:	f002 feb9 	bl	8004d30 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001fbe:	4b3c      	ldr	r3, [pc, #240]	; (80020b0 <HAL_UART_MspInit+0x300>)
 8001fc0:	4a3c      	ldr	r2, [pc, #240]	; (80020b4 <HAL_UART_MspInit+0x304>)
 8001fc2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001fc4:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <HAL_UART_MspInit+0x300>)
 8001fc6:	222d      	movs	r2, #45	; 0x2d
 8001fc8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fca:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <HAL_UART_MspInit+0x300>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd0:	4b37      	ldr	r3, [pc, #220]	; (80020b0 <HAL_UART_MspInit+0x300>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd6:	4b36      	ldr	r3, [pc, #216]	; (80020b0 <HAL_UART_MspInit+0x300>)
 8001fd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fdc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fde:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <HAL_UART_MspInit+0x300>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe4:	4b32      	ldr	r3, [pc, #200]	; (80020b0 <HAL_UART_MspInit+0x300>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001fea:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <HAL_UART_MspInit+0x300>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001ff0:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <HAL_UART_MspInit+0x300>)
 8001ff2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ff6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_UART_MspInit+0x300>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001ffe:	482c      	ldr	r0, [pc, #176]	; (80020b0 <HAL_UART_MspInit+0x300>)
 8002000:	f000 fc72 	bl	80028e8 <HAL_DMA_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_UART_MspInit+0x25e>
      Error_Handler();
 800200a:	f7ff fc8d 	bl	8001928 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a27      	ldr	r2, [pc, #156]	; (80020b0 <HAL_UART_MspInit+0x300>)
 8002012:	67da      	str	r2, [r3, #124]	; 0x7c
 8002014:	4a26      	ldr	r2, [pc, #152]	; (80020b0 <HAL_UART_MspInit+0x300>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 800201a:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_UART_MspInit+0x308>)
 800201c:	4a27      	ldr	r2, [pc, #156]	; (80020bc <HAL_UART_MspInit+0x30c>)
 800201e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <HAL_UART_MspInit+0x308>)
 8002022:	222e      	movs	r2, #46	; 0x2e
 8002024:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_UART_MspInit+0x308>)
 8002028:	2240      	movs	r2, #64	; 0x40
 800202a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800202c:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <HAL_UART_MspInit+0x308>)
 800202e:	2200      	movs	r2, #0
 8002030:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <HAL_UART_MspInit+0x308>)
 8002034:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002038:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800203a:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <HAL_UART_MspInit+0x308>)
 800203c:	2200      	movs	r2, #0
 800203e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002040:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_UART_MspInit+0x308>)
 8002042:	2200      	movs	r2, #0
 8002044:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002046:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <HAL_UART_MspInit+0x308>)
 8002048:	2200      	movs	r2, #0
 800204a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800204c:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <HAL_UART_MspInit+0x308>)
 800204e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002052:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002054:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_UART_MspInit+0x308>)
 8002056:	2200      	movs	r2, #0
 8002058:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800205a:	4817      	ldr	r0, [pc, #92]	; (80020b8 <HAL_UART_MspInit+0x308>)
 800205c:	f000 fc44 	bl	80028e8 <HAL_DMA_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 8002066:	f7ff fc5f 	bl	8001928 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <HAL_UART_MspInit+0x308>)
 800206e:	679a      	str	r2, [r3, #120]	; 0x78
 8002070:	4a11      	ldr	r2, [pc, #68]	; (80020b8 <HAL_UART_MspInit+0x308>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	2027      	movs	r0, #39	; 0x27
 800207c:	f000 fb15 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002080:	2027      	movs	r0, #39	; 0x27
 8002082:	f000 fb2c 	bl	80026de <HAL_NVIC_EnableIRQ>
}
 8002086:	bf00      	nop
 8002088:	37e8      	adds	r7, #232	; 0xe8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40004c00 	.word	0x40004c00
 8002094:	58024400 	.word	0x58024400
 8002098:	58020c00 	.word	0x58020c00
 800209c:	20000030 	.word	0x20000030
 80020a0:	40020410 	.word	0x40020410
 80020a4:	20000590 	.word	0x20000590
 80020a8:	40020428 	.word	0x40020428
 80020ac:	40004800 	.word	0x40004800
 80020b0:	200000f4 	.word	0x200000f4
 80020b4:	40020028 	.word	0x40020028
 80020b8:	20000270 	.word	0x20000270
 80020bc:	40020040 	.word	0x40020040

080020c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <NMI_Handler+0x4>

080020c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020ca:	e7fe      	b.n	80020ca <HardFault_Handler+0x4>

080020cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d0:	e7fe      	b.n	80020d0 <MemManage_Handler+0x4>

080020d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <BusFault_Handler+0x4>

080020d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <UsageFault_Handler+0x4>

080020de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800210c:	f000 f9a2 	bl	8002454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}

08002114 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <DMA1_Stream1_IRQHandler+0x10>)
 800211a:	f001 fca3 	bl	8003a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200000f4 	.word	0x200000f4

08002128 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800212c:	4802      	ldr	r0, [pc, #8]	; (8002138 <DMA1_Stream2_IRQHandler+0x10>)
 800212e:	f001 fc99 	bl	8003a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	20000270 	.word	0x20000270

0800213c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002140:	2040      	movs	r0, #64	; 0x40
 8002142:	f002 ffbe 	bl	80050c2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002146:	2080      	movs	r0, #128	; 0x80
 8002148:	f002 ffbb 	bl	80050c2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}

08002150 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <USART3_IRQHandler+0x10>)
 8002156:	f006 ff95 	bl	8009084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	2000016c 	.word	0x2000016c

08002164 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002168:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800216c:	f002 ffa9 	bl	80050c2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002170:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002174:	f002 ffa5 	bl	80050c2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002178:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800217c:	f002 ffa1 	bl	80050c2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002180:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002184:	f002 ff9d 	bl	80050c2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}

0800218c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002192:	f005 fe8b 	bl	8007eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000540 	.word	0x20000540

080021a0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <TIM5_IRQHandler+0x10>)
 80021a6:	f005 fe81 	bl	8007eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200002e8 	.word	0x200002e8

080021b4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <UART4_IRQHandler+0x10>)
 80021ba:	f006 ff63 	bl	8009084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000460 	.word	0x20000460

080021c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <DMA2_Stream0_IRQHandler+0x10>)
 80021ce:	f001 fc49 	bl	8003a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000030 	.word	0x20000030

080021dc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <DMA2_Stream1_IRQHandler+0x10>)
 80021e2:	f001 fc3f 	bl	8003a64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000590 	.word	0x20000590

080021f0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80021f4:	4802      	ldr	r0, [pc, #8]	; (8002200 <TIM15_IRQHandler+0x10>)
 80021f6:	f005 fe59 	bl	8007eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200001fc 	.word	0x200001fc

08002204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002208:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <SystemInit+0xec>)
 800220a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220e:	4a38      	ldr	r2, [pc, #224]	; (80022f0 <SystemInit+0xec>)
 8002210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002218:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <SystemInit+0xf0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 030f 	and.w	r3, r3, #15
 8002220:	2b06      	cmp	r3, #6
 8002222:	d807      	bhi.n	8002234 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002224:	4b33      	ldr	r3, [pc, #204]	; (80022f4 <SystemInit+0xf0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 030f 	bic.w	r3, r3, #15
 800222c:	4a31      	ldr	r2, [pc, #196]	; (80022f4 <SystemInit+0xf0>)
 800222e:	f043 0307 	orr.w	r3, r3, #7
 8002232:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002234:	4b30      	ldr	r3, [pc, #192]	; (80022f8 <SystemInit+0xf4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a2f      	ldr	r2, [pc, #188]	; (80022f8 <SystemInit+0xf4>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002240:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <SystemInit+0xf4>)
 8002242:	2200      	movs	r2, #0
 8002244:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002246:	4b2c      	ldr	r3, [pc, #176]	; (80022f8 <SystemInit+0xf4>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	492b      	ldr	r1, [pc, #172]	; (80022f8 <SystemInit+0xf4>)
 800224c:	4b2b      	ldr	r3, [pc, #172]	; (80022fc <SystemInit+0xf8>)
 800224e:	4013      	ands	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002252:	4b28      	ldr	r3, [pc, #160]	; (80022f4 <SystemInit+0xf0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0308 	and.w	r3, r3, #8
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800225e:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <SystemInit+0xf0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 030f 	bic.w	r3, r3, #15
 8002266:	4a23      	ldr	r2, [pc, #140]	; (80022f4 <SystemInit+0xf0>)
 8002268:	f043 0307 	orr.w	r3, r3, #7
 800226c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800226e:	4b22      	ldr	r3, [pc, #136]	; (80022f8 <SystemInit+0xf4>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002274:	4b20      	ldr	r3, [pc, #128]	; (80022f8 <SystemInit+0xf4>)
 8002276:	2200      	movs	r2, #0
 8002278:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800227a:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <SystemInit+0xf4>)
 800227c:	2200      	movs	r2, #0
 800227e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002280:	4b1d      	ldr	r3, [pc, #116]	; (80022f8 <SystemInit+0xf4>)
 8002282:	4a1f      	ldr	r2, [pc, #124]	; (8002300 <SystemInit+0xfc>)
 8002284:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <SystemInit+0xf4>)
 8002288:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <SystemInit+0x100>)
 800228a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800228c:	4b1a      	ldr	r3, [pc, #104]	; (80022f8 <SystemInit+0xf4>)
 800228e:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <SystemInit+0x104>)
 8002290:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002292:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <SystemInit+0xf4>)
 8002294:	2200      	movs	r2, #0
 8002296:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002298:	4b17      	ldr	r3, [pc, #92]	; (80022f8 <SystemInit+0xf4>)
 800229a:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <SystemInit+0x104>)
 800229c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800229e:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <SystemInit+0xf4>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <SystemInit+0xf4>)
 80022a6:	4a18      	ldr	r2, [pc, #96]	; (8002308 <SystemInit+0x104>)
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80022aa:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <SystemInit+0xf4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <SystemInit+0xf4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a10      	ldr	r2, [pc, #64]	; (80022f8 <SystemInit+0xf4>)
 80022b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <SystemInit+0xf4>)
 80022be:	2200      	movs	r2, #0
 80022c0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022c2:	4b12      	ldr	r3, [pc, #72]	; (800230c <SystemInit+0x108>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <SystemInit+0x10c>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ce:	d202      	bcs.n	80022d6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022d0:	4b10      	ldr	r3, [pc, #64]	; (8002314 <SystemInit+0x110>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022d6:	4b10      	ldr	r3, [pc, #64]	; (8002318 <SystemInit+0x114>)
 80022d8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80022dc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022de:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <SystemInit+0xec>)
 80022e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022e4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00
 80022f4:	52002000 	.word	0x52002000
 80022f8:	58024400 	.word	0x58024400
 80022fc:	eaf6ed7f 	.word	0xeaf6ed7f
 8002300:	02020200 	.word	0x02020200
 8002304:	01ff0000 	.word	0x01ff0000
 8002308:	01010280 	.word	0x01010280
 800230c:	5c001000 	.word	0x5c001000
 8002310:	ffff0000 	.word	0xffff0000
 8002314:	51008108 	.word	0x51008108
 8002318:	52004000 	.word	0x52004000

0800231c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800231c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002354 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002320:	f7ff ff70 	bl	8002204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002324:	480c      	ldr	r0, [pc, #48]	; (8002358 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002326:	490d      	ldr	r1, [pc, #52]	; (800235c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002328:	4a0d      	ldr	r2, [pc, #52]	; (8002360 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800232a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800232c:	e002      	b.n	8002334 <LoopCopyDataInit>

0800232e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800232e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002332:	3304      	adds	r3, #4

08002334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002338:	d3f9      	bcc.n	800232e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800233a:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800233c:	4c0a      	ldr	r4, [pc, #40]	; (8002368 <LoopFillZerobss+0x22>)
  movs r3, #0
 800233e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002340:	e001      	b.n	8002346 <LoopFillZerobss>

08002342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002344:	3204      	adds	r2, #4

08002346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002348:	d3fb      	bcc.n	8002342 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800234a:	f008 fa03 	bl	800a754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800234e:	f7fe fb93 	bl	8000a78 <main>
  bx  lr
 8002352:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002354:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800235c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002360:	0800a814 	.word	0x0800a814
  ldr r2, =_sbss
 8002364:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002368:	20000614 	.word	0x20000614

0800236c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800236c:	e7fe      	b.n	800236c <ADC3_IRQHandler>
	...

08002370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002376:	2003      	movs	r0, #3
 8002378:	f000 f98c 	bl	8002694 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800237c:	f003 fcbc 	bl	8005cf8 <HAL_RCC_GetSysClockFreq>
 8002380:	4602      	mov	r2, r0
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <HAL_Init+0x68>)
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	0a1b      	lsrs	r3, r3, #8
 8002388:	f003 030f 	and.w	r3, r3, #15
 800238c:	4913      	ldr	r1, [pc, #76]	; (80023dc <HAL_Init+0x6c>)
 800238e:	5ccb      	ldrb	r3, [r1, r3]
 8002390:	f003 031f 	and.w	r3, r3, #31
 8002394:	fa22 f303 	lsr.w	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800239a:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <HAL_Init+0x68>)
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <HAL_Init+0x6c>)
 80023a4:	5cd3      	ldrb	r3, [r2, r3]
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
 80023b0:	4a0b      	ldr	r2, [pc, #44]	; (80023e0 <HAL_Init+0x70>)
 80023b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023b4:	4a0b      	ldr	r2, [pc, #44]	; (80023e4 <HAL_Init+0x74>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023ba:	2000      	movs	r0, #0
 80023bc:	f000 f814 	bl	80023e8 <HAL_InitTick>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e002      	b.n	80023d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80023ca:	f7ff fab3 	bl	8001934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	58024400 	.word	0x58024400
 80023dc:	0800a7c4 	.word	0x0800a7c4
 80023e0:	20000004 	.word	0x20000004
 80023e4:	20000000 	.word	0x20000000

080023e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023f0:	4b15      	ldr	r3, [pc, #84]	; (8002448 <HAL_InitTick+0x60>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e021      	b.n	8002440 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023fc:	4b13      	ldr	r3, [pc, #76]	; (800244c <HAL_InitTick+0x64>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_InitTick+0x60>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	4619      	mov	r1, r3
 8002406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240a:	fbb3 f3f1 	udiv	r3, r3, r1
 800240e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f971 	bl	80026fa <HAL_SYSTICK_Config>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e00e      	b.n	8002440 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b0f      	cmp	r3, #15
 8002426:	d80a      	bhi.n	800243e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002428:	2200      	movs	r2, #0
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	f04f 30ff 	mov.w	r0, #4294967295
 8002430:	f000 f93b 	bl	80026aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002434:	4a06      	ldr	r2, [pc, #24]	; (8002450 <HAL_InitTick+0x68>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	e000      	b.n	8002440 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	2000000c 	.word	0x2000000c
 800244c:	20000000 	.word	0x20000000
 8002450:	20000008 	.word	0x20000008

08002454 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_IncTick+0x20>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	461a      	mov	r2, r3
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_IncTick+0x24>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4413      	add	r3, r2
 8002464:	4a04      	ldr	r2, [pc, #16]	; (8002478 <HAL_IncTick+0x24>)
 8002466:	6013      	str	r3, [r2, #0]
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	2000000c 	.word	0x2000000c
 8002478:	20000610 	.word	0x20000610

0800247c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return uwTick;
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_GetTick+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000610 	.word	0x20000610

08002494 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800249c:	f7ff ffee 	bl	800247c <HAL_GetTick>
 80024a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ac:	d005      	beq.n	80024ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ae:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <HAL_Delay+0x44>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4413      	add	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ba:	bf00      	nop
 80024bc:	f7ff ffde 	bl	800247c <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d8f7      	bhi.n	80024bc <HAL_Delay+0x28>
  {
  }
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000000c 	.word	0x2000000c

080024dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <HAL_GetREVID+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0c1b      	lsrs	r3, r3, #16
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	5c001000 	.word	0x5c001000

080024f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <__NVIC_SetPriorityGrouping+0x40>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002510:	4013      	ands	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800251c:	4b06      	ldr	r3, [pc, #24]	; (8002538 <__NVIC_SetPriorityGrouping+0x44>)
 800251e:	4313      	orrs	r3, r2
 8002520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002522:	4a04      	ldr	r2, [pc, #16]	; (8002534 <__NVIC_SetPriorityGrouping+0x40>)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	60d3      	str	r3, [r2, #12]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000ed00 	.word	0xe000ed00
 8002538:	05fa0000 	.word	0x05fa0000

0800253c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <__NVIC_GetPriorityGrouping+0x18>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	f003 0307 	and.w	r3, r3, #7
}
 800254a:	4618      	mov	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002562:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002566:	2b00      	cmp	r3, #0
 8002568:	db0b      	blt.n	8002582 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800256a:	88fb      	ldrh	r3, [r7, #6]
 800256c:	f003 021f 	and.w	r2, r3, #31
 8002570:	4907      	ldr	r1, [pc, #28]	; (8002590 <__NVIC_EnableIRQ+0x38>)
 8002572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	2001      	movs	r0, #1
 800257a:	fa00 f202 	lsl.w	r2, r0, r2
 800257e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000e100 	.word	0xe000e100

08002594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	6039      	str	r1, [r7, #0]
 800259e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	db0a      	blt.n	80025be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	490c      	ldr	r1, [pc, #48]	; (80025e0 <__NVIC_SetPriority+0x4c>)
 80025ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025b2:	0112      	lsls	r2, r2, #4
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	440b      	add	r3, r1
 80025b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025bc:	e00a      	b.n	80025d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4908      	ldr	r1, [pc, #32]	; (80025e4 <__NVIC_SetPriority+0x50>)
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	3b04      	subs	r3, #4
 80025cc:	0112      	lsls	r2, r2, #4
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	440b      	add	r3, r1
 80025d2:	761a      	strb	r2, [r3, #24]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000e100 	.word	0xe000e100
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f1c3 0307 	rsb	r3, r3, #7
 8002602:	2b04      	cmp	r3, #4
 8002604:	bf28      	it	cs
 8002606:	2304      	movcs	r3, #4
 8002608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3304      	adds	r3, #4
 800260e:	2b06      	cmp	r3, #6
 8002610:	d902      	bls.n	8002618 <NVIC_EncodePriority+0x30>
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3b03      	subs	r3, #3
 8002616:	e000      	b.n	800261a <NVIC_EncodePriority+0x32>
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	f04f 32ff 	mov.w	r2, #4294967295
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43da      	mvns	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	401a      	ands	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002630:	f04f 31ff 	mov.w	r1, #4294967295
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43d9      	mvns	r1, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002640:	4313      	orrs	r3, r2
         );
}
 8002642:	4618      	mov	r0, r3
 8002644:	3724      	adds	r7, #36	; 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002660:	d301      	bcc.n	8002666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002662:	2301      	movs	r3, #1
 8002664:	e00f      	b.n	8002686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002666:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <SysTick_Config+0x40>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800266e:	210f      	movs	r1, #15
 8002670:	f04f 30ff 	mov.w	r0, #4294967295
 8002674:	f7ff ff8e 	bl	8002594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <SysTick_Config+0x40>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800267e:	4b04      	ldr	r3, [pc, #16]	; (8002690 <SysTick_Config+0x40>)
 8002680:	2207      	movs	r2, #7
 8002682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	e000e010 	.word	0xe000e010

08002694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ff29 	bl	80024f4 <__NVIC_SetPriorityGrouping>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b086      	sub	sp, #24
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
 80026b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026b8:	f7ff ff40 	bl	800253c <__NVIC_GetPriorityGrouping>
 80026bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	6978      	ldr	r0, [r7, #20]
 80026c4:	f7ff ff90 	bl	80025e8 <NVIC_EncodePriority>
 80026c8:	4602      	mov	r2, r0
 80026ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff5f 	bl	8002594 <__NVIC_SetPriority>
}
 80026d6:	bf00      	nop
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff33 	bl	8002558 <__NVIC_EnableIRQ>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff ffa4 	bl	8002650 <SysTick_Config>
 8002708:	4603      	mov	r3, r0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e054      	b.n	80027d0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	7f5b      	ldrb	r3, [r3, #29]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d105      	bne.n	800273c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff f916 	bl	8001968 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	791b      	ldrb	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10c      	bne.n	8002764 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <HAL_CRC_Init+0xc4>)
 8002750:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0218 	bic.w	r2, r2, #24
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	e00c      	b.n	800277e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6899      	ldr	r1, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	461a      	mov	r2, r3
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f834 	bl	80027dc <HAL_CRCEx_Polynomial_Set>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e028      	b.n	80027d0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	795b      	ldrb	r3, [r3, #5]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d105      	bne.n	8002792 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f04f 32ff 	mov.w	r2, #4294967295
 800278e:	611a      	str	r2, [r3, #16]
 8002790:	e004      	b.n	800279c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6912      	ldr	r2, [r2, #16]
 800279a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699a      	ldr	r2, [r3, #24]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	04c11db7 	.word	0x04c11db7

080027dc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80027ec:	231f      	movs	r3, #31
 80027ee:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80027f0:	bf00      	nop
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1e5a      	subs	r2, r3, #1
 80027f6:	613a      	str	r2, [r7, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d009      	beq.n	8002810 <HAL_CRCEx_Polynomial_Set+0x34>
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f0      	beq.n	80027f2 <HAL_CRCEx_Polynomial_Set+0x16>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b18      	cmp	r3, #24
 8002814:	d846      	bhi.n	80028a4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002816:	a201      	add	r2, pc, #4	; (adr r2, 800281c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281c:	080028ab 	.word	0x080028ab
 8002820:	080028a5 	.word	0x080028a5
 8002824:	080028a5 	.word	0x080028a5
 8002828:	080028a5 	.word	0x080028a5
 800282c:	080028a5 	.word	0x080028a5
 8002830:	080028a5 	.word	0x080028a5
 8002834:	080028a5 	.word	0x080028a5
 8002838:	080028a5 	.word	0x080028a5
 800283c:	08002899 	.word	0x08002899
 8002840:	080028a5 	.word	0x080028a5
 8002844:	080028a5 	.word	0x080028a5
 8002848:	080028a5 	.word	0x080028a5
 800284c:	080028a5 	.word	0x080028a5
 8002850:	080028a5 	.word	0x080028a5
 8002854:	080028a5 	.word	0x080028a5
 8002858:	080028a5 	.word	0x080028a5
 800285c:	0800288d 	.word	0x0800288d
 8002860:	080028a5 	.word	0x080028a5
 8002864:	080028a5 	.word	0x080028a5
 8002868:	080028a5 	.word	0x080028a5
 800286c:	080028a5 	.word	0x080028a5
 8002870:	080028a5 	.word	0x080028a5
 8002874:	080028a5 	.word	0x080028a5
 8002878:	080028a5 	.word	0x080028a5
 800287c:	08002881 	.word	0x08002881
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	2b06      	cmp	r3, #6
 8002884:	d913      	bls.n	80028ae <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800288a:	e010      	b.n	80028ae <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2b07      	cmp	r3, #7
 8002890:	d90f      	bls.n	80028b2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002896:	e00c      	b.n	80028b2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2b0f      	cmp	r3, #15
 800289c:	d90b      	bls.n	80028b6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80028a2:	e008      	b.n	80028b6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	75fb      	strb	r3, [r7, #23]
      break;
 80028a8:	e006      	b.n	80028b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80028aa:	bf00      	nop
 80028ac:	e004      	b.n	80028b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80028ae:	bf00      	nop
 80028b0:	e002      	b.n	80028b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80028b2:	bf00      	nop
 80028b4:	e000      	b.n	80028b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80028b6:	bf00      	nop
  }
  if (status == HAL_OK)
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10d      	bne.n	80028da <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f023 0118 	bic.w	r1, r3, #24
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	430a      	orrs	r2, r1
 80028d8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80028da:	7dfb      	ldrb	r3, [r7, #23]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80028f0:	f7ff fdc4 	bl	800247c <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e316      	b.n	8002f2e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a66      	ldr	r2, [pc, #408]	; (8002aa0 <HAL_DMA_Init+0x1b8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d04a      	beq.n	80029a0 <HAL_DMA_Init+0xb8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a65      	ldr	r2, [pc, #404]	; (8002aa4 <HAL_DMA_Init+0x1bc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d045      	beq.n	80029a0 <HAL_DMA_Init+0xb8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a63      	ldr	r2, [pc, #396]	; (8002aa8 <HAL_DMA_Init+0x1c0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d040      	beq.n	80029a0 <HAL_DMA_Init+0xb8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a62      	ldr	r2, [pc, #392]	; (8002aac <HAL_DMA_Init+0x1c4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d03b      	beq.n	80029a0 <HAL_DMA_Init+0xb8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a60      	ldr	r2, [pc, #384]	; (8002ab0 <HAL_DMA_Init+0x1c8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d036      	beq.n	80029a0 <HAL_DMA_Init+0xb8>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a5f      	ldr	r2, [pc, #380]	; (8002ab4 <HAL_DMA_Init+0x1cc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d031      	beq.n	80029a0 <HAL_DMA_Init+0xb8>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a5d      	ldr	r2, [pc, #372]	; (8002ab8 <HAL_DMA_Init+0x1d0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d02c      	beq.n	80029a0 <HAL_DMA_Init+0xb8>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a5c      	ldr	r2, [pc, #368]	; (8002abc <HAL_DMA_Init+0x1d4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d027      	beq.n	80029a0 <HAL_DMA_Init+0xb8>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a5a      	ldr	r2, [pc, #360]	; (8002ac0 <HAL_DMA_Init+0x1d8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d022      	beq.n	80029a0 <HAL_DMA_Init+0xb8>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a59      	ldr	r2, [pc, #356]	; (8002ac4 <HAL_DMA_Init+0x1dc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d01d      	beq.n	80029a0 <HAL_DMA_Init+0xb8>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a57      	ldr	r2, [pc, #348]	; (8002ac8 <HAL_DMA_Init+0x1e0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d018      	beq.n	80029a0 <HAL_DMA_Init+0xb8>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a56      	ldr	r2, [pc, #344]	; (8002acc <HAL_DMA_Init+0x1e4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d013      	beq.n	80029a0 <HAL_DMA_Init+0xb8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a54      	ldr	r2, [pc, #336]	; (8002ad0 <HAL_DMA_Init+0x1e8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00e      	beq.n	80029a0 <HAL_DMA_Init+0xb8>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a53      	ldr	r2, [pc, #332]	; (8002ad4 <HAL_DMA_Init+0x1ec>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_DMA_Init+0xb8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a51      	ldr	r2, [pc, #324]	; (8002ad8 <HAL_DMA_Init+0x1f0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d004      	beq.n	80029a0 <HAL_DMA_Init+0xb8>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a50      	ldr	r2, [pc, #320]	; (8002adc <HAL_DMA_Init+0x1f4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d101      	bne.n	80029a4 <HAL_DMA_Init+0xbc>
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_DMA_Init+0xbe>
 80029a4:	2300      	movs	r3, #0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 813b 	beq.w	8002c22 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a37      	ldr	r2, [pc, #220]	; (8002aa0 <HAL_DMA_Init+0x1b8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d04a      	beq.n	8002a5c <HAL_DMA_Init+0x174>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a36      	ldr	r2, [pc, #216]	; (8002aa4 <HAL_DMA_Init+0x1bc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d045      	beq.n	8002a5c <HAL_DMA_Init+0x174>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a34      	ldr	r2, [pc, #208]	; (8002aa8 <HAL_DMA_Init+0x1c0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d040      	beq.n	8002a5c <HAL_DMA_Init+0x174>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a33      	ldr	r2, [pc, #204]	; (8002aac <HAL_DMA_Init+0x1c4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d03b      	beq.n	8002a5c <HAL_DMA_Init+0x174>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a31      	ldr	r2, [pc, #196]	; (8002ab0 <HAL_DMA_Init+0x1c8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d036      	beq.n	8002a5c <HAL_DMA_Init+0x174>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a30      	ldr	r2, [pc, #192]	; (8002ab4 <HAL_DMA_Init+0x1cc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d031      	beq.n	8002a5c <HAL_DMA_Init+0x174>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a2e      	ldr	r2, [pc, #184]	; (8002ab8 <HAL_DMA_Init+0x1d0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d02c      	beq.n	8002a5c <HAL_DMA_Init+0x174>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a2d      	ldr	r2, [pc, #180]	; (8002abc <HAL_DMA_Init+0x1d4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d027      	beq.n	8002a5c <HAL_DMA_Init+0x174>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a2b      	ldr	r2, [pc, #172]	; (8002ac0 <HAL_DMA_Init+0x1d8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d022      	beq.n	8002a5c <HAL_DMA_Init+0x174>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a2a      	ldr	r2, [pc, #168]	; (8002ac4 <HAL_DMA_Init+0x1dc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d01d      	beq.n	8002a5c <HAL_DMA_Init+0x174>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a28      	ldr	r2, [pc, #160]	; (8002ac8 <HAL_DMA_Init+0x1e0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d018      	beq.n	8002a5c <HAL_DMA_Init+0x174>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a27      	ldr	r2, [pc, #156]	; (8002acc <HAL_DMA_Init+0x1e4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d013      	beq.n	8002a5c <HAL_DMA_Init+0x174>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a25      	ldr	r2, [pc, #148]	; (8002ad0 <HAL_DMA_Init+0x1e8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d00e      	beq.n	8002a5c <HAL_DMA_Init+0x174>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a24      	ldr	r2, [pc, #144]	; (8002ad4 <HAL_DMA_Init+0x1ec>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d009      	beq.n	8002a5c <HAL_DMA_Init+0x174>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a22      	ldr	r2, [pc, #136]	; (8002ad8 <HAL_DMA_Init+0x1f0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d004      	beq.n	8002a5c <HAL_DMA_Init+0x174>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a21      	ldr	r2, [pc, #132]	; (8002adc <HAL_DMA_Init+0x1f4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d108      	bne.n	8002a6e <HAL_DMA_Init+0x186>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f022 0201 	bic.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e007      	b.n	8002a7e <HAL_DMA_Init+0x196>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a7e:	e02f      	b.n	8002ae0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a80:	f7ff fcfc 	bl	800247c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b05      	cmp	r3, #5
 8002a8c:	d928      	bls.n	8002ae0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2220      	movs	r2, #32
 8002a92:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2203      	movs	r2, #3
 8002a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e246      	b.n	8002f2e <HAL_DMA_Init+0x646>
 8002aa0:	40020010 	.word	0x40020010
 8002aa4:	40020028 	.word	0x40020028
 8002aa8:	40020040 	.word	0x40020040
 8002aac:	40020058 	.word	0x40020058
 8002ab0:	40020070 	.word	0x40020070
 8002ab4:	40020088 	.word	0x40020088
 8002ab8:	400200a0 	.word	0x400200a0
 8002abc:	400200b8 	.word	0x400200b8
 8002ac0:	40020410 	.word	0x40020410
 8002ac4:	40020428 	.word	0x40020428
 8002ac8:	40020440 	.word	0x40020440
 8002acc:	40020458 	.word	0x40020458
 8002ad0:	40020470 	.word	0x40020470
 8002ad4:	40020488 	.word	0x40020488
 8002ad8:	400204a0 	.word	0x400204a0
 8002adc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1c8      	bne.n	8002a80 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4b83      	ldr	r3, [pc, #524]	; (8002d08 <HAL_DMA_Init+0x420>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002b06:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b12:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d107      	bne.n	8002b44 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002b44:	4b71      	ldr	r3, [pc, #452]	; (8002d0c <HAL_DMA_Init+0x424>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b71      	ldr	r3, [pc, #452]	; (8002d10 <HAL_DMA_Init+0x428>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b50:	d328      	bcc.n	8002ba4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b28      	cmp	r3, #40	; 0x28
 8002b58:	d903      	bls.n	8002b62 <HAL_DMA_Init+0x27a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b2e      	cmp	r3, #46	; 0x2e
 8002b60:	d917      	bls.n	8002b92 <HAL_DMA_Init+0x2aa>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b3e      	cmp	r3, #62	; 0x3e
 8002b68:	d903      	bls.n	8002b72 <HAL_DMA_Init+0x28a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b42      	cmp	r3, #66	; 0x42
 8002b70:	d90f      	bls.n	8002b92 <HAL_DMA_Init+0x2aa>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b46      	cmp	r3, #70	; 0x46
 8002b78:	d903      	bls.n	8002b82 <HAL_DMA_Init+0x29a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b48      	cmp	r3, #72	; 0x48
 8002b80:	d907      	bls.n	8002b92 <HAL_DMA_Init+0x2aa>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b4e      	cmp	r3, #78	; 0x4e
 8002b88:	d905      	bls.n	8002b96 <HAL_DMA_Init+0x2ae>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b52      	cmp	r3, #82	; 0x52
 8002b90:	d801      	bhi.n	8002b96 <HAL_DMA_Init+0x2ae>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_DMA_Init+0x2b0>
 8002b96:	2300      	movs	r3, #0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ba2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f023 0307 	bic.w	r3, r3, #7
 8002bba:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d117      	bne.n	8002bfe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00e      	beq.n	8002bfe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f001 ff1b 	bl	8004a1c <DMA_CheckFifoParam>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2240      	movs	r2, #64	; 0x40
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e197      	b.n	8002f2e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f001 fe56 	bl	80048b8 <DMA_CalcBaseAndBitshift>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	223f      	movs	r2, #63	; 0x3f
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	e0cd      	b.n	8002dbe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a3b      	ldr	r2, [pc, #236]	; (8002d14 <HAL_DMA_Init+0x42c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d022      	beq.n	8002c72 <HAL_DMA_Init+0x38a>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a39      	ldr	r2, [pc, #228]	; (8002d18 <HAL_DMA_Init+0x430>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d01d      	beq.n	8002c72 <HAL_DMA_Init+0x38a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a38      	ldr	r2, [pc, #224]	; (8002d1c <HAL_DMA_Init+0x434>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d018      	beq.n	8002c72 <HAL_DMA_Init+0x38a>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a36      	ldr	r2, [pc, #216]	; (8002d20 <HAL_DMA_Init+0x438>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_DMA_Init+0x38a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a35      	ldr	r2, [pc, #212]	; (8002d24 <HAL_DMA_Init+0x43c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00e      	beq.n	8002c72 <HAL_DMA_Init+0x38a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a33      	ldr	r2, [pc, #204]	; (8002d28 <HAL_DMA_Init+0x440>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d009      	beq.n	8002c72 <HAL_DMA_Init+0x38a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a32      	ldr	r2, [pc, #200]	; (8002d2c <HAL_DMA_Init+0x444>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d004      	beq.n	8002c72 <HAL_DMA_Init+0x38a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a30      	ldr	r2, [pc, #192]	; (8002d30 <HAL_DMA_Init+0x448>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_DMA_Init+0x38e>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_DMA_Init+0x390>
 8002c76:	2300      	movs	r3, #0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 8097 	beq.w	8002dac <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <HAL_DMA_Init+0x42c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d021      	beq.n	8002ccc <HAL_DMA_Init+0x3e4>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a22      	ldr	r2, [pc, #136]	; (8002d18 <HAL_DMA_Init+0x430>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d01c      	beq.n	8002ccc <HAL_DMA_Init+0x3e4>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a21      	ldr	r2, [pc, #132]	; (8002d1c <HAL_DMA_Init+0x434>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d017      	beq.n	8002ccc <HAL_DMA_Init+0x3e4>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1f      	ldr	r2, [pc, #124]	; (8002d20 <HAL_DMA_Init+0x438>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d012      	beq.n	8002ccc <HAL_DMA_Init+0x3e4>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <HAL_DMA_Init+0x43c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00d      	beq.n	8002ccc <HAL_DMA_Init+0x3e4>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1c      	ldr	r2, [pc, #112]	; (8002d28 <HAL_DMA_Init+0x440>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d008      	beq.n	8002ccc <HAL_DMA_Init+0x3e4>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1b      	ldr	r2, [pc, #108]	; (8002d2c <HAL_DMA_Init+0x444>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <HAL_DMA_Init+0x3e4>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a19      	ldr	r2, [pc, #100]	; (8002d30 <HAL_DMA_Init+0x448>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <HAL_DMA_Init+0x44c>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2b40      	cmp	r3, #64	; 0x40
 8002cf4:	d020      	beq.n	8002d38 <HAL_DMA_Init+0x450>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b80      	cmp	r3, #128	; 0x80
 8002cfc:	d102      	bne.n	8002d04 <HAL_DMA_Init+0x41c>
 8002cfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d02:	e01a      	b.n	8002d3a <HAL_DMA_Init+0x452>
 8002d04:	2300      	movs	r3, #0
 8002d06:	e018      	b.n	8002d3a <HAL_DMA_Init+0x452>
 8002d08:	fe10803f 	.word	0xfe10803f
 8002d0c:	5c001000 	.word	0x5c001000
 8002d10:	ffff0000 	.word	0xffff0000
 8002d14:	58025408 	.word	0x58025408
 8002d18:	5802541c 	.word	0x5802541c
 8002d1c:	58025430 	.word	0x58025430
 8002d20:	58025444 	.word	0x58025444
 8002d24:	58025458 	.word	0x58025458
 8002d28:	5802546c 	.word	0x5802546c
 8002d2c:	58025480 	.word	0x58025480
 8002d30:	58025494 	.word	0x58025494
 8002d34:	fffe000f 	.word	0xfffe000f
 8002d38:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68d2      	ldr	r2, [r2, #12]
 8002d3e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d48:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d68:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b6e      	ldr	r3, [pc, #440]	; (8002f38 <HAL_DMA_Init+0x650>)
 8002d80:	4413      	add	r3, r2
 8002d82:	4a6e      	ldr	r2, [pc, #440]	; (8002f3c <HAL_DMA_Init+0x654>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	009a      	lsls	r2, r3, #2
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f001 fd91 	bl	80048b8 <DMA_CalcBaseAndBitshift>
 8002d96:	4603      	mov	r3, r0
 8002d98:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9e:	f003 031f 	and.w	r3, r3, #31
 8002da2:	2201      	movs	r2, #1
 8002da4:	409a      	lsls	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	e008      	b.n	8002dbe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2240      	movs	r2, #64	; 0x40
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2203      	movs	r2, #3
 8002db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e0b7      	b.n	8002f2e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5f      	ldr	r2, [pc, #380]	; (8002f40 <HAL_DMA_Init+0x658>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d072      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a5d      	ldr	r2, [pc, #372]	; (8002f44 <HAL_DMA_Init+0x65c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d06d      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a5c      	ldr	r2, [pc, #368]	; (8002f48 <HAL_DMA_Init+0x660>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d068      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a5a      	ldr	r2, [pc, #360]	; (8002f4c <HAL_DMA_Init+0x664>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d063      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a59      	ldr	r2, [pc, #356]	; (8002f50 <HAL_DMA_Init+0x668>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d05e      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a57      	ldr	r2, [pc, #348]	; (8002f54 <HAL_DMA_Init+0x66c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d059      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a56      	ldr	r2, [pc, #344]	; (8002f58 <HAL_DMA_Init+0x670>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d054      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a54      	ldr	r2, [pc, #336]	; (8002f5c <HAL_DMA_Init+0x674>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d04f      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a53      	ldr	r2, [pc, #332]	; (8002f60 <HAL_DMA_Init+0x678>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d04a      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a51      	ldr	r2, [pc, #324]	; (8002f64 <HAL_DMA_Init+0x67c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d045      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a50      	ldr	r2, [pc, #320]	; (8002f68 <HAL_DMA_Init+0x680>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d040      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a4e      	ldr	r2, [pc, #312]	; (8002f6c <HAL_DMA_Init+0x684>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d03b      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a4d      	ldr	r2, [pc, #308]	; (8002f70 <HAL_DMA_Init+0x688>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d036      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a4b      	ldr	r2, [pc, #300]	; (8002f74 <HAL_DMA_Init+0x68c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d031      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a4a      	ldr	r2, [pc, #296]	; (8002f78 <HAL_DMA_Init+0x690>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d02c      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a48      	ldr	r2, [pc, #288]	; (8002f7c <HAL_DMA_Init+0x694>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d027      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a47      	ldr	r2, [pc, #284]	; (8002f80 <HAL_DMA_Init+0x698>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d022      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a45      	ldr	r2, [pc, #276]	; (8002f84 <HAL_DMA_Init+0x69c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d01d      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a44      	ldr	r2, [pc, #272]	; (8002f88 <HAL_DMA_Init+0x6a0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d018      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a42      	ldr	r2, [pc, #264]	; (8002f8c <HAL_DMA_Init+0x6a4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d013      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a41      	ldr	r2, [pc, #260]	; (8002f90 <HAL_DMA_Init+0x6a8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00e      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a3f      	ldr	r2, [pc, #252]	; (8002f94 <HAL_DMA_Init+0x6ac>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d009      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a3e      	ldr	r2, [pc, #248]	; (8002f98 <HAL_DMA_Init+0x6b0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d004      	beq.n	8002eae <HAL_DMA_Init+0x5c6>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a3c      	ldr	r2, [pc, #240]	; (8002f9c <HAL_DMA_Init+0x6b4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d101      	bne.n	8002eb2 <HAL_DMA_Init+0x5ca>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <HAL_DMA_Init+0x5cc>
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d032      	beq.n	8002f1e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f001 fe2b 	bl	8004b14 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b80      	cmp	r3, #128	; 0x80
 8002ec4:	d102      	bne.n	8002ecc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ee0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d010      	beq.n	8002f0c <HAL_DMA_Init+0x624>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d80c      	bhi.n	8002f0c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f001 fea8 	bl	8004c48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	e008      	b.n	8002f1e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	a7fdabf8 	.word	0xa7fdabf8
 8002f3c:	cccccccd 	.word	0xcccccccd
 8002f40:	40020010 	.word	0x40020010
 8002f44:	40020028 	.word	0x40020028
 8002f48:	40020040 	.word	0x40020040
 8002f4c:	40020058 	.word	0x40020058
 8002f50:	40020070 	.word	0x40020070
 8002f54:	40020088 	.word	0x40020088
 8002f58:	400200a0 	.word	0x400200a0
 8002f5c:	400200b8 	.word	0x400200b8
 8002f60:	40020410 	.word	0x40020410
 8002f64:	40020428 	.word	0x40020428
 8002f68:	40020440 	.word	0x40020440
 8002f6c:	40020458 	.word	0x40020458
 8002f70:	40020470 	.word	0x40020470
 8002f74:	40020488 	.word	0x40020488
 8002f78:	400204a0 	.word	0x400204a0
 8002f7c:	400204b8 	.word	0x400204b8
 8002f80:	58025408 	.word	0x58025408
 8002f84:	5802541c 	.word	0x5802541c
 8002f88:	58025430 	.word	0x58025430
 8002f8c:	58025444 	.word	0x58025444
 8002f90:	58025458 	.word	0x58025458
 8002f94:	5802546c 	.word	0x5802546c
 8002f98:	58025480 	.word	0x58025480
 8002f9c:	58025494 	.word	0x58025494

08002fa0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002fa8:	f7ff fa68 	bl	800247c <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e2dc      	b.n	8003572 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d008      	beq.n	8002fd6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e2cd      	b.n	8003572 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a76      	ldr	r2, [pc, #472]	; (80031b4 <HAL_DMA_Abort+0x214>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d04a      	beq.n	8003076 <HAL_DMA_Abort+0xd6>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a74      	ldr	r2, [pc, #464]	; (80031b8 <HAL_DMA_Abort+0x218>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d045      	beq.n	8003076 <HAL_DMA_Abort+0xd6>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a73      	ldr	r2, [pc, #460]	; (80031bc <HAL_DMA_Abort+0x21c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d040      	beq.n	8003076 <HAL_DMA_Abort+0xd6>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a71      	ldr	r2, [pc, #452]	; (80031c0 <HAL_DMA_Abort+0x220>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d03b      	beq.n	8003076 <HAL_DMA_Abort+0xd6>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a70      	ldr	r2, [pc, #448]	; (80031c4 <HAL_DMA_Abort+0x224>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d036      	beq.n	8003076 <HAL_DMA_Abort+0xd6>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a6e      	ldr	r2, [pc, #440]	; (80031c8 <HAL_DMA_Abort+0x228>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d031      	beq.n	8003076 <HAL_DMA_Abort+0xd6>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a6d      	ldr	r2, [pc, #436]	; (80031cc <HAL_DMA_Abort+0x22c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d02c      	beq.n	8003076 <HAL_DMA_Abort+0xd6>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6b      	ldr	r2, [pc, #428]	; (80031d0 <HAL_DMA_Abort+0x230>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d027      	beq.n	8003076 <HAL_DMA_Abort+0xd6>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a6a      	ldr	r2, [pc, #424]	; (80031d4 <HAL_DMA_Abort+0x234>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d022      	beq.n	8003076 <HAL_DMA_Abort+0xd6>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a68      	ldr	r2, [pc, #416]	; (80031d8 <HAL_DMA_Abort+0x238>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01d      	beq.n	8003076 <HAL_DMA_Abort+0xd6>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a67      	ldr	r2, [pc, #412]	; (80031dc <HAL_DMA_Abort+0x23c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d018      	beq.n	8003076 <HAL_DMA_Abort+0xd6>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a65      	ldr	r2, [pc, #404]	; (80031e0 <HAL_DMA_Abort+0x240>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <HAL_DMA_Abort+0xd6>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a64      	ldr	r2, [pc, #400]	; (80031e4 <HAL_DMA_Abort+0x244>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_DMA_Abort+0xd6>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a62      	ldr	r2, [pc, #392]	; (80031e8 <HAL_DMA_Abort+0x248>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_DMA_Abort+0xd6>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a61      	ldr	r2, [pc, #388]	; (80031ec <HAL_DMA_Abort+0x24c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_DMA_Abort+0xd6>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a5f      	ldr	r2, [pc, #380]	; (80031f0 <HAL_DMA_Abort+0x250>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d101      	bne.n	800307a <HAL_DMA_Abort+0xda>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <HAL_DMA_Abort+0xdc>
 800307a:	2300      	movs	r3, #0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 021e 	bic.w	r2, r2, #30
 800308e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800309e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	617b      	str	r3, [r7, #20]
 80030a6:	e00a      	b.n	80030be <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 020e 	bic.w	r2, r2, #14
 80030b6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a3c      	ldr	r2, [pc, #240]	; (80031b4 <HAL_DMA_Abort+0x214>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d072      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a3a      	ldr	r2, [pc, #232]	; (80031b8 <HAL_DMA_Abort+0x218>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d06d      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a39      	ldr	r2, [pc, #228]	; (80031bc <HAL_DMA_Abort+0x21c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d068      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a37      	ldr	r2, [pc, #220]	; (80031c0 <HAL_DMA_Abort+0x220>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d063      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a36      	ldr	r2, [pc, #216]	; (80031c4 <HAL_DMA_Abort+0x224>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d05e      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a34      	ldr	r2, [pc, #208]	; (80031c8 <HAL_DMA_Abort+0x228>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d059      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a33      	ldr	r2, [pc, #204]	; (80031cc <HAL_DMA_Abort+0x22c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d054      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a31      	ldr	r2, [pc, #196]	; (80031d0 <HAL_DMA_Abort+0x230>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d04f      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a30      	ldr	r2, [pc, #192]	; (80031d4 <HAL_DMA_Abort+0x234>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d04a      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a2e      	ldr	r2, [pc, #184]	; (80031d8 <HAL_DMA_Abort+0x238>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d045      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a2d      	ldr	r2, [pc, #180]	; (80031dc <HAL_DMA_Abort+0x23c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d040      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a2b      	ldr	r2, [pc, #172]	; (80031e0 <HAL_DMA_Abort+0x240>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d03b      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a2a      	ldr	r2, [pc, #168]	; (80031e4 <HAL_DMA_Abort+0x244>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d036      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a28      	ldr	r2, [pc, #160]	; (80031e8 <HAL_DMA_Abort+0x248>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d031      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a27      	ldr	r2, [pc, #156]	; (80031ec <HAL_DMA_Abort+0x24c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d02c      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a25      	ldr	r2, [pc, #148]	; (80031f0 <HAL_DMA_Abort+0x250>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d027      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a24      	ldr	r2, [pc, #144]	; (80031f4 <HAL_DMA_Abort+0x254>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d022      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a22      	ldr	r2, [pc, #136]	; (80031f8 <HAL_DMA_Abort+0x258>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d01d      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a21      	ldr	r2, [pc, #132]	; (80031fc <HAL_DMA_Abort+0x25c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d018      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a1f      	ldr	r2, [pc, #124]	; (8003200 <HAL_DMA_Abort+0x260>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1e      	ldr	r2, [pc, #120]	; (8003204 <HAL_DMA_Abort+0x264>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d00e      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1c      	ldr	r2, [pc, #112]	; (8003208 <HAL_DMA_Abort+0x268>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d009      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a1b      	ldr	r2, [pc, #108]	; (800320c <HAL_DMA_Abort+0x26c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d004      	beq.n	80031ae <HAL_DMA_Abort+0x20e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a19      	ldr	r2, [pc, #100]	; (8003210 <HAL_DMA_Abort+0x270>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d132      	bne.n	8003214 <HAL_DMA_Abort+0x274>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e031      	b.n	8003216 <HAL_DMA_Abort+0x276>
 80031b2:	bf00      	nop
 80031b4:	40020010 	.word	0x40020010
 80031b8:	40020028 	.word	0x40020028
 80031bc:	40020040 	.word	0x40020040
 80031c0:	40020058 	.word	0x40020058
 80031c4:	40020070 	.word	0x40020070
 80031c8:	40020088 	.word	0x40020088
 80031cc:	400200a0 	.word	0x400200a0
 80031d0:	400200b8 	.word	0x400200b8
 80031d4:	40020410 	.word	0x40020410
 80031d8:	40020428 	.word	0x40020428
 80031dc:	40020440 	.word	0x40020440
 80031e0:	40020458 	.word	0x40020458
 80031e4:	40020470 	.word	0x40020470
 80031e8:	40020488 	.word	0x40020488
 80031ec:	400204a0 	.word	0x400204a0
 80031f0:	400204b8 	.word	0x400204b8
 80031f4:	58025408 	.word	0x58025408
 80031f8:	5802541c 	.word	0x5802541c
 80031fc:	58025430 	.word	0x58025430
 8003200:	58025444 	.word	0x58025444
 8003204:	58025458 	.word	0x58025458
 8003208:	5802546c 	.word	0x5802546c
 800320c:	58025480 	.word	0x58025480
 8003210:	58025494 	.word	0x58025494
 8003214:	2300      	movs	r3, #0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003228:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a6d      	ldr	r2, [pc, #436]	; (80033e4 <HAL_DMA_Abort+0x444>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d04a      	beq.n	80032ca <HAL_DMA_Abort+0x32a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a6b      	ldr	r2, [pc, #428]	; (80033e8 <HAL_DMA_Abort+0x448>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d045      	beq.n	80032ca <HAL_DMA_Abort+0x32a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a6a      	ldr	r2, [pc, #424]	; (80033ec <HAL_DMA_Abort+0x44c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d040      	beq.n	80032ca <HAL_DMA_Abort+0x32a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a68      	ldr	r2, [pc, #416]	; (80033f0 <HAL_DMA_Abort+0x450>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d03b      	beq.n	80032ca <HAL_DMA_Abort+0x32a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a67      	ldr	r2, [pc, #412]	; (80033f4 <HAL_DMA_Abort+0x454>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d036      	beq.n	80032ca <HAL_DMA_Abort+0x32a>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a65      	ldr	r2, [pc, #404]	; (80033f8 <HAL_DMA_Abort+0x458>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d031      	beq.n	80032ca <HAL_DMA_Abort+0x32a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a64      	ldr	r2, [pc, #400]	; (80033fc <HAL_DMA_Abort+0x45c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d02c      	beq.n	80032ca <HAL_DMA_Abort+0x32a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a62      	ldr	r2, [pc, #392]	; (8003400 <HAL_DMA_Abort+0x460>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d027      	beq.n	80032ca <HAL_DMA_Abort+0x32a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a61      	ldr	r2, [pc, #388]	; (8003404 <HAL_DMA_Abort+0x464>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d022      	beq.n	80032ca <HAL_DMA_Abort+0x32a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a5f      	ldr	r2, [pc, #380]	; (8003408 <HAL_DMA_Abort+0x468>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01d      	beq.n	80032ca <HAL_DMA_Abort+0x32a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a5e      	ldr	r2, [pc, #376]	; (800340c <HAL_DMA_Abort+0x46c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d018      	beq.n	80032ca <HAL_DMA_Abort+0x32a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a5c      	ldr	r2, [pc, #368]	; (8003410 <HAL_DMA_Abort+0x470>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_DMA_Abort+0x32a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a5b      	ldr	r2, [pc, #364]	; (8003414 <HAL_DMA_Abort+0x474>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00e      	beq.n	80032ca <HAL_DMA_Abort+0x32a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a59      	ldr	r2, [pc, #356]	; (8003418 <HAL_DMA_Abort+0x478>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_DMA_Abort+0x32a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a58      	ldr	r2, [pc, #352]	; (800341c <HAL_DMA_Abort+0x47c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_DMA_Abort+0x32a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a56      	ldr	r2, [pc, #344]	; (8003420 <HAL_DMA_Abort+0x480>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d108      	bne.n	80032dc <HAL_DMA_Abort+0x33c>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0201 	bic.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	e007      	b.n	80032ec <HAL_DMA_Abort+0x34c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0201 	bic.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032ec:	e013      	b.n	8003316 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ee:	f7ff f8c5 	bl	800247c <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b05      	cmp	r3, #5
 80032fa:	d90c      	bls.n	8003316 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2220      	movs	r2, #32
 8003300:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2203      	movs	r2, #3
 800330e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e12d      	b.n	8003572 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e5      	bne.n	80032ee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2f      	ldr	r2, [pc, #188]	; (80033e4 <HAL_DMA_Abort+0x444>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d04a      	beq.n	80033c2 <HAL_DMA_Abort+0x422>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a2d      	ldr	r2, [pc, #180]	; (80033e8 <HAL_DMA_Abort+0x448>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d045      	beq.n	80033c2 <HAL_DMA_Abort+0x422>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a2c      	ldr	r2, [pc, #176]	; (80033ec <HAL_DMA_Abort+0x44c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d040      	beq.n	80033c2 <HAL_DMA_Abort+0x422>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2a      	ldr	r2, [pc, #168]	; (80033f0 <HAL_DMA_Abort+0x450>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d03b      	beq.n	80033c2 <HAL_DMA_Abort+0x422>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a29      	ldr	r2, [pc, #164]	; (80033f4 <HAL_DMA_Abort+0x454>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d036      	beq.n	80033c2 <HAL_DMA_Abort+0x422>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a27      	ldr	r2, [pc, #156]	; (80033f8 <HAL_DMA_Abort+0x458>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d031      	beq.n	80033c2 <HAL_DMA_Abort+0x422>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a26      	ldr	r2, [pc, #152]	; (80033fc <HAL_DMA_Abort+0x45c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d02c      	beq.n	80033c2 <HAL_DMA_Abort+0x422>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a24      	ldr	r2, [pc, #144]	; (8003400 <HAL_DMA_Abort+0x460>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d027      	beq.n	80033c2 <HAL_DMA_Abort+0x422>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a23      	ldr	r2, [pc, #140]	; (8003404 <HAL_DMA_Abort+0x464>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d022      	beq.n	80033c2 <HAL_DMA_Abort+0x422>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a21      	ldr	r2, [pc, #132]	; (8003408 <HAL_DMA_Abort+0x468>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01d      	beq.n	80033c2 <HAL_DMA_Abort+0x422>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a20      	ldr	r2, [pc, #128]	; (800340c <HAL_DMA_Abort+0x46c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d018      	beq.n	80033c2 <HAL_DMA_Abort+0x422>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1e      	ldr	r2, [pc, #120]	; (8003410 <HAL_DMA_Abort+0x470>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <HAL_DMA_Abort+0x422>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1d      	ldr	r2, [pc, #116]	; (8003414 <HAL_DMA_Abort+0x474>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00e      	beq.n	80033c2 <HAL_DMA_Abort+0x422>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a1b      	ldr	r2, [pc, #108]	; (8003418 <HAL_DMA_Abort+0x478>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d009      	beq.n	80033c2 <HAL_DMA_Abort+0x422>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a1a      	ldr	r2, [pc, #104]	; (800341c <HAL_DMA_Abort+0x47c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d004      	beq.n	80033c2 <HAL_DMA_Abort+0x422>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a18      	ldr	r2, [pc, #96]	; (8003420 <HAL_DMA_Abort+0x480>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d101      	bne.n	80033c6 <HAL_DMA_Abort+0x426>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_DMA_Abort+0x428>
 80033c6:	2300      	movs	r3, #0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d02b      	beq.n	8003424 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	223f      	movs	r2, #63	; 0x3f
 80033dc:	409a      	lsls	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	609a      	str	r2, [r3, #8]
 80033e2:	e02a      	b.n	800343a <HAL_DMA_Abort+0x49a>
 80033e4:	40020010 	.word	0x40020010
 80033e8:	40020028 	.word	0x40020028
 80033ec:	40020040 	.word	0x40020040
 80033f0:	40020058 	.word	0x40020058
 80033f4:	40020070 	.word	0x40020070
 80033f8:	40020088 	.word	0x40020088
 80033fc:	400200a0 	.word	0x400200a0
 8003400:	400200b8 	.word	0x400200b8
 8003404:	40020410 	.word	0x40020410
 8003408:	40020428 	.word	0x40020428
 800340c:	40020440 	.word	0x40020440
 8003410:	40020458 	.word	0x40020458
 8003414:	40020470 	.word	0x40020470
 8003418:	40020488 	.word	0x40020488
 800341c:	400204a0 	.word	0x400204a0
 8003420:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003428:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	2201      	movs	r2, #1
 8003434:	409a      	lsls	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a4f      	ldr	r2, [pc, #316]	; (800357c <HAL_DMA_Abort+0x5dc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d072      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a4d      	ldr	r2, [pc, #308]	; (8003580 <HAL_DMA_Abort+0x5e0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d06d      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a4c      	ldr	r2, [pc, #304]	; (8003584 <HAL_DMA_Abort+0x5e4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d068      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a4a      	ldr	r2, [pc, #296]	; (8003588 <HAL_DMA_Abort+0x5e8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d063      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a49      	ldr	r2, [pc, #292]	; (800358c <HAL_DMA_Abort+0x5ec>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d05e      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a47      	ldr	r2, [pc, #284]	; (8003590 <HAL_DMA_Abort+0x5f0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d059      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a46      	ldr	r2, [pc, #280]	; (8003594 <HAL_DMA_Abort+0x5f4>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d054      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a44      	ldr	r2, [pc, #272]	; (8003598 <HAL_DMA_Abort+0x5f8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d04f      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a43      	ldr	r2, [pc, #268]	; (800359c <HAL_DMA_Abort+0x5fc>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d04a      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a41      	ldr	r2, [pc, #260]	; (80035a0 <HAL_DMA_Abort+0x600>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d045      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a40      	ldr	r2, [pc, #256]	; (80035a4 <HAL_DMA_Abort+0x604>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d040      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a3e      	ldr	r2, [pc, #248]	; (80035a8 <HAL_DMA_Abort+0x608>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d03b      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a3d      	ldr	r2, [pc, #244]	; (80035ac <HAL_DMA_Abort+0x60c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d036      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a3b      	ldr	r2, [pc, #236]	; (80035b0 <HAL_DMA_Abort+0x610>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d031      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a3a      	ldr	r2, [pc, #232]	; (80035b4 <HAL_DMA_Abort+0x614>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d02c      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a38      	ldr	r2, [pc, #224]	; (80035b8 <HAL_DMA_Abort+0x618>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d027      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a37      	ldr	r2, [pc, #220]	; (80035bc <HAL_DMA_Abort+0x61c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d022      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a35      	ldr	r2, [pc, #212]	; (80035c0 <HAL_DMA_Abort+0x620>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d01d      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a34      	ldr	r2, [pc, #208]	; (80035c4 <HAL_DMA_Abort+0x624>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d018      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a32      	ldr	r2, [pc, #200]	; (80035c8 <HAL_DMA_Abort+0x628>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a31      	ldr	r2, [pc, #196]	; (80035cc <HAL_DMA_Abort+0x62c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00e      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2f      	ldr	r2, [pc, #188]	; (80035d0 <HAL_DMA_Abort+0x630>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d009      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a2e      	ldr	r2, [pc, #184]	; (80035d4 <HAL_DMA_Abort+0x634>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d004      	beq.n	800352a <HAL_DMA_Abort+0x58a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a2c      	ldr	r2, [pc, #176]	; (80035d8 <HAL_DMA_Abort+0x638>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d101      	bne.n	800352e <HAL_DMA_Abort+0x58e>
 800352a:	2301      	movs	r3, #1
 800352c:	e000      	b.n	8003530 <HAL_DMA_Abort+0x590>
 800352e:	2300      	movs	r3, #0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d015      	beq.n	8003560 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800353c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00c      	beq.n	8003560 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003554:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800355e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40020010 	.word	0x40020010
 8003580:	40020028 	.word	0x40020028
 8003584:	40020040 	.word	0x40020040
 8003588:	40020058 	.word	0x40020058
 800358c:	40020070 	.word	0x40020070
 8003590:	40020088 	.word	0x40020088
 8003594:	400200a0 	.word	0x400200a0
 8003598:	400200b8 	.word	0x400200b8
 800359c:	40020410 	.word	0x40020410
 80035a0:	40020428 	.word	0x40020428
 80035a4:	40020440 	.word	0x40020440
 80035a8:	40020458 	.word	0x40020458
 80035ac:	40020470 	.word	0x40020470
 80035b0:	40020488 	.word	0x40020488
 80035b4:	400204a0 	.word	0x400204a0
 80035b8:	400204b8 	.word	0x400204b8
 80035bc:	58025408 	.word	0x58025408
 80035c0:	5802541c 	.word	0x5802541c
 80035c4:	58025430 	.word	0x58025430
 80035c8:	58025444 	.word	0x58025444
 80035cc:	58025458 	.word	0x58025458
 80035d0:	5802546c 	.word	0x5802546c
 80035d4:	58025480 	.word	0x58025480
 80035d8:	58025494 	.word	0x58025494

080035dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e205      	b.n	80039fa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d004      	beq.n	8003604 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2280      	movs	r2, #128	; 0x80
 80035fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e1fa      	b.n	80039fa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a8c      	ldr	r2, [pc, #560]	; (800383c <HAL_DMA_Abort_IT+0x260>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d04a      	beq.n	80036a4 <HAL_DMA_Abort_IT+0xc8>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a8b      	ldr	r2, [pc, #556]	; (8003840 <HAL_DMA_Abort_IT+0x264>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d045      	beq.n	80036a4 <HAL_DMA_Abort_IT+0xc8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a89      	ldr	r2, [pc, #548]	; (8003844 <HAL_DMA_Abort_IT+0x268>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d040      	beq.n	80036a4 <HAL_DMA_Abort_IT+0xc8>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a88      	ldr	r2, [pc, #544]	; (8003848 <HAL_DMA_Abort_IT+0x26c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d03b      	beq.n	80036a4 <HAL_DMA_Abort_IT+0xc8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a86      	ldr	r2, [pc, #536]	; (800384c <HAL_DMA_Abort_IT+0x270>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d036      	beq.n	80036a4 <HAL_DMA_Abort_IT+0xc8>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a85      	ldr	r2, [pc, #532]	; (8003850 <HAL_DMA_Abort_IT+0x274>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d031      	beq.n	80036a4 <HAL_DMA_Abort_IT+0xc8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a83      	ldr	r2, [pc, #524]	; (8003854 <HAL_DMA_Abort_IT+0x278>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d02c      	beq.n	80036a4 <HAL_DMA_Abort_IT+0xc8>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a82      	ldr	r2, [pc, #520]	; (8003858 <HAL_DMA_Abort_IT+0x27c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d027      	beq.n	80036a4 <HAL_DMA_Abort_IT+0xc8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a80      	ldr	r2, [pc, #512]	; (800385c <HAL_DMA_Abort_IT+0x280>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d022      	beq.n	80036a4 <HAL_DMA_Abort_IT+0xc8>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a7f      	ldr	r2, [pc, #508]	; (8003860 <HAL_DMA_Abort_IT+0x284>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d01d      	beq.n	80036a4 <HAL_DMA_Abort_IT+0xc8>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a7d      	ldr	r2, [pc, #500]	; (8003864 <HAL_DMA_Abort_IT+0x288>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d018      	beq.n	80036a4 <HAL_DMA_Abort_IT+0xc8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a7c      	ldr	r2, [pc, #496]	; (8003868 <HAL_DMA_Abort_IT+0x28c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d013      	beq.n	80036a4 <HAL_DMA_Abort_IT+0xc8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a7a      	ldr	r2, [pc, #488]	; (800386c <HAL_DMA_Abort_IT+0x290>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00e      	beq.n	80036a4 <HAL_DMA_Abort_IT+0xc8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a79      	ldr	r2, [pc, #484]	; (8003870 <HAL_DMA_Abort_IT+0x294>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d009      	beq.n	80036a4 <HAL_DMA_Abort_IT+0xc8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a77      	ldr	r2, [pc, #476]	; (8003874 <HAL_DMA_Abort_IT+0x298>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <HAL_DMA_Abort_IT+0xc8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a76      	ldr	r2, [pc, #472]	; (8003878 <HAL_DMA_Abort_IT+0x29c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d101      	bne.n	80036a8 <HAL_DMA_Abort_IT+0xcc>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <HAL_DMA_Abort_IT+0xce>
 80036a8:	2300      	movs	r3, #0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d065      	beq.n	800377a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2204      	movs	r2, #4
 80036b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a60      	ldr	r2, [pc, #384]	; (800383c <HAL_DMA_Abort_IT+0x260>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d04a      	beq.n	8003756 <HAL_DMA_Abort_IT+0x17a>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a5e      	ldr	r2, [pc, #376]	; (8003840 <HAL_DMA_Abort_IT+0x264>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d045      	beq.n	8003756 <HAL_DMA_Abort_IT+0x17a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a5d      	ldr	r2, [pc, #372]	; (8003844 <HAL_DMA_Abort_IT+0x268>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d040      	beq.n	8003756 <HAL_DMA_Abort_IT+0x17a>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a5b      	ldr	r2, [pc, #364]	; (8003848 <HAL_DMA_Abort_IT+0x26c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d03b      	beq.n	8003756 <HAL_DMA_Abort_IT+0x17a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a5a      	ldr	r2, [pc, #360]	; (800384c <HAL_DMA_Abort_IT+0x270>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d036      	beq.n	8003756 <HAL_DMA_Abort_IT+0x17a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a58      	ldr	r2, [pc, #352]	; (8003850 <HAL_DMA_Abort_IT+0x274>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d031      	beq.n	8003756 <HAL_DMA_Abort_IT+0x17a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a57      	ldr	r2, [pc, #348]	; (8003854 <HAL_DMA_Abort_IT+0x278>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d02c      	beq.n	8003756 <HAL_DMA_Abort_IT+0x17a>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a55      	ldr	r2, [pc, #340]	; (8003858 <HAL_DMA_Abort_IT+0x27c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d027      	beq.n	8003756 <HAL_DMA_Abort_IT+0x17a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a54      	ldr	r2, [pc, #336]	; (800385c <HAL_DMA_Abort_IT+0x280>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d022      	beq.n	8003756 <HAL_DMA_Abort_IT+0x17a>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a52      	ldr	r2, [pc, #328]	; (8003860 <HAL_DMA_Abort_IT+0x284>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01d      	beq.n	8003756 <HAL_DMA_Abort_IT+0x17a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a51      	ldr	r2, [pc, #324]	; (8003864 <HAL_DMA_Abort_IT+0x288>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d018      	beq.n	8003756 <HAL_DMA_Abort_IT+0x17a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a4f      	ldr	r2, [pc, #316]	; (8003868 <HAL_DMA_Abort_IT+0x28c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <HAL_DMA_Abort_IT+0x17a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a4e      	ldr	r2, [pc, #312]	; (800386c <HAL_DMA_Abort_IT+0x290>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00e      	beq.n	8003756 <HAL_DMA_Abort_IT+0x17a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a4c      	ldr	r2, [pc, #304]	; (8003870 <HAL_DMA_Abort_IT+0x294>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d009      	beq.n	8003756 <HAL_DMA_Abort_IT+0x17a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a4b      	ldr	r2, [pc, #300]	; (8003874 <HAL_DMA_Abort_IT+0x298>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_DMA_Abort_IT+0x17a>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a49      	ldr	r2, [pc, #292]	; (8003878 <HAL_DMA_Abort_IT+0x29c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d108      	bne.n	8003768 <HAL_DMA_Abort_IT+0x18c>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0201 	bic.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	e147      	b.n	80039f8 <HAL_DMA_Abort_IT+0x41c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e13e      	b.n	80039f8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 020e 	bic.w	r2, r2, #14
 8003788:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a2b      	ldr	r2, [pc, #172]	; (800383c <HAL_DMA_Abort_IT+0x260>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d04a      	beq.n	800382a <HAL_DMA_Abort_IT+0x24e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a29      	ldr	r2, [pc, #164]	; (8003840 <HAL_DMA_Abort_IT+0x264>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d045      	beq.n	800382a <HAL_DMA_Abort_IT+0x24e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a28      	ldr	r2, [pc, #160]	; (8003844 <HAL_DMA_Abort_IT+0x268>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d040      	beq.n	800382a <HAL_DMA_Abort_IT+0x24e>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a26      	ldr	r2, [pc, #152]	; (8003848 <HAL_DMA_Abort_IT+0x26c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d03b      	beq.n	800382a <HAL_DMA_Abort_IT+0x24e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a25      	ldr	r2, [pc, #148]	; (800384c <HAL_DMA_Abort_IT+0x270>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d036      	beq.n	800382a <HAL_DMA_Abort_IT+0x24e>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a23      	ldr	r2, [pc, #140]	; (8003850 <HAL_DMA_Abort_IT+0x274>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d031      	beq.n	800382a <HAL_DMA_Abort_IT+0x24e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a22      	ldr	r2, [pc, #136]	; (8003854 <HAL_DMA_Abort_IT+0x278>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d02c      	beq.n	800382a <HAL_DMA_Abort_IT+0x24e>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a20      	ldr	r2, [pc, #128]	; (8003858 <HAL_DMA_Abort_IT+0x27c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d027      	beq.n	800382a <HAL_DMA_Abort_IT+0x24e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a1f      	ldr	r2, [pc, #124]	; (800385c <HAL_DMA_Abort_IT+0x280>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d022      	beq.n	800382a <HAL_DMA_Abort_IT+0x24e>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <HAL_DMA_Abort_IT+0x284>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d01d      	beq.n	800382a <HAL_DMA_Abort_IT+0x24e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1c      	ldr	r2, [pc, #112]	; (8003864 <HAL_DMA_Abort_IT+0x288>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d018      	beq.n	800382a <HAL_DMA_Abort_IT+0x24e>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1a      	ldr	r2, [pc, #104]	; (8003868 <HAL_DMA_Abort_IT+0x28c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d013      	beq.n	800382a <HAL_DMA_Abort_IT+0x24e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a19      	ldr	r2, [pc, #100]	; (800386c <HAL_DMA_Abort_IT+0x290>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00e      	beq.n	800382a <HAL_DMA_Abort_IT+0x24e>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a17      	ldr	r2, [pc, #92]	; (8003870 <HAL_DMA_Abort_IT+0x294>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d009      	beq.n	800382a <HAL_DMA_Abort_IT+0x24e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a16      	ldr	r2, [pc, #88]	; (8003874 <HAL_DMA_Abort_IT+0x298>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d004      	beq.n	800382a <HAL_DMA_Abort_IT+0x24e>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a14      	ldr	r2, [pc, #80]	; (8003878 <HAL_DMA_Abort_IT+0x29c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d128      	bne.n	800387c <HAL_DMA_Abort_IT+0x2a0>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	e027      	b.n	800388c <HAL_DMA_Abort_IT+0x2b0>
 800383c:	40020010 	.word	0x40020010
 8003840:	40020028 	.word	0x40020028
 8003844:	40020040 	.word	0x40020040
 8003848:	40020058 	.word	0x40020058
 800384c:	40020070 	.word	0x40020070
 8003850:	40020088 	.word	0x40020088
 8003854:	400200a0 	.word	0x400200a0
 8003858:	400200b8 	.word	0x400200b8
 800385c:	40020410 	.word	0x40020410
 8003860:	40020428 	.word	0x40020428
 8003864:	40020440 	.word	0x40020440
 8003868:	40020458 	.word	0x40020458
 800386c:	40020470 	.word	0x40020470
 8003870:	40020488 	.word	0x40020488
 8003874:	400204a0 	.word	0x400204a0
 8003878:	400204b8 	.word	0x400204b8
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a5c      	ldr	r2, [pc, #368]	; (8003a04 <HAL_DMA_Abort_IT+0x428>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d072      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a5b      	ldr	r2, [pc, #364]	; (8003a08 <HAL_DMA_Abort_IT+0x42c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d06d      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a59      	ldr	r2, [pc, #356]	; (8003a0c <HAL_DMA_Abort_IT+0x430>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d068      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a58      	ldr	r2, [pc, #352]	; (8003a10 <HAL_DMA_Abort_IT+0x434>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d063      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a56      	ldr	r2, [pc, #344]	; (8003a14 <HAL_DMA_Abort_IT+0x438>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d05e      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a55      	ldr	r2, [pc, #340]	; (8003a18 <HAL_DMA_Abort_IT+0x43c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d059      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a53      	ldr	r2, [pc, #332]	; (8003a1c <HAL_DMA_Abort_IT+0x440>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d054      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a52      	ldr	r2, [pc, #328]	; (8003a20 <HAL_DMA_Abort_IT+0x444>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d04f      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a50      	ldr	r2, [pc, #320]	; (8003a24 <HAL_DMA_Abort_IT+0x448>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d04a      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a4f      	ldr	r2, [pc, #316]	; (8003a28 <HAL_DMA_Abort_IT+0x44c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d045      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a4d      	ldr	r2, [pc, #308]	; (8003a2c <HAL_DMA_Abort_IT+0x450>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d040      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a4c      	ldr	r2, [pc, #304]	; (8003a30 <HAL_DMA_Abort_IT+0x454>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d03b      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a4a      	ldr	r2, [pc, #296]	; (8003a34 <HAL_DMA_Abort_IT+0x458>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d036      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a49      	ldr	r2, [pc, #292]	; (8003a38 <HAL_DMA_Abort_IT+0x45c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d031      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a47      	ldr	r2, [pc, #284]	; (8003a3c <HAL_DMA_Abort_IT+0x460>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d02c      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a46      	ldr	r2, [pc, #280]	; (8003a40 <HAL_DMA_Abort_IT+0x464>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d027      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a44      	ldr	r2, [pc, #272]	; (8003a44 <HAL_DMA_Abort_IT+0x468>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d022      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a43      	ldr	r2, [pc, #268]	; (8003a48 <HAL_DMA_Abort_IT+0x46c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d01d      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a41      	ldr	r2, [pc, #260]	; (8003a4c <HAL_DMA_Abort_IT+0x470>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d018      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a40      	ldr	r2, [pc, #256]	; (8003a50 <HAL_DMA_Abort_IT+0x474>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d013      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a3e      	ldr	r2, [pc, #248]	; (8003a54 <HAL_DMA_Abort_IT+0x478>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00e      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a3d      	ldr	r2, [pc, #244]	; (8003a58 <HAL_DMA_Abort_IT+0x47c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d009      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a3b      	ldr	r2, [pc, #236]	; (8003a5c <HAL_DMA_Abort_IT+0x480>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d004      	beq.n	800397c <HAL_DMA_Abort_IT+0x3a0>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a3a      	ldr	r2, [pc, #232]	; (8003a60 <HAL_DMA_Abort_IT+0x484>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d101      	bne.n	8003980 <HAL_DMA_Abort_IT+0x3a4>
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <HAL_DMA_Abort_IT+0x3a6>
 8003980:	2300      	movs	r3, #0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d028      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003994:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	f003 031f 	and.w	r3, r3, #31
 80039a4:	2201      	movs	r2, #1
 80039a6:	409a      	lsls	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00c      	beq.n	80039d8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40020010 	.word	0x40020010
 8003a08:	40020028 	.word	0x40020028
 8003a0c:	40020040 	.word	0x40020040
 8003a10:	40020058 	.word	0x40020058
 8003a14:	40020070 	.word	0x40020070
 8003a18:	40020088 	.word	0x40020088
 8003a1c:	400200a0 	.word	0x400200a0
 8003a20:	400200b8 	.word	0x400200b8
 8003a24:	40020410 	.word	0x40020410
 8003a28:	40020428 	.word	0x40020428
 8003a2c:	40020440 	.word	0x40020440
 8003a30:	40020458 	.word	0x40020458
 8003a34:	40020470 	.word	0x40020470
 8003a38:	40020488 	.word	0x40020488
 8003a3c:	400204a0 	.word	0x400204a0
 8003a40:	400204b8 	.word	0x400204b8
 8003a44:	58025408 	.word	0x58025408
 8003a48:	5802541c 	.word	0x5802541c
 8003a4c:	58025430 	.word	0x58025430
 8003a50:	58025444 	.word	0x58025444
 8003a54:	58025458 	.word	0x58025458
 8003a58:	5802546c 	.word	0x5802546c
 8003a5c:	58025480 	.word	0x58025480
 8003a60:	58025494 	.word	0x58025494

08003a64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	; 0x28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a70:	4b67      	ldr	r3, [pc, #412]	; (8003c10 <HAL_DMA_IRQHandler+0x1ac>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a67      	ldr	r2, [pc, #412]	; (8003c14 <HAL_DMA_IRQHandler+0x1b0>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	0a9b      	lsrs	r3, r3, #10
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a82:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a5f      	ldr	r2, [pc, #380]	; (8003c18 <HAL_DMA_IRQHandler+0x1b4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d04a      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xd2>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a5d      	ldr	r2, [pc, #372]	; (8003c1c <HAL_DMA_IRQHandler+0x1b8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d045      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xd2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a5c      	ldr	r2, [pc, #368]	; (8003c20 <HAL_DMA_IRQHandler+0x1bc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d040      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xd2>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a5a      	ldr	r2, [pc, #360]	; (8003c24 <HAL_DMA_IRQHandler+0x1c0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d03b      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xd2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a59      	ldr	r2, [pc, #356]	; (8003c28 <HAL_DMA_IRQHandler+0x1c4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d036      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xd2>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a57      	ldr	r2, [pc, #348]	; (8003c2c <HAL_DMA_IRQHandler+0x1c8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d031      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xd2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a56      	ldr	r2, [pc, #344]	; (8003c30 <HAL_DMA_IRQHandler+0x1cc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d02c      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xd2>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a54      	ldr	r2, [pc, #336]	; (8003c34 <HAL_DMA_IRQHandler+0x1d0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d027      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xd2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a53      	ldr	r2, [pc, #332]	; (8003c38 <HAL_DMA_IRQHandler+0x1d4>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d022      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xd2>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a51      	ldr	r2, [pc, #324]	; (8003c3c <HAL_DMA_IRQHandler+0x1d8>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01d      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xd2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a50      	ldr	r2, [pc, #320]	; (8003c40 <HAL_DMA_IRQHandler+0x1dc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d018      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xd2>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a4e      	ldr	r2, [pc, #312]	; (8003c44 <HAL_DMA_IRQHandler+0x1e0>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xd2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a4d      	ldr	r2, [pc, #308]	; (8003c48 <HAL_DMA_IRQHandler+0x1e4>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00e      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xd2>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a4b      	ldr	r2, [pc, #300]	; (8003c4c <HAL_DMA_IRQHandler+0x1e8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d009      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xd2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a4a      	ldr	r2, [pc, #296]	; (8003c50 <HAL_DMA_IRQHandler+0x1ec>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d004      	beq.n	8003b36 <HAL_DMA_IRQHandler+0xd2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a48      	ldr	r2, [pc, #288]	; (8003c54 <HAL_DMA_IRQHandler+0x1f0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d101      	bne.n	8003b3a <HAL_DMA_IRQHandler+0xd6>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <HAL_DMA_IRQHandler+0xd8>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 842b 	beq.w	8004398 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	409a      	lsls	r2, r3
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 80a2 	beq.w	8003c9c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a2e      	ldr	r2, [pc, #184]	; (8003c18 <HAL_DMA_IRQHandler+0x1b4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d04a      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x194>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a2d      	ldr	r2, [pc, #180]	; (8003c1c <HAL_DMA_IRQHandler+0x1b8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d045      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x194>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a2b      	ldr	r2, [pc, #172]	; (8003c20 <HAL_DMA_IRQHandler+0x1bc>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d040      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x194>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a2a      	ldr	r2, [pc, #168]	; (8003c24 <HAL_DMA_IRQHandler+0x1c0>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d03b      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x194>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a28      	ldr	r2, [pc, #160]	; (8003c28 <HAL_DMA_IRQHandler+0x1c4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d036      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x194>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a27      	ldr	r2, [pc, #156]	; (8003c2c <HAL_DMA_IRQHandler+0x1c8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d031      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x194>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a25      	ldr	r2, [pc, #148]	; (8003c30 <HAL_DMA_IRQHandler+0x1cc>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d02c      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x194>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a24      	ldr	r2, [pc, #144]	; (8003c34 <HAL_DMA_IRQHandler+0x1d0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d027      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x194>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a22      	ldr	r2, [pc, #136]	; (8003c38 <HAL_DMA_IRQHandler+0x1d4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d022      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x194>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a21      	ldr	r2, [pc, #132]	; (8003c3c <HAL_DMA_IRQHandler+0x1d8>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d01d      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x194>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	; (8003c40 <HAL_DMA_IRQHandler+0x1dc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d018      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x194>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a1e      	ldr	r2, [pc, #120]	; (8003c44 <HAL_DMA_IRQHandler+0x1e0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d013      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x194>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a1c      	ldr	r2, [pc, #112]	; (8003c48 <HAL_DMA_IRQHandler+0x1e4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00e      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x194>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1b      	ldr	r2, [pc, #108]	; (8003c4c <HAL_DMA_IRQHandler+0x1e8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d009      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x194>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a19      	ldr	r2, [pc, #100]	; (8003c50 <HAL_DMA_IRQHandler+0x1ec>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d004      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x194>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a18      	ldr	r2, [pc, #96]	; (8003c54 <HAL_DMA_IRQHandler+0x1f0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d12f      	bne.n	8003c58 <HAL_DMA_IRQHandler+0x1f4>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	bf14      	ite	ne
 8003c06:	2301      	movne	r3, #1
 8003c08:	2300      	moveq	r3, #0
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	e02e      	b.n	8003c6c <HAL_DMA_IRQHandler+0x208>
 8003c0e:	bf00      	nop
 8003c10:	20000000 	.word	0x20000000
 8003c14:	1b4e81b5 	.word	0x1b4e81b5
 8003c18:	40020010 	.word	0x40020010
 8003c1c:	40020028 	.word	0x40020028
 8003c20:	40020040 	.word	0x40020040
 8003c24:	40020058 	.word	0x40020058
 8003c28:	40020070 	.word	0x40020070
 8003c2c:	40020088 	.word	0x40020088
 8003c30:	400200a0 	.word	0x400200a0
 8003c34:	400200b8 	.word	0x400200b8
 8003c38:	40020410 	.word	0x40020410
 8003c3c:	40020428 	.word	0x40020428
 8003c40:	40020440 	.word	0x40020440
 8003c44:	40020458 	.word	0x40020458
 8003c48:	40020470 	.word	0x40020470
 8003c4c:	40020488 	.word	0x40020488
 8003c50:	400204a0 	.word	0x400204a0
 8003c54:	400204b8 	.word	0x400204b8
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	bf14      	ite	ne
 8003c66:	2301      	movne	r3, #1
 8003c68:	2300      	moveq	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d015      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0204 	bic.w	r2, r2, #4
 8003c7e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	2208      	movs	r2, #8
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c94:	f043 0201 	orr.w	r2, r3, #1
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d06e      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a69      	ldr	r2, [pc, #420]	; (8003e5c <HAL_DMA_IRQHandler+0x3f8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d04a      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x2ee>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a67      	ldr	r2, [pc, #412]	; (8003e60 <HAL_DMA_IRQHandler+0x3fc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d045      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x2ee>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a66      	ldr	r2, [pc, #408]	; (8003e64 <HAL_DMA_IRQHandler+0x400>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d040      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x2ee>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a64      	ldr	r2, [pc, #400]	; (8003e68 <HAL_DMA_IRQHandler+0x404>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d03b      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x2ee>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a63      	ldr	r2, [pc, #396]	; (8003e6c <HAL_DMA_IRQHandler+0x408>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d036      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x2ee>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a61      	ldr	r2, [pc, #388]	; (8003e70 <HAL_DMA_IRQHandler+0x40c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d031      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x2ee>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a60      	ldr	r2, [pc, #384]	; (8003e74 <HAL_DMA_IRQHandler+0x410>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d02c      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x2ee>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a5e      	ldr	r2, [pc, #376]	; (8003e78 <HAL_DMA_IRQHandler+0x414>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d027      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x2ee>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a5d      	ldr	r2, [pc, #372]	; (8003e7c <HAL_DMA_IRQHandler+0x418>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d022      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x2ee>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a5b      	ldr	r2, [pc, #364]	; (8003e80 <HAL_DMA_IRQHandler+0x41c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d01d      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x2ee>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a5a      	ldr	r2, [pc, #360]	; (8003e84 <HAL_DMA_IRQHandler+0x420>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d018      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x2ee>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a58      	ldr	r2, [pc, #352]	; (8003e88 <HAL_DMA_IRQHandler+0x424>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x2ee>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a57      	ldr	r2, [pc, #348]	; (8003e8c <HAL_DMA_IRQHandler+0x428>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00e      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x2ee>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a55      	ldr	r2, [pc, #340]	; (8003e90 <HAL_DMA_IRQHandler+0x42c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d009      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x2ee>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a54      	ldr	r2, [pc, #336]	; (8003e94 <HAL_DMA_IRQHandler+0x430>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d004      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x2ee>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a52      	ldr	r2, [pc, #328]	; (8003e98 <HAL_DMA_IRQHandler+0x434>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d10a      	bne.n	8003d68 <HAL_DMA_IRQHandler+0x304>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	e003      	b.n	8003d70 <HAL_DMA_IRQHandler+0x30c>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00d      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d88:	f043 0202 	orr.w	r2, r3, #2
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2204      	movs	r2, #4
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 808f 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a2c      	ldr	r2, [pc, #176]	; (8003e5c <HAL_DMA_IRQHandler+0x3f8>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d04a      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x3e2>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a2a      	ldr	r2, [pc, #168]	; (8003e60 <HAL_DMA_IRQHandler+0x3fc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d045      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x3e2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a29      	ldr	r2, [pc, #164]	; (8003e64 <HAL_DMA_IRQHandler+0x400>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d040      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x3e2>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a27      	ldr	r2, [pc, #156]	; (8003e68 <HAL_DMA_IRQHandler+0x404>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d03b      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x3e2>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a26      	ldr	r2, [pc, #152]	; (8003e6c <HAL_DMA_IRQHandler+0x408>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d036      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x3e2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a24      	ldr	r2, [pc, #144]	; (8003e70 <HAL_DMA_IRQHandler+0x40c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d031      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x3e2>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a23      	ldr	r2, [pc, #140]	; (8003e74 <HAL_DMA_IRQHandler+0x410>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d02c      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x3e2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a21      	ldr	r2, [pc, #132]	; (8003e78 <HAL_DMA_IRQHandler+0x414>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d027      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x3e2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a20      	ldr	r2, [pc, #128]	; (8003e7c <HAL_DMA_IRQHandler+0x418>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d022      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x3e2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a1e      	ldr	r2, [pc, #120]	; (8003e80 <HAL_DMA_IRQHandler+0x41c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d01d      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x3e2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a1d      	ldr	r2, [pc, #116]	; (8003e84 <HAL_DMA_IRQHandler+0x420>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d018      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x3e2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1b      	ldr	r2, [pc, #108]	; (8003e88 <HAL_DMA_IRQHandler+0x424>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x3e2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1a      	ldr	r2, [pc, #104]	; (8003e8c <HAL_DMA_IRQHandler+0x428>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d00e      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x3e2>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <HAL_DMA_IRQHandler+0x42c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d009      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x3e2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <HAL_DMA_IRQHandler+0x430>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x3e2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a15      	ldr	r2, [pc, #84]	; (8003e98 <HAL_DMA_IRQHandler+0x434>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d12a      	bne.n	8003e9c <HAL_DMA_IRQHandler+0x438>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	bf14      	ite	ne
 8003e54:	2301      	movne	r3, #1
 8003e56:	2300      	moveq	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	e023      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x440>
 8003e5c:	40020010 	.word	0x40020010
 8003e60:	40020028 	.word	0x40020028
 8003e64:	40020040 	.word	0x40020040
 8003e68:	40020058 	.word	0x40020058
 8003e6c:	40020070 	.word	0x40020070
 8003e70:	40020088 	.word	0x40020088
 8003e74:	400200a0 	.word	0x400200a0
 8003e78:	400200b8 	.word	0x400200b8
 8003e7c:	40020410 	.word	0x40020410
 8003e80:	40020428 	.word	0x40020428
 8003e84:	40020440 	.word	0x40020440
 8003e88:	40020458 	.word	0x40020458
 8003e8c:	40020470 	.word	0x40020470
 8003e90:	40020488 	.word	0x40020488
 8003e94:	400204a0 	.word	0x400204a0
 8003e98:	400204b8 	.word	0x400204b8
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00d      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eac:	f003 031f 	and.w	r3, r3, #31
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebc:	f043 0204 	orr.w	r2, r3, #4
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	2210      	movs	r2, #16
 8003ece:	409a      	lsls	r2, r3
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 80a6 	beq.w	8004026 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a85      	ldr	r2, [pc, #532]	; (80040f4 <HAL_DMA_IRQHandler+0x690>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d04a      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x516>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a83      	ldr	r2, [pc, #524]	; (80040f8 <HAL_DMA_IRQHandler+0x694>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d045      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x516>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a82      	ldr	r2, [pc, #520]	; (80040fc <HAL_DMA_IRQHandler+0x698>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d040      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x516>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a80      	ldr	r2, [pc, #512]	; (8004100 <HAL_DMA_IRQHandler+0x69c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d03b      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x516>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a7f      	ldr	r2, [pc, #508]	; (8004104 <HAL_DMA_IRQHandler+0x6a0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d036      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x516>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a7d      	ldr	r2, [pc, #500]	; (8004108 <HAL_DMA_IRQHandler+0x6a4>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d031      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x516>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a7c      	ldr	r2, [pc, #496]	; (800410c <HAL_DMA_IRQHandler+0x6a8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d02c      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x516>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a7a      	ldr	r2, [pc, #488]	; (8004110 <HAL_DMA_IRQHandler+0x6ac>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d027      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x516>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a79      	ldr	r2, [pc, #484]	; (8004114 <HAL_DMA_IRQHandler+0x6b0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d022      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x516>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a77      	ldr	r2, [pc, #476]	; (8004118 <HAL_DMA_IRQHandler+0x6b4>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d01d      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x516>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a76      	ldr	r2, [pc, #472]	; (800411c <HAL_DMA_IRQHandler+0x6b8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d018      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x516>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a74      	ldr	r2, [pc, #464]	; (8004120 <HAL_DMA_IRQHandler+0x6bc>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d013      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x516>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a73      	ldr	r2, [pc, #460]	; (8004124 <HAL_DMA_IRQHandler+0x6c0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00e      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x516>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a71      	ldr	r2, [pc, #452]	; (8004128 <HAL_DMA_IRQHandler+0x6c4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d009      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x516>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a70      	ldr	r2, [pc, #448]	; (800412c <HAL_DMA_IRQHandler+0x6c8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d004      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x516>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a6e      	ldr	r2, [pc, #440]	; (8004130 <HAL_DMA_IRQHandler+0x6cc>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d10a      	bne.n	8003f90 <HAL_DMA_IRQHandler+0x52c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	bf14      	ite	ne
 8003f88:	2301      	movne	r3, #1
 8003f8a:	2300      	moveq	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	e009      	b.n	8003fa4 <HAL_DMA_IRQHandler+0x540>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	bf14      	ite	ne
 8003f9e:	2301      	movne	r3, #1
 8003fa0:	2300      	moveq	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d03e      	beq.n	8004026 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fac:	f003 031f 	and.w	r3, r3, #31
 8003fb0:	2210      	movs	r2, #16
 8003fb2:	409a      	lsls	r2, r3
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d018      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d108      	bne.n	8003fe6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d024      	beq.n	8004026 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4798      	blx	r3
 8003fe4:	e01f      	b.n	8004026 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01b      	beq.n	8004026 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	4798      	blx	r3
 8003ff6:	e016      	b.n	8004026 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d107      	bne.n	8004016 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0208 	bic.w	r2, r2, #8
 8004014:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402a:	f003 031f 	and.w	r3, r3, #31
 800402e:	2220      	movs	r2, #32
 8004030:	409a      	lsls	r2, r3
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	4013      	ands	r3, r2
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 8110 	beq.w	800425c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a2c      	ldr	r2, [pc, #176]	; (80040f4 <HAL_DMA_IRQHandler+0x690>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d04a      	beq.n	80040dc <HAL_DMA_IRQHandler+0x678>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a2b      	ldr	r2, [pc, #172]	; (80040f8 <HAL_DMA_IRQHandler+0x694>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d045      	beq.n	80040dc <HAL_DMA_IRQHandler+0x678>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a29      	ldr	r2, [pc, #164]	; (80040fc <HAL_DMA_IRQHandler+0x698>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d040      	beq.n	80040dc <HAL_DMA_IRQHandler+0x678>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a28      	ldr	r2, [pc, #160]	; (8004100 <HAL_DMA_IRQHandler+0x69c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d03b      	beq.n	80040dc <HAL_DMA_IRQHandler+0x678>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a26      	ldr	r2, [pc, #152]	; (8004104 <HAL_DMA_IRQHandler+0x6a0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d036      	beq.n	80040dc <HAL_DMA_IRQHandler+0x678>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a25      	ldr	r2, [pc, #148]	; (8004108 <HAL_DMA_IRQHandler+0x6a4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d031      	beq.n	80040dc <HAL_DMA_IRQHandler+0x678>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a23      	ldr	r2, [pc, #140]	; (800410c <HAL_DMA_IRQHandler+0x6a8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d02c      	beq.n	80040dc <HAL_DMA_IRQHandler+0x678>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a22      	ldr	r2, [pc, #136]	; (8004110 <HAL_DMA_IRQHandler+0x6ac>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d027      	beq.n	80040dc <HAL_DMA_IRQHandler+0x678>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a20      	ldr	r2, [pc, #128]	; (8004114 <HAL_DMA_IRQHandler+0x6b0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d022      	beq.n	80040dc <HAL_DMA_IRQHandler+0x678>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1f      	ldr	r2, [pc, #124]	; (8004118 <HAL_DMA_IRQHandler+0x6b4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d01d      	beq.n	80040dc <HAL_DMA_IRQHandler+0x678>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1d      	ldr	r2, [pc, #116]	; (800411c <HAL_DMA_IRQHandler+0x6b8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d018      	beq.n	80040dc <HAL_DMA_IRQHandler+0x678>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <HAL_DMA_IRQHandler+0x6bc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <HAL_DMA_IRQHandler+0x678>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1a      	ldr	r2, [pc, #104]	; (8004124 <HAL_DMA_IRQHandler+0x6c0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00e      	beq.n	80040dc <HAL_DMA_IRQHandler+0x678>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a19      	ldr	r2, [pc, #100]	; (8004128 <HAL_DMA_IRQHandler+0x6c4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d009      	beq.n	80040dc <HAL_DMA_IRQHandler+0x678>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a17      	ldr	r2, [pc, #92]	; (800412c <HAL_DMA_IRQHandler+0x6c8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <HAL_DMA_IRQHandler+0x678>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a16      	ldr	r2, [pc, #88]	; (8004130 <HAL_DMA_IRQHandler+0x6cc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d12b      	bne.n	8004134 <HAL_DMA_IRQHandler+0x6d0>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bf14      	ite	ne
 80040ea:	2301      	movne	r3, #1
 80040ec:	2300      	moveq	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	e02a      	b.n	8004148 <HAL_DMA_IRQHandler+0x6e4>
 80040f2:	bf00      	nop
 80040f4:	40020010 	.word	0x40020010
 80040f8:	40020028 	.word	0x40020028
 80040fc:	40020040 	.word	0x40020040
 8004100:	40020058 	.word	0x40020058
 8004104:	40020070 	.word	0x40020070
 8004108:	40020088 	.word	0x40020088
 800410c:	400200a0 	.word	0x400200a0
 8004110:	400200b8 	.word	0x400200b8
 8004114:	40020410 	.word	0x40020410
 8004118:	40020428 	.word	0x40020428
 800411c:	40020440 	.word	0x40020440
 8004120:	40020458 	.word	0x40020458
 8004124:	40020470 	.word	0x40020470
 8004128:	40020488 	.word	0x40020488
 800412c:	400204a0 	.word	0x400204a0
 8004130:	400204b8 	.word	0x400204b8
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf14      	ite	ne
 8004142:	2301      	movne	r3, #1
 8004144:	2300      	moveq	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 8087 	beq.w	800425c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	2220      	movs	r2, #32
 8004158:	409a      	lsls	r2, r3
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b04      	cmp	r3, #4
 8004168:	d139      	bne.n	80041de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0216 	bic.w	r2, r2, #22
 8004178:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004188:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d103      	bne.n	800419a <HAL_DMA_IRQHandler+0x736>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0208 	bic.w	r2, r2, #8
 80041a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ae:	f003 031f 	and.w	r3, r3, #31
 80041b2:	223f      	movs	r2, #63	; 0x3f
 80041b4:	409a      	lsls	r2, r3
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 834a 	beq.w	8004868 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	4798      	blx	r3
          }
          return;
 80041dc:	e344      	b.n	8004868 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d018      	beq.n	800421e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d108      	bne.n	800420c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d02c      	beq.n	800425c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	4798      	blx	r3
 800420a:	e027      	b.n	800425c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004210:	2b00      	cmp	r3, #0
 8004212:	d023      	beq.n	800425c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	4798      	blx	r3
 800421c:	e01e      	b.n	800425c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10f      	bne.n	800424c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0210 	bic.w	r2, r2, #16
 800423a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 8306 	beq.w	8004872 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 8088 	beq.w	8004384 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2204      	movs	r2, #4
 8004278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a7a      	ldr	r2, [pc, #488]	; (800446c <HAL_DMA_IRQHandler+0xa08>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d04a      	beq.n	800431c <HAL_DMA_IRQHandler+0x8b8>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a79      	ldr	r2, [pc, #484]	; (8004470 <HAL_DMA_IRQHandler+0xa0c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d045      	beq.n	800431c <HAL_DMA_IRQHandler+0x8b8>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a77      	ldr	r2, [pc, #476]	; (8004474 <HAL_DMA_IRQHandler+0xa10>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d040      	beq.n	800431c <HAL_DMA_IRQHandler+0x8b8>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a76      	ldr	r2, [pc, #472]	; (8004478 <HAL_DMA_IRQHandler+0xa14>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d03b      	beq.n	800431c <HAL_DMA_IRQHandler+0x8b8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a74      	ldr	r2, [pc, #464]	; (800447c <HAL_DMA_IRQHandler+0xa18>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d036      	beq.n	800431c <HAL_DMA_IRQHandler+0x8b8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a73      	ldr	r2, [pc, #460]	; (8004480 <HAL_DMA_IRQHandler+0xa1c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d031      	beq.n	800431c <HAL_DMA_IRQHandler+0x8b8>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a71      	ldr	r2, [pc, #452]	; (8004484 <HAL_DMA_IRQHandler+0xa20>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d02c      	beq.n	800431c <HAL_DMA_IRQHandler+0x8b8>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a70      	ldr	r2, [pc, #448]	; (8004488 <HAL_DMA_IRQHandler+0xa24>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d027      	beq.n	800431c <HAL_DMA_IRQHandler+0x8b8>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a6e      	ldr	r2, [pc, #440]	; (800448c <HAL_DMA_IRQHandler+0xa28>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d022      	beq.n	800431c <HAL_DMA_IRQHandler+0x8b8>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a6d      	ldr	r2, [pc, #436]	; (8004490 <HAL_DMA_IRQHandler+0xa2c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d01d      	beq.n	800431c <HAL_DMA_IRQHandler+0x8b8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a6b      	ldr	r2, [pc, #428]	; (8004494 <HAL_DMA_IRQHandler+0xa30>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d018      	beq.n	800431c <HAL_DMA_IRQHandler+0x8b8>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a6a      	ldr	r2, [pc, #424]	; (8004498 <HAL_DMA_IRQHandler+0xa34>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d013      	beq.n	800431c <HAL_DMA_IRQHandler+0x8b8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a68      	ldr	r2, [pc, #416]	; (800449c <HAL_DMA_IRQHandler+0xa38>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00e      	beq.n	800431c <HAL_DMA_IRQHandler+0x8b8>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a67      	ldr	r2, [pc, #412]	; (80044a0 <HAL_DMA_IRQHandler+0xa3c>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d009      	beq.n	800431c <HAL_DMA_IRQHandler+0x8b8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a65      	ldr	r2, [pc, #404]	; (80044a4 <HAL_DMA_IRQHandler+0xa40>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d004      	beq.n	800431c <HAL_DMA_IRQHandler+0x8b8>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a64      	ldr	r2, [pc, #400]	; (80044a8 <HAL_DMA_IRQHandler+0xa44>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d108      	bne.n	800432e <HAL_DMA_IRQHandler+0x8ca>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	e007      	b.n	800433e <HAL_DMA_IRQHandler+0x8da>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0201 	bic.w	r2, r2, #1
 800433c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3301      	adds	r3, #1
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004346:	429a      	cmp	r2, r3
 8004348:	d307      	bcc.n	800435a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f2      	bne.n	800433e <HAL_DMA_IRQHandler+0x8da>
 8004358:	e000      	b.n	800435c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800435a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2203      	movs	r2, #3
 8004376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800437a:	e003      	b.n	8004384 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8272 	beq.w	8004872 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3
 8004396:	e26c      	b.n	8004872 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a43      	ldr	r2, [pc, #268]	; (80044ac <HAL_DMA_IRQHandler+0xa48>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d022      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x984>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a42      	ldr	r2, [pc, #264]	; (80044b0 <HAL_DMA_IRQHandler+0xa4c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d01d      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x984>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a40      	ldr	r2, [pc, #256]	; (80044b4 <HAL_DMA_IRQHandler+0xa50>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d018      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x984>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a3f      	ldr	r2, [pc, #252]	; (80044b8 <HAL_DMA_IRQHandler+0xa54>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d013      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x984>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a3d      	ldr	r2, [pc, #244]	; (80044bc <HAL_DMA_IRQHandler+0xa58>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00e      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x984>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a3c      	ldr	r2, [pc, #240]	; (80044c0 <HAL_DMA_IRQHandler+0xa5c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d009      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x984>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a3a      	ldr	r2, [pc, #232]	; (80044c4 <HAL_DMA_IRQHandler+0xa60>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d004      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x984>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a39      	ldr	r2, [pc, #228]	; (80044c8 <HAL_DMA_IRQHandler+0xa64>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d101      	bne.n	80043ec <HAL_DMA_IRQHandler+0x988>
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <HAL_DMA_IRQHandler+0x98a>
 80043ec:	2300      	movs	r3, #0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 823f 	beq.w	8004872 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004400:	f003 031f 	and.w	r3, r3, #31
 8004404:	2204      	movs	r2, #4
 8004406:	409a      	lsls	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	4013      	ands	r3, r2
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 80cd 	beq.w	80045ac <HAL_DMA_IRQHandler+0xb48>
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80c7 	beq.w	80045ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004422:	f003 031f 	and.w	r3, r3, #31
 8004426:	2204      	movs	r2, #4
 8004428:	409a      	lsls	r2, r3
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d049      	beq.n	80044cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 8210 	beq.w	800486c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004454:	e20a      	b.n	800486c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 8206 	beq.w	800486c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004468:	e200      	b.n	800486c <HAL_DMA_IRQHandler+0xe08>
 800446a:	bf00      	nop
 800446c:	40020010 	.word	0x40020010
 8004470:	40020028 	.word	0x40020028
 8004474:	40020040 	.word	0x40020040
 8004478:	40020058 	.word	0x40020058
 800447c:	40020070 	.word	0x40020070
 8004480:	40020088 	.word	0x40020088
 8004484:	400200a0 	.word	0x400200a0
 8004488:	400200b8 	.word	0x400200b8
 800448c:	40020410 	.word	0x40020410
 8004490:	40020428 	.word	0x40020428
 8004494:	40020440 	.word	0x40020440
 8004498:	40020458 	.word	0x40020458
 800449c:	40020470 	.word	0x40020470
 80044a0:	40020488 	.word	0x40020488
 80044a4:	400204a0 	.word	0x400204a0
 80044a8:	400204b8 	.word	0x400204b8
 80044ac:	58025408 	.word	0x58025408
 80044b0:	5802541c 	.word	0x5802541c
 80044b4:	58025430 	.word	0x58025430
 80044b8:	58025444 	.word	0x58025444
 80044bc:	58025458 	.word	0x58025458
 80044c0:	5802546c 	.word	0x5802546c
 80044c4:	58025480 	.word	0x58025480
 80044c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f003 0320 	and.w	r3, r3, #32
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d160      	bne.n	8004598 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a8c      	ldr	r2, [pc, #560]	; (800470c <HAL_DMA_IRQHandler+0xca8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d04a      	beq.n	8004576 <HAL_DMA_IRQHandler+0xb12>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a8a      	ldr	r2, [pc, #552]	; (8004710 <HAL_DMA_IRQHandler+0xcac>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d045      	beq.n	8004576 <HAL_DMA_IRQHandler+0xb12>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a89      	ldr	r2, [pc, #548]	; (8004714 <HAL_DMA_IRQHandler+0xcb0>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d040      	beq.n	8004576 <HAL_DMA_IRQHandler+0xb12>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a87      	ldr	r2, [pc, #540]	; (8004718 <HAL_DMA_IRQHandler+0xcb4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d03b      	beq.n	8004576 <HAL_DMA_IRQHandler+0xb12>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a86      	ldr	r2, [pc, #536]	; (800471c <HAL_DMA_IRQHandler+0xcb8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d036      	beq.n	8004576 <HAL_DMA_IRQHandler+0xb12>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a84      	ldr	r2, [pc, #528]	; (8004720 <HAL_DMA_IRQHandler+0xcbc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d031      	beq.n	8004576 <HAL_DMA_IRQHandler+0xb12>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a83      	ldr	r2, [pc, #524]	; (8004724 <HAL_DMA_IRQHandler+0xcc0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d02c      	beq.n	8004576 <HAL_DMA_IRQHandler+0xb12>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a81      	ldr	r2, [pc, #516]	; (8004728 <HAL_DMA_IRQHandler+0xcc4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d027      	beq.n	8004576 <HAL_DMA_IRQHandler+0xb12>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a80      	ldr	r2, [pc, #512]	; (800472c <HAL_DMA_IRQHandler+0xcc8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d022      	beq.n	8004576 <HAL_DMA_IRQHandler+0xb12>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a7e      	ldr	r2, [pc, #504]	; (8004730 <HAL_DMA_IRQHandler+0xccc>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d01d      	beq.n	8004576 <HAL_DMA_IRQHandler+0xb12>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a7d      	ldr	r2, [pc, #500]	; (8004734 <HAL_DMA_IRQHandler+0xcd0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d018      	beq.n	8004576 <HAL_DMA_IRQHandler+0xb12>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a7b      	ldr	r2, [pc, #492]	; (8004738 <HAL_DMA_IRQHandler+0xcd4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <HAL_DMA_IRQHandler+0xb12>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a7a      	ldr	r2, [pc, #488]	; (800473c <HAL_DMA_IRQHandler+0xcd8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00e      	beq.n	8004576 <HAL_DMA_IRQHandler+0xb12>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a78      	ldr	r2, [pc, #480]	; (8004740 <HAL_DMA_IRQHandler+0xcdc>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d009      	beq.n	8004576 <HAL_DMA_IRQHandler+0xb12>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a77      	ldr	r2, [pc, #476]	; (8004744 <HAL_DMA_IRQHandler+0xce0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d004      	beq.n	8004576 <HAL_DMA_IRQHandler+0xb12>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a75      	ldr	r2, [pc, #468]	; (8004748 <HAL_DMA_IRQHandler+0xce4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d108      	bne.n	8004588 <HAL_DMA_IRQHandler+0xb24>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0208 	bic.w	r2, r2, #8
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	e007      	b.n	8004598 <HAL_DMA_IRQHandler+0xb34>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0204 	bic.w	r2, r2, #4
 8004596:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8165 	beq.w	800486c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045aa:	e15f      	b.n	800486c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	2202      	movs	r2, #2
 80045b6:	409a      	lsls	r2, r3
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80c5 	beq.w	800474c <HAL_DMA_IRQHandler+0xce8>
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80bf 	beq.w	800474c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	2202      	movs	r2, #2
 80045d8:	409a      	lsls	r2, r3
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d018      	beq.n	800461a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 813a 	beq.w	8004870 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004604:	e134      	b.n	8004870 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 8130 	beq.w	8004870 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004618:	e12a      	b.n	8004870 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d168      	bne.n	80046f6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a38      	ldr	r2, [pc, #224]	; (800470c <HAL_DMA_IRQHandler+0xca8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d04a      	beq.n	80046c4 <HAL_DMA_IRQHandler+0xc60>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a37      	ldr	r2, [pc, #220]	; (8004710 <HAL_DMA_IRQHandler+0xcac>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d045      	beq.n	80046c4 <HAL_DMA_IRQHandler+0xc60>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a35      	ldr	r2, [pc, #212]	; (8004714 <HAL_DMA_IRQHandler+0xcb0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d040      	beq.n	80046c4 <HAL_DMA_IRQHandler+0xc60>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a34      	ldr	r2, [pc, #208]	; (8004718 <HAL_DMA_IRQHandler+0xcb4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d03b      	beq.n	80046c4 <HAL_DMA_IRQHandler+0xc60>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a32      	ldr	r2, [pc, #200]	; (800471c <HAL_DMA_IRQHandler+0xcb8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d036      	beq.n	80046c4 <HAL_DMA_IRQHandler+0xc60>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a31      	ldr	r2, [pc, #196]	; (8004720 <HAL_DMA_IRQHandler+0xcbc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d031      	beq.n	80046c4 <HAL_DMA_IRQHandler+0xc60>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a2f      	ldr	r2, [pc, #188]	; (8004724 <HAL_DMA_IRQHandler+0xcc0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d02c      	beq.n	80046c4 <HAL_DMA_IRQHandler+0xc60>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a2e      	ldr	r2, [pc, #184]	; (8004728 <HAL_DMA_IRQHandler+0xcc4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d027      	beq.n	80046c4 <HAL_DMA_IRQHandler+0xc60>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a2c      	ldr	r2, [pc, #176]	; (800472c <HAL_DMA_IRQHandler+0xcc8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d022      	beq.n	80046c4 <HAL_DMA_IRQHandler+0xc60>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a2b      	ldr	r2, [pc, #172]	; (8004730 <HAL_DMA_IRQHandler+0xccc>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d01d      	beq.n	80046c4 <HAL_DMA_IRQHandler+0xc60>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a29      	ldr	r2, [pc, #164]	; (8004734 <HAL_DMA_IRQHandler+0xcd0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d018      	beq.n	80046c4 <HAL_DMA_IRQHandler+0xc60>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a28      	ldr	r2, [pc, #160]	; (8004738 <HAL_DMA_IRQHandler+0xcd4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d013      	beq.n	80046c4 <HAL_DMA_IRQHandler+0xc60>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a26      	ldr	r2, [pc, #152]	; (800473c <HAL_DMA_IRQHandler+0xcd8>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d00e      	beq.n	80046c4 <HAL_DMA_IRQHandler+0xc60>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a25      	ldr	r2, [pc, #148]	; (8004740 <HAL_DMA_IRQHandler+0xcdc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d009      	beq.n	80046c4 <HAL_DMA_IRQHandler+0xc60>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a23      	ldr	r2, [pc, #140]	; (8004744 <HAL_DMA_IRQHandler+0xce0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d004      	beq.n	80046c4 <HAL_DMA_IRQHandler+0xc60>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a22      	ldr	r2, [pc, #136]	; (8004748 <HAL_DMA_IRQHandler+0xce4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d108      	bne.n	80046d6 <HAL_DMA_IRQHandler+0xc72>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0214 	bic.w	r2, r2, #20
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	e007      	b.n	80046e6 <HAL_DMA_IRQHandler+0xc82>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 020a 	bic.w	r2, r2, #10
 80046e4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f000 80b8 	beq.w	8004870 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004708:	e0b2      	b.n	8004870 <HAL_DMA_IRQHandler+0xe0c>
 800470a:	bf00      	nop
 800470c:	40020010 	.word	0x40020010
 8004710:	40020028 	.word	0x40020028
 8004714:	40020040 	.word	0x40020040
 8004718:	40020058 	.word	0x40020058
 800471c:	40020070 	.word	0x40020070
 8004720:	40020088 	.word	0x40020088
 8004724:	400200a0 	.word	0x400200a0
 8004728:	400200b8 	.word	0x400200b8
 800472c:	40020410 	.word	0x40020410
 8004730:	40020428 	.word	0x40020428
 8004734:	40020440 	.word	0x40020440
 8004738:	40020458 	.word	0x40020458
 800473c:	40020470 	.word	0x40020470
 8004740:	40020488 	.word	0x40020488
 8004744:	400204a0 	.word	0x400204a0
 8004748:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	2208      	movs	r2, #8
 8004756:	409a      	lsls	r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8088 	beq.w	8004872 <HAL_DMA_IRQHandler+0xe0e>
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8082 	beq.w	8004872 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a41      	ldr	r2, [pc, #260]	; (8004878 <HAL_DMA_IRQHandler+0xe14>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d04a      	beq.n	800480e <HAL_DMA_IRQHandler+0xdaa>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a3f      	ldr	r2, [pc, #252]	; (800487c <HAL_DMA_IRQHandler+0xe18>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d045      	beq.n	800480e <HAL_DMA_IRQHandler+0xdaa>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a3e      	ldr	r2, [pc, #248]	; (8004880 <HAL_DMA_IRQHandler+0xe1c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d040      	beq.n	800480e <HAL_DMA_IRQHandler+0xdaa>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a3c      	ldr	r2, [pc, #240]	; (8004884 <HAL_DMA_IRQHandler+0xe20>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d03b      	beq.n	800480e <HAL_DMA_IRQHandler+0xdaa>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a3b      	ldr	r2, [pc, #236]	; (8004888 <HAL_DMA_IRQHandler+0xe24>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d036      	beq.n	800480e <HAL_DMA_IRQHandler+0xdaa>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a39      	ldr	r2, [pc, #228]	; (800488c <HAL_DMA_IRQHandler+0xe28>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d031      	beq.n	800480e <HAL_DMA_IRQHandler+0xdaa>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a38      	ldr	r2, [pc, #224]	; (8004890 <HAL_DMA_IRQHandler+0xe2c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d02c      	beq.n	800480e <HAL_DMA_IRQHandler+0xdaa>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a36      	ldr	r2, [pc, #216]	; (8004894 <HAL_DMA_IRQHandler+0xe30>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d027      	beq.n	800480e <HAL_DMA_IRQHandler+0xdaa>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a35      	ldr	r2, [pc, #212]	; (8004898 <HAL_DMA_IRQHandler+0xe34>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d022      	beq.n	800480e <HAL_DMA_IRQHandler+0xdaa>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a33      	ldr	r2, [pc, #204]	; (800489c <HAL_DMA_IRQHandler+0xe38>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d01d      	beq.n	800480e <HAL_DMA_IRQHandler+0xdaa>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a32      	ldr	r2, [pc, #200]	; (80048a0 <HAL_DMA_IRQHandler+0xe3c>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d018      	beq.n	800480e <HAL_DMA_IRQHandler+0xdaa>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a30      	ldr	r2, [pc, #192]	; (80048a4 <HAL_DMA_IRQHandler+0xe40>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d013      	beq.n	800480e <HAL_DMA_IRQHandler+0xdaa>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a2f      	ldr	r2, [pc, #188]	; (80048a8 <HAL_DMA_IRQHandler+0xe44>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00e      	beq.n	800480e <HAL_DMA_IRQHandler+0xdaa>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a2d      	ldr	r2, [pc, #180]	; (80048ac <HAL_DMA_IRQHandler+0xe48>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d009      	beq.n	800480e <HAL_DMA_IRQHandler+0xdaa>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a2c      	ldr	r2, [pc, #176]	; (80048b0 <HAL_DMA_IRQHandler+0xe4c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d004      	beq.n	800480e <HAL_DMA_IRQHandler+0xdaa>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a2a      	ldr	r2, [pc, #168]	; (80048b4 <HAL_DMA_IRQHandler+0xe50>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d108      	bne.n	8004820 <HAL_DMA_IRQHandler+0xdbc>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 021c 	bic.w	r2, r2, #28
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	e007      	b.n	8004830 <HAL_DMA_IRQHandler+0xdcc>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 020e 	bic.w	r2, r2, #14
 800482e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	2201      	movs	r2, #1
 800483a:	409a      	lsls	r2, r3
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	4798      	blx	r3
 8004866:	e004      	b.n	8004872 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004868:	bf00      	nop
 800486a:	e002      	b.n	8004872 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800486c:	bf00      	nop
 800486e:	e000      	b.n	8004872 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004870:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004872:	3728      	adds	r7, #40	; 0x28
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40020010 	.word	0x40020010
 800487c:	40020028 	.word	0x40020028
 8004880:	40020040 	.word	0x40020040
 8004884:	40020058 	.word	0x40020058
 8004888:	40020070 	.word	0x40020070
 800488c:	40020088 	.word	0x40020088
 8004890:	400200a0 	.word	0x400200a0
 8004894:	400200b8 	.word	0x400200b8
 8004898:	40020410 	.word	0x40020410
 800489c:	40020428 	.word	0x40020428
 80048a0:	40020440 	.word	0x40020440
 80048a4:	40020458 	.word	0x40020458
 80048a8:	40020470 	.word	0x40020470
 80048ac:	40020488 	.word	0x40020488
 80048b0:	400204a0 	.word	0x400204a0
 80048b4:	400204b8 	.word	0x400204b8

080048b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a42      	ldr	r2, [pc, #264]	; (80049d0 <DMA_CalcBaseAndBitshift+0x118>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d04a      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a41      	ldr	r2, [pc, #260]	; (80049d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d045      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a3f      	ldr	r2, [pc, #252]	; (80049d8 <DMA_CalcBaseAndBitshift+0x120>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d040      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a3e      	ldr	r2, [pc, #248]	; (80049dc <DMA_CalcBaseAndBitshift+0x124>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d03b      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a3c      	ldr	r2, [pc, #240]	; (80049e0 <DMA_CalcBaseAndBitshift+0x128>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d036      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a3b      	ldr	r2, [pc, #236]	; (80049e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d031      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a39      	ldr	r2, [pc, #228]	; (80049e8 <DMA_CalcBaseAndBitshift+0x130>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d02c      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a38      	ldr	r2, [pc, #224]	; (80049ec <DMA_CalcBaseAndBitshift+0x134>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d027      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a36      	ldr	r2, [pc, #216]	; (80049f0 <DMA_CalcBaseAndBitshift+0x138>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d022      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a35      	ldr	r2, [pc, #212]	; (80049f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d01d      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a33      	ldr	r2, [pc, #204]	; (80049f8 <DMA_CalcBaseAndBitshift+0x140>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d018      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a32      	ldr	r2, [pc, #200]	; (80049fc <DMA_CalcBaseAndBitshift+0x144>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d013      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a30      	ldr	r2, [pc, #192]	; (8004a00 <DMA_CalcBaseAndBitshift+0x148>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00e      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a2f      	ldr	r2, [pc, #188]	; (8004a04 <DMA_CalcBaseAndBitshift+0x14c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d009      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a2d      	ldr	r2, [pc, #180]	; (8004a08 <DMA_CalcBaseAndBitshift+0x150>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d004      	beq.n	8004960 <DMA_CalcBaseAndBitshift+0xa8>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a2c      	ldr	r2, [pc, #176]	; (8004a0c <DMA_CalcBaseAndBitshift+0x154>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d101      	bne.n	8004964 <DMA_CalcBaseAndBitshift+0xac>
 8004960:	2301      	movs	r3, #1
 8004962:	e000      	b.n	8004966 <DMA_CalcBaseAndBitshift+0xae>
 8004964:	2300      	movs	r3, #0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d024      	beq.n	80049b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	b2db      	uxtb	r3, r3
 8004970:	3b10      	subs	r3, #16
 8004972:	4a27      	ldr	r2, [pc, #156]	; (8004a10 <DMA_CalcBaseAndBitshift+0x158>)
 8004974:	fba2 2303 	umull	r2, r3, r2, r3
 8004978:	091b      	lsrs	r3, r3, #4
 800497a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	4a24      	ldr	r2, [pc, #144]	; (8004a14 <DMA_CalcBaseAndBitshift+0x15c>)
 8004984:	5cd3      	ldrb	r3, [r2, r3]
 8004986:	461a      	mov	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b03      	cmp	r3, #3
 8004990:	d908      	bls.n	80049a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <DMA_CalcBaseAndBitshift+0x160>)
 800499a:	4013      	ands	r3, r2
 800499c:	1d1a      	adds	r2, r3, #4
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	659a      	str	r2, [r3, #88]	; 0x58
 80049a2:	e00d      	b.n	80049c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	4b1b      	ldr	r3, [pc, #108]	; (8004a18 <DMA_CalcBaseAndBitshift+0x160>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6593      	str	r3, [r2, #88]	; 0x58
 80049b2:	e005      	b.n	80049c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	40020010 	.word	0x40020010
 80049d4:	40020028 	.word	0x40020028
 80049d8:	40020040 	.word	0x40020040
 80049dc:	40020058 	.word	0x40020058
 80049e0:	40020070 	.word	0x40020070
 80049e4:	40020088 	.word	0x40020088
 80049e8:	400200a0 	.word	0x400200a0
 80049ec:	400200b8 	.word	0x400200b8
 80049f0:	40020410 	.word	0x40020410
 80049f4:	40020428 	.word	0x40020428
 80049f8:	40020440 	.word	0x40020440
 80049fc:	40020458 	.word	0x40020458
 8004a00:	40020470 	.word	0x40020470
 8004a04:	40020488 	.word	0x40020488
 8004a08:	400204a0 	.word	0x400204a0
 8004a0c:	400204b8 	.word	0x400204b8
 8004a10:	aaaaaaab 	.word	0xaaaaaaab
 8004a14:	0800a7d4 	.word	0x0800a7d4
 8004a18:	fffffc00 	.word	0xfffffc00

08004a1c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d120      	bne.n	8004a72 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d858      	bhi.n	8004aea <DMA_CheckFifoParam+0xce>
 8004a38:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <DMA_CheckFifoParam+0x24>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004a51 	.word	0x08004a51
 8004a44:	08004a63 	.word	0x08004a63
 8004a48:	08004a51 	.word	0x08004a51
 8004a4c:	08004aeb 	.word	0x08004aeb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d048      	beq.n	8004aee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a60:	e045      	b.n	8004aee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a6a:	d142      	bne.n	8004af2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a70:	e03f      	b.n	8004af2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a7a:	d123      	bne.n	8004ac4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d838      	bhi.n	8004af6 <DMA_CheckFifoParam+0xda>
 8004a84:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <DMA_CheckFifoParam+0x70>)
 8004a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8a:	bf00      	nop
 8004a8c:	08004a9d 	.word	0x08004a9d
 8004a90:	08004aa3 	.word	0x08004aa3
 8004a94:	08004a9d 	.word	0x08004a9d
 8004a98:	08004ab5 	.word	0x08004ab5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
        break;
 8004aa0:	e030      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d025      	beq.n	8004afa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ab2:	e022      	b.n	8004afa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004abc:	d11f      	bne.n	8004afe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ac2:	e01c      	b.n	8004afe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d902      	bls.n	8004ad2 <DMA_CheckFifoParam+0xb6>
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d003      	beq.n	8004ad8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ad0:	e018      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ad6:	e015      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00e      	beq.n	8004b02 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8004ae8:	e00b      	b.n	8004b02 <DMA_CheckFifoParam+0xe6>
        break;
 8004aea:	bf00      	nop
 8004aec:	e00a      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>
        break;
 8004aee:	bf00      	nop
 8004af0:	e008      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>
        break;
 8004af2:	bf00      	nop
 8004af4:	e006      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>
        break;
 8004af6:	bf00      	nop
 8004af8:	e004      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>
        break;
 8004afa:	bf00      	nop
 8004afc:	e002      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>
        break;
 8004afe:	bf00      	nop
 8004b00:	e000      	b.n	8004b04 <DMA_CheckFifoParam+0xe8>
    break;
 8004b02:	bf00      	nop
    }
  }

  return status;
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop

08004b14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a38      	ldr	r2, [pc, #224]	; (8004c08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d022      	beq.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a36      	ldr	r2, [pc, #216]	; (8004c0c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d01d      	beq.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a35      	ldr	r2, [pc, #212]	; (8004c10 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d018      	beq.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a33      	ldr	r2, [pc, #204]	; (8004c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d013      	beq.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a32      	ldr	r2, [pc, #200]	; (8004c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00e      	beq.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a30      	ldr	r2, [pc, #192]	; (8004c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d009      	beq.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a2f      	ldr	r2, [pc, #188]	; (8004c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d004      	beq.n	8004b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a2d      	ldr	r2, [pc, #180]	; (8004c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d101      	bne.n	8004b76 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004b76:	2300      	movs	r3, #0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01a      	beq.n	8004bb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	3b08      	subs	r3, #8
 8004b84:	4a28      	ldr	r2, [pc, #160]	; (8004c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004b86:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8a:	091b      	lsrs	r3, r3, #4
 8004b8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4b26      	ldr	r3, [pc, #152]	; (8004c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	461a      	mov	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a24      	ldr	r2, [pc, #144]	; (8004c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004ba0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	2201      	movs	r2, #1
 8004baa:	409a      	lsls	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004bb0:	e024      	b.n	8004bfc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	3b10      	subs	r3, #16
 8004bba:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4a1c      	ldr	r2, [pc, #112]	; (8004c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d806      	bhi.n	8004bda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4a1b      	ldr	r2, [pc, #108]	; (8004c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d902      	bls.n	8004bda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3308      	adds	r3, #8
 8004bd8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4b18      	ldr	r3, [pc, #96]	; (8004c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	461a      	mov	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a16      	ldr	r2, [pc, #88]	; (8004c44 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004bec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	58025408 	.word	0x58025408
 8004c0c:	5802541c 	.word	0x5802541c
 8004c10:	58025430 	.word	0x58025430
 8004c14:	58025444 	.word	0x58025444
 8004c18:	58025458 	.word	0x58025458
 8004c1c:	5802546c 	.word	0x5802546c
 8004c20:	58025480 	.word	0x58025480
 8004c24:	58025494 	.word	0x58025494
 8004c28:	cccccccd 	.word	0xcccccccd
 8004c2c:	16009600 	.word	0x16009600
 8004c30:	58025880 	.word	0x58025880
 8004c34:	aaaaaaab 	.word	0xaaaaaaab
 8004c38:	400204b8 	.word	0x400204b8
 8004c3c:	4002040f 	.word	0x4002040f
 8004c40:	10008200 	.word	0x10008200
 8004c44:	40020880 	.word	0x40020880

08004c48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d04a      	beq.n	8004cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d847      	bhi.n	8004cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a25      	ldr	r2, [pc, #148]	; (8004d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d022      	beq.n	8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a24      	ldr	r2, [pc, #144]	; (8004d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d01d      	beq.n	8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a22      	ldr	r2, [pc, #136]	; (8004d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d018      	beq.n	8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a21      	ldr	r2, [pc, #132]	; (8004d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d013      	beq.n	8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1f      	ldr	r2, [pc, #124]	; (8004d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00e      	beq.n	8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1e      	ldr	r2, [pc, #120]	; (8004d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d009      	beq.n	8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1c      	ldr	r2, [pc, #112]	; (8004d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1b      	ldr	r2, [pc, #108]	; (8004d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d101      	bne.n	8004cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00a      	beq.n	8004cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4b17      	ldr	r3, [pc, #92]	; (8004d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004cc2:	4413      	add	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a15      	ldr	r2, [pc, #84]	; (8004d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004cd0:	671a      	str	r2, [r3, #112]	; 0x70
 8004cd2:	e009      	b.n	8004ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4b14      	ldr	r3, [pc, #80]	; (8004d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a11      	ldr	r2, [pc, #68]	; (8004d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004ce6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	2201      	movs	r2, #1
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004cf4:	bf00      	nop
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	58025408 	.word	0x58025408
 8004d04:	5802541c 	.word	0x5802541c
 8004d08:	58025430 	.word	0x58025430
 8004d0c:	58025444 	.word	0x58025444
 8004d10:	58025458 	.word	0x58025458
 8004d14:	5802546c 	.word	0x5802546c
 8004d18:	58025480 	.word	0x58025480
 8004d1c:	58025494 	.word	0x58025494
 8004d20:	1600963f 	.word	0x1600963f
 8004d24:	58025940 	.word	0x58025940
 8004d28:	1000823f 	.word	0x1000823f
 8004d2c:	40020940 	.word	0x40020940

08004d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b089      	sub	sp, #36	; 0x24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004d3e:	4b89      	ldr	r3, [pc, #548]	; (8004f64 <HAL_GPIO_Init+0x234>)
 8004d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d42:	e194      	b.n	800506e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	2101      	movs	r1, #1
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d50:	4013      	ands	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 8186 	beq.w	8005068 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d00b      	beq.n	8004d7c <HAL_GPIO_Init+0x4c>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d007      	beq.n	8004d7c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004d70:	2b11      	cmp	r3, #17
 8004d72:	d003      	beq.n	8004d7c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b12      	cmp	r3, #18
 8004d7a:	d130      	bne.n	8004dde <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	2203      	movs	r2, #3
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	4013      	ands	r3, r2
 8004d92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004db2:	2201      	movs	r2, #1
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	091b      	lsrs	r3, r3, #4
 8004dc8:	f003 0201 	and.w	r2, r3, #1
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	2203      	movs	r2, #3
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43db      	mvns	r3, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4013      	ands	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d003      	beq.n	8004e1e <HAL_GPIO_Init+0xee>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b12      	cmp	r3, #18
 8004e1c:	d123      	bne.n	8004e66 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	08da      	lsrs	r2, r3, #3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3208      	adds	r2, #8
 8004e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f003 0307 	and.w	r3, r3, #7
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	220f      	movs	r2, #15
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	08da      	lsrs	r2, r3, #3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3208      	adds	r2, #8
 8004e60:	69b9      	ldr	r1, [r7, #24]
 8004e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	2203      	movs	r2, #3
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	43db      	mvns	r3, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f003 0203 	and.w	r2, r3, #3
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 80e0 	beq.w	8005068 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ea8:	4b2f      	ldr	r3, [pc, #188]	; (8004f68 <HAL_GPIO_Init+0x238>)
 8004eaa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004eae:	4a2e      	ldr	r2, [pc, #184]	; (8004f68 <HAL_GPIO_Init+0x238>)
 8004eb0:	f043 0302 	orr.w	r3, r3, #2
 8004eb4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004eb8:	4b2b      	ldr	r3, [pc, #172]	; (8004f68 <HAL_GPIO_Init+0x238>)
 8004eba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ec6:	4a29      	ldr	r2, [pc, #164]	; (8004f6c <HAL_GPIO_Init+0x23c>)
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	089b      	lsrs	r3, r3, #2
 8004ecc:	3302      	adds	r3, #2
 8004ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	220f      	movs	r2, #15
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a20      	ldr	r2, [pc, #128]	; (8004f70 <HAL_GPIO_Init+0x240>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d052      	beq.n	8004f98 <HAL_GPIO_Init+0x268>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a1f      	ldr	r2, [pc, #124]	; (8004f74 <HAL_GPIO_Init+0x244>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d031      	beq.n	8004f5e <HAL_GPIO_Init+0x22e>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a1e      	ldr	r2, [pc, #120]	; (8004f78 <HAL_GPIO_Init+0x248>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d02b      	beq.n	8004f5a <HAL_GPIO_Init+0x22a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a1d      	ldr	r2, [pc, #116]	; (8004f7c <HAL_GPIO_Init+0x24c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d025      	beq.n	8004f56 <HAL_GPIO_Init+0x226>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a1c      	ldr	r2, [pc, #112]	; (8004f80 <HAL_GPIO_Init+0x250>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d01f      	beq.n	8004f52 <HAL_GPIO_Init+0x222>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a1b      	ldr	r2, [pc, #108]	; (8004f84 <HAL_GPIO_Init+0x254>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d019      	beq.n	8004f4e <HAL_GPIO_Init+0x21e>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a1a      	ldr	r2, [pc, #104]	; (8004f88 <HAL_GPIO_Init+0x258>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d013      	beq.n	8004f4a <HAL_GPIO_Init+0x21a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a19      	ldr	r2, [pc, #100]	; (8004f8c <HAL_GPIO_Init+0x25c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00d      	beq.n	8004f46 <HAL_GPIO_Init+0x216>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a18      	ldr	r2, [pc, #96]	; (8004f90 <HAL_GPIO_Init+0x260>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d007      	beq.n	8004f42 <HAL_GPIO_Init+0x212>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a17      	ldr	r2, [pc, #92]	; (8004f94 <HAL_GPIO_Init+0x264>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d101      	bne.n	8004f3e <HAL_GPIO_Init+0x20e>
 8004f3a:	2309      	movs	r3, #9
 8004f3c:	e02d      	b.n	8004f9a <HAL_GPIO_Init+0x26a>
 8004f3e:	230a      	movs	r3, #10
 8004f40:	e02b      	b.n	8004f9a <HAL_GPIO_Init+0x26a>
 8004f42:	2308      	movs	r3, #8
 8004f44:	e029      	b.n	8004f9a <HAL_GPIO_Init+0x26a>
 8004f46:	2307      	movs	r3, #7
 8004f48:	e027      	b.n	8004f9a <HAL_GPIO_Init+0x26a>
 8004f4a:	2306      	movs	r3, #6
 8004f4c:	e025      	b.n	8004f9a <HAL_GPIO_Init+0x26a>
 8004f4e:	2305      	movs	r3, #5
 8004f50:	e023      	b.n	8004f9a <HAL_GPIO_Init+0x26a>
 8004f52:	2304      	movs	r3, #4
 8004f54:	e021      	b.n	8004f9a <HAL_GPIO_Init+0x26a>
 8004f56:	2303      	movs	r3, #3
 8004f58:	e01f      	b.n	8004f9a <HAL_GPIO_Init+0x26a>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	e01d      	b.n	8004f9a <HAL_GPIO_Init+0x26a>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e01b      	b.n	8004f9a <HAL_GPIO_Init+0x26a>
 8004f62:	bf00      	nop
 8004f64:	58000080 	.word	0x58000080
 8004f68:	58024400 	.word	0x58024400
 8004f6c:	58000400 	.word	0x58000400
 8004f70:	58020000 	.word	0x58020000
 8004f74:	58020400 	.word	0x58020400
 8004f78:	58020800 	.word	0x58020800
 8004f7c:	58020c00 	.word	0x58020c00
 8004f80:	58021000 	.word	0x58021000
 8004f84:	58021400 	.word	0x58021400
 8004f88:	58021800 	.word	0x58021800
 8004f8c:	58021c00 	.word	0x58021c00
 8004f90:	58022000 	.word	0x58022000
 8004f94:	58022400 	.word	0x58022400
 8004f98:	2300      	movs	r3, #0
 8004f9a:	69fa      	ldr	r2, [r7, #28]
 8004f9c:	f002 0203 	and.w	r2, r2, #3
 8004fa0:	0092      	lsls	r2, r2, #2
 8004fa2:	4093      	lsls	r3, r2
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004faa:	4938      	ldr	r1, [pc, #224]	; (800508c <HAL_GPIO_Init+0x35c>)
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	089b      	lsrs	r3, r3, #2
 8004fb0:	3302      	adds	r3, #2
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	43db      	mvns	r3, r3
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800500c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	43db      	mvns	r3, r3
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	4013      	ands	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005032:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800503a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	43db      	mvns	r3, r3
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	4013      	ands	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	4313      	orrs	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	3301      	adds	r3, #1
 800506c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	f47f ae63 	bne.w	8004d44 <HAL_GPIO_Init+0x14>
  }
}
 800507e:	bf00      	nop
 8005080:	bf00      	nop
 8005082:	3724      	adds	r7, #36	; 0x24
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	58000400 	.word	0x58000400

08005090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	460b      	mov	r3, r1
 800509a:	807b      	strh	r3, [r7, #2]
 800509c:	4613      	mov	r3, r2
 800509e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050a0:	787b      	ldrb	r3, [r7, #1]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050a6:	887a      	ldrh	r2, [r7, #2]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80050ac:	e003      	b.n	80050b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80050ae:	887b      	ldrh	r3, [r7, #2]
 80050b0:	041a      	lsls	r2, r3, #16
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	619a      	str	r2, [r3, #24]
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b082      	sub	sp, #8
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	4603      	mov	r3, r0
 80050ca:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80050cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80050d4:	88fb      	ldrh	r3, [r7, #6]
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d008      	beq.n	80050ee <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050e0:	88fb      	ldrh	r3, [r7, #6]
 80050e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050e6:	88fb      	ldrh	r3, [r7, #6]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fc fbb5 	bl	8001858 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80050ee:	bf00      	nop
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005100:	4b19      	ldr	r3, [pc, #100]	; (8005168 <HAL_PWREx_ConfigSupply+0x70>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b04      	cmp	r3, #4
 800510a:	d00a      	beq.n	8005122 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800510c:	4b16      	ldr	r3, [pc, #88]	; (8005168 <HAL_PWREx_ConfigSupply+0x70>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	429a      	cmp	r2, r3
 8005118:	d001      	beq.n	800511e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e01f      	b.n	800515e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	e01d      	b.n	800515e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005122:	4b11      	ldr	r3, [pc, #68]	; (8005168 <HAL_PWREx_ConfigSupply+0x70>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f023 0207 	bic.w	r2, r3, #7
 800512a:	490f      	ldr	r1, [pc, #60]	; (8005168 <HAL_PWREx_ConfigSupply+0x70>)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4313      	orrs	r3, r2
 8005130:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005132:	f7fd f9a3 	bl	800247c <HAL_GetTick>
 8005136:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005138:	e009      	b.n	800514e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800513a:	f7fd f99f 	bl	800247c <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005148:	d901      	bls.n	800514e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e007      	b.n	800515e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800514e:	4b06      	ldr	r3, [pc, #24]	; (8005168 <HAL_PWREx_ConfigSupply+0x70>)
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515a:	d1ee      	bne.n	800513a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	58024800 	.word	0x58024800

0800516c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08c      	sub	sp, #48	; 0x30
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e3ff      	b.n	800597e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 8087 	beq.w	800529a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800518c:	4b99      	ldr	r3, [pc, #612]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005196:	4b97      	ldr	r3, [pc, #604]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d007      	beq.n	80051b2 <HAL_RCC_OscConfig+0x46>
 80051a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a4:	2b18      	cmp	r3, #24
 80051a6:	d110      	bne.n	80051ca <HAL_RCC_OscConfig+0x5e>
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d10b      	bne.n	80051ca <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b2:	4b90      	ldr	r3, [pc, #576]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d06c      	beq.n	8005298 <HAL_RCC_OscConfig+0x12c>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d168      	bne.n	8005298 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e3d9      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d2:	d106      	bne.n	80051e2 <HAL_RCC_OscConfig+0x76>
 80051d4:	4b87      	ldr	r3, [pc, #540]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a86      	ldr	r2, [pc, #536]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	e02e      	b.n	8005240 <HAL_RCC_OscConfig+0xd4>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10c      	bne.n	8005204 <HAL_RCC_OscConfig+0x98>
 80051ea:	4b82      	ldr	r3, [pc, #520]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a81      	ldr	r2, [pc, #516]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	4b7f      	ldr	r3, [pc, #508]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a7e      	ldr	r2, [pc, #504]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80051fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	e01d      	b.n	8005240 <HAL_RCC_OscConfig+0xd4>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800520c:	d10c      	bne.n	8005228 <HAL_RCC_OscConfig+0xbc>
 800520e:	4b79      	ldr	r3, [pc, #484]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a78      	ldr	r2, [pc, #480]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	4b76      	ldr	r3, [pc, #472]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a75      	ldr	r2, [pc, #468]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005224:	6013      	str	r3, [r2, #0]
 8005226:	e00b      	b.n	8005240 <HAL_RCC_OscConfig+0xd4>
 8005228:	4b72      	ldr	r3, [pc, #456]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a71      	ldr	r2, [pc, #452]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800522e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	4b6f      	ldr	r3, [pc, #444]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a6e      	ldr	r2, [pc, #440]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800523a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800523e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d013      	beq.n	8005270 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005248:	f7fd f918 	bl	800247c <HAL_GetTick>
 800524c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005250:	f7fd f914 	bl	800247c <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b64      	cmp	r3, #100	; 0x64
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e38d      	b.n	800597e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005262:	4b64      	ldr	r3, [pc, #400]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCC_OscConfig+0xe4>
 800526e:	e014      	b.n	800529a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fd f904 	bl	800247c <HAL_GetTick>
 8005274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005278:	f7fd f900 	bl	800247c <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b64      	cmp	r3, #100	; 0x64
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e379      	b.n	800597e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800528a:	4b5a      	ldr	r3, [pc, #360]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x10c>
 8005296:	e000      	b.n	800529a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 80ae 	beq.w	8005404 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052a8:	4b52      	ldr	r3, [pc, #328]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052b2:	4b50      	ldr	r3, [pc, #320]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <HAL_RCC_OscConfig+0x162>
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	2b18      	cmp	r3, #24
 80052c2:	d13a      	bne.n	800533a <HAL_RCC_OscConfig+0x1ce>
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f003 0303 	and.w	r3, r3, #3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d135      	bne.n	800533a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052ce:	4b49      	ldr	r3, [pc, #292]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d005      	beq.n	80052e6 <HAL_RCC_OscConfig+0x17a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e34b      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e6:	f7fd f8f9 	bl	80024dc <HAL_GetREVID>
 80052ea:	4603      	mov	r3, r0
 80052ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d817      	bhi.n	8005324 <HAL_RCC_OscConfig+0x1b8>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	2b40      	cmp	r3, #64	; 0x40
 80052fa:	d108      	bne.n	800530e <HAL_RCC_OscConfig+0x1a2>
 80052fc:	4b3d      	ldr	r3, [pc, #244]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005304:	4a3b      	ldr	r2, [pc, #236]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800530a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800530c:	e07a      	b.n	8005404 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800530e:	4b39      	ldr	r3, [pc, #228]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	031b      	lsls	r3, r3, #12
 800531c:	4935      	ldr	r1, [pc, #212]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800531e:	4313      	orrs	r3, r2
 8005320:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005322:	e06f      	b.n	8005404 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005324:	4b33      	ldr	r3, [pc, #204]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	061b      	lsls	r3, r3, #24
 8005332:	4930      	ldr	r1, [pc, #192]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005334:	4313      	orrs	r3, r2
 8005336:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005338:	e064      	b.n	8005404 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d045      	beq.n	80053ce <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005342:	4b2c      	ldr	r3, [pc, #176]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 0219 	bic.w	r2, r3, #25
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	4929      	ldr	r1, [pc, #164]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005350:	4313      	orrs	r3, r2
 8005352:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fd f892 	bl	800247c <HAL_GetTick>
 8005358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800535c:	f7fd f88e 	bl	800247c <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e307      	b.n	800597e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800536e:	4b21      	ldr	r3, [pc, #132]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0304 	and.w	r3, r3, #4
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0f0      	beq.n	800535c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800537a:	f7fd f8af 	bl	80024dc <HAL_GetREVID>
 800537e:	4603      	mov	r3, r0
 8005380:	f241 0203 	movw	r2, #4099	; 0x1003
 8005384:	4293      	cmp	r3, r2
 8005386:	d817      	bhi.n	80053b8 <HAL_RCC_OscConfig+0x24c>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d108      	bne.n	80053a2 <HAL_RCC_OscConfig+0x236>
 8005390:	4b18      	ldr	r3, [pc, #96]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005398:	4a16      	ldr	r2, [pc, #88]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 800539a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800539e:	6053      	str	r3, [r2, #4]
 80053a0:	e030      	b.n	8005404 <HAL_RCC_OscConfig+0x298>
 80053a2:	4b14      	ldr	r3, [pc, #80]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	031b      	lsls	r3, r3, #12
 80053b0:	4910      	ldr	r1, [pc, #64]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	604b      	str	r3, [r1, #4]
 80053b6:	e025      	b.n	8005404 <HAL_RCC_OscConfig+0x298>
 80053b8:	4b0e      	ldr	r3, [pc, #56]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	061b      	lsls	r3, r3, #24
 80053c6:	490b      	ldr	r1, [pc, #44]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	604b      	str	r3, [r1, #4]
 80053cc:	e01a      	b.n	8005404 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ce:	4b09      	ldr	r3, [pc, #36]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a08      	ldr	r2, [pc, #32]	; (80053f4 <HAL_RCC_OscConfig+0x288>)
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053da:	f7fd f84f 	bl	800247c <HAL_GetTick>
 80053de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053e0:	e00a      	b.n	80053f8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053e2:	f7fd f84b 	bl	800247c <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d903      	bls.n	80053f8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e2c4      	b.n	800597e <HAL_RCC_OscConfig+0x812>
 80053f4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053f8:	4ba4      	ldr	r3, [pc, #656]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1ee      	bne.n	80053e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80a9 	beq.w	8005564 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005412:	4b9e      	ldr	r3, [pc, #632]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800541a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800541c:	4b9b      	ldr	r3, [pc, #620]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b08      	cmp	r3, #8
 8005426:	d007      	beq.n	8005438 <HAL_RCC_OscConfig+0x2cc>
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	2b18      	cmp	r3, #24
 800542c:	d13a      	bne.n	80054a4 <HAL_RCC_OscConfig+0x338>
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f003 0303 	and.w	r3, r3, #3
 8005434:	2b01      	cmp	r3, #1
 8005436:	d135      	bne.n	80054a4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005438:	4b94      	ldr	r3, [pc, #592]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <HAL_RCC_OscConfig+0x2e4>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	2b80      	cmp	r3, #128	; 0x80
 800544a:	d001      	beq.n	8005450 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e296      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005450:	f7fd f844 	bl	80024dc <HAL_GetREVID>
 8005454:	4603      	mov	r3, r0
 8005456:	f241 0203 	movw	r2, #4099	; 0x1003
 800545a:	4293      	cmp	r3, r2
 800545c:	d817      	bhi.n	800548e <HAL_RCC_OscConfig+0x322>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	2b20      	cmp	r3, #32
 8005464:	d108      	bne.n	8005478 <HAL_RCC_OscConfig+0x30c>
 8005466:	4b89      	ldr	r3, [pc, #548]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800546e:	4a87      	ldr	r2, [pc, #540]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005470:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005474:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005476:	e075      	b.n	8005564 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005478:	4b84      	ldr	r3, [pc, #528]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	069b      	lsls	r3, r3, #26
 8005486:	4981      	ldr	r1, [pc, #516]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005488:	4313      	orrs	r3, r2
 800548a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800548c:	e06a      	b.n	8005564 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800548e:	4b7f      	ldr	r3, [pc, #508]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	061b      	lsls	r3, r3, #24
 800549c:	497b      	ldr	r1, [pc, #492]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80054a2:	e05f      	b.n	8005564 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d042      	beq.n	8005532 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80054ac:	4b77      	ldr	r3, [pc, #476]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a76      	ldr	r2, [pc, #472]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80054b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b8:	f7fc ffe0 	bl	800247c <HAL_GetTick>
 80054bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80054c0:	f7fc ffdc 	bl	800247c <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e255      	b.n	800597e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054d2:	4b6e      	ldr	r3, [pc, #440]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0f0      	beq.n	80054c0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054de:	f7fc fffd 	bl	80024dc <HAL_GetREVID>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d817      	bhi.n	800551c <HAL_RCC_OscConfig+0x3b0>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d108      	bne.n	8005506 <HAL_RCC_OscConfig+0x39a>
 80054f4:	4b65      	ldr	r3, [pc, #404]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80054fc:	4a63      	ldr	r2, [pc, #396]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80054fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005502:	6053      	str	r3, [r2, #4]
 8005504:	e02e      	b.n	8005564 <HAL_RCC_OscConfig+0x3f8>
 8005506:	4b61      	ldr	r3, [pc, #388]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	069b      	lsls	r3, r3, #26
 8005514:	495d      	ldr	r1, [pc, #372]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005516:	4313      	orrs	r3, r2
 8005518:	604b      	str	r3, [r1, #4]
 800551a:	e023      	b.n	8005564 <HAL_RCC_OscConfig+0x3f8>
 800551c:	4b5b      	ldr	r3, [pc, #364]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	061b      	lsls	r3, r3, #24
 800552a:	4958      	ldr	r1, [pc, #352]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800552c:	4313      	orrs	r3, r2
 800552e:	60cb      	str	r3, [r1, #12]
 8005530:	e018      	b.n	8005564 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005532:	4b56      	ldr	r3, [pc, #344]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a55      	ldr	r2, [pc, #340]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005538:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800553c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800553e:	f7fc ff9d 	bl	800247c <HAL_GetTick>
 8005542:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005546:	f7fc ff99 	bl	800247c <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e212      	b.n	800597e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005558:	4b4c      	ldr	r3, [pc, #304]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1f0      	bne.n	8005546 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	2b00      	cmp	r3, #0
 800556e:	d036      	beq.n	80055de <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d019      	beq.n	80055ac <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005578:	4b44      	ldr	r3, [pc, #272]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800557a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800557c:	4a43      	ldr	r2, [pc, #268]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800557e:	f043 0301 	orr.w	r3, r3, #1
 8005582:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005584:	f7fc ff7a 	bl	800247c <HAL_GetTick>
 8005588:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800558c:	f7fc ff76 	bl	800247c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e1ef      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800559e:	4b3b      	ldr	r3, [pc, #236]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80055a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0x420>
 80055aa:	e018      	b.n	80055de <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ac:	4b37      	ldr	r3, [pc, #220]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80055ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b0:	4a36      	ldr	r2, [pc, #216]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80055b2:	f023 0301 	bic.w	r3, r3, #1
 80055b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b8:	f7fc ff60 	bl	800247c <HAL_GetTick>
 80055bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055c0:	f7fc ff5c 	bl	800247c <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e1d5      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055d2:	4b2e      	ldr	r3, [pc, #184]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80055d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f0      	bne.n	80055c0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0320 	and.w	r3, r3, #32
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d036      	beq.n	8005658 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d019      	beq.n	8005626 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055f2:	4b26      	ldr	r3, [pc, #152]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a25      	ldr	r2, [pc, #148]	; (800568c <HAL_RCC_OscConfig+0x520>)
 80055f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055fe:	f7fc ff3d 	bl	800247c <HAL_GetTick>
 8005602:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005606:	f7fc ff39 	bl	800247c <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b02      	cmp	r3, #2
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e1b2      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005618:	4b1c      	ldr	r3, [pc, #112]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0f0      	beq.n	8005606 <HAL_RCC_OscConfig+0x49a>
 8005624:	e018      	b.n	8005658 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005626:	4b19      	ldr	r3, [pc, #100]	; (800568c <HAL_RCC_OscConfig+0x520>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a18      	ldr	r2, [pc, #96]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800562c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005630:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005632:	f7fc ff23 	bl	800247c <HAL_GetTick>
 8005636:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005638:	e008      	b.n	800564c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800563a:	f7fc ff1f 	bl	800247c <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e198      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800564c:	4b0f      	ldr	r3, [pc, #60]	; (800568c <HAL_RCC_OscConfig+0x520>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f0      	bne.n	800563a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 8085 	beq.w	8005770 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005666:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <HAL_RCC_OscConfig+0x524>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a09      	ldr	r2, [pc, #36]	; (8005690 <HAL_RCC_OscConfig+0x524>)
 800566c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005670:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005672:	f7fc ff03 	bl	800247c <HAL_GetTick>
 8005676:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005678:	e00c      	b.n	8005694 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800567a:	f7fc feff 	bl	800247c <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b64      	cmp	r3, #100	; 0x64
 8005686:	d905      	bls.n	8005694 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e178      	b.n	800597e <HAL_RCC_OscConfig+0x812>
 800568c:	58024400 	.word	0x58024400
 8005690:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005694:	4b96      	ldr	r3, [pc, #600]	; (80058f0 <HAL_RCC_OscConfig+0x784>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0ec      	beq.n	800567a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d106      	bne.n	80056b6 <HAL_RCC_OscConfig+0x54a>
 80056a8:	4b92      	ldr	r3, [pc, #584]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ac:	4a91      	ldr	r2, [pc, #580]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	6713      	str	r3, [r2, #112]	; 0x70
 80056b4:	e02d      	b.n	8005712 <HAL_RCC_OscConfig+0x5a6>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10c      	bne.n	80056d8 <HAL_RCC_OscConfig+0x56c>
 80056be:	4b8d      	ldr	r3, [pc, #564]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	4a8c      	ldr	r2, [pc, #560]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056c4:	f023 0301 	bic.w	r3, r3, #1
 80056c8:	6713      	str	r3, [r2, #112]	; 0x70
 80056ca:	4b8a      	ldr	r3, [pc, #552]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	4a89      	ldr	r2, [pc, #548]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056d0:	f023 0304 	bic.w	r3, r3, #4
 80056d4:	6713      	str	r3, [r2, #112]	; 0x70
 80056d6:	e01c      	b.n	8005712 <HAL_RCC_OscConfig+0x5a6>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2b05      	cmp	r3, #5
 80056de:	d10c      	bne.n	80056fa <HAL_RCC_OscConfig+0x58e>
 80056e0:	4b84      	ldr	r3, [pc, #528]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e4:	4a83      	ldr	r2, [pc, #524]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056e6:	f043 0304 	orr.w	r3, r3, #4
 80056ea:	6713      	str	r3, [r2, #112]	; 0x70
 80056ec:	4b81      	ldr	r3, [pc, #516]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f0:	4a80      	ldr	r2, [pc, #512]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	6713      	str	r3, [r2, #112]	; 0x70
 80056f8:	e00b      	b.n	8005712 <HAL_RCC_OscConfig+0x5a6>
 80056fa:	4b7e      	ldr	r3, [pc, #504]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80056fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fe:	4a7d      	ldr	r2, [pc, #500]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	6713      	str	r3, [r2, #112]	; 0x70
 8005706:	4b7b      	ldr	r3, [pc, #492]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	4a7a      	ldr	r2, [pc, #488]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800570c:	f023 0304 	bic.w	r3, r3, #4
 8005710:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d015      	beq.n	8005746 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571a:	f7fc feaf 	bl	800247c <HAL_GetTick>
 800571e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005720:	e00a      	b.n	8005738 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005722:	f7fc feab 	bl	800247c <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005730:	4293      	cmp	r3, r2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e122      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005738:	4b6e      	ldr	r3, [pc, #440]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800573a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0ee      	beq.n	8005722 <HAL_RCC_OscConfig+0x5b6>
 8005744:	e014      	b.n	8005770 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005746:	f7fc fe99 	bl	800247c <HAL_GetTick>
 800574a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800574c:	e00a      	b.n	8005764 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800574e:	f7fc fe95 	bl	800247c <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	f241 3288 	movw	r2, #5000	; 0x1388
 800575c:	4293      	cmp	r3, r2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e10c      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005764:	4b63      	ldr	r3, [pc, #396]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1ee      	bne.n	800574e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8101 	beq.w	800597c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800577a:	4b5e      	ldr	r3, [pc, #376]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005782:	2b18      	cmp	r3, #24
 8005784:	f000 80bc 	beq.w	8005900 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	2b02      	cmp	r3, #2
 800578e:	f040 8095 	bne.w	80058bc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005792:	4b58      	ldr	r3, [pc, #352]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a57      	ldr	r2, [pc, #348]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800579c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579e:	f7fc fe6d 	bl	800247c <HAL_GetTick>
 80057a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a6:	f7fc fe69 	bl	800247c <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e0e2      	b.n	800597e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057b8:	4b4e      	ldr	r3, [pc, #312]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1f0      	bne.n	80057a6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057c4:	4b4b      	ldr	r3, [pc, #300]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80057c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057c8:	4b4b      	ldr	r3, [pc, #300]	; (80058f8 <HAL_RCC_OscConfig+0x78c>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80057d4:	0112      	lsls	r2, r2, #4
 80057d6:	430a      	orrs	r2, r1
 80057d8:	4946      	ldr	r1, [pc, #280]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	628b      	str	r3, [r1, #40]	; 0x28
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	3b01      	subs	r3, #1
 80057e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ec:	3b01      	subs	r3, #1
 80057ee:	025b      	lsls	r3, r3, #9
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f8:	3b01      	subs	r3, #1
 80057fa:	041b      	lsls	r3, r3, #16
 80057fc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005806:	3b01      	subs	r3, #1
 8005808:	061b      	lsls	r3, r3, #24
 800580a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800580e:	4939      	ldr	r1, [pc, #228]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005810:	4313      	orrs	r3, r2
 8005812:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005814:	4b37      	ldr	r3, [pc, #220]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005818:	4a36      	ldr	r2, [pc, #216]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800581a:	f023 0301 	bic.w	r3, r3, #1
 800581e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005820:	4b34      	ldr	r3, [pc, #208]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005824:	4b35      	ldr	r3, [pc, #212]	; (80058fc <HAL_RCC_OscConfig+0x790>)
 8005826:	4013      	ands	r3, r2
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800582c:	00d2      	lsls	r2, r2, #3
 800582e:	4931      	ldr	r1, [pc, #196]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005830:	4313      	orrs	r3, r2
 8005832:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005834:	4b2f      	ldr	r3, [pc, #188]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	f023 020c 	bic.w	r2, r3, #12
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	492c      	ldr	r1, [pc, #176]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005842:	4313      	orrs	r3, r2
 8005844:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005846:	4b2b      	ldr	r3, [pc, #172]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584a:	f023 0202 	bic.w	r2, r3, #2
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005852:	4928      	ldr	r1, [pc, #160]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005854:	4313      	orrs	r3, r2
 8005856:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005858:	4b26      	ldr	r3, [pc, #152]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800585a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585c:	4a25      	ldr	r2, [pc, #148]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800585e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005864:	4b23      	ldr	r3, [pc, #140]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005868:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800586a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800586e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005870:	4b20      	ldr	r3, [pc, #128]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	4a1f      	ldr	r2, [pc, #124]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005876:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800587a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800587c:	4b1d      	ldr	r3, [pc, #116]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	4a1c      	ldr	r2, [pc, #112]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 8005882:	f043 0301 	orr.w	r3, r3, #1
 8005886:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005888:	4b1a      	ldr	r3, [pc, #104]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a19      	ldr	r2, [pc, #100]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 800588e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005894:	f7fc fdf2 	bl	800247c <HAL_GetTick>
 8005898:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589c:	f7fc fdee 	bl	800247c <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e067      	b.n	800597e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058ae:	4b11      	ldr	r3, [pc, #68]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0f0      	beq.n	800589c <HAL_RCC_OscConfig+0x730>
 80058ba:	e05f      	b.n	800597c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058bc:	4b0d      	ldr	r3, [pc, #52]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a0c      	ldr	r2, [pc, #48]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80058c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fc fdd8 	bl	800247c <HAL_GetTick>
 80058cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058d0:	f7fc fdd4 	bl	800247c <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e04d      	b.n	800597e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058e2:	4b04      	ldr	r3, [pc, #16]	; (80058f4 <HAL_RCC_OscConfig+0x788>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0x764>
 80058ee:	e045      	b.n	800597c <HAL_RCC_OscConfig+0x810>
 80058f0:	58024800 	.word	0x58024800
 80058f4:	58024400 	.word	0x58024400
 80058f8:	fffffc0c 	.word	0xfffffc0c
 80058fc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005900:	4b21      	ldr	r3, [pc, #132]	; (8005988 <HAL_RCC_OscConfig+0x81c>)
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005906:	4b20      	ldr	r3, [pc, #128]	; (8005988 <HAL_RCC_OscConfig+0x81c>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	2b01      	cmp	r3, #1
 8005912:	d031      	beq.n	8005978 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f003 0203 	and.w	r2, r3, #3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800591e:	429a      	cmp	r2, r3
 8005920:	d12a      	bne.n	8005978 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	091b      	lsrs	r3, r3, #4
 8005926:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800592e:	429a      	cmp	r2, r3
 8005930:	d122      	bne.n	8005978 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800593e:	429a      	cmp	r2, r3
 8005940:	d11a      	bne.n	8005978 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	0a5b      	lsrs	r3, r3, #9
 8005946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005950:	429a      	cmp	r2, r3
 8005952:	d111      	bne.n	8005978 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	0c1b      	lsrs	r3, r3, #16
 8005958:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005962:	429a      	cmp	r2, r3
 8005964:	d108      	bne.n	8005978 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	0e1b      	lsrs	r3, r3, #24
 800596a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005972:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005974:	429a      	cmp	r2, r3
 8005976:	d001      	beq.n	800597c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e000      	b.n	800597e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3730      	adds	r7, #48	; 0x30
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	58024400 	.word	0x58024400

0800598c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e19c      	b.n	8005cda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059a0:	4b8a      	ldr	r3, [pc, #552]	; (8005bcc <HAL_RCC_ClockConfig+0x240>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	683a      	ldr	r2, [r7, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d910      	bls.n	80059d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ae:	4b87      	ldr	r3, [pc, #540]	; (8005bcc <HAL_RCC_ClockConfig+0x240>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f023 020f 	bic.w	r2, r3, #15
 80059b6:	4985      	ldr	r1, [pc, #532]	; (8005bcc <HAL_RCC_ClockConfig+0x240>)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059be:	4b83      	ldr	r3, [pc, #524]	; (8005bcc <HAL_RCC_ClockConfig+0x240>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d001      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e184      	b.n	8005cda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0304 	and.w	r3, r3, #4
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d010      	beq.n	80059fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	4b7b      	ldr	r3, [pc, #492]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d908      	bls.n	80059fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059ec:	4b78      	ldr	r3, [pc, #480]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	4975      	ldr	r1, [pc, #468]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d010      	beq.n	8005a2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	4b70      	ldr	r3, [pc, #448]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d908      	bls.n	8005a2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a1a:	4b6d      	ldr	r3, [pc, #436]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	496a      	ldr	r1, [pc, #424]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d010      	beq.n	8005a5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699a      	ldr	r2, [r3, #24]
 8005a3c:	4b64      	ldr	r3, [pc, #400]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d908      	bls.n	8005a5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a48:	4b61      	ldr	r3, [pc, #388]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	495e      	ldr	r1, [pc, #376]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a56:	4313      	orrs	r3, r2
 8005a58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0320 	and.w	r3, r3, #32
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d010      	beq.n	8005a88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69da      	ldr	r2, [r3, #28]
 8005a6a:	4b59      	ldr	r3, [pc, #356]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d908      	bls.n	8005a88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005a76:	4b56      	ldr	r3, [pc, #344]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	4953      	ldr	r1, [pc, #332]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d010      	beq.n	8005ab6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	4b4d      	ldr	r3, [pc, #308]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d908      	bls.n	8005ab6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aa4:	4b4a      	ldr	r3, [pc, #296]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	f023 020f 	bic.w	r2, r3, #15
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4947      	ldr	r1, [pc, #284]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d055      	beq.n	8005b6e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ac2:	4b43      	ldr	r3, [pc, #268]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	4940      	ldr	r1, [pc, #256]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d107      	bne.n	8005aec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005adc:	4b3c      	ldr	r3, [pc, #240]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d121      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e0f6      	b.n	8005cda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	2b03      	cmp	r3, #3
 8005af2:	d107      	bne.n	8005b04 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005af4:	4b36      	ldr	r3, [pc, #216]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d115      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e0ea      	b.n	8005cda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d107      	bne.n	8005b1c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b0c:	4b30      	ldr	r3, [pc, #192]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d109      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0de      	b.n	8005cda <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b1c:	4b2c      	ldr	r3, [pc, #176]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e0d6      	b.n	8005cda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b2c:	4b28      	ldr	r3, [pc, #160]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f023 0207 	bic.w	r2, r3, #7
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	4925      	ldr	r1, [pc, #148]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3e:	f7fc fc9d 	bl	800247c <HAL_GetTick>
 8005b42:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b44:	e00a      	b.n	8005b5c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b46:	f7fc fc99 	bl	800247c <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e0be      	b.n	8005cda <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b5c:	4b1c      	ldr	r3, [pc, #112]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d1eb      	bne.n	8005b46 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d010      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	4b14      	ldr	r3, [pc, #80]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d208      	bcs.n	8005b9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b8a:	4b11      	ldr	r3, [pc, #68]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	f023 020f 	bic.w	r2, r3, #15
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	490e      	ldr	r1, [pc, #56]	; (8005bd0 <HAL_RCC_ClockConfig+0x244>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <HAL_RCC_ClockConfig+0x240>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d214      	bcs.n	8005bd4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005baa:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <HAL_RCC_ClockConfig+0x240>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f023 020f 	bic.w	r2, r3, #15
 8005bb2:	4906      	ldr	r1, [pc, #24]	; (8005bcc <HAL_RCC_ClockConfig+0x240>)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bba:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <HAL_RCC_ClockConfig+0x240>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 030f 	and.w	r3, r3, #15
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d005      	beq.n	8005bd4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e086      	b.n	8005cda <HAL_RCC_ClockConfig+0x34e>
 8005bcc:	52002000 	.word	0x52002000
 8005bd0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d010      	beq.n	8005c02 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	4b3f      	ldr	r3, [pc, #252]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d208      	bcs.n	8005c02 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bf0:	4b3c      	ldr	r3, [pc, #240]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	4939      	ldr	r1, [pc, #228]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 0308 	and.w	r3, r3, #8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d010      	beq.n	8005c30 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695a      	ldr	r2, [r3, #20]
 8005c12:	4b34      	ldr	r3, [pc, #208]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d208      	bcs.n	8005c30 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c1e:	4b31      	ldr	r3, [pc, #196]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	492e      	ldr	r1, [pc, #184]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d010      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699a      	ldr	r2, [r3, #24]
 8005c40:	4b28      	ldr	r3, [pc, #160]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d208      	bcs.n	8005c5e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c4c:	4b25      	ldr	r3, [pc, #148]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c4e:	69db      	ldr	r3, [r3, #28]
 8005c50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	4922      	ldr	r1, [pc, #136]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d010      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69da      	ldr	r2, [r3, #28]
 8005c6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d208      	bcs.n	8005c8c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c7a:	4b1a      	ldr	r3, [pc, #104]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69db      	ldr	r3, [r3, #28]
 8005c86:	4917      	ldr	r1, [pc, #92]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c8c:	f000 f834 	bl	8005cf8 <HAL_RCC_GetSysClockFreq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4b14      	ldr	r3, [pc, #80]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	0a1b      	lsrs	r3, r3, #8
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	4912      	ldr	r1, [pc, #72]	; (8005ce8 <HAL_RCC_ClockConfig+0x35c>)
 8005c9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ca0:	f003 031f 	and.w	r3, r3, #31
 8005ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005caa:	4b0e      	ldr	r3, [pc, #56]	; (8005ce4 <HAL_RCC_ClockConfig+0x358>)
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	4a0d      	ldr	r2, [pc, #52]	; (8005ce8 <HAL_RCC_ClockConfig+0x35c>)
 8005cb4:	5cd3      	ldrb	r3, [r2, r3]
 8005cb6:	f003 031f 	and.w	r3, r3, #31
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc0:	4a0a      	ldr	r2, [pc, #40]	; (8005cec <HAL_RCC_ClockConfig+0x360>)
 8005cc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005cc4:	4a0a      	ldr	r2, [pc, #40]	; (8005cf0 <HAL_RCC_ClockConfig+0x364>)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005cca:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <HAL_RCC_ClockConfig+0x368>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fc fb8a 	bl	80023e8 <HAL_InitTick>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	58024400 	.word	0x58024400
 8005ce8:	0800a7c4 	.word	0x0800a7c4
 8005cec:	20000004 	.word	0x20000004
 8005cf0:	20000000 	.word	0x20000000
 8005cf4:	20000008 	.word	0x20000008

08005cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b089      	sub	sp, #36	; 0x24
 8005cfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cfe:	4bb3      	ldr	r3, [pc, #716]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d06:	2b18      	cmp	r3, #24
 8005d08:	f200 8155 	bhi.w	8005fb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d79 	.word	0x08005d79
 8005d18:	08005fb7 	.word	0x08005fb7
 8005d1c:	08005fb7 	.word	0x08005fb7
 8005d20:	08005fb7 	.word	0x08005fb7
 8005d24:	08005fb7 	.word	0x08005fb7
 8005d28:	08005fb7 	.word	0x08005fb7
 8005d2c:	08005fb7 	.word	0x08005fb7
 8005d30:	08005fb7 	.word	0x08005fb7
 8005d34:	08005d9f 	.word	0x08005d9f
 8005d38:	08005fb7 	.word	0x08005fb7
 8005d3c:	08005fb7 	.word	0x08005fb7
 8005d40:	08005fb7 	.word	0x08005fb7
 8005d44:	08005fb7 	.word	0x08005fb7
 8005d48:	08005fb7 	.word	0x08005fb7
 8005d4c:	08005fb7 	.word	0x08005fb7
 8005d50:	08005fb7 	.word	0x08005fb7
 8005d54:	08005da5 	.word	0x08005da5
 8005d58:	08005fb7 	.word	0x08005fb7
 8005d5c:	08005fb7 	.word	0x08005fb7
 8005d60:	08005fb7 	.word	0x08005fb7
 8005d64:	08005fb7 	.word	0x08005fb7
 8005d68:	08005fb7 	.word	0x08005fb7
 8005d6c:	08005fb7 	.word	0x08005fb7
 8005d70:	08005fb7 	.word	0x08005fb7
 8005d74:	08005dab 	.word	0x08005dab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d78:	4b94      	ldr	r3, [pc, #592]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0320 	and.w	r3, r3, #32
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d009      	beq.n	8005d98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d84:	4b91      	ldr	r3, [pc, #580]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	08db      	lsrs	r3, r3, #3
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	4a90      	ldr	r2, [pc, #576]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d90:	fa22 f303 	lsr.w	r3, r2, r3
 8005d94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005d96:	e111      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d98:	4b8d      	ldr	r3, [pc, #564]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d9a:	61bb      	str	r3, [r7, #24]
    break;
 8005d9c:	e10e      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005d9e:	4b8d      	ldr	r3, [pc, #564]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005da0:	61bb      	str	r3, [r7, #24]
    break;
 8005da2:	e10b      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005da4:	4b8c      	ldr	r3, [pc, #560]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005da6:	61bb      	str	r3, [r7, #24]
    break;
 8005da8:	e108      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005daa:	4b88      	ldr	r3, [pc, #544]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005db4:	4b85      	ldr	r3, [pc, #532]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db8:	091b      	lsrs	r3, r3, #4
 8005dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dbe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005dc0:	4b82      	ldr	r3, [pc, #520]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005dca:	4b80      	ldr	r3, [pc, #512]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dce:	08db      	lsrs	r3, r3, #3
 8005dd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	fb02 f303 	mul.w	r3, r2, r3
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 80e1 	beq.w	8005fb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	f000 8083 	beq.w	8005efc <HAL_RCC_GetSysClockFreq+0x204>
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	f200 80a1 	bhi.w	8005f40 <HAL_RCC_GetSysClockFreq+0x248>
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <HAL_RCC_GetSysClockFreq+0x114>
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d056      	beq.n	8005eb8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005e0a:	e099      	b.n	8005f40 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e0c:	4b6f      	ldr	r3, [pc, #444]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0320 	and.w	r3, r3, #32
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d02d      	beq.n	8005e74 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e18:	4b6c      	ldr	r3, [pc, #432]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	08db      	lsrs	r3, r3, #3
 8005e1e:	f003 0303 	and.w	r3, r3, #3
 8005e22:	4a6b      	ldr	r2, [pc, #428]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e24:	fa22 f303 	lsr.w	r3, r2, r3
 8005e28:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	ee07 3a90 	vmov	s15, r3
 8005e30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e42:	4b62      	ldr	r3, [pc, #392]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e56:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005e72:	e087      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005fe0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e86:	4b51      	ldr	r3, [pc, #324]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e9a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eb6:	e065      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005fe4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eca:	4b40      	ldr	r3, [pc, #256]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ede:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005efa:	e043      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f06:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005fe8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0e:	4b2f      	ldr	r3, [pc, #188]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f22:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f3e:	e021      	b.n	8005f84 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005fe4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f52:	4b1e      	ldr	r3, [pc, #120]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f66:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005fdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f82:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005f84:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f88:	0a5b      	lsrs	r3, r3, #9
 8005f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f8e:	3301      	adds	r3, #1
 8005f90:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	ee07 3a90 	vmov	s15, r3
 8005f98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa8:	ee17 3a90 	vmov	r3, s15
 8005fac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005fae:	e005      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	61bb      	str	r3, [r7, #24]
    break;
 8005fb4:	e002      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005fb6:	4b07      	ldr	r3, [pc, #28]	; (8005fd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005fb8:	61bb      	str	r3, [r7, #24]
    break;
 8005fba:	bf00      	nop
  }

  return sysclockfreq;
 8005fbc:	69bb      	ldr	r3, [r7, #24]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3724      	adds	r7, #36	; 0x24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	58024400 	.word	0x58024400
 8005fd0:	03d09000 	.word	0x03d09000
 8005fd4:	003d0900 	.word	0x003d0900
 8005fd8:	02dc6c00 	.word	0x02dc6c00
 8005fdc:	46000000 	.word	0x46000000
 8005fe0:	4c742400 	.word	0x4c742400
 8005fe4:	4a742400 	.word	0x4a742400
 8005fe8:	4c371b00 	.word	0x4c371b00

08005fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005ff2:	f7ff fe81 	bl	8005cf8 <HAL_RCC_GetSysClockFreq>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	4b10      	ldr	r3, [pc, #64]	; (800603c <HAL_RCC_GetHCLKFreq+0x50>)
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	0a1b      	lsrs	r3, r3, #8
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	490f      	ldr	r1, [pc, #60]	; (8006040 <HAL_RCC_GetHCLKFreq+0x54>)
 8006004:	5ccb      	ldrb	r3, [r1, r3]
 8006006:	f003 031f 	and.w	r3, r3, #31
 800600a:	fa22 f303 	lsr.w	r3, r2, r3
 800600e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006010:	4b0a      	ldr	r3, [pc, #40]	; (800603c <HAL_RCC_GetHCLKFreq+0x50>)
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	f003 030f 	and.w	r3, r3, #15
 8006018:	4a09      	ldr	r2, [pc, #36]	; (8006040 <HAL_RCC_GetHCLKFreq+0x54>)
 800601a:	5cd3      	ldrb	r3, [r2, r3]
 800601c:	f003 031f 	and.w	r3, r3, #31
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	fa22 f303 	lsr.w	r3, r2, r3
 8006026:	4a07      	ldr	r2, [pc, #28]	; (8006044 <HAL_RCC_GetHCLKFreq+0x58>)
 8006028:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800602a:	4a07      	ldr	r2, [pc, #28]	; (8006048 <HAL_RCC_GetHCLKFreq+0x5c>)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006030:	4b04      	ldr	r3, [pc, #16]	; (8006044 <HAL_RCC_GetHCLKFreq+0x58>)
 8006032:	681b      	ldr	r3, [r3, #0]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	58024400 	.word	0x58024400
 8006040:	0800a7c4 	.word	0x0800a7c4
 8006044:	20000004 	.word	0x20000004
 8006048:	20000000 	.word	0x20000000

0800604c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006050:	f7ff ffcc 	bl	8005fec <HAL_RCC_GetHCLKFreq>
 8006054:	4602      	mov	r2, r0
 8006056:	4b06      	ldr	r3, [pc, #24]	; (8006070 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	091b      	lsrs	r3, r3, #4
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	4904      	ldr	r1, [pc, #16]	; (8006074 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006062:	5ccb      	ldrb	r3, [r1, r3]
 8006064:	f003 031f 	and.w	r3, r3, #31
 8006068:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800606c:	4618      	mov	r0, r3
 800606e:	bd80      	pop	{r7, pc}
 8006070:	58024400 	.word	0x58024400
 8006074:	0800a7c4 	.word	0x0800a7c4

08006078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800607c:	f7ff ffb6 	bl	8005fec <HAL_RCC_GetHCLKFreq>
 8006080:	4602      	mov	r2, r0
 8006082:	4b06      	ldr	r3, [pc, #24]	; (800609c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	0a1b      	lsrs	r3, r3, #8
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	4904      	ldr	r1, [pc, #16]	; (80060a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800608e:	5ccb      	ldrb	r3, [r1, r3]
 8006090:	f003 031f 	and.w	r3, r3, #31
 8006094:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006098:	4618      	mov	r0, r3
 800609a:	bd80      	pop	{r7, pc}
 800609c:	58024400 	.word	0x58024400
 80060a0:	0800a7c4 	.word	0x0800a7c4

080060a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060ac:	2300      	movs	r3, #0
 80060ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060b0:	2300      	movs	r3, #0
 80060b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d03f      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060c8:	d02a      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80060ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060ce:	d824      	bhi.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060d4:	d018      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80060d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060da:	d81e      	bhi.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80060e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060e4:	d007      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80060e6:	e018      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e8:	4bab      	ldr	r3, [pc, #684]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	4aaa      	ldr	r2, [pc, #680]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80060f4:	e015      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3304      	adds	r3, #4
 80060fa:	2102      	movs	r1, #2
 80060fc:	4618      	mov	r0, r3
 80060fe:	f001 f9cf 	bl	80074a0 <RCCEx_PLL2_Config>
 8006102:	4603      	mov	r3, r0
 8006104:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006106:	e00c      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3324      	adds	r3, #36	; 0x24
 800610c:	2102      	movs	r1, #2
 800610e:	4618      	mov	r0, r3
 8006110:	f001 fa78 	bl	8007604 <RCCEx_PLL3_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006118:	e003      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	75fb      	strb	r3, [r7, #23]
      break;
 800611e:	e000      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006122:	7dfb      	ldrb	r3, [r7, #23]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d109      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006128:	4b9b      	ldr	r3, [pc, #620]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800612a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006134:	4998      	ldr	r1, [pc, #608]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006136:	4313      	orrs	r3, r2
 8006138:	650b      	str	r3, [r1, #80]	; 0x50
 800613a:	e001      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800613c:	7dfb      	ldrb	r3, [r7, #23]
 800613e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006148:	2b00      	cmp	r3, #0
 800614a:	d03d      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006150:	2b04      	cmp	r3, #4
 8006152:	d826      	bhi.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006154:	a201      	add	r2, pc, #4	; (adr r2, 800615c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615a:	bf00      	nop
 800615c:	08006171 	.word	0x08006171
 8006160:	0800617f 	.word	0x0800617f
 8006164:	08006191 	.word	0x08006191
 8006168:	080061a9 	.word	0x080061a9
 800616c:	080061a9 	.word	0x080061a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006170:	4b89      	ldr	r3, [pc, #548]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006174:	4a88      	ldr	r2, [pc, #544]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800617a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800617c:	e015      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	3304      	adds	r3, #4
 8006182:	2100      	movs	r1, #0
 8006184:	4618      	mov	r0, r3
 8006186:	f001 f98b 	bl	80074a0 <RCCEx_PLL2_Config>
 800618a:	4603      	mov	r3, r0
 800618c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800618e:	e00c      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3324      	adds	r3, #36	; 0x24
 8006194:	2100      	movs	r1, #0
 8006196:	4618      	mov	r0, r3
 8006198:	f001 fa34 	bl	8007604 <RCCEx_PLL3_Config>
 800619c:	4603      	mov	r3, r0
 800619e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061a0:	e003      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	75fb      	strb	r3, [r7, #23]
      break;
 80061a6:	e000      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80061a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d109      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061b0:	4b79      	ldr	r3, [pc, #484]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b4:	f023 0207 	bic.w	r2, r3, #7
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061bc:	4976      	ldr	r1, [pc, #472]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	650b      	str	r3, [r1, #80]	; 0x50
 80061c2:	e001      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c4:	7dfb      	ldrb	r3, [r7, #23]
 80061c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d042      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061dc:	d02b      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80061de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061e2:	d825      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80061e4:	2bc0      	cmp	r3, #192	; 0xc0
 80061e6:	d028      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80061e8:	2bc0      	cmp	r3, #192	; 0xc0
 80061ea:	d821      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80061ec:	2b80      	cmp	r3, #128	; 0x80
 80061ee:	d016      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80061f0:	2b80      	cmp	r3, #128	; 0x80
 80061f2:	d81d      	bhi.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80061f8:	2b40      	cmp	r3, #64	; 0x40
 80061fa:	d007      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x168>
 80061fc:	e018      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061fe:	4b66      	ldr	r3, [pc, #408]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006202:	4a65      	ldr	r2, [pc, #404]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006208:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800620a:	e017      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	3304      	adds	r3, #4
 8006210:	2100      	movs	r1, #0
 8006212:	4618      	mov	r0, r3
 8006214:	f001 f944 	bl	80074a0 <RCCEx_PLL2_Config>
 8006218:	4603      	mov	r3, r0
 800621a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800621c:	e00e      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	3324      	adds	r3, #36	; 0x24
 8006222:	2100      	movs	r1, #0
 8006224:	4618      	mov	r0, r3
 8006226:	f001 f9ed 	bl	8007604 <RCCEx_PLL3_Config>
 800622a:	4603      	mov	r3, r0
 800622c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800622e:	e005      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	75fb      	strb	r3, [r7, #23]
      break;
 8006234:	e002      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006236:	bf00      	nop
 8006238:	e000      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800623a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800623c:	7dfb      	ldrb	r3, [r7, #23]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d109      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006242:	4b55      	ldr	r3, [pc, #340]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006246:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624e:	4952      	ldr	r1, [pc, #328]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006250:	4313      	orrs	r3, r2
 8006252:	650b      	str	r3, [r1, #80]	; 0x50
 8006254:	e001      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006256:	7dfb      	ldrb	r3, [r7, #23]
 8006258:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006262:	2b00      	cmp	r3, #0
 8006264:	d049      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800626c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006270:	d030      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006272:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006276:	d82a      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006278:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800627c:	d02c      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800627e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006282:	d824      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006288:	d018      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x218>
 800628a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800628e:	d81e      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006298:	d007      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800629a:	e018      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800629c:	4b3e      	ldr	r3, [pc, #248]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800629e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a0:	4a3d      	ldr	r2, [pc, #244]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062a8:	e017      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	3304      	adds	r3, #4
 80062ae:	2100      	movs	r1, #0
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 f8f5 	bl	80074a0 <RCCEx_PLL2_Config>
 80062b6:	4603      	mov	r3, r0
 80062b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80062ba:	e00e      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3324      	adds	r3, #36	; 0x24
 80062c0:	2100      	movs	r1, #0
 80062c2:	4618      	mov	r0, r3
 80062c4:	f001 f99e 	bl	8007604 <RCCEx_PLL3_Config>
 80062c8:	4603      	mov	r3, r0
 80062ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062cc:	e005      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	75fb      	strb	r3, [r7, #23]
      break;
 80062d2:	e002      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80062d4:	bf00      	nop
 80062d6:	e000      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80062d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062da:	7dfb      	ldrb	r3, [r7, #23]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80062e0:	4b2d      	ldr	r3, [pc, #180]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062ee:	492a      	ldr	r1, [pc, #168]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	658b      	str	r3, [r1, #88]	; 0x58
 80062f4:	e001      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006302:	2b00      	cmp	r3, #0
 8006304:	d04c      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800630c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006310:	d030      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006312:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006316:	d82a      	bhi.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006318:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800631c:	d02c      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800631e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006322:	d824      	bhi.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006324:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006328:	d018      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800632a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800632e:	d81e      	bhi.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006338:	d007      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800633a:	e018      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800633c:	4b16      	ldr	r3, [pc, #88]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	4a15      	ldr	r2, [pc, #84]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006346:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006348:	e017      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3304      	adds	r3, #4
 800634e:	2100      	movs	r1, #0
 8006350:	4618      	mov	r0, r3
 8006352:	f001 f8a5 	bl	80074a0 <RCCEx_PLL2_Config>
 8006356:	4603      	mov	r3, r0
 8006358:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800635a:	e00e      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3324      	adds	r3, #36	; 0x24
 8006360:	2100      	movs	r1, #0
 8006362:	4618      	mov	r0, r3
 8006364:	f001 f94e 	bl	8007604 <RCCEx_PLL3_Config>
 8006368:	4603      	mov	r3, r0
 800636a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800636c:	e005      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	75fb      	strb	r3, [r7, #23]
      break;
 8006372:	e002      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006374:	bf00      	nop
 8006376:	e000      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800637a:	7dfb      	ldrb	r3, [r7, #23]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10d      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006380:	4b05      	ldr	r3, [pc, #20]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006384:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800638e:	4902      	ldr	r1, [pc, #8]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006390:	4313      	orrs	r3, r2
 8006392:	658b      	str	r3, [r1, #88]	; 0x58
 8006394:	e004      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006396:	bf00      	nop
 8006398:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639c:	7dfb      	ldrb	r3, [r7, #23]
 800639e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d032      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b0:	2b30      	cmp	r3, #48	; 0x30
 80063b2:	d01c      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80063b4:	2b30      	cmp	r3, #48	; 0x30
 80063b6:	d817      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	d00c      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80063bc:	2b20      	cmp	r3, #32
 80063be:	d813      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d016      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80063c4:	2b10      	cmp	r3, #16
 80063c6:	d10f      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c8:	4baf      	ldr	r3, [pc, #700]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063cc:	4aae      	ldr	r2, [pc, #696]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80063d4:	e00e      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3304      	adds	r3, #4
 80063da:	2102      	movs	r1, #2
 80063dc:	4618      	mov	r0, r3
 80063de:	f001 f85f 	bl	80074a0 <RCCEx_PLL2_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80063e6:	e005      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	75fb      	strb	r3, [r7, #23]
      break;
 80063ec:	e002      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80063ee:	bf00      	nop
 80063f0:	e000      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80063f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063f4:	7dfb      	ldrb	r3, [r7, #23]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d109      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80063fa:	4ba3      	ldr	r3, [pc, #652]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80063fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006406:	49a0      	ldr	r1, [pc, #640]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006408:	4313      	orrs	r3, r2
 800640a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800640c:	e001      	b.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640e:	7dfb      	ldrb	r3, [r7, #23]
 8006410:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d047      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006422:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006426:	d030      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800642c:	d82a      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800642e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006432:	d02c      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006434:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006438:	d824      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800643a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800643e:	d018      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006444:	d81e      	bhi.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800644a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800644e:	d007      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006450:	e018      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006452:	4b8d      	ldr	r3, [pc, #564]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	4a8c      	ldr	r2, [pc, #560]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800645c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800645e:	e017      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3304      	adds	r3, #4
 8006464:	2100      	movs	r1, #0
 8006466:	4618      	mov	r0, r3
 8006468:	f001 f81a 	bl	80074a0 <RCCEx_PLL2_Config>
 800646c:	4603      	mov	r3, r0
 800646e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006470:	e00e      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3324      	adds	r3, #36	; 0x24
 8006476:	2100      	movs	r1, #0
 8006478:	4618      	mov	r0, r3
 800647a:	f001 f8c3 	bl	8007604 <RCCEx_PLL3_Config>
 800647e:	4603      	mov	r3, r0
 8006480:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006482:	e005      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	75fb      	strb	r3, [r7, #23]
      break;
 8006488:	e002      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800648a:	bf00      	nop
 800648c:	e000      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800648e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006490:	7dfb      	ldrb	r3, [r7, #23]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d109      	bne.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006496:	4b7c      	ldr	r3, [pc, #496]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a2:	4979      	ldr	r1, [pc, #484]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80064a4:	4313      	orrs	r3, r2
 80064a6:	650b      	str	r3, [r1, #80]	; 0x50
 80064a8:	e001      	b.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
 80064ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d049      	beq.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064c2:	d02e      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80064c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064c8:	d828      	bhi.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80064ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064ce:	d02a      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80064d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064d4:	d822      	bhi.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80064d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064da:	d026      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80064dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064e0:	d81c      	bhi.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80064e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064e6:	d010      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x466>
 80064e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064ec:	d816      	bhi.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d01d      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80064f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f6:	d111      	bne.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3304      	adds	r3, #4
 80064fc:	2101      	movs	r1, #1
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 ffce 	bl	80074a0 <RCCEx_PLL2_Config>
 8006504:	4603      	mov	r3, r0
 8006506:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006508:	e012      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3324      	adds	r3, #36	; 0x24
 800650e:	2101      	movs	r1, #1
 8006510:	4618      	mov	r0, r3
 8006512:	f001 f877 	bl	8007604 <RCCEx_PLL3_Config>
 8006516:	4603      	mov	r3, r0
 8006518:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800651a:	e009      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	75fb      	strb	r3, [r7, #23]
      break;
 8006520:	e006      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006522:	bf00      	nop
 8006524:	e004      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006526:	bf00      	nop
 8006528:	e002      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800652a:	bf00      	nop
 800652c:	e000      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800652e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006530:	7dfb      	ldrb	r3, [r7, #23]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d109      	bne.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006536:	4b54      	ldr	r3, [pc, #336]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800653a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006542:	4951      	ldr	r1, [pc, #324]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006544:	4313      	orrs	r3, r2
 8006546:	650b      	str	r3, [r1, #80]	; 0x50
 8006548:	e001      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654a:	7dfb      	ldrb	r3, [r7, #23]
 800654c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d04b      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006564:	d02e      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006566:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800656a:	d828      	bhi.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800656c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006570:	d02a      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006576:	d822      	bhi.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006578:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800657c:	d026      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800657e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006582:	d81c      	bhi.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006588:	d010      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x508>
 800658a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800658e:	d816      	bhi.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01d      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006594:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006598:	d111      	bne.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	3304      	adds	r3, #4
 800659e:	2101      	movs	r1, #1
 80065a0:	4618      	mov	r0, r3
 80065a2:	f000 ff7d 	bl	80074a0 <RCCEx_PLL2_Config>
 80065a6:	4603      	mov	r3, r0
 80065a8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80065aa:	e012      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3324      	adds	r3, #36	; 0x24
 80065b0:	2101      	movs	r1, #1
 80065b2:	4618      	mov	r0, r3
 80065b4:	f001 f826 	bl	8007604 <RCCEx_PLL3_Config>
 80065b8:	4603      	mov	r3, r0
 80065ba:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80065bc:	e009      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	75fb      	strb	r3, [r7, #23]
      break;
 80065c2:	e006      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80065c4:	bf00      	nop
 80065c6:	e004      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80065c8:	bf00      	nop
 80065ca:	e002      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80065cc:	bf00      	nop
 80065ce:	e000      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80065d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d10a      	bne.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80065d8:	4b2b      	ldr	r3, [pc, #172]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065dc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80065e6:	4928      	ldr	r1, [pc, #160]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	658b      	str	r3, [r1, #88]	; 0x58
 80065ec:	e001      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d02f      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006606:	d00e      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800660c:	d814      	bhi.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800660e:	2b00      	cmp	r3, #0
 8006610:	d015      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006616:	d10f      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006618:	4b1b      	ldr	r3, [pc, #108]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	4a1a      	ldr	r2, [pc, #104]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800661e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006622:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006624:	e00c      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	3304      	adds	r3, #4
 800662a:	2101      	movs	r1, #1
 800662c:	4618      	mov	r0, r3
 800662e:	f000 ff37 	bl	80074a0 <RCCEx_PLL2_Config>
 8006632:	4603      	mov	r3, r0
 8006634:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006636:	e003      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	75fb      	strb	r3, [r7, #23]
      break;
 800663c:	e000      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800663e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006640:	7dfb      	ldrb	r3, [r7, #23]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d109      	bne.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006646:	4b10      	ldr	r3, [pc, #64]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800664a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006652:	490d      	ldr	r1, [pc, #52]	; (8006688 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006654:	4313      	orrs	r3, r2
 8006656:	650b      	str	r3, [r1, #80]	; 0x50
 8006658:	e001      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800665a:	7dfb      	ldrb	r3, [r7, #23]
 800665c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d033      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666e:	2b03      	cmp	r3, #3
 8006670:	d81c      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006672:	a201      	add	r2, pc, #4	; (adr r2, 8006678 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006678:	080066b3 	.word	0x080066b3
 800667c:	0800668d 	.word	0x0800668d
 8006680:	0800669b 	.word	0x0800669b
 8006684:	080066b3 	.word	0x080066b3
 8006688:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800668c:	4bb8      	ldr	r3, [pc, #736]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	4ab7      	ldr	r2, [pc, #732]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006696:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006698:	e00c      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	3304      	adds	r3, #4
 800669e:	2102      	movs	r1, #2
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 fefd 	bl	80074a0 <RCCEx_PLL2_Config>
 80066a6:	4603      	mov	r3, r0
 80066a8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80066aa:	e003      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	75fb      	strb	r3, [r7, #23]
      break;
 80066b0:	e000      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80066b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d109      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80066ba:	4bad      	ldr	r3, [pc, #692]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80066bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066be:	f023 0203 	bic.w	r2, r3, #3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c6:	49aa      	ldr	r1, [pc, #680]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80066cc:	e001      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 8086 	beq.w	80067ec <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066e0:	4ba4      	ldr	r3, [pc, #656]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4aa3      	ldr	r2, [pc, #652]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80066e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066ec:	f7fb fec6 	bl	800247c <HAL_GetTick>
 80066f0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066f2:	e009      	b.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066f4:	f7fb fec2 	bl	800247c <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b64      	cmp	r3, #100	; 0x64
 8006700:	d902      	bls.n	8006708 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	75fb      	strb	r3, [r7, #23]
        break;
 8006706:	e005      	b.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006708:	4b9a      	ldr	r3, [pc, #616]	; (8006974 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0ef      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006714:	7dfb      	ldrb	r3, [r7, #23]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d166      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800671a:	4b95      	ldr	r3, [pc, #596]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800671c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006724:	4053      	eors	r3, r2
 8006726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800672a:	2b00      	cmp	r3, #0
 800672c:	d013      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800672e:	4b90      	ldr	r3, [pc, #576]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006736:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006738:	4b8d      	ldr	r3, [pc, #564]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800673a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673c:	4a8c      	ldr	r2, [pc, #560]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800673e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006742:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006744:	4b8a      	ldr	r3, [pc, #552]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006748:	4a89      	ldr	r2, [pc, #548]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800674a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800674e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006750:	4a87      	ldr	r2, [pc, #540]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800675c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006760:	d115      	bne.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006762:	f7fb fe8b 	bl	800247c <HAL_GetTick>
 8006766:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006768:	e00b      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800676a:	f7fb fe87 	bl	800247c <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	f241 3288 	movw	r2, #5000	; 0x1388
 8006778:	4293      	cmp	r3, r2
 800677a:	d902      	bls.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800677c:	2303      	movs	r3, #3
 800677e:	75fb      	strb	r3, [r7, #23]
            break;
 8006780:	e005      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006782:	4b7b      	ldr	r3, [pc, #492]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d0ed      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800678e:	7dfb      	ldrb	r3, [r7, #23]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d126      	bne.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800679a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800679e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067a2:	d10d      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80067a4:	4b72      	ldr	r3, [pc, #456]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067b2:	0919      	lsrs	r1, r3, #4
 80067b4:	4b70      	ldr	r3, [pc, #448]	; (8006978 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80067b6:	400b      	ands	r3, r1
 80067b8:	496d      	ldr	r1, [pc, #436]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	610b      	str	r3, [r1, #16]
 80067be:	e005      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x728>
 80067c0:	4b6b      	ldr	r3, [pc, #428]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	4a6a      	ldr	r2, [pc, #424]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80067ca:	6113      	str	r3, [r2, #16]
 80067cc:	4b68      	ldr	r3, [pc, #416]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067da:	4965      	ldr	r1, [pc, #404]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	670b      	str	r3, [r1, #112]	; 0x70
 80067e0:	e004      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067e2:	7dfb      	ldrb	r3, [r7, #23]
 80067e4:	75bb      	strb	r3, [r7, #22]
 80067e6:	e001      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d07e      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067fc:	2b28      	cmp	r3, #40	; 0x28
 80067fe:	d867      	bhi.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006800:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006806:	bf00      	nop
 8006808:	080068d7 	.word	0x080068d7
 800680c:	080068d1 	.word	0x080068d1
 8006810:	080068d1 	.word	0x080068d1
 8006814:	080068d1 	.word	0x080068d1
 8006818:	080068d1 	.word	0x080068d1
 800681c:	080068d1 	.word	0x080068d1
 8006820:	080068d1 	.word	0x080068d1
 8006824:	080068d1 	.word	0x080068d1
 8006828:	080068ad 	.word	0x080068ad
 800682c:	080068d1 	.word	0x080068d1
 8006830:	080068d1 	.word	0x080068d1
 8006834:	080068d1 	.word	0x080068d1
 8006838:	080068d1 	.word	0x080068d1
 800683c:	080068d1 	.word	0x080068d1
 8006840:	080068d1 	.word	0x080068d1
 8006844:	080068d1 	.word	0x080068d1
 8006848:	080068bf 	.word	0x080068bf
 800684c:	080068d1 	.word	0x080068d1
 8006850:	080068d1 	.word	0x080068d1
 8006854:	080068d1 	.word	0x080068d1
 8006858:	080068d1 	.word	0x080068d1
 800685c:	080068d1 	.word	0x080068d1
 8006860:	080068d1 	.word	0x080068d1
 8006864:	080068d1 	.word	0x080068d1
 8006868:	080068d7 	.word	0x080068d7
 800686c:	080068d1 	.word	0x080068d1
 8006870:	080068d1 	.word	0x080068d1
 8006874:	080068d1 	.word	0x080068d1
 8006878:	080068d1 	.word	0x080068d1
 800687c:	080068d1 	.word	0x080068d1
 8006880:	080068d1 	.word	0x080068d1
 8006884:	080068d1 	.word	0x080068d1
 8006888:	080068d7 	.word	0x080068d7
 800688c:	080068d1 	.word	0x080068d1
 8006890:	080068d1 	.word	0x080068d1
 8006894:	080068d1 	.word	0x080068d1
 8006898:	080068d1 	.word	0x080068d1
 800689c:	080068d1 	.word	0x080068d1
 80068a0:	080068d1 	.word	0x080068d1
 80068a4:	080068d1 	.word	0x080068d1
 80068a8:	080068d7 	.word	0x080068d7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	3304      	adds	r3, #4
 80068b0:	2101      	movs	r1, #1
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fdf4 	bl	80074a0 <RCCEx_PLL2_Config>
 80068b8:	4603      	mov	r3, r0
 80068ba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80068bc:	e00c      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	3324      	adds	r3, #36	; 0x24
 80068c2:	2101      	movs	r1, #1
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 fe9d 	bl	8007604 <RCCEx_PLL3_Config>
 80068ca:	4603      	mov	r3, r0
 80068cc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80068ce:	e003      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	75fb      	strb	r3, [r7, #23]
      break;
 80068d4:	e000      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80068d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068d8:	7dfb      	ldrb	r3, [r7, #23]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d109      	bne.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068de:	4b24      	ldr	r3, [pc, #144]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ea:	4921      	ldr	r1, [pc, #132]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	654b      	str	r3, [r1, #84]	; 0x54
 80068f0:	e001      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
 80068f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d03e      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006906:	2b05      	cmp	r3, #5
 8006908:	d820      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800690a:	a201      	add	r2, pc, #4	; (adr r2, 8006910 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800690c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006910:	08006953 	.word	0x08006953
 8006914:	08006929 	.word	0x08006929
 8006918:	0800693b 	.word	0x0800693b
 800691c:	08006953 	.word	0x08006953
 8006920:	08006953 	.word	0x08006953
 8006924:	08006953 	.word	0x08006953
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3304      	adds	r3, #4
 800692c:	2101      	movs	r1, #1
 800692e:	4618      	mov	r0, r3
 8006930:	f000 fdb6 	bl	80074a0 <RCCEx_PLL2_Config>
 8006934:	4603      	mov	r3, r0
 8006936:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006938:	e00c      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3324      	adds	r3, #36	; 0x24
 800693e:	2101      	movs	r1, #1
 8006940:	4618      	mov	r0, r3
 8006942:	f000 fe5f 	bl	8007604 <RCCEx_PLL3_Config>
 8006946:	4603      	mov	r3, r0
 8006948:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800694a:	e003      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	75fb      	strb	r3, [r7, #23]
      break;
 8006950:	e000      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006954:	7dfb      	ldrb	r3, [r7, #23]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d110      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800695a:	4b05      	ldr	r3, [pc, #20]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800695c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695e:	f023 0207 	bic.w	r2, r3, #7
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006966:	4902      	ldr	r1, [pc, #8]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006968:	4313      	orrs	r3, r2
 800696a:	654b      	str	r3, [r1, #84]	; 0x54
 800696c:	e008      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800696e:	bf00      	nop
 8006970:	58024400 	.word	0x58024400
 8006974:	58024800 	.word	0x58024800
 8006978:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697c:	7dfb      	ldrb	r3, [r7, #23]
 800697e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	d039      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006992:	2b05      	cmp	r3, #5
 8006994:	d820      	bhi.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006996:	a201      	add	r2, pc, #4	; (adr r2, 800699c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699c:	080069df 	.word	0x080069df
 80069a0:	080069b5 	.word	0x080069b5
 80069a4:	080069c7 	.word	0x080069c7
 80069a8:	080069df 	.word	0x080069df
 80069ac:	080069df 	.word	0x080069df
 80069b0:	080069df 	.word	0x080069df
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3304      	adds	r3, #4
 80069b8:	2101      	movs	r1, #1
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fd70 	bl	80074a0 <RCCEx_PLL2_Config>
 80069c0:	4603      	mov	r3, r0
 80069c2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80069c4:	e00c      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3324      	adds	r3, #36	; 0x24
 80069ca:	2101      	movs	r1, #1
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fe19 	bl	8007604 <RCCEx_PLL3_Config>
 80069d2:	4603      	mov	r3, r0
 80069d4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80069d6:	e003      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	75fb      	strb	r3, [r7, #23]
      break;
 80069dc:	e000      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80069de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10a      	bne.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069e6:	4bb7      	ldr	r3, [pc, #732]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80069e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ea:	f023 0207 	bic.w	r2, r3, #7
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f4:	49b3      	ldr	r1, [pc, #716]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	658b      	str	r3, [r1, #88]	; 0x58
 80069fa:	e001      	b.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
 80069fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0320 	and.w	r3, r3, #32
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d04b      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a16:	d02e      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a1c:	d828      	bhi.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a22:	d02a      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a28:	d822      	bhi.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a2e:	d026      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006a30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a34:	d81c      	bhi.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a3a:	d010      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a40:	d816      	bhi.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d01d      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006a46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a4a:	d111      	bne.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3304      	adds	r3, #4
 8006a50:	2100      	movs	r1, #0
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fd24 	bl	80074a0 <RCCEx_PLL2_Config>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a5c:	e012      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3324      	adds	r3, #36	; 0x24
 8006a62:	2102      	movs	r1, #2
 8006a64:	4618      	mov	r0, r3
 8006a66:	f000 fdcd 	bl	8007604 <RCCEx_PLL3_Config>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006a6e:	e009      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	75fb      	strb	r3, [r7, #23]
      break;
 8006a74:	e006      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006a76:	bf00      	nop
 8006a78:	e004      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006a7a:	bf00      	nop
 8006a7c:	e002      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006a7e:	bf00      	nop
 8006a80:	e000      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006a82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a84:	7dfb      	ldrb	r3, [r7, #23]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10a      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a8a:	4b8e      	ldr	r3, [pc, #568]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a98:	498a      	ldr	r1, [pc, #552]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	654b      	str	r3, [r1, #84]	; 0x54
 8006a9e:	e001      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa0:	7dfb      	ldrb	r3, [r7, #23]
 8006aa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d04b      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ab6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006aba:	d02e      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006abc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ac0:	d828      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac6:	d02a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006acc:	d822      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006ace:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ad2:	d026      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006ad4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ad8:	d81c      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ade:	d010      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ae4:	d816      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d01d      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aee:	d111      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3304      	adds	r3, #4
 8006af4:	2100      	movs	r1, #0
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fcd2 	bl	80074a0 <RCCEx_PLL2_Config>
 8006afc:	4603      	mov	r3, r0
 8006afe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b00:	e012      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3324      	adds	r3, #36	; 0x24
 8006b06:	2102      	movs	r1, #2
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 fd7b 	bl	8007604 <RCCEx_PLL3_Config>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006b12:	e009      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	75fb      	strb	r3, [r7, #23]
      break;
 8006b18:	e006      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b1a:	bf00      	nop
 8006b1c:	e004      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b1e:	bf00      	nop
 8006b20:	e002      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b22:	bf00      	nop
 8006b24:	e000      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006b26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b28:	7dfb      	ldrb	r3, [r7, #23]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10a      	bne.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b2e:	4b65      	ldr	r3, [pc, #404]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b32:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b3c:	4961      	ldr	r1, [pc, #388]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	658b      	str	r3, [r1, #88]	; 0x58
 8006b42:	e001      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b44:	7dfb      	ldrb	r3, [r7, #23]
 8006b46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d04b      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b5a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b5e:	d02e      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006b60:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006b64:	d828      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b6a:	d02a      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b70:	d822      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006b72:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b76:	d026      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006b78:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006b7c:	d81c      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006b7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b82:	d010      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b88:	d816      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d01d      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b92:	d111      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3304      	adds	r3, #4
 8006b98:	2100      	movs	r1, #0
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fc80 	bl	80074a0 <RCCEx_PLL2_Config>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ba4:	e012      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	3324      	adds	r3, #36	; 0x24
 8006baa:	2102      	movs	r1, #2
 8006bac:	4618      	mov	r0, r3
 8006bae:	f000 fd29 	bl	8007604 <RCCEx_PLL3_Config>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006bb6:	e009      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	75fb      	strb	r3, [r7, #23]
      break;
 8006bbc:	e006      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006bbe:	bf00      	nop
 8006bc0:	e004      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006bc2:	bf00      	nop
 8006bc4:	e002      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006bc6:	bf00      	nop
 8006bc8:	e000      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006bca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10a      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006bd2:	4b3c      	ldr	r3, [pc, #240]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006be0:	4938      	ldr	r1, [pc, #224]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	658b      	str	r3, [r1, #88]	; 0x58
 8006be6:	e001      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01a      	beq.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c02:	d10a      	bne.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	3324      	adds	r3, #36	; 0x24
 8006c08:	2102      	movs	r1, #2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fcfa 	bl	8007604 <RCCEx_PLL3_Config>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006c1a:	4b2a      	ldr	r3, [pc, #168]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c28:	4926      	ldr	r1, [pc, #152]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0310 	and.w	r3, r3, #16
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d01a      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c44:	d10a      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	3324      	adds	r3, #36	; 0x24
 8006c4a:	2102      	movs	r1, #2
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f000 fcd9 	bl	8007604 <RCCEx_PLL3_Config>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c5c:	4b19      	ldr	r3, [pc, #100]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c6a:	4916      	ldr	r1, [pc, #88]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d036      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c86:	d01f      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006c88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c8c:	d817      	bhi.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c96:	d009      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006c98:	e011      	b.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 fbfd 	bl	80074a0 <RCCEx_PLL2_Config>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006caa:	e00e      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	3324      	adds	r3, #36	; 0x24
 8006cb0:	2102      	movs	r1, #2
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fca6 	bl	8007604 <RCCEx_PLL3_Config>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006cbc:	e005      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc2:	e002      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006cc4:	58024400 	.word	0x58024400
      break;
 8006cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cd0:	4b93      	ldr	r3, [pc, #588]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006cde:	4990      	ldr	r1, [pc, #576]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	658b      	str	r3, [r1, #88]	; 0x58
 8006ce4:	e001      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
 8006ce8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d033      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d00:	d01c      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006d02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d06:	d816      	bhi.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006d08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d0c:	d003      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006d0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d12:	d007      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006d14:	e00f      	b.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d16:	4b82      	ldr	r3, [pc, #520]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1a:	4a81      	ldr	r2, [pc, #516]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d22:	e00c      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3324      	adds	r3, #36	; 0x24
 8006d28:	2101      	movs	r1, #1
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fc6a 	bl	8007604 <RCCEx_PLL3_Config>
 8006d30:	4603      	mov	r3, r0
 8006d32:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006d34:	e003      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	75fb      	strb	r3, [r7, #23]
      break;
 8006d3a:	e000      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d3e:	7dfb      	ldrb	r3, [r7, #23]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d44:	4b76      	ldr	r3, [pc, #472]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d52:	4973      	ldr	r1, [pc, #460]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	654b      	str	r3, [r1, #84]	; 0x54
 8006d58:	e001      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
 8006d5c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d029      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d76:	d007      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006d78:	e00f      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d7a:	4b69      	ldr	r3, [pc, #420]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7e:	4a68      	ldr	r2, [pc, #416]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d86:	e00b      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	2102      	movs	r1, #2
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fb86 	bl	80074a0 <RCCEx_PLL2_Config>
 8006d94:	4603      	mov	r3, r0
 8006d96:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d98:	e002      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006da0:	7dfb      	ldrb	r3, [r7, #23]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d109      	bne.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006da6:	4b5e      	ldr	r3, [pc, #376]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006daa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db2:	495b      	ldr	r1, [pc, #364]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006db8:	e001      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
 8006dbc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00a      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3324      	adds	r3, #36	; 0x24
 8006dce:	2102      	movs	r1, #2
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 fc17 	bl	8007604 <RCCEx_PLL3_Config>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d030      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006df0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006df4:	d017      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dfa:	d811      	bhi.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e00:	d013      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e06:	d80b      	bhi.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d010      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e10:	d106      	bne.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e12:	4b43      	ldr	r3, [pc, #268]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e16:	4a42      	ldr	r2, [pc, #264]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006e1e:	e007      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	75fb      	strb	r3, [r7, #23]
      break;
 8006e24:	e004      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006e26:	bf00      	nop
 8006e28:	e002      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006e2a:	bf00      	nop
 8006e2c:	e000      	b.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006e2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d109      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e36:	4b3a      	ldr	r3, [pc, #232]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e42:	4937      	ldr	r1, [pc, #220]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	654b      	str	r3, [r1, #84]	; 0x54
 8006e48:	e001      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4a:	7dfb      	ldrb	r3, [r7, #23]
 8006e4c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d008      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006e5a:	4b31      	ldr	r3, [pc, #196]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e66:	492e      	ldr	r1, [pc, #184]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d009      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006e78:	4b29      	ldr	r3, [pc, #164]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006e86:	4926      	ldr	r1, [pc, #152]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d008      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e98:	4b21      	ldr	r3, [pc, #132]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e9c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ea4:	491e      	ldr	r1, [pc, #120]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00d      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006eb6:	4b1a      	ldr	r3, [pc, #104]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	4a19      	ldr	r2, [pc, #100]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ebc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ec0:	6113      	str	r3, [r2, #16]
 8006ec2:	4b17      	ldr	r3, [pc, #92]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ec4:	691a      	ldr	r2, [r3, #16]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006ecc:	4914      	ldr	r1, [pc, #80]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	da08      	bge.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006eda:	4b11      	ldr	r3, [pc, #68]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ede:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee6:	490e      	ldr	r1, [pc, #56]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d009      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006ef8:	4b09      	ldr	r3, [pc, #36]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006efc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f06:	4906      	ldr	r1, [pc, #24]	; (8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006f0c:	7dbb      	ldrb	r3, [r7, #22]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	e000      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	58024400 	.word	0x58024400

08006f24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f28:	f7ff f860 	bl	8005fec <HAL_RCC_GetHCLKFreq>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	091b      	lsrs	r3, r3, #4
 8006f34:	f003 0307 	and.w	r3, r3, #7
 8006f38:	4904      	ldr	r1, [pc, #16]	; (8006f4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f3a:	5ccb      	ldrb	r3, [r1, r3]
 8006f3c:	f003 031f 	and.w	r3, r3, #31
 8006f40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	58024400 	.word	0x58024400
 8006f4c:	0800a7c4 	.word	0x0800a7c4

08006f50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b089      	sub	sp, #36	; 0x24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f58:	4ba1      	ldr	r3, [pc, #644]	; (80071e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	f003 0303 	and.w	r3, r3, #3
 8006f60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006f62:	4b9f      	ldr	r3, [pc, #636]	; (80071e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f66:	0b1b      	lsrs	r3, r3, #12
 8006f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f6e:	4b9c      	ldr	r3, [pc, #624]	; (80071e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f72:	091b      	lsrs	r3, r3, #4
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006f7a:	4b99      	ldr	r3, [pc, #612]	; (80071e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7e:	08db      	lsrs	r3, r3, #3
 8006f80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	fb02 f303 	mul.w	r3, r2, r3
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f000 8111 	beq.w	80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	f000 8083 	beq.w	80070ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	f200 80a1 	bhi.w	80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d056      	beq.n	8007068 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006fba:	e099      	b.n	80070f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fbc:	4b88      	ldr	r3, [pc, #544]	; (80071e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0320 	and.w	r3, r3, #32
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d02d      	beq.n	8007024 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fc8:	4b85      	ldr	r3, [pc, #532]	; (80071e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	08db      	lsrs	r3, r3, #3
 8006fce:	f003 0303 	and.w	r3, r3, #3
 8006fd2:	4a84      	ldr	r2, [pc, #528]	; (80071e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	ee07 3a90 	vmov	s15, r3
 8006fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	ee07 3a90 	vmov	s15, r3
 8006fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ff2:	4b7b      	ldr	r3, [pc, #492]	; (80071e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007002:	ed97 6a03 	vldr	s12, [r7, #12]
 8007006:	eddf 5a78 	vldr	s11, [pc, #480]	; 80071e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800700a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800701a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007022:	e087      	b.n	8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	ee07 3a90 	vmov	s15, r3
 800702a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007036:	4b6a      	ldr	r3, [pc, #424]	; (80071e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703e:	ee07 3a90 	vmov	s15, r3
 8007042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007046:	ed97 6a03 	vldr	s12, [r7, #12]
 800704a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80071e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800704e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800705a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800705e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007062:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007066:	e065      	b.n	8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007072:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80071f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800707a:	4b59      	ldr	r3, [pc, #356]	; (80071e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800707c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007082:	ee07 3a90 	vmov	s15, r3
 8007086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708a:	ed97 6a03 	vldr	s12, [r7, #12]
 800708e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80071e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800709a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800709e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070aa:	e043      	b.n	8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80071f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80070ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070be:	4b48      	ldr	r3, [pc, #288]	; (80071e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80070d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80071e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070ee:	e021      	b.n	8007134 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80071f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007102:	4b37      	ldr	r3, [pc, #220]	; (80071e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007112:	ed97 6a03 	vldr	s12, [r7, #12]
 8007116:	eddf 5a34 	vldr	s11, [pc, #208]	; 80071e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800711a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800711e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800712a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800712e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007132:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007134:	4b2a      	ldr	r3, [pc, #168]	; (80071e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007138:	0a5b      	lsrs	r3, r3, #9
 800713a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007146:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800714a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800714e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007152:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800715a:	ee17 2a90 	vmov	r2, s15
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007162:	4b1f      	ldr	r3, [pc, #124]	; (80071e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	0c1b      	lsrs	r3, r3, #16
 8007168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800716c:	ee07 3a90 	vmov	s15, r3
 8007170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007174:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007178:	ee37 7a87 	vadd.f32	s14, s15, s14
 800717c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007188:	ee17 2a90 	vmov	r2, s15
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007190:	4b13      	ldr	r3, [pc, #76]	; (80071e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	0e1b      	lsrs	r3, r3, #24
 8007196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80071ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071b6:	ee17 2a90 	vmov	r2, s15
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80071be:	e008      	b.n	80071d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	609a      	str	r2, [r3, #8]
}
 80071d2:	bf00      	nop
 80071d4:	3724      	adds	r7, #36	; 0x24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
 80071de:	bf00      	nop
 80071e0:	58024400 	.word	0x58024400
 80071e4:	03d09000 	.word	0x03d09000
 80071e8:	46000000 	.word	0x46000000
 80071ec:	4c742400 	.word	0x4c742400
 80071f0:	4a742400 	.word	0x4a742400
 80071f4:	4c371b00 	.word	0x4c371b00

080071f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b089      	sub	sp, #36	; 0x24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007200:	4ba1      	ldr	r3, [pc, #644]	; (8007488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007204:	f003 0303 	and.w	r3, r3, #3
 8007208:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800720a:	4b9f      	ldr	r3, [pc, #636]	; (8007488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800720c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720e:	0d1b      	lsrs	r3, r3, #20
 8007210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007214:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007216:	4b9c      	ldr	r3, [pc, #624]	; (8007488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721a:	0a1b      	lsrs	r3, r3, #8
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007222:	4b99      	ldr	r3, [pc, #612]	; (8007488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007226:	08db      	lsrs	r3, r3, #3
 8007228:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	fb02 f303 	mul.w	r3, r2, r3
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800723a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 8111 	beq.w	8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	2b02      	cmp	r3, #2
 800724a:	f000 8083 	beq.w	8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	2b02      	cmp	r3, #2
 8007252:	f200 80a1 	bhi.w	8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d056      	beq.n	8007310 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007262:	e099      	b.n	8007398 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007264:	4b88      	ldr	r3, [pc, #544]	; (8007488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0320 	and.w	r3, r3, #32
 800726c:	2b00      	cmp	r3, #0
 800726e:	d02d      	beq.n	80072cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007270:	4b85      	ldr	r3, [pc, #532]	; (8007488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	08db      	lsrs	r3, r3, #3
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	4a84      	ldr	r2, [pc, #528]	; (800748c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800727c:	fa22 f303 	lsr.w	r3, r2, r3
 8007280:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	ee07 3a90 	vmov	s15, r3
 8007288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	ee07 3a90 	vmov	s15, r3
 8007292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800729a:	4b7b      	ldr	r3, [pc, #492]	; (8007488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007490 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80072ca:	e087      	b.n	80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	ee07 3a90 	vmov	s15, r3
 80072d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80072da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072de:	4b6a      	ldr	r3, [pc, #424]	; (8007488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072e6:	ee07 3a90 	vmov	s15, r3
 80072ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80072f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007490 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800730a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800730e:	e065      	b.n	80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800731a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007498 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800731e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007322:	4b59      	ldr	r3, [pc, #356]	; (8007488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007332:	ed97 6a03 	vldr	s12, [r7, #12]
 8007336:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007490 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800733a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800733e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007342:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800734a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800734e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007352:	e043      	b.n	80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800749c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007366:	4b48      	ldr	r3, [pc, #288]	; (8007488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007376:	ed97 6a03 	vldr	s12, [r7, #12]
 800737a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007490 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800737e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800738a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800738e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007392:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007396:	e021      	b.n	80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007498 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073aa:	4b37      	ldr	r3, [pc, #220]	; (8007488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80073be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007490 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80073dc:	4b2a      	ldr	r3, [pc, #168]	; (8007488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e0:	0a5b      	lsrs	r3, r3, #9
 80073e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80073fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007402:	ee17 2a90 	vmov	r2, s15
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800740a:	4b1f      	ldr	r3, [pc, #124]	; (8007488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	0c1b      	lsrs	r3, r3, #16
 8007410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007414:	ee07 3a90 	vmov	s15, r3
 8007418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007420:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007424:	edd7 6a07 	vldr	s13, [r7, #28]
 8007428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800742c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007430:	ee17 2a90 	vmov	r2, s15
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007438:	4b13      	ldr	r3, [pc, #76]	; (8007488 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800743a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743c:	0e1b      	lsrs	r3, r3, #24
 800743e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007442:	ee07 3a90 	vmov	s15, r3
 8007446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800744a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800744e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007452:	edd7 6a07 	vldr	s13, [r7, #28]
 8007456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800745a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800745e:	ee17 2a90 	vmov	r2, s15
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007466:	e008      	b.n	800747a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	609a      	str	r2, [r3, #8]
}
 800747a:	bf00      	nop
 800747c:	3724      	adds	r7, #36	; 0x24
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	58024400 	.word	0x58024400
 800748c:	03d09000 	.word	0x03d09000
 8007490:	46000000 	.word	0x46000000
 8007494:	4c742400 	.word	0x4c742400
 8007498:	4a742400 	.word	0x4a742400
 800749c:	4c371b00 	.word	0x4c371b00

080074a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80074ae:	4b53      	ldr	r3, [pc, #332]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 80074b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d101      	bne.n	80074be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e099      	b.n	80075f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80074be:	4b4f      	ldr	r3, [pc, #316]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a4e      	ldr	r2, [pc, #312]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 80074c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ca:	f7fa ffd7 	bl	800247c <HAL_GetTick>
 80074ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074d0:	e008      	b.n	80074e4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80074d2:	f7fa ffd3 	bl	800247c <HAL_GetTick>
 80074d6:	4602      	mov	r2, r0
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	2b02      	cmp	r3, #2
 80074de:	d901      	bls.n	80074e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e086      	b.n	80075f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074e4:	4b45      	ldr	r3, [pc, #276]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1f0      	bne.n	80074d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80074f0:	4b42      	ldr	r3, [pc, #264]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 80074f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	031b      	lsls	r3, r3, #12
 80074fe:	493f      	ldr	r1, [pc, #252]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 8007500:	4313      	orrs	r3, r2
 8007502:	628b      	str	r3, [r1, #40]	; 0x28
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	3b01      	subs	r3, #1
 800750a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	3b01      	subs	r3, #1
 8007514:	025b      	lsls	r3, r3, #9
 8007516:	b29b      	uxth	r3, r3
 8007518:	431a      	orrs	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	3b01      	subs	r3, #1
 8007520:	041b      	lsls	r3, r3, #16
 8007522:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007526:	431a      	orrs	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	3b01      	subs	r3, #1
 800752e:	061b      	lsls	r3, r3, #24
 8007530:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007534:	4931      	ldr	r1, [pc, #196]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 8007536:	4313      	orrs	r3, r2
 8007538:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800753a:	4b30      	ldr	r3, [pc, #192]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	492d      	ldr	r1, [pc, #180]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 8007548:	4313      	orrs	r3, r2
 800754a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800754c:	4b2b      	ldr	r3, [pc, #172]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007550:	f023 0220 	bic.w	r2, r3, #32
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	4928      	ldr	r1, [pc, #160]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 800755a:	4313      	orrs	r3, r2
 800755c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800755e:	4b27      	ldr	r3, [pc, #156]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 8007560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007562:	4a26      	ldr	r2, [pc, #152]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 8007564:	f023 0310 	bic.w	r3, r3, #16
 8007568:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800756a:	4b24      	ldr	r3, [pc, #144]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 800756c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800756e:	4b24      	ldr	r3, [pc, #144]	; (8007600 <RCCEx_PLL2_Config+0x160>)
 8007570:	4013      	ands	r3, r2
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	69d2      	ldr	r2, [r2, #28]
 8007576:	00d2      	lsls	r2, r2, #3
 8007578:	4920      	ldr	r1, [pc, #128]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 800757a:	4313      	orrs	r3, r2
 800757c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800757e:	4b1f      	ldr	r3, [pc, #124]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 8007580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007582:	4a1e      	ldr	r2, [pc, #120]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 8007584:	f043 0310 	orr.w	r3, r3, #16
 8007588:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d106      	bne.n	800759e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007590:	4b1a      	ldr	r3, [pc, #104]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 8007592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007594:	4a19      	ldr	r2, [pc, #100]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 8007596:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800759a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800759c:	e00f      	b.n	80075be <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d106      	bne.n	80075b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80075a4:	4b15      	ldr	r3, [pc, #84]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	4a14      	ldr	r2, [pc, #80]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 80075aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075b0:	e005      	b.n	80075be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80075b2:	4b12      	ldr	r3, [pc, #72]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 80075b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b6:	4a11      	ldr	r2, [pc, #68]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 80075b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80075bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80075be:	4b0f      	ldr	r3, [pc, #60]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a0e      	ldr	r2, [pc, #56]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 80075c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ca:	f7fa ff57 	bl	800247c <HAL_GetTick>
 80075ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075d0:	e008      	b.n	80075e4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80075d2:	f7fa ff53 	bl	800247c <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d901      	bls.n	80075e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e006      	b.n	80075f2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075e4:	4b05      	ldr	r3, [pc, #20]	; (80075fc <RCCEx_PLL2_Config+0x15c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d0f0      	beq.n	80075d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	58024400 	.word	0x58024400
 8007600:	ffff0007 	.word	0xffff0007

08007604 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800760e:	2300      	movs	r3, #0
 8007610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007612:	4b53      	ldr	r3, [pc, #332]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 8007614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	2b03      	cmp	r3, #3
 800761c:	d101      	bne.n	8007622 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e099      	b.n	8007756 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007622:	4b4f      	ldr	r3, [pc, #316]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a4e      	ldr	r2, [pc, #312]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 8007628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800762c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800762e:	f7fa ff25 	bl	800247c <HAL_GetTick>
 8007632:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007634:	e008      	b.n	8007648 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007636:	f7fa ff21 	bl	800247c <HAL_GetTick>
 800763a:	4602      	mov	r2, r0
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	1ad3      	subs	r3, r2, r3
 8007640:	2b02      	cmp	r3, #2
 8007642:	d901      	bls.n	8007648 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e086      	b.n	8007756 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007648:	4b45      	ldr	r3, [pc, #276]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1f0      	bne.n	8007636 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007654:	4b42      	ldr	r3, [pc, #264]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 8007656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007658:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	051b      	lsls	r3, r3, #20
 8007662:	493f      	ldr	r1, [pc, #252]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 8007664:	4313      	orrs	r3, r2
 8007666:	628b      	str	r3, [r1, #40]	; 0x28
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	3b01      	subs	r3, #1
 800766e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	3b01      	subs	r3, #1
 8007678:	025b      	lsls	r3, r3, #9
 800767a:	b29b      	uxth	r3, r3
 800767c:	431a      	orrs	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	3b01      	subs	r3, #1
 8007684:	041b      	lsls	r3, r3, #16
 8007686:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800768a:	431a      	orrs	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	3b01      	subs	r3, #1
 8007692:	061b      	lsls	r3, r3, #24
 8007694:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007698:	4931      	ldr	r1, [pc, #196]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 800769a:	4313      	orrs	r3, r2
 800769c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800769e:	4b30      	ldr	r3, [pc, #192]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 80076a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	492d      	ldr	r1, [pc, #180]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80076b0:	4b2b      	ldr	r3, [pc, #172]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	4928      	ldr	r1, [pc, #160]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80076c2:	4b27      	ldr	r3, [pc, #156]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 80076c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c6:	4a26      	ldr	r2, [pc, #152]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 80076c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076ce:	4b24      	ldr	r3, [pc, #144]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 80076d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076d2:	4b24      	ldr	r3, [pc, #144]	; (8007764 <RCCEx_PLL3_Config+0x160>)
 80076d4:	4013      	ands	r3, r2
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	69d2      	ldr	r2, [r2, #28]
 80076da:	00d2      	lsls	r2, r2, #3
 80076dc:	4920      	ldr	r1, [pc, #128]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80076e2:	4b1f      	ldr	r3, [pc, #124]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	4a1e      	ldr	r2, [pc, #120]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 80076e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d106      	bne.n	8007702 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80076f4:	4b1a      	ldr	r3, [pc, #104]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	4a19      	ldr	r2, [pc, #100]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 80076fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80076fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007700:	e00f      	b.n	8007722 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d106      	bne.n	8007716 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007708:	4b15      	ldr	r3, [pc, #84]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 800770a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770c:	4a14      	ldr	r2, [pc, #80]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 800770e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007712:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007714:	e005      	b.n	8007722 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007716:	4b12      	ldr	r3, [pc, #72]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 8007718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771a:	4a11      	ldr	r2, [pc, #68]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 800771c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007720:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007722:	4b0f      	ldr	r3, [pc, #60]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a0e      	ldr	r2, [pc, #56]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 8007728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800772c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800772e:	f7fa fea5 	bl	800247c <HAL_GetTick>
 8007732:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007734:	e008      	b.n	8007748 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007736:	f7fa fea1 	bl	800247c <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	2b02      	cmp	r3, #2
 8007742:	d901      	bls.n	8007748 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e006      	b.n	8007756 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007748:	4b05      	ldr	r3, [pc, #20]	; (8007760 <RCCEx_PLL3_Config+0x15c>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0f0      	beq.n	8007736 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007754:	7bfb      	ldrb	r3, [r7, #15]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	58024400 	.word	0x58024400
 8007764:	ffff0007 	.word	0xffff0007

08007768 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007770:	2300      	movs	r3, #0
 8007772:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e0eb      	b.n	8007956 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a75      	ldr	r2, [pc, #468]	; (8007960 <HAL_SPI_Init+0x1f8>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d00f      	beq.n	80077ae <HAL_SPI_Init+0x46>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a74      	ldr	r2, [pc, #464]	; (8007964 <HAL_SPI_Init+0x1fc>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d00a      	beq.n	80077ae <HAL_SPI_Init+0x46>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a72      	ldr	r2, [pc, #456]	; (8007968 <HAL_SPI_Init+0x200>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d005      	beq.n	80077ae <HAL_SPI_Init+0x46>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	2b0f      	cmp	r3, #15
 80077a8:	d901      	bls.n	80077ae <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e0d3      	b.n	8007956 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f8dc 	bl	800796c <SPI_GetPacketSize>
 80077b4:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a69      	ldr	r2, [pc, #420]	; (8007960 <HAL_SPI_Init+0x1f8>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d00c      	beq.n	80077da <HAL_SPI_Init+0x72>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a67      	ldr	r2, [pc, #412]	; (8007964 <HAL_SPI_Init+0x1fc>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d007      	beq.n	80077da <HAL_SPI_Init+0x72>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a66      	ldr	r2, [pc, #408]	; (8007968 <HAL_SPI_Init+0x200>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d002      	beq.n	80077da <HAL_SPI_Init+0x72>
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b08      	cmp	r3, #8
 80077d8:	d811      	bhi.n	80077fe <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80077de:	4a60      	ldr	r2, [pc, #384]	; (8007960 <HAL_SPI_Init+0x1f8>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d009      	beq.n	80077f8 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a5e      	ldr	r2, [pc, #376]	; (8007964 <HAL_SPI_Init+0x1fc>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d004      	beq.n	80077f8 <HAL_SPI_Init+0x90>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a5d      	ldr	r2, [pc, #372]	; (8007968 <HAL_SPI_Init+0x200>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d104      	bne.n	8007802 <HAL_SPI_Init+0x9a>
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2b10      	cmp	r3, #16
 80077fc:	d901      	bls.n	8007802 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e0a9      	b.n	8007956 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d106      	bne.n	800781c <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7fa f8c8 	bl	80019ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f022 0201 	bic.w	r2, r2, #1
 8007832:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800783c:	d119      	bne.n	8007872 <HAL_SPI_Init+0x10a>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007846:	d103      	bne.n	8007850 <HAL_SPI_Init+0xe8>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784c:	2b00      	cmp	r3, #0
 800784e:	d008      	beq.n	8007862 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10c      	bne.n	8007872 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007860:	d107      	bne.n	8007872 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007870:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69da      	ldr	r2, [r3, #28]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787a:	431a      	orrs	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	431a      	orrs	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007884:	ea42 0103 	orr.w	r1, r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	431a      	orrs	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	431a      	orrs	r2, r3
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	431a      	orrs	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	431a      	orrs	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	431a      	orrs	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	431a      	orrs	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	431a      	orrs	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078c6:	431a      	orrs	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	431a      	orrs	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078d2:	ea42 0103 	orr.w	r1, r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d113      	bne.n	8007912 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007910:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0201 	bic.w	r2, r2, #1
 8007920:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00a      	beq.n	8007944 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	40013000 	.word	0x40013000
 8007964:	40003800 	.word	0x40003800
 8007968:	40003c00 	.word	0x40003c00

0800796c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007978:	095b      	lsrs	r3, r3, #5
 800797a:	3301      	adds	r3, #1
 800797c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	3301      	adds	r3, #1
 8007984:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	3307      	adds	r3, #7
 800798a:	08db      	lsrs	r3, r3, #3
 800798c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	fb02 f303 	mul.w	r3, r2, r3
}
 8007996:	4618      	mov	r0, r3
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b082      	sub	sp, #8
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e049      	b.n	8007a48 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d106      	bne.n	80079ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7fa f855 	bl	8001a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2202      	movs	r2, #2
 80079d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	3304      	adds	r3, #4
 80079de:	4619      	mov	r1, r3
 80079e0:	4610      	mov	r0, r2
 80079e2:	f000 fdaf 	bl	8008544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68da      	ldr	r2, [r3, #12]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0201 	bic.w	r2, r2, #1
 8007a66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6a1a      	ldr	r2, [r3, #32]
 8007a6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a72:	4013      	ands	r3, r2
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d10f      	bne.n	8007a98 <HAL_TIM_Base_Stop_IT+0x48>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6a1a      	ldr	r2, [r3, #32]
 8007a7e:	f240 4344 	movw	r3, #1092	; 0x444
 8007a82:	4013      	ands	r3, r2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d107      	bne.n	8007a98 <HAL_TIM_Base_Stop_IT+0x48>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f022 0201 	bic.w	r2, r2, #1
 8007a96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b082      	sub	sp, #8
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e049      	b.n	8007b54 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d106      	bne.n	8007ada <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f841 	bl	8007b5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2202      	movs	r2, #2
 8007ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	4619      	mov	r1, r3
 8007aec:	4610      	mov	r0, r2
 8007aee:	f000 fd29 	bl	8008544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3708      	adds	r7, #8
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d109      	bne.n	8007b94 <HAL_TIM_PWM_Start+0x24>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	bf14      	ite	ne
 8007b8c:	2301      	movne	r3, #1
 8007b8e:	2300      	moveq	r3, #0
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	e03c      	b.n	8007c0e <HAL_TIM_PWM_Start+0x9e>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d109      	bne.n	8007bae <HAL_TIM_PWM_Start+0x3e>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	bf14      	ite	ne
 8007ba6:	2301      	movne	r3, #1
 8007ba8:	2300      	moveq	r3, #0
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	e02f      	b.n	8007c0e <HAL_TIM_PWM_Start+0x9e>
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b08      	cmp	r3, #8
 8007bb2:	d109      	bne.n	8007bc8 <HAL_TIM_PWM_Start+0x58>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	bf14      	ite	ne
 8007bc0:	2301      	movne	r3, #1
 8007bc2:	2300      	moveq	r3, #0
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	e022      	b.n	8007c0e <HAL_TIM_PWM_Start+0x9e>
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b0c      	cmp	r3, #12
 8007bcc:	d109      	bne.n	8007be2 <HAL_TIM_PWM_Start+0x72>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	bf14      	ite	ne
 8007bda:	2301      	movne	r3, #1
 8007bdc:	2300      	moveq	r3, #0
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	e015      	b.n	8007c0e <HAL_TIM_PWM_Start+0x9e>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b10      	cmp	r3, #16
 8007be6:	d109      	bne.n	8007bfc <HAL_TIM_PWM_Start+0x8c>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	bf14      	ite	ne
 8007bf4:	2301      	movne	r3, #1
 8007bf6:	2300      	moveq	r3, #0
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	e008      	b.n	8007c0e <HAL_TIM_PWM_Start+0x9e>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	bf14      	ite	ne
 8007c08:	2301      	movne	r3, #1
 8007c0a:	2300      	moveq	r3, #0
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e09c      	b.n	8007d50 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d104      	bne.n	8007c26 <HAL_TIM_PWM_Start+0xb6>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2202      	movs	r2, #2
 8007c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c24:	e023      	b.n	8007c6e <HAL_TIM_PWM_Start+0xfe>
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d104      	bne.n	8007c36 <HAL_TIM_PWM_Start+0xc6>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2202      	movs	r2, #2
 8007c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c34:	e01b      	b.n	8007c6e <HAL_TIM_PWM_Start+0xfe>
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	2b08      	cmp	r3, #8
 8007c3a:	d104      	bne.n	8007c46 <HAL_TIM_PWM_Start+0xd6>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c44:	e013      	b.n	8007c6e <HAL_TIM_PWM_Start+0xfe>
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2b0c      	cmp	r3, #12
 8007c4a:	d104      	bne.n	8007c56 <HAL_TIM_PWM_Start+0xe6>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2202      	movs	r2, #2
 8007c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c54:	e00b      	b.n	8007c6e <HAL_TIM_PWM_Start+0xfe>
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2b10      	cmp	r3, #16
 8007c5a:	d104      	bne.n	8007c66 <HAL_TIM_PWM_Start+0xf6>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2202      	movs	r2, #2
 8007c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c64:	e003      	b.n	8007c6e <HAL_TIM_PWM_Start+0xfe>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2202      	movs	r2, #2
 8007c6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	2201      	movs	r2, #1
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f001 f86a 	bl	8008d50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a35      	ldr	r2, [pc, #212]	; (8007d58 <HAL_TIM_PWM_Start+0x1e8>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d013      	beq.n	8007cae <HAL_TIM_PWM_Start+0x13e>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a34      	ldr	r2, [pc, #208]	; (8007d5c <HAL_TIM_PWM_Start+0x1ec>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d00e      	beq.n	8007cae <HAL_TIM_PWM_Start+0x13e>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a32      	ldr	r2, [pc, #200]	; (8007d60 <HAL_TIM_PWM_Start+0x1f0>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d009      	beq.n	8007cae <HAL_TIM_PWM_Start+0x13e>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a31      	ldr	r2, [pc, #196]	; (8007d64 <HAL_TIM_PWM_Start+0x1f4>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d004      	beq.n	8007cae <HAL_TIM_PWM_Start+0x13e>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a2f      	ldr	r2, [pc, #188]	; (8007d68 <HAL_TIM_PWM_Start+0x1f8>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d101      	bne.n	8007cb2 <HAL_TIM_PWM_Start+0x142>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e000      	b.n	8007cb4 <HAL_TIM_PWM_Start+0x144>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d007      	beq.n	8007cc8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a22      	ldr	r2, [pc, #136]	; (8007d58 <HAL_TIM_PWM_Start+0x1e8>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d01d      	beq.n	8007d0e <HAL_TIM_PWM_Start+0x19e>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cda:	d018      	beq.n	8007d0e <HAL_TIM_PWM_Start+0x19e>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a22      	ldr	r2, [pc, #136]	; (8007d6c <HAL_TIM_PWM_Start+0x1fc>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d013      	beq.n	8007d0e <HAL_TIM_PWM_Start+0x19e>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a21      	ldr	r2, [pc, #132]	; (8007d70 <HAL_TIM_PWM_Start+0x200>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d00e      	beq.n	8007d0e <HAL_TIM_PWM_Start+0x19e>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a1f      	ldr	r2, [pc, #124]	; (8007d74 <HAL_TIM_PWM_Start+0x204>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d009      	beq.n	8007d0e <HAL_TIM_PWM_Start+0x19e>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a17      	ldr	r2, [pc, #92]	; (8007d5c <HAL_TIM_PWM_Start+0x1ec>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d004      	beq.n	8007d0e <HAL_TIM_PWM_Start+0x19e>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a1b      	ldr	r2, [pc, #108]	; (8007d78 <HAL_TIM_PWM_Start+0x208>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d115      	bne.n	8007d3a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689a      	ldr	r2, [r3, #8]
 8007d14:	4b19      	ldr	r3, [pc, #100]	; (8007d7c <HAL_TIM_PWM_Start+0x20c>)
 8007d16:	4013      	ands	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b06      	cmp	r3, #6
 8007d1e:	d015      	beq.n	8007d4c <HAL_TIM_PWM_Start+0x1dc>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d26:	d011      	beq.n	8007d4c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f042 0201 	orr.w	r2, r2, #1
 8007d36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d38:	e008      	b.n	8007d4c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f042 0201 	orr.w	r2, r2, #1
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	e000      	b.n	8007d4e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	40010000 	.word	0x40010000
 8007d5c:	40010400 	.word	0x40010400
 8007d60:	40014000 	.word	0x40014000
 8007d64:	40014400 	.word	0x40014400
 8007d68:	40014800 	.word	0x40014800
 8007d6c:	40000400 	.word	0x40000400
 8007d70:	40000800 	.word	0x40000800
 8007d74:	40000c00 	.word	0x40000c00
 8007d78:	40001800 	.word	0x40001800
 8007d7c:	00010007 	.word	0x00010007

08007d80 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 ffdc 	bl	8008d50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a3e      	ldr	r2, [pc, #248]	; (8007e98 <HAL_TIM_PWM_Stop+0x118>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d013      	beq.n	8007dca <HAL_TIM_PWM_Stop+0x4a>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a3d      	ldr	r2, [pc, #244]	; (8007e9c <HAL_TIM_PWM_Stop+0x11c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d00e      	beq.n	8007dca <HAL_TIM_PWM_Stop+0x4a>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a3b      	ldr	r2, [pc, #236]	; (8007ea0 <HAL_TIM_PWM_Stop+0x120>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d009      	beq.n	8007dca <HAL_TIM_PWM_Stop+0x4a>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a3a      	ldr	r2, [pc, #232]	; (8007ea4 <HAL_TIM_PWM_Stop+0x124>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d004      	beq.n	8007dca <HAL_TIM_PWM_Stop+0x4a>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a38      	ldr	r2, [pc, #224]	; (8007ea8 <HAL_TIM_PWM_Stop+0x128>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d101      	bne.n	8007dce <HAL_TIM_PWM_Stop+0x4e>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <HAL_TIM_PWM_Stop+0x50>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d017      	beq.n	8007e04 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6a1a      	ldr	r2, [r3, #32]
 8007dda:	f241 1311 	movw	r3, #4369	; 0x1111
 8007dde:	4013      	ands	r3, r2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10f      	bne.n	8007e04 <HAL_TIM_PWM_Stop+0x84>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6a1a      	ldr	r2, [r3, #32]
 8007dea:	f240 4344 	movw	r3, #1092	; 0x444
 8007dee:	4013      	ands	r3, r2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d107      	bne.n	8007e04 <HAL_TIM_PWM_Stop+0x84>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6a1a      	ldr	r2, [r3, #32]
 8007e0a:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e0e:	4013      	ands	r3, r2
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10f      	bne.n	8007e34 <HAL_TIM_PWM_Stop+0xb4>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6a1a      	ldr	r2, [r3, #32]
 8007e1a:	f240 4344 	movw	r3, #1092	; 0x444
 8007e1e:	4013      	ands	r3, r2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d107      	bne.n	8007e34 <HAL_TIM_PWM_Stop+0xb4>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 0201 	bic.w	r2, r2, #1
 8007e32:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d104      	bne.n	8007e44 <HAL_TIM_PWM_Stop+0xc4>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e42:	e023      	b.n	8007e8c <HAL_TIM_PWM_Stop+0x10c>
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d104      	bne.n	8007e54 <HAL_TIM_PWM_Stop+0xd4>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e52:	e01b      	b.n	8007e8c <HAL_TIM_PWM_Stop+0x10c>
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	2b08      	cmp	r3, #8
 8007e58:	d104      	bne.n	8007e64 <HAL_TIM_PWM_Stop+0xe4>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e62:	e013      	b.n	8007e8c <HAL_TIM_PWM_Stop+0x10c>
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2b0c      	cmp	r3, #12
 8007e68:	d104      	bne.n	8007e74 <HAL_TIM_PWM_Stop+0xf4>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e72:	e00b      	b.n	8007e8c <HAL_TIM_PWM_Stop+0x10c>
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	2b10      	cmp	r3, #16
 8007e78:	d104      	bne.n	8007e84 <HAL_TIM_PWM_Stop+0x104>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e82:	e003      	b.n	8007e8c <HAL_TIM_PWM_Stop+0x10c>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	40010000 	.word	0x40010000
 8007e9c:	40010400 	.word	0x40010400
 8007ea0:	40014000 	.word	0x40014000
 8007ea4:	40014400 	.word	0x40014400
 8007ea8:	40014800 	.word	0x40014800

08007eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d122      	bne.n	8007f08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f003 0302 	and.w	r3, r3, #2
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d11b      	bne.n	8007f08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f06f 0202 	mvn.w	r2, #2
 8007ed8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	f003 0303 	and.w	r3, r3, #3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fb0a 	bl	8008508 <HAL_TIM_IC_CaptureCallback>
 8007ef4:	e005      	b.n	8007f02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fafc 	bl	80084f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fb0d 	bl	800851c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	f003 0304 	and.w	r3, r3, #4
 8007f12:	2b04      	cmp	r3, #4
 8007f14:	d122      	bne.n	8007f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f003 0304 	and.w	r3, r3, #4
 8007f20:	2b04      	cmp	r3, #4
 8007f22:	d11b      	bne.n	8007f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f06f 0204 	mvn.w	r2, #4
 8007f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2202      	movs	r2, #2
 8007f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fae0 	bl	8008508 <HAL_TIM_IC_CaptureCallback>
 8007f48:	e005      	b.n	8007f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fad2 	bl	80084f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 fae3 	bl	800851c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	f003 0308 	and.w	r3, r3, #8
 8007f66:	2b08      	cmp	r3, #8
 8007f68:	d122      	bne.n	8007fb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f003 0308 	and.w	r3, r3, #8
 8007f74:	2b08      	cmp	r3, #8
 8007f76:	d11b      	bne.n	8007fb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f06f 0208 	mvn.w	r2, #8
 8007f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2204      	movs	r2, #4
 8007f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	69db      	ldr	r3, [r3, #28]
 8007f8e:	f003 0303 	and.w	r3, r3, #3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fab6 	bl	8008508 <HAL_TIM_IC_CaptureCallback>
 8007f9c:	e005      	b.n	8007faa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 faa8 	bl	80084f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fab9 	bl	800851c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	f003 0310 	and.w	r3, r3, #16
 8007fba:	2b10      	cmp	r3, #16
 8007fbc:	d122      	bne.n	8008004 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	f003 0310 	and.w	r3, r3, #16
 8007fc8:	2b10      	cmp	r3, #16
 8007fca:	d11b      	bne.n	8008004 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f06f 0210 	mvn.w	r2, #16
 8007fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2208      	movs	r2, #8
 8007fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d003      	beq.n	8007ff2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fa8c 	bl	8008508 <HAL_TIM_IC_CaptureCallback>
 8007ff0:	e005      	b.n	8007ffe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fa7e 	bl	80084f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fa8f 	bl	800851c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b01      	cmp	r3, #1
 8008010:	d10e      	bne.n	8008030 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	2b01      	cmp	r3, #1
 800801e:	d107      	bne.n	8008030 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f06f 0201 	mvn.w	r2, #1
 8008028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7f9 fc72 	bl	8001914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800803a:	2b80      	cmp	r3, #128	; 0x80
 800803c:	d10e      	bne.n	800805c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008048:	2b80      	cmp	r3, #128	; 0x80
 800804a:	d107      	bne.n	800805c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 ffb0 	bl	8008fbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800806a:	d10e      	bne.n	800808a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008076:	2b80      	cmp	r3, #128	; 0x80
 8008078:	d107      	bne.n	800808a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 ffa3 	bl	8008fd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008094:	2b40      	cmp	r3, #64	; 0x40
 8008096:	d10e      	bne.n	80080b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a2:	2b40      	cmp	r3, #64	; 0x40
 80080a4:	d107      	bne.n	80080b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fa3d 	bl	8008530 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	691b      	ldr	r3, [r3, #16]
 80080bc:	f003 0320 	and.w	r3, r3, #32
 80080c0:	2b20      	cmp	r3, #32
 80080c2:	d10e      	bne.n	80080e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	f003 0320 	and.w	r3, r3, #32
 80080ce:	2b20      	cmp	r3, #32
 80080d0:	d107      	bne.n	80080e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f06f 0220 	mvn.w	r2, #32
 80080da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 ff63 	bl	8008fa8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080e2:	bf00      	nop
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
	...

080080ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d101      	bne.n	8008106 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008102:	2302      	movs	r3, #2
 8008104:	e0fd      	b.n	8008302 <HAL_TIM_PWM_ConfigChannel+0x216>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b14      	cmp	r3, #20
 8008112:	f200 80f0 	bhi.w	80082f6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8008116:	a201      	add	r2, pc, #4	; (adr r2, 800811c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811c:	08008171 	.word	0x08008171
 8008120:	080082f7 	.word	0x080082f7
 8008124:	080082f7 	.word	0x080082f7
 8008128:	080082f7 	.word	0x080082f7
 800812c:	080081b1 	.word	0x080081b1
 8008130:	080082f7 	.word	0x080082f7
 8008134:	080082f7 	.word	0x080082f7
 8008138:	080082f7 	.word	0x080082f7
 800813c:	080081f3 	.word	0x080081f3
 8008140:	080082f7 	.word	0x080082f7
 8008144:	080082f7 	.word	0x080082f7
 8008148:	080082f7 	.word	0x080082f7
 800814c:	08008233 	.word	0x08008233
 8008150:	080082f7 	.word	0x080082f7
 8008154:	080082f7 	.word	0x080082f7
 8008158:	080082f7 	.word	0x080082f7
 800815c:	08008275 	.word	0x08008275
 8008160:	080082f7 	.word	0x080082f7
 8008164:	080082f7 	.word	0x080082f7
 8008168:	080082f7 	.word	0x080082f7
 800816c:	080082b5 	.word	0x080082b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68b9      	ldr	r1, [r7, #8]
 8008176:	4618      	mov	r0, r3
 8008178:	f000 fa7e 	bl	8008678 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699a      	ldr	r2, [r3, #24]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f042 0208 	orr.w	r2, r2, #8
 800818a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	699a      	ldr	r2, [r3, #24]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0204 	bic.w	r2, r2, #4
 800819a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6999      	ldr	r1, [r3, #24]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	691a      	ldr	r2, [r3, #16]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	430a      	orrs	r2, r1
 80081ac:	619a      	str	r2, [r3, #24]
      break;
 80081ae:	e0a3      	b.n	80082f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68b9      	ldr	r1, [r7, #8]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f000 faee 	bl	8008798 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	699a      	ldr	r2, [r3, #24]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6999      	ldr	r1, [r3, #24]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	021a      	lsls	r2, r3, #8
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	619a      	str	r2, [r3, #24]
      break;
 80081f0:	e082      	b.n	80082f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68b9      	ldr	r1, [r7, #8]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 fb57 	bl	80088ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	69da      	ldr	r2, [r3, #28]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f042 0208 	orr.w	r2, r2, #8
 800820c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	69da      	ldr	r2, [r3, #28]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f022 0204 	bic.w	r2, r2, #4
 800821c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	69d9      	ldr	r1, [r3, #28]
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	691a      	ldr	r2, [r3, #16]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	61da      	str	r2, [r3, #28]
      break;
 8008230:	e062      	b.n	80082f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68b9      	ldr	r1, [r7, #8]
 8008238:	4618      	mov	r0, r3
 800823a:	f000 fbbd 	bl	80089b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	69da      	ldr	r2, [r3, #28]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800824c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	69da      	ldr	r2, [r3, #28]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800825c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	69d9      	ldr	r1, [r3, #28]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	021a      	lsls	r2, r3, #8
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	61da      	str	r2, [r3, #28]
      break;
 8008272:	e041      	b.n	80082f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68b9      	ldr	r1, [r7, #8]
 800827a:	4618      	mov	r0, r3
 800827c:	f000 fc04 	bl	8008a88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f042 0208 	orr.w	r2, r2, #8
 800828e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f022 0204 	bic.w	r2, r2, #4
 800829e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	691a      	ldr	r2, [r3, #16]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	430a      	orrs	r2, r1
 80082b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80082b2:	e021      	b.n	80082f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68b9      	ldr	r1, [r7, #8]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 fc46 	bl	8008b4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	021a      	lsls	r2, r3, #8
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80082f4:	e000      	b.n	80082f8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80082f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop

0800830c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800831c:	2b01      	cmp	r3, #1
 800831e:	d101      	bne.n	8008324 <HAL_TIM_ConfigClockSource+0x18>
 8008320:	2302      	movs	r3, #2
 8008322:	e0db      	b.n	80084dc <HAL_TIM_ConfigClockSource+0x1d0>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2202      	movs	r2, #2
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	4b69      	ldr	r3, [pc, #420]	; (80084e4 <HAL_TIM_ConfigClockSource+0x1d8>)
 8008340:	4013      	ands	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800834a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a63      	ldr	r2, [pc, #396]	; (80084e8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800835a:	4293      	cmp	r3, r2
 800835c:	f000 80a9 	beq.w	80084b2 <HAL_TIM_ConfigClockSource+0x1a6>
 8008360:	4a61      	ldr	r2, [pc, #388]	; (80084e8 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008362:	4293      	cmp	r3, r2
 8008364:	f200 80ae 	bhi.w	80084c4 <HAL_TIM_ConfigClockSource+0x1b8>
 8008368:	4a60      	ldr	r2, [pc, #384]	; (80084ec <HAL_TIM_ConfigClockSource+0x1e0>)
 800836a:	4293      	cmp	r3, r2
 800836c:	f000 80a1 	beq.w	80084b2 <HAL_TIM_ConfigClockSource+0x1a6>
 8008370:	4a5e      	ldr	r2, [pc, #376]	; (80084ec <HAL_TIM_ConfigClockSource+0x1e0>)
 8008372:	4293      	cmp	r3, r2
 8008374:	f200 80a6 	bhi.w	80084c4 <HAL_TIM_ConfigClockSource+0x1b8>
 8008378:	4a5d      	ldr	r2, [pc, #372]	; (80084f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800837a:	4293      	cmp	r3, r2
 800837c:	f000 8099 	beq.w	80084b2 <HAL_TIM_ConfigClockSource+0x1a6>
 8008380:	4a5b      	ldr	r2, [pc, #364]	; (80084f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008382:	4293      	cmp	r3, r2
 8008384:	f200 809e 	bhi.w	80084c4 <HAL_TIM_ConfigClockSource+0x1b8>
 8008388:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800838c:	f000 8091 	beq.w	80084b2 <HAL_TIM_ConfigClockSource+0x1a6>
 8008390:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008394:	f200 8096 	bhi.w	80084c4 <HAL_TIM_ConfigClockSource+0x1b8>
 8008398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800839c:	f000 8089 	beq.w	80084b2 <HAL_TIM_ConfigClockSource+0x1a6>
 80083a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083a4:	f200 808e 	bhi.w	80084c4 <HAL_TIM_ConfigClockSource+0x1b8>
 80083a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083ac:	d03e      	beq.n	800842c <HAL_TIM_ConfigClockSource+0x120>
 80083ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083b2:	f200 8087 	bhi.w	80084c4 <HAL_TIM_ConfigClockSource+0x1b8>
 80083b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ba:	f000 8085 	beq.w	80084c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80083be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083c2:	d87f      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x1b8>
 80083c4:	2b70      	cmp	r3, #112	; 0x70
 80083c6:	d01a      	beq.n	80083fe <HAL_TIM_ConfigClockSource+0xf2>
 80083c8:	2b70      	cmp	r3, #112	; 0x70
 80083ca:	d87b      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x1b8>
 80083cc:	2b60      	cmp	r3, #96	; 0x60
 80083ce:	d050      	beq.n	8008472 <HAL_TIM_ConfigClockSource+0x166>
 80083d0:	2b60      	cmp	r3, #96	; 0x60
 80083d2:	d877      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x1b8>
 80083d4:	2b50      	cmp	r3, #80	; 0x50
 80083d6:	d03c      	beq.n	8008452 <HAL_TIM_ConfigClockSource+0x146>
 80083d8:	2b50      	cmp	r3, #80	; 0x50
 80083da:	d873      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x1b8>
 80083dc:	2b40      	cmp	r3, #64	; 0x40
 80083de:	d058      	beq.n	8008492 <HAL_TIM_ConfigClockSource+0x186>
 80083e0:	2b40      	cmp	r3, #64	; 0x40
 80083e2:	d86f      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x1b8>
 80083e4:	2b30      	cmp	r3, #48	; 0x30
 80083e6:	d064      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x1a6>
 80083e8:	2b30      	cmp	r3, #48	; 0x30
 80083ea:	d86b      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x1b8>
 80083ec:	2b20      	cmp	r3, #32
 80083ee:	d060      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x1a6>
 80083f0:	2b20      	cmp	r3, #32
 80083f2:	d867      	bhi.n	80084c4 <HAL_TIM_ConfigClockSource+0x1b8>
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d05c      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x1a6>
 80083f8:	2b10      	cmp	r3, #16
 80083fa:	d05a      	beq.n	80084b2 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80083fc:	e062      	b.n	80084c4 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6818      	ldr	r0, [r3, #0]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	6899      	ldr	r1, [r3, #8]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f000 fc7f 	bl	8008d10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008420:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	609a      	str	r2, [r3, #8]
      break;
 800842a:	e04e      	b.n	80084ca <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6818      	ldr	r0, [r3, #0]
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	6899      	ldr	r1, [r3, #8]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	f000 fc68 	bl	8008d10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689a      	ldr	r2, [r3, #8]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800844e:	609a      	str	r2, [r3, #8]
      break;
 8008450:	e03b      	b.n	80084ca <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	6859      	ldr	r1, [r3, #4]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	461a      	mov	r2, r3
 8008460:	f000 fbd8 	bl	8008c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2150      	movs	r1, #80	; 0x50
 800846a:	4618      	mov	r0, r3
 800846c:	f000 fc32 	bl	8008cd4 <TIM_ITRx_SetConfig>
      break;
 8008470:	e02b      	b.n	80084ca <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6818      	ldr	r0, [r3, #0]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	6859      	ldr	r1, [r3, #4]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	461a      	mov	r2, r3
 8008480:	f000 fbf7 	bl	8008c72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2160      	movs	r1, #96	; 0x60
 800848a:	4618      	mov	r0, r3
 800848c:	f000 fc22 	bl	8008cd4 <TIM_ITRx_SetConfig>
      break;
 8008490:	e01b      	b.n	80084ca <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6818      	ldr	r0, [r3, #0]
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	6859      	ldr	r1, [r3, #4]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68db      	ldr	r3, [r3, #12]
 800849e:	461a      	mov	r2, r3
 80084a0:	f000 fbb8 	bl	8008c14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2140      	movs	r1, #64	; 0x40
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 fc12 	bl	8008cd4 <TIM_ITRx_SetConfig>
      break;
 80084b0:	e00b      	b.n	80084ca <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4619      	mov	r1, r3
 80084bc:	4610      	mov	r0, r2
 80084be:	f000 fc09 	bl	8008cd4 <TIM_ITRx_SetConfig>
        break;
 80084c2:	e002      	b.n	80084ca <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80084c4:	bf00      	nop
 80084c6:	e000      	b.n	80084ca <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80084c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	ffceff88 	.word	0xffceff88
 80084e8:	00100040 	.word	0x00100040
 80084ec:	00100030 	.word	0x00100030
 80084f0:	00100020 	.word	0x00100020

080084f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084fc:	bf00      	nop
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a40      	ldr	r2, [pc, #256]	; (8008658 <TIM_Base_SetConfig+0x114>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d013      	beq.n	8008584 <TIM_Base_SetConfig+0x40>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008562:	d00f      	beq.n	8008584 <TIM_Base_SetConfig+0x40>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a3d      	ldr	r2, [pc, #244]	; (800865c <TIM_Base_SetConfig+0x118>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d00b      	beq.n	8008584 <TIM_Base_SetConfig+0x40>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a3c      	ldr	r2, [pc, #240]	; (8008660 <TIM_Base_SetConfig+0x11c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d007      	beq.n	8008584 <TIM_Base_SetConfig+0x40>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4a3b      	ldr	r2, [pc, #236]	; (8008664 <TIM_Base_SetConfig+0x120>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d003      	beq.n	8008584 <TIM_Base_SetConfig+0x40>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a3a      	ldr	r2, [pc, #232]	; (8008668 <TIM_Base_SetConfig+0x124>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d108      	bne.n	8008596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800858a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	4313      	orrs	r3, r2
 8008594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a2f      	ldr	r2, [pc, #188]	; (8008658 <TIM_Base_SetConfig+0x114>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d01f      	beq.n	80085de <TIM_Base_SetConfig+0x9a>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085a4:	d01b      	beq.n	80085de <TIM_Base_SetConfig+0x9a>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a2c      	ldr	r2, [pc, #176]	; (800865c <TIM_Base_SetConfig+0x118>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d017      	beq.n	80085de <TIM_Base_SetConfig+0x9a>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a2b      	ldr	r2, [pc, #172]	; (8008660 <TIM_Base_SetConfig+0x11c>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d013      	beq.n	80085de <TIM_Base_SetConfig+0x9a>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a2a      	ldr	r2, [pc, #168]	; (8008664 <TIM_Base_SetConfig+0x120>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d00f      	beq.n	80085de <TIM_Base_SetConfig+0x9a>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a29      	ldr	r2, [pc, #164]	; (8008668 <TIM_Base_SetConfig+0x124>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d00b      	beq.n	80085de <TIM_Base_SetConfig+0x9a>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a28      	ldr	r2, [pc, #160]	; (800866c <TIM_Base_SetConfig+0x128>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d007      	beq.n	80085de <TIM_Base_SetConfig+0x9a>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a27      	ldr	r2, [pc, #156]	; (8008670 <TIM_Base_SetConfig+0x12c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d003      	beq.n	80085de <TIM_Base_SetConfig+0x9a>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a26      	ldr	r2, [pc, #152]	; (8008674 <TIM_Base_SetConfig+0x130>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d108      	bne.n	80085f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	689a      	ldr	r2, [r3, #8]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a10      	ldr	r2, [pc, #64]	; (8008658 <TIM_Base_SetConfig+0x114>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d00f      	beq.n	800863c <TIM_Base_SetConfig+0xf8>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a12      	ldr	r2, [pc, #72]	; (8008668 <TIM_Base_SetConfig+0x124>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d00b      	beq.n	800863c <TIM_Base_SetConfig+0xf8>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a11      	ldr	r2, [pc, #68]	; (800866c <TIM_Base_SetConfig+0x128>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d007      	beq.n	800863c <TIM_Base_SetConfig+0xf8>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a10      	ldr	r2, [pc, #64]	; (8008670 <TIM_Base_SetConfig+0x12c>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d003      	beq.n	800863c <TIM_Base_SetConfig+0xf8>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a0f      	ldr	r2, [pc, #60]	; (8008674 <TIM_Base_SetConfig+0x130>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d103      	bne.n	8008644 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	691a      	ldr	r2, [r3, #16]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	615a      	str	r2, [r3, #20]
}
 800864a:	bf00      	nop
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	40010000 	.word	0x40010000
 800865c:	40000400 	.word	0x40000400
 8008660:	40000800 	.word	0x40000800
 8008664:	40000c00 	.word	0x40000c00
 8008668:	40010400 	.word	0x40010400
 800866c:	40014000 	.word	0x40014000
 8008670:	40014400 	.word	0x40014400
 8008674:	40014800 	.word	0x40014800

08008678 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008678:	b480      	push	{r7}
 800867a:	b087      	sub	sp, #28
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	f023 0201 	bic.w	r2, r3, #1
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a1b      	ldr	r3, [r3, #32]
 8008692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	4b37      	ldr	r3, [pc, #220]	; (8008780 <TIM_OC1_SetConfig+0x108>)
 80086a4:	4013      	ands	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f023 0303 	bic.w	r3, r3, #3
 80086ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	f023 0302 	bic.w	r3, r3, #2
 80086c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a2d      	ldr	r2, [pc, #180]	; (8008784 <TIM_OC1_SetConfig+0x10c>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d00f      	beq.n	80086f4 <TIM_OC1_SetConfig+0x7c>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a2c      	ldr	r2, [pc, #176]	; (8008788 <TIM_OC1_SetConfig+0x110>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d00b      	beq.n	80086f4 <TIM_OC1_SetConfig+0x7c>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a2b      	ldr	r2, [pc, #172]	; (800878c <TIM_OC1_SetConfig+0x114>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d007      	beq.n	80086f4 <TIM_OC1_SetConfig+0x7c>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a2a      	ldr	r2, [pc, #168]	; (8008790 <TIM_OC1_SetConfig+0x118>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d003      	beq.n	80086f4 <TIM_OC1_SetConfig+0x7c>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a29      	ldr	r2, [pc, #164]	; (8008794 <TIM_OC1_SetConfig+0x11c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d10c      	bne.n	800870e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f023 0308 	bic.w	r3, r3, #8
 80086fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	4313      	orrs	r3, r2
 8008704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f023 0304 	bic.w	r3, r3, #4
 800870c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a1c      	ldr	r2, [pc, #112]	; (8008784 <TIM_OC1_SetConfig+0x10c>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d00f      	beq.n	8008736 <TIM_OC1_SetConfig+0xbe>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a1b      	ldr	r2, [pc, #108]	; (8008788 <TIM_OC1_SetConfig+0x110>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d00b      	beq.n	8008736 <TIM_OC1_SetConfig+0xbe>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a1a      	ldr	r2, [pc, #104]	; (800878c <TIM_OC1_SetConfig+0x114>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d007      	beq.n	8008736 <TIM_OC1_SetConfig+0xbe>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a19      	ldr	r2, [pc, #100]	; (8008790 <TIM_OC1_SetConfig+0x118>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d003      	beq.n	8008736 <TIM_OC1_SetConfig+0xbe>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a18      	ldr	r2, [pc, #96]	; (8008794 <TIM_OC1_SetConfig+0x11c>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d111      	bne.n	800875a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800873c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	693a      	ldr	r2, [r7, #16]
 800874c:	4313      	orrs	r3, r2
 800874e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	699b      	ldr	r3, [r3, #24]
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	4313      	orrs	r3, r2
 8008758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	68fa      	ldr	r2, [r7, #12]
 8008764:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	621a      	str	r2, [r3, #32]
}
 8008774:	bf00      	nop
 8008776:	371c      	adds	r7, #28
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	fffeff8f 	.word	0xfffeff8f
 8008784:	40010000 	.word	0x40010000
 8008788:	40010400 	.word	0x40010400
 800878c:	40014000 	.word	0x40014000
 8008790:	40014400 	.word	0x40014400
 8008794:	40014800 	.word	0x40014800

08008798 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	f023 0210 	bic.w	r2, r3, #16
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	4b34      	ldr	r3, [pc, #208]	; (8008894 <TIM_OC2_SetConfig+0xfc>)
 80087c4:	4013      	ands	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	021b      	lsls	r3, r3, #8
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	4313      	orrs	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f023 0320 	bic.w	r3, r3, #32
 80087e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	011b      	lsls	r3, r3, #4
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a29      	ldr	r2, [pc, #164]	; (8008898 <TIM_OC2_SetConfig+0x100>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d003      	beq.n	8008800 <TIM_OC2_SetConfig+0x68>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a28      	ldr	r2, [pc, #160]	; (800889c <TIM_OC2_SetConfig+0x104>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d10d      	bne.n	800881c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	011b      	lsls	r3, r3, #4
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	4313      	orrs	r3, r2
 8008812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800881a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a1e      	ldr	r2, [pc, #120]	; (8008898 <TIM_OC2_SetConfig+0x100>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d00f      	beq.n	8008844 <TIM_OC2_SetConfig+0xac>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a1d      	ldr	r2, [pc, #116]	; (800889c <TIM_OC2_SetConfig+0x104>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d00b      	beq.n	8008844 <TIM_OC2_SetConfig+0xac>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a1c      	ldr	r2, [pc, #112]	; (80088a0 <TIM_OC2_SetConfig+0x108>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d007      	beq.n	8008844 <TIM_OC2_SetConfig+0xac>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a1b      	ldr	r2, [pc, #108]	; (80088a4 <TIM_OC2_SetConfig+0x10c>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d003      	beq.n	8008844 <TIM_OC2_SetConfig+0xac>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a1a      	ldr	r2, [pc, #104]	; (80088a8 <TIM_OC2_SetConfig+0x110>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d113      	bne.n	800886c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800884a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	695b      	ldr	r3, [r3, #20]
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	693a      	ldr	r2, [r7, #16]
 800885c:	4313      	orrs	r3, r2
 800885e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	699b      	ldr	r3, [r3, #24]
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	693a      	ldr	r2, [r7, #16]
 8008868:	4313      	orrs	r3, r2
 800886a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685a      	ldr	r2, [r3, #4]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	621a      	str	r2, [r3, #32]
}
 8008886:	bf00      	nop
 8008888:	371c      	adds	r7, #28
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	feff8fff 	.word	0xfeff8fff
 8008898:	40010000 	.word	0x40010000
 800889c:	40010400 	.word	0x40010400
 80088a0:	40014000 	.word	0x40014000
 80088a4:	40014400 	.word	0x40014400
 80088a8:	40014800 	.word	0x40014800

080088ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	69db      	ldr	r3, [r3, #28]
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 0303 	bic.w	r3, r3, #3
 80088e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	021b      	lsls	r3, r3, #8
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	4313      	orrs	r3, r2
 8008900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a27      	ldr	r2, [pc, #156]	; (80089a4 <TIM_OC3_SetConfig+0xf8>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d003      	beq.n	8008912 <TIM_OC3_SetConfig+0x66>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a26      	ldr	r2, [pc, #152]	; (80089a8 <TIM_OC3_SetConfig+0xfc>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d10d      	bne.n	800892e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008918:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	021b      	lsls	r3, r3, #8
 8008920:	697a      	ldr	r2, [r7, #20]
 8008922:	4313      	orrs	r3, r2
 8008924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800892c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a1c      	ldr	r2, [pc, #112]	; (80089a4 <TIM_OC3_SetConfig+0xf8>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d00f      	beq.n	8008956 <TIM_OC3_SetConfig+0xaa>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a1b      	ldr	r2, [pc, #108]	; (80089a8 <TIM_OC3_SetConfig+0xfc>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d00b      	beq.n	8008956 <TIM_OC3_SetConfig+0xaa>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a1a      	ldr	r2, [pc, #104]	; (80089ac <TIM_OC3_SetConfig+0x100>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d007      	beq.n	8008956 <TIM_OC3_SetConfig+0xaa>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a19      	ldr	r2, [pc, #100]	; (80089b0 <TIM_OC3_SetConfig+0x104>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d003      	beq.n	8008956 <TIM_OC3_SetConfig+0xaa>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a18      	ldr	r2, [pc, #96]	; (80089b4 <TIM_OC3_SetConfig+0x108>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d113      	bne.n	800897e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800895c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	011b      	lsls	r3, r3, #4
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	4313      	orrs	r3, r2
 8008970:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	011b      	lsls	r3, r3, #4
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	4313      	orrs	r3, r2
 800897c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	68fa      	ldr	r2, [r7, #12]
 8008988:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	621a      	str	r2, [r3, #32]
}
 8008998:	bf00      	nop
 800899a:	371c      	adds	r7, #28
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr
 80089a4:	40010000 	.word	0x40010000
 80089a8:	40010400 	.word	0x40010400
 80089ac:	40014000 	.word	0x40014000
 80089b0:	40014400 	.word	0x40014400
 80089b4:	40014800 	.word	0x40014800

080089b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a1b      	ldr	r3, [r3, #32]
 80089d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	021b      	lsls	r3, r3, #8
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	031b      	lsls	r3, r3, #12
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a18      	ldr	r2, [pc, #96]	; (8008a74 <TIM_OC4_SetConfig+0xbc>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d00f      	beq.n	8008a38 <TIM_OC4_SetConfig+0x80>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a17      	ldr	r2, [pc, #92]	; (8008a78 <TIM_OC4_SetConfig+0xc0>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d00b      	beq.n	8008a38 <TIM_OC4_SetConfig+0x80>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a16      	ldr	r2, [pc, #88]	; (8008a7c <TIM_OC4_SetConfig+0xc4>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d007      	beq.n	8008a38 <TIM_OC4_SetConfig+0x80>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a15      	ldr	r2, [pc, #84]	; (8008a80 <TIM_OC4_SetConfig+0xc8>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d003      	beq.n	8008a38 <TIM_OC4_SetConfig+0x80>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a14      	ldr	r2, [pc, #80]	; (8008a84 <TIM_OC4_SetConfig+0xcc>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d109      	bne.n	8008a4c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	019b      	lsls	r3, r3, #6
 8008a46:	697a      	ldr	r2, [r7, #20]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	621a      	str	r2, [r3, #32]
}
 8008a66:	bf00      	nop
 8008a68:	371c      	adds	r7, #28
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	40010000 	.word	0x40010000
 8008a78:	40010400 	.word	0x40010400
 8008a7c:	40014000 	.word	0x40014000
 8008a80:	40014400 	.word	0x40014400
 8008a84:	40014800 	.word	0x40014800

08008a88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ac8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	041b      	lsls	r3, r3, #16
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a17      	ldr	r2, [pc, #92]	; (8008b38 <TIM_OC5_SetConfig+0xb0>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d00f      	beq.n	8008afe <TIM_OC5_SetConfig+0x76>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a16      	ldr	r2, [pc, #88]	; (8008b3c <TIM_OC5_SetConfig+0xb4>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d00b      	beq.n	8008afe <TIM_OC5_SetConfig+0x76>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a15      	ldr	r2, [pc, #84]	; (8008b40 <TIM_OC5_SetConfig+0xb8>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d007      	beq.n	8008afe <TIM_OC5_SetConfig+0x76>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a14      	ldr	r2, [pc, #80]	; (8008b44 <TIM_OC5_SetConfig+0xbc>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d003      	beq.n	8008afe <TIM_OC5_SetConfig+0x76>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a13      	ldr	r2, [pc, #76]	; (8008b48 <TIM_OC5_SetConfig+0xc0>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d109      	bne.n	8008b12 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	021b      	lsls	r3, r3, #8
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	621a      	str	r2, [r3, #32]
}
 8008b2c:	bf00      	nop
 8008b2e:	371c      	adds	r7, #28
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	40010000 	.word	0x40010000
 8008b3c:	40010400 	.word	0x40010400
 8008b40:	40014000 	.word	0x40014000
 8008b44:	40014400 	.word	0x40014400
 8008b48:	40014800 	.word	0x40014800

08008b4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b087      	sub	sp, #28
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	021b      	lsls	r3, r3, #8
 8008b82:	68fa      	ldr	r2, [r7, #12]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	051b      	lsls	r3, r3, #20
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a18      	ldr	r2, [pc, #96]	; (8008c00 <TIM_OC6_SetConfig+0xb4>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d00f      	beq.n	8008bc4 <TIM_OC6_SetConfig+0x78>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a17      	ldr	r2, [pc, #92]	; (8008c04 <TIM_OC6_SetConfig+0xb8>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d00b      	beq.n	8008bc4 <TIM_OC6_SetConfig+0x78>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a16      	ldr	r2, [pc, #88]	; (8008c08 <TIM_OC6_SetConfig+0xbc>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d007      	beq.n	8008bc4 <TIM_OC6_SetConfig+0x78>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a15      	ldr	r2, [pc, #84]	; (8008c0c <TIM_OC6_SetConfig+0xc0>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d003      	beq.n	8008bc4 <TIM_OC6_SetConfig+0x78>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a14      	ldr	r2, [pc, #80]	; (8008c10 <TIM_OC6_SetConfig+0xc4>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d109      	bne.n	8008bd8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008bca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	029b      	lsls	r3, r3, #10
 8008bd2:	697a      	ldr	r2, [r7, #20]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	685a      	ldr	r2, [r3, #4]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	621a      	str	r2, [r3, #32]
}
 8008bf2:	bf00      	nop
 8008bf4:	371c      	adds	r7, #28
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	40010000 	.word	0x40010000
 8008c04:	40010400 	.word	0x40010400
 8008c08:	40014000 	.word	0x40014000
 8008c0c:	40014400 	.word	0x40014400
 8008c10:	40014800 	.word	0x40014800

08008c14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b087      	sub	sp, #28
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6a1b      	ldr	r3, [r3, #32]
 8008c24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	f023 0201 	bic.w	r2, r3, #1
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	011b      	lsls	r3, r3, #4
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	f023 030a 	bic.w	r3, r3, #10
 8008c50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	697a      	ldr	r2, [r7, #20]
 8008c64:	621a      	str	r2, [r3, #32]
}
 8008c66:	bf00      	nop
 8008c68:	371c      	adds	r7, #28
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b087      	sub	sp, #28
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	60b9      	str	r1, [r7, #8]
 8008c7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6a1b      	ldr	r3, [r3, #32]
 8008c82:	f023 0210 	bic.w	r2, r3, #16
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6a1b      	ldr	r3, [r3, #32]
 8008c94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	031b      	lsls	r3, r3, #12
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	011b      	lsls	r3, r3, #4
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	697a      	ldr	r2, [r7, #20]
 8008cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	693a      	ldr	r2, [r7, #16]
 8008cc4:	621a      	str	r2, [r3, #32]
}
 8008cc6:	bf00      	nop
 8008cc8:	371c      	adds	r7, #28
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
	...

08008cd4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	4b09      	ldr	r3, [pc, #36]	; (8008d0c <TIM_ITRx_SetConfig+0x38>)
 8008ce8:	4013      	ands	r3, r2
 8008cea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	f043 0307 	orr.w	r3, r3, #7
 8008cf6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	609a      	str	r2, [r3, #8]
}
 8008cfe:	bf00      	nop
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	ffcfff8f 	.word	0xffcfff8f

08008d10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b087      	sub	sp, #28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
 8008d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	021a      	lsls	r2, r3, #8
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	431a      	orrs	r2, r3
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	609a      	str	r2, [r3, #8]
}
 8008d44:	bf00      	nop
 8008d46:	371c      	adds	r7, #28
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b087      	sub	sp, #28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	f003 031f 	and.w	r3, r3, #31
 8008d62:	2201      	movs	r2, #1
 8008d64:	fa02 f303 	lsl.w	r3, r2, r3
 8008d68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6a1a      	ldr	r2, [r3, #32]
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	43db      	mvns	r3, r3
 8008d72:	401a      	ands	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6a1a      	ldr	r2, [r3, #32]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	f003 031f 	and.w	r3, r3, #31
 8008d82:	6879      	ldr	r1, [r7, #4]
 8008d84:	fa01 f303 	lsl.w	r3, r1, r3
 8008d88:	431a      	orrs	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	621a      	str	r2, [r3, #32]
}
 8008d8e:	bf00      	nop
 8008d90:	371c      	adds	r7, #28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
	...

08008d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d101      	bne.n	8008db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008db0:	2302      	movs	r3, #2
 8008db2:	e068      	b.n	8008e86 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a2e      	ldr	r2, [pc, #184]	; (8008e94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d004      	beq.n	8008de8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a2d      	ldr	r2, [pc, #180]	; (8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d108      	bne.n	8008dfa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008dee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a1e      	ldr	r2, [pc, #120]	; (8008e94 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d01d      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e26:	d018      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a1b      	ldr	r2, [pc, #108]	; (8008e9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d013      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a1a      	ldr	r2, [pc, #104]	; (8008ea0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d00e      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a18      	ldr	r2, [pc, #96]	; (8008ea4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d009      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a13      	ldr	r2, [pc, #76]	; (8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d004      	beq.n	8008e5a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a14      	ldr	r2, [pc, #80]	; (8008ea8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d10c      	bne.n	8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	40010000 	.word	0x40010000
 8008e98:	40010400 	.word	0x40010400
 8008e9c:	40000400 	.word	0x40000400
 8008ea0:	40000800 	.word	0x40000800
 8008ea4:	40000c00 	.word	0x40000c00
 8008ea8:	40001800 	.word	0x40001800

08008eac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d101      	bne.n	8008ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	e065      	b.n	8008f94 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	041b      	lsls	r3, r3, #16
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a16      	ldr	r2, [pc, #88]	; (8008fa0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d004      	beq.n	8008f56 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a14      	ldr	r2, [pc, #80]	; (8008fa4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d115      	bne.n	8008f82 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f60:	051b      	lsls	r3, r3, #20
 8008f62:	4313      	orrs	r3, r2
 8008f64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr
 8008fa0:	40010000 	.word	0x40010000
 8008fa4:	40010400 	.word	0x40010400

08008fa8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d101      	bne.n	8008ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e042      	b.n	800907c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d106      	bne.n	800900e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7f8 fed1 	bl	8001db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2224      	movs	r2, #36	; 0x24
 8009012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f022 0201 	bic.w	r2, r2, #1
 8009024:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fafc 	bl	8009624 <UART_SetConfig>
 800902c:	4603      	mov	r3, r0
 800902e:	2b01      	cmp	r3, #1
 8009030:	d101      	bne.n	8009036 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e022      	b.n	800907c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800903a:	2b00      	cmp	r3, #0
 800903c:	d002      	beq.n	8009044 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f001 f850 	bl	800a0e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009052:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	689a      	ldr	r2, [r3, #8]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009062:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f042 0201 	orr.w	r2, r2, #1
 8009072:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f001 f8d7 	bl	800a228 <UART_CheckIdleState>
 800907a:	4603      	mov	r3, r0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b088      	sub	sp, #32
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	69db      	ldr	r3, [r3, #28]
 8009092:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80090a4:	69fa      	ldr	r2, [r7, #28]
 80090a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80090aa:	4013      	ands	r3, r2
 80090ac:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d118      	bne.n	80090e6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	f003 0320 	and.w	r3, r3, #32
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d013      	beq.n	80090e6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	f003 0320 	and.w	r3, r3, #32
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d104      	bne.n	80090d2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d009      	beq.n	80090e6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 8282 	beq.w	80095e0 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	4798      	blx	r3
      }
      return;
 80090e4:	e27c      	b.n	80095e0 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	f000 80ef 	beq.w	80092cc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	4b73      	ldr	r3, [pc, #460]	; (80092c0 <HAL_UART_IRQHandler+0x23c>)
 80090f2:	4013      	ands	r3, r2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d105      	bne.n	8009104 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80090f8:	69ba      	ldr	r2, [r7, #24]
 80090fa:	4b72      	ldr	r3, [pc, #456]	; (80092c4 <HAL_UART_IRQHandler+0x240>)
 80090fc:	4013      	ands	r3, r2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f000 80e4 	beq.w	80092cc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d010      	beq.n	8009130 <HAL_UART_IRQHandler+0xac>
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00b      	beq.n	8009130 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2201      	movs	r2, #1
 800911e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009126:	f043 0201 	orr.w	r2, r3, #1
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	f003 0302 	and.w	r3, r3, #2
 8009136:	2b00      	cmp	r3, #0
 8009138:	d010      	beq.n	800915c <HAL_UART_IRQHandler+0xd8>
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f003 0301 	and.w	r3, r3, #1
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00b      	beq.n	800915c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2202      	movs	r2, #2
 800914a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009152:	f043 0204 	orr.w	r2, r3, #4
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	f003 0304 	and.w	r3, r3, #4
 8009162:	2b00      	cmp	r3, #0
 8009164:	d010      	beq.n	8009188 <HAL_UART_IRQHandler+0x104>
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f003 0301 	and.w	r3, r3, #1
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00b      	beq.n	8009188 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2204      	movs	r2, #4
 8009176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800917e:	f043 0202 	orr.w	r2, r3, #2
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	f003 0308 	and.w	r3, r3, #8
 800918e:	2b00      	cmp	r3, #0
 8009190:	d015      	beq.n	80091be <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	f003 0320 	and.w	r3, r3, #32
 8009198:	2b00      	cmp	r3, #0
 800919a:	d104      	bne.n	80091a6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800919c:	697a      	ldr	r2, [r7, #20]
 800919e:	4b48      	ldr	r3, [pc, #288]	; (80092c0 <HAL_UART_IRQHandler+0x23c>)
 80091a0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00b      	beq.n	80091be <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2208      	movs	r2, #8
 80091ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091b4:	f043 0208 	orr.w	r2, r3, #8
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d011      	beq.n	80091ec <HAL_UART_IRQHandler+0x168>
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00c      	beq.n	80091ec <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091e2:	f043 0220 	orr.w	r2, r3, #32
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f000 81f6 	beq.w	80095e4 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	f003 0320 	and.w	r3, r3, #32
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d011      	beq.n	8009226 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	f003 0320 	and.w	r3, r3, #32
 8009208:	2b00      	cmp	r3, #0
 800920a:	d104      	bne.n	8009216 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d007      	beq.n	8009226 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800922c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009238:	2b40      	cmp	r3, #64	; 0x40
 800923a:	d004      	beq.n	8009246 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009242:	2b00      	cmp	r3, #0
 8009244:	d031      	beq.n	80092aa <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f001 f8ba 	bl	800a3c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009256:	2b40      	cmp	r3, #64	; 0x40
 8009258:	d123      	bne.n	80092a2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	689a      	ldr	r2, [r3, #8]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009268:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800926e:	2b00      	cmp	r3, #0
 8009270:	d013      	beq.n	800929a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009276:	4a14      	ldr	r2, [pc, #80]	; (80092c8 <HAL_UART_IRQHandler+0x244>)
 8009278:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800927e:	4618      	mov	r0, r3
 8009280:	f7fa f9ac 	bl	80035dc <HAL_DMA_Abort_IT>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d017      	beq.n	80092ba <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800928e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009294:	4610      	mov	r0, r2
 8009296:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009298:	e00f      	b.n	80092ba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f9ac 	bl	80095f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092a0:	e00b      	b.n	80092ba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f9a8 	bl	80095f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092a8:	e007      	b.n	80092ba <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f9a4 	bl	80095f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80092b8:	e194      	b.n	80095e4 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092ba:	bf00      	nop
    return;
 80092bc:	e192      	b.n	80095e4 <HAL_UART_IRQHandler+0x560>
 80092be:	bf00      	nop
 80092c0:	10000001 	.word	0x10000001
 80092c4:	04000120 	.word	0x04000120
 80092c8:	0800a425 	.word	0x0800a425

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	f040 810f 	bne.w	80094f4 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	f003 0310 	and.w	r3, r3, #16
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f000 8109 	beq.w	80094f4 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	f003 0310 	and.w	r3, r3, #16
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 8103 	beq.w	80094f4 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2210      	movs	r2, #16
 80092f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009300:	2b40      	cmp	r3, #64	; 0x40
 8009302:	f040 80bb 	bne.w	800947c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a96      	ldr	r2, [pc, #600]	; (8009568 <HAL_UART_IRQHandler+0x4e4>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d059      	beq.n	80093c6 <HAL_UART_IRQHandler+0x342>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a94      	ldr	r2, [pc, #592]	; (800956c <HAL_UART_IRQHandler+0x4e8>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d053      	beq.n	80093c6 <HAL_UART_IRQHandler+0x342>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a92      	ldr	r2, [pc, #584]	; (8009570 <HAL_UART_IRQHandler+0x4ec>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d04d      	beq.n	80093c6 <HAL_UART_IRQHandler+0x342>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a90      	ldr	r2, [pc, #576]	; (8009574 <HAL_UART_IRQHandler+0x4f0>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d047      	beq.n	80093c6 <HAL_UART_IRQHandler+0x342>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a8e      	ldr	r2, [pc, #568]	; (8009578 <HAL_UART_IRQHandler+0x4f4>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d041      	beq.n	80093c6 <HAL_UART_IRQHandler+0x342>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a8c      	ldr	r2, [pc, #560]	; (800957c <HAL_UART_IRQHandler+0x4f8>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d03b      	beq.n	80093c6 <HAL_UART_IRQHandler+0x342>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a8a      	ldr	r2, [pc, #552]	; (8009580 <HAL_UART_IRQHandler+0x4fc>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d035      	beq.n	80093c6 <HAL_UART_IRQHandler+0x342>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a88      	ldr	r2, [pc, #544]	; (8009584 <HAL_UART_IRQHandler+0x500>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d02f      	beq.n	80093c6 <HAL_UART_IRQHandler+0x342>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a86      	ldr	r2, [pc, #536]	; (8009588 <HAL_UART_IRQHandler+0x504>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d029      	beq.n	80093c6 <HAL_UART_IRQHandler+0x342>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a84      	ldr	r2, [pc, #528]	; (800958c <HAL_UART_IRQHandler+0x508>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d023      	beq.n	80093c6 <HAL_UART_IRQHandler+0x342>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a82      	ldr	r2, [pc, #520]	; (8009590 <HAL_UART_IRQHandler+0x50c>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d01d      	beq.n	80093c6 <HAL_UART_IRQHandler+0x342>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a80      	ldr	r2, [pc, #512]	; (8009594 <HAL_UART_IRQHandler+0x510>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d017      	beq.n	80093c6 <HAL_UART_IRQHandler+0x342>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4a7e      	ldr	r2, [pc, #504]	; (8009598 <HAL_UART_IRQHandler+0x514>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d011      	beq.n	80093c6 <HAL_UART_IRQHandler+0x342>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a7c      	ldr	r2, [pc, #496]	; (800959c <HAL_UART_IRQHandler+0x518>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d00b      	beq.n	80093c6 <HAL_UART_IRQHandler+0x342>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a7a      	ldr	r2, [pc, #488]	; (80095a0 <HAL_UART_IRQHandler+0x51c>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d005      	beq.n	80093c6 <HAL_UART_IRQHandler+0x342>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a78      	ldr	r2, [pc, #480]	; (80095a4 <HAL_UART_IRQHandler+0x520>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d105      	bne.n	80093d2 <HAL_UART_IRQHandler+0x34e>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	e004      	b.n	80093dc <HAL_UART_IRQHandler+0x358>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	b29b      	uxth	r3, r3
 80093dc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80093de:	893b      	ldrh	r3, [r7, #8]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	f000 8101 	beq.w	80095e8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093ec:	893a      	ldrh	r2, [r7, #8]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	f080 80fa 	bcs.w	80095e8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	893a      	ldrh	r2, [r7, #8]
 80093f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009400:	69db      	ldr	r3, [r3, #28]
 8009402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009406:	d02b      	beq.n	8009460 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009416:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689a      	ldr	r2, [r3, #8]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f022 0201 	bic.w	r2, r2, #1
 8009426:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	689a      	ldr	r2, [r3, #8]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009436:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2220      	movs	r2, #32
 800943c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f022 0210 	bic.w	r2, r2, #16
 8009454:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800945a:	4618      	mov	r0, r3
 800945c:	f7f9 fda0 	bl	8002fa0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800946c:	b29b      	uxth	r3, r3
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	b29b      	uxth	r3, r3
 8009472:	4619      	mov	r1, r3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f8c9 	bl	800960c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800947a:	e0b5      	b.n	80095e8 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009488:	b29b      	uxth	r3, r3
 800948a:	1ad3      	subs	r3, r2, r3
 800948c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009494:	b29b      	uxth	r3, r3
 8009496:	2b00      	cmp	r3, #0
 8009498:	f000 80a8 	beq.w	80095ec <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800949c:	897b      	ldrh	r3, [r7, #10]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 80a4 	beq.w	80095ec <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80094b2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6899      	ldr	r1, [r3, #8]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	4b3a      	ldr	r3, [pc, #232]	; (80095a8 <HAL_UART_IRQHandler+0x524>)
 80094c0:	400b      	ands	r3, r1
 80094c2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2220      	movs	r2, #32
 80094c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f022 0210 	bic.w	r2, r2, #16
 80094e6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094e8:	897b      	ldrh	r3, [r7, #10]
 80094ea:	4619      	mov	r1, r3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f88d 	bl	800960c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094f2:	e07b      	b.n	80095ec <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00d      	beq.n	800951a <HAL_UART_IRQHandler+0x496>
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009504:	2b00      	cmp	r3, #0
 8009506:	d008      	beq.n	800951a <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009510:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 ffb6 	bl	800a484 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009518:	e06b      	b.n	80095f2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009520:	2b00      	cmp	r3, #0
 8009522:	d012      	beq.n	800954a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800952a:	2b00      	cmp	r3, #0
 800952c:	d104      	bne.n	8009538 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d008      	beq.n	800954a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800953c:	2b00      	cmp	r3, #0
 800953e:	d057      	beq.n	80095f0 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	4798      	blx	r3
    }
    return;
 8009548:	e052      	b.n	80095f0 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009550:	2b00      	cmp	r3, #0
 8009552:	d02b      	beq.n	80095ac <HAL_UART_IRQHandler+0x528>
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800955a:	2b00      	cmp	r3, #0
 800955c:	d026      	beq.n	80095ac <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 ff76 	bl	800a450 <UART_EndTransmit_IT>
    return;
 8009564:	e045      	b.n	80095f2 <HAL_UART_IRQHandler+0x56e>
 8009566:	bf00      	nop
 8009568:	40020010 	.word	0x40020010
 800956c:	40020028 	.word	0x40020028
 8009570:	40020040 	.word	0x40020040
 8009574:	40020058 	.word	0x40020058
 8009578:	40020070 	.word	0x40020070
 800957c:	40020088 	.word	0x40020088
 8009580:	400200a0 	.word	0x400200a0
 8009584:	400200b8 	.word	0x400200b8
 8009588:	40020410 	.word	0x40020410
 800958c:	40020428 	.word	0x40020428
 8009590:	40020440 	.word	0x40020440
 8009594:	40020458 	.word	0x40020458
 8009598:	40020470 	.word	0x40020470
 800959c:	40020488 	.word	0x40020488
 80095a0:	400204a0 	.word	0x400204a0
 80095a4:	400204b8 	.word	0x400204b8
 80095a8:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d008      	beq.n	80095c8 <HAL_UART_IRQHandler+0x544>
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d003      	beq.n	80095c8 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 ff73 	bl	800a4ac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095c6:	e014      	b.n	80095f2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00f      	beq.n	80095f2 <HAL_UART_IRQHandler+0x56e>
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	da0c      	bge.n	80095f2 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 ff5d 	bl	800a498 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095de:	e008      	b.n	80095f2 <HAL_UART_IRQHandler+0x56e>
      return;
 80095e0:	bf00      	nop
 80095e2:	e006      	b.n	80095f2 <HAL_UART_IRQHandler+0x56e>
    return;
 80095e4:	bf00      	nop
 80095e6:	e004      	b.n	80095f2 <HAL_UART_IRQHandler+0x56e>
      return;
 80095e8:	bf00      	nop
 80095ea:	e002      	b.n	80095f2 <HAL_UART_IRQHandler+0x56e>
      return;
 80095ec:	bf00      	nop
 80095ee:	e000      	b.n	80095f2 <HAL_UART_IRQHandler+0x56e>
    return;
 80095f0:	bf00      	nop
  }
}
 80095f2:	3720      	adds	r7, #32
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009600:	bf00      	nop
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009624:	b5b0      	push	{r4, r5, r7, lr}
 8009626:	b08e      	sub	sp, #56	; 0x38
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	689a      	ldr	r2, [r3, #8]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	431a      	orrs	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	695b      	ldr	r3, [r3, #20]
 8009640:	431a      	orrs	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	69db      	ldr	r3, [r3, #28]
 8009646:	4313      	orrs	r3, r2
 8009648:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	4bbf      	ldr	r3, [pc, #764]	; (8009950 <UART_SetConfig+0x32c>)
 8009652:	4013      	ands	r3, r2
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	6812      	ldr	r2, [r2, #0]
 8009658:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800965a:	430b      	orrs	r3, r1
 800965c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68da      	ldr	r2, [r3, #12]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	430a      	orrs	r2, r1
 8009672:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4ab5      	ldr	r2, [pc, #724]	; (8009954 <UART_SetConfig+0x330>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d004      	beq.n	800968e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a1b      	ldr	r3, [r3, #32]
 8009688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800968a:	4313      	orrs	r3, r2
 800968c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	689a      	ldr	r2, [r3, #8]
 8009694:	4bb0      	ldr	r3, [pc, #704]	; (8009958 <UART_SetConfig+0x334>)
 8009696:	4013      	ands	r3, r2
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	6812      	ldr	r2, [r2, #0]
 800969c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800969e:	430b      	orrs	r3, r1
 80096a0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a8:	f023 010f 	bic.w	r1, r3, #15
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4aa7      	ldr	r2, [pc, #668]	; (800995c <UART_SetConfig+0x338>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d176      	bne.n	80097b0 <UART_SetConfig+0x18c>
 80096c2:	4ba7      	ldr	r3, [pc, #668]	; (8009960 <UART_SetConfig+0x33c>)
 80096c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096ca:	2b28      	cmp	r3, #40	; 0x28
 80096cc:	d86c      	bhi.n	80097a8 <UART_SetConfig+0x184>
 80096ce:	a201      	add	r2, pc, #4	; (adr r2, 80096d4 <UART_SetConfig+0xb0>)
 80096d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d4:	08009779 	.word	0x08009779
 80096d8:	080097a9 	.word	0x080097a9
 80096dc:	080097a9 	.word	0x080097a9
 80096e0:	080097a9 	.word	0x080097a9
 80096e4:	080097a9 	.word	0x080097a9
 80096e8:	080097a9 	.word	0x080097a9
 80096ec:	080097a9 	.word	0x080097a9
 80096f0:	080097a9 	.word	0x080097a9
 80096f4:	08009781 	.word	0x08009781
 80096f8:	080097a9 	.word	0x080097a9
 80096fc:	080097a9 	.word	0x080097a9
 8009700:	080097a9 	.word	0x080097a9
 8009704:	080097a9 	.word	0x080097a9
 8009708:	080097a9 	.word	0x080097a9
 800970c:	080097a9 	.word	0x080097a9
 8009710:	080097a9 	.word	0x080097a9
 8009714:	08009789 	.word	0x08009789
 8009718:	080097a9 	.word	0x080097a9
 800971c:	080097a9 	.word	0x080097a9
 8009720:	080097a9 	.word	0x080097a9
 8009724:	080097a9 	.word	0x080097a9
 8009728:	080097a9 	.word	0x080097a9
 800972c:	080097a9 	.word	0x080097a9
 8009730:	080097a9 	.word	0x080097a9
 8009734:	08009791 	.word	0x08009791
 8009738:	080097a9 	.word	0x080097a9
 800973c:	080097a9 	.word	0x080097a9
 8009740:	080097a9 	.word	0x080097a9
 8009744:	080097a9 	.word	0x080097a9
 8009748:	080097a9 	.word	0x080097a9
 800974c:	080097a9 	.word	0x080097a9
 8009750:	080097a9 	.word	0x080097a9
 8009754:	08009799 	.word	0x08009799
 8009758:	080097a9 	.word	0x080097a9
 800975c:	080097a9 	.word	0x080097a9
 8009760:	080097a9 	.word	0x080097a9
 8009764:	080097a9 	.word	0x080097a9
 8009768:	080097a9 	.word	0x080097a9
 800976c:	080097a9 	.word	0x080097a9
 8009770:	080097a9 	.word	0x080097a9
 8009774:	080097a1 	.word	0x080097a1
 8009778:	2301      	movs	r3, #1
 800977a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800977e:	e222      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009780:	2304      	movs	r3, #4
 8009782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009786:	e21e      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009788:	2308      	movs	r3, #8
 800978a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800978e:	e21a      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009790:	2310      	movs	r3, #16
 8009792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009796:	e216      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009798:	2320      	movs	r3, #32
 800979a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800979e:	e212      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 80097a0:	2340      	movs	r3, #64	; 0x40
 80097a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097a6:	e20e      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 80097a8:	2380      	movs	r3, #128	; 0x80
 80097aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ae:	e20a      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a6b      	ldr	r2, [pc, #428]	; (8009964 <UART_SetConfig+0x340>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d130      	bne.n	800981c <UART_SetConfig+0x1f8>
 80097ba:	4b69      	ldr	r3, [pc, #420]	; (8009960 <UART_SetConfig+0x33c>)
 80097bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097be:	f003 0307 	and.w	r3, r3, #7
 80097c2:	2b05      	cmp	r3, #5
 80097c4:	d826      	bhi.n	8009814 <UART_SetConfig+0x1f0>
 80097c6:	a201      	add	r2, pc, #4	; (adr r2, 80097cc <UART_SetConfig+0x1a8>)
 80097c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097cc:	080097e5 	.word	0x080097e5
 80097d0:	080097ed 	.word	0x080097ed
 80097d4:	080097f5 	.word	0x080097f5
 80097d8:	080097fd 	.word	0x080097fd
 80097dc:	08009805 	.word	0x08009805
 80097e0:	0800980d 	.word	0x0800980d
 80097e4:	2300      	movs	r3, #0
 80097e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ea:	e1ec      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 80097ec:	2304      	movs	r3, #4
 80097ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097f2:	e1e8      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 80097f4:	2308      	movs	r3, #8
 80097f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097fa:	e1e4      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 80097fc:	2310      	movs	r3, #16
 80097fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009802:	e1e0      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009804:	2320      	movs	r3, #32
 8009806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800980a:	e1dc      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 800980c:	2340      	movs	r3, #64	; 0x40
 800980e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009812:	e1d8      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009814:	2380      	movs	r3, #128	; 0x80
 8009816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981a:	e1d4      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a51      	ldr	r2, [pc, #324]	; (8009968 <UART_SetConfig+0x344>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d130      	bne.n	8009888 <UART_SetConfig+0x264>
 8009826:	4b4e      	ldr	r3, [pc, #312]	; (8009960 <UART_SetConfig+0x33c>)
 8009828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800982a:	f003 0307 	and.w	r3, r3, #7
 800982e:	2b05      	cmp	r3, #5
 8009830:	d826      	bhi.n	8009880 <UART_SetConfig+0x25c>
 8009832:	a201      	add	r2, pc, #4	; (adr r2, 8009838 <UART_SetConfig+0x214>)
 8009834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009838:	08009851 	.word	0x08009851
 800983c:	08009859 	.word	0x08009859
 8009840:	08009861 	.word	0x08009861
 8009844:	08009869 	.word	0x08009869
 8009848:	08009871 	.word	0x08009871
 800984c:	08009879 	.word	0x08009879
 8009850:	2300      	movs	r3, #0
 8009852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009856:	e1b6      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009858:	2304      	movs	r3, #4
 800985a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800985e:	e1b2      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009860:	2308      	movs	r3, #8
 8009862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009866:	e1ae      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009868:	2310      	movs	r3, #16
 800986a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800986e:	e1aa      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009870:	2320      	movs	r3, #32
 8009872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009876:	e1a6      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009878:	2340      	movs	r3, #64	; 0x40
 800987a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800987e:	e1a2      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009880:	2380      	movs	r3, #128	; 0x80
 8009882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009886:	e19e      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a37      	ldr	r2, [pc, #220]	; (800996c <UART_SetConfig+0x348>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d130      	bne.n	80098f4 <UART_SetConfig+0x2d0>
 8009892:	4b33      	ldr	r3, [pc, #204]	; (8009960 <UART_SetConfig+0x33c>)
 8009894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009896:	f003 0307 	and.w	r3, r3, #7
 800989a:	2b05      	cmp	r3, #5
 800989c:	d826      	bhi.n	80098ec <UART_SetConfig+0x2c8>
 800989e:	a201      	add	r2, pc, #4	; (adr r2, 80098a4 <UART_SetConfig+0x280>)
 80098a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a4:	080098bd 	.word	0x080098bd
 80098a8:	080098c5 	.word	0x080098c5
 80098ac:	080098cd 	.word	0x080098cd
 80098b0:	080098d5 	.word	0x080098d5
 80098b4:	080098dd 	.word	0x080098dd
 80098b8:	080098e5 	.word	0x080098e5
 80098bc:	2300      	movs	r3, #0
 80098be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098c2:	e180      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 80098c4:	2304      	movs	r3, #4
 80098c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ca:	e17c      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 80098cc:	2308      	movs	r3, #8
 80098ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098d2:	e178      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 80098d4:	2310      	movs	r3, #16
 80098d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098da:	e174      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 80098dc:	2320      	movs	r3, #32
 80098de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098e2:	e170      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 80098e4:	2340      	movs	r3, #64	; 0x40
 80098e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ea:	e16c      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 80098ec:	2380      	movs	r3, #128	; 0x80
 80098ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098f2:	e168      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a1d      	ldr	r2, [pc, #116]	; (8009970 <UART_SetConfig+0x34c>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d142      	bne.n	8009984 <UART_SetConfig+0x360>
 80098fe:	4b18      	ldr	r3, [pc, #96]	; (8009960 <UART_SetConfig+0x33c>)
 8009900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009902:	f003 0307 	and.w	r3, r3, #7
 8009906:	2b05      	cmp	r3, #5
 8009908:	d838      	bhi.n	800997c <UART_SetConfig+0x358>
 800990a:	a201      	add	r2, pc, #4	; (adr r2, 8009910 <UART_SetConfig+0x2ec>)
 800990c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009910:	08009929 	.word	0x08009929
 8009914:	08009931 	.word	0x08009931
 8009918:	08009939 	.word	0x08009939
 800991c:	08009941 	.word	0x08009941
 8009920:	08009949 	.word	0x08009949
 8009924:	08009975 	.word	0x08009975
 8009928:	2300      	movs	r3, #0
 800992a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800992e:	e14a      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009930:	2304      	movs	r3, #4
 8009932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009936:	e146      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009938:	2308      	movs	r3, #8
 800993a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800993e:	e142      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009940:	2310      	movs	r3, #16
 8009942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009946:	e13e      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009948:	2320      	movs	r3, #32
 800994a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800994e:	e13a      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009950:	cfff69f3 	.word	0xcfff69f3
 8009954:	58000c00 	.word	0x58000c00
 8009958:	11fff4ff 	.word	0x11fff4ff
 800995c:	40011000 	.word	0x40011000
 8009960:	58024400 	.word	0x58024400
 8009964:	40004400 	.word	0x40004400
 8009968:	40004800 	.word	0x40004800
 800996c:	40004c00 	.word	0x40004c00
 8009970:	40005000 	.word	0x40005000
 8009974:	2340      	movs	r3, #64	; 0x40
 8009976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800997a:	e124      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 800997c:	2380      	movs	r3, #128	; 0x80
 800997e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009982:	e120      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4acc      	ldr	r2, [pc, #816]	; (8009cbc <UART_SetConfig+0x698>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d176      	bne.n	8009a7c <UART_SetConfig+0x458>
 800998e:	4bcc      	ldr	r3, [pc, #816]	; (8009cc0 <UART_SetConfig+0x69c>)
 8009990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009992:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009996:	2b28      	cmp	r3, #40	; 0x28
 8009998:	d86c      	bhi.n	8009a74 <UART_SetConfig+0x450>
 800999a:	a201      	add	r2, pc, #4	; (adr r2, 80099a0 <UART_SetConfig+0x37c>)
 800999c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a0:	08009a45 	.word	0x08009a45
 80099a4:	08009a75 	.word	0x08009a75
 80099a8:	08009a75 	.word	0x08009a75
 80099ac:	08009a75 	.word	0x08009a75
 80099b0:	08009a75 	.word	0x08009a75
 80099b4:	08009a75 	.word	0x08009a75
 80099b8:	08009a75 	.word	0x08009a75
 80099bc:	08009a75 	.word	0x08009a75
 80099c0:	08009a4d 	.word	0x08009a4d
 80099c4:	08009a75 	.word	0x08009a75
 80099c8:	08009a75 	.word	0x08009a75
 80099cc:	08009a75 	.word	0x08009a75
 80099d0:	08009a75 	.word	0x08009a75
 80099d4:	08009a75 	.word	0x08009a75
 80099d8:	08009a75 	.word	0x08009a75
 80099dc:	08009a75 	.word	0x08009a75
 80099e0:	08009a55 	.word	0x08009a55
 80099e4:	08009a75 	.word	0x08009a75
 80099e8:	08009a75 	.word	0x08009a75
 80099ec:	08009a75 	.word	0x08009a75
 80099f0:	08009a75 	.word	0x08009a75
 80099f4:	08009a75 	.word	0x08009a75
 80099f8:	08009a75 	.word	0x08009a75
 80099fc:	08009a75 	.word	0x08009a75
 8009a00:	08009a5d 	.word	0x08009a5d
 8009a04:	08009a75 	.word	0x08009a75
 8009a08:	08009a75 	.word	0x08009a75
 8009a0c:	08009a75 	.word	0x08009a75
 8009a10:	08009a75 	.word	0x08009a75
 8009a14:	08009a75 	.word	0x08009a75
 8009a18:	08009a75 	.word	0x08009a75
 8009a1c:	08009a75 	.word	0x08009a75
 8009a20:	08009a65 	.word	0x08009a65
 8009a24:	08009a75 	.word	0x08009a75
 8009a28:	08009a75 	.word	0x08009a75
 8009a2c:	08009a75 	.word	0x08009a75
 8009a30:	08009a75 	.word	0x08009a75
 8009a34:	08009a75 	.word	0x08009a75
 8009a38:	08009a75 	.word	0x08009a75
 8009a3c:	08009a75 	.word	0x08009a75
 8009a40:	08009a6d 	.word	0x08009a6d
 8009a44:	2301      	movs	r3, #1
 8009a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a4a:	e0bc      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009a4c:	2304      	movs	r3, #4
 8009a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a52:	e0b8      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009a54:	2308      	movs	r3, #8
 8009a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a5a:	e0b4      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009a5c:	2310      	movs	r3, #16
 8009a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a62:	e0b0      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009a64:	2320      	movs	r3, #32
 8009a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a6a:	e0ac      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009a6c:	2340      	movs	r3, #64	; 0x40
 8009a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a72:	e0a8      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009a74:	2380      	movs	r3, #128	; 0x80
 8009a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a7a:	e0a4      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a90      	ldr	r2, [pc, #576]	; (8009cc4 <UART_SetConfig+0x6a0>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d130      	bne.n	8009ae8 <UART_SetConfig+0x4c4>
 8009a86:	4b8e      	ldr	r3, [pc, #568]	; (8009cc0 <UART_SetConfig+0x69c>)
 8009a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a8a:	f003 0307 	and.w	r3, r3, #7
 8009a8e:	2b05      	cmp	r3, #5
 8009a90:	d826      	bhi.n	8009ae0 <UART_SetConfig+0x4bc>
 8009a92:	a201      	add	r2, pc, #4	; (adr r2, 8009a98 <UART_SetConfig+0x474>)
 8009a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a98:	08009ab1 	.word	0x08009ab1
 8009a9c:	08009ab9 	.word	0x08009ab9
 8009aa0:	08009ac1 	.word	0x08009ac1
 8009aa4:	08009ac9 	.word	0x08009ac9
 8009aa8:	08009ad1 	.word	0x08009ad1
 8009aac:	08009ad9 	.word	0x08009ad9
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ab6:	e086      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009ab8:	2304      	movs	r3, #4
 8009aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009abe:	e082      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009ac0:	2308      	movs	r3, #8
 8009ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ac6:	e07e      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009ac8:	2310      	movs	r3, #16
 8009aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ace:	e07a      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009ad0:	2320      	movs	r3, #32
 8009ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ad6:	e076      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009ad8:	2340      	movs	r3, #64	; 0x40
 8009ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ade:	e072      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009ae0:	2380      	movs	r3, #128	; 0x80
 8009ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae6:	e06e      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a76      	ldr	r2, [pc, #472]	; (8009cc8 <UART_SetConfig+0x6a4>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d130      	bne.n	8009b54 <UART_SetConfig+0x530>
 8009af2:	4b73      	ldr	r3, [pc, #460]	; (8009cc0 <UART_SetConfig+0x69c>)
 8009af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009af6:	f003 0307 	and.w	r3, r3, #7
 8009afa:	2b05      	cmp	r3, #5
 8009afc:	d826      	bhi.n	8009b4c <UART_SetConfig+0x528>
 8009afe:	a201      	add	r2, pc, #4	; (adr r2, 8009b04 <UART_SetConfig+0x4e0>)
 8009b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b04:	08009b1d 	.word	0x08009b1d
 8009b08:	08009b25 	.word	0x08009b25
 8009b0c:	08009b2d 	.word	0x08009b2d
 8009b10:	08009b35 	.word	0x08009b35
 8009b14:	08009b3d 	.word	0x08009b3d
 8009b18:	08009b45 	.word	0x08009b45
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b22:	e050      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009b24:	2304      	movs	r3, #4
 8009b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b2a:	e04c      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009b2c:	2308      	movs	r3, #8
 8009b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b32:	e048      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009b34:	2310      	movs	r3, #16
 8009b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b3a:	e044      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009b3c:	2320      	movs	r3, #32
 8009b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b42:	e040      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009b44:	2340      	movs	r3, #64	; 0x40
 8009b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4a:	e03c      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009b4c:	2380      	movs	r3, #128	; 0x80
 8009b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b52:	e038      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a5c      	ldr	r2, [pc, #368]	; (8009ccc <UART_SetConfig+0x6a8>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d130      	bne.n	8009bc0 <UART_SetConfig+0x59c>
 8009b5e:	4b58      	ldr	r3, [pc, #352]	; (8009cc0 <UART_SetConfig+0x69c>)
 8009b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b62:	f003 0307 	and.w	r3, r3, #7
 8009b66:	2b05      	cmp	r3, #5
 8009b68:	d826      	bhi.n	8009bb8 <UART_SetConfig+0x594>
 8009b6a:	a201      	add	r2, pc, #4	; (adr r2, 8009b70 <UART_SetConfig+0x54c>)
 8009b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b70:	08009b89 	.word	0x08009b89
 8009b74:	08009b91 	.word	0x08009b91
 8009b78:	08009b99 	.word	0x08009b99
 8009b7c:	08009ba1 	.word	0x08009ba1
 8009b80:	08009ba9 	.word	0x08009ba9
 8009b84:	08009bb1 	.word	0x08009bb1
 8009b88:	2302      	movs	r3, #2
 8009b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b8e:	e01a      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009b90:	2304      	movs	r3, #4
 8009b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b96:	e016      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009b98:	2308      	movs	r3, #8
 8009b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9e:	e012      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009ba0:	2310      	movs	r3, #16
 8009ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ba6:	e00e      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009ba8:	2320      	movs	r3, #32
 8009baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bae:	e00a      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009bb0:	2340      	movs	r3, #64	; 0x40
 8009bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bb6:	e006      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009bb8:	2380      	movs	r3, #128	; 0x80
 8009bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bbe:	e002      	b.n	8009bc6 <UART_SetConfig+0x5a2>
 8009bc0:	2380      	movs	r3, #128	; 0x80
 8009bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a40      	ldr	r2, [pc, #256]	; (8009ccc <UART_SetConfig+0x6a8>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	f040 80ef 	bne.w	8009db0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009bd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009bd6:	2b20      	cmp	r3, #32
 8009bd8:	dc46      	bgt.n	8009c68 <UART_SetConfig+0x644>
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	f2c0 8081 	blt.w	8009ce2 <UART_SetConfig+0x6be>
 8009be0:	3b02      	subs	r3, #2
 8009be2:	2b1e      	cmp	r3, #30
 8009be4:	d87d      	bhi.n	8009ce2 <UART_SetConfig+0x6be>
 8009be6:	a201      	add	r2, pc, #4	; (adr r2, 8009bec <UART_SetConfig+0x5c8>)
 8009be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bec:	08009c6f 	.word	0x08009c6f
 8009bf0:	08009ce3 	.word	0x08009ce3
 8009bf4:	08009c77 	.word	0x08009c77
 8009bf8:	08009ce3 	.word	0x08009ce3
 8009bfc:	08009ce3 	.word	0x08009ce3
 8009c00:	08009ce3 	.word	0x08009ce3
 8009c04:	08009c87 	.word	0x08009c87
 8009c08:	08009ce3 	.word	0x08009ce3
 8009c0c:	08009ce3 	.word	0x08009ce3
 8009c10:	08009ce3 	.word	0x08009ce3
 8009c14:	08009ce3 	.word	0x08009ce3
 8009c18:	08009ce3 	.word	0x08009ce3
 8009c1c:	08009ce3 	.word	0x08009ce3
 8009c20:	08009ce3 	.word	0x08009ce3
 8009c24:	08009c97 	.word	0x08009c97
 8009c28:	08009ce3 	.word	0x08009ce3
 8009c2c:	08009ce3 	.word	0x08009ce3
 8009c30:	08009ce3 	.word	0x08009ce3
 8009c34:	08009ce3 	.word	0x08009ce3
 8009c38:	08009ce3 	.word	0x08009ce3
 8009c3c:	08009ce3 	.word	0x08009ce3
 8009c40:	08009ce3 	.word	0x08009ce3
 8009c44:	08009ce3 	.word	0x08009ce3
 8009c48:	08009ce3 	.word	0x08009ce3
 8009c4c:	08009ce3 	.word	0x08009ce3
 8009c50:	08009ce3 	.word	0x08009ce3
 8009c54:	08009ce3 	.word	0x08009ce3
 8009c58:	08009ce3 	.word	0x08009ce3
 8009c5c:	08009ce3 	.word	0x08009ce3
 8009c60:	08009ce3 	.word	0x08009ce3
 8009c64:	08009cd5 	.word	0x08009cd5
 8009c68:	2b40      	cmp	r3, #64	; 0x40
 8009c6a:	d036      	beq.n	8009cda <UART_SetConfig+0x6b6>
 8009c6c:	e039      	b.n	8009ce2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009c6e:	f7fd f959 	bl	8006f24 <HAL_RCCEx_GetD3PCLK1Freq>
 8009c72:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009c74:	e03b      	b.n	8009cee <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c76:	f107 0314 	add.w	r3, r7, #20
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fd f968 	bl	8006f50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c84:	e033      	b.n	8009cee <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c86:	f107 0308 	add.w	r3, r7, #8
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f7fd fab4 	bl	80071f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009c94:	e02b      	b.n	8009cee <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c96:	4b0a      	ldr	r3, [pc, #40]	; (8009cc0 <UART_SetConfig+0x69c>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 0320 	and.w	r3, r3, #32
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d009      	beq.n	8009cb6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ca2:	4b07      	ldr	r3, [pc, #28]	; (8009cc0 <UART_SetConfig+0x69c>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	08db      	lsrs	r3, r3, #3
 8009ca8:	f003 0303 	and.w	r3, r3, #3
 8009cac:	4a08      	ldr	r2, [pc, #32]	; (8009cd0 <UART_SetConfig+0x6ac>)
 8009cae:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009cb4:	e01b      	b.n	8009cee <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8009cb6:	4b06      	ldr	r3, [pc, #24]	; (8009cd0 <UART_SetConfig+0x6ac>)
 8009cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cba:	e018      	b.n	8009cee <UART_SetConfig+0x6ca>
 8009cbc:	40011400 	.word	0x40011400
 8009cc0:	58024400 	.word	0x58024400
 8009cc4:	40007800 	.word	0x40007800
 8009cc8:	40007c00 	.word	0x40007c00
 8009ccc:	58000c00 	.word	0x58000c00
 8009cd0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cd4:	4bc4      	ldr	r3, [pc, #784]	; (8009fe8 <UART_SetConfig+0x9c4>)
 8009cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cd8:	e009      	b.n	8009cee <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ce0:	e005      	b.n	8009cee <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009cec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f000 81da 	beq.w	800a0aa <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfa:	4abc      	ldr	r2, [pc, #752]	; (8009fec <UART_SetConfig+0x9c8>)
 8009cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d00:	461a      	mov	r2, r3
 8009d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d04:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d08:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	685a      	ldr	r2, [r3, #4]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	005b      	lsls	r3, r3, #1
 8009d12:	4413      	add	r3, r2
 8009d14:	6a3a      	ldr	r2, [r7, #32]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d305      	bcc.n	8009d26 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d20:	6a3a      	ldr	r2, [r7, #32]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d903      	bls.n	8009d2e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009d2c:	e1bd      	b.n	800a0aa <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d30:	4618      	mov	r0, r3
 8009d32:	f04f 0100 	mov.w	r1, #0
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3a:	4aac      	ldr	r2, [pc, #688]	; (8009fec <UART_SetConfig+0x9c8>)
 8009d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	f04f 0300 	mov.w	r3, #0
 8009d46:	f7f6 fac7 	bl	80002d8 <__aeabi_uldivmod>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	4610      	mov	r0, r2
 8009d50:	4619      	mov	r1, r3
 8009d52:	f04f 0200 	mov.w	r2, #0
 8009d56:	f04f 0300 	mov.w	r3, #0
 8009d5a:	020b      	lsls	r3, r1, #8
 8009d5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d60:	0202      	lsls	r2, r0, #8
 8009d62:	6879      	ldr	r1, [r7, #4]
 8009d64:	6849      	ldr	r1, [r1, #4]
 8009d66:	0849      	lsrs	r1, r1, #1
 8009d68:	4608      	mov	r0, r1
 8009d6a:	f04f 0100 	mov.w	r1, #0
 8009d6e:	1814      	adds	r4, r2, r0
 8009d70:	eb43 0501 	adc.w	r5, r3, r1
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	461a      	mov	r2, r3
 8009d7a:	f04f 0300 	mov.w	r3, #0
 8009d7e:	4620      	mov	r0, r4
 8009d80:	4629      	mov	r1, r5
 8009d82:	f7f6 faa9 	bl	80002d8 <__aeabi_uldivmod>
 8009d86:	4602      	mov	r2, r0
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d94:	d308      	bcc.n	8009da8 <UART_SetConfig+0x784>
 8009d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d9c:	d204      	bcs.n	8009da8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009da4:	60da      	str	r2, [r3, #12]
 8009da6:	e180      	b.n	800a0aa <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009dae:	e17c      	b.n	800a0aa <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	69db      	ldr	r3, [r3, #28]
 8009db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009db8:	f040 80bf 	bne.w	8009f3a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8009dbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009dc0:	2b20      	cmp	r3, #32
 8009dc2:	dc49      	bgt.n	8009e58 <UART_SetConfig+0x834>
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	db7c      	blt.n	8009ec2 <UART_SetConfig+0x89e>
 8009dc8:	2b20      	cmp	r3, #32
 8009dca:	d87a      	bhi.n	8009ec2 <UART_SetConfig+0x89e>
 8009dcc:	a201      	add	r2, pc, #4	; (adr r2, 8009dd4 <UART_SetConfig+0x7b0>)
 8009dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd2:	bf00      	nop
 8009dd4:	08009e5f 	.word	0x08009e5f
 8009dd8:	08009e67 	.word	0x08009e67
 8009ddc:	08009ec3 	.word	0x08009ec3
 8009de0:	08009ec3 	.word	0x08009ec3
 8009de4:	08009e6f 	.word	0x08009e6f
 8009de8:	08009ec3 	.word	0x08009ec3
 8009dec:	08009ec3 	.word	0x08009ec3
 8009df0:	08009ec3 	.word	0x08009ec3
 8009df4:	08009e7f 	.word	0x08009e7f
 8009df8:	08009ec3 	.word	0x08009ec3
 8009dfc:	08009ec3 	.word	0x08009ec3
 8009e00:	08009ec3 	.word	0x08009ec3
 8009e04:	08009ec3 	.word	0x08009ec3
 8009e08:	08009ec3 	.word	0x08009ec3
 8009e0c:	08009ec3 	.word	0x08009ec3
 8009e10:	08009ec3 	.word	0x08009ec3
 8009e14:	08009e8f 	.word	0x08009e8f
 8009e18:	08009ec3 	.word	0x08009ec3
 8009e1c:	08009ec3 	.word	0x08009ec3
 8009e20:	08009ec3 	.word	0x08009ec3
 8009e24:	08009ec3 	.word	0x08009ec3
 8009e28:	08009ec3 	.word	0x08009ec3
 8009e2c:	08009ec3 	.word	0x08009ec3
 8009e30:	08009ec3 	.word	0x08009ec3
 8009e34:	08009ec3 	.word	0x08009ec3
 8009e38:	08009ec3 	.word	0x08009ec3
 8009e3c:	08009ec3 	.word	0x08009ec3
 8009e40:	08009ec3 	.word	0x08009ec3
 8009e44:	08009ec3 	.word	0x08009ec3
 8009e48:	08009ec3 	.word	0x08009ec3
 8009e4c:	08009ec3 	.word	0x08009ec3
 8009e50:	08009ec3 	.word	0x08009ec3
 8009e54:	08009eb5 	.word	0x08009eb5
 8009e58:	2b40      	cmp	r3, #64	; 0x40
 8009e5a:	d02e      	beq.n	8009eba <UART_SetConfig+0x896>
 8009e5c:	e031      	b.n	8009ec2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e5e:	f7fc f8f5 	bl	800604c <HAL_RCC_GetPCLK1Freq>
 8009e62:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009e64:	e033      	b.n	8009ece <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e66:	f7fc f907 	bl	8006078 <HAL_RCC_GetPCLK2Freq>
 8009e6a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009e6c:	e02f      	b.n	8009ece <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e6e:	f107 0314 	add.w	r3, r7, #20
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fd f86c 	bl	8006f50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e7c:	e027      	b.n	8009ece <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e7e:	f107 0308 	add.w	r3, r7, #8
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fd f9b8 	bl	80071f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009e8c:	e01f      	b.n	8009ece <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e8e:	4b58      	ldr	r3, [pc, #352]	; (8009ff0 <UART_SetConfig+0x9cc>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 0320 	and.w	r3, r3, #32
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d009      	beq.n	8009eae <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e9a:	4b55      	ldr	r3, [pc, #340]	; (8009ff0 <UART_SetConfig+0x9cc>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	08db      	lsrs	r3, r3, #3
 8009ea0:	f003 0303 	and.w	r3, r3, #3
 8009ea4:	4a53      	ldr	r2, [pc, #332]	; (8009ff4 <UART_SetConfig+0x9d0>)
 8009ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8009eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009eac:	e00f      	b.n	8009ece <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8009eae:	4b51      	ldr	r3, [pc, #324]	; (8009ff4 <UART_SetConfig+0x9d0>)
 8009eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009eb2:	e00c      	b.n	8009ece <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009eb4:	4b4c      	ldr	r3, [pc, #304]	; (8009fe8 <UART_SetConfig+0x9c4>)
 8009eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009eb8:	e009      	b.n	8009ece <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ec0:	e005      	b.n	8009ece <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009ecc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 80ea 	beq.w	800a0aa <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eda:	4a44      	ldr	r2, [pc, #272]	; (8009fec <UART_SetConfig+0x9c8>)
 8009edc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ee8:	005a      	lsls	r2, r3, #1
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	085b      	lsrs	r3, r3, #1
 8009ef0:	441a      	add	r2, r3
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f00:	2b0f      	cmp	r3, #15
 8009f02:	d916      	bls.n	8009f32 <UART_SetConfig+0x90e>
 8009f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f0a:	d212      	bcs.n	8009f32 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	f023 030f 	bic.w	r3, r3, #15
 8009f14:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f18:	085b      	lsrs	r3, r3, #1
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	f003 0307 	and.w	r3, r3, #7
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009f24:	4313      	orrs	r3, r2
 8009f26:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009f2e:	60da      	str	r2, [r3, #12]
 8009f30:	e0bb      	b.n	800a0aa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009f38:	e0b7      	b.n	800a0aa <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f3e:	2b20      	cmp	r3, #32
 8009f40:	dc4a      	bgt.n	8009fd8 <UART_SetConfig+0x9b4>
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	f2c0 8086 	blt.w	800a054 <UART_SetConfig+0xa30>
 8009f48:	2b20      	cmp	r3, #32
 8009f4a:	f200 8083 	bhi.w	800a054 <UART_SetConfig+0xa30>
 8009f4e:	a201      	add	r2, pc, #4	; (adr r2, 8009f54 <UART_SetConfig+0x930>)
 8009f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f54:	08009fdf 	.word	0x08009fdf
 8009f58:	08009ff9 	.word	0x08009ff9
 8009f5c:	0800a055 	.word	0x0800a055
 8009f60:	0800a055 	.word	0x0800a055
 8009f64:	0800a001 	.word	0x0800a001
 8009f68:	0800a055 	.word	0x0800a055
 8009f6c:	0800a055 	.word	0x0800a055
 8009f70:	0800a055 	.word	0x0800a055
 8009f74:	0800a011 	.word	0x0800a011
 8009f78:	0800a055 	.word	0x0800a055
 8009f7c:	0800a055 	.word	0x0800a055
 8009f80:	0800a055 	.word	0x0800a055
 8009f84:	0800a055 	.word	0x0800a055
 8009f88:	0800a055 	.word	0x0800a055
 8009f8c:	0800a055 	.word	0x0800a055
 8009f90:	0800a055 	.word	0x0800a055
 8009f94:	0800a021 	.word	0x0800a021
 8009f98:	0800a055 	.word	0x0800a055
 8009f9c:	0800a055 	.word	0x0800a055
 8009fa0:	0800a055 	.word	0x0800a055
 8009fa4:	0800a055 	.word	0x0800a055
 8009fa8:	0800a055 	.word	0x0800a055
 8009fac:	0800a055 	.word	0x0800a055
 8009fb0:	0800a055 	.word	0x0800a055
 8009fb4:	0800a055 	.word	0x0800a055
 8009fb8:	0800a055 	.word	0x0800a055
 8009fbc:	0800a055 	.word	0x0800a055
 8009fc0:	0800a055 	.word	0x0800a055
 8009fc4:	0800a055 	.word	0x0800a055
 8009fc8:	0800a055 	.word	0x0800a055
 8009fcc:	0800a055 	.word	0x0800a055
 8009fd0:	0800a055 	.word	0x0800a055
 8009fd4:	0800a047 	.word	0x0800a047
 8009fd8:	2b40      	cmp	r3, #64	; 0x40
 8009fda:	d037      	beq.n	800a04c <UART_SetConfig+0xa28>
 8009fdc:	e03a      	b.n	800a054 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fde:	f7fc f835 	bl	800604c <HAL_RCC_GetPCLK1Freq>
 8009fe2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009fe4:	e03c      	b.n	800a060 <UART_SetConfig+0xa3c>
 8009fe6:	bf00      	nop
 8009fe8:	003d0900 	.word	0x003d0900
 8009fec:	0800a7dc 	.word	0x0800a7dc
 8009ff0:	58024400 	.word	0x58024400
 8009ff4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ff8:	f7fc f83e 	bl	8006078 <HAL_RCC_GetPCLK2Freq>
 8009ffc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ffe:	e02f      	b.n	800a060 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a000:	f107 0314 	add.w	r3, r7, #20
 800a004:	4618      	mov	r0, r3
 800a006:	f7fc ffa3 	bl	8006f50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a00e:	e027      	b.n	800a060 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a010:	f107 0308 	add.w	r3, r7, #8
 800a014:	4618      	mov	r0, r3
 800a016:	f7fd f8ef 	bl	80071f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a01e:	e01f      	b.n	800a060 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a020:	4b2c      	ldr	r3, [pc, #176]	; (800a0d4 <UART_SetConfig+0xab0>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f003 0320 	and.w	r3, r3, #32
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d009      	beq.n	800a040 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a02c:	4b29      	ldr	r3, [pc, #164]	; (800a0d4 <UART_SetConfig+0xab0>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	08db      	lsrs	r3, r3, #3
 800a032:	f003 0303 	and.w	r3, r3, #3
 800a036:	4a28      	ldr	r2, [pc, #160]	; (800a0d8 <UART_SetConfig+0xab4>)
 800a038:	fa22 f303 	lsr.w	r3, r2, r3
 800a03c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a03e:	e00f      	b.n	800a060 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a040:	4b25      	ldr	r3, [pc, #148]	; (800a0d8 <UART_SetConfig+0xab4>)
 800a042:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a044:	e00c      	b.n	800a060 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a046:	4b25      	ldr	r3, [pc, #148]	; (800a0dc <UART_SetConfig+0xab8>)
 800a048:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a04a:	e009      	b.n	800a060 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a04c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a050:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a052:	e005      	b.n	800a060 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a054:	2300      	movs	r3, #0
 800a056:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a05e:	bf00      	nop
    }

    if (pclk != 0U)
 800a060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a062:	2b00      	cmp	r3, #0
 800a064:	d021      	beq.n	800a0aa <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06a:	4a1d      	ldr	r2, [pc, #116]	; (800a0e0 <UART_SetConfig+0xabc>)
 800a06c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a070:	461a      	mov	r2, r3
 800a072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a074:	fbb3 f2f2 	udiv	r2, r3, r2
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	085b      	lsrs	r3, r3, #1
 800a07e:	441a      	add	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	fbb2 f3f3 	udiv	r3, r2, r3
 800a088:	b29b      	uxth	r3, r3
 800a08a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08e:	2b0f      	cmp	r3, #15
 800a090:	d908      	bls.n	800a0a4 <UART_SetConfig+0xa80>
 800a092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a098:	d204      	bcs.n	800a0a4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0a0:	60da      	str	r2, [r3, #12]
 800a0a2:	e002      	b.n	800a0aa <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a0c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3738      	adds	r7, #56	; 0x38
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bdb0      	pop	{r4, r5, r7, pc}
 800a0d2:	bf00      	nop
 800a0d4:	58024400 	.word	0x58024400
 800a0d8:	03d09000 	.word	0x03d09000
 800a0dc:	003d0900 	.word	0x003d0900
 800a0e0:	0800a7dc 	.word	0x0800a7dc

0800a0e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f0:	f003 0301 	and.w	r3, r3, #1
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00a      	beq.n	800a10e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	430a      	orrs	r2, r1
 800a10c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a112:	f003 0302 	and.w	r3, r3, #2
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00a      	beq.n	800a130 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	430a      	orrs	r2, r1
 800a12e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a134:	f003 0304 	and.w	r3, r3, #4
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00a      	beq.n	800a152 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	430a      	orrs	r2, r1
 800a150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a156:	f003 0308 	and.w	r3, r3, #8
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d00a      	beq.n	800a174 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	430a      	orrs	r2, r1
 800a172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a178:	f003 0310 	and.w	r3, r3, #16
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d00a      	beq.n	800a196 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	430a      	orrs	r2, r1
 800a194:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a19a:	f003 0320 	and.w	r3, r3, #32
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00a      	beq.n	800a1b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d01a      	beq.n	800a1fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	430a      	orrs	r2, r1
 800a1d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1e2:	d10a      	bne.n	800a1fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	430a      	orrs	r2, r1
 800a1f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00a      	beq.n	800a21c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	430a      	orrs	r2, r1
 800a21a:	605a      	str	r2, [r3, #4]
  }
}
 800a21c:	bf00      	nop
 800a21e:	370c      	adds	r7, #12
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af02      	add	r7, sp, #8
 800a22e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a238:	f7f8 f920 	bl	800247c <HAL_GetTick>
 800a23c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 0308 	and.w	r3, r3, #8
 800a248:	2b08      	cmp	r3, #8
 800a24a:	d10e      	bne.n	800a26a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a24c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 f82f 	bl	800a2be <UART_WaitOnFlagUntilTimeout>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d001      	beq.n	800a26a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a266:	2303      	movs	r3, #3
 800a268:	e025      	b.n	800a2b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f003 0304 	and.w	r3, r3, #4
 800a274:	2b04      	cmp	r3, #4
 800a276:	d10e      	bne.n	800a296 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a278:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 f819 	bl	800a2be <UART_WaitOnFlagUntilTimeout>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	e00f      	b.n	800a2b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2220      	movs	r2, #32
 800a29a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2220      	movs	r2, #32
 800a2a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b084      	sub	sp, #16
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	60f8      	str	r0, [r7, #12]
 800a2c6:	60b9      	str	r1, [r7, #8]
 800a2c8:	603b      	str	r3, [r7, #0]
 800a2ca:	4613      	mov	r3, r2
 800a2cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2ce:	e062      	b.n	800a396 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d6:	d05e      	beq.n	800a396 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2d8:	f7f8 f8d0 	bl	800247c <HAL_GetTick>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	1ad3      	subs	r3, r2, r3
 800a2e2:	69ba      	ldr	r2, [r7, #24]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d302      	bcc.n	800a2ee <UART_WaitOnFlagUntilTimeout+0x30>
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d11d      	bne.n	800a32a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a2fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	689a      	ldr	r2, [r3, #8]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f022 0201 	bic.w	r2, r2, #1
 800a30c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2220      	movs	r2, #32
 800a312:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2220      	movs	r2, #32
 800a31a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2200      	movs	r2, #0
 800a322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a326:	2303      	movs	r3, #3
 800a328:	e045      	b.n	800a3b6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0304 	and.w	r3, r3, #4
 800a334:	2b00      	cmp	r3, #0
 800a336:	d02e      	beq.n	800a396 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	69db      	ldr	r3, [r3, #28]
 800a33e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a346:	d126      	bne.n	800a396 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a350:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a360:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	689a      	ldr	r2, [r3, #8]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f022 0201 	bic.w	r2, r2, #1
 800a370:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2220      	movs	r2, #32
 800a376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2220      	movs	r2, #32
 800a37e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2220      	movs	r2, #32
 800a386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a392:	2303      	movs	r3, #3
 800a394:	e00f      	b.n	800a3b6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	69da      	ldr	r2, [r3, #28]
 800a39c:	68bb      	ldr	r3, [r7, #8]
 800a39e:	4013      	ands	r3, r2
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	bf0c      	ite	eq
 800a3a6:	2301      	moveq	r3, #1
 800a3a8:	2300      	movne	r3, #0
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	79fb      	ldrb	r3, [r7, #7]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d08d      	beq.n	800a2d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
	...

0800a3c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b083      	sub	sp, #12
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a3d6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6899      	ldr	r1, [r3, #8]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	4b0f      	ldr	r3, [pc, #60]	; (800a420 <UART_EndRxTransfer+0x60>)
 800a3e4:	400b      	ands	r3, r1
 800a3e6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d107      	bne.n	800a400 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f022 0210 	bic.w	r2, r2, #16
 800a3fe:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2220      	movs	r2, #32
 800a404:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr
 800a420:	effffffe 	.word	0xeffffffe

0800a424 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a430:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f7ff f8d8 	bl	80095f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a448:	bf00      	nop
 800a44a:	3710      	adds	r7, #16
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b082      	sub	sp, #8
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a466:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2220      	movs	r2, #32
 800a46c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f7f7 f9e4 	bl	8001844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a47c:	bf00      	nop
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a48c:	bf00      	nop
 800a48e:	370c      	adds	r7, #12
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a4a0:	bf00      	nop
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a4b4:	bf00      	nop
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d101      	bne.n	800a4d6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	e027      	b.n	800a526 <HAL_UARTEx_DisableFifoMode+0x66>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2224      	movs	r2, #36	; 0x24
 800a4e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f022 0201 	bic.w	r2, r2, #1
 800a4fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a504:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2220      	movs	r2, #32
 800a518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b084      	sub	sp, #16
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
 800a53a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a542:	2b01      	cmp	r3, #1
 800a544:	d101      	bne.n	800a54a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a546:	2302      	movs	r3, #2
 800a548:	e02d      	b.n	800a5a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2201      	movs	r2, #1
 800a54e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2224      	movs	r2, #36	; 0x24
 800a556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f022 0201 	bic.w	r2, r2, #1
 800a570:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	683a      	ldr	r2, [r7, #0]
 800a582:	430a      	orrs	r2, r1
 800a584:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f850 	bl	800a62c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2220      	movs	r2, #32
 800a598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d101      	bne.n	800a5c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5c2:	2302      	movs	r3, #2
 800a5c4:	e02d      	b.n	800a622 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2224      	movs	r2, #36	; 0x24
 800a5d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f022 0201 	bic.w	r2, r2, #1
 800a5ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f812 	bl	800a62c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2220      	movs	r2, #32
 800a614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
	...

0800a62c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b085      	sub	sp, #20
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d108      	bne.n	800a64e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a64c:	e031      	b.n	800a6b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a64e:	2310      	movs	r3, #16
 800a650:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a652:	2310      	movs	r3, #16
 800a654:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	0e5b      	lsrs	r3, r3, #25
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	f003 0307 	and.w	r3, r3, #7
 800a664:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	0f5b      	lsrs	r3, r3, #29
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	f003 0307 	and.w	r3, r3, #7
 800a674:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a676:	7bbb      	ldrb	r3, [r7, #14]
 800a678:	7b3a      	ldrb	r2, [r7, #12]
 800a67a:	4911      	ldr	r1, [pc, #68]	; (800a6c0 <UARTEx_SetNbDataToProcess+0x94>)
 800a67c:	5c8a      	ldrb	r2, [r1, r2]
 800a67e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a682:	7b3a      	ldrb	r2, [r7, #12]
 800a684:	490f      	ldr	r1, [pc, #60]	; (800a6c4 <UARTEx_SetNbDataToProcess+0x98>)
 800a686:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a688:	fb93 f3f2 	sdiv	r3, r3, r2
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a694:	7bfb      	ldrb	r3, [r7, #15]
 800a696:	7b7a      	ldrb	r2, [r7, #13]
 800a698:	4909      	ldr	r1, [pc, #36]	; (800a6c0 <UARTEx_SetNbDataToProcess+0x94>)
 800a69a:	5c8a      	ldrb	r2, [r1, r2]
 800a69c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a6a0:	7b7a      	ldrb	r2, [r7, #13]
 800a6a2:	4908      	ldr	r1, [pc, #32]	; (800a6c4 <UARTEx_SetNbDataToProcess+0x98>)
 800a6a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a6a6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a6b2:	bf00      	nop
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	0800a7f4 	.word	0x0800a7f4
 800a6c4:	0800a7fc 	.word	0x0800a7fc

0800a6c8 <round>:
 800a6c8:	ee10 1a90 	vmov	r1, s1
 800a6cc:	f3c1 500a 	ubfx	r0, r1, #20, #11
 800a6d0:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 800a6d4:	2a13      	cmp	r2, #19
 800a6d6:	b510      	push	{r4, lr}
 800a6d8:	ee10 3a10 	vmov	r3, s0
 800a6dc:	dc19      	bgt.n	800a712 <round+0x4a>
 800a6de:	2a00      	cmp	r2, #0
 800a6e0:	da09      	bge.n	800a6f6 <round+0x2e>
 800a6e2:	3201      	adds	r2, #1
 800a6e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800a6e8:	d103      	bne.n	800a6f2 <round+0x2a>
 800a6ea:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a6ee:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a6f2:	2000      	movs	r0, #0
 800a6f4:	e027      	b.n	800a746 <round+0x7e>
 800a6f6:	4816      	ldr	r0, [pc, #88]	; (800a750 <round+0x88>)
 800a6f8:	4110      	asrs	r0, r2
 800a6fa:	ea01 0400 	and.w	r4, r1, r0
 800a6fe:	4323      	orrs	r3, r4
 800a700:	d00e      	beq.n	800a720 <round+0x58>
 800a702:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a706:	fa43 f202 	asr.w	r2, r3, r2
 800a70a:	4411      	add	r1, r2
 800a70c:	ea21 0100 	bic.w	r1, r1, r0
 800a710:	e7ef      	b.n	800a6f2 <round+0x2a>
 800a712:	2a33      	cmp	r2, #51	; 0x33
 800a714:	dd05      	ble.n	800a722 <round+0x5a>
 800a716:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800a71a:	d101      	bne.n	800a720 <round+0x58>
 800a71c:	ee30 0b00 	vadd.f64	d0, d0, d0
 800a720:	bd10      	pop	{r4, pc}
 800a722:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 800a726:	f04f 30ff 	mov.w	r0, #4294967295
 800a72a:	fa20 f404 	lsr.w	r4, r0, r4
 800a72e:	4223      	tst	r3, r4
 800a730:	d0f6      	beq.n	800a720 <round+0x58>
 800a732:	2001      	movs	r0, #1
 800a734:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800a738:	fa00 f202 	lsl.w	r2, r0, r2
 800a73c:	189b      	adds	r3, r3, r2
 800a73e:	bf28      	it	cs
 800a740:	1809      	addcs	r1, r1, r0
 800a742:	ea23 0004 	bic.w	r0, r3, r4
 800a746:	460b      	mov	r3, r1
 800a748:	4602      	mov	r2, r0
 800a74a:	ec43 2b10 	vmov	d0, r2, r3
 800a74e:	e7e7      	b.n	800a720 <round+0x58>
 800a750:	000fffff 	.word	0x000fffff

0800a754 <__libc_init_array>:
 800a754:	b570      	push	{r4, r5, r6, lr}
 800a756:	4d0d      	ldr	r5, [pc, #52]	; (800a78c <__libc_init_array+0x38>)
 800a758:	4c0d      	ldr	r4, [pc, #52]	; (800a790 <__libc_init_array+0x3c>)
 800a75a:	1b64      	subs	r4, r4, r5
 800a75c:	10a4      	asrs	r4, r4, #2
 800a75e:	2600      	movs	r6, #0
 800a760:	42a6      	cmp	r6, r4
 800a762:	d109      	bne.n	800a778 <__libc_init_array+0x24>
 800a764:	4d0b      	ldr	r5, [pc, #44]	; (800a794 <__libc_init_array+0x40>)
 800a766:	4c0c      	ldr	r4, [pc, #48]	; (800a798 <__libc_init_array+0x44>)
 800a768:	f000 f820 	bl	800a7ac <_init>
 800a76c:	1b64      	subs	r4, r4, r5
 800a76e:	10a4      	asrs	r4, r4, #2
 800a770:	2600      	movs	r6, #0
 800a772:	42a6      	cmp	r6, r4
 800a774:	d105      	bne.n	800a782 <__libc_init_array+0x2e>
 800a776:	bd70      	pop	{r4, r5, r6, pc}
 800a778:	f855 3b04 	ldr.w	r3, [r5], #4
 800a77c:	4798      	blx	r3
 800a77e:	3601      	adds	r6, #1
 800a780:	e7ee      	b.n	800a760 <__libc_init_array+0xc>
 800a782:	f855 3b04 	ldr.w	r3, [r5], #4
 800a786:	4798      	blx	r3
 800a788:	3601      	adds	r6, #1
 800a78a:	e7f2      	b.n	800a772 <__libc_init_array+0x1e>
 800a78c:	0800a80c 	.word	0x0800a80c
 800a790:	0800a80c 	.word	0x0800a80c
 800a794:	0800a80c 	.word	0x0800a80c
 800a798:	0800a810 	.word	0x0800a810

0800a79c <memset>:
 800a79c:	4402      	add	r2, r0
 800a79e:	4603      	mov	r3, r0
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d100      	bne.n	800a7a6 <memset+0xa>
 800a7a4:	4770      	bx	lr
 800a7a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a7aa:	e7f9      	b.n	800a7a0 <memset+0x4>

0800a7ac <_init>:
 800a7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ae:	bf00      	nop
 800a7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b2:	bc08      	pop	{r3}
 800a7b4:	469e      	mov	lr, r3
 800a7b6:	4770      	bx	lr

0800a7b8 <_fini>:
 800a7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ba:	bf00      	nop
 800a7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7be:	bc08      	pop	{r3}
 800a7c0:	469e      	mov	lr, r3
 800a7c2:	4770      	bx	lr
