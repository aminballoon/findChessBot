
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b030  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b2c8  0800b2c8  0001b2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b308  0800b308  0001b308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b310  0800b310  0001b310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b314  0800b314  0001b314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  0800b318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008c4  20000010  0800b328  00020010  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  200008d4  0800b328  000208d4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022073  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003530  00000000  00000000  000420b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001360  00000000  00000000  000455e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001268  00000000  00000000  00046948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037d4c  00000000  00000000  00047bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018f10  00000000  00000000  0007f8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016654c  00000000  00000000  0009880c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001fed58  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000052bc  00000000  00000000  001fedac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b2b0 	.word	0x0800b2b0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	0800b2b0 	.word	0x0800b2b0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <StepDriveRad>:
/*
 * Stepper motor driving function (Radian input)
 * Updated : 18 Mar 2021 16:44
 * */
void StepDriveRad(char _ch, double _ang_v)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	ed87 0b00 	vstr	d0, [r7]
 80005dc:	73fb      	strb	r3, [r7, #15]
	switch(_ch)
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	3b01      	subs	r3, #1
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	f200 81d9 	bhi.w	800099a <StepDriveRad+0x3ca>
 80005e8:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <StepDriveRad+0x20>)
 80005ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ee:	bf00      	nop
 80005f0:	08000605 	.word	0x08000605
 80005f4:	080006b5 	.word	0x080006b5
 80005f8:	0800076f 	.word	0x0800076f
 80005fc:	0800081b 	.word	0x0800081b
 8000600:	080008cb 	.word	0x080008cb
	{
		case STEPJ1:
		{
			/* Direction of Joint1's Stepper Motor */
			if(_ang_v < 0)
 8000604:	ed97 7b00 	vldr	d7, [r7]
 8000608:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800060c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000610:	d506      	bpl.n	8000620 <StepDriveRad+0x50>
			{
				HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_SET);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000618:	48bd      	ldr	r0, [pc, #756]	; (8000910 <StepDriveRad+0x340>)
 800061a:	f004 ff09 	bl	8005430 <HAL_GPIO_WritePin>
 800061e:	e005      	b.n	800062c <StepDriveRad+0x5c>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_1_GPIO_Port, DIR_1_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000626:	48ba      	ldr	r0, [pc, #744]	; (8000910 <StepDriveRad+0x340>)
 8000628:	f004 ff02 	bl	8005430 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint1's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM1->ARR is undefined value.
 800062c:	ed97 7b00 	vldr	d7, [r7]
 8000630:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000638:	d103      	bne.n	8000642 <StepDriveRad+0x72>
			{
//				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
				TIM1->CCR2 = 0;
 800063a:	4bb6      	ldr	r3, [pc, #728]	; (8000914 <StepDriveRad+0x344>)
 800063c:	2200      	movs	r2, #0
 800063e:	639a      	str	r2, [r3, #56]	; 0x38
//					HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//				}
				TIM1->ARR = round((6.283*_FCY)/(1600*((TIM1->PSC)+1)*abs(_ang_v))) - 1;
				TIM1->CCR2 = round(((TIM1->ARR)+1)/2);
			}
			break;
 8000640:	e1ab      	b.n	800099a <StepDriveRad+0x3ca>
				TIM1->ARR = round((6.283*_FCY)/(1600*((TIM1->PSC)+1)*abs(_ang_v))) - 1;
 8000642:	4bb4      	ldr	r3, [pc, #720]	; (8000914 <StepDriveRad+0x344>)
 8000644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000646:	3301      	adds	r3, #1
 8000648:	ed97 7b00 	vldr	d7, [r7]
 800064c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000650:	ee17 2a90 	vmov	r2, s15
 8000654:	2a00      	cmp	r2, #0
 8000656:	bfb8      	it	lt
 8000658:	4252      	neglt	r2, r2
 800065a:	fb02 f303 	mul.w	r3, r2, r3
 800065e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000662:	fb02 f303 	mul.w	r3, r2, r3
 8000666:	ee07 3a90 	vmov	s15, r3
 800066a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800066e:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 8000908 <StepDriveRad+0x338>
 8000672:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000676:	eeb0 0b46 	vmov.f64	d0, d6
 800067a:	f00a fda7 	bl	800b1cc <round>
 800067e:	eeb0 7b40 	vmov.f64	d7, d0
 8000682:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000686:	ee37 7b46 	vsub.f64	d7, d7, d6
 800068a:	4ba2      	ldr	r3, [pc, #648]	; (8000914 <StepDriveRad+0x344>)
 800068c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000690:	ee17 2a90 	vmov	r2, s15
 8000694:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM1->CCR2 = round(((TIM1->ARR)+1)/2);
 8000696:	4b9f      	ldr	r3, [pc, #636]	; (8000914 <StepDriveRad+0x344>)
 8000698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800069a:	3301      	adds	r3, #1
 800069c:	085b      	lsrs	r3, r3, #1
 800069e:	ee07 3a90 	vmov	s15, r3
 80006a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80006a6:	4b9b      	ldr	r3, [pc, #620]	; (8000914 <StepDriveRad+0x344>)
 80006a8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006ac:	ee17 2a90 	vmov	r2, s15
 80006b0:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80006b2:	e172      	b.n	800099a <StepDriveRad+0x3ca>
		}
		case STEPJ2:
		{
			/* Direction of Joint2's Stepper Motor */
			if(_ang_v < 0)
 80006b4:	ed97 7b00 	vldr	d7, [r7]
 80006b8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c0:	d506      	bpl.n	80006d0 <StepDriveRad+0x100>
			{
				HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, GPIO_PIN_SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c8:	4893      	ldr	r0, [pc, #588]	; (8000918 <StepDriveRad+0x348>)
 80006ca:	f004 feb1 	bl	8005430 <HAL_GPIO_WritePin>
 80006ce:	e005      	b.n	80006dc <StepDriveRad+0x10c>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_2_GPIO_Port, DIR_2_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d6:	4890      	ldr	r0, [pc, #576]	; (8000918 <StepDriveRad+0x348>)
 80006d8:	f004 feaa 	bl	8005430 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint2's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM2->ARR is undefined value.
 80006dc:	ed97 7b00 	vldr	d7, [r7]
 80006e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80006e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006e8:	d104      	bne.n	80006f4 <StepDriveRad+0x124>
			{
				TIM2->CCR3 = 0;
 80006ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006ee:	2200      	movs	r2, #0
 80006f0:	63da      	str	r2, [r3, #60]	; 0x3c
			else
			{
				TIM2->ARR = round((6.283*_FCY)/(1600*((TIM2->PSC)+1)*abs(_ang_v))) - 1;
				TIM2->CCR3 = round(((TIM2->ARR)+1)/2);
			}
			break;
 80006f2:	e152      	b.n	800099a <StepDriveRad+0x3ca>
				TIM2->ARR = round((6.283*_FCY)/(1600*((TIM2->PSC)+1)*abs(_ang_v))) - 1;
 80006f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006fa:	3301      	adds	r3, #1
 80006fc:	ed97 7b00 	vldr	d7, [r7]
 8000700:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000704:	ee17 2a90 	vmov	r2, s15
 8000708:	2a00      	cmp	r2, #0
 800070a:	bfb8      	it	lt
 800070c:	4252      	neglt	r2, r2
 800070e:	fb02 f303 	mul.w	r3, r2, r3
 8000712:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000716:	fb02 f303 	mul.w	r3, r2, r3
 800071a:	ee07 3a90 	vmov	s15, r3
 800071e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000722:	ed9f 5b79 	vldr	d5, [pc, #484]	; 8000908 <StepDriveRad+0x338>
 8000726:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800072a:	eeb0 0b46 	vmov.f64	d0, d6
 800072e:	f00a fd4d 	bl	800b1cc <round>
 8000732:	eeb0 7b40 	vmov.f64	d7, d0
 8000736:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800073a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800073e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000742:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000746:	ee17 2a90 	vmov	r2, s15
 800074a:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM2->CCR3 = round(((TIM2->ARR)+1)/2);
 800074c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000752:	3301      	adds	r3, #1
 8000754:	085b      	lsrs	r3, r3, #1
 8000756:	ee07 3a90 	vmov	s15, r3
 800075a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800075e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000762:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000766:	ee17 2a90 	vmov	r2, s15
 800076a:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800076c:	e115      	b.n	800099a <StepDriveRad+0x3ca>
		}
		case STEPJ3:
		{
			/* Direction of Joint3's Stepper Motor */
			if(_ang_v < 0)
 800076e:	ed97 7b00 	vldr	d7, [r7]
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d505      	bpl.n	8000788 <StepDriveRad+0x1b8>
			{
				HAL_GPIO_WritePin(DIR_3_GPIO_Port, DIR_3_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2120      	movs	r1, #32
 8000780:	4865      	ldr	r0, [pc, #404]	; (8000918 <StepDriveRad+0x348>)
 8000782:	f004 fe55 	bl	8005430 <HAL_GPIO_WritePin>
 8000786:	e004      	b.n	8000792 <StepDriveRad+0x1c2>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_3_GPIO_Port, DIR_3_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2120      	movs	r1, #32
 800078c:	4862      	ldr	r0, [pc, #392]	; (8000918 <StepDriveRad+0x348>)
 800078e:	f004 fe4f 	bl	8005430 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint3's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM3->ARR is undefined value.
 8000792:	ed97 7b00 	vldr	d7, [r7]
 8000796:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800079a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079e:	d103      	bne.n	80007a8 <StepDriveRad+0x1d8>
			{
				TIM3->CCR1 = 0;
 80007a0:	4b5e      	ldr	r3, [pc, #376]	; (800091c <StepDriveRad+0x34c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	635a      	str	r2, [r3, #52]	; 0x34
			else
			{
				TIM3->ARR = round((6.283*_FCY)/(1600*((TIM3->PSC)+1)*abs(_ang_v))) - 1;
				TIM3->CCR1 = round(((TIM3->ARR)+1)/2);
			}
			break;
 80007a6:	e0f8      	b.n	800099a <StepDriveRad+0x3ca>
				TIM3->ARR = round((6.283*_FCY)/(1600*((TIM3->PSC)+1)*abs(_ang_v))) - 1;
 80007a8:	4b5c      	ldr	r3, [pc, #368]	; (800091c <StepDriveRad+0x34c>)
 80007aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ac:	3301      	adds	r3, #1
 80007ae:	ed97 7b00 	vldr	d7, [r7]
 80007b2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007b6:	ee17 2a90 	vmov	r2, s15
 80007ba:	2a00      	cmp	r2, #0
 80007bc:	bfb8      	it	lt
 80007be:	4252      	neglt	r2, r2
 80007c0:	fb02 f303 	mul.w	r3, r2, r3
 80007c4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80007c8:	fb02 f303 	mul.w	r3, r2, r3
 80007cc:	ee07 3a90 	vmov	s15, r3
 80007d0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80007d4:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 8000908 <StepDriveRad+0x338>
 80007d8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80007dc:	eeb0 0b46 	vmov.f64	d0, d6
 80007e0:	f00a fcf4 	bl	800b1cc <round>
 80007e4:	eeb0 7b40 	vmov.f64	d7, d0
 80007e8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80007ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80007f0:	4b4a      	ldr	r3, [pc, #296]	; (800091c <StepDriveRad+0x34c>)
 80007f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007f6:	ee17 2a90 	vmov	r2, s15
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM3->CCR1 = round(((TIM3->ARR)+1)/2);
 80007fc:	4b47      	ldr	r3, [pc, #284]	; (800091c <StepDriveRad+0x34c>)
 80007fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000800:	3301      	adds	r3, #1
 8000802:	085b      	lsrs	r3, r3, #1
 8000804:	ee07 3a90 	vmov	s15, r3
 8000808:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800080c:	4b43      	ldr	r3, [pc, #268]	; (800091c <StepDriveRad+0x34c>)
 800080e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000812:	ee17 2a90 	vmov	r2, s15
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000818:	e0bf      	b.n	800099a <StepDriveRad+0x3ca>
		}
		case STEPJ4:
		{
			/* Direction of Joint4's Stepper Motor */
			if(_ang_v < 0)
 800081a:	ed97 7b00 	vldr	d7, [r7]
 800081e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000826:	d506      	bpl.n	8000836 <StepDriveRad+0x266>
			{
				HAL_GPIO_WritePin(DIR_4_GPIO_Port, DIR_4_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800082e:	483a      	ldr	r0, [pc, #232]	; (8000918 <StepDriveRad+0x348>)
 8000830:	f004 fdfe 	bl	8005430 <HAL_GPIO_WritePin>
 8000834:	e005      	b.n	8000842 <StepDriveRad+0x272>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_4_GPIO_Port, DIR_4_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083c:	4836      	ldr	r0, [pc, #216]	; (8000918 <StepDriveRad+0x348>)
 800083e:	f004 fdf7 	bl	8005430 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Joint4's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM4->ARR is undefined value.
 8000842:	ed97 7b00 	vldr	d7, [r7]
 8000846:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800084a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800084e:	d103      	bne.n	8000858 <StepDriveRad+0x288>
			{
				TIM4->CCR3 = 0;
 8000850:	4b33      	ldr	r3, [pc, #204]	; (8000920 <StepDriveRad+0x350>)
 8000852:	2200      	movs	r2, #0
 8000854:	63da      	str	r2, [r3, #60]	; 0x3c
			else
			{
				TIM4->ARR = round((6.283*_FCY)/(1600*((TIM4->PSC)+1)*abs(_ang_v))) - 1;
				TIM4->CCR3 = round(((TIM4->ARR)+1)/2);
			}
			break;
 8000856:	e0a0      	b.n	800099a <StepDriveRad+0x3ca>
				TIM4->ARR = round((6.283*_FCY)/(1600*((TIM4->PSC)+1)*abs(_ang_v))) - 1;
 8000858:	4b31      	ldr	r3, [pc, #196]	; (8000920 <StepDriveRad+0x350>)
 800085a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085c:	3301      	adds	r3, #1
 800085e:	ed97 7b00 	vldr	d7, [r7]
 8000862:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000866:	ee17 2a90 	vmov	r2, s15
 800086a:	2a00      	cmp	r2, #0
 800086c:	bfb8      	it	lt
 800086e:	4252      	neglt	r2, r2
 8000870:	fb02 f303 	mul.w	r3, r2, r3
 8000874:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000878:	fb02 f303 	mul.w	r3, r2, r3
 800087c:	ee07 3a90 	vmov	s15, r3
 8000880:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000884:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8000908 <StepDriveRad+0x338>
 8000888:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800088c:	eeb0 0b46 	vmov.f64	d0, d6
 8000890:	f00a fc9c 	bl	800b1cc <round>
 8000894:	eeb0 7b40 	vmov.f64	d7, d0
 8000898:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800089c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <StepDriveRad+0x350>)
 80008a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008a6:	ee17 2a90 	vmov	r2, s15
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM4->CCR3 = round(((TIM4->ARR)+1)/2);
 80008ac:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <StepDriveRad+0x350>)
 80008ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b0:	3301      	adds	r3, #1
 80008b2:	085b      	lsrs	r3, r3, #1
 80008b4:	ee07 3a90 	vmov	s15, r3
 80008b8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <StepDriveRad+0x350>)
 80008be:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008c2:	ee17 2a90 	vmov	r2, s15
 80008c6:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80008c8:	e067      	b.n	800099a <StepDriveRad+0x3ca>
		}
		case STEPGripper:
		{
			/* Direction of Gripper's Stepper Motor */
			if(_ang_v < 0)
 80008ca:	ed97 7b00 	vldr	d7, [r7]
 80008ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80008d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d6:	d506      	bpl.n	80008e6 <StepDriveRad+0x316>
			{
				HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008de:	480c      	ldr	r0, [pc, #48]	; (8000910 <StepDriveRad+0x340>)
 80008e0:	f004 fda6 	bl	8005430 <HAL_GPIO_WritePin>
 80008e4:	e005      	b.n	80008f2 <StepDriveRad+0x322>
			}
			else
			{
				HAL_GPIO_WritePin(DIR_5_GPIO_Port, DIR_5_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ec:	4808      	ldr	r0, [pc, #32]	; (8000910 <StepDriveRad+0x340>)
 80008ee:	f004 fd9f 	bl	8005430 <HAL_GPIO_WritePin>
			}
			/* Angular Velocity of Gripper's Stepper Motor */
			if(_ang_v == 0) // To avoid TIM2->ARR is undefined value.
 80008f2:	ed97 7b00 	vldr	d7, [r7]
 80008f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80008fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008fe:	d113      	bne.n	8000928 <StepDriveRad+0x358>
			{
				TIM15->CCR2 = 0;
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <StepDriveRad+0x354>)
 8000902:	2200      	movs	r2, #0
 8000904:	639a      	str	r2, [r3, #56]	; 0x38
			else
			{
				TIM15->ARR = round((6.283*_FCY)/(1600*((TIM15->PSC)+1)*abs(_ang_v))) - 1;
				TIM15->CCR2 = round(((TIM15->ARR)+1)/2);
			}
			break;
 8000906:	e047      	b.n	8000998 <StepDriveRad+0x3c8>
 8000908:	20000000 	.word	0x20000000
 800090c:	41d67842 	.word	0x41d67842
 8000910:	58021000 	.word	0x58021000
 8000914:	40010000 	.word	0x40010000
 8000918:	58020400 	.word	0x58020400
 800091c:	40000400 	.word	0x40000400
 8000920:	40000800 	.word	0x40000800
 8000924:	40014000 	.word	0x40014000
				TIM15->ARR = round((6.283*_FCY)/(1600*((TIM15->PSC)+1)*abs(_ang_v))) - 1;
 8000928:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <StepDriveRad+0x3e0>)
 800092a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092c:	3301      	adds	r3, #1
 800092e:	ed97 7b00 	vldr	d7, [r7]
 8000932:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000936:	ee17 2a90 	vmov	r2, s15
 800093a:	2a00      	cmp	r2, #0
 800093c:	bfb8      	it	lt
 800093e:	4252      	neglt	r2, r2
 8000940:	fb02 f303 	mul.w	r3, r2, r3
 8000944:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000948:	fb02 f303 	mul.w	r3, r2, r3
 800094c:	ee07 3a90 	vmov	s15, r3
 8000950:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000954:	ed9f 5b14 	vldr	d5, [pc, #80]	; 80009a8 <StepDriveRad+0x3d8>
 8000958:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800095c:	eeb0 0b46 	vmov.f64	d0, d6
 8000960:	f00a fc34 	bl	800b1cc <round>
 8000964:	eeb0 7b40 	vmov.f64	d7, d0
 8000968:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800096c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <StepDriveRad+0x3e0>)
 8000972:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000976:	ee17 2a90 	vmov	r2, s15
 800097a:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM15->CCR2 = round(((TIM15->ARR)+1)/2);
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <StepDriveRad+0x3e0>)
 800097e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000980:	3301      	adds	r3, #1
 8000982:	085b      	lsrs	r3, r3, #1
 8000984:	ee07 3a90 	vmov	s15, r3
 8000988:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <StepDriveRad+0x3e0>)
 800098e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000992:	ee17 2a90 	vmov	r2, s15
 8000996:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000998:	bf00      	nop
//			TIM4->CCR3 = 0;
//			TIM15->CCR2 = 0;
		}
	}

}
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	f3af 8000 	nop.w
 80009a8:	20000000 	.word	0x20000000
 80009ac:	41d67842 	.word	0x41d67842
 80009b0:	40014000 	.word	0x40014000
 80009b4:	00000000 	.word	0x00000000

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009bc:	f001 fea8 	bl	8002710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c0:	f000 f90e 	bl	8000be0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  SysTick->LOAD = 480000 - 1;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c4:	f000 ff2a 	bl	800181c <MX_GPIO_Init>
  MX_DMA_Init();
 80009c8:	f000 fdd8 	bl	800157c <MX_DMA_Init>
  MX_USART3_UART_Init();
 80009cc:	f000 fd8a 	bl	80014e4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80009d0:	f000 faa8 	bl	8000f24 <MX_TIM2_Init>
  MX_UART4_Init();
 80009d4:	f000 fd3a 	bl	800144c <MX_UART4_Init>
  MX_TIM4_Init();
 80009d8:	f000 fb94 	bl	8001104 <MX_TIM4_Init>
  MX_SPI3_Init();
 80009dc:	f000 f99e 	bl	8000d1c <MX_SPI3_Init>
  MX_TIM1_Init();
 80009e0:	f000 f9f2 	bl	8000dc8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80009e4:	f000 fb16 	bl	8001014 <MX_TIM3_Init>
  MX_TIM5_Init();
 80009e8:	f000 fc04 	bl	80011f4 <MX_TIM5_Init>
  MX_TIM15_Init();
 80009ec:	f000 fc8a 	bl	8001304 <MX_TIM15_Init>
  MX_TIM12_Init();
 80009f0:	f000 fc4e 	bl	8001290 <MX_TIM12_Init>
  MX_CRC_Init();
 80009f4:	f000 f970 	bl	8000cd8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2101      	movs	r1, #1
 80009fc:	4862      	ldr	r0, [pc, #392]	; (8000b88 <main+0x1d0>)
 80009fe:	f004 fd17 	bl	8005430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2102      	movs	r1, #2
 8000a06:	4861      	ldr	r0, [pc, #388]	; (8000b8c <main+0x1d4>)
 8000a08:	f004 fd12 	bl	8005430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a12:	485d      	ldr	r0, [pc, #372]	; (8000b88 <main+0x1d0>)
 8000a14:	f004 fd0c 	bl	8005430 <HAL_GPIO_WritePin>

//  HAL_TIM_Base_Start_IT(&htim5);
//  HAL_TIM_Base_Start_IT(&htim12);
  TIM1->CCR2 = 0;
 8000a18:	4b5d      	ldr	r3, [pc, #372]	; (8000b90 <main+0x1d8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	639a      	str	r2, [r3, #56]	; 0x38
  TIM2->CCR2 = 0;
 8000a1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a22:	2200      	movs	r2, #0
 8000a24:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR2 = 0;
 8000a26:	4b5b      	ldr	r3, [pc, #364]	; (8000b94 <main+0x1dc>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	639a      	str	r2, [r3, #56]	; 0x38
  TIM4->CCR2 = 0;
 8000a2c:	4b5a      	ldr	r3, [pc, #360]	; (8000b98 <main+0x1e0>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	639a      	str	r2, [r3, #56]	; 0x38
  TIM15->CCR2 = 0;
 8000a32:	4b5a      	ldr	r3, [pc, #360]	; (8000b9c <main+0x1e4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000a38:	2104      	movs	r1, #4
 8000a3a:	4859      	ldr	r0, [pc, #356]	; (8000ba0 <main+0x1e8>)
 8000a3c:	f007 fa3a 	bl	8007eb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a40:	2104      	movs	r1, #4
 8000a42:	4858      	ldr	r0, [pc, #352]	; (8000ba4 <main+0x1ec>)
 8000a44:	f007 fa36 	bl	8007eb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a48:	2104      	movs	r1, #4
 8000a4a:	4857      	ldr	r0, [pc, #348]	; (8000ba8 <main+0x1f0>)
 8000a4c:	f007 fa32 	bl	8007eb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000a50:	2104      	movs	r1, #4
 8000a52:	4856      	ldr	r0, [pc, #344]	; (8000bac <main+0x1f4>)
 8000a54:	f007 fa2e 	bl	8007eb4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000a58:	2104      	movs	r1, #4
 8000a5a:	4855      	ldr	r0, [pc, #340]	; (8000bb0 <main+0x1f8>)
 8000a5c:	f007 fa2a 	bl	8007eb4 <HAL_TIM_PWM_Start>

  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000a60:	4b54      	ldr	r3, [pc, #336]	; (8000bb4 <main+0x1fc>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	4b53      	ldr	r3, [pc, #332]	; (8000bb4 <main+0x1fc>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f042 0220 	orr.w	r2, r2, #32
 8000a6e:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 8000a70:	4b50      	ldr	r3, [pc, #320]	; (8000bb4 <main+0x1fc>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4b4f      	ldr	r3, [pc, #316]	; (8000bb4 <main+0x1fc>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a7e:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, 4);
 8000a80:	2204      	movs	r2, #4
 8000a82:	494d      	ldr	r1, [pc, #308]	; (8000bb8 <main+0x200>)
 8000a84:	484b      	ldr	r0, [pc, #300]	; (8000bb4 <main+0x1fc>)
 8000a86:	f008 fc9f 	bl	80093c8 <HAL_UART_Receive_IT>
  StepDriveRad(1, 6.23);
 8000a8a:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 8000b80 <main+0x1c8>
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f7ff fd9e 	bl	80005d0 <StepDriveRad>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(State_Checksum_Error)
 8000a94:	4b49      	ldr	r3, [pc, #292]	; (8000bbc <main+0x204>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d00b      	beq.n	8000ab4 <main+0xfc>
	  {
		  State_Checksum_Error = 0;
 8000a9c:	4b47      	ldr	r3, [pc, #284]	; (8000bbc <main+0x204>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_CheckSumError_Address;
 8000aa2:	4b47      	ldr	r3, [pc, #284]	; (8000bc0 <main+0x208>)
 8000aa4:	22ee      	movs	r2, #238	; 0xee
 8000aa6:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8000aa8:	2364      	movs	r3, #100	; 0x64
 8000aaa:	2201      	movs	r2, #1
 8000aac:	4944      	ldr	r1, [pc, #272]	; (8000bc0 <main+0x208>)
 8000aae:	4841      	ldr	r0, [pc, #260]	; (8000bb4 <main+0x1fc>)
 8000ab0:	f008 fbf4 	bl	800929c <HAL_UART_Transmit>
	  }
	  if(State_Input_Joint_State)
 8000ab4:	4b43      	ldr	r3, [pc, #268]	; (8000bc4 <main+0x20c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d00b      	beq.n	8000ad4 <main+0x11c>
	  {
		  State_Input_Joint_State = 0;
 8000abc:	4b41      	ldr	r3, [pc, #260]	; (8000bc4 <main+0x20c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 8000ac2:	4b3f      	ldr	r3, [pc, #252]	; (8000bc0 <main+0x208>)
 8000ac4:	22ad      	movs	r2, #173	; 0xad
 8000ac6:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8000ac8:	2364      	movs	r3, #100	; 0x64
 8000aca:	2201      	movs	r2, #1
 8000acc:	493c      	ldr	r1, [pc, #240]	; (8000bc0 <main+0x208>)
 8000ace:	4839      	ldr	r0, [pc, #228]	; (8000bb4 <main+0x1fc>)
 8000ad0:	f008 fbe4 	bl	800929c <HAL_UART_Transmit>
	  }
	  if(State_Print_4_Joint_State)
 8000ad4:	4b3c      	ldr	r3, [pc, #240]	; (8000bc8 <main+0x210>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d00b      	beq.n	8000af4 <main+0x13c>
	  {
		  State_Print_4_Joint_State = 0;
 8000adc:	4b3a      	ldr	r3, [pc, #232]	; (8000bc8 <main+0x210>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
//		  printf("\n%3d %3d %3d %3d\n\r", q1, q2, q3, q4);
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 8000ae2:	4b37      	ldr	r3, [pc, #220]	; (8000bc0 <main+0x208>)
 8000ae4:	22ad      	movs	r2, #173	; 0xad
 8000ae6:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8000ae8:	2364      	movs	r3, #100	; 0x64
 8000aea:	2201      	movs	r2, #1
 8000aec:	4934      	ldr	r1, [pc, #208]	; (8000bc0 <main+0x208>)
 8000aee:	4831      	ldr	r0, [pc, #196]	; (8000bb4 <main+0x1fc>)
 8000af0:	f008 fbd4 	bl	800929c <HAL_UART_Transmit>
	  }
	  if(State_Activate_Gripper)
 8000af4:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <main+0x214>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00b      	beq.n	8000b14 <main+0x15c>
	  {
		  State_Activate_Gripper = 0;
 8000afc:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <main+0x214>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 8000b02:	4b2f      	ldr	r3, [pc, #188]	; (8000bc0 <main+0x208>)
 8000b04:	22ad      	movs	r2, #173	; 0xad
 8000b06:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8000b08:	2364      	movs	r3, #100	; 0x64
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	492c      	ldr	r1, [pc, #176]	; (8000bc0 <main+0x208>)
 8000b0e:	4829      	ldr	r0, [pc, #164]	; (8000bb4 <main+0x1fc>)
 8000b10:	f008 fbc4 	bl	800929c <HAL_UART_Transmit>
	  }
	  if(State_Deactivate_Gripper)
 8000b14:	4b2e      	ldr	r3, [pc, #184]	; (8000bd0 <main+0x218>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d00b      	beq.n	8000b34 <main+0x17c>
	  {
		  State_Deactivate_Gripper = 0;
 8000b1c:	4b2c      	ldr	r3, [pc, #176]	; (8000bd0 <main+0x218>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 8000b22:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <main+0x208>)
 8000b24:	22ad      	movs	r2, #173	; 0xad
 8000b26:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8000b28:	2364      	movs	r3, #100	; 0x64
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4924      	ldr	r1, [pc, #144]	; (8000bc0 <main+0x208>)
 8000b2e:	4821      	ldr	r0, [pc, #132]	; (8000bb4 <main+0x1fc>)
 8000b30:	f008 fbb4 	bl	800929c <HAL_UART_Transmit>
	  }
	  if(State_Set_Home)
 8000b34:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <main+0x21c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00b      	beq.n	8000b54 <main+0x19c>
	  {
		  State_Set_Home = 0;
 8000b3c:	4b25      	ldr	r3, [pc, #148]	; (8000bd4 <main+0x21c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
		  UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ProcessIsCompleted_Address;
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <main+0x208>)
 8000b44:	22ad      	movs	r2, #173	; 0xad
 8000b46:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8000b48:	2364      	movs	r3, #100	; 0x64
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	491c      	ldr	r1, [pc, #112]	; (8000bc0 <main+0x208>)
 8000b4e:	4819      	ldr	r0, [pc, #100]	; (8000bb4 <main+0x1fc>)
 8000b50:	f008 fba4 	bl	800929c <HAL_UART_Transmit>
	  }
	  if(State_PID_Control_Timer)
 8000b54:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <main+0x220>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d002      	beq.n	8000b62 <main+0x1aa>
	  {
//		  HAL_TIM_Base_Start_IT(&htim5);
		  State_PID_Control_Timer = 0;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <main+0x220>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
	  }
	  if(State_Casade_Control_Timer)
 8000b62:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <main+0x224>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <main+0x1b8>
	  {
//		  HAL_TIM_Base_Start_IT(&htim12);
		  State_Casade_Control_Timer = 0;
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <main+0x224>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
	  }

//	  i++;
	  HAL_Delay(500);
 8000b70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b74:	f001 fe5e 	bl	8002834 <HAL_Delay>
	  if(State_Checksum_Error)
 8000b78:	e78c      	b.n	8000a94 <main+0xdc>
 8000b7a:	bf00      	nop
 8000b7c:	f3af 8000 	nop.w
 8000b80:	1eb851ec 	.word	0x1eb851ec
 8000b84:	4018eb85 	.word	0x4018eb85
 8000b88:	58020400 	.word	0x58020400
 8000b8c:	58021000 	.word	0x58021000
 8000b90:	40010000 	.word	0x40010000
 8000b94:	40000400 	.word	0x40000400
 8000b98:	40000800 	.word	0x40000800
 8000b9c:	40014000 	.word	0x40014000
 8000ba0:	20000644 	.word	0x20000644
 8000ba4:	200007a4 	.word	0x200007a4
 8000ba8:	20000450 	.word	0x20000450
 8000bac:	2000019c 	.word	0x2000019c
 8000bb0:	200002f8 	.word	0x200002f8
 8000bb4:	20000260 	.word	0x20000260
 8000bb8:	200008cc 	.word	0x200008cc
 8000bbc:	20000844 	.word	0x20000844
 8000bc0:	200005c8 	.word	0x200005c8
 8000bc4:	2000044c 	.word	0x2000044c
 8000bc8:	200005ca 	.word	0x200005ca
 8000bcc:	200008c8 	.word	0x200008c8
 8000bd0:	20000374 	.word	0x20000374
 8000bd4:	200005c9 	.word	0x200005c9
 8000bd8:	200005b8 	.word	0x200005b8
 8000bdc:	200007a0 	.word	0x200007a0

08000be0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b09c      	sub	sp, #112	; 0x70
 8000be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bea:	224c      	movs	r2, #76	; 0x4c
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f00a fb56 	bl	800b2a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2220      	movs	r2, #32
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f00a fb50 	bl	800b2a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c00:	2002      	movs	r0, #2
 8000c02:	f004 fc49 	bl	8005498 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <SystemClock_Config+0xf0>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	4a30      	ldr	r2, [pc, #192]	; (8000cd0 <SystemClock_Config+0xf0>)
 8000c10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c14:	6193      	str	r3, [r2, #24]
 8000c16:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <SystemClock_Config+0xf0>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <SystemClock_Config+0xf4>)
 8000c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c24:	4a2b      	ldr	r2, [pc, #172]	; (8000cd4 <SystemClock_Config+0xf4>)
 8000c26:	f043 0301 	orr.w	r3, r3, #1
 8000c2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c2c:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <SystemClock_Config+0xf4>)
 8000c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c30:	f003 0301 	and.w	r3, r3, #1
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c38:	bf00      	nop
 8000c3a:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <SystemClock_Config+0xf0>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c46:	d1f8      	bne.n	8000c3a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c50:	2340      	movs	r3, #64	; 0x40
 8000c52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c54:	2302      	movs	r3, #2
 8000c56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000c60:	233c      	movs	r3, #60	; 0x3c
 8000c62:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000c68:	2306      	movs	r3, #6
 8000c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c70:	230c      	movs	r3, #12
 8000c72:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c80:	4618      	mov	r0, r3
 8000c82:	f004 fc43 	bl	800550c <HAL_RCC_OscConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000c8c:	f001 f81d 	bl	8001cca <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c90:	233f      	movs	r3, #63	; 0x3f
 8000c92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c94:	2303      	movs	r3, #3
 8000c96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ca0:	2340      	movs	r3, #64	; 0x40
 8000ca2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ca4:	2340      	movs	r3, #64	; 0x40
 8000ca6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cae:	2340      	movs	r3, #64	; 0x40
 8000cb0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2104      	movs	r1, #4
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f005 f838 	bl	8005d2c <HAL_RCC_ClockConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000cc2:	f001 f802 	bl	8001cca <Error_Handler>
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	3770      	adds	r7, #112	; 0x70
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	58024800 	.word	0x58024800
 8000cd4:	58000400 	.word	0x58000400

08000cd8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <MX_CRC_Init+0x3c>)
 8000cde:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <MX_CRC_Init+0x40>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_CRC_Init+0x3c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <MX_CRC_Init+0x3c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_CRC_Init+0x3c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <MX_CRC_Init+0x3c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_CRC_Init+0x3c>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d00:	4804      	ldr	r0, [pc, #16]	; (8000d14 <MX_CRC_Init+0x3c>)
 8000d02:	f001 fed7 	bl	8002ab4 <HAL_CRC_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d0c:	f000 ffdd 	bl	8001cca <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000350 	.word	0x20000350
 8000d18:	58024c00 	.word	0x58024c00

08000d1c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d20:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d22:	4a28      	ldr	r2, [pc, #160]	; (8000dc4 <MX_SPI3_Init+0xa8>)
 8000d24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d26:	4b26      	ldr	r3, [pc, #152]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d2c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d2e:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d36:	2203      	movs	r2, #3
 8000d38:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d3a:	4b21      	ldr	r3, [pc, #132]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d46:	4b1e      	ldr	r3, [pc, #120]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d48:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d4c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d72:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_SPI3_Init+0xa4>)
 8000dac:	f006 feac 	bl	8007b08 <HAL_SPI_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000db6:	f000 ff88 	bl	8001cca <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000049c 	.word	0x2000049c
 8000dc4:	40003c00 	.word	0x40003c00

08000dc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b09a      	sub	sp, #104	; 0x68
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ddc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	222c      	movs	r2, #44	; 0x2c
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f00a fa4c 	bl	800b2a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e08:	4b44      	ldr	r3, [pc, #272]	; (8000f1c <MX_TIM1_Init+0x154>)
 8000e0a:	4a45      	ldr	r2, [pc, #276]	; (8000f20 <MX_TIM1_Init+0x158>)
 8000e0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 8000e0e:	4b43      	ldr	r3, [pc, #268]	; (8000f1c <MX_TIM1_Init+0x154>)
 8000e10:	22ef      	movs	r2, #239	; 0xef
 8000e12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b41      	ldr	r3, [pc, #260]	; (8000f1c <MX_TIM1_Init+0x154>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625-1;
 8000e1a:	4b40      	ldr	r3, [pc, #256]	; (8000f1c <MX_TIM1_Init+0x154>)
 8000e1c:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000e20:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <MX_TIM1_Init+0x154>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e28:	4b3c      	ldr	r3, [pc, #240]	; (8000f1c <MX_TIM1_Init+0x154>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2e:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <MX_TIM1_Init+0x154>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e34:	4839      	ldr	r0, [pc, #228]	; (8000f1c <MX_TIM1_Init+0x154>)
 8000e36:	f006 ff84 	bl	8007d42 <HAL_TIM_Base_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e40:	f000 ff43 	bl	8001cca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e48:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4832      	ldr	r0, [pc, #200]	; (8000f1c <MX_TIM1_Init+0x154>)
 8000e52:	f007 fb67 	bl	8008524 <HAL_TIM_ConfigClockSource>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e5c:	f000 ff35 	bl	8001cca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e60:	482e      	ldr	r0, [pc, #184]	; (8000f1c <MX_TIM1_Init+0x154>)
 8000e62:	f006 ffc5 	bl	8007df0 <HAL_TIM_PWM_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000e6c:	f000 ff2d 	bl	8001cca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e80:	4619      	mov	r1, r3
 8000e82:	4826      	ldr	r0, [pc, #152]	; (8000f1c <MX_TIM1_Init+0x154>)
 8000e84:	f008 f896 	bl	8008fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000e8e:	f000 ff1c 	bl	8001cca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e92:	2360      	movs	r3, #96	; 0x60
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8000e96:	f240 1339 	movw	r3, #313	; 0x139
 8000e9a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eac:	2300      	movs	r3, #0
 8000eae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4818      	ldr	r0, [pc, #96]	; (8000f1c <MX_TIM1_Init+0x154>)
 8000eba:	f007 fa23 	bl	8008304 <HAL_TIM_PWM_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000ec4:	f000 ff01 	bl	8001cca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	4619      	mov	r1, r3
 8000efc:	4807      	ldr	r0, [pc, #28]	; (8000f1c <MX_TIM1_Init+0x154>)
 8000efe:	f008 f8e1 	bl	80090c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000f08:	f000 fedf 	bl	8001cca <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f0c:	4803      	ldr	r0, [pc, #12]	; (8000f1c <MX_TIM1_Init+0x154>)
 8000f0e:	f001 f843 	bl	8001f98 <HAL_TIM_MspPostInit>

}
 8000f12:	bf00      	nop
 8000f14:	3768      	adds	r7, #104	; 0x68
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000644 	.word	0x20000644
 8000f20:	40010000 	.word	0x40010000

08000f24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	; 0x38
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f56:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <MX_TIM2_Init+0xec>)
 8000f58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 8000f5e:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <MX_TIM2_Init+0xec>)
 8000f60:	22ef      	movs	r2, #239	; 0xef
 8000f62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <MX_TIM2_Init+0xec>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625-1;
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <MX_TIM2_Init+0xec>)
 8000f6c:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000f70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b27      	ldr	r3, [pc, #156]	; (8001010 <MX_TIM2_Init+0xec>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b25      	ldr	r3, [pc, #148]	; (8001010 <MX_TIM2_Init+0xec>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f7e:	4824      	ldr	r0, [pc, #144]	; (8001010 <MX_TIM2_Init+0xec>)
 8000f80:	f006 fedf 	bl	8007d42 <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000f8a:	f000 fe9e 	bl	8001cca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f98:	4619      	mov	r1, r3
 8000f9a:	481d      	ldr	r0, [pc, #116]	; (8001010 <MX_TIM2_Init+0xec>)
 8000f9c:	f007 fac2 	bl	8008524 <HAL_TIM_ConfigClockSource>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000fa6:	f000 fe90 	bl	8001cca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000faa:	4819      	ldr	r0, [pc, #100]	; (8001010 <MX_TIM2_Init+0xec>)
 8000fac:	f006 ff20 	bl	8007df0 <HAL_TIM_PWM_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000fb6:	f000 fe88 	bl	8001cca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4811      	ldr	r0, [pc, #68]	; (8001010 <MX_TIM2_Init+0xec>)
 8000fca:	f007 fff3 	bl	8008fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000fd4:	f000 fe79 	bl	8001cca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd8:	2360      	movs	r3, #96	; 0x60
 8000fda:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8000fdc:	f240 1339 	movw	r3, #313	; 0x139
 8000fe0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fea:	463b      	mov	r3, r7
 8000fec:	2208      	movs	r2, #8
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4807      	ldr	r0, [pc, #28]	; (8001010 <MX_TIM2_Init+0xec>)
 8000ff2:	f007 f987 	bl	8008304 <HAL_TIM_PWM_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000ffc:	f000 fe65 	bl	8001cca <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <MX_TIM2_Init+0xec>)
 8001002:	f000 ffc9 	bl	8001f98 <HAL_TIM_MspPostInit>

}
 8001006:	bf00      	nop
 8001008:	3738      	adds	r7, #56	; 0x38
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200007a4 	.word	0x200007a4

08001014 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08e      	sub	sp, #56	; 0x38
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001034:	463b      	mov	r3, r7
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001046:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <MX_TIM3_Init+0xe8>)
 8001048:	4a2d      	ldr	r2, [pc, #180]	; (8001100 <MX_TIM3_Init+0xec>)
 800104a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 800104c:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <MX_TIM3_Init+0xe8>)
 800104e:	22ef      	movs	r2, #239	; 0xef
 8001050:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001052:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <MX_TIM3_Init+0xe8>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 625-1;
 8001058:	4b28      	ldr	r3, [pc, #160]	; (80010fc <MX_TIM3_Init+0xe8>)
 800105a:	f44f 721c 	mov.w	r2, #624	; 0x270
 800105e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001060:	4b26      	ldr	r3, [pc, #152]	; (80010fc <MX_TIM3_Init+0xe8>)
 8001062:	2200      	movs	r2, #0
 8001064:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <MX_TIM3_Init+0xe8>)
 8001068:	2200      	movs	r2, #0
 800106a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800106c:	4823      	ldr	r0, [pc, #140]	; (80010fc <MX_TIM3_Init+0xe8>)
 800106e:	f006 fe68 	bl	8007d42 <HAL_TIM_Base_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001078:	f000 fe27 	bl	8001cca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800107c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001086:	4619      	mov	r1, r3
 8001088:	481c      	ldr	r0, [pc, #112]	; (80010fc <MX_TIM3_Init+0xe8>)
 800108a:	f007 fa4b 	bl	8008524 <HAL_TIM_ConfigClockSource>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001094:	f000 fe19 	bl	8001cca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001098:	4818      	ldr	r0, [pc, #96]	; (80010fc <MX_TIM3_Init+0xe8>)
 800109a:	f006 fea9 	bl	8007df0 <HAL_TIM_PWM_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80010a4:	f000 fe11 	bl	8001cca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	4811      	ldr	r0, [pc, #68]	; (80010fc <MX_TIM3_Init+0xe8>)
 80010b8:	f007 ff7c 	bl	8008fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80010c2:	f000 fe02 	bl	8001cca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c6:	2360      	movs	r3, #96	; 0x60
 80010c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80010ca:	f240 1339 	movw	r3, #313	; 0x139
 80010ce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	2200      	movs	r2, #0
 80010dc:	4619      	mov	r1, r3
 80010de:	4807      	ldr	r0, [pc, #28]	; (80010fc <MX_TIM3_Init+0xe8>)
 80010e0:	f007 f910 	bl	8008304 <HAL_TIM_PWM_ConfigChannel>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80010ea:	f000 fdee 	bl	8001cca <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010ee:	4803      	ldr	r0, [pc, #12]	; (80010fc <MX_TIM3_Init+0xe8>)
 80010f0:	f000 ff52 	bl	8001f98 <HAL_TIM_MspPostInit>

}
 80010f4:	bf00      	nop
 80010f6:	3738      	adds	r7, #56	; 0x38
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000450 	.word	0x20000450
 8001100:	40000400 	.word	0x40000400

08001104 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08e      	sub	sp, #56	; 0x38
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001124:	463b      	mov	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]
 8001132:	615a      	str	r2, [r3, #20]
 8001134:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001136:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <MX_TIM4_Init+0xe8>)
 8001138:	4a2d      	ldr	r2, [pc, #180]	; (80011f0 <MX_TIM4_Init+0xec>)
 800113a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 800113c:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <MX_TIM4_Init+0xe8>)
 800113e:	22ef      	movs	r2, #239	; 0xef
 8001140:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001142:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <MX_TIM4_Init+0xe8>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 625-1;
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <MX_TIM4_Init+0xe8>)
 800114a:	f44f 721c 	mov.w	r2, #624	; 0x270
 800114e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001150:	4b26      	ldr	r3, [pc, #152]	; (80011ec <MX_TIM4_Init+0xe8>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001156:	4b25      	ldr	r3, [pc, #148]	; (80011ec <MX_TIM4_Init+0xe8>)
 8001158:	2280      	movs	r2, #128	; 0x80
 800115a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800115c:	4823      	ldr	r0, [pc, #140]	; (80011ec <MX_TIM4_Init+0xe8>)
 800115e:	f006 fdf0 	bl	8007d42 <HAL_TIM_Base_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001168:	f000 fdaf 	bl	8001cca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001170:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001172:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001176:	4619      	mov	r1, r3
 8001178:	481c      	ldr	r0, [pc, #112]	; (80011ec <MX_TIM4_Init+0xe8>)
 800117a:	f007 f9d3 	bl	8008524 <HAL_TIM_ConfigClockSource>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001184:	f000 fda1 	bl	8001cca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001188:	4818      	ldr	r0, [pc, #96]	; (80011ec <MX_TIM4_Init+0xe8>)
 800118a:	f006 fe31 	bl	8007df0 <HAL_TIM_PWM_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001194:	f000 fd99 	bl	8001cca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	4811      	ldr	r0, [pc, #68]	; (80011ec <MX_TIM4_Init+0xe8>)
 80011a8:	f007 ff04 	bl	8008fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80011b2:	f000 fd8a 	bl	8001cca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b6:	2360      	movs	r3, #96	; 0x60
 80011b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80011ba:	f240 1339 	movw	r3, #313	; 0x139
 80011be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011c8:	463b      	mov	r3, r7
 80011ca:	2208      	movs	r2, #8
 80011cc:	4619      	mov	r1, r3
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <MX_TIM4_Init+0xe8>)
 80011d0:	f007 f898 	bl	8008304 <HAL_TIM_PWM_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 80011da:	f000 fd76 	bl	8001cca <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <MX_TIM4_Init+0xe8>)
 80011e0:	f000 feda 	bl	8001f98 <HAL_TIM_MspPostInit>

}
 80011e4:	bf00      	nop
 80011e6:	3738      	adds	r7, #56	; 0x38
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2000019c 	.word	0x2000019c
 80011f0:	40000800 	.word	0x40000800

080011f4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fa:	f107 0310 	add.w	r3, r7, #16
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_TIM5_Init+0x94>)
 8001214:	4a1d      	ldr	r2, [pc, #116]	; (800128c <MX_TIM5_Init+0x98>)
 8001216:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 240-1;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MX_TIM5_Init+0x94>)
 800121a:	22ef      	movs	r2, #239	; 0xef
 800121c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_TIM5_Init+0x94>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 8001224:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_TIM5_Init+0x94>)
 8001226:	f240 12f3 	movw	r2, #499	; 0x1f3
 800122a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_TIM5_Init+0x94>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_TIM5_Init+0x94>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001238:	4813      	ldr	r0, [pc, #76]	; (8001288 <MX_TIM5_Init+0x94>)
 800123a:	f006 fd82 	bl	8007d42 <HAL_TIM_Base_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001244:	f000 fd41 	bl	8001cca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MX_TIM5_Init+0x94>)
 8001256:	f007 f965 	bl	8008524 <HAL_TIM_ConfigClockSource>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001260:	f000 fd33 	bl	8001cca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_TIM5_Init+0x94>)
 8001272:	f007 fe9f 	bl	8008fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800127c:	f000 fd25 	bl	8001cca <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	3720      	adds	r7, #32
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000400 	.word	0x20000400
 800128c:	40000c00 	.word	0x40000c00

08001290 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_TIM12_Init+0x6c>)
 80012a4:	4a16      	ldr	r2, [pc, #88]	; (8001300 <MX_TIM12_Init+0x70>)
 80012a6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 240-1;
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_TIM12_Init+0x6c>)
 80012aa:	22ef      	movs	r2, #239	; 0xef
 80012ac:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_TIM12_Init+0x6c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 500-1;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_TIM12_Init+0x6c>)
 80012b6:	f240 12f3 	movw	r2, #499	; 0x1f3
 80012ba:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_TIM12_Init+0x6c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_TIM12_Init+0x6c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <MX_TIM12_Init+0x6c>)
 80012ca:	f006 fd3a 	bl	8007d42 <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80012d4:	f000 fcf9 	bl	8001cca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_TIM12_Init+0x6c>)
 80012e4:	f007 f91e 	bl	8008524 <HAL_TIM_ConfigClockSource>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80012ee:	f000 fcec 	bl	8001cca <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200007f8 	.word	0x200007f8
 8001300:	40001800 	.word	0x40001800

08001304 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b09a      	sub	sp, #104	; 0x68
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
 8001334:	615a      	str	r2, [r3, #20]
 8001336:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	222c      	movs	r2, #44	; 0x2c
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f009 ffae 	bl	800b2a0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001344:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <MX_TIM15_Init+0x140>)
 8001346:	4a40      	ldr	r2, [pc, #256]	; (8001448 <MX_TIM15_Init+0x144>)
 8001348:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 800134a:	4b3e      	ldr	r3, [pc, #248]	; (8001444 <MX_TIM15_Init+0x140>)
 800134c:	22ef      	movs	r2, #239	; 0xef
 800134e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001350:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <MX_TIM15_Init+0x140>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 625-1;
 8001356:	4b3b      	ldr	r3, [pc, #236]	; (8001444 <MX_TIM15_Init+0x140>)
 8001358:	f44f 721c 	mov.w	r2, #624	; 0x270
 800135c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800135e:	4b39      	ldr	r3, [pc, #228]	; (8001444 <MX_TIM15_Init+0x140>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001364:	4b37      	ldr	r3, [pc, #220]	; (8001444 <MX_TIM15_Init+0x140>)
 8001366:	2200      	movs	r2, #0
 8001368:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136a:	4b36      	ldr	r3, [pc, #216]	; (8001444 <MX_TIM15_Init+0x140>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001370:	4834      	ldr	r0, [pc, #208]	; (8001444 <MX_TIM15_Init+0x140>)
 8001372:	f006 fce6 	bl	8007d42 <HAL_TIM_Base_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 800137c:	f000 fca5 	bl	8001cca <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001386:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800138a:	4619      	mov	r1, r3
 800138c:	482d      	ldr	r0, [pc, #180]	; (8001444 <MX_TIM15_Init+0x140>)
 800138e:	f007 f8c9 	bl	8008524 <HAL_TIM_ConfigClockSource>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8001398:	f000 fc97 	bl	8001cca <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800139c:	4829      	ldr	r0, [pc, #164]	; (8001444 <MX_TIM15_Init+0x140>)
 800139e:	f006 fd27 	bl	8007df0 <HAL_TIM_PWM_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80013a8:	f000 fc8f 	bl	8001cca <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80013b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013b8:	4619      	mov	r1, r3
 80013ba:	4822      	ldr	r0, [pc, #136]	; (8001444 <MX_TIM15_Init+0x140>)
 80013bc:	f007 fdfa 	bl	8008fb4 <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80013c6:	f000 fc80 	bl	8001cca <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ca:	2360      	movs	r3, #96	; 0x60
 80013cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80013ce:	f240 1339 	movw	r3, #313	; 0x139
 80013d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013d4:	2300      	movs	r3, #0
 80013d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013d8:	2300      	movs	r3, #0
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013ec:	2204      	movs	r2, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4814      	ldr	r0, [pc, #80]	; (8001444 <MX_TIM15_Init+0x140>)
 80013f2:	f006 ff87 	bl	8008304 <HAL_TIM_PWM_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80013fc:	f000 fc65 	bl	8001cca <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001418:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	4619      	mov	r1, r3
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_TIM15_Init+0x140>)
 8001428:	f007 fe4c 	bl	80090c4 <HAL_TIMEx_ConfigBreakDeadTime>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001432:	f000 fc4a 	bl	8001cca <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001436:	4803      	ldr	r0, [pc, #12]	; (8001444 <MX_TIM15_Init+0x140>)
 8001438:	f000 fdae 	bl	8001f98 <HAL_TIM_MspPostInit>

}
 800143c:	bf00      	nop
 800143e:	3768      	adds	r7, #104	; 0x68
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200002f8 	.word	0x200002f8
 8001448:	40014000 	.word	0x40014000

0800144c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <MX_UART4_Init+0x90>)
 8001452:	4a23      	ldr	r2, [pc, #140]	; (80014e0 <MX_UART4_Init+0x94>)
 8001454:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001456:	4b21      	ldr	r3, [pc, #132]	; (80014dc <MX_UART4_Init+0x90>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <MX_UART4_Init+0x90>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <MX_UART4_Init+0x90>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <MX_UART4_Init+0x90>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <MX_UART4_Init+0x90>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b19      	ldr	r3, [pc, #100]	; (80014dc <MX_UART4_Init+0x90>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <MX_UART4_Init+0x90>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_UART4_Init+0x90>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <MX_UART4_Init+0x90>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <MX_UART4_Init+0x90>)
 8001490:	2200      	movs	r2, #0
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001494:	4811      	ldr	r0, [pc, #68]	; (80014dc <MX_UART4_Init+0x90>)
 8001496:	f007 feb1 	bl	80091fc <HAL_UART_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80014a0:	f000 fc13 	bl	8001cca <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a4:	2100      	movs	r1, #0
 80014a6:	480d      	ldr	r0, [pc, #52]	; (80014dc <MX_UART4_Init+0x90>)
 80014a8:	f009 fdc5 	bl	800b036 <HAL_UARTEx_SetTxFifoThreshold>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80014b2:	f000 fc0a 	bl	8001cca <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b6:	2100      	movs	r1, #0
 80014b8:	4808      	ldr	r0, [pc, #32]	; (80014dc <MX_UART4_Init+0x90>)
 80014ba:	f009 fdfa 	bl	800b0b2 <HAL_UARTEx_SetRxFifoThreshold>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80014c4:	f000 fc01 	bl	8001cca <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80014c8:	4804      	ldr	r0, [pc, #16]	; (80014dc <MX_UART4_Init+0x90>)
 80014ca:	f009 fd7b 	bl	800afc4 <HAL_UARTEx_DisableFifoMode>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80014d4:	f000 fbf9 	bl	8001cca <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000690 	.word	0x20000690
 80014e0:	40004c00 	.word	0x40004c00

080014e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014e8:	4b22      	ldr	r3, [pc, #136]	; (8001574 <MX_USART3_UART_Init+0x90>)
 80014ea:	4a23      	ldr	r2, [pc, #140]	; (8001578 <MX_USART3_UART_Init+0x94>)
 80014ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014ee:	4b21      	ldr	r3, [pc, #132]	; (8001574 <MX_USART3_UART_Init+0x90>)
 80014f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <MX_USART3_UART_Init+0x90>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <MX_USART3_UART_Init+0x90>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001502:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <MX_USART3_UART_Init+0x90>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <MX_USART3_UART_Init+0x90>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b19      	ldr	r3, [pc, #100]	; (8001574 <MX_USART3_UART_Init+0x90>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <MX_USART3_UART_Init+0x90>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <MX_USART3_UART_Init+0x90>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_USART3_UART_Init+0x90>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_USART3_UART_Init+0x90>)
 8001528:	2200      	movs	r2, #0
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800152c:	4811      	ldr	r0, [pc, #68]	; (8001574 <MX_USART3_UART_Init+0x90>)
 800152e:	f007 fe65 	bl	80091fc <HAL_UART_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001538:	f000 fbc7 	bl	8001cca <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800153c:	2100      	movs	r1, #0
 800153e:	480d      	ldr	r0, [pc, #52]	; (8001574 <MX_USART3_UART_Init+0x90>)
 8001540:	f009 fd79 	bl	800b036 <HAL_UARTEx_SetTxFifoThreshold>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800154a:	f000 fbbe 	bl	8001cca <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800154e:	2100      	movs	r1, #0
 8001550:	4808      	ldr	r0, [pc, #32]	; (8001574 <MX_USART3_UART_Init+0x90>)
 8001552:	f009 fdae 	bl	800b0b2 <HAL_UARTEx_SetRxFifoThreshold>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800155c:	f000 fbb5 	bl	8001cca <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_USART3_UART_Init+0x90>)
 8001562:	f009 fd2f 	bl	800afc4 <HAL_UARTEx_DisableFifoMode>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800156c:	f000 fbad 	bl	8001cca <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000260 	.word	0x20000260
 8001578:	40004800 	.word	0x40004800

0800157c <MX_DMA_Init>:
  *   hdma_memtomem_dma2_stream3
  *   hdma_memtomem_dma2_stream4
  *   hdma_memtomem_dma2_stream5
  */
static void MX_DMA_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001582:	4b9b      	ldr	r3, [pc, #620]	; (80017f0 <MX_DMA_Init+0x274>)
 8001584:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001588:	4a99      	ldr	r2, [pc, #612]	; (80017f0 <MX_DMA_Init+0x274>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001592:	4b97      	ldr	r3, [pc, #604]	; (80017f0 <MX_DMA_Init+0x274>)
 8001594:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015a0:	4b93      	ldr	r3, [pc, #588]	; (80017f0 <MX_DMA_Init+0x274>)
 80015a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015a6:	4a92      	ldr	r2, [pc, #584]	; (80017f0 <MX_DMA_Init+0x274>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015b0:	4b8f      	ldr	r3, [pc, #572]	; (80017f0 <MX_DMA_Init+0x274>)
 80015b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream6 on DMA2_Stream6 */
  hdma_memtomem_dma2_stream6.Instance = DMA2_Stream6;
 80015be:	4b8d      	ldr	r3, [pc, #564]	; (80017f4 <MX_DMA_Init+0x278>)
 80015c0:	4a8d      	ldr	r2, [pc, #564]	; (80017f8 <MX_DMA_Init+0x27c>)
 80015c2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream6.Init.Request = DMA_REQUEST_MEM2MEM;
 80015c4:	4b8b      	ldr	r3, [pc, #556]	; (80017f4 <MX_DMA_Init+0x278>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream6.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80015ca:	4b8a      	ldr	r3, [pc, #552]	; (80017f4 <MX_DMA_Init+0x278>)
 80015cc:	2280      	movs	r2, #128	; 0x80
 80015ce:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream6.Init.PeriphInc = DMA_PINC_ENABLE;
 80015d0:	4b88      	ldr	r3, [pc, #544]	; (80017f4 <MX_DMA_Init+0x278>)
 80015d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream6.Init.MemInc = DMA_MINC_ENABLE;
 80015d8:	4b86      	ldr	r3, [pc, #536]	; (80017f4 <MX_DMA_Init+0x278>)
 80015da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015de:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream6.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015e0:	4b84      	ldr	r3, [pc, #528]	; (80017f4 <MX_DMA_Init+0x278>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream6.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015e6:	4b83      	ldr	r3, [pc, #524]	; (80017f4 <MX_DMA_Init+0x278>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream6.Init.Mode = DMA_NORMAL;
 80015ec:	4b81      	ldr	r3, [pc, #516]	; (80017f4 <MX_DMA_Init+0x278>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream6.Init.Priority = DMA_PRIORITY_LOW;
 80015f2:	4b80      	ldr	r3, [pc, #512]	; (80017f4 <MX_DMA_Init+0x278>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream6.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015f8:	4b7e      	ldr	r3, [pc, #504]	; (80017f4 <MX_DMA_Init+0x278>)
 80015fa:	2204      	movs	r2, #4
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream6.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015fe:	4b7d      	ldr	r3, [pc, #500]	; (80017f4 <MX_DMA_Init+0x278>)
 8001600:	2203      	movs	r2, #3
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream6.Init.MemBurst = DMA_MBURST_SINGLE;
 8001604:	4b7b      	ldr	r3, [pc, #492]	; (80017f4 <MX_DMA_Init+0x278>)
 8001606:	2200      	movs	r2, #0
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream6.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800160a:	4b7a      	ldr	r3, [pc, #488]	; (80017f4 <MX_DMA_Init+0x278>)
 800160c:	2200      	movs	r2, #0
 800160e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream6) != HAL_OK)
 8001610:	4878      	ldr	r0, [pc, #480]	; (80017f4 <MX_DMA_Init+0x278>)
 8001612:	f001 fb39 	bl	8002c88 <HAL_DMA_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 800161c:	f000 fb55 	bl	8001cca <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream2 on DMA2_Stream2 */
  hdma_memtomem_dma2_stream2.Instance = DMA2_Stream2;
 8001620:	4b76      	ldr	r3, [pc, #472]	; (80017fc <MX_DMA_Init+0x280>)
 8001622:	4a77      	ldr	r2, [pc, #476]	; (8001800 <MX_DMA_Init+0x284>)
 8001624:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream2.Init.Request = DMA_REQUEST_MEM2MEM;
 8001626:	4b75      	ldr	r3, [pc, #468]	; (80017fc <MX_DMA_Init+0x280>)
 8001628:	2200      	movs	r2, #0
 800162a:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800162c:	4b73      	ldr	r3, [pc, #460]	; (80017fc <MX_DMA_Init+0x280>)
 800162e:	2280      	movs	r2, #128	; 0x80
 8001630:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream2.Init.PeriphInc = DMA_PINC_ENABLE;
 8001632:	4b72      	ldr	r3, [pc, #456]	; (80017fc <MX_DMA_Init+0x280>)
 8001634:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001638:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream2.Init.MemInc = DMA_MINC_ENABLE;
 800163a:	4b70      	ldr	r3, [pc, #448]	; (80017fc <MX_DMA_Init+0x280>)
 800163c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001640:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001642:	4b6e      	ldr	r3, [pc, #440]	; (80017fc <MX_DMA_Init+0x280>)
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001648:	4b6c      	ldr	r3, [pc, #432]	; (80017fc <MX_DMA_Init+0x280>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream2.Init.Mode = DMA_NORMAL;
 800164e:	4b6b      	ldr	r3, [pc, #428]	; (80017fc <MX_DMA_Init+0x280>)
 8001650:	2200      	movs	r2, #0
 8001652:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream2.Init.Priority = DMA_PRIORITY_LOW;
 8001654:	4b69      	ldr	r3, [pc, #420]	; (80017fc <MX_DMA_Init+0x280>)
 8001656:	2200      	movs	r2, #0
 8001658:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800165a:	4b68      	ldr	r3, [pc, #416]	; (80017fc <MX_DMA_Init+0x280>)
 800165c:	2204      	movs	r2, #4
 800165e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001660:	4b66      	ldr	r3, [pc, #408]	; (80017fc <MX_DMA_Init+0x280>)
 8001662:	2203      	movs	r2, #3
 8001664:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream2.Init.MemBurst = DMA_MBURST_SINGLE;
 8001666:	4b65      	ldr	r3, [pc, #404]	; (80017fc <MX_DMA_Init+0x280>)
 8001668:	2200      	movs	r2, #0
 800166a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800166c:	4b63      	ldr	r3, [pc, #396]	; (80017fc <MX_DMA_Init+0x280>)
 800166e:	2200      	movs	r2, #0
 8001670:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream2) != HAL_OK)
 8001672:	4862      	ldr	r0, [pc, #392]	; (80017fc <MX_DMA_Init+0x280>)
 8001674:	f001 fb08 	bl	8002c88 <HAL_DMA_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_DMA_Init+0x106>
  {
    Error_Handler( );
 800167e:	f000 fb24 	bl	8001cca <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream3 on DMA2_Stream3 */
  hdma_memtomem_dma2_stream3.Instance = DMA2_Stream3;
 8001682:	4b60      	ldr	r3, [pc, #384]	; (8001804 <MX_DMA_Init+0x288>)
 8001684:	4a60      	ldr	r2, [pc, #384]	; (8001808 <MX_DMA_Init+0x28c>)
 8001686:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream3.Init.Request = DMA_REQUEST_MEM2MEM;
 8001688:	4b5e      	ldr	r3, [pc, #376]	; (8001804 <MX_DMA_Init+0x288>)
 800168a:	2200      	movs	r2, #0
 800168c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800168e:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <MX_DMA_Init+0x288>)
 8001690:	2280      	movs	r2, #128	; 0x80
 8001692:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream3.Init.PeriphInc = DMA_PINC_ENABLE;
 8001694:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <MX_DMA_Init+0x288>)
 8001696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream3.Init.MemInc = DMA_MINC_ENABLE;
 800169c:	4b59      	ldr	r3, [pc, #356]	; (8001804 <MX_DMA_Init+0x288>)
 800169e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a2:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016a4:	4b57      	ldr	r3, [pc, #348]	; (8001804 <MX_DMA_Init+0x288>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016aa:	4b56      	ldr	r3, [pc, #344]	; (8001804 <MX_DMA_Init+0x288>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream3.Init.Mode = DMA_NORMAL;
 80016b0:	4b54      	ldr	r3, [pc, #336]	; (8001804 <MX_DMA_Init+0x288>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream3.Init.Priority = DMA_PRIORITY_LOW;
 80016b6:	4b53      	ldr	r3, [pc, #332]	; (8001804 <MX_DMA_Init+0x288>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016bc:	4b51      	ldr	r3, [pc, #324]	; (8001804 <MX_DMA_Init+0x288>)
 80016be:	2204      	movs	r2, #4
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016c2:	4b50      	ldr	r3, [pc, #320]	; (8001804 <MX_DMA_Init+0x288>)
 80016c4:	2203      	movs	r2, #3
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream3.Init.MemBurst = DMA_MBURST_SINGLE;
 80016c8:	4b4e      	ldr	r3, [pc, #312]	; (8001804 <MX_DMA_Init+0x288>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80016ce:	4b4d      	ldr	r3, [pc, #308]	; (8001804 <MX_DMA_Init+0x288>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream3) != HAL_OK)
 80016d4:	484b      	ldr	r0, [pc, #300]	; (8001804 <MX_DMA_Init+0x288>)
 80016d6:	f001 fad7 	bl	8002c88 <HAL_DMA_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_DMA_Init+0x168>
  {
    Error_Handler( );
 80016e0:	f000 faf3 	bl	8001cca <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream4 on DMA2_Stream4 */
  hdma_memtomem_dma2_stream4.Instance = DMA2_Stream4;
 80016e4:	4b49      	ldr	r3, [pc, #292]	; (800180c <MX_DMA_Init+0x290>)
 80016e6:	4a4a      	ldr	r2, [pc, #296]	; (8001810 <MX_DMA_Init+0x294>)
 80016e8:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream4.Init.Request = DMA_REQUEST_MEM2MEM;
 80016ea:	4b48      	ldr	r3, [pc, #288]	; (800180c <MX_DMA_Init+0x290>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80016f0:	4b46      	ldr	r3, [pc, #280]	; (800180c <MX_DMA_Init+0x290>)
 80016f2:	2280      	movs	r2, #128	; 0x80
 80016f4:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream4.Init.PeriphInc = DMA_PINC_ENABLE;
 80016f6:	4b45      	ldr	r3, [pc, #276]	; (800180c <MX_DMA_Init+0x290>)
 80016f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fc:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream4.Init.MemInc = DMA_MINC_ENABLE;
 80016fe:	4b43      	ldr	r3, [pc, #268]	; (800180c <MX_DMA_Init+0x290>)
 8001700:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001704:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream4.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <MX_DMA_Init+0x290>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream4.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800170c:	4b3f      	ldr	r3, [pc, #252]	; (800180c <MX_DMA_Init+0x290>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream4.Init.Mode = DMA_NORMAL;
 8001712:	4b3e      	ldr	r3, [pc, #248]	; (800180c <MX_DMA_Init+0x290>)
 8001714:	2200      	movs	r2, #0
 8001716:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream4.Init.Priority = DMA_PRIORITY_LOW;
 8001718:	4b3c      	ldr	r3, [pc, #240]	; (800180c <MX_DMA_Init+0x290>)
 800171a:	2200      	movs	r2, #0
 800171c:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800171e:	4b3b      	ldr	r3, [pc, #236]	; (800180c <MX_DMA_Init+0x290>)
 8001720:	2204      	movs	r2, #4
 8001722:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001724:	4b39      	ldr	r3, [pc, #228]	; (800180c <MX_DMA_Init+0x290>)
 8001726:	2203      	movs	r2, #3
 8001728:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream4.Init.MemBurst = DMA_MBURST_SINGLE;
 800172a:	4b38      	ldr	r3, [pc, #224]	; (800180c <MX_DMA_Init+0x290>)
 800172c:	2200      	movs	r2, #0
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001730:	4b36      	ldr	r3, [pc, #216]	; (800180c <MX_DMA_Init+0x290>)
 8001732:	2200      	movs	r2, #0
 8001734:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream4) != HAL_OK)
 8001736:	4835      	ldr	r0, [pc, #212]	; (800180c <MX_DMA_Init+0x290>)
 8001738:	f001 faa6 	bl	8002c88 <HAL_DMA_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_DMA_Init+0x1ca>
  {
    Error_Handler( );
 8001742:	f000 fac2 	bl	8001cca <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream5 on DMA2_Stream5 */
  hdma_memtomem_dma2_stream5.Instance = DMA2_Stream5;
 8001746:	4b33      	ldr	r3, [pc, #204]	; (8001814 <MX_DMA_Init+0x298>)
 8001748:	4a33      	ldr	r2, [pc, #204]	; (8001818 <MX_DMA_Init+0x29c>)
 800174a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream5.Init.Request = DMA_REQUEST_MEM2MEM;
 800174c:	4b31      	ldr	r3, [pc, #196]	; (8001814 <MX_DMA_Init+0x298>)
 800174e:	2200      	movs	r2, #0
 8001750:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream5.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001752:	4b30      	ldr	r3, [pc, #192]	; (8001814 <MX_DMA_Init+0x298>)
 8001754:	2280      	movs	r2, #128	; 0x80
 8001756:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream5.Init.PeriphInc = DMA_PINC_ENABLE;
 8001758:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <MX_DMA_Init+0x298>)
 800175a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream5.Init.MemInc = DMA_MINC_ENABLE;
 8001760:	4b2c      	ldr	r3, [pc, #176]	; (8001814 <MX_DMA_Init+0x298>)
 8001762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001766:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream5.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001768:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <MX_DMA_Init+0x298>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream5.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800176e:	4b29      	ldr	r3, [pc, #164]	; (8001814 <MX_DMA_Init+0x298>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream5.Init.Mode = DMA_NORMAL;
 8001774:	4b27      	ldr	r3, [pc, #156]	; (8001814 <MX_DMA_Init+0x298>)
 8001776:	2200      	movs	r2, #0
 8001778:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream5.Init.Priority = DMA_PRIORITY_LOW;
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <MX_DMA_Init+0x298>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream5.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <MX_DMA_Init+0x298>)
 8001782:	2204      	movs	r2, #4
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream5.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <MX_DMA_Init+0x298>)
 8001788:	2203      	movs	r2, #3
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream5.Init.MemBurst = DMA_MBURST_SINGLE;
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <MX_DMA_Init+0x298>)
 800178e:	2200      	movs	r2, #0
 8001790:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream5.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <MX_DMA_Init+0x298>)
 8001794:	2200      	movs	r2, #0
 8001796:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream5) != HAL_OK)
 8001798:	481e      	ldr	r0, [pc, #120]	; (8001814 <MX_DMA_Init+0x298>)
 800179a:	f001 fa75 	bl	8002c88 <HAL_DMA_Init>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_DMA_Init+0x22c>
  {
    Error_Handler( );
 80017a4:	f000 fa91 	bl	8001cca <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2100      	movs	r1, #0
 80017ac:	200c      	movs	r0, #12
 80017ae:	f001 f94c 	bl	8002a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80017b2:	200c      	movs	r0, #12
 80017b4:	f001 f963 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2100      	movs	r1, #0
 80017bc:	200d      	movs	r0, #13
 80017be:	f001 f944 	bl	8002a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80017c2:	200d      	movs	r0, #13
 80017c4:	f001 f95b 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	2038      	movs	r0, #56	; 0x38
 80017ce:	f001 f93c 	bl	8002a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017d2:	2038      	movs	r0, #56	; 0x38
 80017d4:	f001 f953 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	2039      	movs	r0, #57	; 0x39
 80017de:	f001 f934 	bl	8002a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80017e2:	2039      	movs	r0, #57	; 0x39
 80017e4:	f001 f94b 	bl	8002a7e <HAL_NVIC_EnableIRQ>

}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	58024400 	.word	0x58024400
 80017f4:	200005cc 	.word	0x200005cc
 80017f8:	400204a0 	.word	0x400204a0
 80017fc:	20000728 	.word	0x20000728
 8001800:	40020440 	.word	0x40020440
 8001804:	20000524 	.word	0x20000524
 8001808:	40020458 	.word	0x40020458
 800180c:	20000034 	.word	0x20000034
 8001810:	40020470 	.word	0x40020470
 8001814:	200000ac 	.word	0x200000ac
 8001818:	40020488 	.word	0x40020488

0800181c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001832:	4b7b      	ldr	r3, [pc, #492]	; (8001a20 <MX_GPIO_Init+0x204>)
 8001834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001838:	4a79      	ldr	r2, [pc, #484]	; (8001a20 <MX_GPIO_Init+0x204>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001842:	4b77      	ldr	r3, [pc, #476]	; (8001a20 <MX_GPIO_Init+0x204>)
 8001844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001850:	4b73      	ldr	r3, [pc, #460]	; (8001a20 <MX_GPIO_Init+0x204>)
 8001852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001856:	4a72      	ldr	r2, [pc, #456]	; (8001a20 <MX_GPIO_Init+0x204>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001860:	4b6f      	ldr	r3, [pc, #444]	; (8001a20 <MX_GPIO_Init+0x204>)
 8001862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800186e:	4b6c      	ldr	r3, [pc, #432]	; (8001a20 <MX_GPIO_Init+0x204>)
 8001870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001874:	4a6a      	ldr	r2, [pc, #424]	; (8001a20 <MX_GPIO_Init+0x204>)
 8001876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800187a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187e:	4b68      	ldr	r3, [pc, #416]	; (8001a20 <MX_GPIO_Init+0x204>)
 8001880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	4b64      	ldr	r3, [pc, #400]	; (8001a20 <MX_GPIO_Init+0x204>)
 800188e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001892:	4a63      	ldr	r2, [pc, #396]	; (8001a20 <MX_GPIO_Init+0x204>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189c:	4b60      	ldr	r3, [pc, #384]	; (8001a20 <MX_GPIO_Init+0x204>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	4b5d      	ldr	r3, [pc, #372]	; (8001a20 <MX_GPIO_Init+0x204>)
 80018ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b0:	4a5b      	ldr	r2, [pc, #364]	; (8001a20 <MX_GPIO_Init+0x204>)
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ba:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <MX_GPIO_Init+0x204>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c8:	4b55      	ldr	r3, [pc, #340]	; (8001a20 <MX_GPIO_Init+0x204>)
 80018ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ce:	4a54      	ldr	r2, [pc, #336]	; (8001a20 <MX_GPIO_Init+0x204>)
 80018d0:	f043 0308 	orr.w	r3, r3, #8
 80018d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d8:	4b51      	ldr	r3, [pc, #324]	; (8001a20 <MX_GPIO_Init+0x204>)
 80018da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018e6:	4b4e      	ldr	r3, [pc, #312]	; (8001a20 <MX_GPIO_Init+0x204>)
 80018e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ec:	4a4c      	ldr	r2, [pc, #304]	; (8001a20 <MX_GPIO_Init+0x204>)
 80018ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018f6:	4b4a      	ldr	r3, [pc, #296]	; (8001a20 <MX_GPIO_Init+0x204>)
 80018f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001904:	2200      	movs	r2, #0
 8001906:	f644 2121 	movw	r1, #18977	; 0x4a21
 800190a:	4846      	ldr	r0, [pc, #280]	; (8001a24 <MX_GPIO_Init+0x208>)
 800190c:	f003 fd90 	bl	8005430 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	f24c 0102 	movw	r1, #49154	; 0xc002
 8001916:	4844      	ldr	r0, [pc, #272]	; (8001a28 <MX_GPIO_Init+0x20c>)
 8001918:	f003 fd8a 	bl	8005430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001922:	4842      	ldr	r0, [pc, #264]	; (8001a2c <MX_GPIO_Init+0x210>)
 8001924:	f003 fd84 	bl	8005430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800192e:	4840      	ldr	r0, [pc, #256]	; (8001a30 <MX_GPIO_Init+0x214>)
 8001930:	f003 fd7e 	bl	8005430 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001934:	f644 2321 	movw	r3, #18977	; 0x4a21
 8001938:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193a:	2301      	movs	r3, #1
 800193c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 031c 	add.w	r3, r7, #28
 800194a:	4619      	mov	r1, r3
 800194c:	4835      	ldr	r0, [pc, #212]	; (8001a24 <MX_GPIO_Init+0x208>)
 800194e:	f003 fbbf 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin LM6_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin|LM6_Pin;
 8001952:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8001956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001958:	4b36      	ldr	r3, [pc, #216]	; (8001a34 <MX_GPIO_Init+0x218>)
 800195a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	4830      	ldr	r0, [pc, #192]	; (8001a28 <MX_GPIO_Init+0x20c>)
 8001968:	f003 fbb2 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 800196c:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001972:	2301      	movs	r3, #1
 8001974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	4619      	mov	r1, r3
 8001984:	4828      	ldr	r0, [pc, #160]	; (8001a28 <MX_GPIO_Init+0x20c>)
 8001986:	f003 fba3 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800198a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	4822      	ldr	r0, [pc, #136]	; (8001a2c <MX_GPIO_Init+0x210>)
 80019a4:	f003 fb94 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80019a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	4619      	mov	r1, r3
 80019c0:	481b      	ldr	r0, [pc, #108]	; (8001a30 <MX_GPIO_Init+0x214>)
 80019c2:	f003 fb85 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 80019c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <MX_GPIO_Init+0x218>)
 80019ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4619      	mov	r1, r3
 80019da:	4817      	ldr	r0, [pc, #92]	; (8001a38 <MX_GPIO_Init+0x21c>)
 80019dc:	f003 fb78 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 80019e0:	23c0      	movs	r3, #192	; 0xc0
 80019e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <MX_GPIO_Init+0x218>)
 80019e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	480c      	ldr	r0, [pc, #48]	; (8001a24 <MX_GPIO_Init+0x208>)
 80019f4:	f003 fb6c 	bl	80050d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2103      	movs	r1, #3
 80019fc:	2017      	movs	r0, #23
 80019fe:	f001 f824 	bl	8002a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a02:	2017      	movs	r0, #23
 8001a04:	f001 f83b 	bl	8002a7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2103      	movs	r1, #3
 8001a0c:	2028      	movs	r0, #40	; 0x28
 8001a0e:	f001 f81c 	bl	8002a4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a12:	2028      	movs	r0, #40	; 0x28
 8001a14:	f001 f833 	bl	8002a7e <HAL_NVIC_EnableIRQ>

}
 8001a18:	bf00      	nop
 8001a1a:	3730      	adds	r7, #48	; 0x30
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	58024400 	.word	0x58024400
 8001a24:	58020400 	.word	0x58020400
 8001a28:	58021000 	.word	0x58021000
 8001a2c:	58020c00 	.word	0x58020c00
 8001a30:	58020800 	.word	0x58020800
 8001a34:	11110000 	.word	0x11110000
 8001a38:	58021800 	.word	0x58021800

08001a3c <HAL_UART_RxCpltCallback>:

return ch;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a81      	ldr	r2, [pc, #516]	; (8001c4c <HAL_UART_RxCpltCallback+0x210>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	f040 80fb 	bne.w	8001c44 <HAL_UART_RxCpltCallback+0x208>
	{
		UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ReceivedData_Address;
 8001a4e:	4b80      	ldr	r3, [pc, #512]	; (8001c50 <HAL_UART_RxCpltCallback+0x214>)
 8001a50:	22ac      	movs	r2, #172	; 0xac
 8001a52:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1, 100);
 8001a54:	2364      	movs	r3, #100	; 0x64
 8001a56:	2201      	movs	r2, #1
 8001a58:	497d      	ldr	r1, [pc, #500]	; (8001c50 <HAL_UART_RxCpltCallback+0x214>)
 8001a5a:	487c      	ldr	r0, [pc, #496]	; (8001c4c <HAL_UART_RxCpltCallback+0x210>)
 8001a5c:	f007 fc1e 	bl	800929c <HAL_UART_Transmit>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2101      	movs	r1, #1
 8001a64:	487b      	ldr	r0, [pc, #492]	; (8001c54 <HAL_UART_RxCpltCallback+0x218>)
 8001a66:	f003 fce3 	bl	8005430 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	487a      	ldr	r0, [pc, #488]	; (8001c58 <HAL_UART_RxCpltCallback+0x21c>)
 8001a70:	f003 fcde 	bl	8005430 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a7a:	4876      	ldr	r0, [pc, #472]	; (8001c54 <HAL_UART_RxCpltCallback+0x218>)
 8001a7c:	f003 fcd8 	bl	8005430 <HAL_GPIO_WritePin>
		volatile uint8_t num_mode = UART3_RXBUFFER[0] & 0x0F;
 8001a80:	4b76      	ldr	r3, [pc, #472]	; (8001c5c <HAL_UART_RxCpltCallback+0x220>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	75fb      	strb	r3, [r7, #23]
		volatile int received_checksum = UART3_RXBUFFER[3];
 8001a8c:	4b73      	ldr	r3, [pc, #460]	; (8001c5c <HAL_UART_RxCpltCallback+0x220>)
 8001a8e:	78db      	ldrb	r3, [r3, #3]
 8001a90:	613b      	str	r3, [r7, #16]
		volatile int calculate_checksum = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 8001a96:	2400      	movs	r4, #0
 8001a98:	e006      	b.n	8001aa8 <HAL_UART_RxCpltCallback+0x6c>
		{
			calculate_checksum += UART3_RXBUFFER[i];
 8001a9a:	4b70      	ldr	r3, [pc, #448]	; (8001c5c <HAL_UART_RxCpltCallback+0x220>)
 8001a9c:	5d1b      	ldrb	r3, [r3, r4]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
		for(register int i = 0; i < 3; i++)
 8001aa6:	3401      	adds	r4, #1
 8001aa8:	2c02      	cmp	r4, #2
 8001aaa:	ddf6      	ble.n	8001a9a <HAL_UART_RxCpltCallback+0x5e>
		}
		calculate_checksum = ~calculate_checksum;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	60fb      	str	r3, [r7, #12]
		calculate_checksum = calculate_checksum & 0xFF;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	60fb      	str	r3, [r7, #12]
		if (received_checksum == calculate_checksum)
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	f040 80a9 	bne.w	8001c14 <HAL_UART_RxCpltCallback+0x1d8>
		{
			switch(num_mode)
 8001ac2:	7dfb      	ldrb	r3, [r7, #23]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	2b0e      	cmp	r3, #14
 8001aca:	f200 8091 	bhi.w	8001bf0 <HAL_UART_RxCpltCallback+0x1b4>
 8001ace:	a201      	add	r2, pc, #4	; (adr r2, 8001ad4 <HAL_UART_RxCpltCallback+0x98>)
 8001ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad4:	08001bf1 	.word	0x08001bf1
 8001ad8:	08001bf1 	.word	0x08001bf1
 8001adc:	08001bf1 	.word	0x08001bf1
 8001ae0:	08001bf1 	.word	0x08001bf1
 8001ae4:	08001bf1 	.word	0x08001bf1
 8001ae8:	08001b11 	.word	0x08001b11
 8001aec:	08001b3f 	.word	0x08001b3f
 8001af0:	08001b6d 	.word	0x08001b6d
 8001af4:	08001b9b 	.word	0x08001b9b
 8001af8:	08001bc9 	.word	0x08001bc9
 8001afc:	08001bd1 	.word	0x08001bd1
 8001b00:	08001bd9 	.word	0x08001bd9
 8001b04:	08001be1 	.word	0x08001be1
 8001b08:	08001be9 	.word	0x08001be9
 8001b0c:	08001bf1 	.word	0x08001bf1
			{
				case 6:		// q1 Mode
				{
					q1 = (uint16_t)(((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF));
 8001b10:	4b52      	ldr	r3, [pc, #328]	; (8001c5c <HAL_UART_RxCpltCallback+0x220>)
 8001b12:	785b      	ldrb	r3, [r3, #1]
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	4b4f      	ldr	r3, [pc, #316]	; (8001c5c <HAL_UART_RxCpltCallback+0x220>)
 8001b20:	789b      	ldrb	r3, [r3, #2]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001b30:	4b4b      	ldr	r3, [pc, #300]	; (8001c60 <HAL_UART_RxCpltCallback+0x224>)
 8001b32:	ed83 7b00 	vstr	d7, [r3]
					State_Input_Joint_State = 1;
 8001b36:	4b4b      	ldr	r3, [pc, #300]	; (8001c64 <HAL_UART_RxCpltCallback+0x228>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
					break;
 8001b3c:	e059      	b.n	8001bf2 <HAL_UART_RxCpltCallback+0x1b6>
				}
				case 7:		// q2 Mode
				{
					q2 = (uint16_t)(((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF));
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_UART_RxCpltCallback+0x220>)
 8001b40:	785b      	ldrb	r3, [r3, #1]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	4b43      	ldr	r3, [pc, #268]	; (8001c5c <HAL_UART_RxCpltCallback+0x220>)
 8001b4e:	789b      	ldrb	r3, [r3, #2]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	ee07 3a90 	vmov	s15, r3
 8001b5a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001b5e:	4b42      	ldr	r3, [pc, #264]	; (8001c68 <HAL_UART_RxCpltCallback+0x22c>)
 8001b60:	ed83 7b00 	vstr	d7, [r3]
					State_Input_Joint_State = 1;
 8001b64:	4b3f      	ldr	r3, [pc, #252]	; (8001c64 <HAL_UART_RxCpltCallback+0x228>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
					break;
 8001b6a:	e042      	b.n	8001bf2 <HAL_UART_RxCpltCallback+0x1b6>
				}
				case 8:		// q3 Mode
				{
					q3 = (uint16_t)(((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF));
 8001b6c:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <HAL_UART_RxCpltCallback+0x220>)
 8001b6e:	785b      	ldrb	r3, [r3, #1]
 8001b70:	021b      	lsls	r3, r3, #8
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	4b38      	ldr	r3, [pc, #224]	; (8001c5c <HAL_UART_RxCpltCallback+0x220>)
 8001b7c:	789b      	ldrb	r3, [r3, #2]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	4413      	add	r3, r2
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001b8c:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <HAL_UART_RxCpltCallback+0x230>)
 8001b8e:	ed83 7b00 	vstr	d7, [r3]
					State_Input_Joint_State = 1;
 8001b92:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <HAL_UART_RxCpltCallback+0x228>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	701a      	strb	r2, [r3, #0]
					break;
 8001b98:	e02b      	b.n	8001bf2 <HAL_UART_RxCpltCallback+0x1b6>
				}
				case 9:		// q4 Mode
				{
					q4 = (uint16_t)(((UART3_RXBUFFER[1] << 8) & 0xFF00) + (UART3_RXBUFFER[2] & 0x00FF));
 8001b9a:	4b30      	ldr	r3, [pc, #192]	; (8001c5c <HAL_UART_RxCpltCallback+0x220>)
 8001b9c:	785b      	ldrb	r3, [r3, #1]
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <HAL_UART_RxCpltCallback+0x220>)
 8001baa:	789b      	ldrb	r3, [r3, #2]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	4413      	add	r3, r2
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	ee07 3a90 	vmov	s15, r3
 8001bb6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001bba:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_UART_RxCpltCallback+0x234>)
 8001bbc:	ed83 7b00 	vstr	d7, [r3]
					State_Input_Joint_State = 1;
 8001bc0:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <HAL_UART_RxCpltCallback+0x228>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	701a      	strb	r2, [r3, #0]
					break;
 8001bc6:	e014      	b.n	8001bf2 <HAL_UART_RxCpltCallback+0x1b6>
				}
				case 10:	// Set Home Mode
				{
					State_Set_Home = 1;
 8001bc8:	4b2a      	ldr	r3, [pc, #168]	; (8001c74 <HAL_UART_RxCpltCallback+0x238>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
					break;
 8001bce:	e010      	b.n	8001bf2 <HAL_UART_RxCpltCallback+0x1b6>
				{
					break;
				}
				case 11:	// Request 4 Joint State Mode
				{
					State_Print_4_Joint_State = 1;
 8001bd0:	4b29      	ldr	r3, [pc, #164]	; (8001c78 <HAL_UART_RxCpltCallback+0x23c>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	701a      	strb	r2, [r3, #0]
					break;
 8001bd6:	e00c      	b.n	8001bf2 <HAL_UART_RxCpltCallback+0x1b6>
				}
				case 12:	// Request Gripper State Mode
				{
					State_Print_Gripper_State = 1;
 8001bd8:	4b28      	ldr	r3, [pc, #160]	; (8001c7c <HAL_UART_RxCpltCallback+0x240>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	701a      	strb	r2, [r3, #0]
					break;
 8001bde:	e008      	b.n	8001bf2 <HAL_UART_RxCpltCallback+0x1b6>
				}
				case 13:	// Activate Gripper Mode
				{
					State_Activate_Gripper = 1;
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <HAL_UART_RxCpltCallback+0x244>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]
					break;
 8001be6:	e004      	b.n	8001bf2 <HAL_UART_RxCpltCallback+0x1b6>
				}
				case 14:	// Deactivate Gripper Mode
				{
					State_Deactivate_Gripper = 1;
 8001be8:	4b26      	ldr	r3, [pc, #152]	; (8001c84 <HAL_UART_RxCpltCallback+0x248>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
					break;
 8001bee:	e000      	b.n	8001bf2 <HAL_UART_RxCpltCallback+0x1b6>
				{
					break;
				}
				default:
				{
					break;
 8001bf0:	bf00      	nop
				}
			}
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	4817      	ldr	r0, [pc, #92]	; (8001c54 <HAL_UART_RxCpltCallback+0x218>)
 8001bf8:	f003 fc1a 	bl	8005430 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2102      	movs	r1, #2
 8001c00:	4815      	ldr	r0, [pc, #84]	; (8001c58 <HAL_UART_RxCpltCallback+0x21c>)
 8001c02:	f003 fc15 	bl	8005430 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c0c:	4811      	ldr	r0, [pc, #68]	; (8001c54 <HAL_UART_RxCpltCallback+0x218>)
 8001c0e:	f003 fc0f 	bl	8005430 <HAL_GPIO_WritePin>
 8001c12:	e012      	b.n	8001c3a <HAL_UART_RxCpltCallback+0x1fe>
		}
		else
		{
			  State_Checksum_Error = 1;
 8001c14:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <HAL_UART_RxCpltCallback+0x24c>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	480d      	ldr	r0, [pc, #52]	; (8001c54 <HAL_UART_RxCpltCallback+0x218>)
 8001c20:	f003 fc06 	bl	8005430 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2102      	movs	r1, #2
 8001c28:	480b      	ldr	r0, [pc, #44]	; (8001c58 <HAL_UART_RxCpltCallback+0x21c>)
 8001c2a:	f003 fc01 	bl	8005430 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c34:	4807      	ldr	r0, [pc, #28]	; (8001c54 <HAL_UART_RxCpltCallback+0x218>)
 8001c36:	f003 fbfb 	bl	8005430 <HAL_GPIO_WritePin>
		}
		HAL_UART_Receive_IT(&huart3, UART3_RXBUFFER, BUFFSIZE);
 8001c3a:	2204      	movs	r2, #4
 8001c3c:	4907      	ldr	r1, [pc, #28]	; (8001c5c <HAL_UART_RxCpltCallback+0x220>)
 8001c3e:	4803      	ldr	r0, [pc, #12]	; (8001c4c <HAL_UART_RxCpltCallback+0x210>)
 8001c40:	f007 fbc2 	bl	80093c8 <HAL_UART_Receive_IT>
	}
}
 8001c44:	bf00      	nop
 8001c46:	371c      	adds	r7, #28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd90      	pop	{r4, r7, pc}
 8001c4c:	20000260 	.word	0x20000260
 8001c50:	200005c8 	.word	0x200005c8
 8001c54:	58020400 	.word	0x58020400
 8001c58:	58021000 	.word	0x58021000
 8001c5c:	200008cc 	.word	0x200008cc
 8001c60:	200005c0 	.word	0x200005c0
 8001c64:	2000044c 	.word	0x2000044c
 8001c68:	20000378 	.word	0x20000378
 8001c6c:	200005b0 	.word	0x200005b0
 8001c70:	20000848 	.word	0x20000848
 8001c74:	200005c9 	.word	0x200005c9
 8001c78:	200005ca 	.word	0x200005ca
 8001c7c:	20000030 	.word	0x20000030
 8001c80:	200008c8 	.word	0x200008c8
 8001c84:	20000374 	.word	0x20000374
 8001c88:	20000844 	.word	0x20000844

08001c8c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	80fb      	strh	r3, [r7, #6]


}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  /* Timer12 Interrupt */
  if (htim == &htim12)
  {

  }
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cce:	b672      	cpsid	i
}
 8001cd0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <Error_Handler+0x8>

08001cd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_MspInit+0x30>)
 8001cdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ce0:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <HAL_MspInit+0x30>)
 8001ce2:	f043 0302 	orr.w	r3, r3, #2
 8001ce6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_MspInit+0x30>)
 8001cec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	58024400 	.word	0x58024400

08001d08 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <HAL_CRC_MspInit+0x3c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d10e      	bne.n	8001d38 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001d1a:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_CRC_MspInit+0x40>)
 8001d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d20:	4a09      	ldr	r2, [pc, #36]	; (8001d48 <HAL_CRC_MspInit+0x40>)
 8001d22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <HAL_CRC_MspInit+0x40>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	58024c00 	.word	0x58024c00
 8001d48:	58024400 	.word	0x58024400

08001d4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b0b8      	sub	sp, #224	; 0xe0
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	22bc      	movs	r2, #188	; 0xbc
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f009 fa97 	bl	800b2a0 <memset>
  if(hspi->Instance==SPI3)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a25      	ldr	r2, [pc, #148]	; (8001e0c <HAL_SPI_MspInit+0xc0>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d142      	bne.n	8001e02 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d80:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f004 fb5a 	bl	8006444 <HAL_RCCEx_PeriphCLKConfig>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001d96:	f7ff ff98 	bl	8001cca <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_SPI_MspInit+0xc4>)
 8001d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001da0:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <HAL_SPI_MspInit+0xc4>)
 8001da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_SPI_MspInit+0xc4>)
 8001dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_SPI_MspInit+0xc4>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dbe:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <HAL_SPI_MspInit+0xc4>)
 8001dc0:	f043 0304 	orr.w	r3, r3, #4
 8001dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_SPI_MspInit+0xc4>)
 8001dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001dd6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001dda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001df0:	2306      	movs	r3, #6
 8001df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	; (8001e14 <HAL_SPI_MspInit+0xc8>)
 8001dfe:	f003 f967 	bl	80050d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e02:	bf00      	nop
 8001e04:	37e0      	adds	r7, #224	; 0xe0
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40003c00 	.word	0x40003c00
 8001e10:	58024400 	.word	0x58024400
 8001e14:	58020800 	.word	0x58020800

08001e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	; 0x28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a55      	ldr	r2, [pc, #340]	; (8001f7c <HAL_TIM_Base_MspInit+0x164>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d10f      	bne.n	8001e4a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e2a:	4b55      	ldr	r3, [pc, #340]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e30:	4a53      	ldr	r2, [pc, #332]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e3a:	4b51      	ldr	r3, [pc, #324]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001e48:	e094      	b.n	8001f74 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e52:	d10f      	bne.n	8001e74 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e54:	4b4a      	ldr	r3, [pc, #296]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001e56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e5a:	4a49      	ldr	r2, [pc, #292]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e64:	4b46      	ldr	r3, [pc, #280]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001e66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	623b      	str	r3, [r7, #32]
 8001e70:	6a3b      	ldr	r3, [r7, #32]
}
 8001e72:	e07f      	b.n	8001f74 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM3)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a42      	ldr	r2, [pc, #264]	; (8001f84 <HAL_TIM_Base_MspInit+0x16c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d10f      	bne.n	8001e9e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e7e:	4b40      	ldr	r3, [pc, #256]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e84:	4a3e      	ldr	r2, [pc, #248]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001e86:	f043 0302 	orr.w	r3, r3, #2
 8001e8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e8e:	4b3c      	ldr	r3, [pc, #240]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	69fb      	ldr	r3, [r7, #28]
}
 8001e9c:	e06a      	b.n	8001f74 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM4)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a39      	ldr	r2, [pc, #228]	; (8001f88 <HAL_TIM_Base_MspInit+0x170>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d10f      	bne.n	8001ec8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ea8:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001eaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eae:	4a34      	ldr	r2, [pc, #208]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001eb8:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001eba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	61bb      	str	r3, [r7, #24]
 8001ec4:	69bb      	ldr	r3, [r7, #24]
}
 8001ec6:	e055      	b.n	8001f74 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM5)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a2f      	ldr	r2, [pc, #188]	; (8001f8c <HAL_TIM_Base_MspInit+0x174>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d117      	bne.n	8001f02 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ed2:	4b2b      	ldr	r3, [pc, #172]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001ed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ed8:	4a29      	ldr	r2, [pc, #164]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001eda:	f043 0308 	orr.w	r3, r3, #8
 8001ede:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ee2:	4b27      	ldr	r3, [pc, #156]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	2032      	movs	r0, #50	; 0x32
 8001ef6:	f000 fda8 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001efa:	2032      	movs	r0, #50	; 0x32
 8001efc:	f000 fdbf 	bl	8002a7e <HAL_NVIC_EnableIRQ>
}
 8001f00:	e038      	b.n	8001f74 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM12)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a22      	ldr	r2, [pc, #136]	; (8001f90 <HAL_TIM_Base_MspInit+0x178>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d117      	bne.n	8001f3c <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001f0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f12:	4a1b      	ldr	r2, [pc, #108]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f1c:	4b18      	ldr	r3, [pc, #96]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001f1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	202b      	movs	r0, #43	; 0x2b
 8001f30:	f000 fd8b 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001f34:	202b      	movs	r0, #43	; 0x2b
 8001f36:	f000 fda2 	bl	8002a7e <HAL_NVIC_EnableIRQ>
}
 8001f3a:	e01b      	b.n	8001f74 <HAL_TIM_Base_MspInit+0x15c>
  else if(htim_base->Instance==TIM15)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <HAL_TIM_Base_MspInit+0x17c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d116      	bne.n	8001f74 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f4c:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f56:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <HAL_TIM_Base_MspInit+0x168>)
 8001f58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	2100      	movs	r1, #0
 8001f68:	2074      	movs	r0, #116	; 0x74
 8001f6a:	f000 fd6e 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8001f6e:	2074      	movs	r0, #116	; 0x74
 8001f70:	f000 fd85 	bl	8002a7e <HAL_NVIC_EnableIRQ>
}
 8001f74:	bf00      	nop
 8001f76:	3728      	adds	r7, #40	; 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	58024400 	.word	0x58024400
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40000800 	.word	0x40000800
 8001f8c:	40000c00 	.word	0x40000c00
 8001f90:	40001800 	.word	0x40001800
 8001f94:	40014000 	.word	0x40014000

08001f98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	; 0x30
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 031c 	add.w	r3, r7, #28
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a5e      	ldr	r2, [pc, #376]	; (8002130 <HAL_TIM_MspPostInit+0x198>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d120      	bne.n	8001ffc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fba:	4b5e      	ldr	r3, [pc, #376]	; (8002134 <HAL_TIM_MspPostInit+0x19c>)
 8001fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc0:	4a5c      	ldr	r2, [pc, #368]	; (8002134 <HAL_TIM_MspPostInit+0x19c>)
 8001fc2:	f043 0310 	orr.w	r3, r3, #16
 8001fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fca:	4b5a      	ldr	r3, [pc, #360]	; (8002134 <HAL_TIM_MspPostInit+0x19c>)
 8001fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8001fd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fea:	2301      	movs	r3, #1
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4850      	ldr	r0, [pc, #320]	; (8002138 <HAL_TIM_MspPostInit+0x1a0>)
 8001ff6:	f003 f86b 	bl	80050d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8001ffa:	e094      	b.n	8002126 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002004:	d120      	bne.n	8002048 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	4b4b      	ldr	r3, [pc, #300]	; (8002134 <HAL_TIM_MspPostInit+0x19c>)
 8002008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200c:	4a49      	ldr	r2, [pc, #292]	; (8002134 <HAL_TIM_MspPostInit+0x19c>)
 800200e:	f043 0302 	orr.w	r3, r3, #2
 8002012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_TIM_MspPostInit+0x19c>)
 8002018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8002024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002036:	2301      	movs	r3, #1
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 800203a:	f107 031c 	add.w	r3, r7, #28
 800203e:	4619      	mov	r1, r3
 8002040:	483e      	ldr	r0, [pc, #248]	; (800213c <HAL_TIM_MspPostInit+0x1a4>)
 8002042:	f003 f845 	bl	80050d0 <HAL_GPIO_Init>
}
 8002046:	e06e      	b.n	8002126 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a3c      	ldr	r2, [pc, #240]	; (8002140 <HAL_TIM_MspPostInit+0x1a8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d11f      	bne.n	8002092 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	4b38      	ldr	r3, [pc, #224]	; (8002134 <HAL_TIM_MspPostInit+0x19c>)
 8002054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002058:	4a36      	ldr	r2, [pc, #216]	; (8002134 <HAL_TIM_MspPostInit+0x19c>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002062:	4b34      	ldr	r3, [pc, #208]	; (8002134 <HAL_TIM_MspPostInit+0x19c>)
 8002064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8002070:	2340      	movs	r3, #64	; 0x40
 8002072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002080:	2302      	movs	r3, #2
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	4619      	mov	r1, r3
 800208a:	482e      	ldr	r0, [pc, #184]	; (8002144 <HAL_TIM_MspPostInit+0x1ac>)
 800208c:	f003 f820 	bl	80050d0 <HAL_GPIO_Init>
}
 8002090:	e049      	b.n	8002126 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a2c      	ldr	r2, [pc, #176]	; (8002148 <HAL_TIM_MspPostInit+0x1b0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d120      	bne.n	80020de <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209c:	4b25      	ldr	r3, [pc, #148]	; (8002134 <HAL_TIM_MspPostInit+0x19c>)
 800209e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a2:	4a24      	ldr	r2, [pc, #144]	; (8002134 <HAL_TIM_MspPostInit+0x19c>)
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_TIM_MspPostInit+0x19c>)
 80020ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 80020ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020cc:	2302      	movs	r3, #2
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	4619      	mov	r1, r3
 80020d6:	4819      	ldr	r0, [pc, #100]	; (800213c <HAL_TIM_MspPostInit+0x1a4>)
 80020d8:	f002 fffa 	bl	80050d0 <HAL_GPIO_Init>
}
 80020dc:	e023      	b.n	8002126 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a1a      	ldr	r2, [pc, #104]	; (800214c <HAL_TIM_MspPostInit+0x1b4>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d11e      	bne.n	8002126 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_TIM_MspPostInit+0x19c>)
 80020ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ee:	4a11      	ldr	r2, [pc, #68]	; (8002134 <HAL_TIM_MspPostInit+0x19c>)
 80020f0:	f043 0310 	orr.w	r3, r3, #16
 80020f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020f8:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_TIM_MspPostInit+0x19c>)
 80020fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8002106:	2340      	movs	r3, #64	; 0x40
 8002108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210a:	2302      	movs	r3, #2
 800210c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002112:	2300      	movs	r3, #0
 8002114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002116:	2304      	movs	r3, #4
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	4619      	mov	r1, r3
 8002120:	4805      	ldr	r0, [pc, #20]	; (8002138 <HAL_TIM_MspPostInit+0x1a0>)
 8002122:	f002 ffd5 	bl	80050d0 <HAL_GPIO_Init>
}
 8002126:	bf00      	nop
 8002128:	3730      	adds	r7, #48	; 0x30
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40010000 	.word	0x40010000
 8002134:	58024400 	.word	0x58024400
 8002138:	58021000 	.word	0x58021000
 800213c:	58020400 	.word	0x58020400
 8002140:	40000400 	.word	0x40000400
 8002144:	58020000 	.word	0x58020000
 8002148:	40000800 	.word	0x40000800
 800214c:	40014000 	.word	0x40014000

08002150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b0ba      	sub	sp, #232	; 0xe8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002168:	f107 0318 	add.w	r3, r7, #24
 800216c:	22bc      	movs	r2, #188	; 0xbc
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f009 f895 	bl	800b2a0 <memset>
  if(huart->Instance==UART4)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4aad      	ldr	r2, [pc, #692]	; (8002430 <HAL_UART_MspInit+0x2e0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	f040 80a5 	bne.w	80022cc <HAL_UART_MspInit+0x17c>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002182:	2302      	movs	r3, #2
 8002184:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800218c:	f107 0318 	add.w	r3, r7, #24
 8002190:	4618      	mov	r0, r3
 8002192:	f004 f957 	bl	8006444 <HAL_RCCEx_PeriphCLKConfig>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800219c:	f7ff fd95 	bl	8001cca <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80021a0:	4ba4      	ldr	r3, [pc, #656]	; (8002434 <HAL_UART_MspInit+0x2e4>)
 80021a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021a6:	4aa3      	ldr	r2, [pc, #652]	; (8002434 <HAL_UART_MspInit+0x2e4>)
 80021a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80021ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021b0:	4ba0      	ldr	r3, [pc, #640]	; (8002434 <HAL_UART_MspInit+0x2e4>)
 80021b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021be:	4b9d      	ldr	r3, [pc, #628]	; (8002434 <HAL_UART_MspInit+0x2e4>)
 80021c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c4:	4a9b      	ldr	r2, [pc, #620]	; (8002434 <HAL_UART_MspInit+0x2e4>)
 80021c6:	f043 0308 	orr.w	r3, r3, #8
 80021ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ce:	4b99      	ldr	r3, [pc, #612]	; (8002434 <HAL_UART_MspInit+0x2e4>)
 80021d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021dc:	2303      	movs	r3, #3
 80021de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80021f4:	2308      	movs	r3, #8
 80021f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021fe:	4619      	mov	r1, r3
 8002200:	488d      	ldr	r0, [pc, #564]	; (8002438 <HAL_UART_MspInit+0x2e8>)
 8002202:	f002 ff65 	bl	80050d0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Stream0;
 8002206:	4b8d      	ldr	r3, [pc, #564]	; (800243c <HAL_UART_MspInit+0x2ec>)
 8002208:	4a8d      	ldr	r2, [pc, #564]	; (8002440 <HAL_UART_MspInit+0x2f0>)
 800220a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 800220c:	4b8b      	ldr	r3, [pc, #556]	; (800243c <HAL_UART_MspInit+0x2ec>)
 800220e:	223f      	movs	r2, #63	; 0x3f
 8002210:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002212:	4b8a      	ldr	r3, [pc, #552]	; (800243c <HAL_UART_MspInit+0x2ec>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002218:	4b88      	ldr	r3, [pc, #544]	; (800243c <HAL_UART_MspInit+0x2ec>)
 800221a:	2200      	movs	r2, #0
 800221c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800221e:	4b87      	ldr	r3, [pc, #540]	; (800243c <HAL_UART_MspInit+0x2ec>)
 8002220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002224:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002226:	4b85      	ldr	r3, [pc, #532]	; (800243c <HAL_UART_MspInit+0x2ec>)
 8002228:	2200      	movs	r2, #0
 800222a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800222c:	4b83      	ldr	r3, [pc, #524]	; (800243c <HAL_UART_MspInit+0x2ec>)
 800222e:	2200      	movs	r2, #0
 8002230:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002232:	4b82      	ldr	r3, [pc, #520]	; (800243c <HAL_UART_MspInit+0x2ec>)
 8002234:	2200      	movs	r2, #0
 8002236:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002238:	4b80      	ldr	r3, [pc, #512]	; (800243c <HAL_UART_MspInit+0x2ec>)
 800223a:	2200      	movs	r2, #0
 800223c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800223e:	4b7f      	ldr	r3, [pc, #508]	; (800243c <HAL_UART_MspInit+0x2ec>)
 8002240:	2200      	movs	r2, #0
 8002242:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002244:	487d      	ldr	r0, [pc, #500]	; (800243c <HAL_UART_MspInit+0x2ec>)
 8002246:	f000 fd1f 	bl	8002c88 <HAL_DMA_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8002250:	f7ff fd3b 	bl	8001cca <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a79      	ldr	r2, [pc, #484]	; (800243c <HAL_UART_MspInit+0x2ec>)
 8002258:	67da      	str	r2, [r3, #124]	; 0x7c
 800225a:	4a78      	ldr	r2, [pc, #480]	; (800243c <HAL_UART_MspInit+0x2ec>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Stream1;
 8002260:	4b78      	ldr	r3, [pc, #480]	; (8002444 <HAL_UART_MspInit+0x2f4>)
 8002262:	4a79      	ldr	r2, [pc, #484]	; (8002448 <HAL_UART_MspInit+0x2f8>)
 8002264:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002266:	4b77      	ldr	r3, [pc, #476]	; (8002444 <HAL_UART_MspInit+0x2f4>)
 8002268:	2240      	movs	r2, #64	; 0x40
 800226a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800226c:	4b75      	ldr	r3, [pc, #468]	; (8002444 <HAL_UART_MspInit+0x2f4>)
 800226e:	2240      	movs	r2, #64	; 0x40
 8002270:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002272:	4b74      	ldr	r3, [pc, #464]	; (8002444 <HAL_UART_MspInit+0x2f4>)
 8002274:	2200      	movs	r2, #0
 8002276:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002278:	4b72      	ldr	r3, [pc, #456]	; (8002444 <HAL_UART_MspInit+0x2f4>)
 800227a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800227e:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002280:	4b70      	ldr	r3, [pc, #448]	; (8002444 <HAL_UART_MspInit+0x2f4>)
 8002282:	2200      	movs	r2, #0
 8002284:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002286:	4b6f      	ldr	r3, [pc, #444]	; (8002444 <HAL_UART_MspInit+0x2f4>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800228c:	4b6d      	ldr	r3, [pc, #436]	; (8002444 <HAL_UART_MspInit+0x2f4>)
 800228e:	2200      	movs	r2, #0
 8002290:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002292:	4b6c      	ldr	r3, [pc, #432]	; (8002444 <HAL_UART_MspInit+0x2f4>)
 8002294:	2200      	movs	r2, #0
 8002296:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002298:	4b6a      	ldr	r3, [pc, #424]	; (8002444 <HAL_UART_MspInit+0x2f4>)
 800229a:	2200      	movs	r2, #0
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800229e:	4869      	ldr	r0, [pc, #420]	; (8002444 <HAL_UART_MspInit+0x2f4>)
 80022a0:	f000 fcf2 	bl	8002c88 <HAL_DMA_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 80022aa:	f7ff fd0e 	bl	8001cca <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a64      	ldr	r2, [pc, #400]	; (8002444 <HAL_UART_MspInit+0x2f4>)
 80022b2:	679a      	str	r2, [r3, #120]	; 0x78
 80022b4:	4a63      	ldr	r2, [pc, #396]	; (8002444 <HAL_UART_MspInit+0x2f4>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2034      	movs	r0, #52	; 0x34
 80022c0:	f000 fbc3 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80022c4:	2034      	movs	r0, #52	; 0x34
 80022c6:	f000 fbda 	bl	8002a7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022ca:	e0ac      	b.n	8002426 <HAL_UART_MspInit+0x2d6>
  else if(huart->Instance==USART3)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a5e      	ldr	r2, [pc, #376]	; (800244c <HAL_UART_MspInit+0x2fc>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	f040 80a7 	bne.w	8002426 <HAL_UART_MspInit+0x2d6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022d8:	2302      	movs	r3, #2
 80022da:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022e2:	f107 0318 	add.w	r3, r7, #24
 80022e6:	4618      	mov	r0, r3
 80022e8:	f004 f8ac 	bl	8006444 <HAL_RCCEx_PeriphCLKConfig>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 80022f2:	f7ff fcea 	bl	8001cca <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022f6:	4b4f      	ldr	r3, [pc, #316]	; (8002434 <HAL_UART_MspInit+0x2e4>)
 80022f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022fc:	4a4d      	ldr	r2, [pc, #308]	; (8002434 <HAL_UART_MspInit+0x2e4>)
 80022fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002302:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002306:	4b4b      	ldr	r3, [pc, #300]	; (8002434 <HAL_UART_MspInit+0x2e4>)
 8002308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800230c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002314:	4b47      	ldr	r3, [pc, #284]	; (8002434 <HAL_UART_MspInit+0x2e4>)
 8002316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800231a:	4a46      	ldr	r2, [pc, #280]	; (8002434 <HAL_UART_MspInit+0x2e4>)
 800231c:	f043 0308 	orr.w	r3, r3, #8
 8002320:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002324:	4b43      	ldr	r3, [pc, #268]	; (8002434 <HAL_UART_MspInit+0x2e4>)
 8002326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002332:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002336:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	2300      	movs	r3, #0
 8002348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800234c:	2307      	movs	r3, #7
 800234e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002352:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002356:	4619      	mov	r1, r3
 8002358:	4837      	ldr	r0, [pc, #220]	; (8002438 <HAL_UART_MspInit+0x2e8>)
 800235a:	f002 feb9 	bl	80050d0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800235e:	4b3c      	ldr	r3, [pc, #240]	; (8002450 <HAL_UART_MspInit+0x300>)
 8002360:	4a3c      	ldr	r2, [pc, #240]	; (8002454 <HAL_UART_MspInit+0x304>)
 8002362:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002364:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <HAL_UART_MspInit+0x300>)
 8002366:	222d      	movs	r2, #45	; 0x2d
 8002368:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800236a:	4b39      	ldr	r3, [pc, #228]	; (8002450 <HAL_UART_MspInit+0x300>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002370:	4b37      	ldr	r3, [pc, #220]	; (8002450 <HAL_UART_MspInit+0x300>)
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002376:	4b36      	ldr	r3, [pc, #216]	; (8002450 <HAL_UART_MspInit+0x300>)
 8002378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800237c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800237e:	4b34      	ldr	r3, [pc, #208]	; (8002450 <HAL_UART_MspInit+0x300>)
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002384:	4b32      	ldr	r3, [pc, #200]	; (8002450 <HAL_UART_MspInit+0x300>)
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800238a:	4b31      	ldr	r3, [pc, #196]	; (8002450 <HAL_UART_MspInit+0x300>)
 800238c:	2200      	movs	r2, #0
 800238e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002390:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <HAL_UART_MspInit+0x300>)
 8002392:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002396:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002398:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <HAL_UART_MspInit+0x300>)
 800239a:	2200      	movs	r2, #0
 800239c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800239e:	482c      	ldr	r0, [pc, #176]	; (8002450 <HAL_UART_MspInit+0x300>)
 80023a0:	f000 fc72 	bl	8002c88 <HAL_DMA_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_UART_MspInit+0x25e>
      Error_Handler();
 80023aa:	f7ff fc8e 	bl	8001cca <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a27      	ldr	r2, [pc, #156]	; (8002450 <HAL_UART_MspInit+0x300>)
 80023b2:	67da      	str	r2, [r3, #124]	; 0x7c
 80023b4:	4a26      	ldr	r2, [pc, #152]	; (8002450 <HAL_UART_MspInit+0x300>)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80023ba:	4b27      	ldr	r3, [pc, #156]	; (8002458 <HAL_UART_MspInit+0x308>)
 80023bc:	4a27      	ldr	r2, [pc, #156]	; (800245c <HAL_UART_MspInit+0x30c>)
 80023be:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <HAL_UART_MspInit+0x308>)
 80023c2:	222e      	movs	r2, #46	; 0x2e
 80023c4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023c6:	4b24      	ldr	r3, [pc, #144]	; (8002458 <HAL_UART_MspInit+0x308>)
 80023c8:	2240      	movs	r2, #64	; 0x40
 80023ca:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023cc:	4b22      	ldr	r3, [pc, #136]	; (8002458 <HAL_UART_MspInit+0x308>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023d2:	4b21      	ldr	r3, [pc, #132]	; (8002458 <HAL_UART_MspInit+0x308>)
 80023d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023da:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <HAL_UART_MspInit+0x308>)
 80023dc:	2200      	movs	r2, #0
 80023de:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_UART_MspInit+0x308>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <HAL_UART_MspInit+0x308>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80023ec:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <HAL_UART_MspInit+0x308>)
 80023ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023f2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023f4:	4b18      	ldr	r3, [pc, #96]	; (8002458 <HAL_UART_MspInit+0x308>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80023fa:	4817      	ldr	r0, [pc, #92]	; (8002458 <HAL_UART_MspInit+0x308>)
 80023fc:	f000 fc44 	bl	8002c88 <HAL_DMA_Init>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 8002406:	f7ff fc60 	bl	8001cca <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a12      	ldr	r2, [pc, #72]	; (8002458 <HAL_UART_MspInit+0x308>)
 800240e:	679a      	str	r2, [r3, #120]	; 0x78
 8002410:	4a11      	ldr	r2, [pc, #68]	; (8002458 <HAL_UART_MspInit+0x308>)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	2027      	movs	r0, #39	; 0x27
 800241c:	f000 fb15 	bl	8002a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002420:	2027      	movs	r0, #39	; 0x27
 8002422:	f000 fb2c 	bl	8002a7e <HAL_NVIC_EnableIRQ>
}
 8002426:	bf00      	nop
 8002428:	37e8      	adds	r7, #232	; 0xe8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40004c00 	.word	0x40004c00
 8002434:	58024400 	.word	0x58024400
 8002438:	58020c00 	.word	0x58020c00
 800243c:	20000124 	.word	0x20000124
 8002440:	40020410 	.word	0x40020410
 8002444:	20000850 	.word	0x20000850
 8002448:	40020428 	.word	0x40020428
 800244c:	40004800 	.word	0x40004800
 8002450:	200001e8 	.word	0x200001e8
 8002454:	40020028 	.word	0x40020028
 8002458:	20000388 	.word	0x20000388
 800245c:	40020040 	.word	0x40020040

08002460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002464:	e7fe      	b.n	8002464 <NMI_Handler+0x4>

08002466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002466:	b480      	push	{r7}
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800246a:	e7fe      	b.n	800246a <HardFault_Handler+0x4>

0800246c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002470:	e7fe      	b.n	8002470 <MemManage_Handler+0x4>

08002472 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002476:	e7fe      	b.n	8002476 <BusFault_Handler+0x4>

08002478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800247c:	e7fe      	b.n	800247c <UsageFault_Handler+0x4>

0800247e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002490:	bf00      	nop
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ac:	f000 f9a2 	bl	80027f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <DMA1_Stream1_IRQHandler+0x10>)
 80024ba:	f001 fca3 	bl	8003e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200001e8 	.word	0x200001e8

080024c8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <DMA1_Stream2_IRQHandler+0x10>)
 80024ce:	f001 fc99 	bl	8003e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	20000388 	.word	0x20000388

080024dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80024e0:	2040      	movs	r0, #64	; 0x40
 80024e2:	f002 ffbe 	bl	8005462 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80024e6:	2080      	movs	r0, #128	; 0x80
 80024e8:	f002 ffbb 	bl	8005462 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <USART3_IRQHandler+0x10>)
 80024f6:	f006 ffad 	bl	8009454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000260 	.word	0x20000260

08002504 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002508:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800250c:	f002 ffa9 	bl	8005462 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002510:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002514:	f002 ffa5 	bl	8005462 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002518:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800251c:	f002 ffa1 	bl	8005462 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002520:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002524:	f002 ff9d 	bl	8005462 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}

0800252c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002530:	4802      	ldr	r0, [pc, #8]	; (800253c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002532:	f005 fdc7 	bl	80080c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	200007f8 	.word	0x200007f8

08002540 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002544:	4802      	ldr	r0, [pc, #8]	; (8002550 <TIM5_IRQHandler+0x10>)
 8002546:	f005 fdbd 	bl	80080c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20000400 	.word	0x20000400

08002554 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002558:	4802      	ldr	r0, [pc, #8]	; (8002564 <UART4_IRQHandler+0x10>)
 800255a:	f006 ff7b 	bl	8009454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000690 	.word	0x20000690

08002568 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <DMA2_Stream0_IRQHandler+0x10>)
 800256e:	f001 fc49 	bl	8003e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000124 	.word	0x20000124

0800257c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002580:	4802      	ldr	r0, [pc, #8]	; (800258c <DMA2_Stream1_IRQHandler+0x10>)
 8002582:	f001 fc3f 	bl	8003e04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000850 	.word	0x20000850

08002590 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002594:	4802      	ldr	r0, [pc, #8]	; (80025a0 <TIM15_IRQHandler+0x10>)
 8002596:	f005 fd95 	bl	80080c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	200002f8 	.word	0x200002f8

080025a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025a8:	4b39      	ldr	r3, [pc, #228]	; (8002690 <SystemInit+0xec>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ae:	4a38      	ldr	r2, [pc, #224]	; (8002690 <SystemInit+0xec>)
 80025b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025b8:	4b36      	ldr	r3, [pc, #216]	; (8002694 <SystemInit+0xf0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	2b06      	cmp	r3, #6
 80025c2:	d807      	bhi.n	80025d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025c4:	4b33      	ldr	r3, [pc, #204]	; (8002694 <SystemInit+0xf0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f023 030f 	bic.w	r3, r3, #15
 80025cc:	4a31      	ldr	r2, [pc, #196]	; (8002694 <SystemInit+0xf0>)
 80025ce:	f043 0307 	orr.w	r3, r3, #7
 80025d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80025d4:	4b30      	ldr	r3, [pc, #192]	; (8002698 <SystemInit+0xf4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a2f      	ldr	r2, [pc, #188]	; (8002698 <SystemInit+0xf4>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025e0:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <SystemInit+0xf4>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80025e6:	4b2c      	ldr	r3, [pc, #176]	; (8002698 <SystemInit+0xf4>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	492b      	ldr	r1, [pc, #172]	; (8002698 <SystemInit+0xf4>)
 80025ec:	4b2b      	ldr	r3, [pc, #172]	; (800269c <SystemInit+0xf8>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025f2:	4b28      	ldr	r3, [pc, #160]	; (8002694 <SystemInit+0xf0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025fe:	4b25      	ldr	r3, [pc, #148]	; (8002694 <SystemInit+0xf0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 030f 	bic.w	r3, r3, #15
 8002606:	4a23      	ldr	r2, [pc, #140]	; (8002694 <SystemInit+0xf0>)
 8002608:	f043 0307 	orr.w	r3, r3, #7
 800260c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800260e:	4b22      	ldr	r3, [pc, #136]	; (8002698 <SystemInit+0xf4>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002614:	4b20      	ldr	r3, [pc, #128]	; (8002698 <SystemInit+0xf4>)
 8002616:	2200      	movs	r2, #0
 8002618:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800261a:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <SystemInit+0xf4>)
 800261c:	2200      	movs	r2, #0
 800261e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002620:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <SystemInit+0xf4>)
 8002622:	4a1f      	ldr	r2, [pc, #124]	; (80026a0 <SystemInit+0xfc>)
 8002624:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002626:	4b1c      	ldr	r3, [pc, #112]	; (8002698 <SystemInit+0xf4>)
 8002628:	4a1e      	ldr	r2, [pc, #120]	; (80026a4 <SystemInit+0x100>)
 800262a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800262c:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <SystemInit+0xf4>)
 800262e:	4a1e      	ldr	r2, [pc, #120]	; (80026a8 <SystemInit+0x104>)
 8002630:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002632:	4b19      	ldr	r3, [pc, #100]	; (8002698 <SystemInit+0xf4>)
 8002634:	2200      	movs	r2, #0
 8002636:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002638:	4b17      	ldr	r3, [pc, #92]	; (8002698 <SystemInit+0xf4>)
 800263a:	4a1b      	ldr	r2, [pc, #108]	; (80026a8 <SystemInit+0x104>)
 800263c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800263e:	4b16      	ldr	r3, [pc, #88]	; (8002698 <SystemInit+0xf4>)
 8002640:	2200      	movs	r2, #0
 8002642:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002644:	4b14      	ldr	r3, [pc, #80]	; (8002698 <SystemInit+0xf4>)
 8002646:	4a18      	ldr	r2, [pc, #96]	; (80026a8 <SystemInit+0x104>)
 8002648:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <SystemInit+0xf4>)
 800264c:	2200      	movs	r2, #0
 800264e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <SystemInit+0xf4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a10      	ldr	r2, [pc, #64]	; (8002698 <SystemInit+0xf4>)
 8002656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800265a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <SystemInit+0xf4>)
 800265e:	2200      	movs	r2, #0
 8002660:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <SystemInit+0x108>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <SystemInit+0x10c>)
 8002668:	4013      	ands	r3, r2
 800266a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800266e:	d202      	bcs.n	8002676 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002670:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <SystemInit+0x110>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <SystemInit+0x114>)
 8002678:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800267c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800267e:	4b04      	ldr	r3, [pc, #16]	; (8002690 <SystemInit+0xec>)
 8002680:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002684:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002686:	bf00      	nop
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00
 8002694:	52002000 	.word	0x52002000
 8002698:	58024400 	.word	0x58024400
 800269c:	eaf6ed7f 	.word	0xeaf6ed7f
 80026a0:	02020200 	.word	0x02020200
 80026a4:	01ff0000 	.word	0x01ff0000
 80026a8:	01010280 	.word	0x01010280
 80026ac:	5c001000 	.word	0x5c001000
 80026b0:	ffff0000 	.word	0xffff0000
 80026b4:	51008108 	.word	0x51008108
 80026b8:	52004000 	.word	0x52004000

080026bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80026bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026c0:	f7ff ff70 	bl	80025a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c4:	480c      	ldr	r0, [pc, #48]	; (80026f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026c6:	490d      	ldr	r1, [pc, #52]	; (80026fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026c8:	4a0d      	ldr	r2, [pc, #52]	; (8002700 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026cc:	e002      	b.n	80026d4 <LoopCopyDataInit>

080026ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d2:	3304      	adds	r3, #4

080026d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d8:	d3f9      	bcc.n	80026ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026dc:	4c0a      	ldr	r4, [pc, #40]	; (8002708 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e0:	e001      	b.n	80026e6 <LoopFillZerobss>

080026e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e4:	3204      	adds	r2, #4

080026e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e8:	d3fb      	bcc.n	80026e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ea:	f008 fdb5 	bl	800b258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ee:	f7fe f963 	bl	80009b8 <main>
  bx  lr
 80026f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026fc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002700:	0800b318 	.word	0x0800b318
  ldr r2, =_sbss
 8002704:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002708:	200008d4 	.word	0x200008d4

0800270c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800270c:	e7fe      	b.n	800270c <ADC3_IRQHandler>
	...

08002710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002716:	2003      	movs	r0, #3
 8002718:	f000 f98c 	bl	8002a34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800271c:	f003 fcbc 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <HAL_Init+0x68>)
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	f003 030f 	and.w	r3, r3, #15
 800272c:	4913      	ldr	r1, [pc, #76]	; (800277c <HAL_Init+0x6c>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
 8002738:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <HAL_Init+0x68>)
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	4a0e      	ldr	r2, [pc, #56]	; (800277c <HAL_Init+0x6c>)
 8002744:	5cd3      	ldrb	r3, [r2, r3]
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
 8002750:	4a0b      	ldr	r2, [pc, #44]	; (8002780 <HAL_Init+0x70>)
 8002752:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002754:	4a0b      	ldr	r2, [pc, #44]	; (8002784 <HAL_Init+0x74>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800275a:	2000      	movs	r0, #0
 800275c:	f000 f814 	bl	8002788 <HAL_InitTick>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e002      	b.n	8002770 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800276a:	f7ff fab3 	bl	8001cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	58024400 	.word	0x58024400
 800277c:	0800b2c8 	.word	0x0800b2c8
 8002780:	20000004 	.word	0x20000004
 8002784:	20000000 	.word	0x20000000

08002788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_InitTick+0x60>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e021      	b.n	80027e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <HAL_InitTick+0x64>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_InitTick+0x60>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	4619      	mov	r1, r3
 80027a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f971 	bl	8002a9a <HAL_SYSTICK_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e00e      	b.n	80027e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b0f      	cmp	r3, #15
 80027c6:	d80a      	bhi.n	80027de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c8:	2200      	movs	r2, #0
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295
 80027d0:	f000 f93b 	bl	8002a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027d4:	4a06      	ldr	r2, [pc, #24]	; (80027f0 <HAL_InitTick+0x68>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	2000000c 	.word	0x2000000c
 80027ec:	20000000 	.word	0x20000000
 80027f0:	20000008 	.word	0x20000008

080027f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_IncTick+0x20>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_IncTick+0x24>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4413      	add	r3, r2
 8002804:	4a04      	ldr	r2, [pc, #16]	; (8002818 <HAL_IncTick+0x24>)
 8002806:	6013      	str	r3, [r2, #0]
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	2000000c 	.word	0x2000000c
 8002818:	200008d0 	.word	0x200008d0

0800281c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return uwTick;
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <HAL_GetTick+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	200008d0 	.word	0x200008d0

08002834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800283c:	f7ff ffee 	bl	800281c <HAL_GetTick>
 8002840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284c:	d005      	beq.n	800285a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_Delay+0x44>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4413      	add	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800285a:	bf00      	nop
 800285c:	f7ff ffde 	bl	800281c <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	429a      	cmp	r2, r3
 800286a:	d8f7      	bhi.n	800285c <HAL_Delay+0x28>
  {
  }
}
 800286c:	bf00      	nop
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	2000000c 	.word	0x2000000c

0800287c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002880:	4b03      	ldr	r3, [pc, #12]	; (8002890 <HAL_GetREVID+0x14>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	0c1b      	lsrs	r3, r3, #16
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	5c001000 	.word	0x5c001000

08002894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <__NVIC_SetPriorityGrouping+0x40>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b0:	4013      	ands	r3, r2
 80028b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <__NVIC_SetPriorityGrouping+0x44>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028c2:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <__NVIC_SetPriorityGrouping+0x40>)
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	60d3      	str	r3, [r2, #12]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000ed00 	.word	0xe000ed00
 80028d8:	05fa0000 	.word	0x05fa0000

080028dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <__NVIC_GetPriorityGrouping+0x18>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	0a1b      	lsrs	r3, r3, #8
 80028e6:	f003 0307 	and.w	r3, r3, #7
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002906:	2b00      	cmp	r3, #0
 8002908:	db0b      	blt.n	8002922 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	f003 021f 	and.w	r2, r3, #31
 8002910:	4907      	ldr	r1, [pc, #28]	; (8002930 <__NVIC_EnableIRQ+0x38>)
 8002912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	2001      	movs	r0, #1
 800291a:	fa00 f202 	lsl.w	r2, r0, r2
 800291e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000e100 	.word	0xe000e100

08002934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002940:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002944:	2b00      	cmp	r3, #0
 8002946:	db0a      	blt.n	800295e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	b2da      	uxtb	r2, r3
 800294c:	490c      	ldr	r1, [pc, #48]	; (8002980 <__NVIC_SetPriority+0x4c>)
 800294e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002952:	0112      	lsls	r2, r2, #4
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	440b      	add	r3, r1
 8002958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800295c:	e00a      	b.n	8002974 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	b2da      	uxtb	r2, r3
 8002962:	4908      	ldr	r1, [pc, #32]	; (8002984 <__NVIC_SetPriority+0x50>)
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	3b04      	subs	r3, #4
 800296c:	0112      	lsls	r2, r2, #4
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	440b      	add	r3, r1
 8002972:	761a      	strb	r2, [r3, #24]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	e000e100 	.word	0xe000e100
 8002984:	e000ed00 	.word	0xe000ed00

08002988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002988:	b480      	push	{r7}
 800298a:	b089      	sub	sp, #36	; 0x24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	f1c3 0307 	rsb	r3, r3, #7
 80029a2:	2b04      	cmp	r3, #4
 80029a4:	bf28      	it	cs
 80029a6:	2304      	movcs	r3, #4
 80029a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3304      	adds	r3, #4
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d902      	bls.n	80029b8 <NVIC_EncodePriority+0x30>
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3b03      	subs	r3, #3
 80029b6:	e000      	b.n	80029ba <NVIC_EncodePriority+0x32>
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029bc:	f04f 32ff 	mov.w	r2, #4294967295
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43da      	mvns	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	401a      	ands	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d0:	f04f 31ff 	mov.w	r1, #4294967295
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	43d9      	mvns	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e0:	4313      	orrs	r3, r2
         );
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3724      	adds	r7, #36	; 0x24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3b01      	subs	r3, #1
 80029fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a00:	d301      	bcc.n	8002a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a02:	2301      	movs	r3, #1
 8002a04:	e00f      	b.n	8002a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a06:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <SysTick_Config+0x40>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a0e:	210f      	movs	r1, #15
 8002a10:	f04f 30ff 	mov.w	r0, #4294967295
 8002a14:	f7ff ff8e 	bl	8002934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <SysTick_Config+0x40>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a1e:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <SysTick_Config+0x40>)
 8002a20:	2207      	movs	r2, #7
 8002a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	e000e010 	.word	0xe000e010

08002a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff ff29 	bl	8002894 <__NVIC_SetPriorityGrouping>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b086      	sub	sp, #24
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a58:	f7ff ff40 	bl	80028dc <__NVIC_GetPriorityGrouping>
 8002a5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	68b9      	ldr	r1, [r7, #8]
 8002a62:	6978      	ldr	r0, [r7, #20]
 8002a64:	f7ff ff90 	bl	8002988 <NVIC_EncodePriority>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff ff5f 	bl	8002934 <__NVIC_SetPriority>
}
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff ff33 	bl	80028f8 <__NVIC_EnableIRQ>
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff ffa4 	bl	80029f0 <SysTick_Config>
 8002aa8:	4603      	mov	r3, r0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e054      	b.n	8002b70 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	7f5b      	ldrb	r3, [r3, #29]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d105      	bne.n	8002adc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff f916 	bl	8001d08 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	791b      	ldrb	r3, [r3, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10c      	bne.n	8002b04 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a22      	ldr	r2, [pc, #136]	; (8002b78 <HAL_CRC_Init+0xc4>)
 8002af0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0218 	bic.w	r2, r2, #24
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	e00c      	b.n	8002b1e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6899      	ldr	r1, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f834 	bl	8002b7c <HAL_CRCEx_Polynomial_Set>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e028      	b.n	8002b70 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	795b      	ldrb	r3, [r3, #5]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d105      	bne.n	8002b32 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2e:	611a      	str	r2, [r3, #16]
 8002b30:	e004      	b.n	8002b3c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6912      	ldr	r2, [r2, #16]
 8002b3a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	699a      	ldr	r2, [r3, #24]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	04c11db7 	.word	0x04c11db7

08002b7c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002b8c:	231f      	movs	r3, #31
 8002b8e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002b90:	bf00      	nop
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1e5a      	subs	r2, r3, #1
 8002b96:	613a      	str	r2, [r7, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d009      	beq.n	8002bb0 <HAL_CRCEx_Polynomial_Set+0x34>
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0f0      	beq.n	8002b92 <HAL_CRCEx_Polynomial_Set+0x16>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b18      	cmp	r3, #24
 8002bb4:	d846      	bhi.n	8002c44 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002bb6:	a201      	add	r2, pc, #4	; (adr r2, 8002bbc <HAL_CRCEx_Polynomial_Set+0x40>)
 8002bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbc:	08002c4b 	.word	0x08002c4b
 8002bc0:	08002c45 	.word	0x08002c45
 8002bc4:	08002c45 	.word	0x08002c45
 8002bc8:	08002c45 	.word	0x08002c45
 8002bcc:	08002c45 	.word	0x08002c45
 8002bd0:	08002c45 	.word	0x08002c45
 8002bd4:	08002c45 	.word	0x08002c45
 8002bd8:	08002c45 	.word	0x08002c45
 8002bdc:	08002c39 	.word	0x08002c39
 8002be0:	08002c45 	.word	0x08002c45
 8002be4:	08002c45 	.word	0x08002c45
 8002be8:	08002c45 	.word	0x08002c45
 8002bec:	08002c45 	.word	0x08002c45
 8002bf0:	08002c45 	.word	0x08002c45
 8002bf4:	08002c45 	.word	0x08002c45
 8002bf8:	08002c45 	.word	0x08002c45
 8002bfc:	08002c2d 	.word	0x08002c2d
 8002c00:	08002c45 	.word	0x08002c45
 8002c04:	08002c45 	.word	0x08002c45
 8002c08:	08002c45 	.word	0x08002c45
 8002c0c:	08002c45 	.word	0x08002c45
 8002c10:	08002c45 	.word	0x08002c45
 8002c14:	08002c45 	.word	0x08002c45
 8002c18:	08002c45 	.word	0x08002c45
 8002c1c:	08002c21 	.word	0x08002c21
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	2b06      	cmp	r3, #6
 8002c24:	d913      	bls.n	8002c4e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c2a:	e010      	b.n	8002c4e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	2b07      	cmp	r3, #7
 8002c30:	d90f      	bls.n	8002c52 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c36:	e00c      	b.n	8002c52 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2b0f      	cmp	r3, #15
 8002c3c:	d90b      	bls.n	8002c56 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002c42:	e008      	b.n	8002c56 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	75fb      	strb	r3, [r7, #23]
      break;
 8002c48:	e006      	b.n	8002c58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e004      	b.n	8002c58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e002      	b.n	8002c58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c52:	bf00      	nop
 8002c54:	e000      	b.n	8002c58 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002c56:	bf00      	nop
  }
  if (status == HAL_OK)
 8002c58:	7dfb      	ldrb	r3, [r7, #23]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10d      	bne.n	8002c7a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f023 0118 	bic.w	r1, r3, #24
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002c90:	f7ff fdc4 	bl	800281c <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e316      	b.n	80032ce <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a66      	ldr	r2, [pc, #408]	; (8002e40 <HAL_DMA_Init+0x1b8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d04a      	beq.n	8002d40 <HAL_DMA_Init+0xb8>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a65      	ldr	r2, [pc, #404]	; (8002e44 <HAL_DMA_Init+0x1bc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d045      	beq.n	8002d40 <HAL_DMA_Init+0xb8>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a63      	ldr	r2, [pc, #396]	; (8002e48 <HAL_DMA_Init+0x1c0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d040      	beq.n	8002d40 <HAL_DMA_Init+0xb8>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a62      	ldr	r2, [pc, #392]	; (8002e4c <HAL_DMA_Init+0x1c4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d03b      	beq.n	8002d40 <HAL_DMA_Init+0xb8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a60      	ldr	r2, [pc, #384]	; (8002e50 <HAL_DMA_Init+0x1c8>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d036      	beq.n	8002d40 <HAL_DMA_Init+0xb8>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a5f      	ldr	r2, [pc, #380]	; (8002e54 <HAL_DMA_Init+0x1cc>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d031      	beq.n	8002d40 <HAL_DMA_Init+0xb8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a5d      	ldr	r2, [pc, #372]	; (8002e58 <HAL_DMA_Init+0x1d0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d02c      	beq.n	8002d40 <HAL_DMA_Init+0xb8>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a5c      	ldr	r2, [pc, #368]	; (8002e5c <HAL_DMA_Init+0x1d4>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d027      	beq.n	8002d40 <HAL_DMA_Init+0xb8>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a5a      	ldr	r2, [pc, #360]	; (8002e60 <HAL_DMA_Init+0x1d8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d022      	beq.n	8002d40 <HAL_DMA_Init+0xb8>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a59      	ldr	r2, [pc, #356]	; (8002e64 <HAL_DMA_Init+0x1dc>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d01d      	beq.n	8002d40 <HAL_DMA_Init+0xb8>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a57      	ldr	r2, [pc, #348]	; (8002e68 <HAL_DMA_Init+0x1e0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d018      	beq.n	8002d40 <HAL_DMA_Init+0xb8>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a56      	ldr	r2, [pc, #344]	; (8002e6c <HAL_DMA_Init+0x1e4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d013      	beq.n	8002d40 <HAL_DMA_Init+0xb8>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a54      	ldr	r2, [pc, #336]	; (8002e70 <HAL_DMA_Init+0x1e8>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00e      	beq.n	8002d40 <HAL_DMA_Init+0xb8>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a53      	ldr	r2, [pc, #332]	; (8002e74 <HAL_DMA_Init+0x1ec>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d009      	beq.n	8002d40 <HAL_DMA_Init+0xb8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a51      	ldr	r2, [pc, #324]	; (8002e78 <HAL_DMA_Init+0x1f0>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d004      	beq.n	8002d40 <HAL_DMA_Init+0xb8>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a50      	ldr	r2, [pc, #320]	; (8002e7c <HAL_DMA_Init+0x1f4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d101      	bne.n	8002d44 <HAL_DMA_Init+0xbc>
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <HAL_DMA_Init+0xbe>
 8002d44:	2300      	movs	r3, #0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 813b 	beq.w	8002fc2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a37      	ldr	r2, [pc, #220]	; (8002e40 <HAL_DMA_Init+0x1b8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d04a      	beq.n	8002dfc <HAL_DMA_Init+0x174>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a36      	ldr	r2, [pc, #216]	; (8002e44 <HAL_DMA_Init+0x1bc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d045      	beq.n	8002dfc <HAL_DMA_Init+0x174>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a34      	ldr	r2, [pc, #208]	; (8002e48 <HAL_DMA_Init+0x1c0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d040      	beq.n	8002dfc <HAL_DMA_Init+0x174>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a33      	ldr	r2, [pc, #204]	; (8002e4c <HAL_DMA_Init+0x1c4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d03b      	beq.n	8002dfc <HAL_DMA_Init+0x174>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a31      	ldr	r2, [pc, #196]	; (8002e50 <HAL_DMA_Init+0x1c8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d036      	beq.n	8002dfc <HAL_DMA_Init+0x174>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a30      	ldr	r2, [pc, #192]	; (8002e54 <HAL_DMA_Init+0x1cc>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d031      	beq.n	8002dfc <HAL_DMA_Init+0x174>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a2e      	ldr	r2, [pc, #184]	; (8002e58 <HAL_DMA_Init+0x1d0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d02c      	beq.n	8002dfc <HAL_DMA_Init+0x174>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a2d      	ldr	r2, [pc, #180]	; (8002e5c <HAL_DMA_Init+0x1d4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d027      	beq.n	8002dfc <HAL_DMA_Init+0x174>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a2b      	ldr	r2, [pc, #172]	; (8002e60 <HAL_DMA_Init+0x1d8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d022      	beq.n	8002dfc <HAL_DMA_Init+0x174>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a2a      	ldr	r2, [pc, #168]	; (8002e64 <HAL_DMA_Init+0x1dc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d01d      	beq.n	8002dfc <HAL_DMA_Init+0x174>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a28      	ldr	r2, [pc, #160]	; (8002e68 <HAL_DMA_Init+0x1e0>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d018      	beq.n	8002dfc <HAL_DMA_Init+0x174>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a27      	ldr	r2, [pc, #156]	; (8002e6c <HAL_DMA_Init+0x1e4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d013      	beq.n	8002dfc <HAL_DMA_Init+0x174>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a25      	ldr	r2, [pc, #148]	; (8002e70 <HAL_DMA_Init+0x1e8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00e      	beq.n	8002dfc <HAL_DMA_Init+0x174>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a24      	ldr	r2, [pc, #144]	; (8002e74 <HAL_DMA_Init+0x1ec>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d009      	beq.n	8002dfc <HAL_DMA_Init+0x174>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a22      	ldr	r2, [pc, #136]	; (8002e78 <HAL_DMA_Init+0x1f0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <HAL_DMA_Init+0x174>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a21      	ldr	r2, [pc, #132]	; (8002e7c <HAL_DMA_Init+0x1f4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d108      	bne.n	8002e0e <HAL_DMA_Init+0x186>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0201 	bic.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	e007      	b.n	8002e1e <HAL_DMA_Init+0x196>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e1e:	e02f      	b.n	8002e80 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e20:	f7ff fcfc 	bl	800281c <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b05      	cmp	r3, #5
 8002e2c:	d928      	bls.n	8002e80 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2203      	movs	r2, #3
 8002e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e246      	b.n	80032ce <HAL_DMA_Init+0x646>
 8002e40:	40020010 	.word	0x40020010
 8002e44:	40020028 	.word	0x40020028
 8002e48:	40020040 	.word	0x40020040
 8002e4c:	40020058 	.word	0x40020058
 8002e50:	40020070 	.word	0x40020070
 8002e54:	40020088 	.word	0x40020088
 8002e58:	400200a0 	.word	0x400200a0
 8002e5c:	400200b8 	.word	0x400200b8
 8002e60:	40020410 	.word	0x40020410
 8002e64:	40020428 	.word	0x40020428
 8002e68:	40020440 	.word	0x40020440
 8002e6c:	40020458 	.word	0x40020458
 8002e70:	40020470 	.word	0x40020470
 8002e74:	40020488 	.word	0x40020488
 8002e78:	400204a0 	.word	0x400204a0
 8002e7c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1c8      	bne.n	8002e20 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4b83      	ldr	r3, [pc, #524]	; (80030a8 <HAL_DMA_Init+0x420>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002ea6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002eb2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ebe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d107      	bne.n	8002ee4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	4313      	orrs	r3, r2
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002ee4:	4b71      	ldr	r3, [pc, #452]	; (80030ac <HAL_DMA_Init+0x424>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b71      	ldr	r3, [pc, #452]	; (80030b0 <HAL_DMA_Init+0x428>)
 8002eea:	4013      	ands	r3, r2
 8002eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ef0:	d328      	bcc.n	8002f44 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b28      	cmp	r3, #40	; 0x28
 8002ef8:	d903      	bls.n	8002f02 <HAL_DMA_Init+0x27a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b2e      	cmp	r3, #46	; 0x2e
 8002f00:	d917      	bls.n	8002f32 <HAL_DMA_Init+0x2aa>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b3e      	cmp	r3, #62	; 0x3e
 8002f08:	d903      	bls.n	8002f12 <HAL_DMA_Init+0x28a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b42      	cmp	r3, #66	; 0x42
 8002f10:	d90f      	bls.n	8002f32 <HAL_DMA_Init+0x2aa>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b46      	cmp	r3, #70	; 0x46
 8002f18:	d903      	bls.n	8002f22 <HAL_DMA_Init+0x29a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b48      	cmp	r3, #72	; 0x48
 8002f20:	d907      	bls.n	8002f32 <HAL_DMA_Init+0x2aa>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b4e      	cmp	r3, #78	; 0x4e
 8002f28:	d905      	bls.n	8002f36 <HAL_DMA_Init+0x2ae>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b52      	cmp	r3, #82	; 0x52
 8002f30:	d801      	bhi.n	8002f36 <HAL_DMA_Init+0x2ae>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <HAL_DMA_Init+0x2b0>
 8002f36:	2300      	movs	r3, #0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f42:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f023 0307 	bic.w	r3, r3, #7
 8002f5a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d117      	bne.n	8002f9e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00e      	beq.n	8002f9e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f001 ff1b 	bl	8004dbc <DMA_CheckFifoParam>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2240      	movs	r2, #64	; 0x40
 8002f90:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e197      	b.n	80032ce <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f001 fe56 	bl	8004c58 <DMA_CalcBaseAndBitshift>
 8002fac:	4603      	mov	r3, r0
 8002fae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	223f      	movs	r2, #63	; 0x3f
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	609a      	str	r2, [r3, #8]
 8002fc0:	e0cd      	b.n	800315e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a3b      	ldr	r2, [pc, #236]	; (80030b4 <HAL_DMA_Init+0x42c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d022      	beq.n	8003012 <HAL_DMA_Init+0x38a>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a39      	ldr	r2, [pc, #228]	; (80030b8 <HAL_DMA_Init+0x430>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d01d      	beq.n	8003012 <HAL_DMA_Init+0x38a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a38      	ldr	r2, [pc, #224]	; (80030bc <HAL_DMA_Init+0x434>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d018      	beq.n	8003012 <HAL_DMA_Init+0x38a>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a36      	ldr	r2, [pc, #216]	; (80030c0 <HAL_DMA_Init+0x438>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d013      	beq.n	8003012 <HAL_DMA_Init+0x38a>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a35      	ldr	r2, [pc, #212]	; (80030c4 <HAL_DMA_Init+0x43c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00e      	beq.n	8003012 <HAL_DMA_Init+0x38a>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a33      	ldr	r2, [pc, #204]	; (80030c8 <HAL_DMA_Init+0x440>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d009      	beq.n	8003012 <HAL_DMA_Init+0x38a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a32      	ldr	r2, [pc, #200]	; (80030cc <HAL_DMA_Init+0x444>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d004      	beq.n	8003012 <HAL_DMA_Init+0x38a>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a30      	ldr	r2, [pc, #192]	; (80030d0 <HAL_DMA_Init+0x448>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d101      	bne.n	8003016 <HAL_DMA_Init+0x38e>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_DMA_Init+0x390>
 8003016:	2300      	movs	r3, #0
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8097 	beq.w	800314c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a24      	ldr	r2, [pc, #144]	; (80030b4 <HAL_DMA_Init+0x42c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d021      	beq.n	800306c <HAL_DMA_Init+0x3e4>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a22      	ldr	r2, [pc, #136]	; (80030b8 <HAL_DMA_Init+0x430>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d01c      	beq.n	800306c <HAL_DMA_Init+0x3e4>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a21      	ldr	r2, [pc, #132]	; (80030bc <HAL_DMA_Init+0x434>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d017      	beq.n	800306c <HAL_DMA_Init+0x3e4>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1f      	ldr	r2, [pc, #124]	; (80030c0 <HAL_DMA_Init+0x438>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d012      	beq.n	800306c <HAL_DMA_Init+0x3e4>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a1e      	ldr	r2, [pc, #120]	; (80030c4 <HAL_DMA_Init+0x43c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d00d      	beq.n	800306c <HAL_DMA_Init+0x3e4>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <HAL_DMA_Init+0x440>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d008      	beq.n	800306c <HAL_DMA_Init+0x3e4>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1b      	ldr	r2, [pc, #108]	; (80030cc <HAL_DMA_Init+0x444>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d003      	beq.n	800306c <HAL_DMA_Init+0x3e4>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a19      	ldr	r2, [pc, #100]	; (80030d0 <HAL_DMA_Init+0x448>)
 800306a:	4293      	cmp	r3, r2
 800306c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2202      	movs	r2, #2
 800307a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_DMA_Init+0x44c>)
 800308a:	4013      	ands	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b40      	cmp	r3, #64	; 0x40
 8003094:	d020      	beq.n	80030d8 <HAL_DMA_Init+0x450>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b80      	cmp	r3, #128	; 0x80
 800309c:	d102      	bne.n	80030a4 <HAL_DMA_Init+0x41c>
 800309e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030a2:	e01a      	b.n	80030da <HAL_DMA_Init+0x452>
 80030a4:	2300      	movs	r3, #0
 80030a6:	e018      	b.n	80030da <HAL_DMA_Init+0x452>
 80030a8:	fe10803f 	.word	0xfe10803f
 80030ac:	5c001000 	.word	0x5c001000
 80030b0:	ffff0000 	.word	0xffff0000
 80030b4:	58025408 	.word	0x58025408
 80030b8:	5802541c 	.word	0x5802541c
 80030bc:	58025430 	.word	0x58025430
 80030c0:	58025444 	.word	0x58025444
 80030c4:	58025458 	.word	0x58025458
 80030c8:	5802546c 	.word	0x5802546c
 80030cc:	58025480 	.word	0x58025480
 80030d0:	58025494 	.word	0x58025494
 80030d4:	fffe000f 	.word	0xfffe000f
 80030d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	68d2      	ldr	r2, [r2, #12]
 80030de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80030e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80030e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80030f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80030f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003100:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003108:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	4b6e      	ldr	r3, [pc, #440]	; (80032d8 <HAL_DMA_Init+0x650>)
 8003120:	4413      	add	r3, r2
 8003122:	4a6e      	ldr	r2, [pc, #440]	; (80032dc <HAL_DMA_Init+0x654>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	009a      	lsls	r2, r3, #2
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f001 fd91 	bl	8004c58 <DMA_CalcBaseAndBitshift>
 8003136:	4603      	mov	r3, r0
 8003138:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	2201      	movs	r2, #1
 8003144:	409a      	lsls	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	e008      	b.n	800315e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2240      	movs	r2, #64	; 0x40
 8003150:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2203      	movs	r2, #3
 8003156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e0b7      	b.n	80032ce <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a5f      	ldr	r2, [pc, #380]	; (80032e0 <HAL_DMA_Init+0x658>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d072      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a5d      	ldr	r2, [pc, #372]	; (80032e4 <HAL_DMA_Init+0x65c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d06d      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a5c      	ldr	r2, [pc, #368]	; (80032e8 <HAL_DMA_Init+0x660>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d068      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a5a      	ldr	r2, [pc, #360]	; (80032ec <HAL_DMA_Init+0x664>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d063      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a59      	ldr	r2, [pc, #356]	; (80032f0 <HAL_DMA_Init+0x668>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d05e      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a57      	ldr	r2, [pc, #348]	; (80032f4 <HAL_DMA_Init+0x66c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d059      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a56      	ldr	r2, [pc, #344]	; (80032f8 <HAL_DMA_Init+0x670>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d054      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a54      	ldr	r2, [pc, #336]	; (80032fc <HAL_DMA_Init+0x674>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d04f      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a53      	ldr	r2, [pc, #332]	; (8003300 <HAL_DMA_Init+0x678>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d04a      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a51      	ldr	r2, [pc, #324]	; (8003304 <HAL_DMA_Init+0x67c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d045      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a50      	ldr	r2, [pc, #320]	; (8003308 <HAL_DMA_Init+0x680>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d040      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a4e      	ldr	r2, [pc, #312]	; (800330c <HAL_DMA_Init+0x684>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d03b      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a4d      	ldr	r2, [pc, #308]	; (8003310 <HAL_DMA_Init+0x688>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d036      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a4b      	ldr	r2, [pc, #300]	; (8003314 <HAL_DMA_Init+0x68c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d031      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a4a      	ldr	r2, [pc, #296]	; (8003318 <HAL_DMA_Init+0x690>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d02c      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a48      	ldr	r2, [pc, #288]	; (800331c <HAL_DMA_Init+0x694>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d027      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a47      	ldr	r2, [pc, #284]	; (8003320 <HAL_DMA_Init+0x698>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d022      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a45      	ldr	r2, [pc, #276]	; (8003324 <HAL_DMA_Init+0x69c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d01d      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a44      	ldr	r2, [pc, #272]	; (8003328 <HAL_DMA_Init+0x6a0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d018      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a42      	ldr	r2, [pc, #264]	; (800332c <HAL_DMA_Init+0x6a4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a41      	ldr	r2, [pc, #260]	; (8003330 <HAL_DMA_Init+0x6a8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00e      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a3f      	ldr	r2, [pc, #252]	; (8003334 <HAL_DMA_Init+0x6ac>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d009      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a3e      	ldr	r2, [pc, #248]	; (8003338 <HAL_DMA_Init+0x6b0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d004      	beq.n	800324e <HAL_DMA_Init+0x5c6>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a3c      	ldr	r2, [pc, #240]	; (800333c <HAL_DMA_Init+0x6b4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d101      	bne.n	8003252 <HAL_DMA_Init+0x5ca>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <HAL_DMA_Init+0x5cc>
 8003252:	2300      	movs	r3, #0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d032      	beq.n	80032be <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f001 fe2b 	bl	8004eb4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2b80      	cmp	r3, #128	; 0x80
 8003264:	d102      	bne.n	800326c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003280:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d010      	beq.n	80032ac <HAL_DMA_Init+0x624>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b08      	cmp	r3, #8
 8003290:	d80c      	bhi.n	80032ac <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f001 fea8 	bl	8004fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	e008      	b.n	80032be <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	a7fdabf8 	.word	0xa7fdabf8
 80032dc:	cccccccd 	.word	0xcccccccd
 80032e0:	40020010 	.word	0x40020010
 80032e4:	40020028 	.word	0x40020028
 80032e8:	40020040 	.word	0x40020040
 80032ec:	40020058 	.word	0x40020058
 80032f0:	40020070 	.word	0x40020070
 80032f4:	40020088 	.word	0x40020088
 80032f8:	400200a0 	.word	0x400200a0
 80032fc:	400200b8 	.word	0x400200b8
 8003300:	40020410 	.word	0x40020410
 8003304:	40020428 	.word	0x40020428
 8003308:	40020440 	.word	0x40020440
 800330c:	40020458 	.word	0x40020458
 8003310:	40020470 	.word	0x40020470
 8003314:	40020488 	.word	0x40020488
 8003318:	400204a0 	.word	0x400204a0
 800331c:	400204b8 	.word	0x400204b8
 8003320:	58025408 	.word	0x58025408
 8003324:	5802541c 	.word	0x5802541c
 8003328:	58025430 	.word	0x58025430
 800332c:	58025444 	.word	0x58025444
 8003330:	58025458 	.word	0x58025458
 8003334:	5802546c 	.word	0x5802546c
 8003338:	58025480 	.word	0x58025480
 800333c:	58025494 	.word	0x58025494

08003340 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003348:	f7ff fa68 	bl	800281c <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e2dc      	b.n	8003912 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d008      	beq.n	8003376 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2280      	movs	r2, #128	; 0x80
 8003368:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e2cd      	b.n	8003912 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a76      	ldr	r2, [pc, #472]	; (8003554 <HAL_DMA_Abort+0x214>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d04a      	beq.n	8003416 <HAL_DMA_Abort+0xd6>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a74      	ldr	r2, [pc, #464]	; (8003558 <HAL_DMA_Abort+0x218>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d045      	beq.n	8003416 <HAL_DMA_Abort+0xd6>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a73      	ldr	r2, [pc, #460]	; (800355c <HAL_DMA_Abort+0x21c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d040      	beq.n	8003416 <HAL_DMA_Abort+0xd6>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a71      	ldr	r2, [pc, #452]	; (8003560 <HAL_DMA_Abort+0x220>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d03b      	beq.n	8003416 <HAL_DMA_Abort+0xd6>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a70      	ldr	r2, [pc, #448]	; (8003564 <HAL_DMA_Abort+0x224>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d036      	beq.n	8003416 <HAL_DMA_Abort+0xd6>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a6e      	ldr	r2, [pc, #440]	; (8003568 <HAL_DMA_Abort+0x228>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d031      	beq.n	8003416 <HAL_DMA_Abort+0xd6>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a6d      	ldr	r2, [pc, #436]	; (800356c <HAL_DMA_Abort+0x22c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d02c      	beq.n	8003416 <HAL_DMA_Abort+0xd6>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a6b      	ldr	r2, [pc, #428]	; (8003570 <HAL_DMA_Abort+0x230>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d027      	beq.n	8003416 <HAL_DMA_Abort+0xd6>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a6a      	ldr	r2, [pc, #424]	; (8003574 <HAL_DMA_Abort+0x234>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d022      	beq.n	8003416 <HAL_DMA_Abort+0xd6>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a68      	ldr	r2, [pc, #416]	; (8003578 <HAL_DMA_Abort+0x238>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01d      	beq.n	8003416 <HAL_DMA_Abort+0xd6>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a67      	ldr	r2, [pc, #412]	; (800357c <HAL_DMA_Abort+0x23c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d018      	beq.n	8003416 <HAL_DMA_Abort+0xd6>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a65      	ldr	r2, [pc, #404]	; (8003580 <HAL_DMA_Abort+0x240>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d013      	beq.n	8003416 <HAL_DMA_Abort+0xd6>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a64      	ldr	r2, [pc, #400]	; (8003584 <HAL_DMA_Abort+0x244>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00e      	beq.n	8003416 <HAL_DMA_Abort+0xd6>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a62      	ldr	r2, [pc, #392]	; (8003588 <HAL_DMA_Abort+0x248>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d009      	beq.n	8003416 <HAL_DMA_Abort+0xd6>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a61      	ldr	r2, [pc, #388]	; (800358c <HAL_DMA_Abort+0x24c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d004      	beq.n	8003416 <HAL_DMA_Abort+0xd6>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a5f      	ldr	r2, [pc, #380]	; (8003590 <HAL_DMA_Abort+0x250>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d101      	bne.n	800341a <HAL_DMA_Abort+0xda>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <HAL_DMA_Abort+0xdc>
 800341a:	2300      	movs	r3, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d013      	beq.n	8003448 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 021e 	bic.w	r2, r2, #30
 800342e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800343e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	e00a      	b.n	800345e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 020e 	bic.w	r2, r2, #14
 8003456:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a3c      	ldr	r2, [pc, #240]	; (8003554 <HAL_DMA_Abort+0x214>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d072      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a3a      	ldr	r2, [pc, #232]	; (8003558 <HAL_DMA_Abort+0x218>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d06d      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a39      	ldr	r2, [pc, #228]	; (800355c <HAL_DMA_Abort+0x21c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d068      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a37      	ldr	r2, [pc, #220]	; (8003560 <HAL_DMA_Abort+0x220>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d063      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a36      	ldr	r2, [pc, #216]	; (8003564 <HAL_DMA_Abort+0x224>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d05e      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a34      	ldr	r2, [pc, #208]	; (8003568 <HAL_DMA_Abort+0x228>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d059      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a33      	ldr	r2, [pc, #204]	; (800356c <HAL_DMA_Abort+0x22c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d054      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a31      	ldr	r2, [pc, #196]	; (8003570 <HAL_DMA_Abort+0x230>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d04f      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a30      	ldr	r2, [pc, #192]	; (8003574 <HAL_DMA_Abort+0x234>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d04a      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a2e      	ldr	r2, [pc, #184]	; (8003578 <HAL_DMA_Abort+0x238>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d045      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a2d      	ldr	r2, [pc, #180]	; (800357c <HAL_DMA_Abort+0x23c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d040      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a2b      	ldr	r2, [pc, #172]	; (8003580 <HAL_DMA_Abort+0x240>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d03b      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a2a      	ldr	r2, [pc, #168]	; (8003584 <HAL_DMA_Abort+0x244>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d036      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a28      	ldr	r2, [pc, #160]	; (8003588 <HAL_DMA_Abort+0x248>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d031      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a27      	ldr	r2, [pc, #156]	; (800358c <HAL_DMA_Abort+0x24c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d02c      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a25      	ldr	r2, [pc, #148]	; (8003590 <HAL_DMA_Abort+0x250>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d027      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a24      	ldr	r2, [pc, #144]	; (8003594 <HAL_DMA_Abort+0x254>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d022      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a22      	ldr	r2, [pc, #136]	; (8003598 <HAL_DMA_Abort+0x258>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01d      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a21      	ldr	r2, [pc, #132]	; (800359c <HAL_DMA_Abort+0x25c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d018      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1f      	ldr	r2, [pc, #124]	; (80035a0 <HAL_DMA_Abort+0x260>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1e      	ldr	r2, [pc, #120]	; (80035a4 <HAL_DMA_Abort+0x264>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00e      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1c      	ldr	r2, [pc, #112]	; (80035a8 <HAL_DMA_Abort+0x268>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d009      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1b      	ldr	r2, [pc, #108]	; (80035ac <HAL_DMA_Abort+0x26c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d004      	beq.n	800354e <HAL_DMA_Abort+0x20e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a19      	ldr	r2, [pc, #100]	; (80035b0 <HAL_DMA_Abort+0x270>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d132      	bne.n	80035b4 <HAL_DMA_Abort+0x274>
 800354e:	2301      	movs	r3, #1
 8003550:	e031      	b.n	80035b6 <HAL_DMA_Abort+0x276>
 8003552:	bf00      	nop
 8003554:	40020010 	.word	0x40020010
 8003558:	40020028 	.word	0x40020028
 800355c:	40020040 	.word	0x40020040
 8003560:	40020058 	.word	0x40020058
 8003564:	40020070 	.word	0x40020070
 8003568:	40020088 	.word	0x40020088
 800356c:	400200a0 	.word	0x400200a0
 8003570:	400200b8 	.word	0x400200b8
 8003574:	40020410 	.word	0x40020410
 8003578:	40020428 	.word	0x40020428
 800357c:	40020440 	.word	0x40020440
 8003580:	40020458 	.word	0x40020458
 8003584:	40020470 	.word	0x40020470
 8003588:	40020488 	.word	0x40020488
 800358c:	400204a0 	.word	0x400204a0
 8003590:	400204b8 	.word	0x400204b8
 8003594:	58025408 	.word	0x58025408
 8003598:	5802541c 	.word	0x5802541c
 800359c:	58025430 	.word	0x58025430
 80035a0:	58025444 	.word	0x58025444
 80035a4:	58025458 	.word	0x58025458
 80035a8:	5802546c 	.word	0x5802546c
 80035ac:	58025480 	.word	0x58025480
 80035b0:	58025494 	.word	0x58025494
 80035b4:	2300      	movs	r3, #0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d007      	beq.n	80035ca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a6d      	ldr	r2, [pc, #436]	; (8003784 <HAL_DMA_Abort+0x444>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d04a      	beq.n	800366a <HAL_DMA_Abort+0x32a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a6b      	ldr	r2, [pc, #428]	; (8003788 <HAL_DMA_Abort+0x448>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d045      	beq.n	800366a <HAL_DMA_Abort+0x32a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a6a      	ldr	r2, [pc, #424]	; (800378c <HAL_DMA_Abort+0x44c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d040      	beq.n	800366a <HAL_DMA_Abort+0x32a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a68      	ldr	r2, [pc, #416]	; (8003790 <HAL_DMA_Abort+0x450>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d03b      	beq.n	800366a <HAL_DMA_Abort+0x32a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a67      	ldr	r2, [pc, #412]	; (8003794 <HAL_DMA_Abort+0x454>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d036      	beq.n	800366a <HAL_DMA_Abort+0x32a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a65      	ldr	r2, [pc, #404]	; (8003798 <HAL_DMA_Abort+0x458>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d031      	beq.n	800366a <HAL_DMA_Abort+0x32a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a64      	ldr	r2, [pc, #400]	; (800379c <HAL_DMA_Abort+0x45c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d02c      	beq.n	800366a <HAL_DMA_Abort+0x32a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a62      	ldr	r2, [pc, #392]	; (80037a0 <HAL_DMA_Abort+0x460>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d027      	beq.n	800366a <HAL_DMA_Abort+0x32a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a61      	ldr	r2, [pc, #388]	; (80037a4 <HAL_DMA_Abort+0x464>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d022      	beq.n	800366a <HAL_DMA_Abort+0x32a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a5f      	ldr	r2, [pc, #380]	; (80037a8 <HAL_DMA_Abort+0x468>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d01d      	beq.n	800366a <HAL_DMA_Abort+0x32a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a5e      	ldr	r2, [pc, #376]	; (80037ac <HAL_DMA_Abort+0x46c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d018      	beq.n	800366a <HAL_DMA_Abort+0x32a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a5c      	ldr	r2, [pc, #368]	; (80037b0 <HAL_DMA_Abort+0x470>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d013      	beq.n	800366a <HAL_DMA_Abort+0x32a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a5b      	ldr	r2, [pc, #364]	; (80037b4 <HAL_DMA_Abort+0x474>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00e      	beq.n	800366a <HAL_DMA_Abort+0x32a>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a59      	ldr	r2, [pc, #356]	; (80037b8 <HAL_DMA_Abort+0x478>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d009      	beq.n	800366a <HAL_DMA_Abort+0x32a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a58      	ldr	r2, [pc, #352]	; (80037bc <HAL_DMA_Abort+0x47c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d004      	beq.n	800366a <HAL_DMA_Abort+0x32a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a56      	ldr	r2, [pc, #344]	; (80037c0 <HAL_DMA_Abort+0x480>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d108      	bne.n	800367c <HAL_DMA_Abort+0x33c>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	e007      	b.n	800368c <HAL_DMA_Abort+0x34c>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 0201 	bic.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800368c:	e013      	b.n	80036b6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800368e:	f7ff f8c5 	bl	800281c <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b05      	cmp	r3, #5
 800369a:	d90c      	bls.n	80036b6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2203      	movs	r2, #3
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e12d      	b.n	8003912 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e5      	bne.n	800368e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2f      	ldr	r2, [pc, #188]	; (8003784 <HAL_DMA_Abort+0x444>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d04a      	beq.n	8003762 <HAL_DMA_Abort+0x422>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a2d      	ldr	r2, [pc, #180]	; (8003788 <HAL_DMA_Abort+0x448>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d045      	beq.n	8003762 <HAL_DMA_Abort+0x422>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a2c      	ldr	r2, [pc, #176]	; (800378c <HAL_DMA_Abort+0x44c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d040      	beq.n	8003762 <HAL_DMA_Abort+0x422>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a2a      	ldr	r2, [pc, #168]	; (8003790 <HAL_DMA_Abort+0x450>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d03b      	beq.n	8003762 <HAL_DMA_Abort+0x422>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a29      	ldr	r2, [pc, #164]	; (8003794 <HAL_DMA_Abort+0x454>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d036      	beq.n	8003762 <HAL_DMA_Abort+0x422>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a27      	ldr	r2, [pc, #156]	; (8003798 <HAL_DMA_Abort+0x458>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d031      	beq.n	8003762 <HAL_DMA_Abort+0x422>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a26      	ldr	r2, [pc, #152]	; (800379c <HAL_DMA_Abort+0x45c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d02c      	beq.n	8003762 <HAL_DMA_Abort+0x422>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a24      	ldr	r2, [pc, #144]	; (80037a0 <HAL_DMA_Abort+0x460>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d027      	beq.n	8003762 <HAL_DMA_Abort+0x422>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <HAL_DMA_Abort+0x464>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d022      	beq.n	8003762 <HAL_DMA_Abort+0x422>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a21      	ldr	r2, [pc, #132]	; (80037a8 <HAL_DMA_Abort+0x468>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d01d      	beq.n	8003762 <HAL_DMA_Abort+0x422>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a20      	ldr	r2, [pc, #128]	; (80037ac <HAL_DMA_Abort+0x46c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d018      	beq.n	8003762 <HAL_DMA_Abort+0x422>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1e      	ldr	r2, [pc, #120]	; (80037b0 <HAL_DMA_Abort+0x470>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d013      	beq.n	8003762 <HAL_DMA_Abort+0x422>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a1d      	ldr	r2, [pc, #116]	; (80037b4 <HAL_DMA_Abort+0x474>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00e      	beq.n	8003762 <HAL_DMA_Abort+0x422>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1b      	ldr	r2, [pc, #108]	; (80037b8 <HAL_DMA_Abort+0x478>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d009      	beq.n	8003762 <HAL_DMA_Abort+0x422>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1a      	ldr	r2, [pc, #104]	; (80037bc <HAL_DMA_Abort+0x47c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d004      	beq.n	8003762 <HAL_DMA_Abort+0x422>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a18      	ldr	r2, [pc, #96]	; (80037c0 <HAL_DMA_Abort+0x480>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d101      	bne.n	8003766 <HAL_DMA_Abort+0x426>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_DMA_Abort+0x428>
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d02b      	beq.n	80037c4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	223f      	movs	r2, #63	; 0x3f
 800377c:	409a      	lsls	r2, r3
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	609a      	str	r2, [r3, #8]
 8003782:	e02a      	b.n	80037da <HAL_DMA_Abort+0x49a>
 8003784:	40020010 	.word	0x40020010
 8003788:	40020028 	.word	0x40020028
 800378c:	40020040 	.word	0x40020040
 8003790:	40020058 	.word	0x40020058
 8003794:	40020070 	.word	0x40020070
 8003798:	40020088 	.word	0x40020088
 800379c:	400200a0 	.word	0x400200a0
 80037a0:	400200b8 	.word	0x400200b8
 80037a4:	40020410 	.word	0x40020410
 80037a8:	40020428 	.word	0x40020428
 80037ac:	40020440 	.word	0x40020440
 80037b0:	40020458 	.word	0x40020458
 80037b4:	40020470 	.word	0x40020470
 80037b8:	40020488 	.word	0x40020488
 80037bc:	400204a0 	.word	0x400204a0
 80037c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	f003 031f 	and.w	r3, r3, #31
 80037d2:	2201      	movs	r2, #1
 80037d4:	409a      	lsls	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a4f      	ldr	r2, [pc, #316]	; (800391c <HAL_DMA_Abort+0x5dc>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d072      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a4d      	ldr	r2, [pc, #308]	; (8003920 <HAL_DMA_Abort+0x5e0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d06d      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a4c      	ldr	r2, [pc, #304]	; (8003924 <HAL_DMA_Abort+0x5e4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d068      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a4a      	ldr	r2, [pc, #296]	; (8003928 <HAL_DMA_Abort+0x5e8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d063      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a49      	ldr	r2, [pc, #292]	; (800392c <HAL_DMA_Abort+0x5ec>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d05e      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a47      	ldr	r2, [pc, #284]	; (8003930 <HAL_DMA_Abort+0x5f0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d059      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a46      	ldr	r2, [pc, #280]	; (8003934 <HAL_DMA_Abort+0x5f4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d054      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a44      	ldr	r2, [pc, #272]	; (8003938 <HAL_DMA_Abort+0x5f8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d04f      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a43      	ldr	r2, [pc, #268]	; (800393c <HAL_DMA_Abort+0x5fc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d04a      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a41      	ldr	r2, [pc, #260]	; (8003940 <HAL_DMA_Abort+0x600>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d045      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a40      	ldr	r2, [pc, #256]	; (8003944 <HAL_DMA_Abort+0x604>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d040      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a3e      	ldr	r2, [pc, #248]	; (8003948 <HAL_DMA_Abort+0x608>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d03b      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a3d      	ldr	r2, [pc, #244]	; (800394c <HAL_DMA_Abort+0x60c>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d036      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a3b      	ldr	r2, [pc, #236]	; (8003950 <HAL_DMA_Abort+0x610>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d031      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a3a      	ldr	r2, [pc, #232]	; (8003954 <HAL_DMA_Abort+0x614>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d02c      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a38      	ldr	r2, [pc, #224]	; (8003958 <HAL_DMA_Abort+0x618>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d027      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a37      	ldr	r2, [pc, #220]	; (800395c <HAL_DMA_Abort+0x61c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d022      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a35      	ldr	r2, [pc, #212]	; (8003960 <HAL_DMA_Abort+0x620>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d01d      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a34      	ldr	r2, [pc, #208]	; (8003964 <HAL_DMA_Abort+0x624>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d018      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a32      	ldr	r2, [pc, #200]	; (8003968 <HAL_DMA_Abort+0x628>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d013      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a31      	ldr	r2, [pc, #196]	; (800396c <HAL_DMA_Abort+0x62c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00e      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a2f      	ldr	r2, [pc, #188]	; (8003970 <HAL_DMA_Abort+0x630>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d009      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a2e      	ldr	r2, [pc, #184]	; (8003974 <HAL_DMA_Abort+0x634>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d004      	beq.n	80038ca <HAL_DMA_Abort+0x58a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a2c      	ldr	r2, [pc, #176]	; (8003978 <HAL_DMA_Abort+0x638>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d101      	bne.n	80038ce <HAL_DMA_Abort+0x58e>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <HAL_DMA_Abort+0x590>
 80038ce:	2300      	movs	r3, #0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d015      	beq.n	8003900 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038dc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00c      	beq.n	8003900 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038f4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038fe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40020010 	.word	0x40020010
 8003920:	40020028 	.word	0x40020028
 8003924:	40020040 	.word	0x40020040
 8003928:	40020058 	.word	0x40020058
 800392c:	40020070 	.word	0x40020070
 8003930:	40020088 	.word	0x40020088
 8003934:	400200a0 	.word	0x400200a0
 8003938:	400200b8 	.word	0x400200b8
 800393c:	40020410 	.word	0x40020410
 8003940:	40020428 	.word	0x40020428
 8003944:	40020440 	.word	0x40020440
 8003948:	40020458 	.word	0x40020458
 800394c:	40020470 	.word	0x40020470
 8003950:	40020488 	.word	0x40020488
 8003954:	400204a0 	.word	0x400204a0
 8003958:	400204b8 	.word	0x400204b8
 800395c:	58025408 	.word	0x58025408
 8003960:	5802541c 	.word	0x5802541c
 8003964:	58025430 	.word	0x58025430
 8003968:	58025444 	.word	0x58025444
 800396c:	58025458 	.word	0x58025458
 8003970:	5802546c 	.word	0x5802546c
 8003974:	58025480 	.word	0x58025480
 8003978:	58025494 	.word	0x58025494

0800397c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e205      	b.n	8003d9a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d004      	beq.n	80039a4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2280      	movs	r2, #128	; 0x80
 800399e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e1fa      	b.n	8003d9a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a8c      	ldr	r2, [pc, #560]	; (8003bdc <HAL_DMA_Abort_IT+0x260>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d04a      	beq.n	8003a44 <HAL_DMA_Abort_IT+0xc8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a8b      	ldr	r2, [pc, #556]	; (8003be0 <HAL_DMA_Abort_IT+0x264>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d045      	beq.n	8003a44 <HAL_DMA_Abort_IT+0xc8>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a89      	ldr	r2, [pc, #548]	; (8003be4 <HAL_DMA_Abort_IT+0x268>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d040      	beq.n	8003a44 <HAL_DMA_Abort_IT+0xc8>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a88      	ldr	r2, [pc, #544]	; (8003be8 <HAL_DMA_Abort_IT+0x26c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d03b      	beq.n	8003a44 <HAL_DMA_Abort_IT+0xc8>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a86      	ldr	r2, [pc, #536]	; (8003bec <HAL_DMA_Abort_IT+0x270>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d036      	beq.n	8003a44 <HAL_DMA_Abort_IT+0xc8>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a85      	ldr	r2, [pc, #532]	; (8003bf0 <HAL_DMA_Abort_IT+0x274>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d031      	beq.n	8003a44 <HAL_DMA_Abort_IT+0xc8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a83      	ldr	r2, [pc, #524]	; (8003bf4 <HAL_DMA_Abort_IT+0x278>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d02c      	beq.n	8003a44 <HAL_DMA_Abort_IT+0xc8>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a82      	ldr	r2, [pc, #520]	; (8003bf8 <HAL_DMA_Abort_IT+0x27c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d027      	beq.n	8003a44 <HAL_DMA_Abort_IT+0xc8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a80      	ldr	r2, [pc, #512]	; (8003bfc <HAL_DMA_Abort_IT+0x280>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d022      	beq.n	8003a44 <HAL_DMA_Abort_IT+0xc8>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a7f      	ldr	r2, [pc, #508]	; (8003c00 <HAL_DMA_Abort_IT+0x284>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d01d      	beq.n	8003a44 <HAL_DMA_Abort_IT+0xc8>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a7d      	ldr	r2, [pc, #500]	; (8003c04 <HAL_DMA_Abort_IT+0x288>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d018      	beq.n	8003a44 <HAL_DMA_Abort_IT+0xc8>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a7c      	ldr	r2, [pc, #496]	; (8003c08 <HAL_DMA_Abort_IT+0x28c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d013      	beq.n	8003a44 <HAL_DMA_Abort_IT+0xc8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a7a      	ldr	r2, [pc, #488]	; (8003c0c <HAL_DMA_Abort_IT+0x290>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00e      	beq.n	8003a44 <HAL_DMA_Abort_IT+0xc8>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a79      	ldr	r2, [pc, #484]	; (8003c10 <HAL_DMA_Abort_IT+0x294>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <HAL_DMA_Abort_IT+0xc8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a77      	ldr	r2, [pc, #476]	; (8003c14 <HAL_DMA_Abort_IT+0x298>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d004      	beq.n	8003a44 <HAL_DMA_Abort_IT+0xc8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a76      	ldr	r2, [pc, #472]	; (8003c18 <HAL_DMA_Abort_IT+0x29c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d101      	bne.n	8003a48 <HAL_DMA_Abort_IT+0xcc>
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <HAL_DMA_Abort_IT+0xce>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d065      	beq.n	8003b1a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2204      	movs	r2, #4
 8003a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a60      	ldr	r2, [pc, #384]	; (8003bdc <HAL_DMA_Abort_IT+0x260>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d04a      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x17a>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a5e      	ldr	r2, [pc, #376]	; (8003be0 <HAL_DMA_Abort_IT+0x264>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d045      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x17a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a5d      	ldr	r2, [pc, #372]	; (8003be4 <HAL_DMA_Abort_IT+0x268>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d040      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x17a>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a5b      	ldr	r2, [pc, #364]	; (8003be8 <HAL_DMA_Abort_IT+0x26c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d03b      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x17a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a5a      	ldr	r2, [pc, #360]	; (8003bec <HAL_DMA_Abort_IT+0x270>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d036      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x17a>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a58      	ldr	r2, [pc, #352]	; (8003bf0 <HAL_DMA_Abort_IT+0x274>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d031      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x17a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a57      	ldr	r2, [pc, #348]	; (8003bf4 <HAL_DMA_Abort_IT+0x278>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d02c      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x17a>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a55      	ldr	r2, [pc, #340]	; (8003bf8 <HAL_DMA_Abort_IT+0x27c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d027      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x17a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a54      	ldr	r2, [pc, #336]	; (8003bfc <HAL_DMA_Abort_IT+0x280>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d022      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x17a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a52      	ldr	r2, [pc, #328]	; (8003c00 <HAL_DMA_Abort_IT+0x284>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01d      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x17a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a51      	ldr	r2, [pc, #324]	; (8003c04 <HAL_DMA_Abort_IT+0x288>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d018      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x17a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a4f      	ldr	r2, [pc, #316]	; (8003c08 <HAL_DMA_Abort_IT+0x28c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x17a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a4e      	ldr	r2, [pc, #312]	; (8003c0c <HAL_DMA_Abort_IT+0x290>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x17a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a4c      	ldr	r2, [pc, #304]	; (8003c10 <HAL_DMA_Abort_IT+0x294>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x17a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a4b      	ldr	r2, [pc, #300]	; (8003c14 <HAL_DMA_Abort_IT+0x298>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_DMA_Abort_IT+0x17a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a49      	ldr	r2, [pc, #292]	; (8003c18 <HAL_DMA_Abort_IT+0x29c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d108      	bne.n	8003b08 <HAL_DMA_Abort_IT+0x18c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	e147      	b.n	8003d98 <HAL_DMA_Abort_IT+0x41c>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	e13e      	b.n	8003d98 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 020e 	bic.w	r2, r2, #14
 8003b28:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2b      	ldr	r2, [pc, #172]	; (8003bdc <HAL_DMA_Abort_IT+0x260>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d04a      	beq.n	8003bca <HAL_DMA_Abort_IT+0x24e>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <HAL_DMA_Abort_IT+0x264>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d045      	beq.n	8003bca <HAL_DMA_Abort_IT+0x24e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a28      	ldr	r2, [pc, #160]	; (8003be4 <HAL_DMA_Abort_IT+0x268>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d040      	beq.n	8003bca <HAL_DMA_Abort_IT+0x24e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a26      	ldr	r2, [pc, #152]	; (8003be8 <HAL_DMA_Abort_IT+0x26c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d03b      	beq.n	8003bca <HAL_DMA_Abort_IT+0x24e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a25      	ldr	r2, [pc, #148]	; (8003bec <HAL_DMA_Abort_IT+0x270>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d036      	beq.n	8003bca <HAL_DMA_Abort_IT+0x24e>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a23      	ldr	r2, [pc, #140]	; (8003bf0 <HAL_DMA_Abort_IT+0x274>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d031      	beq.n	8003bca <HAL_DMA_Abort_IT+0x24e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a22      	ldr	r2, [pc, #136]	; (8003bf4 <HAL_DMA_Abort_IT+0x278>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d02c      	beq.n	8003bca <HAL_DMA_Abort_IT+0x24e>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a20      	ldr	r2, [pc, #128]	; (8003bf8 <HAL_DMA_Abort_IT+0x27c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d027      	beq.n	8003bca <HAL_DMA_Abort_IT+0x24e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1f      	ldr	r2, [pc, #124]	; (8003bfc <HAL_DMA_Abort_IT+0x280>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d022      	beq.n	8003bca <HAL_DMA_Abort_IT+0x24e>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <HAL_DMA_Abort_IT+0x284>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01d      	beq.n	8003bca <HAL_DMA_Abort_IT+0x24e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1c      	ldr	r2, [pc, #112]	; (8003c04 <HAL_DMA_Abort_IT+0x288>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d018      	beq.n	8003bca <HAL_DMA_Abort_IT+0x24e>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1a      	ldr	r2, [pc, #104]	; (8003c08 <HAL_DMA_Abort_IT+0x28c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_DMA_Abort_IT+0x24e>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a19      	ldr	r2, [pc, #100]	; (8003c0c <HAL_DMA_Abort_IT+0x290>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00e      	beq.n	8003bca <HAL_DMA_Abort_IT+0x24e>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a17      	ldr	r2, [pc, #92]	; (8003c10 <HAL_DMA_Abort_IT+0x294>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_DMA_Abort_IT+0x24e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a16      	ldr	r2, [pc, #88]	; (8003c14 <HAL_DMA_Abort_IT+0x298>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d004      	beq.n	8003bca <HAL_DMA_Abort_IT+0x24e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a14      	ldr	r2, [pc, #80]	; (8003c18 <HAL_DMA_Abort_IT+0x29c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d128      	bne.n	8003c1c <HAL_DMA_Abort_IT+0x2a0>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0201 	bic.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	e027      	b.n	8003c2c <HAL_DMA_Abort_IT+0x2b0>
 8003bdc:	40020010 	.word	0x40020010
 8003be0:	40020028 	.word	0x40020028
 8003be4:	40020040 	.word	0x40020040
 8003be8:	40020058 	.word	0x40020058
 8003bec:	40020070 	.word	0x40020070
 8003bf0:	40020088 	.word	0x40020088
 8003bf4:	400200a0 	.word	0x400200a0
 8003bf8:	400200b8 	.word	0x400200b8
 8003bfc:	40020410 	.word	0x40020410
 8003c00:	40020428 	.word	0x40020428
 8003c04:	40020440 	.word	0x40020440
 8003c08:	40020458 	.word	0x40020458
 8003c0c:	40020470 	.word	0x40020470
 8003c10:	40020488 	.word	0x40020488
 8003c14:	400204a0 	.word	0x400204a0
 8003c18:	400204b8 	.word	0x400204b8
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0201 	bic.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a5c      	ldr	r2, [pc, #368]	; (8003da4 <HAL_DMA_Abort_IT+0x428>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d072      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a5b      	ldr	r2, [pc, #364]	; (8003da8 <HAL_DMA_Abort_IT+0x42c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d06d      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a59      	ldr	r2, [pc, #356]	; (8003dac <HAL_DMA_Abort_IT+0x430>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d068      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a58      	ldr	r2, [pc, #352]	; (8003db0 <HAL_DMA_Abort_IT+0x434>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d063      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a56      	ldr	r2, [pc, #344]	; (8003db4 <HAL_DMA_Abort_IT+0x438>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d05e      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a55      	ldr	r2, [pc, #340]	; (8003db8 <HAL_DMA_Abort_IT+0x43c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d059      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a53      	ldr	r2, [pc, #332]	; (8003dbc <HAL_DMA_Abort_IT+0x440>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d054      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a52      	ldr	r2, [pc, #328]	; (8003dc0 <HAL_DMA_Abort_IT+0x444>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d04f      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a50      	ldr	r2, [pc, #320]	; (8003dc4 <HAL_DMA_Abort_IT+0x448>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d04a      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a4f      	ldr	r2, [pc, #316]	; (8003dc8 <HAL_DMA_Abort_IT+0x44c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d045      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a4d      	ldr	r2, [pc, #308]	; (8003dcc <HAL_DMA_Abort_IT+0x450>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d040      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a4c      	ldr	r2, [pc, #304]	; (8003dd0 <HAL_DMA_Abort_IT+0x454>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d03b      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a4a      	ldr	r2, [pc, #296]	; (8003dd4 <HAL_DMA_Abort_IT+0x458>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d036      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a49      	ldr	r2, [pc, #292]	; (8003dd8 <HAL_DMA_Abort_IT+0x45c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d031      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a47      	ldr	r2, [pc, #284]	; (8003ddc <HAL_DMA_Abort_IT+0x460>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d02c      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a46      	ldr	r2, [pc, #280]	; (8003de0 <HAL_DMA_Abort_IT+0x464>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d027      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a44      	ldr	r2, [pc, #272]	; (8003de4 <HAL_DMA_Abort_IT+0x468>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d022      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a43      	ldr	r2, [pc, #268]	; (8003de8 <HAL_DMA_Abort_IT+0x46c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d01d      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a41      	ldr	r2, [pc, #260]	; (8003dec <HAL_DMA_Abort_IT+0x470>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d018      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a40      	ldr	r2, [pc, #256]	; (8003df0 <HAL_DMA_Abort_IT+0x474>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d013      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a3e      	ldr	r2, [pc, #248]	; (8003df4 <HAL_DMA_Abort_IT+0x478>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00e      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a3d      	ldr	r2, [pc, #244]	; (8003df8 <HAL_DMA_Abort_IT+0x47c>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d009      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a3b      	ldr	r2, [pc, #236]	; (8003dfc <HAL_DMA_Abort_IT+0x480>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d004      	beq.n	8003d1c <HAL_DMA_Abort_IT+0x3a0>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a3a      	ldr	r2, [pc, #232]	; (8003e00 <HAL_DMA_Abort_IT+0x484>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d101      	bne.n	8003d20 <HAL_DMA_Abort_IT+0x3a4>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e000      	b.n	8003d22 <HAL_DMA_Abort_IT+0x3a6>
 8003d20:	2300      	movs	r3, #0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d028      	beq.n	8003d78 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d34:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	2201      	movs	r2, #1
 8003d46:	409a      	lsls	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d54:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00c      	beq.n	8003d78 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d6c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d76:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40020010 	.word	0x40020010
 8003da8:	40020028 	.word	0x40020028
 8003dac:	40020040 	.word	0x40020040
 8003db0:	40020058 	.word	0x40020058
 8003db4:	40020070 	.word	0x40020070
 8003db8:	40020088 	.word	0x40020088
 8003dbc:	400200a0 	.word	0x400200a0
 8003dc0:	400200b8 	.word	0x400200b8
 8003dc4:	40020410 	.word	0x40020410
 8003dc8:	40020428 	.word	0x40020428
 8003dcc:	40020440 	.word	0x40020440
 8003dd0:	40020458 	.word	0x40020458
 8003dd4:	40020470 	.word	0x40020470
 8003dd8:	40020488 	.word	0x40020488
 8003ddc:	400204a0 	.word	0x400204a0
 8003de0:	400204b8 	.word	0x400204b8
 8003de4:	58025408 	.word	0x58025408
 8003de8:	5802541c 	.word	0x5802541c
 8003dec:	58025430 	.word	0x58025430
 8003df0:	58025444 	.word	0x58025444
 8003df4:	58025458 	.word	0x58025458
 8003df8:	5802546c 	.word	0x5802546c
 8003dfc:	58025480 	.word	0x58025480
 8003e00:	58025494 	.word	0x58025494

08003e04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	; 0x28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e10:	4b67      	ldr	r3, [pc, #412]	; (8003fb0 <HAL_DMA_IRQHandler+0x1ac>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a67      	ldr	r2, [pc, #412]	; (8003fb4 <HAL_DMA_IRQHandler+0x1b0>)
 8003e16:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1a:	0a9b      	lsrs	r3, r3, #10
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e28:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a5f      	ldr	r2, [pc, #380]	; (8003fb8 <HAL_DMA_IRQHandler+0x1b4>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d04a      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xd2>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a5d      	ldr	r2, [pc, #372]	; (8003fbc <HAL_DMA_IRQHandler+0x1b8>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d045      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xd2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a5c      	ldr	r2, [pc, #368]	; (8003fc0 <HAL_DMA_IRQHandler+0x1bc>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d040      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xd2>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a5a      	ldr	r2, [pc, #360]	; (8003fc4 <HAL_DMA_IRQHandler+0x1c0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d03b      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xd2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a59      	ldr	r2, [pc, #356]	; (8003fc8 <HAL_DMA_IRQHandler+0x1c4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d036      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xd2>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a57      	ldr	r2, [pc, #348]	; (8003fcc <HAL_DMA_IRQHandler+0x1c8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d031      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xd2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a56      	ldr	r2, [pc, #344]	; (8003fd0 <HAL_DMA_IRQHandler+0x1cc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d02c      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xd2>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a54      	ldr	r2, [pc, #336]	; (8003fd4 <HAL_DMA_IRQHandler+0x1d0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d027      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xd2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a53      	ldr	r2, [pc, #332]	; (8003fd8 <HAL_DMA_IRQHandler+0x1d4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d022      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xd2>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a51      	ldr	r2, [pc, #324]	; (8003fdc <HAL_DMA_IRQHandler+0x1d8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01d      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xd2>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a50      	ldr	r2, [pc, #320]	; (8003fe0 <HAL_DMA_IRQHandler+0x1dc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d018      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xd2>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a4e      	ldr	r2, [pc, #312]	; (8003fe4 <HAL_DMA_IRQHandler+0x1e0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xd2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a4d      	ldr	r2, [pc, #308]	; (8003fe8 <HAL_DMA_IRQHandler+0x1e4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00e      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xd2>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a4b      	ldr	r2, [pc, #300]	; (8003fec <HAL_DMA_IRQHandler+0x1e8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d009      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xd2>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a4a      	ldr	r2, [pc, #296]	; (8003ff0 <HAL_DMA_IRQHandler+0x1ec>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d004      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0xd2>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a48      	ldr	r2, [pc, #288]	; (8003ff4 <HAL_DMA_IRQHandler+0x1f0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d101      	bne.n	8003eda <HAL_DMA_IRQHandler+0xd6>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <HAL_DMA_IRQHandler+0xd8>
 8003eda:	2300      	movs	r3, #0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 842b 	beq.w	8004738 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	f003 031f 	and.w	r3, r3, #31
 8003eea:	2208      	movs	r2, #8
 8003eec:	409a      	lsls	r2, r3
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80a2 	beq.w	800403c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a2e      	ldr	r2, [pc, #184]	; (8003fb8 <HAL_DMA_IRQHandler+0x1b4>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d04a      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x194>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a2d      	ldr	r2, [pc, #180]	; (8003fbc <HAL_DMA_IRQHandler+0x1b8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d045      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x194>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a2b      	ldr	r2, [pc, #172]	; (8003fc0 <HAL_DMA_IRQHandler+0x1bc>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d040      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x194>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a2a      	ldr	r2, [pc, #168]	; (8003fc4 <HAL_DMA_IRQHandler+0x1c0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d03b      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x194>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a28      	ldr	r2, [pc, #160]	; (8003fc8 <HAL_DMA_IRQHandler+0x1c4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d036      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x194>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a27      	ldr	r2, [pc, #156]	; (8003fcc <HAL_DMA_IRQHandler+0x1c8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d031      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x194>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a25      	ldr	r2, [pc, #148]	; (8003fd0 <HAL_DMA_IRQHandler+0x1cc>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d02c      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x194>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <HAL_DMA_IRQHandler+0x1d0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d027      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x194>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a22      	ldr	r2, [pc, #136]	; (8003fd8 <HAL_DMA_IRQHandler+0x1d4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d022      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x194>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a21      	ldr	r2, [pc, #132]	; (8003fdc <HAL_DMA_IRQHandler+0x1d8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d01d      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x194>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1f      	ldr	r2, [pc, #124]	; (8003fe0 <HAL_DMA_IRQHandler+0x1dc>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d018      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x194>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1e      	ldr	r2, [pc, #120]	; (8003fe4 <HAL_DMA_IRQHandler+0x1e0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d013      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x194>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1c      	ldr	r2, [pc, #112]	; (8003fe8 <HAL_DMA_IRQHandler+0x1e4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00e      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x194>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1b      	ldr	r2, [pc, #108]	; (8003fec <HAL_DMA_IRQHandler+0x1e8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d009      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x194>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a19      	ldr	r2, [pc, #100]	; (8003ff0 <HAL_DMA_IRQHandler+0x1ec>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <HAL_DMA_IRQHandler+0x194>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a18      	ldr	r2, [pc, #96]	; (8003ff4 <HAL_DMA_IRQHandler+0x1f0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d12f      	bne.n	8003ff8 <HAL_DMA_IRQHandler+0x1f4>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	bf14      	ite	ne
 8003fa6:	2301      	movne	r3, #1
 8003fa8:	2300      	moveq	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	e02e      	b.n	800400c <HAL_DMA_IRQHandler+0x208>
 8003fae:	bf00      	nop
 8003fb0:	20000000 	.word	0x20000000
 8003fb4:	1b4e81b5 	.word	0x1b4e81b5
 8003fb8:	40020010 	.word	0x40020010
 8003fbc:	40020028 	.word	0x40020028
 8003fc0:	40020040 	.word	0x40020040
 8003fc4:	40020058 	.word	0x40020058
 8003fc8:	40020070 	.word	0x40020070
 8003fcc:	40020088 	.word	0x40020088
 8003fd0:	400200a0 	.word	0x400200a0
 8003fd4:	400200b8 	.word	0x400200b8
 8003fd8:	40020410 	.word	0x40020410
 8003fdc:	40020428 	.word	0x40020428
 8003fe0:	40020440 	.word	0x40020440
 8003fe4:	40020458 	.word	0x40020458
 8003fe8:	40020470 	.word	0x40020470
 8003fec:	40020488 	.word	0x40020488
 8003ff0:	400204a0 	.word	0x400204a0
 8003ff4:	400204b8 	.word	0x400204b8
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	bf14      	ite	ne
 8004006:	2301      	movne	r3, #1
 8004008:	2300      	moveq	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d015      	beq.n	800403c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0204 	bic.w	r2, r2, #4
 800401e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004024:	f003 031f 	and.w	r3, r3, #31
 8004028:	2208      	movs	r2, #8
 800402a:	409a      	lsls	r2, r3
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004034:	f043 0201 	orr.w	r2, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	fa22 f303 	lsr.w	r3, r2, r3
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d06e      	beq.n	8004130 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a69      	ldr	r2, [pc, #420]	; (80041fc <HAL_DMA_IRQHandler+0x3f8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d04a      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x2ee>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a67      	ldr	r2, [pc, #412]	; (8004200 <HAL_DMA_IRQHandler+0x3fc>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d045      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x2ee>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a66      	ldr	r2, [pc, #408]	; (8004204 <HAL_DMA_IRQHandler+0x400>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d040      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x2ee>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a64      	ldr	r2, [pc, #400]	; (8004208 <HAL_DMA_IRQHandler+0x404>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d03b      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x2ee>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a63      	ldr	r2, [pc, #396]	; (800420c <HAL_DMA_IRQHandler+0x408>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d036      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x2ee>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a61      	ldr	r2, [pc, #388]	; (8004210 <HAL_DMA_IRQHandler+0x40c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d031      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x2ee>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a60      	ldr	r2, [pc, #384]	; (8004214 <HAL_DMA_IRQHandler+0x410>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d02c      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x2ee>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a5e      	ldr	r2, [pc, #376]	; (8004218 <HAL_DMA_IRQHandler+0x414>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d027      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x2ee>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a5d      	ldr	r2, [pc, #372]	; (800421c <HAL_DMA_IRQHandler+0x418>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d022      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x2ee>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a5b      	ldr	r2, [pc, #364]	; (8004220 <HAL_DMA_IRQHandler+0x41c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d01d      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x2ee>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a5a      	ldr	r2, [pc, #360]	; (8004224 <HAL_DMA_IRQHandler+0x420>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d018      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x2ee>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a58      	ldr	r2, [pc, #352]	; (8004228 <HAL_DMA_IRQHandler+0x424>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x2ee>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a57      	ldr	r2, [pc, #348]	; (800422c <HAL_DMA_IRQHandler+0x428>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00e      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x2ee>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a55      	ldr	r2, [pc, #340]	; (8004230 <HAL_DMA_IRQHandler+0x42c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d009      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x2ee>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a54      	ldr	r2, [pc, #336]	; (8004234 <HAL_DMA_IRQHandler+0x430>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x2ee>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a52      	ldr	r2, [pc, #328]	; (8004238 <HAL_DMA_IRQHandler+0x434>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d10a      	bne.n	8004108 <HAL_DMA_IRQHandler+0x304>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf14      	ite	ne
 8004100:	2301      	movne	r3, #1
 8004102:	2300      	moveq	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	e003      	b.n	8004110 <HAL_DMA_IRQHandler+0x30c>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2300      	movs	r3, #0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00d      	beq.n	8004130 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	2201      	movs	r2, #1
 800411e:	409a      	lsls	r2, r3
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	f043 0202 	orr.w	r2, r3, #2
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004134:	f003 031f 	and.w	r3, r3, #31
 8004138:	2204      	movs	r2, #4
 800413a:	409a      	lsls	r2, r3
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	4013      	ands	r3, r2
 8004140:	2b00      	cmp	r3, #0
 8004142:	f000 808f 	beq.w	8004264 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a2c      	ldr	r2, [pc, #176]	; (80041fc <HAL_DMA_IRQHandler+0x3f8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d04a      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x3e2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a2a      	ldr	r2, [pc, #168]	; (8004200 <HAL_DMA_IRQHandler+0x3fc>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d045      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x3e2>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a29      	ldr	r2, [pc, #164]	; (8004204 <HAL_DMA_IRQHandler+0x400>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d040      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x3e2>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a27      	ldr	r2, [pc, #156]	; (8004208 <HAL_DMA_IRQHandler+0x404>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d03b      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x3e2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a26      	ldr	r2, [pc, #152]	; (800420c <HAL_DMA_IRQHandler+0x408>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d036      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x3e2>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a24      	ldr	r2, [pc, #144]	; (8004210 <HAL_DMA_IRQHandler+0x40c>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d031      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x3e2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a23      	ldr	r2, [pc, #140]	; (8004214 <HAL_DMA_IRQHandler+0x410>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d02c      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x3e2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a21      	ldr	r2, [pc, #132]	; (8004218 <HAL_DMA_IRQHandler+0x414>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d027      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x3e2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a20      	ldr	r2, [pc, #128]	; (800421c <HAL_DMA_IRQHandler+0x418>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d022      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x3e2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1e      	ldr	r2, [pc, #120]	; (8004220 <HAL_DMA_IRQHandler+0x41c>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01d      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x3e2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <HAL_DMA_IRQHandler+0x420>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d018      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x3e2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a1b      	ldr	r2, [pc, #108]	; (8004228 <HAL_DMA_IRQHandler+0x424>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x3e2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a1a      	ldr	r2, [pc, #104]	; (800422c <HAL_DMA_IRQHandler+0x428>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d00e      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x3e2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a18      	ldr	r2, [pc, #96]	; (8004230 <HAL_DMA_IRQHandler+0x42c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d009      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x3e2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a17      	ldr	r2, [pc, #92]	; (8004234 <HAL_DMA_IRQHandler+0x430>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d004      	beq.n	80041e6 <HAL_DMA_IRQHandler+0x3e2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a15      	ldr	r2, [pc, #84]	; (8004238 <HAL_DMA_IRQHandler+0x434>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d12a      	bne.n	800423c <HAL_DMA_IRQHandler+0x438>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bf14      	ite	ne
 80041f4:	2301      	movne	r3, #1
 80041f6:	2300      	moveq	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	e023      	b.n	8004244 <HAL_DMA_IRQHandler+0x440>
 80041fc:	40020010 	.word	0x40020010
 8004200:	40020028 	.word	0x40020028
 8004204:	40020040 	.word	0x40020040
 8004208:	40020058 	.word	0x40020058
 800420c:	40020070 	.word	0x40020070
 8004210:	40020088 	.word	0x40020088
 8004214:	400200a0 	.word	0x400200a0
 8004218:	400200b8 	.word	0x400200b8
 800421c:	40020410 	.word	0x40020410
 8004220:	40020428 	.word	0x40020428
 8004224:	40020440 	.word	0x40020440
 8004228:	40020458 	.word	0x40020458
 800422c:	40020470 	.word	0x40020470
 8004230:	40020488 	.word	0x40020488
 8004234:	400204a0 	.word	0x400204a0
 8004238:	400204b8 	.word	0x400204b8
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2300      	movs	r3, #0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00d      	beq.n	8004264 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	2204      	movs	r2, #4
 8004252:	409a      	lsls	r2, r3
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425c:	f043 0204 	orr.w	r2, r3, #4
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	2210      	movs	r2, #16
 800426e:	409a      	lsls	r2, r3
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	4013      	ands	r3, r2
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 80a6 	beq.w	80043c6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a85      	ldr	r2, [pc, #532]	; (8004494 <HAL_DMA_IRQHandler+0x690>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d04a      	beq.n	800431a <HAL_DMA_IRQHandler+0x516>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a83      	ldr	r2, [pc, #524]	; (8004498 <HAL_DMA_IRQHandler+0x694>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d045      	beq.n	800431a <HAL_DMA_IRQHandler+0x516>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a82      	ldr	r2, [pc, #520]	; (800449c <HAL_DMA_IRQHandler+0x698>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d040      	beq.n	800431a <HAL_DMA_IRQHandler+0x516>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a80      	ldr	r2, [pc, #512]	; (80044a0 <HAL_DMA_IRQHandler+0x69c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d03b      	beq.n	800431a <HAL_DMA_IRQHandler+0x516>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a7f      	ldr	r2, [pc, #508]	; (80044a4 <HAL_DMA_IRQHandler+0x6a0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d036      	beq.n	800431a <HAL_DMA_IRQHandler+0x516>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a7d      	ldr	r2, [pc, #500]	; (80044a8 <HAL_DMA_IRQHandler+0x6a4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d031      	beq.n	800431a <HAL_DMA_IRQHandler+0x516>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a7c      	ldr	r2, [pc, #496]	; (80044ac <HAL_DMA_IRQHandler+0x6a8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d02c      	beq.n	800431a <HAL_DMA_IRQHandler+0x516>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a7a      	ldr	r2, [pc, #488]	; (80044b0 <HAL_DMA_IRQHandler+0x6ac>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d027      	beq.n	800431a <HAL_DMA_IRQHandler+0x516>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a79      	ldr	r2, [pc, #484]	; (80044b4 <HAL_DMA_IRQHandler+0x6b0>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d022      	beq.n	800431a <HAL_DMA_IRQHandler+0x516>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a77      	ldr	r2, [pc, #476]	; (80044b8 <HAL_DMA_IRQHandler+0x6b4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d01d      	beq.n	800431a <HAL_DMA_IRQHandler+0x516>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a76      	ldr	r2, [pc, #472]	; (80044bc <HAL_DMA_IRQHandler+0x6b8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d018      	beq.n	800431a <HAL_DMA_IRQHandler+0x516>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a74      	ldr	r2, [pc, #464]	; (80044c0 <HAL_DMA_IRQHandler+0x6bc>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d013      	beq.n	800431a <HAL_DMA_IRQHandler+0x516>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a73      	ldr	r2, [pc, #460]	; (80044c4 <HAL_DMA_IRQHandler+0x6c0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d00e      	beq.n	800431a <HAL_DMA_IRQHandler+0x516>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a71      	ldr	r2, [pc, #452]	; (80044c8 <HAL_DMA_IRQHandler+0x6c4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d009      	beq.n	800431a <HAL_DMA_IRQHandler+0x516>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a70      	ldr	r2, [pc, #448]	; (80044cc <HAL_DMA_IRQHandler+0x6c8>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d004      	beq.n	800431a <HAL_DMA_IRQHandler+0x516>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a6e      	ldr	r2, [pc, #440]	; (80044d0 <HAL_DMA_IRQHandler+0x6cc>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d10a      	bne.n	8004330 <HAL_DMA_IRQHandler+0x52c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	bf14      	ite	ne
 8004328:	2301      	movne	r3, #1
 800432a:	2300      	moveq	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	e009      	b.n	8004344 <HAL_DMA_IRQHandler+0x540>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	bf14      	ite	ne
 800433e:	2301      	movne	r3, #1
 8004340:	2300      	moveq	r3, #0
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d03e      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434c:	f003 031f 	and.w	r3, r3, #31
 8004350:	2210      	movs	r2, #16
 8004352:	409a      	lsls	r2, r3
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d018      	beq.n	8004398 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d108      	bne.n	8004386 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	2b00      	cmp	r3, #0
 800437a:	d024      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	4798      	blx	r3
 8004384:	e01f      	b.n	80043c6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800438a:	2b00      	cmp	r3, #0
 800438c:	d01b      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	4798      	blx	r3
 8004396:	e016      	b.n	80043c6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d107      	bne.n	80043b6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 0208 	bic.w	r2, r2, #8
 80043b4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	2220      	movs	r2, #32
 80043d0:	409a      	lsls	r2, r3
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 8110 	beq.w	80045fc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a2c      	ldr	r2, [pc, #176]	; (8004494 <HAL_DMA_IRQHandler+0x690>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d04a      	beq.n	800447c <HAL_DMA_IRQHandler+0x678>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a2b      	ldr	r2, [pc, #172]	; (8004498 <HAL_DMA_IRQHandler+0x694>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d045      	beq.n	800447c <HAL_DMA_IRQHandler+0x678>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a29      	ldr	r2, [pc, #164]	; (800449c <HAL_DMA_IRQHandler+0x698>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d040      	beq.n	800447c <HAL_DMA_IRQHandler+0x678>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a28      	ldr	r2, [pc, #160]	; (80044a0 <HAL_DMA_IRQHandler+0x69c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d03b      	beq.n	800447c <HAL_DMA_IRQHandler+0x678>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a26      	ldr	r2, [pc, #152]	; (80044a4 <HAL_DMA_IRQHandler+0x6a0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d036      	beq.n	800447c <HAL_DMA_IRQHandler+0x678>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a25      	ldr	r2, [pc, #148]	; (80044a8 <HAL_DMA_IRQHandler+0x6a4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d031      	beq.n	800447c <HAL_DMA_IRQHandler+0x678>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a23      	ldr	r2, [pc, #140]	; (80044ac <HAL_DMA_IRQHandler+0x6a8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d02c      	beq.n	800447c <HAL_DMA_IRQHandler+0x678>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a22      	ldr	r2, [pc, #136]	; (80044b0 <HAL_DMA_IRQHandler+0x6ac>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d027      	beq.n	800447c <HAL_DMA_IRQHandler+0x678>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a20      	ldr	r2, [pc, #128]	; (80044b4 <HAL_DMA_IRQHandler+0x6b0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d022      	beq.n	800447c <HAL_DMA_IRQHandler+0x678>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a1f      	ldr	r2, [pc, #124]	; (80044b8 <HAL_DMA_IRQHandler+0x6b4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d01d      	beq.n	800447c <HAL_DMA_IRQHandler+0x678>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1d      	ldr	r2, [pc, #116]	; (80044bc <HAL_DMA_IRQHandler+0x6b8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d018      	beq.n	800447c <HAL_DMA_IRQHandler+0x678>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1c      	ldr	r2, [pc, #112]	; (80044c0 <HAL_DMA_IRQHandler+0x6bc>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <HAL_DMA_IRQHandler+0x678>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1a      	ldr	r2, [pc, #104]	; (80044c4 <HAL_DMA_IRQHandler+0x6c0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00e      	beq.n	800447c <HAL_DMA_IRQHandler+0x678>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a19      	ldr	r2, [pc, #100]	; (80044c8 <HAL_DMA_IRQHandler+0x6c4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_DMA_IRQHandler+0x678>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a17      	ldr	r2, [pc, #92]	; (80044cc <HAL_DMA_IRQHandler+0x6c8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_DMA_IRQHandler+0x678>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a16      	ldr	r2, [pc, #88]	; (80044d0 <HAL_DMA_IRQHandler+0x6cc>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d12b      	bne.n	80044d4 <HAL_DMA_IRQHandler+0x6d0>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b00      	cmp	r3, #0
 8004488:	bf14      	ite	ne
 800448a:	2301      	movne	r3, #1
 800448c:	2300      	moveq	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	e02a      	b.n	80044e8 <HAL_DMA_IRQHandler+0x6e4>
 8004492:	bf00      	nop
 8004494:	40020010 	.word	0x40020010
 8004498:	40020028 	.word	0x40020028
 800449c:	40020040 	.word	0x40020040
 80044a0:	40020058 	.word	0x40020058
 80044a4:	40020070 	.word	0x40020070
 80044a8:	40020088 	.word	0x40020088
 80044ac:	400200a0 	.word	0x400200a0
 80044b0:	400200b8 	.word	0x400200b8
 80044b4:	40020410 	.word	0x40020410
 80044b8:	40020428 	.word	0x40020428
 80044bc:	40020440 	.word	0x40020440
 80044c0:	40020458 	.word	0x40020458
 80044c4:	40020470 	.word	0x40020470
 80044c8:	40020488 	.word	0x40020488
 80044cc:	400204a0 	.word	0x400204a0
 80044d0:	400204b8 	.word	0x400204b8
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	bf14      	ite	ne
 80044e2:	2301      	movne	r3, #1
 80044e4:	2300      	moveq	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 8087 	beq.w	80045fc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	2220      	movs	r2, #32
 80044f8:	409a      	lsls	r2, r3
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b04      	cmp	r3, #4
 8004508:	d139      	bne.n	800457e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0216 	bic.w	r2, r2, #22
 8004518:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	695a      	ldr	r2, [r3, #20]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004528:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	2b00      	cmp	r3, #0
 8004530:	d103      	bne.n	800453a <HAL_DMA_IRQHandler+0x736>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0208 	bic.w	r2, r2, #8
 8004548:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	223f      	movs	r2, #63	; 0x3f
 8004554:	409a      	lsls	r2, r3
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 834a 	beq.w	8004c08 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	4798      	blx	r3
          }
          return;
 800457c:	e344      	b.n	8004c08 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d018      	beq.n	80045be <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d108      	bne.n	80045ac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d02c      	beq.n	80045fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	4798      	blx	r3
 80045aa:	e027      	b.n	80045fc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d023      	beq.n	80045fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	4798      	blx	r3
 80045bc:	e01e      	b.n	80045fc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10f      	bne.n	80045ec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0210 	bic.w	r2, r2, #16
 80045da:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 8306 	beq.w	8004c12 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 8088 	beq.w	8004724 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2204      	movs	r2, #4
 8004618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a7a      	ldr	r2, [pc, #488]	; (800480c <HAL_DMA_IRQHandler+0xa08>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d04a      	beq.n	80046bc <HAL_DMA_IRQHandler+0x8b8>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a79      	ldr	r2, [pc, #484]	; (8004810 <HAL_DMA_IRQHandler+0xa0c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d045      	beq.n	80046bc <HAL_DMA_IRQHandler+0x8b8>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a77      	ldr	r2, [pc, #476]	; (8004814 <HAL_DMA_IRQHandler+0xa10>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d040      	beq.n	80046bc <HAL_DMA_IRQHandler+0x8b8>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a76      	ldr	r2, [pc, #472]	; (8004818 <HAL_DMA_IRQHandler+0xa14>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d03b      	beq.n	80046bc <HAL_DMA_IRQHandler+0x8b8>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a74      	ldr	r2, [pc, #464]	; (800481c <HAL_DMA_IRQHandler+0xa18>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d036      	beq.n	80046bc <HAL_DMA_IRQHandler+0x8b8>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a73      	ldr	r2, [pc, #460]	; (8004820 <HAL_DMA_IRQHandler+0xa1c>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d031      	beq.n	80046bc <HAL_DMA_IRQHandler+0x8b8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a71      	ldr	r2, [pc, #452]	; (8004824 <HAL_DMA_IRQHandler+0xa20>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d02c      	beq.n	80046bc <HAL_DMA_IRQHandler+0x8b8>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a70      	ldr	r2, [pc, #448]	; (8004828 <HAL_DMA_IRQHandler+0xa24>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d027      	beq.n	80046bc <HAL_DMA_IRQHandler+0x8b8>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a6e      	ldr	r2, [pc, #440]	; (800482c <HAL_DMA_IRQHandler+0xa28>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d022      	beq.n	80046bc <HAL_DMA_IRQHandler+0x8b8>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a6d      	ldr	r2, [pc, #436]	; (8004830 <HAL_DMA_IRQHandler+0xa2c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d01d      	beq.n	80046bc <HAL_DMA_IRQHandler+0x8b8>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a6b      	ldr	r2, [pc, #428]	; (8004834 <HAL_DMA_IRQHandler+0xa30>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d018      	beq.n	80046bc <HAL_DMA_IRQHandler+0x8b8>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a6a      	ldr	r2, [pc, #424]	; (8004838 <HAL_DMA_IRQHandler+0xa34>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d013      	beq.n	80046bc <HAL_DMA_IRQHandler+0x8b8>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a68      	ldr	r2, [pc, #416]	; (800483c <HAL_DMA_IRQHandler+0xa38>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00e      	beq.n	80046bc <HAL_DMA_IRQHandler+0x8b8>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a67      	ldr	r2, [pc, #412]	; (8004840 <HAL_DMA_IRQHandler+0xa3c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d009      	beq.n	80046bc <HAL_DMA_IRQHandler+0x8b8>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a65      	ldr	r2, [pc, #404]	; (8004844 <HAL_DMA_IRQHandler+0xa40>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d004      	beq.n	80046bc <HAL_DMA_IRQHandler+0x8b8>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a64      	ldr	r2, [pc, #400]	; (8004848 <HAL_DMA_IRQHandler+0xa44>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d108      	bne.n	80046ce <HAL_DMA_IRQHandler+0x8ca>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0201 	bic.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	e007      	b.n	80046de <HAL_DMA_IRQHandler+0x8da>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0201 	bic.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	3301      	adds	r3, #1
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d307      	bcc.n	80046fa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f2      	bne.n	80046de <HAL_DMA_IRQHandler+0x8da>
 80046f8:	e000      	b.n	80046fc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80046fa:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d004      	beq.n	800471c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2203      	movs	r2, #3
 8004716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800471a:	e003      	b.n	8004724 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8272 	beq.w	8004c12 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
 8004736:	e26c      	b.n	8004c12 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a43      	ldr	r2, [pc, #268]	; (800484c <HAL_DMA_IRQHandler+0xa48>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d022      	beq.n	8004788 <HAL_DMA_IRQHandler+0x984>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a42      	ldr	r2, [pc, #264]	; (8004850 <HAL_DMA_IRQHandler+0xa4c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d01d      	beq.n	8004788 <HAL_DMA_IRQHandler+0x984>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a40      	ldr	r2, [pc, #256]	; (8004854 <HAL_DMA_IRQHandler+0xa50>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d018      	beq.n	8004788 <HAL_DMA_IRQHandler+0x984>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a3f      	ldr	r2, [pc, #252]	; (8004858 <HAL_DMA_IRQHandler+0xa54>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d013      	beq.n	8004788 <HAL_DMA_IRQHandler+0x984>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a3d      	ldr	r2, [pc, #244]	; (800485c <HAL_DMA_IRQHandler+0xa58>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00e      	beq.n	8004788 <HAL_DMA_IRQHandler+0x984>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a3c      	ldr	r2, [pc, #240]	; (8004860 <HAL_DMA_IRQHandler+0xa5c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d009      	beq.n	8004788 <HAL_DMA_IRQHandler+0x984>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a3a      	ldr	r2, [pc, #232]	; (8004864 <HAL_DMA_IRQHandler+0xa60>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <HAL_DMA_IRQHandler+0x984>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a39      	ldr	r2, [pc, #228]	; (8004868 <HAL_DMA_IRQHandler+0xa64>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d101      	bne.n	800478c <HAL_DMA_IRQHandler+0x988>
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <HAL_DMA_IRQHandler+0x98a>
 800478c:	2300      	movs	r3, #0
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 823f 	beq.w	8004c12 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	2204      	movs	r2, #4
 80047a6:	409a      	lsls	r2, r3
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 80cd 	beq.w	800494c <HAL_DMA_IRQHandler+0xb48>
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80c7 	beq.w	800494c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c2:	f003 031f 	and.w	r3, r3, #31
 80047c6:	2204      	movs	r2, #4
 80047c8:	409a      	lsls	r2, r3
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d049      	beq.n	800486c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 8210 	beq.w	8004c0c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047f4:	e20a      	b.n	8004c0c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 8206 	beq.w	8004c0c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004808:	e200      	b.n	8004c0c <HAL_DMA_IRQHandler+0xe08>
 800480a:	bf00      	nop
 800480c:	40020010 	.word	0x40020010
 8004810:	40020028 	.word	0x40020028
 8004814:	40020040 	.word	0x40020040
 8004818:	40020058 	.word	0x40020058
 800481c:	40020070 	.word	0x40020070
 8004820:	40020088 	.word	0x40020088
 8004824:	400200a0 	.word	0x400200a0
 8004828:	400200b8 	.word	0x400200b8
 800482c:	40020410 	.word	0x40020410
 8004830:	40020428 	.word	0x40020428
 8004834:	40020440 	.word	0x40020440
 8004838:	40020458 	.word	0x40020458
 800483c:	40020470 	.word	0x40020470
 8004840:	40020488 	.word	0x40020488
 8004844:	400204a0 	.word	0x400204a0
 8004848:	400204b8 	.word	0x400204b8
 800484c:	58025408 	.word	0x58025408
 8004850:	5802541c 	.word	0x5802541c
 8004854:	58025430 	.word	0x58025430
 8004858:	58025444 	.word	0x58025444
 800485c:	58025458 	.word	0x58025458
 8004860:	5802546c 	.word	0x5802546c
 8004864:	58025480 	.word	0x58025480
 8004868:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d160      	bne.n	8004938 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a8c      	ldr	r2, [pc, #560]	; (8004aac <HAL_DMA_IRQHandler+0xca8>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d04a      	beq.n	8004916 <HAL_DMA_IRQHandler+0xb12>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a8a      	ldr	r2, [pc, #552]	; (8004ab0 <HAL_DMA_IRQHandler+0xcac>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d045      	beq.n	8004916 <HAL_DMA_IRQHandler+0xb12>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a89      	ldr	r2, [pc, #548]	; (8004ab4 <HAL_DMA_IRQHandler+0xcb0>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d040      	beq.n	8004916 <HAL_DMA_IRQHandler+0xb12>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a87      	ldr	r2, [pc, #540]	; (8004ab8 <HAL_DMA_IRQHandler+0xcb4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d03b      	beq.n	8004916 <HAL_DMA_IRQHandler+0xb12>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a86      	ldr	r2, [pc, #536]	; (8004abc <HAL_DMA_IRQHandler+0xcb8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d036      	beq.n	8004916 <HAL_DMA_IRQHandler+0xb12>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a84      	ldr	r2, [pc, #528]	; (8004ac0 <HAL_DMA_IRQHandler+0xcbc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d031      	beq.n	8004916 <HAL_DMA_IRQHandler+0xb12>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a83      	ldr	r2, [pc, #524]	; (8004ac4 <HAL_DMA_IRQHandler+0xcc0>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d02c      	beq.n	8004916 <HAL_DMA_IRQHandler+0xb12>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a81      	ldr	r2, [pc, #516]	; (8004ac8 <HAL_DMA_IRQHandler+0xcc4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d027      	beq.n	8004916 <HAL_DMA_IRQHandler+0xb12>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a80      	ldr	r2, [pc, #512]	; (8004acc <HAL_DMA_IRQHandler+0xcc8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d022      	beq.n	8004916 <HAL_DMA_IRQHandler+0xb12>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a7e      	ldr	r2, [pc, #504]	; (8004ad0 <HAL_DMA_IRQHandler+0xccc>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d01d      	beq.n	8004916 <HAL_DMA_IRQHandler+0xb12>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a7d      	ldr	r2, [pc, #500]	; (8004ad4 <HAL_DMA_IRQHandler+0xcd0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d018      	beq.n	8004916 <HAL_DMA_IRQHandler+0xb12>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a7b      	ldr	r2, [pc, #492]	; (8004ad8 <HAL_DMA_IRQHandler+0xcd4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d013      	beq.n	8004916 <HAL_DMA_IRQHandler+0xb12>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a7a      	ldr	r2, [pc, #488]	; (8004adc <HAL_DMA_IRQHandler+0xcd8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00e      	beq.n	8004916 <HAL_DMA_IRQHandler+0xb12>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a78      	ldr	r2, [pc, #480]	; (8004ae0 <HAL_DMA_IRQHandler+0xcdc>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d009      	beq.n	8004916 <HAL_DMA_IRQHandler+0xb12>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a77      	ldr	r2, [pc, #476]	; (8004ae4 <HAL_DMA_IRQHandler+0xce0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <HAL_DMA_IRQHandler+0xb12>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a75      	ldr	r2, [pc, #468]	; (8004ae8 <HAL_DMA_IRQHandler+0xce4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d108      	bne.n	8004928 <HAL_DMA_IRQHandler+0xb24>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0208 	bic.w	r2, r2, #8
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	e007      	b.n	8004938 <HAL_DMA_IRQHandler+0xb34>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0204 	bic.w	r2, r2, #4
 8004936:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8165 	beq.w	8004c0c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800494a:	e15f      	b.n	8004c0c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	2202      	movs	r2, #2
 8004956:	409a      	lsls	r2, r3
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80c5 	beq.w	8004aec <HAL_DMA_IRQHandler+0xce8>
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 80bf 	beq.w	8004aec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004972:	f003 031f 	and.w	r3, r3, #31
 8004976:	2202      	movs	r2, #2
 8004978:	409a      	lsls	r2, r3
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d018      	beq.n	80049ba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d109      	bne.n	80049a6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 813a 	beq.w	8004c10 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049a4:	e134      	b.n	8004c10 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 8130 	beq.w	8004c10 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80049b8:	e12a      	b.n	8004c10 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d168      	bne.n	8004a96 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a38      	ldr	r2, [pc, #224]	; (8004aac <HAL_DMA_IRQHandler+0xca8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d04a      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xc60>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a37      	ldr	r2, [pc, #220]	; (8004ab0 <HAL_DMA_IRQHandler+0xcac>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d045      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xc60>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a35      	ldr	r2, [pc, #212]	; (8004ab4 <HAL_DMA_IRQHandler+0xcb0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d040      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xc60>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a34      	ldr	r2, [pc, #208]	; (8004ab8 <HAL_DMA_IRQHandler+0xcb4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d03b      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xc60>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a32      	ldr	r2, [pc, #200]	; (8004abc <HAL_DMA_IRQHandler+0xcb8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d036      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xc60>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a31      	ldr	r2, [pc, #196]	; (8004ac0 <HAL_DMA_IRQHandler+0xcbc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d031      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xc60>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a2f      	ldr	r2, [pc, #188]	; (8004ac4 <HAL_DMA_IRQHandler+0xcc0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d02c      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xc60>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a2e      	ldr	r2, [pc, #184]	; (8004ac8 <HAL_DMA_IRQHandler+0xcc4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d027      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xc60>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a2c      	ldr	r2, [pc, #176]	; (8004acc <HAL_DMA_IRQHandler+0xcc8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d022      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xc60>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a2b      	ldr	r2, [pc, #172]	; (8004ad0 <HAL_DMA_IRQHandler+0xccc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d01d      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xc60>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a29      	ldr	r2, [pc, #164]	; (8004ad4 <HAL_DMA_IRQHandler+0xcd0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d018      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xc60>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a28      	ldr	r2, [pc, #160]	; (8004ad8 <HAL_DMA_IRQHandler+0xcd4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d013      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xc60>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a26      	ldr	r2, [pc, #152]	; (8004adc <HAL_DMA_IRQHandler+0xcd8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d00e      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xc60>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a25      	ldr	r2, [pc, #148]	; (8004ae0 <HAL_DMA_IRQHandler+0xcdc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d009      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xc60>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a23      	ldr	r2, [pc, #140]	; (8004ae4 <HAL_DMA_IRQHandler+0xce0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d004      	beq.n	8004a64 <HAL_DMA_IRQHandler+0xc60>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a22      	ldr	r2, [pc, #136]	; (8004ae8 <HAL_DMA_IRQHandler+0xce4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d108      	bne.n	8004a76 <HAL_DMA_IRQHandler+0xc72>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0214 	bic.w	r2, r2, #20
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	e007      	b.n	8004a86 <HAL_DMA_IRQHandler+0xc82>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 020a 	bic.w	r2, r2, #10
 8004a84:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 80b8 	beq.w	8004c10 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004aa8:	e0b2      	b.n	8004c10 <HAL_DMA_IRQHandler+0xe0c>
 8004aaa:	bf00      	nop
 8004aac:	40020010 	.word	0x40020010
 8004ab0:	40020028 	.word	0x40020028
 8004ab4:	40020040 	.word	0x40020040
 8004ab8:	40020058 	.word	0x40020058
 8004abc:	40020070 	.word	0x40020070
 8004ac0:	40020088 	.word	0x40020088
 8004ac4:	400200a0 	.word	0x400200a0
 8004ac8:	400200b8 	.word	0x400200b8
 8004acc:	40020410 	.word	0x40020410
 8004ad0:	40020428 	.word	0x40020428
 8004ad4:	40020440 	.word	0x40020440
 8004ad8:	40020458 	.word	0x40020458
 8004adc:	40020470 	.word	0x40020470
 8004ae0:	40020488 	.word	0x40020488
 8004ae4:	400204a0 	.word	0x400204a0
 8004ae8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af0:	f003 031f 	and.w	r3, r3, #31
 8004af4:	2208      	movs	r2, #8
 8004af6:	409a      	lsls	r2, r3
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8088 	beq.w	8004c12 <HAL_DMA_IRQHandler+0xe0e>
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 8082 	beq.w	8004c12 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a41      	ldr	r2, [pc, #260]	; (8004c18 <HAL_DMA_IRQHandler+0xe14>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d04a      	beq.n	8004bae <HAL_DMA_IRQHandler+0xdaa>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a3f      	ldr	r2, [pc, #252]	; (8004c1c <HAL_DMA_IRQHandler+0xe18>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d045      	beq.n	8004bae <HAL_DMA_IRQHandler+0xdaa>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a3e      	ldr	r2, [pc, #248]	; (8004c20 <HAL_DMA_IRQHandler+0xe1c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d040      	beq.n	8004bae <HAL_DMA_IRQHandler+0xdaa>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a3c      	ldr	r2, [pc, #240]	; (8004c24 <HAL_DMA_IRQHandler+0xe20>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d03b      	beq.n	8004bae <HAL_DMA_IRQHandler+0xdaa>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a3b      	ldr	r2, [pc, #236]	; (8004c28 <HAL_DMA_IRQHandler+0xe24>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d036      	beq.n	8004bae <HAL_DMA_IRQHandler+0xdaa>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a39      	ldr	r2, [pc, #228]	; (8004c2c <HAL_DMA_IRQHandler+0xe28>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d031      	beq.n	8004bae <HAL_DMA_IRQHandler+0xdaa>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a38      	ldr	r2, [pc, #224]	; (8004c30 <HAL_DMA_IRQHandler+0xe2c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d02c      	beq.n	8004bae <HAL_DMA_IRQHandler+0xdaa>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a36      	ldr	r2, [pc, #216]	; (8004c34 <HAL_DMA_IRQHandler+0xe30>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d027      	beq.n	8004bae <HAL_DMA_IRQHandler+0xdaa>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a35      	ldr	r2, [pc, #212]	; (8004c38 <HAL_DMA_IRQHandler+0xe34>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d022      	beq.n	8004bae <HAL_DMA_IRQHandler+0xdaa>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a33      	ldr	r2, [pc, #204]	; (8004c3c <HAL_DMA_IRQHandler+0xe38>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d01d      	beq.n	8004bae <HAL_DMA_IRQHandler+0xdaa>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a32      	ldr	r2, [pc, #200]	; (8004c40 <HAL_DMA_IRQHandler+0xe3c>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d018      	beq.n	8004bae <HAL_DMA_IRQHandler+0xdaa>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a30      	ldr	r2, [pc, #192]	; (8004c44 <HAL_DMA_IRQHandler+0xe40>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <HAL_DMA_IRQHandler+0xdaa>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a2f      	ldr	r2, [pc, #188]	; (8004c48 <HAL_DMA_IRQHandler+0xe44>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00e      	beq.n	8004bae <HAL_DMA_IRQHandler+0xdaa>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a2d      	ldr	r2, [pc, #180]	; (8004c4c <HAL_DMA_IRQHandler+0xe48>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d009      	beq.n	8004bae <HAL_DMA_IRQHandler+0xdaa>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a2c      	ldr	r2, [pc, #176]	; (8004c50 <HAL_DMA_IRQHandler+0xe4c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d004      	beq.n	8004bae <HAL_DMA_IRQHandler+0xdaa>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a2a      	ldr	r2, [pc, #168]	; (8004c54 <HAL_DMA_IRQHandler+0xe50>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d108      	bne.n	8004bc0 <HAL_DMA_IRQHandler+0xdbc>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 021c 	bic.w	r2, r2, #28
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	e007      	b.n	8004bd0 <HAL_DMA_IRQHandler+0xdcc>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 020e 	bic.w	r2, r2, #14
 8004bce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd4:	f003 031f 	and.w	r3, r3, #31
 8004bd8:	2201      	movs	r2, #1
 8004bda:	409a      	lsls	r2, r3
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	4798      	blx	r3
 8004c06:	e004      	b.n	8004c12 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004c08:	bf00      	nop
 8004c0a:	e002      	b.n	8004c12 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c0c:	bf00      	nop
 8004c0e:	e000      	b.n	8004c12 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c10:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c12:	3728      	adds	r7, #40	; 0x28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40020010 	.word	0x40020010
 8004c1c:	40020028 	.word	0x40020028
 8004c20:	40020040 	.word	0x40020040
 8004c24:	40020058 	.word	0x40020058
 8004c28:	40020070 	.word	0x40020070
 8004c2c:	40020088 	.word	0x40020088
 8004c30:	400200a0 	.word	0x400200a0
 8004c34:	400200b8 	.word	0x400200b8
 8004c38:	40020410 	.word	0x40020410
 8004c3c:	40020428 	.word	0x40020428
 8004c40:	40020440 	.word	0x40020440
 8004c44:	40020458 	.word	0x40020458
 8004c48:	40020470 	.word	0x40020470
 8004c4c:	40020488 	.word	0x40020488
 8004c50:	400204a0 	.word	0x400204a0
 8004c54:	400204b8 	.word	0x400204b8

08004c58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a42      	ldr	r2, [pc, #264]	; (8004d70 <DMA_CalcBaseAndBitshift+0x118>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d04a      	beq.n	8004d00 <DMA_CalcBaseAndBitshift+0xa8>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a41      	ldr	r2, [pc, #260]	; (8004d74 <DMA_CalcBaseAndBitshift+0x11c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d045      	beq.n	8004d00 <DMA_CalcBaseAndBitshift+0xa8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a3f      	ldr	r2, [pc, #252]	; (8004d78 <DMA_CalcBaseAndBitshift+0x120>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d040      	beq.n	8004d00 <DMA_CalcBaseAndBitshift+0xa8>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a3e      	ldr	r2, [pc, #248]	; (8004d7c <DMA_CalcBaseAndBitshift+0x124>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d03b      	beq.n	8004d00 <DMA_CalcBaseAndBitshift+0xa8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a3c      	ldr	r2, [pc, #240]	; (8004d80 <DMA_CalcBaseAndBitshift+0x128>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d036      	beq.n	8004d00 <DMA_CalcBaseAndBitshift+0xa8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a3b      	ldr	r2, [pc, #236]	; (8004d84 <DMA_CalcBaseAndBitshift+0x12c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d031      	beq.n	8004d00 <DMA_CalcBaseAndBitshift+0xa8>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a39      	ldr	r2, [pc, #228]	; (8004d88 <DMA_CalcBaseAndBitshift+0x130>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d02c      	beq.n	8004d00 <DMA_CalcBaseAndBitshift+0xa8>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a38      	ldr	r2, [pc, #224]	; (8004d8c <DMA_CalcBaseAndBitshift+0x134>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d027      	beq.n	8004d00 <DMA_CalcBaseAndBitshift+0xa8>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a36      	ldr	r2, [pc, #216]	; (8004d90 <DMA_CalcBaseAndBitshift+0x138>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d022      	beq.n	8004d00 <DMA_CalcBaseAndBitshift+0xa8>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a35      	ldr	r2, [pc, #212]	; (8004d94 <DMA_CalcBaseAndBitshift+0x13c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d01d      	beq.n	8004d00 <DMA_CalcBaseAndBitshift+0xa8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a33      	ldr	r2, [pc, #204]	; (8004d98 <DMA_CalcBaseAndBitshift+0x140>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d018      	beq.n	8004d00 <DMA_CalcBaseAndBitshift+0xa8>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a32      	ldr	r2, [pc, #200]	; (8004d9c <DMA_CalcBaseAndBitshift+0x144>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d013      	beq.n	8004d00 <DMA_CalcBaseAndBitshift+0xa8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a30      	ldr	r2, [pc, #192]	; (8004da0 <DMA_CalcBaseAndBitshift+0x148>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00e      	beq.n	8004d00 <DMA_CalcBaseAndBitshift+0xa8>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a2f      	ldr	r2, [pc, #188]	; (8004da4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d009      	beq.n	8004d00 <DMA_CalcBaseAndBitshift+0xa8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a2d      	ldr	r2, [pc, #180]	; (8004da8 <DMA_CalcBaseAndBitshift+0x150>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d004      	beq.n	8004d00 <DMA_CalcBaseAndBitshift+0xa8>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a2c      	ldr	r2, [pc, #176]	; (8004dac <DMA_CalcBaseAndBitshift+0x154>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d101      	bne.n	8004d04 <DMA_CalcBaseAndBitshift+0xac>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e000      	b.n	8004d06 <DMA_CalcBaseAndBitshift+0xae>
 8004d04:	2300      	movs	r3, #0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d024      	beq.n	8004d54 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	3b10      	subs	r3, #16
 8004d12:	4a27      	ldr	r2, [pc, #156]	; (8004db0 <DMA_CalcBaseAndBitshift+0x158>)
 8004d14:	fba2 2303 	umull	r2, r3, r2, r3
 8004d18:	091b      	lsrs	r3, r3, #4
 8004d1a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	4a24      	ldr	r2, [pc, #144]	; (8004db4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d24:	5cd3      	ldrb	r3, [r2, r3]
 8004d26:	461a      	mov	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d908      	bls.n	8004d44 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	4b1f      	ldr	r3, [pc, #124]	; (8004db8 <DMA_CalcBaseAndBitshift+0x160>)
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	1d1a      	adds	r2, r3, #4
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	659a      	str	r2, [r3, #88]	; 0x58
 8004d42:	e00d      	b.n	8004d60 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <DMA_CalcBaseAndBitshift+0x160>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6593      	str	r3, [r2, #88]	; 0x58
 8004d52:	e005      	b.n	8004d60 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	40020010 	.word	0x40020010
 8004d74:	40020028 	.word	0x40020028
 8004d78:	40020040 	.word	0x40020040
 8004d7c:	40020058 	.word	0x40020058
 8004d80:	40020070 	.word	0x40020070
 8004d84:	40020088 	.word	0x40020088
 8004d88:	400200a0 	.word	0x400200a0
 8004d8c:	400200b8 	.word	0x400200b8
 8004d90:	40020410 	.word	0x40020410
 8004d94:	40020428 	.word	0x40020428
 8004d98:	40020440 	.word	0x40020440
 8004d9c:	40020458 	.word	0x40020458
 8004da0:	40020470 	.word	0x40020470
 8004da4:	40020488 	.word	0x40020488
 8004da8:	400204a0 	.word	0x400204a0
 8004dac:	400204b8 	.word	0x400204b8
 8004db0:	aaaaaaab 	.word	0xaaaaaaab
 8004db4:	0800b2d8 	.word	0x0800b2d8
 8004db8:	fffffc00 	.word	0xfffffc00

08004dbc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d120      	bne.n	8004e12 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d858      	bhi.n	8004e8a <DMA_CheckFifoParam+0xce>
 8004dd8:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <DMA_CheckFifoParam+0x24>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004df1 	.word	0x08004df1
 8004de4:	08004e03 	.word	0x08004e03
 8004de8:	08004df1 	.word	0x08004df1
 8004dec:	08004e8b 	.word	0x08004e8b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d048      	beq.n	8004e8e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e00:	e045      	b.n	8004e8e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e0a:	d142      	bne.n	8004e92 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e10:	e03f      	b.n	8004e92 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1a:	d123      	bne.n	8004e64 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d838      	bhi.n	8004e96 <DMA_CheckFifoParam+0xda>
 8004e24:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <DMA_CheckFifoParam+0x70>)
 8004e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2a:	bf00      	nop
 8004e2c:	08004e3d 	.word	0x08004e3d
 8004e30:	08004e43 	.word	0x08004e43
 8004e34:	08004e3d 	.word	0x08004e3d
 8004e38:	08004e55 	.word	0x08004e55
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	73fb      	strb	r3, [r7, #15]
        break;
 8004e40:	e030      	b.n	8004ea4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d025      	beq.n	8004e9a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e52:	e022      	b.n	8004e9a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e5c:	d11f      	bne.n	8004e9e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e62:	e01c      	b.n	8004e9e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d902      	bls.n	8004e72 <DMA_CheckFifoParam+0xb6>
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d003      	beq.n	8004e78 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e70:	e018      	b.n	8004ea4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	73fb      	strb	r3, [r7, #15]
        break;
 8004e76:	e015      	b.n	8004ea4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00e      	beq.n	8004ea2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	73fb      	strb	r3, [r7, #15]
    break;
 8004e88:	e00b      	b.n	8004ea2 <DMA_CheckFifoParam+0xe6>
        break;
 8004e8a:	bf00      	nop
 8004e8c:	e00a      	b.n	8004ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8004e8e:	bf00      	nop
 8004e90:	e008      	b.n	8004ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8004e92:	bf00      	nop
 8004e94:	e006      	b.n	8004ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8004e96:	bf00      	nop
 8004e98:	e004      	b.n	8004ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8004e9a:	bf00      	nop
 8004e9c:	e002      	b.n	8004ea4 <DMA_CheckFifoParam+0xe8>
        break;
 8004e9e:	bf00      	nop
 8004ea0:	e000      	b.n	8004ea4 <DMA_CheckFifoParam+0xe8>
    break;
 8004ea2:	bf00      	nop
    }
  }

  return status;
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop

08004eb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a38      	ldr	r2, [pc, #224]	; (8004fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d022      	beq.n	8004f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a36      	ldr	r2, [pc, #216]	; (8004fac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01d      	beq.n	8004f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a35      	ldr	r2, [pc, #212]	; (8004fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d018      	beq.n	8004f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a33      	ldr	r2, [pc, #204]	; (8004fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d013      	beq.n	8004f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a32      	ldr	r2, [pc, #200]	; (8004fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00e      	beq.n	8004f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a30      	ldr	r2, [pc, #192]	; (8004fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d009      	beq.n	8004f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a2f      	ldr	r2, [pc, #188]	; (8004fc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a2d      	ldr	r2, [pc, #180]	; (8004fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d101      	bne.n	8004f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f16:	2300      	movs	r3, #0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01a      	beq.n	8004f52 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	3b08      	subs	r3, #8
 8004f24:	4a28      	ldr	r2, [pc, #160]	; (8004fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4b26      	ldr	r3, [pc, #152]	; (8004fcc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	461a      	mov	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a24      	ldr	r2, [pc, #144]	; (8004fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f40:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f003 031f 	and.w	r3, r3, #31
 8004f48:	2201      	movs	r2, #1
 8004f4a:	409a      	lsls	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f50:	e024      	b.n	8004f9c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	3b10      	subs	r3, #16
 8004f5a:	4a1e      	ldr	r2, [pc, #120]	; (8004fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f60:	091b      	lsrs	r3, r3, #4
 8004f62:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4a1c      	ldr	r2, [pc, #112]	; (8004fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d806      	bhi.n	8004f7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4a1b      	ldr	r2, [pc, #108]	; (8004fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d902      	bls.n	8004f7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3308      	adds	r3, #8
 8004f78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4b18      	ldr	r3, [pc, #96]	; (8004fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	461a      	mov	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a16      	ldr	r2, [pc, #88]	; (8004fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004f8c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	2201      	movs	r2, #1
 8004f96:	409a      	lsls	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004f9c:	bf00      	nop
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	58025408 	.word	0x58025408
 8004fac:	5802541c 	.word	0x5802541c
 8004fb0:	58025430 	.word	0x58025430
 8004fb4:	58025444 	.word	0x58025444
 8004fb8:	58025458 	.word	0x58025458
 8004fbc:	5802546c 	.word	0x5802546c
 8004fc0:	58025480 	.word	0x58025480
 8004fc4:	58025494 	.word	0x58025494
 8004fc8:	cccccccd 	.word	0xcccccccd
 8004fcc:	16009600 	.word	0x16009600
 8004fd0:	58025880 	.word	0x58025880
 8004fd4:	aaaaaaab 	.word	0xaaaaaaab
 8004fd8:	400204b8 	.word	0x400204b8
 8004fdc:	4002040f 	.word	0x4002040f
 8004fe0:	10008200 	.word	0x10008200
 8004fe4:	40020880 	.word	0x40020880

08004fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d04a      	beq.n	8005094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2b08      	cmp	r3, #8
 8005002:	d847      	bhi.n	8005094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a25      	ldr	r2, [pc, #148]	; (80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d022      	beq.n	8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a24      	ldr	r2, [pc, #144]	; (80050a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d01d      	beq.n	8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a22      	ldr	r2, [pc, #136]	; (80050a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d018      	beq.n	8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a21      	ldr	r2, [pc, #132]	; (80050ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d013      	beq.n	8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1f      	ldr	r2, [pc, #124]	; (80050b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00e      	beq.n	8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1e      	ldr	r2, [pc, #120]	; (80050b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d009      	beq.n	8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1c      	ldr	r2, [pc, #112]	; (80050b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d004      	beq.n	8005054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1b      	ldr	r2, [pc, #108]	; (80050bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d101      	bne.n	8005058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005054:	2301      	movs	r3, #1
 8005056:	e000      	b.n	800505a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005058:	2300      	movs	r3, #0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	4b17      	ldr	r3, [pc, #92]	; (80050c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	461a      	mov	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a15      	ldr	r2, [pc, #84]	; (80050c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005070:	671a      	str	r2, [r3, #112]	; 0x70
 8005072:	e009      	b.n	8005088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4b14      	ldr	r3, [pc, #80]	; (80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005078:	4413      	add	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	461a      	mov	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a11      	ldr	r2, [pc, #68]	; (80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005086:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	3b01      	subs	r3, #1
 800508c:	2201      	movs	r2, #1
 800508e:	409a      	lsls	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005094:	bf00      	nop
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	58025408 	.word	0x58025408
 80050a4:	5802541c 	.word	0x5802541c
 80050a8:	58025430 	.word	0x58025430
 80050ac:	58025444 	.word	0x58025444
 80050b0:	58025458 	.word	0x58025458
 80050b4:	5802546c 	.word	0x5802546c
 80050b8:	58025480 	.word	0x58025480
 80050bc:	58025494 	.word	0x58025494
 80050c0:	1600963f 	.word	0x1600963f
 80050c4:	58025940 	.word	0x58025940
 80050c8:	1000823f 	.word	0x1000823f
 80050cc:	40020940 	.word	0x40020940

080050d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b089      	sub	sp, #36	; 0x24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80050de:	4b89      	ldr	r3, [pc, #548]	; (8005304 <HAL_GPIO_Init+0x234>)
 80050e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050e2:	e194      	b.n	800540e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	2101      	movs	r1, #1
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	fa01 f303 	lsl.w	r3, r1, r3
 80050f0:	4013      	ands	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 8186 	beq.w	8005408 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d00b      	beq.n	800511c <HAL_GPIO_Init+0x4c>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b02      	cmp	r3, #2
 800510a:	d007      	beq.n	800511c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005110:	2b11      	cmp	r3, #17
 8005112:	d003      	beq.n	800511c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	2b12      	cmp	r3, #18
 800511a:	d130      	bne.n	800517e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	2203      	movs	r2, #3
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4313      	orrs	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005152:	2201      	movs	r2, #1
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	43db      	mvns	r3, r3
 800515c:	69ba      	ldr	r2, [r7, #24]
 800515e:	4013      	ands	r3, r2
 8005160:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	091b      	lsrs	r3, r3, #4
 8005168:	f003 0201 	and.w	r2, r3, #1
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	fa02 f303 	lsl.w	r3, r2, r3
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	4313      	orrs	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	2203      	movs	r2, #3
 800518a:	fa02 f303 	lsl.w	r3, r2, r3
 800518e:	43db      	mvns	r3, r3
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	4013      	ands	r3, r2
 8005194:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	69ba      	ldr	r2, [r7, #24]
 80051ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d003      	beq.n	80051be <HAL_GPIO_Init+0xee>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b12      	cmp	r3, #18
 80051bc:	d123      	bne.n	8005206 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	08da      	lsrs	r2, r3, #3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3208      	adds	r2, #8
 80051c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	220f      	movs	r2, #15
 80051d6:	fa02 f303 	lsl.w	r3, r2, r3
 80051da:	43db      	mvns	r3, r3
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	4013      	ands	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f003 0307 	and.w	r3, r3, #7
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	08da      	lsrs	r2, r3, #3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3208      	adds	r2, #8
 8005200:	69b9      	ldr	r1, [r7, #24]
 8005202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	2203      	movs	r2, #3
 8005212:	fa02 f303 	lsl.w	r3, r2, r3
 8005216:	43db      	mvns	r3, r3
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4013      	ands	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f003 0203 	and.w	r2, r3, #3
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	fa02 f303 	lsl.w	r3, r2, r3
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 80e0 	beq.w	8005408 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005248:	4b2f      	ldr	r3, [pc, #188]	; (8005308 <HAL_GPIO_Init+0x238>)
 800524a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800524e:	4a2e      	ldr	r2, [pc, #184]	; (8005308 <HAL_GPIO_Init+0x238>)
 8005250:	f043 0302 	orr.w	r3, r3, #2
 8005254:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005258:	4b2b      	ldr	r3, [pc, #172]	; (8005308 <HAL_GPIO_Init+0x238>)
 800525a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005266:	4a29      	ldr	r2, [pc, #164]	; (800530c <HAL_GPIO_Init+0x23c>)
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	089b      	lsrs	r3, r3, #2
 800526c:	3302      	adds	r3, #2
 800526e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	220f      	movs	r2, #15
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	43db      	mvns	r3, r3
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	4013      	ands	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a20      	ldr	r2, [pc, #128]	; (8005310 <HAL_GPIO_Init+0x240>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d052      	beq.n	8005338 <HAL_GPIO_Init+0x268>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a1f      	ldr	r2, [pc, #124]	; (8005314 <HAL_GPIO_Init+0x244>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d031      	beq.n	80052fe <HAL_GPIO_Init+0x22e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <HAL_GPIO_Init+0x248>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d02b      	beq.n	80052fa <HAL_GPIO_Init+0x22a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a1d      	ldr	r2, [pc, #116]	; (800531c <HAL_GPIO_Init+0x24c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d025      	beq.n	80052f6 <HAL_GPIO_Init+0x226>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a1c      	ldr	r2, [pc, #112]	; (8005320 <HAL_GPIO_Init+0x250>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d01f      	beq.n	80052f2 <HAL_GPIO_Init+0x222>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a1b      	ldr	r2, [pc, #108]	; (8005324 <HAL_GPIO_Init+0x254>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d019      	beq.n	80052ee <HAL_GPIO_Init+0x21e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a1a      	ldr	r2, [pc, #104]	; (8005328 <HAL_GPIO_Init+0x258>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d013      	beq.n	80052ea <HAL_GPIO_Init+0x21a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a19      	ldr	r2, [pc, #100]	; (800532c <HAL_GPIO_Init+0x25c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00d      	beq.n	80052e6 <HAL_GPIO_Init+0x216>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a18      	ldr	r2, [pc, #96]	; (8005330 <HAL_GPIO_Init+0x260>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d007      	beq.n	80052e2 <HAL_GPIO_Init+0x212>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a17      	ldr	r2, [pc, #92]	; (8005334 <HAL_GPIO_Init+0x264>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d101      	bne.n	80052de <HAL_GPIO_Init+0x20e>
 80052da:	2309      	movs	r3, #9
 80052dc:	e02d      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052de:	230a      	movs	r3, #10
 80052e0:	e02b      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052e2:	2308      	movs	r3, #8
 80052e4:	e029      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052e6:	2307      	movs	r3, #7
 80052e8:	e027      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052ea:	2306      	movs	r3, #6
 80052ec:	e025      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052ee:	2305      	movs	r3, #5
 80052f0:	e023      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052f2:	2304      	movs	r3, #4
 80052f4:	e021      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052f6:	2303      	movs	r3, #3
 80052f8:	e01f      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e01d      	b.n	800533a <HAL_GPIO_Init+0x26a>
 80052fe:	2301      	movs	r3, #1
 8005300:	e01b      	b.n	800533a <HAL_GPIO_Init+0x26a>
 8005302:	bf00      	nop
 8005304:	58000080 	.word	0x58000080
 8005308:	58024400 	.word	0x58024400
 800530c:	58000400 	.word	0x58000400
 8005310:	58020000 	.word	0x58020000
 8005314:	58020400 	.word	0x58020400
 8005318:	58020800 	.word	0x58020800
 800531c:	58020c00 	.word	0x58020c00
 8005320:	58021000 	.word	0x58021000
 8005324:	58021400 	.word	0x58021400
 8005328:	58021800 	.word	0x58021800
 800532c:	58021c00 	.word	0x58021c00
 8005330:	58022000 	.word	0x58022000
 8005334:	58022400 	.word	0x58022400
 8005338:	2300      	movs	r3, #0
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	f002 0203 	and.w	r2, r2, #3
 8005340:	0092      	lsls	r2, r2, #2
 8005342:	4093      	lsls	r3, r2
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	4313      	orrs	r3, r2
 8005348:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800534a:	4938      	ldr	r1, [pc, #224]	; (800542c <HAL_GPIO_Init+0x35c>)
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	089b      	lsrs	r3, r3, #2
 8005350:	3302      	adds	r3, #2
 8005352:	69ba      	ldr	r2, [r7, #24]
 8005354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	43db      	mvns	r3, r3
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	4013      	ands	r3, r2
 8005366:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	43db      	mvns	r3, r3
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	4013      	ands	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80053ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	43db      	mvns	r3, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	4013      	ands	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80053d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80053da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	43db      	mvns	r3, r3
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	4013      	ands	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	3301      	adds	r3, #1
 800540c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	f47f ae63 	bne.w	80050e4 <HAL_GPIO_Init+0x14>
  }
}
 800541e:	bf00      	nop
 8005420:	bf00      	nop
 8005422:	3724      	adds	r7, #36	; 0x24
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	58000400 	.word	0x58000400

08005430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	807b      	strh	r3, [r7, #2]
 800543c:	4613      	mov	r3, r2
 800543e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005440:	787b      	ldrb	r3, [r7, #1]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005446:	887a      	ldrh	r2, [r7, #2]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800544c:	e003      	b.n	8005456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800544e:	887b      	ldrh	r3, [r7, #2]
 8005450:	041a      	lsls	r2, r3, #16
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	619a      	str	r2, [r3, #24]
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b082      	sub	sp, #8
 8005466:	af00      	add	r7, sp, #0
 8005468:	4603      	mov	r3, r0
 800546a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800546c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005470:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005474:	88fb      	ldrh	r3, [r7, #6]
 8005476:	4013      	ands	r3, r2
 8005478:	2b00      	cmp	r3, #0
 800547a:	d008      	beq.n	800548e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800547c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005486:	88fb      	ldrh	r3, [r7, #6]
 8005488:	4618      	mov	r0, r3
 800548a:	f7fc fc09 	bl	8001ca0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800548e:	bf00      	nop
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
	...

08005498 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80054a0:	4b19      	ldr	r3, [pc, #100]	; (8005508 <HAL_PWREx_ConfigSupply+0x70>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0304 	and.w	r3, r3, #4
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d00a      	beq.n	80054c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80054ac:	4b16      	ldr	r3, [pc, #88]	; (8005508 <HAL_PWREx_ConfigSupply+0x70>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d001      	beq.n	80054be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e01f      	b.n	80054fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	e01d      	b.n	80054fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80054c2:	4b11      	ldr	r3, [pc, #68]	; (8005508 <HAL_PWREx_ConfigSupply+0x70>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f023 0207 	bic.w	r2, r3, #7
 80054ca:	490f      	ldr	r1, [pc, #60]	; (8005508 <HAL_PWREx_ConfigSupply+0x70>)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80054d2:	f7fd f9a3 	bl	800281c <HAL_GetTick>
 80054d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80054d8:	e009      	b.n	80054ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80054da:	f7fd f99f 	bl	800281c <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054e8:	d901      	bls.n	80054ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e007      	b.n	80054fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80054ee:	4b06      	ldr	r3, [pc, #24]	; (8005508 <HAL_PWREx_ConfigSupply+0x70>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054fa:	d1ee      	bne.n	80054da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	58024800 	.word	0x58024800

0800550c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08c      	sub	sp, #48	; 0x30
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e3ff      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 8087 	beq.w	800563a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800552c:	4b99      	ldr	r3, [pc, #612]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005534:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005536:	4b97      	ldr	r3, [pc, #604]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553e:	2b10      	cmp	r3, #16
 8005540:	d007      	beq.n	8005552 <HAL_RCC_OscConfig+0x46>
 8005542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005544:	2b18      	cmp	r3, #24
 8005546:	d110      	bne.n	800556a <HAL_RCC_OscConfig+0x5e>
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d10b      	bne.n	800556a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005552:	4b90      	ldr	r3, [pc, #576]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d06c      	beq.n	8005638 <HAL_RCC_OscConfig+0x12c>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d168      	bne.n	8005638 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e3d9      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005572:	d106      	bne.n	8005582 <HAL_RCC_OscConfig+0x76>
 8005574:	4b87      	ldr	r3, [pc, #540]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a86      	ldr	r2, [pc, #536]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 800557a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	e02e      	b.n	80055e0 <HAL_RCC_OscConfig+0xd4>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10c      	bne.n	80055a4 <HAL_RCC_OscConfig+0x98>
 800558a:	4b82      	ldr	r3, [pc, #520]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a81      	ldr	r2, [pc, #516]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 8005590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	4b7f      	ldr	r3, [pc, #508]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a7e      	ldr	r2, [pc, #504]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 800559c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e01d      	b.n	80055e0 <HAL_RCC_OscConfig+0xd4>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCC_OscConfig+0xbc>
 80055ae:	4b79      	ldr	r3, [pc, #484]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a78      	ldr	r2, [pc, #480]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 80055b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	4b76      	ldr	r3, [pc, #472]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a75      	ldr	r2, [pc, #468]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 80055c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	e00b      	b.n	80055e0 <HAL_RCC_OscConfig+0xd4>
 80055c8:	4b72      	ldr	r3, [pc, #456]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a71      	ldr	r2, [pc, #452]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 80055ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	4b6f      	ldr	r3, [pc, #444]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a6e      	ldr	r2, [pc, #440]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 80055da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d013      	beq.n	8005610 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fd f918 	bl	800281c <HAL_GetTick>
 80055ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055f0:	f7fd f914 	bl	800281c <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b64      	cmp	r3, #100	; 0x64
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e38d      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005602:	4b64      	ldr	r3, [pc, #400]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0xe4>
 800560e:	e014      	b.n	800563a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005610:	f7fd f904 	bl	800281c <HAL_GetTick>
 8005614:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005618:	f7fd f900 	bl	800281c <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b64      	cmp	r3, #100	; 0x64
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e379      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800562a:	4b5a      	ldr	r3, [pc, #360]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f0      	bne.n	8005618 <HAL_RCC_OscConfig+0x10c>
 8005636:	e000      	b.n	800563a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 80ae 	beq.w	80057a4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005648:	4b52      	ldr	r3, [pc, #328]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005650:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005652:	4b50      	ldr	r3, [pc, #320]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 8005654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005656:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d007      	beq.n	800566e <HAL_RCC_OscConfig+0x162>
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	2b18      	cmp	r3, #24
 8005662:	d13a      	bne.n	80056da <HAL_RCC_OscConfig+0x1ce>
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d135      	bne.n	80056da <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800566e:	4b49      	ldr	r3, [pc, #292]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <HAL_RCC_OscConfig+0x17a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e34b      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005686:	f7fd f8f9 	bl	800287c <HAL_GetREVID>
 800568a:	4603      	mov	r3, r0
 800568c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005690:	4293      	cmp	r3, r2
 8005692:	d817      	bhi.n	80056c4 <HAL_RCC_OscConfig+0x1b8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	2b40      	cmp	r3, #64	; 0x40
 800569a:	d108      	bne.n	80056ae <HAL_RCC_OscConfig+0x1a2>
 800569c:	4b3d      	ldr	r3, [pc, #244]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80056a4:	4a3b      	ldr	r2, [pc, #236]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 80056a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056aa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056ac:	e07a      	b.n	80057a4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056ae:	4b39      	ldr	r3, [pc, #228]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	031b      	lsls	r3, r3, #12
 80056bc:	4935      	ldr	r1, [pc, #212]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 80056be:	4313      	orrs	r3, r2
 80056c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056c2:	e06f      	b.n	80057a4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056c4:	4b33      	ldr	r3, [pc, #204]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	061b      	lsls	r3, r3, #24
 80056d2:	4930      	ldr	r1, [pc, #192]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056d8:	e064      	b.n	80057a4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d045      	beq.n	800576e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80056e2:	4b2c      	ldr	r3, [pc, #176]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f023 0219 	bic.w	r2, r3, #25
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	4929      	ldr	r1, [pc, #164]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f4:	f7fd f892 	bl	800281c <HAL_GetTick>
 80056f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80056fa:	e008      	b.n	800570e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056fc:	f7fd f88e 	bl	800281c <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	2b02      	cmp	r3, #2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e307      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800570e:	4b21      	ldr	r3, [pc, #132]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	2b00      	cmp	r3, #0
 8005718:	d0f0      	beq.n	80056fc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800571a:	f7fd f8af 	bl	800287c <HAL_GetREVID>
 800571e:	4603      	mov	r3, r0
 8005720:	f241 0203 	movw	r2, #4099	; 0x1003
 8005724:	4293      	cmp	r3, r2
 8005726:	d817      	bhi.n	8005758 <HAL_RCC_OscConfig+0x24c>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b40      	cmp	r3, #64	; 0x40
 800572e:	d108      	bne.n	8005742 <HAL_RCC_OscConfig+0x236>
 8005730:	4b18      	ldr	r3, [pc, #96]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005738:	4a16      	ldr	r2, [pc, #88]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 800573a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800573e:	6053      	str	r3, [r2, #4]
 8005740:	e030      	b.n	80057a4 <HAL_RCC_OscConfig+0x298>
 8005742:	4b14      	ldr	r3, [pc, #80]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	031b      	lsls	r3, r3, #12
 8005750:	4910      	ldr	r1, [pc, #64]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 8005752:	4313      	orrs	r3, r2
 8005754:	604b      	str	r3, [r1, #4]
 8005756:	e025      	b.n	80057a4 <HAL_RCC_OscConfig+0x298>
 8005758:	4b0e      	ldr	r3, [pc, #56]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	061b      	lsls	r3, r3, #24
 8005766:	490b      	ldr	r1, [pc, #44]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 8005768:	4313      	orrs	r3, r2
 800576a:	604b      	str	r3, [r1, #4]
 800576c:	e01a      	b.n	80057a4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800576e:	4b09      	ldr	r3, [pc, #36]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a08      	ldr	r2, [pc, #32]	; (8005794 <HAL_RCC_OscConfig+0x288>)
 8005774:	f023 0301 	bic.w	r3, r3, #1
 8005778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577a:	f7fd f84f 	bl	800281c <HAL_GetTick>
 800577e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005780:	e00a      	b.n	8005798 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005782:	f7fd f84b 	bl	800281c <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d903      	bls.n	8005798 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e2c4      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
 8005794:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005798:	4ba4      	ldr	r3, [pc, #656]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0304 	and.w	r3, r3, #4
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1ee      	bne.n	8005782 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 80a9 	beq.w	8005904 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057b2:	4b9e      	ldr	r3, [pc, #632]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057bc:	4b9b      	ldr	r3, [pc, #620]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d007      	beq.n	80057d8 <HAL_RCC_OscConfig+0x2cc>
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	2b18      	cmp	r3, #24
 80057cc:	d13a      	bne.n	8005844 <HAL_RCC_OscConfig+0x338>
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f003 0303 	and.w	r3, r3, #3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d135      	bne.n	8005844 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80057d8:	4b94      	ldr	r3, [pc, #592]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d005      	beq.n	80057f0 <HAL_RCC_OscConfig+0x2e4>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	69db      	ldr	r3, [r3, #28]
 80057e8:	2b80      	cmp	r3, #128	; 0x80
 80057ea:	d001      	beq.n	80057f0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e296      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057f0:	f7fd f844 	bl	800287c <HAL_GetREVID>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d817      	bhi.n	800582e <HAL_RCC_OscConfig+0x322>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	2b20      	cmp	r3, #32
 8005804:	d108      	bne.n	8005818 <HAL_RCC_OscConfig+0x30c>
 8005806:	4b89      	ldr	r3, [pc, #548]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800580e:	4a87      	ldr	r2, [pc, #540]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 8005810:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005814:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005816:	e075      	b.n	8005904 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005818:	4b84      	ldr	r3, [pc, #528]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	069b      	lsls	r3, r3, #26
 8005826:	4981      	ldr	r1, [pc, #516]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 8005828:	4313      	orrs	r3, r2
 800582a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800582c:	e06a      	b.n	8005904 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800582e:	4b7f      	ldr	r3, [pc, #508]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	061b      	lsls	r3, r3, #24
 800583c:	497b      	ldr	r1, [pc, #492]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 800583e:	4313      	orrs	r3, r2
 8005840:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005842:	e05f      	b.n	8005904 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d042      	beq.n	80058d2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800584c:	4b77      	ldr	r3, [pc, #476]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a76      	ldr	r2, [pc, #472]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 8005852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005858:	f7fc ffe0 	bl	800281c <HAL_GetTick>
 800585c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005860:	f7fc ffdc 	bl	800281c <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b02      	cmp	r3, #2
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e255      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005872:	4b6e      	ldr	r3, [pc, #440]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f0      	beq.n	8005860 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800587e:	f7fc fffd 	bl	800287c <HAL_GetREVID>
 8005882:	4603      	mov	r3, r0
 8005884:	f241 0203 	movw	r2, #4099	; 0x1003
 8005888:	4293      	cmp	r3, r2
 800588a:	d817      	bhi.n	80058bc <HAL_RCC_OscConfig+0x3b0>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	2b20      	cmp	r3, #32
 8005892:	d108      	bne.n	80058a6 <HAL_RCC_OscConfig+0x39a>
 8005894:	4b65      	ldr	r3, [pc, #404]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800589c:	4a63      	ldr	r2, [pc, #396]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 800589e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058a2:	6053      	str	r3, [r2, #4]
 80058a4:	e02e      	b.n	8005904 <HAL_RCC_OscConfig+0x3f8>
 80058a6:	4b61      	ldr	r3, [pc, #388]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	069b      	lsls	r3, r3, #26
 80058b4:	495d      	ldr	r1, [pc, #372]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	604b      	str	r3, [r1, #4]
 80058ba:	e023      	b.n	8005904 <HAL_RCC_OscConfig+0x3f8>
 80058bc:	4b5b      	ldr	r3, [pc, #364]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	061b      	lsls	r3, r3, #24
 80058ca:	4958      	ldr	r1, [pc, #352]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60cb      	str	r3, [r1, #12]
 80058d0:	e018      	b.n	8005904 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80058d2:	4b56      	ldr	r3, [pc, #344]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a55      	ldr	r2, [pc, #340]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 80058d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058de:	f7fc ff9d 	bl	800281c <HAL_GetTick>
 80058e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80058e6:	f7fc ff99 	bl	800281c <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e212      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80058f8:	4b4c      	ldr	r3, [pc, #304]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1f0      	bne.n	80058e6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0308 	and.w	r3, r3, #8
 800590c:	2b00      	cmp	r3, #0
 800590e:	d036      	beq.n	800597e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d019      	beq.n	800594c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005918:	4b44      	ldr	r3, [pc, #272]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 800591a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800591c:	4a43      	ldr	r2, [pc, #268]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 800591e:	f043 0301 	orr.w	r3, r3, #1
 8005922:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005924:	f7fc ff7a 	bl	800281c <HAL_GetTick>
 8005928:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800592c:	f7fc ff76 	bl	800281c <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b02      	cmp	r3, #2
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e1ef      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800593e:	4b3b      	ldr	r3, [pc, #236]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 8005940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f0      	beq.n	800592c <HAL_RCC_OscConfig+0x420>
 800594a:	e018      	b.n	800597e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800594c:	4b37      	ldr	r3, [pc, #220]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 800594e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005950:	4a36      	ldr	r2, [pc, #216]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 8005952:	f023 0301 	bic.w	r3, r3, #1
 8005956:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005958:	f7fc ff60 	bl	800281c <HAL_GetTick>
 800595c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005960:	f7fc ff5c 	bl	800281c <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e1d5      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005972:	4b2e      	ldr	r3, [pc, #184]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 8005974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1f0      	bne.n	8005960 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b00      	cmp	r3, #0
 8005988:	d036      	beq.n	80059f8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d019      	beq.n	80059c6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005992:	4b26      	ldr	r3, [pc, #152]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a25      	ldr	r2, [pc, #148]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 8005998:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800599c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800599e:	f7fc ff3d 	bl	800281c <HAL_GetTick>
 80059a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80059a4:	e008      	b.n	80059b8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80059a6:	f7fc ff39 	bl	800281c <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e1b2      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80059b8:	4b1c      	ldr	r3, [pc, #112]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0f0      	beq.n	80059a6 <HAL_RCC_OscConfig+0x49a>
 80059c4:	e018      	b.n	80059f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059c6:	4b19      	ldr	r3, [pc, #100]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a18      	ldr	r2, [pc, #96]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 80059cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80059d2:	f7fc ff23 	bl	800281c <HAL_GetTick>
 80059d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80059da:	f7fc ff1f 	bl	800281c <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e198      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80059ec:	4b0f      	ldr	r3, [pc, #60]	; (8005a2c <HAL_RCC_OscConfig+0x520>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1f0      	bne.n	80059da <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8085 	beq.w	8005b10 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a06:	4b0a      	ldr	r3, [pc, #40]	; (8005a30 <HAL_RCC_OscConfig+0x524>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <HAL_RCC_OscConfig+0x524>)
 8005a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a12:	f7fc ff03 	bl	800281c <HAL_GetTick>
 8005a16:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a18:	e00c      	b.n	8005a34 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a1a:	f7fc feff 	bl	800281c <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b64      	cmp	r3, #100	; 0x64
 8005a26:	d905      	bls.n	8005a34 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e178      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
 8005a2c:	58024400 	.word	0x58024400
 8005a30:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a34:	4b96      	ldr	r3, [pc, #600]	; (8005c90 <HAL_RCC_OscConfig+0x784>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d0ec      	beq.n	8005a1a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d106      	bne.n	8005a56 <HAL_RCC_OscConfig+0x54a>
 8005a48:	4b92      	ldr	r3, [pc, #584]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4c:	4a91      	ldr	r2, [pc, #580]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	6713      	str	r3, [r2, #112]	; 0x70
 8005a54:	e02d      	b.n	8005ab2 <HAL_RCC_OscConfig+0x5a6>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10c      	bne.n	8005a78 <HAL_RCC_OscConfig+0x56c>
 8005a5e:	4b8d      	ldr	r3, [pc, #564]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a62:	4a8c      	ldr	r2, [pc, #560]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005a64:	f023 0301 	bic.w	r3, r3, #1
 8005a68:	6713      	str	r3, [r2, #112]	; 0x70
 8005a6a:	4b8a      	ldr	r3, [pc, #552]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6e:	4a89      	ldr	r2, [pc, #548]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005a70:	f023 0304 	bic.w	r3, r3, #4
 8005a74:	6713      	str	r3, [r2, #112]	; 0x70
 8005a76:	e01c      	b.n	8005ab2 <HAL_RCC_OscConfig+0x5a6>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	2b05      	cmp	r3, #5
 8005a7e:	d10c      	bne.n	8005a9a <HAL_RCC_OscConfig+0x58e>
 8005a80:	4b84      	ldr	r3, [pc, #528]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a84:	4a83      	ldr	r2, [pc, #524]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005a86:	f043 0304 	orr.w	r3, r3, #4
 8005a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a8c:	4b81      	ldr	r3, [pc, #516]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a90:	4a80      	ldr	r2, [pc, #512]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005a92:	f043 0301 	orr.w	r3, r3, #1
 8005a96:	6713      	str	r3, [r2, #112]	; 0x70
 8005a98:	e00b      	b.n	8005ab2 <HAL_RCC_OscConfig+0x5a6>
 8005a9a:	4b7e      	ldr	r3, [pc, #504]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9e:	4a7d      	ldr	r2, [pc, #500]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005aa0:	f023 0301 	bic.w	r3, r3, #1
 8005aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa6:	4b7b      	ldr	r3, [pc, #492]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aaa:	4a7a      	ldr	r2, [pc, #488]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005aac:	f023 0304 	bic.w	r3, r3, #4
 8005ab0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d015      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aba:	f7fc feaf 	bl	800281c <HAL_GetTick>
 8005abe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ac0:	e00a      	b.n	8005ad8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ac2:	f7fc feab 	bl	800281c <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e122      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ad8:	4b6e      	ldr	r3, [pc, #440]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d0ee      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x5b6>
 8005ae4:	e014      	b.n	8005b10 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae6:	f7fc fe99 	bl	800281c <HAL_GetTick>
 8005aea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005aec:	e00a      	b.n	8005b04 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005aee:	f7fc fe95 	bl	800281c <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d901      	bls.n	8005b04 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e10c      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b04:	4b63      	ldr	r3, [pc, #396]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1ee      	bne.n	8005aee <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 8101 	beq.w	8005d1c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005b1a:	4b5e      	ldr	r3, [pc, #376]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b22:	2b18      	cmp	r3, #24
 8005b24:	f000 80bc 	beq.w	8005ca0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	f040 8095 	bne.w	8005c5c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b32:	4b58      	ldr	r3, [pc, #352]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a57      	ldr	r2, [pc, #348]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005b38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3e:	f7fc fe6d 	bl	800281c <HAL_GetTick>
 8005b42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b44:	e008      	b.n	8005b58 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b46:	f7fc fe69 	bl	800281c <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e0e2      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b58:	4b4e      	ldr	r3, [pc, #312]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1f0      	bne.n	8005b46 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b64:	4b4b      	ldr	r3, [pc, #300]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b68:	4b4b      	ldr	r3, [pc, #300]	; (8005c98 <HAL_RCC_OscConfig+0x78c>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b74:	0112      	lsls	r2, r2, #4
 8005b76:	430a      	orrs	r2, r1
 8005b78:	4946      	ldr	r1, [pc, #280]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	628b      	str	r3, [r1, #40]	; 0x28
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	3b01      	subs	r3, #1
 8005b84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	025b      	lsls	r3, r3, #9
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	041b      	lsls	r3, r3, #16
 8005b9c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	061b      	lsls	r3, r3, #24
 8005baa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005bae:	4939      	ldr	r1, [pc, #228]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005bb4:	4b37      	ldr	r3, [pc, #220]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	4a36      	ldr	r2, [pc, #216]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005bba:	f023 0301 	bic.w	r3, r3, #1
 8005bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005bc0:	4b34      	ldr	r3, [pc, #208]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bc4:	4b35      	ldr	r3, [pc, #212]	; (8005c9c <HAL_RCC_OscConfig+0x790>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005bcc:	00d2      	lsls	r2, r2, #3
 8005bce:	4931      	ldr	r1, [pc, #196]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005bd4:	4b2f      	ldr	r3, [pc, #188]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	f023 020c 	bic.w	r2, r3, #12
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	492c      	ldr	r1, [pc, #176]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005be6:	4b2b      	ldr	r3, [pc, #172]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bea:	f023 0202 	bic.w	r2, r3, #2
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf2:	4928      	ldr	r1, [pc, #160]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005bf8:	4b26      	ldr	r3, [pc, #152]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	4a25      	ldr	r2, [pc, #148]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c04:	4b23      	ldr	r3, [pc, #140]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c08:	4a22      	ldr	r2, [pc, #136]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005c10:	4b20      	ldr	r3, [pc, #128]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	4a1f      	ldr	r2, [pc, #124]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005c16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005c1c:	4b1d      	ldr	r3, [pc, #116]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	4a1c      	ldr	r2, [pc, #112]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005c22:	f043 0301 	orr.w	r3, r3, #1
 8005c26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c28:	4b1a      	ldr	r3, [pc, #104]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a19      	ldr	r2, [pc, #100]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c34:	f7fc fdf2 	bl	800281c <HAL_GetTick>
 8005c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c3c:	f7fc fdee 	bl	800281c <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e067      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c4e:	4b11      	ldr	r3, [pc, #68]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0f0      	beq.n	8005c3c <HAL_RCC_OscConfig+0x730>
 8005c5a:	e05f      	b.n	8005d1c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c5c:	4b0d      	ldr	r3, [pc, #52]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a0c      	ldr	r2, [pc, #48]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c68:	f7fc fdd8 	bl	800281c <HAL_GetTick>
 8005c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c70:	f7fc fdd4 	bl	800281c <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e04d      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c82:	4b04      	ldr	r3, [pc, #16]	; (8005c94 <HAL_RCC_OscConfig+0x788>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1f0      	bne.n	8005c70 <HAL_RCC_OscConfig+0x764>
 8005c8e:	e045      	b.n	8005d1c <HAL_RCC_OscConfig+0x810>
 8005c90:	58024800 	.word	0x58024800
 8005c94:	58024400 	.word	0x58024400
 8005c98:	fffffc0c 	.word	0xfffffc0c
 8005c9c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005ca0:	4b21      	ldr	r3, [pc, #132]	; (8005d28 <HAL_RCC_OscConfig+0x81c>)
 8005ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005ca6:	4b20      	ldr	r3, [pc, #128]	; (8005d28 <HAL_RCC_OscConfig+0x81c>)
 8005ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005caa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d031      	beq.n	8005d18 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f003 0203 	and.w	r2, r3, #3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d12a      	bne.n	8005d18 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	091b      	lsrs	r3, r3, #4
 8005cc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d122      	bne.n	8005d18 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cdc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d11a      	bne.n	8005d18 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	0a5b      	lsrs	r3, r3, #9
 8005ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d111      	bne.n	8005d18 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	0c1b      	lsrs	r3, r3, #16
 8005cf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d00:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d108      	bne.n	8005d18 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	0e1b      	lsrs	r3, r3, #24
 8005d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d12:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d001      	beq.n	8005d1c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e000      	b.n	8005d1e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3730      	adds	r7, #48	; 0x30
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	58024400 	.word	0x58024400

08005d2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d101      	bne.n	8005d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e19c      	b.n	800607a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d40:	4b8a      	ldr	r3, [pc, #552]	; (8005f6c <HAL_RCC_ClockConfig+0x240>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 030f 	and.w	r3, r3, #15
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d910      	bls.n	8005d70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d4e:	4b87      	ldr	r3, [pc, #540]	; (8005f6c <HAL_RCC_ClockConfig+0x240>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f023 020f 	bic.w	r2, r3, #15
 8005d56:	4985      	ldr	r1, [pc, #532]	; (8005f6c <HAL_RCC_ClockConfig+0x240>)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d5e:	4b83      	ldr	r3, [pc, #524]	; (8005f6c <HAL_RCC_ClockConfig+0x240>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d001      	beq.n	8005d70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e184      	b.n	800607a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d010      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	4b7b      	ldr	r3, [pc, #492]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d908      	bls.n	8005d9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005d8c:	4b78      	ldr	r3, [pc, #480]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	4975      	ldr	r1, [pc, #468]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0308 	and.w	r3, r3, #8
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d010      	beq.n	8005dcc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	695a      	ldr	r2, [r3, #20]
 8005dae:	4b70      	ldr	r3, [pc, #448]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d908      	bls.n	8005dcc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005dba:	4b6d      	ldr	r3, [pc, #436]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	496a      	ldr	r1, [pc, #424]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d010      	beq.n	8005dfa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	699a      	ldr	r2, [r3, #24]
 8005ddc:	4b64      	ldr	r3, [pc, #400]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d908      	bls.n	8005dfa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005de8:	4b61      	ldr	r3, [pc, #388]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005dea:	69db      	ldr	r3, [r3, #28]
 8005dec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	495e      	ldr	r1, [pc, #376]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d010      	beq.n	8005e28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69da      	ldr	r2, [r3, #28]
 8005e0a:	4b59      	ldr	r3, [pc, #356]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d908      	bls.n	8005e28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e16:	4b56      	ldr	r3, [pc, #344]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	4953      	ldr	r1, [pc, #332]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d010      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	68da      	ldr	r2, [r3, #12]
 8005e38:	4b4d      	ldr	r3, [pc, #308]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	f003 030f 	and.w	r3, r3, #15
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d908      	bls.n	8005e56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e44:	4b4a      	ldr	r3, [pc, #296]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f023 020f 	bic.w	r2, r3, #15
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	4947      	ldr	r1, [pc, #284]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d055      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005e62:	4b43      	ldr	r3, [pc, #268]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	4940      	ldr	r1, [pc, #256]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d107      	bne.n	8005e8c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005e7c:	4b3c      	ldr	r3, [pc, #240]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d121      	bne.n	8005ecc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0f6      	b.n	800607a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b03      	cmp	r3, #3
 8005e92:	d107      	bne.n	8005ea4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e94:	4b36      	ldr	r3, [pc, #216]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d115      	bne.n	8005ecc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0ea      	b.n	800607a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d107      	bne.n	8005ebc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005eac:	4b30      	ldr	r3, [pc, #192]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d109      	bne.n	8005ecc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e0de      	b.n	800607a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ebc:	4b2c      	ldr	r3, [pc, #176]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0304 	and.w	r3, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e0d6      	b.n	800607a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ecc:	4b28      	ldr	r3, [pc, #160]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	f023 0207 	bic.w	r2, r3, #7
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	4925      	ldr	r1, [pc, #148]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ede:	f7fc fc9d 	bl	800281c <HAL_GetTick>
 8005ee2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ee4:	e00a      	b.n	8005efc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ee6:	f7fc fc99 	bl	800281c <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d901      	bls.n	8005efc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e0be      	b.n	800607a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005efc:	4b1c      	ldr	r3, [pc, #112]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	00db      	lsls	r3, r3, #3
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d1eb      	bne.n	8005ee6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d010      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	4b14      	ldr	r3, [pc, #80]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d208      	bcs.n	8005f3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f2a:	4b11      	ldr	r3, [pc, #68]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f023 020f 	bic.w	r2, r3, #15
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	490e      	ldr	r1, [pc, #56]	; (8005f70 <HAL_RCC_ClockConfig+0x244>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f3c:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <HAL_RCC_ClockConfig+0x240>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d214      	bcs.n	8005f74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f4a:	4b08      	ldr	r3, [pc, #32]	; (8005f6c <HAL_RCC_ClockConfig+0x240>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f023 020f 	bic.w	r2, r3, #15
 8005f52:	4906      	ldr	r1, [pc, #24]	; (8005f6c <HAL_RCC_ClockConfig+0x240>)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f5a:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <HAL_RCC_ClockConfig+0x240>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d005      	beq.n	8005f74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e086      	b.n	800607a <HAL_RCC_ClockConfig+0x34e>
 8005f6c:	52002000 	.word	0x52002000
 8005f70:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d010      	beq.n	8005fa2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	691a      	ldr	r2, [r3, #16]
 8005f84:	4b3f      	ldr	r3, [pc, #252]	; (8006084 <HAL_RCC_ClockConfig+0x358>)
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d208      	bcs.n	8005fa2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f90:	4b3c      	ldr	r3, [pc, #240]	; (8006084 <HAL_RCC_ClockConfig+0x358>)
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	4939      	ldr	r1, [pc, #228]	; (8006084 <HAL_RCC_ClockConfig+0x358>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0308 	and.w	r3, r3, #8
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d010      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695a      	ldr	r2, [r3, #20]
 8005fb2:	4b34      	ldr	r3, [pc, #208]	; (8006084 <HAL_RCC_ClockConfig+0x358>)
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d208      	bcs.n	8005fd0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005fbe:	4b31      	ldr	r3, [pc, #196]	; (8006084 <HAL_RCC_ClockConfig+0x358>)
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	492e      	ldr	r1, [pc, #184]	; (8006084 <HAL_RCC_ClockConfig+0x358>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0310 	and.w	r3, r3, #16
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d010      	beq.n	8005ffe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	699a      	ldr	r2, [r3, #24]
 8005fe0:	4b28      	ldr	r3, [pc, #160]	; (8006084 <HAL_RCC_ClockConfig+0x358>)
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d208      	bcs.n	8005ffe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005fec:	4b25      	ldr	r3, [pc, #148]	; (8006084 <HAL_RCC_ClockConfig+0x358>)
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	4922      	ldr	r1, [pc, #136]	; (8006084 <HAL_RCC_ClockConfig+0x358>)
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d010      	beq.n	800602c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69da      	ldr	r2, [r3, #28]
 800600e:	4b1d      	ldr	r3, [pc, #116]	; (8006084 <HAL_RCC_ClockConfig+0x358>)
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006016:	429a      	cmp	r2, r3
 8006018:	d208      	bcs.n	800602c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800601a:	4b1a      	ldr	r3, [pc, #104]	; (8006084 <HAL_RCC_ClockConfig+0x358>)
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	4917      	ldr	r1, [pc, #92]	; (8006084 <HAL_RCC_ClockConfig+0x358>)
 8006028:	4313      	orrs	r3, r2
 800602a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800602c:	f000 f834 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8006030:	4602      	mov	r2, r0
 8006032:	4b14      	ldr	r3, [pc, #80]	; (8006084 <HAL_RCC_ClockConfig+0x358>)
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	4912      	ldr	r1, [pc, #72]	; (8006088 <HAL_RCC_ClockConfig+0x35c>)
 800603e:	5ccb      	ldrb	r3, [r1, r3]
 8006040:	f003 031f 	and.w	r3, r3, #31
 8006044:	fa22 f303 	lsr.w	r3, r2, r3
 8006048:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800604a:	4b0e      	ldr	r3, [pc, #56]	; (8006084 <HAL_RCC_ClockConfig+0x358>)
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	4a0d      	ldr	r2, [pc, #52]	; (8006088 <HAL_RCC_ClockConfig+0x35c>)
 8006054:	5cd3      	ldrb	r3, [r2, r3]
 8006056:	f003 031f 	and.w	r3, r3, #31
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	fa22 f303 	lsr.w	r3, r2, r3
 8006060:	4a0a      	ldr	r2, [pc, #40]	; (800608c <HAL_RCC_ClockConfig+0x360>)
 8006062:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006064:	4a0a      	ldr	r2, [pc, #40]	; (8006090 <HAL_RCC_ClockConfig+0x364>)
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800606a:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <HAL_RCC_ClockConfig+0x368>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f7fc fb8a 	bl	8002788 <HAL_InitTick>
 8006074:	4603      	mov	r3, r0
 8006076:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006078:	7bfb      	ldrb	r3, [r7, #15]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	58024400 	.word	0x58024400
 8006088:	0800b2c8 	.word	0x0800b2c8
 800608c:	20000004 	.word	0x20000004
 8006090:	20000000 	.word	0x20000000
 8006094:	20000008 	.word	0x20000008

08006098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006098:	b480      	push	{r7}
 800609a:	b089      	sub	sp, #36	; 0x24
 800609c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800609e:	4bb3      	ldr	r3, [pc, #716]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060a6:	2b18      	cmp	r3, #24
 80060a8:	f200 8155 	bhi.w	8006356 <HAL_RCC_GetSysClockFreq+0x2be>
 80060ac:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80060ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b2:	bf00      	nop
 80060b4:	08006119 	.word	0x08006119
 80060b8:	08006357 	.word	0x08006357
 80060bc:	08006357 	.word	0x08006357
 80060c0:	08006357 	.word	0x08006357
 80060c4:	08006357 	.word	0x08006357
 80060c8:	08006357 	.word	0x08006357
 80060cc:	08006357 	.word	0x08006357
 80060d0:	08006357 	.word	0x08006357
 80060d4:	0800613f 	.word	0x0800613f
 80060d8:	08006357 	.word	0x08006357
 80060dc:	08006357 	.word	0x08006357
 80060e0:	08006357 	.word	0x08006357
 80060e4:	08006357 	.word	0x08006357
 80060e8:	08006357 	.word	0x08006357
 80060ec:	08006357 	.word	0x08006357
 80060f0:	08006357 	.word	0x08006357
 80060f4:	08006145 	.word	0x08006145
 80060f8:	08006357 	.word	0x08006357
 80060fc:	08006357 	.word	0x08006357
 8006100:	08006357 	.word	0x08006357
 8006104:	08006357 	.word	0x08006357
 8006108:	08006357 	.word	0x08006357
 800610c:	08006357 	.word	0x08006357
 8006110:	08006357 	.word	0x08006357
 8006114:	0800614b 	.word	0x0800614b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006118:	4b94      	ldr	r3, [pc, #592]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b00      	cmp	r3, #0
 8006122:	d009      	beq.n	8006138 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006124:	4b91      	ldr	r3, [pc, #580]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	08db      	lsrs	r3, r3, #3
 800612a:	f003 0303 	and.w	r3, r3, #3
 800612e:	4a90      	ldr	r2, [pc, #576]	; (8006370 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006130:	fa22 f303 	lsr.w	r3, r2, r3
 8006134:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006136:	e111      	b.n	800635c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006138:	4b8d      	ldr	r3, [pc, #564]	; (8006370 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800613a:	61bb      	str	r3, [r7, #24]
    break;
 800613c:	e10e      	b.n	800635c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800613e:	4b8d      	ldr	r3, [pc, #564]	; (8006374 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006140:	61bb      	str	r3, [r7, #24]
    break;
 8006142:	e10b      	b.n	800635c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006144:	4b8c      	ldr	r3, [pc, #560]	; (8006378 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006146:	61bb      	str	r3, [r7, #24]
    break;
 8006148:	e108      	b.n	800635c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800614a:	4b88      	ldr	r3, [pc, #544]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800614c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614e:	f003 0303 	and.w	r3, r3, #3
 8006152:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006154:	4b85      	ldr	r3, [pc, #532]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006158:	091b      	lsrs	r3, r3, #4
 800615a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800615e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006160:	4b82      	ldr	r3, [pc, #520]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800616a:	4b80      	ldr	r3, [pc, #512]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800616c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800616e:	08db      	lsrs	r3, r3, #3
 8006170:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	fb02 f303 	mul.w	r3, r2, r3
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006182:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 80e1 	beq.w	8006350 <HAL_RCC_GetSysClockFreq+0x2b8>
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b02      	cmp	r3, #2
 8006192:	f000 8083 	beq.w	800629c <HAL_RCC_GetSysClockFreq+0x204>
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2b02      	cmp	r3, #2
 800619a:	f200 80a1 	bhi.w	80062e0 <HAL_RCC_GetSysClockFreq+0x248>
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_RCC_GetSysClockFreq+0x114>
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d056      	beq.n	8006258 <HAL_RCC_GetSysClockFreq+0x1c0>
 80061aa:	e099      	b.n	80062e0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061ac:	4b6f      	ldr	r3, [pc, #444]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0320 	and.w	r3, r3, #32
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d02d      	beq.n	8006214 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061b8:	4b6c      	ldr	r3, [pc, #432]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	08db      	lsrs	r3, r3, #3
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	4a6b      	ldr	r2, [pc, #428]	; (8006370 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80061c4:	fa22 f303 	lsr.w	r3, r2, r3
 80061c8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	ee07 3a90 	vmov	s15, r3
 80061d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061e2:	4b62      	ldr	r3, [pc, #392]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80061f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800637c <HAL_RCC_GetSysClockFreq+0x2e4>
 80061fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800620a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800620e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006212:	e087      	b.n	8006324 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	ee07 3a90 	vmov	s15, r3
 800621a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800621e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006380 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006226:	4b51      	ldr	r3, [pc, #324]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006236:	ed97 6a02 	vldr	s12, [r7, #8]
 800623a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800637c <HAL_RCC_GetSysClockFreq+0x2e4>
 800623e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800624a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800624e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006256:	e065      	b.n	8006324 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	ee07 3a90 	vmov	s15, r3
 800625e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006262:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006384 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800626a:	4b40      	ldr	r3, [pc, #256]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800626c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006272:	ee07 3a90 	vmov	s15, r3
 8006276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627a:	ed97 6a02 	vldr	s12, [r7, #8]
 800627e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800637c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800628a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800628e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006296:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800629a:	e043      	b.n	8006324 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006388 <HAL_RCC_GetSysClockFreq+0x2f0>
 80062aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ae:	4b2f      	ldr	r3, [pc, #188]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062be:	ed97 6a02 	vldr	s12, [r7, #8]
 80062c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800637c <HAL_RCC_GetSysClockFreq+0x2e4>
 80062c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062de:	e021      	b.n	8006324 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	ee07 3a90 	vmov	s15, r3
 80062e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006384 <HAL_RCC_GetSysClockFreq+0x2ec>
 80062ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062f2:	4b1e      	ldr	r3, [pc, #120]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006302:	ed97 6a02 	vldr	s12, [r7, #8]
 8006306:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800637c <HAL_RCC_GetSysClockFreq+0x2e4>
 800630a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800630e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006312:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006316:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800631a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006322:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006324:	4b11      	ldr	r3, [pc, #68]	; (800636c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006328:	0a5b      	lsrs	r3, r3, #9
 800632a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800632e:	3301      	adds	r3, #1
 8006330:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	ee07 3a90 	vmov	s15, r3
 8006338:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800633c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006348:	ee17 3a90 	vmov	r3, s15
 800634c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800634e:	e005      	b.n	800635c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	61bb      	str	r3, [r7, #24]
    break;
 8006354:	e002      	b.n	800635c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006356:	4b07      	ldr	r3, [pc, #28]	; (8006374 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006358:	61bb      	str	r3, [r7, #24]
    break;
 800635a:	bf00      	nop
  }

  return sysclockfreq;
 800635c:	69bb      	ldr	r3, [r7, #24]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3724      	adds	r7, #36	; 0x24
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	58024400 	.word	0x58024400
 8006370:	03d09000 	.word	0x03d09000
 8006374:	003d0900 	.word	0x003d0900
 8006378:	02dc6c00 	.word	0x02dc6c00
 800637c:	46000000 	.word	0x46000000
 8006380:	4c742400 	.word	0x4c742400
 8006384:	4a742400 	.word	0x4a742400
 8006388:	4c371b00 	.word	0x4c371b00

0800638c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006392:	f7ff fe81 	bl	8006098 <HAL_RCC_GetSysClockFreq>
 8006396:	4602      	mov	r2, r0
 8006398:	4b10      	ldr	r3, [pc, #64]	; (80063dc <HAL_RCC_GetHCLKFreq+0x50>)
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	0a1b      	lsrs	r3, r3, #8
 800639e:	f003 030f 	and.w	r3, r3, #15
 80063a2:	490f      	ldr	r1, [pc, #60]	; (80063e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80063a4:	5ccb      	ldrb	r3, [r1, r3]
 80063a6:	f003 031f 	and.w	r3, r3, #31
 80063aa:	fa22 f303 	lsr.w	r3, r2, r3
 80063ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80063b0:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <HAL_RCC_GetHCLKFreq+0x50>)
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	4a09      	ldr	r2, [pc, #36]	; (80063e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80063ba:	5cd3      	ldrb	r3, [r2, r3]
 80063bc:	f003 031f 	and.w	r3, r3, #31
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	fa22 f303 	lsr.w	r3, r2, r3
 80063c6:	4a07      	ldr	r2, [pc, #28]	; (80063e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80063c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80063ca:	4a07      	ldr	r2, [pc, #28]	; (80063e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80063d0:	4b04      	ldr	r3, [pc, #16]	; (80063e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80063d2:	681b      	ldr	r3, [r3, #0]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	58024400 	.word	0x58024400
 80063e0:	0800b2c8 	.word	0x0800b2c8
 80063e4:	20000004 	.word	0x20000004
 80063e8:	20000000 	.word	0x20000000

080063ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80063f0:	f7ff ffcc 	bl	800638c <HAL_RCC_GetHCLKFreq>
 80063f4:	4602      	mov	r2, r0
 80063f6:	4b06      	ldr	r3, [pc, #24]	; (8006410 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	091b      	lsrs	r3, r3, #4
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	4904      	ldr	r1, [pc, #16]	; (8006414 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006402:	5ccb      	ldrb	r3, [r1, r3]
 8006404:	f003 031f 	and.w	r3, r3, #31
 8006408:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800640c:	4618      	mov	r0, r3
 800640e:	bd80      	pop	{r7, pc}
 8006410:	58024400 	.word	0x58024400
 8006414:	0800b2c8 	.word	0x0800b2c8

08006418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800641c:	f7ff ffb6 	bl	800638c <HAL_RCC_GetHCLKFreq>
 8006420:	4602      	mov	r2, r0
 8006422:	4b06      	ldr	r3, [pc, #24]	; (800643c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	0a1b      	lsrs	r3, r3, #8
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	4904      	ldr	r1, [pc, #16]	; (8006440 <HAL_RCC_GetPCLK2Freq+0x28>)
 800642e:	5ccb      	ldrb	r3, [r1, r3]
 8006430:	f003 031f 	and.w	r3, r3, #31
 8006434:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006438:	4618      	mov	r0, r3
 800643a:	bd80      	pop	{r7, pc}
 800643c:	58024400 	.word	0x58024400
 8006440:	0800b2c8 	.word	0x0800b2c8

08006444 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800644c:	2300      	movs	r3, #0
 800644e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006450:	2300      	movs	r3, #0
 8006452:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d03f      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006464:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006468:	d02a      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800646a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800646e:	d824      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006470:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006474:	d018      	beq.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006476:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800647a:	d81e      	bhi.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800647c:	2b00      	cmp	r3, #0
 800647e:	d003      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006484:	d007      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006486:	e018      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006488:	4bab      	ldr	r3, [pc, #684]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	4aaa      	ldr	r2, [pc, #680]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800648e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006494:	e015      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3304      	adds	r3, #4
 800649a:	2102      	movs	r1, #2
 800649c:	4618      	mov	r0, r3
 800649e:	f001 f9cf 	bl	8007840 <RCCEx_PLL2_Config>
 80064a2:	4603      	mov	r3, r0
 80064a4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80064a6:	e00c      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3324      	adds	r3, #36	; 0x24
 80064ac:	2102      	movs	r1, #2
 80064ae:	4618      	mov	r0, r3
 80064b0:	f001 fa78 	bl	80079a4 <RCCEx_PLL3_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80064b8:	e003      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	75fb      	strb	r3, [r7, #23]
      break;
 80064be:	e000      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80064c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d109      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80064c8:	4b9b      	ldr	r3, [pc, #620]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064d4:	4998      	ldr	r1, [pc, #608]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064d6:	4313      	orrs	r3, r2
 80064d8:	650b      	str	r3, [r1, #80]	; 0x50
 80064da:	e001      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d03d      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f0:	2b04      	cmp	r3, #4
 80064f2:	d826      	bhi.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80064f4:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80064f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fa:	bf00      	nop
 80064fc:	08006511 	.word	0x08006511
 8006500:	0800651f 	.word	0x0800651f
 8006504:	08006531 	.word	0x08006531
 8006508:	08006549 	.word	0x08006549
 800650c:	08006549 	.word	0x08006549
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006510:	4b89      	ldr	r3, [pc, #548]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006514:	4a88      	ldr	r2, [pc, #544]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800651a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800651c:	e015      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3304      	adds	r3, #4
 8006522:	2100      	movs	r1, #0
 8006524:	4618      	mov	r0, r3
 8006526:	f001 f98b 	bl	8007840 <RCCEx_PLL2_Config>
 800652a:	4603      	mov	r3, r0
 800652c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800652e:	e00c      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3324      	adds	r3, #36	; 0x24
 8006534:	2100      	movs	r1, #0
 8006536:	4618      	mov	r0, r3
 8006538:	f001 fa34 	bl	80079a4 <RCCEx_PLL3_Config>
 800653c:	4603      	mov	r3, r0
 800653e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006540:	e003      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	75fb      	strb	r3, [r7, #23]
      break;
 8006546:	e000      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800654a:	7dfb      	ldrb	r3, [r7, #23]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d109      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006550:	4b79      	ldr	r3, [pc, #484]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006554:	f023 0207 	bic.w	r2, r3, #7
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655c:	4976      	ldr	r1, [pc, #472]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800655e:	4313      	orrs	r3, r2
 8006560:	650b      	str	r3, [r1, #80]	; 0x50
 8006562:	e001      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006570:	2b00      	cmp	r3, #0
 8006572:	d042      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800657c:	d02b      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800657e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006582:	d825      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006584:	2bc0      	cmp	r3, #192	; 0xc0
 8006586:	d028      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006588:	2bc0      	cmp	r3, #192	; 0xc0
 800658a:	d821      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800658c:	2b80      	cmp	r3, #128	; 0x80
 800658e:	d016      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006590:	2b80      	cmp	r3, #128	; 0x80
 8006592:	d81d      	bhi.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006598:	2b40      	cmp	r3, #64	; 0x40
 800659a:	d007      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x168>
 800659c:	e018      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800659e:	4b66      	ldr	r3, [pc, #408]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a2:	4a65      	ldr	r2, [pc, #404]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80065aa:	e017      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3304      	adds	r3, #4
 80065b0:	2100      	movs	r1, #0
 80065b2:	4618      	mov	r0, r3
 80065b4:	f001 f944 	bl	8007840 <RCCEx_PLL2_Config>
 80065b8:	4603      	mov	r3, r0
 80065ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80065bc:	e00e      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	3324      	adds	r3, #36	; 0x24
 80065c2:	2100      	movs	r1, #0
 80065c4:	4618      	mov	r0, r3
 80065c6:	f001 f9ed 	bl	80079a4 <RCCEx_PLL3_Config>
 80065ca:	4603      	mov	r3, r0
 80065cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80065ce:	e005      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	75fb      	strb	r3, [r7, #23]
      break;
 80065d4:	e002      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80065d6:	bf00      	nop
 80065d8:	e000      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80065da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d109      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80065e2:	4b55      	ldr	r3, [pc, #340]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ee:	4952      	ldr	r1, [pc, #328]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	650b      	str	r3, [r1, #80]	; 0x50
 80065f4:	e001      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f6:	7dfb      	ldrb	r3, [r7, #23]
 80065f8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006602:	2b00      	cmp	r3, #0
 8006604:	d049      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800660c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006610:	d030      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006612:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006616:	d82a      	bhi.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006618:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800661c:	d02c      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800661e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006622:	d824      	bhi.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006628:	d018      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800662a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800662e:	d81e      	bhi.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006634:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006638:	d007      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800663a:	e018      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800663c:	4b3e      	ldr	r3, [pc, #248]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	4a3d      	ldr	r2, [pc, #244]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006646:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006648:	e017      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	3304      	adds	r3, #4
 800664e:	2100      	movs	r1, #0
 8006650:	4618      	mov	r0, r3
 8006652:	f001 f8f5 	bl	8007840 <RCCEx_PLL2_Config>
 8006656:	4603      	mov	r3, r0
 8006658:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800665a:	e00e      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3324      	adds	r3, #36	; 0x24
 8006660:	2100      	movs	r1, #0
 8006662:	4618      	mov	r0, r3
 8006664:	f001 f99e 	bl	80079a4 <RCCEx_PLL3_Config>
 8006668:	4603      	mov	r3, r0
 800666a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800666c:	e005      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	75fb      	strb	r3, [r7, #23]
      break;
 8006672:	e002      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006674:	bf00      	nop
 8006676:	e000      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800667a:	7dfb      	ldrb	r3, [r7, #23]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10a      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006680:	4b2d      	ldr	r3, [pc, #180]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006684:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800668e:	492a      	ldr	r1, [pc, #168]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006690:	4313      	orrs	r3, r2
 8006692:	658b      	str	r3, [r1, #88]	; 0x58
 8006694:	e001      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006696:	7dfb      	ldrb	r3, [r7, #23]
 8006698:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d04c      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80066ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066b0:	d030      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80066b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066b6:	d82a      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80066b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80066bc:	d02c      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80066be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80066c2:	d824      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80066c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066c8:	d018      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80066ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066ce:	d81e      	bhi.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80066d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066d8:	d007      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80066da:	e018      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066dc:	4b16      	ldr	r3, [pc, #88]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e0:	4a15      	ldr	r2, [pc, #84]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066e8:	e017      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3304      	adds	r3, #4
 80066ee:	2100      	movs	r1, #0
 80066f0:	4618      	mov	r0, r3
 80066f2:	f001 f8a5 	bl	8007840 <RCCEx_PLL2_Config>
 80066f6:	4603      	mov	r3, r0
 80066f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80066fa:	e00e      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3324      	adds	r3, #36	; 0x24
 8006700:	2100      	movs	r1, #0
 8006702:	4618      	mov	r0, r3
 8006704:	f001 f94e 	bl	80079a4 <RCCEx_PLL3_Config>
 8006708:	4603      	mov	r3, r0
 800670a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800670c:	e005      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	75fb      	strb	r3, [r7, #23]
      break;
 8006712:	e002      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006714:	bf00      	nop
 8006716:	e000      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800671a:	7dfb      	ldrb	r3, [r7, #23]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10d      	bne.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006720:	4b05      	ldr	r3, [pc, #20]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006724:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800672e:	4902      	ldr	r1, [pc, #8]	; (8006738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006730:	4313      	orrs	r3, r2
 8006732:	658b      	str	r3, [r1, #88]	; 0x58
 8006734:	e004      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006736:	bf00      	nop
 8006738:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673c:	7dfb      	ldrb	r3, [r7, #23]
 800673e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d032      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006750:	2b30      	cmp	r3, #48	; 0x30
 8006752:	d01c      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006754:	2b30      	cmp	r3, #48	; 0x30
 8006756:	d817      	bhi.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006758:	2b20      	cmp	r3, #32
 800675a:	d00c      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800675c:	2b20      	cmp	r3, #32
 800675e:	d813      	bhi.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006760:	2b00      	cmp	r3, #0
 8006762:	d016      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006764:	2b10      	cmp	r3, #16
 8006766:	d10f      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006768:	4baf      	ldr	r3, [pc, #700]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	4aae      	ldr	r2, [pc, #696]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800676e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006772:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006774:	e00e      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3304      	adds	r3, #4
 800677a:	2102      	movs	r1, #2
 800677c:	4618      	mov	r0, r3
 800677e:	f001 f85f 	bl	8007840 <RCCEx_PLL2_Config>
 8006782:	4603      	mov	r3, r0
 8006784:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006786:	e005      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	75fb      	strb	r3, [r7, #23]
      break;
 800678c:	e002      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800678e:	bf00      	nop
 8006790:	e000      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006792:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006794:	7dfb      	ldrb	r3, [r7, #23]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d109      	bne.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800679a:	4ba3      	ldr	r3, [pc, #652]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800679c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a6:	49a0      	ldr	r1, [pc, #640]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80067ac:	e001      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ae:	7dfb      	ldrb	r3, [r7, #23]
 80067b0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d047      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067c6:	d030      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80067c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067cc:	d82a      	bhi.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80067ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067d2:	d02c      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80067d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80067d8:	d824      	bhi.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80067da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067de:	d018      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80067e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067e4:	d81e      	bhi.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80067ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ee:	d007      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80067f0:	e018      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f2:	4b8d      	ldr	r3, [pc, #564]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	4a8c      	ldr	r2, [pc, #560]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80067fe:	e017      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3304      	adds	r3, #4
 8006804:	2100      	movs	r1, #0
 8006806:	4618      	mov	r0, r3
 8006808:	f001 f81a 	bl	8007840 <RCCEx_PLL2_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006810:	e00e      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3324      	adds	r3, #36	; 0x24
 8006816:	2100      	movs	r1, #0
 8006818:	4618      	mov	r0, r3
 800681a:	f001 f8c3 	bl	80079a4 <RCCEx_PLL3_Config>
 800681e:	4603      	mov	r3, r0
 8006820:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006822:	e005      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	75fb      	strb	r3, [r7, #23]
      break;
 8006828:	e002      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800682a:	bf00      	nop
 800682c:	e000      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800682e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006830:	7dfb      	ldrb	r3, [r7, #23]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d109      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006836:	4b7c      	ldr	r3, [pc, #496]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800683a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006842:	4979      	ldr	r1, [pc, #484]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006844:	4313      	orrs	r3, r2
 8006846:	650b      	str	r3, [r1, #80]	; 0x50
 8006848:	e001      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684a:	7dfb      	ldrb	r3, [r7, #23]
 800684c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d049      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800685e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006862:	d02e      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006868:	d828      	bhi.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800686a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800686e:	d02a      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006870:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006874:	d822      	bhi.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006876:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800687a:	d026      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x486>
 800687c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006880:	d81c      	bhi.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006882:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006886:	d010      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006888:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800688c:	d816      	bhi.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x478>
 800688e:	2b00      	cmp	r3, #0
 8006890:	d01d      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006896:	d111      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3304      	adds	r3, #4
 800689c:	2101      	movs	r1, #1
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 ffce 	bl	8007840 <RCCEx_PLL2_Config>
 80068a4:	4603      	mov	r3, r0
 80068a6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80068a8:	e012      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	3324      	adds	r3, #36	; 0x24
 80068ae:	2101      	movs	r1, #1
 80068b0:	4618      	mov	r0, r3
 80068b2:	f001 f877 	bl	80079a4 <RCCEx_PLL3_Config>
 80068b6:	4603      	mov	r3, r0
 80068b8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80068ba:	e009      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	75fb      	strb	r3, [r7, #23]
      break;
 80068c0:	e006      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80068c2:	bf00      	nop
 80068c4:	e004      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80068c6:	bf00      	nop
 80068c8:	e002      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80068ca:	bf00      	nop
 80068cc:	e000      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80068ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d109      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80068d6:	4b54      	ldr	r3, [pc, #336]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068da:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e2:	4951      	ldr	r1, [pc, #324]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	650b      	str	r3, [r1, #80]	; 0x50
 80068e8:	e001      	b.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ea:	7dfb      	ldrb	r3, [r7, #23]
 80068ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d04b      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006904:	d02e      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006906:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800690a:	d828      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800690c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006910:	d02a      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006916:	d822      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006918:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800691c:	d026      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800691e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006922:	d81c      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006928:	d010      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800692a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800692e:	d816      	bhi.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d01d      	beq.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006934:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006938:	d111      	bne.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	3304      	adds	r3, #4
 800693e:	2101      	movs	r1, #1
 8006940:	4618      	mov	r0, r3
 8006942:	f000 ff7d 	bl	8007840 <RCCEx_PLL2_Config>
 8006946:	4603      	mov	r3, r0
 8006948:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800694a:	e012      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3324      	adds	r3, #36	; 0x24
 8006950:	2101      	movs	r1, #1
 8006952:	4618      	mov	r0, r3
 8006954:	f001 f826 	bl	80079a4 <RCCEx_PLL3_Config>
 8006958:	4603      	mov	r3, r0
 800695a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800695c:	e009      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	75fb      	strb	r3, [r7, #23]
      break;
 8006962:	e006      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006964:	bf00      	nop
 8006966:	e004      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006968:	bf00      	nop
 800696a:	e002      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800696c:	bf00      	nop
 800696e:	e000      	b.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006972:	7dfb      	ldrb	r3, [r7, #23]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10a      	bne.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006978:	4b2b      	ldr	r3, [pc, #172]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800697a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800697c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006986:	4928      	ldr	r1, [pc, #160]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006988:	4313      	orrs	r3, r2
 800698a:	658b      	str	r3, [r1, #88]	; 0x58
 800698c:	e001      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698e:	7dfb      	ldrb	r3, [r7, #23]
 8006990:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d02f      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069a6:	d00e      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80069a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ac:	d814      	bhi.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d015      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80069b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069b6:	d10f      	bne.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069b8:	4b1b      	ldr	r3, [pc, #108]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	4a1a      	ldr	r2, [pc, #104]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80069c4:	e00c      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3304      	adds	r3, #4
 80069ca:	2101      	movs	r1, #1
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 ff37 	bl	8007840 <RCCEx_PLL2_Config>
 80069d2:	4603      	mov	r3, r0
 80069d4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80069d6:	e003      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	75fb      	strb	r3, [r7, #23]
      break;
 80069dc:	e000      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80069de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d109      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80069e6:	4b10      	ldr	r3, [pc, #64]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069f2:	490d      	ldr	r1, [pc, #52]	; (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	650b      	str	r3, [r1, #80]	; 0x50
 80069f8:	e001      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
 80069fc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d033      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d81c      	bhi.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006a12:	a201      	add	r2, pc, #4	; (adr r2, 8006a18 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a18:	08006a53 	.word	0x08006a53
 8006a1c:	08006a2d 	.word	0x08006a2d
 8006a20:	08006a3b 	.word	0x08006a3b
 8006a24:	08006a53 	.word	0x08006a53
 8006a28:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a2c:	4bb8      	ldr	r3, [pc, #736]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	4ab7      	ldr	r2, [pc, #732]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006a38:	e00c      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	2102      	movs	r1, #2
 8006a40:	4618      	mov	r0, r3
 8006a42:	f000 fefd 	bl	8007840 <RCCEx_PLL2_Config>
 8006a46:	4603      	mov	r3, r0
 8006a48:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006a4a:	e003      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a50:	e000      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006a52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d109      	bne.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006a5a:	4bad      	ldr	r3, [pc, #692]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a5e:	f023 0203 	bic.w	r2, r3, #3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a66:	49aa      	ldr	r1, [pc, #680]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006a6c:	e001      	b.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6e:	7dfb      	ldrb	r3, [r7, #23]
 8006a70:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8086 	beq.w	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a80:	4ba4      	ldr	r3, [pc, #656]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4aa3      	ldr	r2, [pc, #652]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a8c:	f7fb fec6 	bl	800281c <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a92:	e009      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a94:	f7fb fec2 	bl	800281c <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b64      	cmp	r3, #100	; 0x64
 8006aa0:	d902      	bls.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	75fb      	strb	r3, [r7, #23]
        break;
 8006aa6:	e005      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006aa8:	4b9a      	ldr	r3, [pc, #616]	; (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0ef      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006ab4:	7dfb      	ldrb	r3, [r7, #23]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d166      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006aba:	4b95      	ldr	r3, [pc, #596]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006abc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ac4:	4053      	eors	r3, r2
 8006ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d013      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ace:	4b90      	ldr	r3, [pc, #576]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006ad8:	4b8d      	ldr	r3, [pc, #564]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006adc:	4a8c      	ldr	r2, [pc, #560]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ae4:	4b8a      	ldr	r3, [pc, #552]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae8:	4a89      	ldr	r2, [pc, #548]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aee:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006af0:	4a87      	ldr	r2, [pc, #540]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006afc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b00:	d115      	bne.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b02:	f7fb fe8b 	bl	800281c <HAL_GetTick>
 8006b06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b08:	e00b      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b0a:	f7fb fe87 	bl	800281c <HAL_GetTick>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d902      	bls.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	75fb      	strb	r3, [r7, #23]
            break;
 8006b20:	e005      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b22:	4b7b      	ldr	r3, [pc, #492]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0ed      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d126      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b42:	d10d      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006b44:	4b72      	ldr	r3, [pc, #456]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b52:	0919      	lsrs	r1, r3, #4
 8006b54:	4b70      	ldr	r3, [pc, #448]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006b56:	400b      	ands	r3, r1
 8006b58:	496d      	ldr	r1, [pc, #436]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	610b      	str	r3, [r1, #16]
 8006b5e:	e005      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006b60:	4b6b      	ldr	r3, [pc, #428]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	4a6a      	ldr	r2, [pc, #424]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b66:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006b6a:	6113      	str	r3, [r2, #16]
 8006b6c:	4b68      	ldr	r3, [pc, #416]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b7a:	4965      	ldr	r1, [pc, #404]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	670b      	str	r3, [r1, #112]	; 0x70
 8006b80:	e004      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b82:	7dfb      	ldrb	r3, [r7, #23]
 8006b84:	75bb      	strb	r3, [r7, #22]
 8006b86:	e001      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
 8006b8a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d07e      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b9c:	2b28      	cmp	r3, #40	; 0x28
 8006b9e:	d867      	bhi.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006ba0:	a201      	add	r2, pc, #4	; (adr r2, 8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba6:	bf00      	nop
 8006ba8:	08006c77 	.word	0x08006c77
 8006bac:	08006c71 	.word	0x08006c71
 8006bb0:	08006c71 	.word	0x08006c71
 8006bb4:	08006c71 	.word	0x08006c71
 8006bb8:	08006c71 	.word	0x08006c71
 8006bbc:	08006c71 	.word	0x08006c71
 8006bc0:	08006c71 	.word	0x08006c71
 8006bc4:	08006c71 	.word	0x08006c71
 8006bc8:	08006c4d 	.word	0x08006c4d
 8006bcc:	08006c71 	.word	0x08006c71
 8006bd0:	08006c71 	.word	0x08006c71
 8006bd4:	08006c71 	.word	0x08006c71
 8006bd8:	08006c71 	.word	0x08006c71
 8006bdc:	08006c71 	.word	0x08006c71
 8006be0:	08006c71 	.word	0x08006c71
 8006be4:	08006c71 	.word	0x08006c71
 8006be8:	08006c5f 	.word	0x08006c5f
 8006bec:	08006c71 	.word	0x08006c71
 8006bf0:	08006c71 	.word	0x08006c71
 8006bf4:	08006c71 	.word	0x08006c71
 8006bf8:	08006c71 	.word	0x08006c71
 8006bfc:	08006c71 	.word	0x08006c71
 8006c00:	08006c71 	.word	0x08006c71
 8006c04:	08006c71 	.word	0x08006c71
 8006c08:	08006c77 	.word	0x08006c77
 8006c0c:	08006c71 	.word	0x08006c71
 8006c10:	08006c71 	.word	0x08006c71
 8006c14:	08006c71 	.word	0x08006c71
 8006c18:	08006c71 	.word	0x08006c71
 8006c1c:	08006c71 	.word	0x08006c71
 8006c20:	08006c71 	.word	0x08006c71
 8006c24:	08006c71 	.word	0x08006c71
 8006c28:	08006c77 	.word	0x08006c77
 8006c2c:	08006c71 	.word	0x08006c71
 8006c30:	08006c71 	.word	0x08006c71
 8006c34:	08006c71 	.word	0x08006c71
 8006c38:	08006c71 	.word	0x08006c71
 8006c3c:	08006c71 	.word	0x08006c71
 8006c40:	08006c71 	.word	0x08006c71
 8006c44:	08006c71 	.word	0x08006c71
 8006c48:	08006c77 	.word	0x08006c77
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	3304      	adds	r3, #4
 8006c50:	2101      	movs	r1, #1
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fdf4 	bl	8007840 <RCCEx_PLL2_Config>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006c5c:	e00c      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3324      	adds	r3, #36	; 0x24
 8006c62:	2101      	movs	r1, #1
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 fe9d 	bl	80079a4 <RCCEx_PLL3_Config>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006c6e:	e003      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	75fb      	strb	r3, [r7, #23]
      break;
 8006c74:	e000      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d109      	bne.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006c7e:	4b24      	ldr	r3, [pc, #144]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c82:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c8a:	4921      	ldr	r1, [pc, #132]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	654b      	str	r3, [r1, #84]	; 0x54
 8006c90:	e001      	b.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d03e      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca6:	2b05      	cmp	r3, #5
 8006ca8:	d820      	bhi.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006caa:	a201      	add	r2, pc, #4	; (adr r2, 8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb0:	08006cf3 	.word	0x08006cf3
 8006cb4:	08006cc9 	.word	0x08006cc9
 8006cb8:	08006cdb 	.word	0x08006cdb
 8006cbc:	08006cf3 	.word	0x08006cf3
 8006cc0:	08006cf3 	.word	0x08006cf3
 8006cc4:	08006cf3 	.word	0x08006cf3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3304      	adds	r3, #4
 8006ccc:	2101      	movs	r1, #1
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 fdb6 	bl	8007840 <RCCEx_PLL2_Config>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006cd8:	e00c      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	3324      	adds	r3, #36	; 0x24
 8006cde:	2101      	movs	r1, #1
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f000 fe5f 	bl	80079a4 <RCCEx_PLL3_Config>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006cea:	e003      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf0:	e000      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006cf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d110      	bne.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006cfa:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cfe:	f023 0207 	bic.w	r2, r3, #7
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d06:	4902      	ldr	r1, [pc, #8]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	654b      	str	r3, [r1, #84]	; 0x54
 8006d0c:	e008      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006d0e:	bf00      	nop
 8006d10:	58024400 	.word	0x58024400
 8006d14:	58024800 	.word	0x58024800
 8006d18:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
 8006d1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d039      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d32:	2b05      	cmp	r3, #5
 8006d34:	d820      	bhi.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006d36:	a201      	add	r2, pc, #4	; (adr r2, 8006d3c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3c:	08006d7f 	.word	0x08006d7f
 8006d40:	08006d55 	.word	0x08006d55
 8006d44:	08006d67 	.word	0x08006d67
 8006d48:	08006d7f 	.word	0x08006d7f
 8006d4c:	08006d7f 	.word	0x08006d7f
 8006d50:	08006d7f 	.word	0x08006d7f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	3304      	adds	r3, #4
 8006d58:	2101      	movs	r1, #1
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f000 fd70 	bl	8007840 <RCCEx_PLL2_Config>
 8006d60:	4603      	mov	r3, r0
 8006d62:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006d64:	e00c      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3324      	adds	r3, #36	; 0x24
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fe19 	bl	80079a4 <RCCEx_PLL3_Config>
 8006d72:	4603      	mov	r3, r0
 8006d74:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006d76:	e003      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d7c:	e000      	b.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d80:	7dfb      	ldrb	r3, [r7, #23]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d86:	4bb7      	ldr	r3, [pc, #732]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d8a:	f023 0207 	bic.w	r2, r3, #7
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d94:	49b3      	ldr	r1, [pc, #716]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	658b      	str	r3, [r1, #88]	; 0x58
 8006d9a:	e001      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9c:	7dfb      	ldrb	r3, [r7, #23]
 8006d9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d04b      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006db6:	d02e      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006db8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dbc:	d828      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc2:	d02a      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc8:	d822      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006dca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006dce:	d026      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006dd0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006dd4:	d81c      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dda:	d010      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006ddc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006de0:	d816      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d01d      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006de6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dea:	d111      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3304      	adds	r3, #4
 8006df0:	2100      	movs	r1, #0
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fd24 	bl	8007840 <RCCEx_PLL2_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006dfc:	e012      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	3324      	adds	r3, #36	; 0x24
 8006e02:	2102      	movs	r1, #2
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 fdcd 	bl	80079a4 <RCCEx_PLL3_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006e0e:	e009      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	75fb      	strb	r3, [r7, #23]
      break;
 8006e14:	e006      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e16:	bf00      	nop
 8006e18:	e004      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e1a:	bf00      	nop
 8006e1c:	e002      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e1e:	bf00      	nop
 8006e20:	e000      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006e22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e24:	7dfb      	ldrb	r3, [r7, #23]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e2a:	4b8e      	ldr	r3, [pc, #568]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e38:	498a      	ldr	r1, [pc, #552]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	654b      	str	r3, [r1, #84]	; 0x54
 8006e3e:	e001      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e40:	7dfb      	ldrb	r3, [r7, #23]
 8006e42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d04b      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e56:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006e5a:	d02e      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006e5c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006e60:	d828      	bhi.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e66:	d02a      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e6c:	d822      	bhi.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006e6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e72:	d026      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006e74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e78:	d81c      	bhi.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e7e:	d010      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e84:	d816      	bhi.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d01d      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e8e:	d111      	bne.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	3304      	adds	r3, #4
 8006e94:	2100      	movs	r1, #0
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 fcd2 	bl	8007840 <RCCEx_PLL2_Config>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006ea0:	e012      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3324      	adds	r3, #36	; 0x24
 8006ea6:	2102      	movs	r1, #2
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fd7b 	bl	80079a4 <RCCEx_PLL3_Config>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006eb2:	e009      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb8:	e006      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006eba:	bf00      	nop
 8006ebc:	e004      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006ebe:	bf00      	nop
 8006ec0:	e002      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006ec2:	bf00      	nop
 8006ec4:	e000      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ece:	4b65      	ldr	r3, [pc, #404]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006edc:	4961      	ldr	r1, [pc, #388]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	658b      	str	r3, [r1, #88]	; 0x58
 8006ee2:	e001      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d04b      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006efa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006efe:	d02e      	beq.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006f00:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006f04:	d828      	bhi.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f0a:	d02a      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006f0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f10:	d822      	bhi.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f12:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006f16:	d026      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006f18:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006f1c:	d81c      	bhi.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f22:	d010      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006f24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f28:	d816      	bhi.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d01d      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006f2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f32:	d111      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3304      	adds	r3, #4
 8006f38:	2100      	movs	r1, #0
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fc80 	bl	8007840 <RCCEx_PLL2_Config>
 8006f40:	4603      	mov	r3, r0
 8006f42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006f44:	e012      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3324      	adds	r3, #36	; 0x24
 8006f4a:	2102      	movs	r1, #2
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 fd29 	bl	80079a4 <RCCEx_PLL3_Config>
 8006f52:	4603      	mov	r3, r0
 8006f54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006f56:	e009      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f5c:	e006      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006f5e:	bf00      	nop
 8006f60:	e004      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006f62:	bf00      	nop
 8006f64:	e002      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006f66:	bf00      	nop
 8006f68:	e000      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006f6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f6c:	7dfb      	ldrb	r3, [r7, #23]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10a      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006f72:	4b3c      	ldr	r3, [pc, #240]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f80:	4938      	ldr	r1, [pc, #224]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	658b      	str	r3, [r1, #88]	; 0x58
 8006f86:	e001      	b.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0308 	and.w	r3, r3, #8
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d01a      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa2:	d10a      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	3324      	adds	r3, #36	; 0x24
 8006fa8:	2102      	movs	r1, #2
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fcfa 	bl	80079a4 <RCCEx_PLL3_Config>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006fba:	4b2a      	ldr	r3, [pc, #168]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fc8:	4926      	ldr	r1, [pc, #152]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0310 	and.w	r3, r3, #16
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d01a      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fe4:	d10a      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	3324      	adds	r3, #36	; 0x24
 8006fea:	2102      	movs	r1, #2
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fcd9 	bl	80079a4 <RCCEx_PLL3_Config>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ffc:	4b19      	ldr	r3, [pc, #100]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007000:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800700a:	4916      	ldr	r1, [pc, #88]	; (8007064 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800700c:	4313      	orrs	r3, r2
 800700e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d036      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007022:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007026:	d01f      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800702c:	d817      	bhi.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007036:	d009      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007038:	e011      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	3304      	adds	r3, #4
 800703e:	2100      	movs	r1, #0
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fbfd 	bl	8007840 <RCCEx_PLL2_Config>
 8007046:	4603      	mov	r3, r0
 8007048:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800704a:	e00e      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3324      	adds	r3, #36	; 0x24
 8007050:	2102      	movs	r1, #2
 8007052:	4618      	mov	r0, r3
 8007054:	f000 fca6 	bl	80079a4 <RCCEx_PLL3_Config>
 8007058:	4603      	mov	r3, r0
 800705a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800705c:	e005      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	75fb      	strb	r3, [r7, #23]
      break;
 8007062:	e002      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007064:	58024400 	.word	0x58024400
      break;
 8007068:	bf00      	nop
    }

    if(ret == HAL_OK)
 800706a:	7dfb      	ldrb	r3, [r7, #23]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10a      	bne.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007070:	4b93      	ldr	r3, [pc, #588]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007074:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800707e:	4990      	ldr	r1, [pc, #576]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007080:	4313      	orrs	r3, r2
 8007082:	658b      	str	r3, [r1, #88]	; 0x58
 8007084:	e001      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007086:	7dfb      	ldrb	r3, [r7, #23]
 8007088:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d033      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800709c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070a0:	d01c      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80070a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070a6:	d816      	bhi.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80070a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ac:	d003      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80070ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070b2:	d007      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80070b4:	e00f      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070b6:	4b82      	ldr	r3, [pc, #520]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ba:	4a81      	ldr	r2, [pc, #516]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80070c2:	e00c      	b.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	3324      	adds	r3, #36	; 0x24
 80070c8:	2101      	movs	r1, #1
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 fc6a 	bl	80079a4 <RCCEx_PLL3_Config>
 80070d0:	4603      	mov	r3, r0
 80070d2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80070d4:	e003      	b.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	75fb      	strb	r3, [r7, #23]
      break;
 80070da:	e000      	b.n	80070de <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80070dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070de:	7dfb      	ldrb	r3, [r7, #23]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10a      	bne.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070e4:	4b76      	ldr	r3, [pc, #472]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070f2:	4973      	ldr	r1, [pc, #460]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	654b      	str	r3, [r1, #84]	; 0x54
 80070f8:	e001      	b.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
 80070fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d029      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007116:	d007      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007118:	e00f      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800711a:	4b69      	ldr	r3, [pc, #420]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800711c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800711e:	4a68      	ldr	r2, [pc, #416]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007124:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007126:	e00b      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3304      	adds	r3, #4
 800712c:	2102      	movs	r1, #2
 800712e:	4618      	mov	r0, r3
 8007130:	f000 fb86 	bl	8007840 <RCCEx_PLL2_Config>
 8007134:	4603      	mov	r3, r0
 8007136:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007138:	e002      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	75fb      	strb	r3, [r7, #23]
      break;
 800713e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007140:	7dfb      	ldrb	r3, [r7, #23]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d109      	bne.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007146:	4b5e      	ldr	r3, [pc, #376]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007152:	495b      	ldr	r1, [pc, #364]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007154:	4313      	orrs	r3, r2
 8007156:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007158:	e001      	b.n	800715e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800715a:	7dfb      	ldrb	r3, [r7, #23]
 800715c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	3324      	adds	r3, #36	; 0x24
 800716e:	2102      	movs	r1, #2
 8007170:	4618      	mov	r0, r3
 8007172:	f000 fc17 	bl	80079a4 <RCCEx_PLL3_Config>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d030      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007190:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007194:	d017      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800719a:	d811      	bhi.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800719c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a0:	d013      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80071a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a6:	d80b      	bhi.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d010      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80071ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b0:	d106      	bne.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071b2:	4b43      	ldr	r3, [pc, #268]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b6:	4a42      	ldr	r2, [pc, #264]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80071be:	e007      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	75fb      	strb	r3, [r7, #23]
      break;
 80071c4:	e004      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80071c6:	bf00      	nop
 80071c8:	e002      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80071ca:	bf00      	nop
 80071cc:	e000      	b.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80071ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071d0:	7dfb      	ldrb	r3, [r7, #23]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d109      	bne.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071d6:	4b3a      	ldr	r3, [pc, #232]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071e2:	4937      	ldr	r1, [pc, #220]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	654b      	str	r3, [r1, #84]	; 0x54
 80071e8:	e001      	b.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d008      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80071fa:	4b31      	ldr	r3, [pc, #196]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80071fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007206:	492e      	ldr	r1, [pc, #184]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007208:	4313      	orrs	r3, r2
 800720a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d009      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007218:	4b29      	ldr	r3, [pc, #164]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007226:	4926      	ldr	r1, [pc, #152]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007228:	4313      	orrs	r3, r2
 800722a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d008      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007238:	4b21      	ldr	r3, [pc, #132]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800723a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800723c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007244:	491e      	ldr	r1, [pc, #120]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007246:	4313      	orrs	r3, r2
 8007248:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00d      	beq.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007256:	4b1a      	ldr	r3, [pc, #104]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	4a19      	ldr	r2, [pc, #100]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800725c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007260:	6113      	str	r3, [r2, #16]
 8007262:	4b17      	ldr	r3, [pc, #92]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007264:	691a      	ldr	r2, [r3, #16]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800726c:	4914      	ldr	r1, [pc, #80]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800726e:	4313      	orrs	r3, r2
 8007270:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	da08      	bge.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800727a:	4b11      	ldr	r3, [pc, #68]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800727c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800727e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007286:	490e      	ldr	r1, [pc, #56]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007288:	4313      	orrs	r3, r2
 800728a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d009      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007298:	4b09      	ldr	r3, [pc, #36]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800729a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a6:	4906      	ldr	r1, [pc, #24]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80072ac:	7dbb      	ldrb	r3, [r7, #22]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	e000      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3718      	adds	r7, #24
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	58024400 	.word	0x58024400

080072c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80072c8:	f7ff f860 	bl	800638c <HAL_RCC_GetHCLKFreq>
 80072cc:	4602      	mov	r2, r0
 80072ce:	4b06      	ldr	r3, [pc, #24]	; (80072e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	091b      	lsrs	r3, r3, #4
 80072d4:	f003 0307 	and.w	r3, r3, #7
 80072d8:	4904      	ldr	r1, [pc, #16]	; (80072ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80072da:	5ccb      	ldrb	r3, [r1, r3]
 80072dc:	f003 031f 	and.w	r3, r3, #31
 80072e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	58024400 	.word	0x58024400
 80072ec:	0800b2c8 	.word	0x0800b2c8

080072f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b089      	sub	sp, #36	; 0x24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072f8:	4ba1      	ldr	r3, [pc, #644]	; (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fc:	f003 0303 	and.w	r3, r3, #3
 8007300:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007302:	4b9f      	ldr	r3, [pc, #636]	; (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007306:	0b1b      	lsrs	r3, r3, #12
 8007308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800730c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800730e:	4b9c      	ldr	r3, [pc, #624]	; (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007312:	091b      	lsrs	r3, r3, #4
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800731a:	4b99      	ldr	r3, [pc, #612]	; (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800731c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731e:	08db      	lsrs	r3, r3, #3
 8007320:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	fb02 f303 	mul.w	r3, r2, r3
 800732a:	ee07 3a90 	vmov	s15, r3
 800732e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007332:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 8111 	beq.w	8007560 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	2b02      	cmp	r3, #2
 8007342:	f000 8083 	beq.w	800744c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	2b02      	cmp	r3, #2
 800734a:	f200 80a1 	bhi.w	8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d003      	beq.n	800735c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d056      	beq.n	8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800735a:	e099      	b.n	8007490 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800735c:	4b88      	ldr	r3, [pc, #544]	; (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0320 	and.w	r3, r3, #32
 8007364:	2b00      	cmp	r3, #0
 8007366:	d02d      	beq.n	80073c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007368:	4b85      	ldr	r3, [pc, #532]	; (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	08db      	lsrs	r3, r3, #3
 800736e:	f003 0303 	and.w	r3, r3, #3
 8007372:	4a84      	ldr	r2, [pc, #528]	; (8007584 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007374:	fa22 f303 	lsr.w	r3, r2, r3
 8007378:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	ee07 3a90 	vmov	s15, r3
 8007380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007392:	4b7b      	ldr	r3, [pc, #492]	; (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800739a:	ee07 3a90 	vmov	s15, r3
 800739e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80073c2:	e087      	b.n	80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	ee07 3a90 	vmov	s15, r3
 80073ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800758c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80073d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073d6:	4b6a      	ldr	r3, [pc, #424]	; (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073de:	ee07 3a90 	vmov	s15, r3
 80073e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007402:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007406:	e065      	b.n	80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007412:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007416:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800741a:	4b59      	ldr	r3, [pc, #356]	; (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800741c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800742a:	ed97 6a03 	vldr	s12, [r7, #12]
 800742e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007432:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007436:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800743a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800743e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007442:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007446:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800744a:	e043      	b.n	80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007456:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007594 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800745a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800745e:	4b48      	ldr	r3, [pc, #288]	; (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007462:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007466:	ee07 3a90 	vmov	s15, r3
 800746a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800746e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007472:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800747a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800747e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800748a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800748e:	e021      	b.n	80074d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800749a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007590 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800749e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074a2:	4b37      	ldr	r3, [pc, #220]	; (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007588 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80074d4:	4b2a      	ldr	r3, [pc, #168]	; (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d8:	0a5b      	lsrs	r3, r3, #9
 80074da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80074f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074fa:	ee17 2a90 	vmov	r2, s15
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007502:	4b1f      	ldr	r3, [pc, #124]	; (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007506:	0c1b      	lsrs	r3, r3, #16
 8007508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800750c:	ee07 3a90 	vmov	s15, r3
 8007510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007514:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007518:	ee37 7a87 	vadd.f32	s14, s15, s14
 800751c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007528:	ee17 2a90 	vmov	r2, s15
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007530:	4b13      	ldr	r3, [pc, #76]	; (8007580 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007534:	0e1b      	lsrs	r3, r3, #24
 8007536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800753a:	ee07 3a90 	vmov	s15, r3
 800753e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007542:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007546:	ee37 7a87 	vadd.f32	s14, s15, s14
 800754a:	edd7 6a07 	vldr	s13, [r7, #28]
 800754e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007556:	ee17 2a90 	vmov	r2, s15
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800755e:	e008      	b.n	8007572 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	609a      	str	r2, [r3, #8]
}
 8007572:	bf00      	nop
 8007574:	3724      	adds	r7, #36	; 0x24
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop
 8007580:	58024400 	.word	0x58024400
 8007584:	03d09000 	.word	0x03d09000
 8007588:	46000000 	.word	0x46000000
 800758c:	4c742400 	.word	0x4c742400
 8007590:	4a742400 	.word	0x4a742400
 8007594:	4c371b00 	.word	0x4c371b00

08007598 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007598:	b480      	push	{r7}
 800759a:	b089      	sub	sp, #36	; 0x24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075a0:	4ba1      	ldr	r3, [pc, #644]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80075aa:	4b9f      	ldr	r3, [pc, #636]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ae:	0d1b      	lsrs	r3, r3, #20
 80075b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80075b6:	4b9c      	ldr	r3, [pc, #624]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ba:	0a1b      	lsrs	r3, r3, #8
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80075c2:	4b99      	ldr	r3, [pc, #612]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c6:	08db      	lsrs	r3, r3, #3
 80075c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	fb02 f303 	mul.w	r3, r2, r3
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f000 8111 	beq.w	8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	2b02      	cmp	r3, #2
 80075ea:	f000 8083 	beq.w	80076f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	f200 80a1 	bhi.w	8007738 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d056      	beq.n	80076b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007602:	e099      	b.n	8007738 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007604:	4b88      	ldr	r3, [pc, #544]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0320 	and.w	r3, r3, #32
 800760c:	2b00      	cmp	r3, #0
 800760e:	d02d      	beq.n	800766c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007610:	4b85      	ldr	r3, [pc, #532]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	08db      	lsrs	r3, r3, #3
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	4a84      	ldr	r2, [pc, #528]	; (800782c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800761c:	fa22 f303 	lsr.w	r3, r2, r3
 8007620:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	ee07 3a90 	vmov	s15, r3
 8007628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800763a:	4b7b      	ldr	r3, [pc, #492]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764a:	ed97 6a03 	vldr	s12, [r7, #12]
 800764e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800765a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800765e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007666:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800766a:	e087      	b.n	800777c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007676:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007834 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800767a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800767e:	4b6a      	ldr	r3, [pc, #424]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800768e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007692:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800769a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800769e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076ae:	e065      	b.n	800777c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007838 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c2:	4b59      	ldr	r3, [pc, #356]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076f2:	e043      	b.n	800777c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800783c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007706:	4b48      	ldr	r3, [pc, #288]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007716:	ed97 6a03 	vldr	s12, [r7, #12]
 800771a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800771e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800772a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800772e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007732:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007736:	e021      	b.n	800777c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	ee07 3a90 	vmov	s15, r3
 800773e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007742:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007838 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800774a:	4b37      	ldr	r3, [pc, #220]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800774c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007752:	ee07 3a90 	vmov	s15, r3
 8007756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800775a:	ed97 6a03 	vldr	s12, [r7, #12]
 800775e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007830 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800776a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800776e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007776:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800777a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800777c:	4b2a      	ldr	r3, [pc, #168]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800777e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007780:	0a5b      	lsrs	r3, r3, #9
 8007782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007786:	ee07 3a90 	vmov	s15, r3
 800778a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007792:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007796:	edd7 6a07 	vldr	s13, [r7, #28]
 800779a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800779e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077a2:	ee17 2a90 	vmov	r2, s15
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80077aa:	4b1f      	ldr	r3, [pc, #124]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ae:	0c1b      	lsrs	r3, r3, #16
 80077b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b4:	ee07 3a90 	vmov	s15, r3
 80077b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80077c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077d0:	ee17 2a90 	vmov	r2, s15
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80077d8:	4b13      	ldr	r3, [pc, #76]	; (8007828 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077dc:	0e1b      	lsrs	r3, r3, #24
 80077de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077e2:	ee07 3a90 	vmov	s15, r3
 80077e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077fe:	ee17 2a90 	vmov	r2, s15
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007806:	e008      	b.n	800781a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	609a      	str	r2, [r3, #8]
}
 800781a:	bf00      	nop
 800781c:	3724      	adds	r7, #36	; 0x24
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	58024400 	.word	0x58024400
 800782c:	03d09000 	.word	0x03d09000
 8007830:	46000000 	.word	0x46000000
 8007834:	4c742400 	.word	0x4c742400
 8007838:	4a742400 	.word	0x4a742400
 800783c:	4c371b00 	.word	0x4c371b00

08007840 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800784e:	4b53      	ldr	r3, [pc, #332]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 8007850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007852:	f003 0303 	and.w	r3, r3, #3
 8007856:	2b03      	cmp	r3, #3
 8007858:	d101      	bne.n	800785e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e099      	b.n	8007992 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800785e:	4b4f      	ldr	r3, [pc, #316]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a4e      	ldr	r2, [pc, #312]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 8007864:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800786a:	f7fa ffd7 	bl	800281c <HAL_GetTick>
 800786e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007870:	e008      	b.n	8007884 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007872:	f7fa ffd3 	bl	800281c <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d901      	bls.n	8007884 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e086      	b.n	8007992 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007884:	4b45      	ldr	r3, [pc, #276]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1f0      	bne.n	8007872 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007890:	4b42      	ldr	r3, [pc, #264]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 8007892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007894:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	031b      	lsls	r3, r3, #12
 800789e:	493f      	ldr	r1, [pc, #252]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	628b      	str	r3, [r1, #40]	; 0x28
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	025b      	lsls	r3, r3, #9
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	431a      	orrs	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	3b01      	subs	r3, #1
 80078c0:	041b      	lsls	r3, r3, #16
 80078c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80078c6:	431a      	orrs	r2, r3
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	061b      	lsls	r3, r3, #24
 80078d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80078d4:	4931      	ldr	r1, [pc, #196]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80078da:	4b30      	ldr	r3, [pc, #192]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 80078dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	492d      	ldr	r1, [pc, #180]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80078ec:	4b2b      	ldr	r3, [pc, #172]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 80078ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f0:	f023 0220 	bic.w	r2, r3, #32
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	4928      	ldr	r1, [pc, #160]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80078fe:	4b27      	ldr	r3, [pc, #156]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 8007900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007902:	4a26      	ldr	r2, [pc, #152]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 8007904:	f023 0310 	bic.w	r3, r3, #16
 8007908:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800790a:	4b24      	ldr	r3, [pc, #144]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 800790c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800790e:	4b24      	ldr	r3, [pc, #144]	; (80079a0 <RCCEx_PLL2_Config+0x160>)
 8007910:	4013      	ands	r3, r2
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	69d2      	ldr	r2, [r2, #28]
 8007916:	00d2      	lsls	r2, r2, #3
 8007918:	4920      	ldr	r1, [pc, #128]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 800791a:	4313      	orrs	r3, r2
 800791c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800791e:	4b1f      	ldr	r3, [pc, #124]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 8007920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007922:	4a1e      	ldr	r2, [pc, #120]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 8007924:	f043 0310 	orr.w	r3, r3, #16
 8007928:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d106      	bne.n	800793e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007930:	4b1a      	ldr	r3, [pc, #104]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	4a19      	ldr	r2, [pc, #100]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 8007936:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800793a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800793c:	e00f      	b.n	800795e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d106      	bne.n	8007952 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007944:	4b15      	ldr	r3, [pc, #84]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 8007946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007948:	4a14      	ldr	r2, [pc, #80]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 800794a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800794e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007950:	e005      	b.n	800795e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007952:	4b12      	ldr	r3, [pc, #72]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	4a11      	ldr	r2, [pc, #68]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 8007958:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800795c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800795e:	4b0f      	ldr	r3, [pc, #60]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a0e      	ldr	r2, [pc, #56]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 8007964:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007968:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800796a:	f7fa ff57 	bl	800281c <HAL_GetTick>
 800796e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007970:	e008      	b.n	8007984 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007972:	f7fa ff53 	bl	800281c <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	2b02      	cmp	r3, #2
 800797e:	d901      	bls.n	8007984 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e006      	b.n	8007992 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007984:	4b05      	ldr	r3, [pc, #20]	; (800799c <RCCEx_PLL2_Config+0x15c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d0f0      	beq.n	8007972 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007990:	7bfb      	ldrb	r3, [r7, #15]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	58024400 	.word	0x58024400
 80079a0:	ffff0007 	.word	0xffff0007

080079a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079b2:	4b53      	ldr	r3, [pc, #332]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 80079b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b6:	f003 0303 	and.w	r3, r3, #3
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d101      	bne.n	80079c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e099      	b.n	8007af6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80079c2:	4b4f      	ldr	r3, [pc, #316]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a4e      	ldr	r2, [pc, #312]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 80079c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ce:	f7fa ff25 	bl	800281c <HAL_GetTick>
 80079d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079d4:	e008      	b.n	80079e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80079d6:	f7fa ff21 	bl	800281c <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d901      	bls.n	80079e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e086      	b.n	8007af6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079e8:	4b45      	ldr	r3, [pc, #276]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1f0      	bne.n	80079d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80079f4:	4b42      	ldr	r3, [pc, #264]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 80079f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	051b      	lsls	r3, r3, #20
 8007a02:	493f      	ldr	r1, [pc, #252]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	628b      	str	r3, [r1, #40]	; 0x28
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	025b      	lsls	r3, r3, #9
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	041b      	lsls	r3, r3, #16
 8007a26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	061b      	lsls	r3, r3, #24
 8007a34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a38:	4931      	ldr	r1, [pc, #196]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007a3e:	4b30      	ldr	r3, [pc, #192]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	492d      	ldr	r1, [pc, #180]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007a50:	4b2b      	ldr	r3, [pc, #172]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	4928      	ldr	r1, [pc, #160]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007a62:	4b27      	ldr	r3, [pc, #156]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a66:	4a26      	ldr	r2, [pc, #152]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007a6e:	4b24      	ldr	r3, [pc, #144]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a72:	4b24      	ldr	r3, [pc, #144]	; (8007b04 <RCCEx_PLL3_Config+0x160>)
 8007a74:	4013      	ands	r3, r2
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	69d2      	ldr	r2, [r2, #28]
 8007a7a:	00d2      	lsls	r2, r2, #3
 8007a7c:	4920      	ldr	r1, [pc, #128]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007a82:	4b1f      	ldr	r3, [pc, #124]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a86:	4a1e      	ldr	r2, [pc, #120]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d106      	bne.n	8007aa2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a94:	4b1a      	ldr	r3, [pc, #104]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	4a19      	ldr	r2, [pc, #100]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007a9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007aa0:	e00f      	b.n	8007ac2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d106      	bne.n	8007ab6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007aa8:	4b15      	ldr	r3, [pc, #84]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aac:	4a14      	ldr	r2, [pc, #80]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007aae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ab2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ab4:	e005      	b.n	8007ac2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007ab6:	4b12      	ldr	r3, [pc, #72]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aba:	4a11      	ldr	r2, [pc, #68]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ac0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a0e      	ldr	r2, [pc, #56]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ace:	f7fa fea5 	bl	800281c <HAL_GetTick>
 8007ad2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ad4:	e008      	b.n	8007ae8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007ad6:	f7fa fea1 	bl	800281c <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d901      	bls.n	8007ae8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e006      	b.n	8007af6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ae8:	4b05      	ldr	r3, [pc, #20]	; (8007b00 <RCCEx_PLL3_Config+0x15c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0f0      	beq.n	8007ad6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	58024400 	.word	0x58024400
 8007b04:	ffff0007 	.word	0xffff0007

08007b08 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8007b10:	2300      	movs	r3, #0
 8007b12:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e0eb      	b.n	8007cf6 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a75      	ldr	r2, [pc, #468]	; (8007d00 <HAL_SPI_Init+0x1f8>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d00f      	beq.n	8007b4e <HAL_SPI_Init+0x46>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a74      	ldr	r2, [pc, #464]	; (8007d04 <HAL_SPI_Init+0x1fc>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d00a      	beq.n	8007b4e <HAL_SPI_Init+0x46>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a72      	ldr	r2, [pc, #456]	; (8007d08 <HAL_SPI_Init+0x200>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d005      	beq.n	8007b4e <HAL_SPI_Init+0x46>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	2b0f      	cmp	r3, #15
 8007b48:	d901      	bls.n	8007b4e <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e0d3      	b.n	8007cf6 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f8dc 	bl	8007d0c <SPI_GetPacketSize>
 8007b54:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a69      	ldr	r2, [pc, #420]	; (8007d00 <HAL_SPI_Init+0x1f8>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d00c      	beq.n	8007b7a <HAL_SPI_Init+0x72>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a67      	ldr	r2, [pc, #412]	; (8007d04 <HAL_SPI_Init+0x1fc>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d007      	beq.n	8007b7a <HAL_SPI_Init+0x72>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a66      	ldr	r2, [pc, #408]	; (8007d08 <HAL_SPI_Init+0x200>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d002      	beq.n	8007b7a <HAL_SPI_Init+0x72>
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b08      	cmp	r3, #8
 8007b78:	d811      	bhi.n	8007b9e <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007b7e:	4a60      	ldr	r2, [pc, #384]	; (8007d00 <HAL_SPI_Init+0x1f8>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d009      	beq.n	8007b98 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a5e      	ldr	r2, [pc, #376]	; (8007d04 <HAL_SPI_Init+0x1fc>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d004      	beq.n	8007b98 <HAL_SPI_Init+0x90>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a5d      	ldr	r2, [pc, #372]	; (8007d08 <HAL_SPI_Init+0x200>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d104      	bne.n	8007ba2 <HAL_SPI_Init+0x9a>
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2b10      	cmp	r3, #16
 8007b9c:	d901      	bls.n	8007ba2 <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e0a9      	b.n	8007cf6 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d106      	bne.n	8007bbc <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7fa f8c8 	bl	8001d4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2202      	movs	r2, #2
 8007bc0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 0201 	bic.w	r2, r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bdc:	d119      	bne.n	8007c12 <HAL_SPI_Init+0x10a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007be6:	d103      	bne.n	8007bf0 <HAL_SPI_Init+0xe8>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d008      	beq.n	8007c02 <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10c      	bne.n	8007c12 <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c00:	d107      	bne.n	8007c12 <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	69da      	ldr	r2, [r3, #28]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c24:	ea42 0103 	orr.w	r1, r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	68da      	ldr	r2, [r3, #12]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	430a      	orrs	r2, r1
 8007c32:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	431a      	orrs	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c42:	431a      	orrs	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	431a      	orrs	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	431a      	orrs	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	431a      	orrs	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c66:	431a      	orrs	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c72:	ea42 0103 	orr.w	r1, r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d113      	bne.n	8007cb2 <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c9c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cb0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f022 0201 	bic.w	r2, r2, #1
 8007cc0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	40013000 	.word	0x40013000
 8007d04:	40003800 	.word	0x40003800
 8007d08:	40003c00 	.word	0x40003c00

08007d0c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d18:	095b      	lsrs	r3, r3, #5
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	3301      	adds	r3, #1
 8007d24:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	3307      	adds	r3, #7
 8007d2a:	08db      	lsrs	r3, r3, #3
 8007d2c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	fb02 f303 	mul.w	r3, r2, r3
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b082      	sub	sp, #8
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d50:	2301      	movs	r3, #1
 8007d52:	e049      	b.n	8007de8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d106      	bne.n	8007d6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7fa f855 	bl	8001e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2202      	movs	r2, #2
 8007d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3304      	adds	r3, #4
 8007d7e:	4619      	mov	r1, r3
 8007d80:	4610      	mov	r0, r2
 8007d82:	f000 fceb 	bl	800875c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e049      	b.n	8007e96 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d106      	bne.n	8007e1c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f841 	bl	8007e9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	4610      	mov	r0, r2
 8007e30:	f000 fc94 	bl	800875c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007e9e:	b480      	push	{r7}
 8007ea0:	b083      	sub	sp, #12
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
	...

08007eb4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d109      	bne.n	8007ed8 <HAL_TIM_PWM_Start+0x24>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	bf14      	ite	ne
 8007ed0:	2301      	movne	r3, #1
 8007ed2:	2300      	moveq	r3, #0
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	e03c      	b.n	8007f52 <HAL_TIM_PWM_Start+0x9e>
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d109      	bne.n	8007ef2 <HAL_TIM_PWM_Start+0x3e>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	bf14      	ite	ne
 8007eea:	2301      	movne	r3, #1
 8007eec:	2300      	moveq	r3, #0
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	e02f      	b.n	8007f52 <HAL_TIM_PWM_Start+0x9e>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b08      	cmp	r3, #8
 8007ef6:	d109      	bne.n	8007f0c <HAL_TIM_PWM_Start+0x58>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	bf14      	ite	ne
 8007f04:	2301      	movne	r3, #1
 8007f06:	2300      	moveq	r3, #0
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	e022      	b.n	8007f52 <HAL_TIM_PWM_Start+0x9e>
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2b0c      	cmp	r3, #12
 8007f10:	d109      	bne.n	8007f26 <HAL_TIM_PWM_Start+0x72>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	bf14      	ite	ne
 8007f1e:	2301      	movne	r3, #1
 8007f20:	2300      	moveq	r3, #0
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	e015      	b.n	8007f52 <HAL_TIM_PWM_Start+0x9e>
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b10      	cmp	r3, #16
 8007f2a:	d109      	bne.n	8007f40 <HAL_TIM_PWM_Start+0x8c>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	bf14      	ite	ne
 8007f38:	2301      	movne	r3, #1
 8007f3a:	2300      	moveq	r3, #0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	e008      	b.n	8007f52 <HAL_TIM_PWM_Start+0x9e>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	bf14      	ite	ne
 8007f4c:	2301      	movne	r3, #1
 8007f4e:	2300      	moveq	r3, #0
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e09c      	b.n	8008094 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d104      	bne.n	8007f6a <HAL_TIM_PWM_Start+0xb6>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f68:	e023      	b.n	8007fb2 <HAL_TIM_PWM_Start+0xfe>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	d104      	bne.n	8007f7a <HAL_TIM_PWM_Start+0xc6>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f78:	e01b      	b.n	8007fb2 <HAL_TIM_PWM_Start+0xfe>
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d104      	bne.n	8007f8a <HAL_TIM_PWM_Start+0xd6>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2202      	movs	r2, #2
 8007f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f88:	e013      	b.n	8007fb2 <HAL_TIM_PWM_Start+0xfe>
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	2b0c      	cmp	r3, #12
 8007f8e:	d104      	bne.n	8007f9a <HAL_TIM_PWM_Start+0xe6>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2202      	movs	r2, #2
 8007f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f98:	e00b      	b.n	8007fb2 <HAL_TIM_PWM_Start+0xfe>
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b10      	cmp	r3, #16
 8007f9e:	d104      	bne.n	8007faa <HAL_TIM_PWM_Start+0xf6>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2202      	movs	r2, #2
 8007fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fa8:	e003      	b.n	8007fb2 <HAL_TIM_PWM_Start+0xfe>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2202      	movs	r2, #2
 8007fae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 ffd4 	bl	8008f68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a35      	ldr	r2, [pc, #212]	; (800809c <HAL_TIM_PWM_Start+0x1e8>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d013      	beq.n	8007ff2 <HAL_TIM_PWM_Start+0x13e>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a34      	ldr	r2, [pc, #208]	; (80080a0 <HAL_TIM_PWM_Start+0x1ec>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d00e      	beq.n	8007ff2 <HAL_TIM_PWM_Start+0x13e>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a32      	ldr	r2, [pc, #200]	; (80080a4 <HAL_TIM_PWM_Start+0x1f0>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d009      	beq.n	8007ff2 <HAL_TIM_PWM_Start+0x13e>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a31      	ldr	r2, [pc, #196]	; (80080a8 <HAL_TIM_PWM_Start+0x1f4>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d004      	beq.n	8007ff2 <HAL_TIM_PWM_Start+0x13e>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a2f      	ldr	r2, [pc, #188]	; (80080ac <HAL_TIM_PWM_Start+0x1f8>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d101      	bne.n	8007ff6 <HAL_TIM_PWM_Start+0x142>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e000      	b.n	8007ff8 <HAL_TIM_PWM_Start+0x144>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d007      	beq.n	800800c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800800a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a22      	ldr	r2, [pc, #136]	; (800809c <HAL_TIM_PWM_Start+0x1e8>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d01d      	beq.n	8008052 <HAL_TIM_PWM_Start+0x19e>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800801e:	d018      	beq.n	8008052 <HAL_TIM_PWM_Start+0x19e>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a22      	ldr	r2, [pc, #136]	; (80080b0 <HAL_TIM_PWM_Start+0x1fc>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d013      	beq.n	8008052 <HAL_TIM_PWM_Start+0x19e>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a21      	ldr	r2, [pc, #132]	; (80080b4 <HAL_TIM_PWM_Start+0x200>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d00e      	beq.n	8008052 <HAL_TIM_PWM_Start+0x19e>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a1f      	ldr	r2, [pc, #124]	; (80080b8 <HAL_TIM_PWM_Start+0x204>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d009      	beq.n	8008052 <HAL_TIM_PWM_Start+0x19e>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a17      	ldr	r2, [pc, #92]	; (80080a0 <HAL_TIM_PWM_Start+0x1ec>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d004      	beq.n	8008052 <HAL_TIM_PWM_Start+0x19e>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a1b      	ldr	r2, [pc, #108]	; (80080bc <HAL_TIM_PWM_Start+0x208>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d115      	bne.n	800807e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689a      	ldr	r2, [r3, #8]
 8008058:	4b19      	ldr	r3, [pc, #100]	; (80080c0 <HAL_TIM_PWM_Start+0x20c>)
 800805a:	4013      	ands	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b06      	cmp	r3, #6
 8008062:	d015      	beq.n	8008090 <HAL_TIM_PWM_Start+0x1dc>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800806a:	d011      	beq.n	8008090 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0201 	orr.w	r2, r2, #1
 800807a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800807c:	e008      	b.n	8008090 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f042 0201 	orr.w	r2, r2, #1
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	e000      	b.n	8008092 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008090:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	40010000 	.word	0x40010000
 80080a0:	40010400 	.word	0x40010400
 80080a4:	40014000 	.word	0x40014000
 80080a8:	40014400 	.word	0x40014400
 80080ac:	40014800 	.word	0x40014800
 80080b0:	40000400 	.word	0x40000400
 80080b4:	40000800 	.word	0x40000800
 80080b8:	40000c00 	.word	0x40000c00
 80080bc:	40001800 	.word	0x40001800
 80080c0:	00010007 	.word	0x00010007

080080c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f003 0302 	and.w	r3, r3, #2
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d122      	bne.n	8008120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d11b      	bne.n	8008120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0202 	mvn.w	r2, #2
 80080f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	f003 0303 	and.w	r3, r3, #3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fb0a 	bl	8008720 <HAL_TIM_IC_CaptureCallback>
 800810c:	e005      	b.n	800811a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fafc 	bl	800870c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fb0d 	bl	8008734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	f003 0304 	and.w	r3, r3, #4
 800812a:	2b04      	cmp	r3, #4
 800812c:	d122      	bne.n	8008174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b04      	cmp	r3, #4
 800813a:	d11b      	bne.n	8008174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f06f 0204 	mvn.w	r2, #4
 8008144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2202      	movs	r2, #2
 800814a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008156:	2b00      	cmp	r3, #0
 8008158:	d003      	beq.n	8008162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fae0 	bl	8008720 <HAL_TIM_IC_CaptureCallback>
 8008160:	e005      	b.n	800816e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fad2 	bl	800870c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fae3 	bl	8008734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f003 0308 	and.w	r3, r3, #8
 800817e:	2b08      	cmp	r3, #8
 8008180:	d122      	bne.n	80081c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	f003 0308 	and.w	r3, r3, #8
 800818c:	2b08      	cmp	r3, #8
 800818e:	d11b      	bne.n	80081c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f06f 0208 	mvn.w	r2, #8
 8008198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2204      	movs	r2, #4
 800819e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	f003 0303 	and.w	r3, r3, #3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fab6 	bl	8008720 <HAL_TIM_IC_CaptureCallback>
 80081b4:	e005      	b.n	80081c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 faa8 	bl	800870c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fab9 	bl	8008734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	f003 0310 	and.w	r3, r3, #16
 80081d2:	2b10      	cmp	r3, #16
 80081d4:	d122      	bne.n	800821c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	f003 0310 	and.w	r3, r3, #16
 80081e0:	2b10      	cmp	r3, #16
 80081e2:	d11b      	bne.n	800821c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f06f 0210 	mvn.w	r2, #16
 80081ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2208      	movs	r2, #8
 80081f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fa8c 	bl	8008720 <HAL_TIM_IC_CaptureCallback>
 8008208:	e005      	b.n	8008216 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fa7e 	bl	800870c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fa8f 	bl	8008734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b01      	cmp	r3, #1
 8008228:	d10e      	bne.n	8008248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b01      	cmp	r3, #1
 8008236:	d107      	bne.n	8008248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f06f 0201 	mvn.w	r2, #1
 8008240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7f9 fd37 	bl	8001cb6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008252:	2b80      	cmp	r3, #128	; 0x80
 8008254:	d10e      	bne.n	8008274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008260:	2b80      	cmp	r3, #128	; 0x80
 8008262:	d107      	bne.n	8008274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800826c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 ffb0 	bl	80091d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008282:	d10e      	bne.n	80082a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800828e:	2b80      	cmp	r3, #128	; 0x80
 8008290:	d107      	bne.n	80082a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800829a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 ffa3 	bl	80091e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ac:	2b40      	cmp	r3, #64	; 0x40
 80082ae:	d10e      	bne.n	80082ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ba:	2b40      	cmp	r3, #64	; 0x40
 80082bc:	d107      	bne.n	80082ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 fa3d 	bl	8008748 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	f003 0320 	and.w	r3, r3, #32
 80082d8:	2b20      	cmp	r3, #32
 80082da:	d10e      	bne.n	80082fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f003 0320 	and.w	r3, r3, #32
 80082e6:	2b20      	cmp	r3, #32
 80082e8:	d107      	bne.n	80082fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f06f 0220 	mvn.w	r2, #32
 80082f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 ff63 	bl	80091c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082fa:	bf00      	nop
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008316:	2b01      	cmp	r3, #1
 8008318:	d101      	bne.n	800831e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800831a:	2302      	movs	r3, #2
 800831c:	e0fd      	b.n	800851a <HAL_TIM_PWM_ConfigChannel+0x216>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b14      	cmp	r3, #20
 800832a:	f200 80f0 	bhi.w	800850e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800832e:	a201      	add	r2, pc, #4	; (adr r2, 8008334 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008334:	08008389 	.word	0x08008389
 8008338:	0800850f 	.word	0x0800850f
 800833c:	0800850f 	.word	0x0800850f
 8008340:	0800850f 	.word	0x0800850f
 8008344:	080083c9 	.word	0x080083c9
 8008348:	0800850f 	.word	0x0800850f
 800834c:	0800850f 	.word	0x0800850f
 8008350:	0800850f 	.word	0x0800850f
 8008354:	0800840b 	.word	0x0800840b
 8008358:	0800850f 	.word	0x0800850f
 800835c:	0800850f 	.word	0x0800850f
 8008360:	0800850f 	.word	0x0800850f
 8008364:	0800844b 	.word	0x0800844b
 8008368:	0800850f 	.word	0x0800850f
 800836c:	0800850f 	.word	0x0800850f
 8008370:	0800850f 	.word	0x0800850f
 8008374:	0800848d 	.word	0x0800848d
 8008378:	0800850f 	.word	0x0800850f
 800837c:	0800850f 	.word	0x0800850f
 8008380:	0800850f 	.word	0x0800850f
 8008384:	080084cd 	.word	0x080084cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68b9      	ldr	r1, [r7, #8]
 800838e:	4618      	mov	r0, r3
 8008390:	f000 fa7e 	bl	8008890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	699a      	ldr	r2, [r3, #24]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f042 0208 	orr.w	r2, r2, #8
 80083a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	699a      	ldr	r2, [r3, #24]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f022 0204 	bic.w	r2, r2, #4
 80083b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6999      	ldr	r1, [r3, #24]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	691a      	ldr	r2, [r3, #16]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	619a      	str	r2, [r3, #24]
      break;
 80083c6:	e0a3      	b.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68b9      	ldr	r1, [r7, #8]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f000 faee 	bl	80089b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	699a      	ldr	r2, [r3, #24]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	699a      	ldr	r2, [r3, #24]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	6999      	ldr	r1, [r3, #24]
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	021a      	lsls	r2, r3, #8
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	619a      	str	r2, [r3, #24]
      break;
 8008408:	e082      	b.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68b9      	ldr	r1, [r7, #8]
 8008410:	4618      	mov	r0, r3
 8008412:	f000 fb57 	bl	8008ac4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69da      	ldr	r2, [r3, #28]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f042 0208 	orr.w	r2, r2, #8
 8008424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	69da      	ldr	r2, [r3, #28]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 0204 	bic.w	r2, r2, #4
 8008434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	69d9      	ldr	r1, [r3, #28]
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	691a      	ldr	r2, [r3, #16]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	430a      	orrs	r2, r1
 8008446:	61da      	str	r2, [r3, #28]
      break;
 8008448:	e062      	b.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68b9      	ldr	r1, [r7, #8]
 8008450:	4618      	mov	r0, r3
 8008452:	f000 fbbd 	bl	8008bd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	69da      	ldr	r2, [r3, #28]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69da      	ldr	r2, [r3, #28]
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	69d9      	ldr	r1, [r3, #28]
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	021a      	lsls	r2, r3, #8
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	430a      	orrs	r2, r1
 8008488:	61da      	str	r2, [r3, #28]
      break;
 800848a:	e041      	b.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68b9      	ldr	r1, [r7, #8]
 8008492:	4618      	mov	r0, r3
 8008494:	f000 fc04 	bl	8008ca0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f042 0208 	orr.w	r2, r2, #8
 80084a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f022 0204 	bic.w	r2, r2, #4
 80084b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	691a      	ldr	r2, [r3, #16]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80084ca:	e021      	b.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68b9      	ldr	r1, [r7, #8]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 fc46 	bl	8008d64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	021a      	lsls	r2, r3, #8
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	430a      	orrs	r2, r1
 800850a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800850c:	e000      	b.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800850e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop

08008524 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008534:	2b01      	cmp	r3, #1
 8008536:	d101      	bne.n	800853c <HAL_TIM_ConfigClockSource+0x18>
 8008538:	2302      	movs	r3, #2
 800853a:	e0db      	b.n	80086f4 <HAL_TIM_ConfigClockSource+0x1d0>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2202      	movs	r2, #2
 8008548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	4b69      	ldr	r3, [pc, #420]	; (80086fc <HAL_TIM_ConfigClockSource+0x1d8>)
 8008558:	4013      	ands	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008562:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a63      	ldr	r2, [pc, #396]	; (8008700 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008572:	4293      	cmp	r3, r2
 8008574:	f000 80a9 	beq.w	80086ca <HAL_TIM_ConfigClockSource+0x1a6>
 8008578:	4a61      	ldr	r2, [pc, #388]	; (8008700 <HAL_TIM_ConfigClockSource+0x1dc>)
 800857a:	4293      	cmp	r3, r2
 800857c:	f200 80ae 	bhi.w	80086dc <HAL_TIM_ConfigClockSource+0x1b8>
 8008580:	4a60      	ldr	r2, [pc, #384]	; (8008704 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008582:	4293      	cmp	r3, r2
 8008584:	f000 80a1 	beq.w	80086ca <HAL_TIM_ConfigClockSource+0x1a6>
 8008588:	4a5e      	ldr	r2, [pc, #376]	; (8008704 <HAL_TIM_ConfigClockSource+0x1e0>)
 800858a:	4293      	cmp	r3, r2
 800858c:	f200 80a6 	bhi.w	80086dc <HAL_TIM_ConfigClockSource+0x1b8>
 8008590:	4a5d      	ldr	r2, [pc, #372]	; (8008708 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008592:	4293      	cmp	r3, r2
 8008594:	f000 8099 	beq.w	80086ca <HAL_TIM_ConfigClockSource+0x1a6>
 8008598:	4a5b      	ldr	r2, [pc, #364]	; (8008708 <HAL_TIM_ConfigClockSource+0x1e4>)
 800859a:	4293      	cmp	r3, r2
 800859c:	f200 809e 	bhi.w	80086dc <HAL_TIM_ConfigClockSource+0x1b8>
 80085a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80085a4:	f000 8091 	beq.w	80086ca <HAL_TIM_ConfigClockSource+0x1a6>
 80085a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80085ac:	f200 8096 	bhi.w	80086dc <HAL_TIM_ConfigClockSource+0x1b8>
 80085b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085b4:	f000 8089 	beq.w	80086ca <HAL_TIM_ConfigClockSource+0x1a6>
 80085b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085bc:	f200 808e 	bhi.w	80086dc <HAL_TIM_ConfigClockSource+0x1b8>
 80085c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085c4:	d03e      	beq.n	8008644 <HAL_TIM_ConfigClockSource+0x120>
 80085c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ca:	f200 8087 	bhi.w	80086dc <HAL_TIM_ConfigClockSource+0x1b8>
 80085ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085d2:	f000 8085 	beq.w	80086e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80085d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085da:	d87f      	bhi.n	80086dc <HAL_TIM_ConfigClockSource+0x1b8>
 80085dc:	2b70      	cmp	r3, #112	; 0x70
 80085de:	d01a      	beq.n	8008616 <HAL_TIM_ConfigClockSource+0xf2>
 80085e0:	2b70      	cmp	r3, #112	; 0x70
 80085e2:	d87b      	bhi.n	80086dc <HAL_TIM_ConfigClockSource+0x1b8>
 80085e4:	2b60      	cmp	r3, #96	; 0x60
 80085e6:	d050      	beq.n	800868a <HAL_TIM_ConfigClockSource+0x166>
 80085e8:	2b60      	cmp	r3, #96	; 0x60
 80085ea:	d877      	bhi.n	80086dc <HAL_TIM_ConfigClockSource+0x1b8>
 80085ec:	2b50      	cmp	r3, #80	; 0x50
 80085ee:	d03c      	beq.n	800866a <HAL_TIM_ConfigClockSource+0x146>
 80085f0:	2b50      	cmp	r3, #80	; 0x50
 80085f2:	d873      	bhi.n	80086dc <HAL_TIM_ConfigClockSource+0x1b8>
 80085f4:	2b40      	cmp	r3, #64	; 0x40
 80085f6:	d058      	beq.n	80086aa <HAL_TIM_ConfigClockSource+0x186>
 80085f8:	2b40      	cmp	r3, #64	; 0x40
 80085fa:	d86f      	bhi.n	80086dc <HAL_TIM_ConfigClockSource+0x1b8>
 80085fc:	2b30      	cmp	r3, #48	; 0x30
 80085fe:	d064      	beq.n	80086ca <HAL_TIM_ConfigClockSource+0x1a6>
 8008600:	2b30      	cmp	r3, #48	; 0x30
 8008602:	d86b      	bhi.n	80086dc <HAL_TIM_ConfigClockSource+0x1b8>
 8008604:	2b20      	cmp	r3, #32
 8008606:	d060      	beq.n	80086ca <HAL_TIM_ConfigClockSource+0x1a6>
 8008608:	2b20      	cmp	r3, #32
 800860a:	d867      	bhi.n	80086dc <HAL_TIM_ConfigClockSource+0x1b8>
 800860c:	2b00      	cmp	r3, #0
 800860e:	d05c      	beq.n	80086ca <HAL_TIM_ConfigClockSource+0x1a6>
 8008610:	2b10      	cmp	r3, #16
 8008612:	d05a      	beq.n	80086ca <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008614:	e062      	b.n	80086dc <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6818      	ldr	r0, [r3, #0]
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	6899      	ldr	r1, [r3, #8]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	f000 fc7f 	bl	8008f28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008638:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	609a      	str	r2, [r3, #8]
      break;
 8008642:	e04e      	b.n	80086e2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6818      	ldr	r0, [r3, #0]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	6899      	ldr	r1, [r3, #8]
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	685a      	ldr	r2, [r3, #4]
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	f000 fc68 	bl	8008f28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	689a      	ldr	r2, [r3, #8]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008666:	609a      	str	r2, [r3, #8]
      break;
 8008668:	e03b      	b.n	80086e2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6818      	ldr	r0, [r3, #0]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	6859      	ldr	r1, [r3, #4]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	461a      	mov	r2, r3
 8008678:	f000 fbd8 	bl	8008e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2150      	movs	r1, #80	; 0x50
 8008682:	4618      	mov	r0, r3
 8008684:	f000 fc32 	bl	8008eec <TIM_ITRx_SetConfig>
      break;
 8008688:	e02b      	b.n	80086e2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6818      	ldr	r0, [r3, #0]
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	6859      	ldr	r1, [r3, #4]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	461a      	mov	r2, r3
 8008698:	f000 fbf7 	bl	8008e8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2160      	movs	r1, #96	; 0x60
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 fc22 	bl	8008eec <TIM_ITRx_SetConfig>
      break;
 80086a8:	e01b      	b.n	80086e2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6818      	ldr	r0, [r3, #0]
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	6859      	ldr	r1, [r3, #4]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	461a      	mov	r2, r3
 80086b8:	f000 fbb8 	bl	8008e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2140      	movs	r1, #64	; 0x40
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 fc12 	bl	8008eec <TIM_ITRx_SetConfig>
      break;
 80086c8:	e00b      	b.n	80086e2 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4619      	mov	r1, r3
 80086d4:	4610      	mov	r0, r2
 80086d6:	f000 fc09 	bl	8008eec <TIM_ITRx_SetConfig>
        break;
 80086da:	e002      	b.n	80086e2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80086dc:	bf00      	nop
 80086de:	e000      	b.n	80086e2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80086e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	ffceff88 	.word	0xffceff88
 8008700:	00100040 	.word	0x00100040
 8008704:	00100030 	.word	0x00100030
 8008708:	00100020 	.word	0x00100020

0800870c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a40      	ldr	r2, [pc, #256]	; (8008870 <TIM_Base_SetConfig+0x114>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d013      	beq.n	800879c <TIM_Base_SetConfig+0x40>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800877a:	d00f      	beq.n	800879c <TIM_Base_SetConfig+0x40>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a3d      	ldr	r2, [pc, #244]	; (8008874 <TIM_Base_SetConfig+0x118>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d00b      	beq.n	800879c <TIM_Base_SetConfig+0x40>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a3c      	ldr	r2, [pc, #240]	; (8008878 <TIM_Base_SetConfig+0x11c>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d007      	beq.n	800879c <TIM_Base_SetConfig+0x40>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a3b      	ldr	r2, [pc, #236]	; (800887c <TIM_Base_SetConfig+0x120>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d003      	beq.n	800879c <TIM_Base_SetConfig+0x40>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a3a      	ldr	r2, [pc, #232]	; (8008880 <TIM_Base_SetConfig+0x124>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d108      	bne.n	80087ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a2f      	ldr	r2, [pc, #188]	; (8008870 <TIM_Base_SetConfig+0x114>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d01f      	beq.n	80087f6 <TIM_Base_SetConfig+0x9a>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087bc:	d01b      	beq.n	80087f6 <TIM_Base_SetConfig+0x9a>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a2c      	ldr	r2, [pc, #176]	; (8008874 <TIM_Base_SetConfig+0x118>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d017      	beq.n	80087f6 <TIM_Base_SetConfig+0x9a>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a2b      	ldr	r2, [pc, #172]	; (8008878 <TIM_Base_SetConfig+0x11c>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d013      	beq.n	80087f6 <TIM_Base_SetConfig+0x9a>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a2a      	ldr	r2, [pc, #168]	; (800887c <TIM_Base_SetConfig+0x120>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d00f      	beq.n	80087f6 <TIM_Base_SetConfig+0x9a>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a29      	ldr	r2, [pc, #164]	; (8008880 <TIM_Base_SetConfig+0x124>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d00b      	beq.n	80087f6 <TIM_Base_SetConfig+0x9a>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a28      	ldr	r2, [pc, #160]	; (8008884 <TIM_Base_SetConfig+0x128>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d007      	beq.n	80087f6 <TIM_Base_SetConfig+0x9a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a27      	ldr	r2, [pc, #156]	; (8008888 <TIM_Base_SetConfig+0x12c>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d003      	beq.n	80087f6 <TIM_Base_SetConfig+0x9a>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a26      	ldr	r2, [pc, #152]	; (800888c <TIM_Base_SetConfig+0x130>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d108      	bne.n	8008808 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	4313      	orrs	r3, r2
 8008806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	4313      	orrs	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	689a      	ldr	r2, [r3, #8]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a10      	ldr	r2, [pc, #64]	; (8008870 <TIM_Base_SetConfig+0x114>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d00f      	beq.n	8008854 <TIM_Base_SetConfig+0xf8>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4a12      	ldr	r2, [pc, #72]	; (8008880 <TIM_Base_SetConfig+0x124>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d00b      	beq.n	8008854 <TIM_Base_SetConfig+0xf8>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4a11      	ldr	r2, [pc, #68]	; (8008884 <TIM_Base_SetConfig+0x128>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d007      	beq.n	8008854 <TIM_Base_SetConfig+0xf8>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a10      	ldr	r2, [pc, #64]	; (8008888 <TIM_Base_SetConfig+0x12c>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d003      	beq.n	8008854 <TIM_Base_SetConfig+0xf8>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	4a0f      	ldr	r2, [pc, #60]	; (800888c <TIM_Base_SetConfig+0x130>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d103      	bne.n	800885c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	691a      	ldr	r2, [r3, #16]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	615a      	str	r2, [r3, #20]
}
 8008862:	bf00      	nop
 8008864:	3714      	adds	r7, #20
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop
 8008870:	40010000 	.word	0x40010000
 8008874:	40000400 	.word	0x40000400
 8008878:	40000800 	.word	0x40000800
 800887c:	40000c00 	.word	0x40000c00
 8008880:	40010400 	.word	0x40010400
 8008884:	40014000 	.word	0x40014000
 8008888:	40014400 	.word	0x40014400
 800888c:	40014800 	.word	0x40014800

08008890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008890:	b480      	push	{r7}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	f023 0201 	bic.w	r2, r3, #1
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a1b      	ldr	r3, [r3, #32]
 80088aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	4b37      	ldr	r3, [pc, #220]	; (8008998 <TIM_OC1_SetConfig+0x108>)
 80088bc:	4013      	ands	r3, r2
 80088be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f023 0303 	bic.w	r3, r3, #3
 80088c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f023 0302 	bic.w	r3, r3, #2
 80088d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	4313      	orrs	r3, r2
 80088e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a2d      	ldr	r2, [pc, #180]	; (800899c <TIM_OC1_SetConfig+0x10c>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d00f      	beq.n	800890c <TIM_OC1_SetConfig+0x7c>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	4a2c      	ldr	r2, [pc, #176]	; (80089a0 <TIM_OC1_SetConfig+0x110>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d00b      	beq.n	800890c <TIM_OC1_SetConfig+0x7c>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a2b      	ldr	r2, [pc, #172]	; (80089a4 <TIM_OC1_SetConfig+0x114>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d007      	beq.n	800890c <TIM_OC1_SetConfig+0x7c>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4a2a      	ldr	r2, [pc, #168]	; (80089a8 <TIM_OC1_SetConfig+0x118>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d003      	beq.n	800890c <TIM_OC1_SetConfig+0x7c>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a29      	ldr	r2, [pc, #164]	; (80089ac <TIM_OC1_SetConfig+0x11c>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d10c      	bne.n	8008926 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f023 0308 	bic.w	r3, r3, #8
 8008912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	68db      	ldr	r3, [r3, #12]
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	4313      	orrs	r3, r2
 800891c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f023 0304 	bic.w	r3, r3, #4
 8008924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a1c      	ldr	r2, [pc, #112]	; (800899c <TIM_OC1_SetConfig+0x10c>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d00f      	beq.n	800894e <TIM_OC1_SetConfig+0xbe>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a1b      	ldr	r2, [pc, #108]	; (80089a0 <TIM_OC1_SetConfig+0x110>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d00b      	beq.n	800894e <TIM_OC1_SetConfig+0xbe>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a1a      	ldr	r2, [pc, #104]	; (80089a4 <TIM_OC1_SetConfig+0x114>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d007      	beq.n	800894e <TIM_OC1_SetConfig+0xbe>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a19      	ldr	r2, [pc, #100]	; (80089a8 <TIM_OC1_SetConfig+0x118>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d003      	beq.n	800894e <TIM_OC1_SetConfig+0xbe>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a18      	ldr	r2, [pc, #96]	; (80089ac <TIM_OC1_SetConfig+0x11c>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d111      	bne.n	8008972 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800895c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	4313      	orrs	r3, r2
 8008966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	4313      	orrs	r3, r2
 8008970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	685a      	ldr	r2, [r3, #4]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	621a      	str	r2, [r3, #32]
}
 800898c:	bf00      	nop
 800898e:	371c      	adds	r7, #28
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	fffeff8f 	.word	0xfffeff8f
 800899c:	40010000 	.word	0x40010000
 80089a0:	40010400 	.word	0x40010400
 80089a4:	40014000 	.word	0x40014000
 80089a8:	40014400 	.word	0x40014400
 80089ac:	40014800 	.word	0x40014800

080089b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	f023 0210 	bic.w	r2, r3, #16
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	699b      	ldr	r3, [r3, #24]
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	4b34      	ldr	r3, [pc, #208]	; (8008aac <TIM_OC2_SetConfig+0xfc>)
 80089dc:	4013      	ands	r3, r2
 80089de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	021b      	lsls	r3, r3, #8
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f023 0320 	bic.w	r3, r3, #32
 80089fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	011b      	lsls	r3, r3, #4
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a29      	ldr	r2, [pc, #164]	; (8008ab0 <TIM_OC2_SetConfig+0x100>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d003      	beq.n	8008a18 <TIM_OC2_SetConfig+0x68>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a28      	ldr	r2, [pc, #160]	; (8008ab4 <TIM_OC2_SetConfig+0x104>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d10d      	bne.n	8008a34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	011b      	lsls	r3, r3, #4
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a1e      	ldr	r2, [pc, #120]	; (8008ab0 <TIM_OC2_SetConfig+0x100>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d00f      	beq.n	8008a5c <TIM_OC2_SetConfig+0xac>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a1d      	ldr	r2, [pc, #116]	; (8008ab4 <TIM_OC2_SetConfig+0x104>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d00b      	beq.n	8008a5c <TIM_OC2_SetConfig+0xac>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a1c      	ldr	r2, [pc, #112]	; (8008ab8 <TIM_OC2_SetConfig+0x108>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d007      	beq.n	8008a5c <TIM_OC2_SetConfig+0xac>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a1b      	ldr	r2, [pc, #108]	; (8008abc <TIM_OC2_SetConfig+0x10c>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d003      	beq.n	8008a5c <TIM_OC2_SetConfig+0xac>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a1a      	ldr	r2, [pc, #104]	; (8008ac0 <TIM_OC2_SetConfig+0x110>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d113      	bne.n	8008a84 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	699b      	ldr	r3, [r3, #24]
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	693a      	ldr	r2, [r7, #16]
 8008a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	621a      	str	r2, [r3, #32]
}
 8008a9e:	bf00      	nop
 8008aa0:	371c      	adds	r7, #28
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	feff8fff 	.word	0xfeff8fff
 8008ab0:	40010000 	.word	0x40010000
 8008ab4:	40010400 	.word	0x40010400
 8008ab8:	40014000 	.word	0x40014000
 8008abc:	40014400 	.word	0x40014400
 8008ac0:	40014800 	.word	0x40014800

08008ac4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b087      	sub	sp, #28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	69db      	ldr	r3, [r3, #28]
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f023 0303 	bic.w	r3, r3, #3
 8008afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	021b      	lsls	r3, r3, #8
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a27      	ldr	r2, [pc, #156]	; (8008bbc <TIM_OC3_SetConfig+0xf8>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d003      	beq.n	8008b2a <TIM_OC3_SetConfig+0x66>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a26      	ldr	r2, [pc, #152]	; (8008bc0 <TIM_OC3_SetConfig+0xfc>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d10d      	bne.n	8008b46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	021b      	lsls	r3, r3, #8
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a1c      	ldr	r2, [pc, #112]	; (8008bbc <TIM_OC3_SetConfig+0xf8>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d00f      	beq.n	8008b6e <TIM_OC3_SetConfig+0xaa>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a1b      	ldr	r2, [pc, #108]	; (8008bc0 <TIM_OC3_SetConfig+0xfc>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d00b      	beq.n	8008b6e <TIM_OC3_SetConfig+0xaa>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a1a      	ldr	r2, [pc, #104]	; (8008bc4 <TIM_OC3_SetConfig+0x100>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d007      	beq.n	8008b6e <TIM_OC3_SetConfig+0xaa>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a19      	ldr	r2, [pc, #100]	; (8008bc8 <TIM_OC3_SetConfig+0x104>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d003      	beq.n	8008b6e <TIM_OC3_SetConfig+0xaa>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a18      	ldr	r2, [pc, #96]	; (8008bcc <TIM_OC3_SetConfig+0x108>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d113      	bne.n	8008b96 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	011b      	lsls	r3, r3, #4
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	011b      	lsls	r3, r3, #4
 8008b90:	693a      	ldr	r2, [r7, #16]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	621a      	str	r2, [r3, #32]
}
 8008bb0:	bf00      	nop
 8008bb2:	371c      	adds	r7, #28
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	40010000 	.word	0x40010000
 8008bc0:	40010400 	.word	0x40010400
 8008bc4:	40014000 	.word	0x40014000
 8008bc8:	40014400 	.word	0x40014400
 8008bcc:	40014800 	.word	0x40014800

08008bd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b087      	sub	sp, #28
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	021b      	lsls	r3, r3, #8
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	031b      	lsls	r3, r3, #12
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a18      	ldr	r2, [pc, #96]	; (8008c8c <TIM_OC4_SetConfig+0xbc>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d00f      	beq.n	8008c50 <TIM_OC4_SetConfig+0x80>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a17      	ldr	r2, [pc, #92]	; (8008c90 <TIM_OC4_SetConfig+0xc0>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d00b      	beq.n	8008c50 <TIM_OC4_SetConfig+0x80>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a16      	ldr	r2, [pc, #88]	; (8008c94 <TIM_OC4_SetConfig+0xc4>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d007      	beq.n	8008c50 <TIM_OC4_SetConfig+0x80>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a15      	ldr	r2, [pc, #84]	; (8008c98 <TIM_OC4_SetConfig+0xc8>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d003      	beq.n	8008c50 <TIM_OC4_SetConfig+0x80>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a14      	ldr	r2, [pc, #80]	; (8008c9c <TIM_OC4_SetConfig+0xcc>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d109      	bne.n	8008c64 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	695b      	ldr	r3, [r3, #20]
 8008c5c:	019b      	lsls	r3, r3, #6
 8008c5e:	697a      	ldr	r2, [r7, #20]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	621a      	str	r2, [r3, #32]
}
 8008c7e:	bf00      	nop
 8008c80:	371c      	adds	r7, #28
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	40010000 	.word	0x40010000
 8008c90:	40010400 	.word	0x40010400
 8008c94:	40014000 	.word	0x40014000
 8008c98:	40014400 	.word	0x40014400
 8008c9c:	40014800 	.word	0x40014800

08008ca0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ce0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	041b      	lsls	r3, r3, #16
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a17      	ldr	r2, [pc, #92]	; (8008d50 <TIM_OC5_SetConfig+0xb0>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d00f      	beq.n	8008d16 <TIM_OC5_SetConfig+0x76>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a16      	ldr	r2, [pc, #88]	; (8008d54 <TIM_OC5_SetConfig+0xb4>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d00b      	beq.n	8008d16 <TIM_OC5_SetConfig+0x76>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a15      	ldr	r2, [pc, #84]	; (8008d58 <TIM_OC5_SetConfig+0xb8>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d007      	beq.n	8008d16 <TIM_OC5_SetConfig+0x76>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a14      	ldr	r2, [pc, #80]	; (8008d5c <TIM_OC5_SetConfig+0xbc>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d003      	beq.n	8008d16 <TIM_OC5_SetConfig+0x76>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a13      	ldr	r2, [pc, #76]	; (8008d60 <TIM_OC5_SetConfig+0xc0>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d109      	bne.n	8008d2a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	021b      	lsls	r3, r3, #8
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	685a      	ldr	r2, [r3, #4]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	621a      	str	r2, [r3, #32]
}
 8008d44:	bf00      	nop
 8008d46:	371c      	adds	r7, #28
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr
 8008d50:	40010000 	.word	0x40010000
 8008d54:	40010400 	.word	0x40010400
 8008d58:	40014000 	.word	0x40014000
 8008d5c:	40014400 	.word	0x40014400
 8008d60:	40014800 	.word	0x40014800

08008d64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b087      	sub	sp, #28
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a1b      	ldr	r3, [r3, #32]
 8008d72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	021b      	lsls	r3, r3, #8
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	051b      	lsls	r3, r3, #20
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a18      	ldr	r2, [pc, #96]	; (8008e18 <TIM_OC6_SetConfig+0xb4>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d00f      	beq.n	8008ddc <TIM_OC6_SetConfig+0x78>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a17      	ldr	r2, [pc, #92]	; (8008e1c <TIM_OC6_SetConfig+0xb8>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d00b      	beq.n	8008ddc <TIM_OC6_SetConfig+0x78>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a16      	ldr	r2, [pc, #88]	; (8008e20 <TIM_OC6_SetConfig+0xbc>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d007      	beq.n	8008ddc <TIM_OC6_SetConfig+0x78>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a15      	ldr	r2, [pc, #84]	; (8008e24 <TIM_OC6_SetConfig+0xc0>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d003      	beq.n	8008ddc <TIM_OC6_SetConfig+0x78>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a14      	ldr	r2, [pc, #80]	; (8008e28 <TIM_OC6_SetConfig+0xc4>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d109      	bne.n	8008df0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008de2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	695b      	ldr	r3, [r3, #20]
 8008de8:	029b      	lsls	r3, r3, #10
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	685a      	ldr	r2, [r3, #4]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	621a      	str	r2, [r3, #32]
}
 8008e0a:	bf00      	nop
 8008e0c:	371c      	adds	r7, #28
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	40010000 	.word	0x40010000
 8008e1c:	40010400 	.word	0x40010400
 8008e20:	40014000 	.word	0x40014000
 8008e24:	40014400 	.word	0x40014400
 8008e28:	40014800 	.word	0x40014800

08008e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6a1b      	ldr	r3, [r3, #32]
 8008e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	f023 0201 	bic.w	r2, r3, #1
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	011b      	lsls	r3, r3, #4
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	f023 030a 	bic.w	r3, r3, #10
 8008e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	621a      	str	r2, [r3, #32]
}
 8008e7e:	bf00      	nop
 8008e80:	371c      	adds	r7, #28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b087      	sub	sp, #28
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	60f8      	str	r0, [r7, #12]
 8008e92:	60b9      	str	r1, [r7, #8]
 8008e94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6a1b      	ldr	r3, [r3, #32]
 8008e9a:	f023 0210 	bic.w	r2, r3, #16
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6a1b      	ldr	r3, [r3, #32]
 8008eac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008eb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	031b      	lsls	r3, r3, #12
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008ec6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	011b      	lsls	r3, r3, #4
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	621a      	str	r2, [r3, #32]
}
 8008ede:	bf00      	nop
 8008ee0:	371c      	adds	r7, #28
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
	...

08008eec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	4b09      	ldr	r3, [pc, #36]	; (8008f24 <TIM_ITRx_SetConfig+0x38>)
 8008f00:	4013      	ands	r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	f043 0307 	orr.w	r3, r3, #7
 8008f0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	609a      	str	r2, [r3, #8]
}
 8008f16:	bf00      	nop
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	ffcfff8f 	.word	0xffcfff8f

08008f28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b087      	sub	sp, #28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
 8008f34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	021a      	lsls	r2, r3, #8
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	609a      	str	r2, [r3, #8]
}
 8008f5c:	bf00      	nop
 8008f5e:	371c      	adds	r7, #28
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	f003 031f 	and.w	r3, r3, #31
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6a1a      	ldr	r2, [r3, #32]
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	43db      	mvns	r3, r3
 8008f8a:	401a      	ands	r2, r3
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6a1a      	ldr	r2, [r3, #32]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	f003 031f 	and.w	r3, r3, #31
 8008f9a:	6879      	ldr	r1, [r7, #4]
 8008f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008fa0:	431a      	orrs	r2, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	621a      	str	r2, [r3, #32]
}
 8008fa6:	bf00      	nop
 8008fa8:	371c      	adds	r7, #28
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
	...

08008fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d101      	bne.n	8008fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008fc8:	2302      	movs	r3, #2
 8008fca:	e068      	b.n	800909e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a2e      	ldr	r2, [pc, #184]	; (80090ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d004      	beq.n	8009000 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a2d      	ldr	r2, [pc, #180]	; (80090b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d108      	bne.n	8009012 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009006:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	4313      	orrs	r3, r2
 8009010:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009018:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68fa      	ldr	r2, [r7, #12]
 8009020:	4313      	orrs	r3, r2
 8009022:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a1e      	ldr	r2, [pc, #120]	; (80090ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d01d      	beq.n	8009072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800903e:	d018      	beq.n	8009072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a1b      	ldr	r2, [pc, #108]	; (80090b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d013      	beq.n	8009072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a1a      	ldr	r2, [pc, #104]	; (80090b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d00e      	beq.n	8009072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a18      	ldr	r2, [pc, #96]	; (80090bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d009      	beq.n	8009072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a13      	ldr	r2, [pc, #76]	; (80090b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d004      	beq.n	8009072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a14      	ldr	r2, [pc, #80]	; (80090c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d10c      	bne.n	800908c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009078:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	4313      	orrs	r3, r2
 8009082:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68ba      	ldr	r2, [r7, #8]
 800908a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	40010000 	.word	0x40010000
 80090b0:	40010400 	.word	0x40010400
 80090b4:	40000400 	.word	0x40000400
 80090b8:	40000800 	.word	0x40000800
 80090bc:	40000c00 	.word	0x40000c00
 80090c0:	40001800 	.word	0x40001800

080090c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80090ce:	2300      	movs	r3, #0
 80090d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d101      	bne.n	80090e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80090dc:	2302      	movs	r3, #2
 80090de:	e065      	b.n	80091ac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	689b      	ldr	r3, [r3, #8]
 8009100:	4313      	orrs	r3, r2
 8009102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	4313      	orrs	r3, r2
 8009110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4313      	orrs	r3, r2
 800911e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	4313      	orrs	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	695b      	ldr	r3, [r3, #20]
 8009138:	4313      	orrs	r3, r2
 800913a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009146:	4313      	orrs	r3, r2
 8009148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	699b      	ldr	r3, [r3, #24]
 8009154:	041b      	lsls	r3, r3, #16
 8009156:	4313      	orrs	r3, r2
 8009158:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	4a16      	ldr	r2, [pc, #88]	; (80091b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d004      	beq.n	800916e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a14      	ldr	r2, [pc, #80]	; (80091bc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d115      	bne.n	800919a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	051b      	lsls	r3, r3, #20
 800917a:	4313      	orrs	r3, r2
 800917c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	69db      	ldr	r3, [r3, #28]
 8009188:	4313      	orrs	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	4313      	orrs	r3, r2
 8009198:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	40010000 	.word	0x40010000
 80091bc:	40010400 	.word	0x40010400

080091c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091dc:	bf00      	nop
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d101      	bne.n	800920e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e042      	b.n	8009294 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009214:	2b00      	cmp	r3, #0
 8009216:	d106      	bne.n	8009226 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7f8 ff95 	bl	8002150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2224      	movs	r2, #36	; 0x24
 800922a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f022 0201 	bic.w	r2, r2, #1
 800923c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fbd8 	bl	80099f4 <UART_SetConfig>
 8009244:	4603      	mov	r3, r0
 8009246:	2b01      	cmp	r3, #1
 8009248:	d101      	bne.n	800924e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e022      	b.n	8009294 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009252:	2b00      	cmp	r3, #0
 8009254:	d002      	beq.n	800925c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f001 f92c 	bl	800a4b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	685a      	ldr	r2, [r3, #4]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800926a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689a      	ldr	r2, [r3, #8]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800927a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f042 0201 	orr.w	r2, r2, #1
 800928a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f001 f9b3 	bl	800a5f8 <UART_CheckIdleState>
 8009292:	4603      	mov	r3, r0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b08a      	sub	sp, #40	; 0x28
 80092a0:	af02      	add	r7, sp, #8
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	603b      	str	r3, [r7, #0]
 80092a8:	4613      	mov	r3, r2
 80092aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092b2:	2b20      	cmp	r3, #32
 80092b4:	f040 8083 	bne.w	80093be <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d002      	beq.n	80092c4 <HAL_UART_Transmit+0x28>
 80092be:	88fb      	ldrh	r3, [r7, #6]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	e07b      	b.n	80093c0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d101      	bne.n	80092d6 <HAL_UART_Transmit+0x3a>
 80092d2:	2302      	movs	r3, #2
 80092d4:	e074      	b.n	80093c0 <HAL_UART_Transmit+0x124>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2221      	movs	r2, #33	; 0x21
 80092ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092ee:	f7f9 fa95 	bl	800281c <HAL_GetTick>
 80092f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	88fa      	ldrh	r2, [r7, #6]
 80092f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	88fa      	ldrh	r2, [r7, #6]
 8009300:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800930c:	d108      	bne.n	8009320 <HAL_UART_Transmit+0x84>
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d104      	bne.n	8009320 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009316:	2300      	movs	r3, #0
 8009318:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	61bb      	str	r3, [r7, #24]
 800931e:	e003      	b.n	8009328 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009324:	2300      	movs	r3, #0
 8009326:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009330:	e02c      	b.n	800938c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	2200      	movs	r2, #0
 800933a:	2180      	movs	r1, #128	; 0x80
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f001 f9a6 	bl	800a68e <UART_WaitOnFlagUntilTimeout>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d001      	beq.n	800934c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009348:	2303      	movs	r3, #3
 800934a:	e039      	b.n	80093c0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10b      	bne.n	800936a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009352:	69bb      	ldr	r3, [r7, #24]
 8009354:	881b      	ldrh	r3, [r3, #0]
 8009356:	461a      	mov	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009360:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	3302      	adds	r3, #2
 8009366:	61bb      	str	r3, [r7, #24]
 8009368:	e007      	b.n	800937a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	781a      	ldrb	r2, [r3, #0]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	3301      	adds	r3, #1
 8009378:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009380:	b29b      	uxth	r3, r3
 8009382:	3b01      	subs	r3, #1
 8009384:	b29a      	uxth	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009392:	b29b      	uxth	r3, r3
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1cc      	bne.n	8009332 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	2200      	movs	r2, #0
 80093a0:	2140      	movs	r1, #64	; 0x40
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f001 f973 	bl	800a68e <UART_WaitOnFlagUntilTimeout>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e006      	b.n	80093c0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2220      	movs	r2, #32
 80093b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80093ba:	2300      	movs	r3, #0
 80093bc:	e000      	b.n	80093c0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80093be:	2302      	movs	r3, #2
  }
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3720      	adds	r7, #32
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	4613      	mov	r3, r2
 80093d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093dc:	2b20      	cmp	r3, #32
 80093de:	d131      	bne.n	8009444 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d002      	beq.n	80093ec <HAL_UART_Receive_IT+0x24>
 80093e6:	88fb      	ldrh	r3, [r7, #6]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d101      	bne.n	80093f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	e02a      	b.n	8009446 <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d101      	bne.n	80093fe <HAL_UART_Receive_IT+0x36>
 80093fa:	2302      	movs	r3, #2
 80093fc:	e023      	b.n	8009446 <HAL_UART_Receive_IT+0x7e>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2201      	movs	r2, #1
 8009402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a0f      	ldr	r2, [pc, #60]	; (8009450 <HAL_UART_Receive_IT+0x88>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d00e      	beq.n	8009434 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d007      	beq.n	8009434 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009432:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009434:	88fb      	ldrh	r3, [r7, #6]
 8009436:	461a      	mov	r2, r3
 8009438:	68b9      	ldr	r1, [r7, #8]
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f001 f9a8 	bl	800a790 <UART_Start_Receive_IT>
 8009440:	4603      	mov	r3, r0
 8009442:	e000      	b.n	8009446 <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8009444:	2302      	movs	r3, #2
  }
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	58000c00 	.word	0x58000c00

08009454 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b088      	sub	sp, #32
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009474:	69fa      	ldr	r2, [r7, #28]
 8009476:	f640 030f 	movw	r3, #2063	; 0x80f
 800947a:	4013      	ands	r3, r2
 800947c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d118      	bne.n	80094b6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	f003 0320 	and.w	r3, r3, #32
 800948a:	2b00      	cmp	r3, #0
 800948c:	d013      	beq.n	80094b6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	f003 0320 	and.w	r3, r3, #32
 8009494:	2b00      	cmp	r3, #0
 8009496:	d104      	bne.n	80094a2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d009      	beq.n	80094b6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f000 8282 	beq.w	80099b0 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	4798      	blx	r3
      }
      return;
 80094b4:	e27c      	b.n	80099b0 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 80ef 	beq.w	800969c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	4b73      	ldr	r3, [pc, #460]	; (8009690 <HAL_UART_IRQHandler+0x23c>)
 80094c2:	4013      	ands	r3, r2
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d105      	bne.n	80094d4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80094c8:	69ba      	ldr	r2, [r7, #24]
 80094ca:	4b72      	ldr	r3, [pc, #456]	; (8009694 <HAL_UART_IRQHandler+0x240>)
 80094cc:	4013      	ands	r3, r2
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	f000 80e4 	beq.w	800969c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d010      	beq.n	8009500 <HAL_UART_IRQHandler+0xac>
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00b      	beq.n	8009500 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2201      	movs	r2, #1
 80094ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094f6:	f043 0201 	orr.w	r2, r3, #1
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	f003 0302 	and.w	r3, r3, #2
 8009506:	2b00      	cmp	r3, #0
 8009508:	d010      	beq.n	800952c <HAL_UART_IRQHandler+0xd8>
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00b      	beq.n	800952c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2202      	movs	r2, #2
 800951a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009522:	f043 0204 	orr.w	r2, r3, #4
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800952c:	69fb      	ldr	r3, [r7, #28]
 800952e:	f003 0304 	and.w	r3, r3, #4
 8009532:	2b00      	cmp	r3, #0
 8009534:	d010      	beq.n	8009558 <HAL_UART_IRQHandler+0x104>
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f003 0301 	and.w	r3, r3, #1
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00b      	beq.n	8009558 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	2204      	movs	r2, #4
 8009546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800954e:	f043 0202 	orr.w	r2, r3, #2
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009558:	69fb      	ldr	r3, [r7, #28]
 800955a:	f003 0308 	and.w	r3, r3, #8
 800955e:	2b00      	cmp	r3, #0
 8009560:	d015      	beq.n	800958e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	f003 0320 	and.w	r3, r3, #32
 8009568:	2b00      	cmp	r3, #0
 800956a:	d104      	bne.n	8009576 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	4b48      	ldr	r3, [pc, #288]	; (8009690 <HAL_UART_IRQHandler+0x23c>)
 8009570:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00b      	beq.n	800958e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2208      	movs	r2, #8
 800957c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009584:	f043 0208 	orr.w	r2, r3, #8
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009594:	2b00      	cmp	r3, #0
 8009596:	d011      	beq.n	80095bc <HAL_UART_IRQHandler+0x168>
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00c      	beq.n	80095bc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095b2:	f043 0220 	orr.w	r2, r3, #32
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f000 81f6 	beq.w	80099b4 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	f003 0320 	and.w	r3, r3, #32
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d011      	beq.n	80095f6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	f003 0320 	and.w	r3, r3, #32
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d104      	bne.n	80095e6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d007      	beq.n	80095f6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d003      	beq.n	80095f6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095fc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009608:	2b40      	cmp	r3, #64	; 0x40
 800960a:	d004      	beq.n	8009616 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009612:	2b00      	cmp	r3, #0
 8009614:	d031      	beq.n	800967a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f001 f978 	bl	800a90c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009626:	2b40      	cmp	r3, #64	; 0x40
 8009628:	d123      	bne.n	8009672 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689a      	ldr	r2, [r3, #8]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009638:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800963e:	2b00      	cmp	r3, #0
 8009640:	d013      	beq.n	800966a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009646:	4a14      	ldr	r2, [pc, #80]	; (8009698 <HAL_UART_IRQHandler+0x244>)
 8009648:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800964e:	4618      	mov	r0, r3
 8009650:	f7fa f994 	bl	800397c <HAL_DMA_Abort_IT>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d017      	beq.n	800968a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800965e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009664:	4610      	mov	r0, r2
 8009666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009668:	e00f      	b.n	800968a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f9ac 	bl	80099c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009670:	e00b      	b.n	800968a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f9a8 	bl	80099c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009678:	e007      	b.n	800968a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f9a4 	bl	80099c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009688:	e194      	b.n	80099b4 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800968a:	bf00      	nop
    return;
 800968c:	e192      	b.n	80099b4 <HAL_UART_IRQHandler+0x560>
 800968e:	bf00      	nop
 8009690:	10000001 	.word	0x10000001
 8009694:	04000120 	.word	0x04000120
 8009698:	0800a971 	.word	0x0800a971

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	f040 810f 	bne.w	80098c4 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	f003 0310 	and.w	r3, r3, #16
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8109 	beq.w	80098c4 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80096b2:	69bb      	ldr	r3, [r7, #24]
 80096b4:	f003 0310 	and.w	r3, r3, #16
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f000 8103 	beq.w	80098c4 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2210      	movs	r2, #16
 80096c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d0:	2b40      	cmp	r3, #64	; 0x40
 80096d2:	f040 80bb 	bne.w	800984c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a96      	ldr	r2, [pc, #600]	; (8009938 <HAL_UART_IRQHandler+0x4e4>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d059      	beq.n	8009796 <HAL_UART_IRQHandler+0x342>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a94      	ldr	r2, [pc, #592]	; (800993c <HAL_UART_IRQHandler+0x4e8>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d053      	beq.n	8009796 <HAL_UART_IRQHandler+0x342>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a92      	ldr	r2, [pc, #584]	; (8009940 <HAL_UART_IRQHandler+0x4ec>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d04d      	beq.n	8009796 <HAL_UART_IRQHandler+0x342>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a90      	ldr	r2, [pc, #576]	; (8009944 <HAL_UART_IRQHandler+0x4f0>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d047      	beq.n	8009796 <HAL_UART_IRQHandler+0x342>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a8e      	ldr	r2, [pc, #568]	; (8009948 <HAL_UART_IRQHandler+0x4f4>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d041      	beq.n	8009796 <HAL_UART_IRQHandler+0x342>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a8c      	ldr	r2, [pc, #560]	; (800994c <HAL_UART_IRQHandler+0x4f8>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d03b      	beq.n	8009796 <HAL_UART_IRQHandler+0x342>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a8a      	ldr	r2, [pc, #552]	; (8009950 <HAL_UART_IRQHandler+0x4fc>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d035      	beq.n	8009796 <HAL_UART_IRQHandler+0x342>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a88      	ldr	r2, [pc, #544]	; (8009954 <HAL_UART_IRQHandler+0x500>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d02f      	beq.n	8009796 <HAL_UART_IRQHandler+0x342>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a86      	ldr	r2, [pc, #536]	; (8009958 <HAL_UART_IRQHandler+0x504>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d029      	beq.n	8009796 <HAL_UART_IRQHandler+0x342>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a84      	ldr	r2, [pc, #528]	; (800995c <HAL_UART_IRQHandler+0x508>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d023      	beq.n	8009796 <HAL_UART_IRQHandler+0x342>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a82      	ldr	r2, [pc, #520]	; (8009960 <HAL_UART_IRQHandler+0x50c>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d01d      	beq.n	8009796 <HAL_UART_IRQHandler+0x342>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a80      	ldr	r2, [pc, #512]	; (8009964 <HAL_UART_IRQHandler+0x510>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d017      	beq.n	8009796 <HAL_UART_IRQHandler+0x342>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a7e      	ldr	r2, [pc, #504]	; (8009968 <HAL_UART_IRQHandler+0x514>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d011      	beq.n	8009796 <HAL_UART_IRQHandler+0x342>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a7c      	ldr	r2, [pc, #496]	; (800996c <HAL_UART_IRQHandler+0x518>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d00b      	beq.n	8009796 <HAL_UART_IRQHandler+0x342>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a7a      	ldr	r2, [pc, #488]	; (8009970 <HAL_UART_IRQHandler+0x51c>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d005      	beq.n	8009796 <HAL_UART_IRQHandler+0x342>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a78      	ldr	r2, [pc, #480]	; (8009974 <HAL_UART_IRQHandler+0x520>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d105      	bne.n	80097a2 <HAL_UART_IRQHandler+0x34e>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	b29b      	uxth	r3, r3
 80097a0:	e004      	b.n	80097ac <HAL_UART_IRQHandler+0x358>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80097ae:	893b      	ldrh	r3, [r7, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f000 8101 	beq.w	80099b8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097bc:	893a      	ldrh	r2, [r7, #8]
 80097be:	429a      	cmp	r2, r3
 80097c0:	f080 80fa 	bcs.w	80099b8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	893a      	ldrh	r2, [r7, #8]
 80097c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097d6:	d02b      	beq.n	8009830 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097e6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689a      	ldr	r2, [r3, #8]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f022 0201 	bic.w	r2, r2, #1
 80097f6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689a      	ldr	r2, [r3, #8]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009806:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2220      	movs	r2, #32
 800980c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f022 0210 	bic.w	r2, r2, #16
 8009824:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800982a:	4618      	mov	r0, r3
 800982c:	f7f9 fd88 	bl	8003340 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800983c:	b29b      	uxth	r3, r3
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	b29b      	uxth	r3, r3
 8009842:	4619      	mov	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f8c9 	bl	80099dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800984a:	e0b5      	b.n	80099b8 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009858:	b29b      	uxth	r3, r3
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009864:	b29b      	uxth	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	f000 80a8 	beq.w	80099bc <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 800986c:	897b      	ldrh	r3, [r7, #10]
 800986e:	2b00      	cmp	r3, #0
 8009870:	f000 80a4 	beq.w	80099bc <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009882:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6899      	ldr	r1, [r3, #8]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	4b3a      	ldr	r3, [pc, #232]	; (8009978 <HAL_UART_IRQHandler+0x524>)
 8009890:	400b      	ands	r3, r1
 8009892:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2220      	movs	r2, #32
 8009898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f022 0210 	bic.w	r2, r2, #16
 80098b6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80098b8:	897b      	ldrh	r3, [r7, #10]
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f88d 	bl	80099dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80098c2:	e07b      	b.n	80099bc <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00d      	beq.n	80098ea <HAL_UART_IRQHandler+0x496>
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d008      	beq.n	80098ea <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80098e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f001 fb50 	bl	800af88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098e8:	e06b      	b.n	80099c2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d012      	beq.n	800991a <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d104      	bne.n	8009908 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d008      	beq.n	800991a <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800990c:	2b00      	cmp	r3, #0
 800990e:	d057      	beq.n	80099c0 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	4798      	blx	r3
    }
    return;
 8009918:	e052      	b.n	80099c0 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009920:	2b00      	cmp	r3, #0
 8009922:	d02b      	beq.n	800997c <HAL_UART_IRQHandler+0x528>
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800992a:	2b00      	cmp	r3, #0
 800992c:	d026      	beq.n	800997c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f001 f834 	bl	800a99c <UART_EndTransmit_IT>
    return;
 8009934:	e045      	b.n	80099c2 <HAL_UART_IRQHandler+0x56e>
 8009936:	bf00      	nop
 8009938:	40020010 	.word	0x40020010
 800993c:	40020028 	.word	0x40020028
 8009940:	40020040 	.word	0x40020040
 8009944:	40020058 	.word	0x40020058
 8009948:	40020070 	.word	0x40020070
 800994c:	40020088 	.word	0x40020088
 8009950:	400200a0 	.word	0x400200a0
 8009954:	400200b8 	.word	0x400200b8
 8009958:	40020410 	.word	0x40020410
 800995c:	40020428 	.word	0x40020428
 8009960:	40020440 	.word	0x40020440
 8009964:	40020458 	.word	0x40020458
 8009968:	40020470 	.word	0x40020470
 800996c:	40020488 	.word	0x40020488
 8009970:	400204a0 	.word	0x400204a0
 8009974:	400204b8 	.word	0x400204b8
 8009978:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009982:	2b00      	cmp	r3, #0
 8009984:	d008      	beq.n	8009998 <HAL_UART_IRQHandler+0x544>
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800998c:	2b00      	cmp	r3, #0
 800998e:	d003      	beq.n	8009998 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 fb0d 	bl	800afb0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009996:	e014      	b.n	80099c2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00f      	beq.n	80099c2 <HAL_UART_IRQHandler+0x56e>
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	da0c      	bge.n	80099c2 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f001 faf7 	bl	800af9c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099ae:	e008      	b.n	80099c2 <HAL_UART_IRQHandler+0x56e>
      return;
 80099b0:	bf00      	nop
 80099b2:	e006      	b.n	80099c2 <HAL_UART_IRQHandler+0x56e>
    return;
 80099b4:	bf00      	nop
 80099b6:	e004      	b.n	80099c2 <HAL_UART_IRQHandler+0x56e>
      return;
 80099b8:	bf00      	nop
 80099ba:	e002      	b.n	80099c2 <HAL_UART_IRQHandler+0x56e>
      return;
 80099bc:	bf00      	nop
 80099be:	e000      	b.n	80099c2 <HAL_UART_IRQHandler+0x56e>
    return;
 80099c0:	bf00      	nop
  }
}
 80099c2:	3720      	adds	r7, #32
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	460b      	mov	r3, r1
 80099e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80099e8:	bf00      	nop
 80099ea:	370c      	adds	r7, #12
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099f4:	b5b0      	push	{r4, r5, r7, lr}
 80099f6:	b08e      	sub	sp, #56	; 0x38
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	689a      	ldr	r2, [r3, #8]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	695b      	ldr	r3, [r3, #20]
 8009a10:	431a      	orrs	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	69db      	ldr	r3, [r3, #28]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	4bbf      	ldr	r3, [pc, #764]	; (8009d20 <UART_SetConfig+0x32c>)
 8009a22:	4013      	ands	r3, r2
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	6812      	ldr	r2, [r2, #0]
 8009a28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a2a:	430b      	orrs	r3, r1
 8009a2c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68da      	ldr	r2, [r3, #12]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	430a      	orrs	r2, r1
 8009a42:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4ab5      	ldr	r2, [pc, #724]	; (8009d24 <UART_SetConfig+0x330>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d004      	beq.n	8009a5e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a1b      	ldr	r3, [r3, #32]
 8009a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	689a      	ldr	r2, [r3, #8]
 8009a64:	4bb0      	ldr	r3, [pc, #704]	; (8009d28 <UART_SetConfig+0x334>)
 8009a66:	4013      	ands	r3, r2
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	6812      	ldr	r2, [r2, #0]
 8009a6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a6e:	430b      	orrs	r3, r1
 8009a70:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a78:	f023 010f 	bic.w	r1, r3, #15
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4aa7      	ldr	r2, [pc, #668]	; (8009d2c <UART_SetConfig+0x338>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d176      	bne.n	8009b80 <UART_SetConfig+0x18c>
 8009a92:	4ba7      	ldr	r3, [pc, #668]	; (8009d30 <UART_SetConfig+0x33c>)
 8009a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a9a:	2b28      	cmp	r3, #40	; 0x28
 8009a9c:	d86c      	bhi.n	8009b78 <UART_SetConfig+0x184>
 8009a9e:	a201      	add	r2, pc, #4	; (adr r2, 8009aa4 <UART_SetConfig+0xb0>)
 8009aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa4:	08009b49 	.word	0x08009b49
 8009aa8:	08009b79 	.word	0x08009b79
 8009aac:	08009b79 	.word	0x08009b79
 8009ab0:	08009b79 	.word	0x08009b79
 8009ab4:	08009b79 	.word	0x08009b79
 8009ab8:	08009b79 	.word	0x08009b79
 8009abc:	08009b79 	.word	0x08009b79
 8009ac0:	08009b79 	.word	0x08009b79
 8009ac4:	08009b51 	.word	0x08009b51
 8009ac8:	08009b79 	.word	0x08009b79
 8009acc:	08009b79 	.word	0x08009b79
 8009ad0:	08009b79 	.word	0x08009b79
 8009ad4:	08009b79 	.word	0x08009b79
 8009ad8:	08009b79 	.word	0x08009b79
 8009adc:	08009b79 	.word	0x08009b79
 8009ae0:	08009b79 	.word	0x08009b79
 8009ae4:	08009b59 	.word	0x08009b59
 8009ae8:	08009b79 	.word	0x08009b79
 8009aec:	08009b79 	.word	0x08009b79
 8009af0:	08009b79 	.word	0x08009b79
 8009af4:	08009b79 	.word	0x08009b79
 8009af8:	08009b79 	.word	0x08009b79
 8009afc:	08009b79 	.word	0x08009b79
 8009b00:	08009b79 	.word	0x08009b79
 8009b04:	08009b61 	.word	0x08009b61
 8009b08:	08009b79 	.word	0x08009b79
 8009b0c:	08009b79 	.word	0x08009b79
 8009b10:	08009b79 	.word	0x08009b79
 8009b14:	08009b79 	.word	0x08009b79
 8009b18:	08009b79 	.word	0x08009b79
 8009b1c:	08009b79 	.word	0x08009b79
 8009b20:	08009b79 	.word	0x08009b79
 8009b24:	08009b69 	.word	0x08009b69
 8009b28:	08009b79 	.word	0x08009b79
 8009b2c:	08009b79 	.word	0x08009b79
 8009b30:	08009b79 	.word	0x08009b79
 8009b34:	08009b79 	.word	0x08009b79
 8009b38:	08009b79 	.word	0x08009b79
 8009b3c:	08009b79 	.word	0x08009b79
 8009b40:	08009b79 	.word	0x08009b79
 8009b44:	08009b71 	.word	0x08009b71
 8009b48:	2301      	movs	r3, #1
 8009b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4e:	e222      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009b50:	2304      	movs	r3, #4
 8009b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b56:	e21e      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009b58:	2308      	movs	r3, #8
 8009b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5e:	e21a      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009b60:	2310      	movs	r3, #16
 8009b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b66:	e216      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009b68:	2320      	movs	r3, #32
 8009b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6e:	e212      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009b70:	2340      	movs	r3, #64	; 0x40
 8009b72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b76:	e20e      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009b78:	2380      	movs	r3, #128	; 0x80
 8009b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7e:	e20a      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a6b      	ldr	r2, [pc, #428]	; (8009d34 <UART_SetConfig+0x340>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d130      	bne.n	8009bec <UART_SetConfig+0x1f8>
 8009b8a:	4b69      	ldr	r3, [pc, #420]	; (8009d30 <UART_SetConfig+0x33c>)
 8009b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b8e:	f003 0307 	and.w	r3, r3, #7
 8009b92:	2b05      	cmp	r3, #5
 8009b94:	d826      	bhi.n	8009be4 <UART_SetConfig+0x1f0>
 8009b96:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <UART_SetConfig+0x1a8>)
 8009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9c:	08009bb5 	.word	0x08009bb5
 8009ba0:	08009bbd 	.word	0x08009bbd
 8009ba4:	08009bc5 	.word	0x08009bc5
 8009ba8:	08009bcd 	.word	0x08009bcd
 8009bac:	08009bd5 	.word	0x08009bd5
 8009bb0:	08009bdd 	.word	0x08009bdd
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bba:	e1ec      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009bbc:	2304      	movs	r3, #4
 8009bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bc2:	e1e8      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009bc4:	2308      	movs	r3, #8
 8009bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bca:	e1e4      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009bcc:	2310      	movs	r3, #16
 8009bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bd2:	e1e0      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009bd4:	2320      	movs	r3, #32
 8009bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bda:	e1dc      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009bdc:	2340      	movs	r3, #64	; 0x40
 8009bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be2:	e1d8      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009be4:	2380      	movs	r3, #128	; 0x80
 8009be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bea:	e1d4      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a51      	ldr	r2, [pc, #324]	; (8009d38 <UART_SetConfig+0x344>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d130      	bne.n	8009c58 <UART_SetConfig+0x264>
 8009bf6:	4b4e      	ldr	r3, [pc, #312]	; (8009d30 <UART_SetConfig+0x33c>)
 8009bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bfa:	f003 0307 	and.w	r3, r3, #7
 8009bfe:	2b05      	cmp	r3, #5
 8009c00:	d826      	bhi.n	8009c50 <UART_SetConfig+0x25c>
 8009c02:	a201      	add	r2, pc, #4	; (adr r2, 8009c08 <UART_SetConfig+0x214>)
 8009c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c08:	08009c21 	.word	0x08009c21
 8009c0c:	08009c29 	.word	0x08009c29
 8009c10:	08009c31 	.word	0x08009c31
 8009c14:	08009c39 	.word	0x08009c39
 8009c18:	08009c41 	.word	0x08009c41
 8009c1c:	08009c49 	.word	0x08009c49
 8009c20:	2300      	movs	r3, #0
 8009c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c26:	e1b6      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009c28:	2304      	movs	r3, #4
 8009c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c2e:	e1b2      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009c30:	2308      	movs	r3, #8
 8009c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c36:	e1ae      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009c38:	2310      	movs	r3, #16
 8009c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c3e:	e1aa      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009c40:	2320      	movs	r3, #32
 8009c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c46:	e1a6      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009c48:	2340      	movs	r3, #64	; 0x40
 8009c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4e:	e1a2      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009c50:	2380      	movs	r3, #128	; 0x80
 8009c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c56:	e19e      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a37      	ldr	r2, [pc, #220]	; (8009d3c <UART_SetConfig+0x348>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d130      	bne.n	8009cc4 <UART_SetConfig+0x2d0>
 8009c62:	4b33      	ldr	r3, [pc, #204]	; (8009d30 <UART_SetConfig+0x33c>)
 8009c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c66:	f003 0307 	and.w	r3, r3, #7
 8009c6a:	2b05      	cmp	r3, #5
 8009c6c:	d826      	bhi.n	8009cbc <UART_SetConfig+0x2c8>
 8009c6e:	a201      	add	r2, pc, #4	; (adr r2, 8009c74 <UART_SetConfig+0x280>)
 8009c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c74:	08009c8d 	.word	0x08009c8d
 8009c78:	08009c95 	.word	0x08009c95
 8009c7c:	08009c9d 	.word	0x08009c9d
 8009c80:	08009ca5 	.word	0x08009ca5
 8009c84:	08009cad 	.word	0x08009cad
 8009c88:	08009cb5 	.word	0x08009cb5
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c92:	e180      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009c94:	2304      	movs	r3, #4
 8009c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c9a:	e17c      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009c9c:	2308      	movs	r3, #8
 8009c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ca2:	e178      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009ca4:	2310      	movs	r3, #16
 8009ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009caa:	e174      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009cac:	2320      	movs	r3, #32
 8009cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cb2:	e170      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009cb4:	2340      	movs	r3, #64	; 0x40
 8009cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cba:	e16c      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009cbc:	2380      	movs	r3, #128	; 0x80
 8009cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc2:	e168      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a1d      	ldr	r2, [pc, #116]	; (8009d40 <UART_SetConfig+0x34c>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d142      	bne.n	8009d54 <UART_SetConfig+0x360>
 8009cce:	4b18      	ldr	r3, [pc, #96]	; (8009d30 <UART_SetConfig+0x33c>)
 8009cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd2:	f003 0307 	and.w	r3, r3, #7
 8009cd6:	2b05      	cmp	r3, #5
 8009cd8:	d838      	bhi.n	8009d4c <UART_SetConfig+0x358>
 8009cda:	a201      	add	r2, pc, #4	; (adr r2, 8009ce0 <UART_SetConfig+0x2ec>)
 8009cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce0:	08009cf9 	.word	0x08009cf9
 8009ce4:	08009d01 	.word	0x08009d01
 8009ce8:	08009d09 	.word	0x08009d09
 8009cec:	08009d11 	.word	0x08009d11
 8009cf0:	08009d19 	.word	0x08009d19
 8009cf4:	08009d45 	.word	0x08009d45
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cfe:	e14a      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009d00:	2304      	movs	r3, #4
 8009d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d06:	e146      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009d08:	2308      	movs	r3, #8
 8009d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d0e:	e142      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009d10:	2310      	movs	r3, #16
 8009d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d16:	e13e      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009d18:	2320      	movs	r3, #32
 8009d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1e:	e13a      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009d20:	cfff69f3 	.word	0xcfff69f3
 8009d24:	58000c00 	.word	0x58000c00
 8009d28:	11fff4ff 	.word	0x11fff4ff
 8009d2c:	40011000 	.word	0x40011000
 8009d30:	58024400 	.word	0x58024400
 8009d34:	40004400 	.word	0x40004400
 8009d38:	40004800 	.word	0x40004800
 8009d3c:	40004c00 	.word	0x40004c00
 8009d40:	40005000 	.word	0x40005000
 8009d44:	2340      	movs	r3, #64	; 0x40
 8009d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4a:	e124      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009d4c:	2380      	movs	r3, #128	; 0x80
 8009d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d52:	e120      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4acc      	ldr	r2, [pc, #816]	; (800a08c <UART_SetConfig+0x698>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d176      	bne.n	8009e4c <UART_SetConfig+0x458>
 8009d5e:	4bcc      	ldr	r3, [pc, #816]	; (800a090 <UART_SetConfig+0x69c>)
 8009d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d66:	2b28      	cmp	r3, #40	; 0x28
 8009d68:	d86c      	bhi.n	8009e44 <UART_SetConfig+0x450>
 8009d6a:	a201      	add	r2, pc, #4	; (adr r2, 8009d70 <UART_SetConfig+0x37c>)
 8009d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d70:	08009e15 	.word	0x08009e15
 8009d74:	08009e45 	.word	0x08009e45
 8009d78:	08009e45 	.word	0x08009e45
 8009d7c:	08009e45 	.word	0x08009e45
 8009d80:	08009e45 	.word	0x08009e45
 8009d84:	08009e45 	.word	0x08009e45
 8009d88:	08009e45 	.word	0x08009e45
 8009d8c:	08009e45 	.word	0x08009e45
 8009d90:	08009e1d 	.word	0x08009e1d
 8009d94:	08009e45 	.word	0x08009e45
 8009d98:	08009e45 	.word	0x08009e45
 8009d9c:	08009e45 	.word	0x08009e45
 8009da0:	08009e45 	.word	0x08009e45
 8009da4:	08009e45 	.word	0x08009e45
 8009da8:	08009e45 	.word	0x08009e45
 8009dac:	08009e45 	.word	0x08009e45
 8009db0:	08009e25 	.word	0x08009e25
 8009db4:	08009e45 	.word	0x08009e45
 8009db8:	08009e45 	.word	0x08009e45
 8009dbc:	08009e45 	.word	0x08009e45
 8009dc0:	08009e45 	.word	0x08009e45
 8009dc4:	08009e45 	.word	0x08009e45
 8009dc8:	08009e45 	.word	0x08009e45
 8009dcc:	08009e45 	.word	0x08009e45
 8009dd0:	08009e2d 	.word	0x08009e2d
 8009dd4:	08009e45 	.word	0x08009e45
 8009dd8:	08009e45 	.word	0x08009e45
 8009ddc:	08009e45 	.word	0x08009e45
 8009de0:	08009e45 	.word	0x08009e45
 8009de4:	08009e45 	.word	0x08009e45
 8009de8:	08009e45 	.word	0x08009e45
 8009dec:	08009e45 	.word	0x08009e45
 8009df0:	08009e35 	.word	0x08009e35
 8009df4:	08009e45 	.word	0x08009e45
 8009df8:	08009e45 	.word	0x08009e45
 8009dfc:	08009e45 	.word	0x08009e45
 8009e00:	08009e45 	.word	0x08009e45
 8009e04:	08009e45 	.word	0x08009e45
 8009e08:	08009e45 	.word	0x08009e45
 8009e0c:	08009e45 	.word	0x08009e45
 8009e10:	08009e3d 	.word	0x08009e3d
 8009e14:	2301      	movs	r3, #1
 8009e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e1a:	e0bc      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009e1c:	2304      	movs	r3, #4
 8009e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e22:	e0b8      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009e24:	2308      	movs	r3, #8
 8009e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e2a:	e0b4      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009e2c:	2310      	movs	r3, #16
 8009e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e32:	e0b0      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009e34:	2320      	movs	r3, #32
 8009e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e3a:	e0ac      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009e3c:	2340      	movs	r3, #64	; 0x40
 8009e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e42:	e0a8      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009e44:	2380      	movs	r3, #128	; 0x80
 8009e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e4a:	e0a4      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a90      	ldr	r2, [pc, #576]	; (800a094 <UART_SetConfig+0x6a0>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d130      	bne.n	8009eb8 <UART_SetConfig+0x4c4>
 8009e56:	4b8e      	ldr	r3, [pc, #568]	; (800a090 <UART_SetConfig+0x69c>)
 8009e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e5a:	f003 0307 	and.w	r3, r3, #7
 8009e5e:	2b05      	cmp	r3, #5
 8009e60:	d826      	bhi.n	8009eb0 <UART_SetConfig+0x4bc>
 8009e62:	a201      	add	r2, pc, #4	; (adr r2, 8009e68 <UART_SetConfig+0x474>)
 8009e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e68:	08009e81 	.word	0x08009e81
 8009e6c:	08009e89 	.word	0x08009e89
 8009e70:	08009e91 	.word	0x08009e91
 8009e74:	08009e99 	.word	0x08009e99
 8009e78:	08009ea1 	.word	0x08009ea1
 8009e7c:	08009ea9 	.word	0x08009ea9
 8009e80:	2300      	movs	r3, #0
 8009e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e86:	e086      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009e88:	2304      	movs	r3, #4
 8009e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e8e:	e082      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009e90:	2308      	movs	r3, #8
 8009e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e96:	e07e      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009e98:	2310      	movs	r3, #16
 8009e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e9e:	e07a      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009ea0:	2320      	movs	r3, #32
 8009ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ea6:	e076      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009ea8:	2340      	movs	r3, #64	; 0x40
 8009eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eae:	e072      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009eb0:	2380      	movs	r3, #128	; 0x80
 8009eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eb6:	e06e      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a76      	ldr	r2, [pc, #472]	; (800a098 <UART_SetConfig+0x6a4>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d130      	bne.n	8009f24 <UART_SetConfig+0x530>
 8009ec2:	4b73      	ldr	r3, [pc, #460]	; (800a090 <UART_SetConfig+0x69c>)
 8009ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ec6:	f003 0307 	and.w	r3, r3, #7
 8009eca:	2b05      	cmp	r3, #5
 8009ecc:	d826      	bhi.n	8009f1c <UART_SetConfig+0x528>
 8009ece:	a201      	add	r2, pc, #4	; (adr r2, 8009ed4 <UART_SetConfig+0x4e0>)
 8009ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ed4:	08009eed 	.word	0x08009eed
 8009ed8:	08009ef5 	.word	0x08009ef5
 8009edc:	08009efd 	.word	0x08009efd
 8009ee0:	08009f05 	.word	0x08009f05
 8009ee4:	08009f0d 	.word	0x08009f0d
 8009ee8:	08009f15 	.word	0x08009f15
 8009eec:	2300      	movs	r3, #0
 8009eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ef2:	e050      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009ef4:	2304      	movs	r3, #4
 8009ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009efa:	e04c      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009efc:	2308      	movs	r3, #8
 8009efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f02:	e048      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009f04:	2310      	movs	r3, #16
 8009f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f0a:	e044      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009f0c:	2320      	movs	r3, #32
 8009f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f12:	e040      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009f14:	2340      	movs	r3, #64	; 0x40
 8009f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f1a:	e03c      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009f1c:	2380      	movs	r3, #128	; 0x80
 8009f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f22:	e038      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a5c      	ldr	r2, [pc, #368]	; (800a09c <UART_SetConfig+0x6a8>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d130      	bne.n	8009f90 <UART_SetConfig+0x59c>
 8009f2e:	4b58      	ldr	r3, [pc, #352]	; (800a090 <UART_SetConfig+0x69c>)
 8009f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f32:	f003 0307 	and.w	r3, r3, #7
 8009f36:	2b05      	cmp	r3, #5
 8009f38:	d826      	bhi.n	8009f88 <UART_SetConfig+0x594>
 8009f3a:	a201      	add	r2, pc, #4	; (adr r2, 8009f40 <UART_SetConfig+0x54c>)
 8009f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f40:	08009f59 	.word	0x08009f59
 8009f44:	08009f61 	.word	0x08009f61
 8009f48:	08009f69 	.word	0x08009f69
 8009f4c:	08009f71 	.word	0x08009f71
 8009f50:	08009f79 	.word	0x08009f79
 8009f54:	08009f81 	.word	0x08009f81
 8009f58:	2302      	movs	r3, #2
 8009f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f5e:	e01a      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009f60:	2304      	movs	r3, #4
 8009f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f66:	e016      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009f68:	2308      	movs	r3, #8
 8009f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f6e:	e012      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009f70:	2310      	movs	r3, #16
 8009f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f76:	e00e      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009f78:	2320      	movs	r3, #32
 8009f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f7e:	e00a      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009f80:	2340      	movs	r3, #64	; 0x40
 8009f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f86:	e006      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009f88:	2380      	movs	r3, #128	; 0x80
 8009f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f8e:	e002      	b.n	8009f96 <UART_SetConfig+0x5a2>
 8009f90:	2380      	movs	r3, #128	; 0x80
 8009f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a40      	ldr	r2, [pc, #256]	; (800a09c <UART_SetConfig+0x6a8>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	f040 80ef 	bne.w	800a180 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009fa6:	2b20      	cmp	r3, #32
 8009fa8:	dc46      	bgt.n	800a038 <UART_SetConfig+0x644>
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	f2c0 8081 	blt.w	800a0b2 <UART_SetConfig+0x6be>
 8009fb0:	3b02      	subs	r3, #2
 8009fb2:	2b1e      	cmp	r3, #30
 8009fb4:	d87d      	bhi.n	800a0b2 <UART_SetConfig+0x6be>
 8009fb6:	a201      	add	r2, pc, #4	; (adr r2, 8009fbc <UART_SetConfig+0x5c8>)
 8009fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fbc:	0800a03f 	.word	0x0800a03f
 8009fc0:	0800a0b3 	.word	0x0800a0b3
 8009fc4:	0800a047 	.word	0x0800a047
 8009fc8:	0800a0b3 	.word	0x0800a0b3
 8009fcc:	0800a0b3 	.word	0x0800a0b3
 8009fd0:	0800a0b3 	.word	0x0800a0b3
 8009fd4:	0800a057 	.word	0x0800a057
 8009fd8:	0800a0b3 	.word	0x0800a0b3
 8009fdc:	0800a0b3 	.word	0x0800a0b3
 8009fe0:	0800a0b3 	.word	0x0800a0b3
 8009fe4:	0800a0b3 	.word	0x0800a0b3
 8009fe8:	0800a0b3 	.word	0x0800a0b3
 8009fec:	0800a0b3 	.word	0x0800a0b3
 8009ff0:	0800a0b3 	.word	0x0800a0b3
 8009ff4:	0800a067 	.word	0x0800a067
 8009ff8:	0800a0b3 	.word	0x0800a0b3
 8009ffc:	0800a0b3 	.word	0x0800a0b3
 800a000:	0800a0b3 	.word	0x0800a0b3
 800a004:	0800a0b3 	.word	0x0800a0b3
 800a008:	0800a0b3 	.word	0x0800a0b3
 800a00c:	0800a0b3 	.word	0x0800a0b3
 800a010:	0800a0b3 	.word	0x0800a0b3
 800a014:	0800a0b3 	.word	0x0800a0b3
 800a018:	0800a0b3 	.word	0x0800a0b3
 800a01c:	0800a0b3 	.word	0x0800a0b3
 800a020:	0800a0b3 	.word	0x0800a0b3
 800a024:	0800a0b3 	.word	0x0800a0b3
 800a028:	0800a0b3 	.word	0x0800a0b3
 800a02c:	0800a0b3 	.word	0x0800a0b3
 800a030:	0800a0b3 	.word	0x0800a0b3
 800a034:	0800a0a5 	.word	0x0800a0a5
 800a038:	2b40      	cmp	r3, #64	; 0x40
 800a03a:	d036      	beq.n	800a0aa <UART_SetConfig+0x6b6>
 800a03c:	e039      	b.n	800a0b2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a03e:	f7fd f941 	bl	80072c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a042:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a044:	e03b      	b.n	800a0be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a046:	f107 0314 	add.w	r3, r7, #20
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7fd f950 	bl	80072f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a054:	e033      	b.n	800a0be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a056:	f107 0308 	add.w	r3, r7, #8
 800a05a:	4618      	mov	r0, r3
 800a05c:	f7fd fa9c 	bl	8007598 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a064:	e02b      	b.n	800a0be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a066:	4b0a      	ldr	r3, [pc, #40]	; (800a090 <UART_SetConfig+0x69c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 0320 	and.w	r3, r3, #32
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d009      	beq.n	800a086 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a072:	4b07      	ldr	r3, [pc, #28]	; (800a090 <UART_SetConfig+0x69c>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	08db      	lsrs	r3, r3, #3
 800a078:	f003 0303 	and.w	r3, r3, #3
 800a07c:	4a08      	ldr	r2, [pc, #32]	; (800a0a0 <UART_SetConfig+0x6ac>)
 800a07e:	fa22 f303 	lsr.w	r3, r2, r3
 800a082:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a084:	e01b      	b.n	800a0be <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a086:	4b06      	ldr	r3, [pc, #24]	; (800a0a0 <UART_SetConfig+0x6ac>)
 800a088:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a08a:	e018      	b.n	800a0be <UART_SetConfig+0x6ca>
 800a08c:	40011400 	.word	0x40011400
 800a090:	58024400 	.word	0x58024400
 800a094:	40007800 	.word	0x40007800
 800a098:	40007c00 	.word	0x40007c00
 800a09c:	58000c00 	.word	0x58000c00
 800a0a0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0a4:	4bc4      	ldr	r3, [pc, #784]	; (800a3b8 <UART_SetConfig+0x9c4>)
 800a0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0a8:	e009      	b.n	800a0be <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0b0:	e005      	b.n	800a0be <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a0bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f000 81da 	beq.w	800a47a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ca:	4abc      	ldr	r2, [pc, #752]	; (800a3bc <UART_SetConfig+0x9c8>)
 800a0cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0d8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	685a      	ldr	r2, [r3, #4]
 800a0de:	4613      	mov	r3, r2
 800a0e0:	005b      	lsls	r3, r3, #1
 800a0e2:	4413      	add	r3, r2
 800a0e4:	6a3a      	ldr	r2, [r7, #32]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d305      	bcc.n	800a0f6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0f0:	6a3a      	ldr	r2, [r7, #32]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d903      	bls.n	800a0fe <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a0fc:	e1bd      	b.n	800a47a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a100:	4618      	mov	r0, r3
 800a102:	f04f 0100 	mov.w	r1, #0
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10a:	4aac      	ldr	r2, [pc, #688]	; (800a3bc <UART_SetConfig+0x9c8>)
 800a10c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a110:	b29a      	uxth	r2, r3
 800a112:	f04f 0300 	mov.w	r3, #0
 800a116:	f7f6 f8df 	bl	80002d8 <__aeabi_uldivmod>
 800a11a:	4602      	mov	r2, r0
 800a11c:	460b      	mov	r3, r1
 800a11e:	4610      	mov	r0, r2
 800a120:	4619      	mov	r1, r3
 800a122:	f04f 0200 	mov.w	r2, #0
 800a126:	f04f 0300 	mov.w	r3, #0
 800a12a:	020b      	lsls	r3, r1, #8
 800a12c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a130:	0202      	lsls	r2, r0, #8
 800a132:	6879      	ldr	r1, [r7, #4]
 800a134:	6849      	ldr	r1, [r1, #4]
 800a136:	0849      	lsrs	r1, r1, #1
 800a138:	4608      	mov	r0, r1
 800a13a:	f04f 0100 	mov.w	r1, #0
 800a13e:	1814      	adds	r4, r2, r0
 800a140:	eb43 0501 	adc.w	r5, r3, r1
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	461a      	mov	r2, r3
 800a14a:	f04f 0300 	mov.w	r3, #0
 800a14e:	4620      	mov	r0, r4
 800a150:	4629      	mov	r1, r5
 800a152:	f7f6 f8c1 	bl	80002d8 <__aeabi_uldivmod>
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	4613      	mov	r3, r2
 800a15c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a160:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a164:	d308      	bcc.n	800a178 <UART_SetConfig+0x784>
 800a166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a16c:	d204      	bcs.n	800a178 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a174:	60da      	str	r2, [r3, #12]
 800a176:	e180      	b.n	800a47a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a17e:	e17c      	b.n	800a47a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	69db      	ldr	r3, [r3, #28]
 800a184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a188:	f040 80bf 	bne.w	800a30a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 800a18c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a190:	2b20      	cmp	r3, #32
 800a192:	dc49      	bgt.n	800a228 <UART_SetConfig+0x834>
 800a194:	2b00      	cmp	r3, #0
 800a196:	db7c      	blt.n	800a292 <UART_SetConfig+0x89e>
 800a198:	2b20      	cmp	r3, #32
 800a19a:	d87a      	bhi.n	800a292 <UART_SetConfig+0x89e>
 800a19c:	a201      	add	r2, pc, #4	; (adr r2, 800a1a4 <UART_SetConfig+0x7b0>)
 800a19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a2:	bf00      	nop
 800a1a4:	0800a22f 	.word	0x0800a22f
 800a1a8:	0800a237 	.word	0x0800a237
 800a1ac:	0800a293 	.word	0x0800a293
 800a1b0:	0800a293 	.word	0x0800a293
 800a1b4:	0800a23f 	.word	0x0800a23f
 800a1b8:	0800a293 	.word	0x0800a293
 800a1bc:	0800a293 	.word	0x0800a293
 800a1c0:	0800a293 	.word	0x0800a293
 800a1c4:	0800a24f 	.word	0x0800a24f
 800a1c8:	0800a293 	.word	0x0800a293
 800a1cc:	0800a293 	.word	0x0800a293
 800a1d0:	0800a293 	.word	0x0800a293
 800a1d4:	0800a293 	.word	0x0800a293
 800a1d8:	0800a293 	.word	0x0800a293
 800a1dc:	0800a293 	.word	0x0800a293
 800a1e0:	0800a293 	.word	0x0800a293
 800a1e4:	0800a25f 	.word	0x0800a25f
 800a1e8:	0800a293 	.word	0x0800a293
 800a1ec:	0800a293 	.word	0x0800a293
 800a1f0:	0800a293 	.word	0x0800a293
 800a1f4:	0800a293 	.word	0x0800a293
 800a1f8:	0800a293 	.word	0x0800a293
 800a1fc:	0800a293 	.word	0x0800a293
 800a200:	0800a293 	.word	0x0800a293
 800a204:	0800a293 	.word	0x0800a293
 800a208:	0800a293 	.word	0x0800a293
 800a20c:	0800a293 	.word	0x0800a293
 800a210:	0800a293 	.word	0x0800a293
 800a214:	0800a293 	.word	0x0800a293
 800a218:	0800a293 	.word	0x0800a293
 800a21c:	0800a293 	.word	0x0800a293
 800a220:	0800a293 	.word	0x0800a293
 800a224:	0800a285 	.word	0x0800a285
 800a228:	2b40      	cmp	r3, #64	; 0x40
 800a22a:	d02e      	beq.n	800a28a <UART_SetConfig+0x896>
 800a22c:	e031      	b.n	800a292 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a22e:	f7fc f8dd 	bl	80063ec <HAL_RCC_GetPCLK1Freq>
 800a232:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a234:	e033      	b.n	800a29e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a236:	f7fc f8ef 	bl	8006418 <HAL_RCC_GetPCLK2Freq>
 800a23a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a23c:	e02f      	b.n	800a29e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a23e:	f107 0314 	add.w	r3, r7, #20
 800a242:	4618      	mov	r0, r3
 800a244:	f7fd f854 	bl	80072f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a24c:	e027      	b.n	800a29e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a24e:	f107 0308 	add.w	r3, r7, #8
 800a252:	4618      	mov	r0, r3
 800a254:	f7fd f9a0 	bl	8007598 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a25c:	e01f      	b.n	800a29e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a25e:	4b58      	ldr	r3, [pc, #352]	; (800a3c0 <UART_SetConfig+0x9cc>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f003 0320 	and.w	r3, r3, #32
 800a266:	2b00      	cmp	r3, #0
 800a268:	d009      	beq.n	800a27e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a26a:	4b55      	ldr	r3, [pc, #340]	; (800a3c0 <UART_SetConfig+0x9cc>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	08db      	lsrs	r3, r3, #3
 800a270:	f003 0303 	and.w	r3, r3, #3
 800a274:	4a53      	ldr	r2, [pc, #332]	; (800a3c4 <UART_SetConfig+0x9d0>)
 800a276:	fa22 f303 	lsr.w	r3, r2, r3
 800a27a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a27c:	e00f      	b.n	800a29e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a27e:	4b51      	ldr	r3, [pc, #324]	; (800a3c4 <UART_SetConfig+0x9d0>)
 800a280:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a282:	e00c      	b.n	800a29e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a284:	4b4c      	ldr	r3, [pc, #304]	; (800a3b8 <UART_SetConfig+0x9c4>)
 800a286:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a288:	e009      	b.n	800a29e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a28a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a28e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a290:	e005      	b.n	800a29e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a292:	2300      	movs	r3, #0
 800a294:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a29c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f000 80ea 	beq.w	800a47a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2aa:	4a44      	ldr	r2, [pc, #272]	; (800a3bc <UART_SetConfig+0x9c8>)
 800a2ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2b8:	005a      	lsls	r2, r3, #1
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	085b      	lsrs	r3, r3, #1
 800a2c0:	441a      	add	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d0:	2b0f      	cmp	r3, #15
 800a2d2:	d916      	bls.n	800a302 <UART_SetConfig+0x90e>
 800a2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2da:	d212      	bcs.n	800a302 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	f023 030f 	bic.w	r3, r3, #15
 800a2e4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e8:	085b      	lsrs	r3, r3, #1
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	f003 0307 	and.w	r3, r3, #7
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a2fe:	60da      	str	r2, [r3, #12]
 800a300:	e0bb      	b.n	800a47a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a302:	2301      	movs	r3, #1
 800a304:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a308:	e0b7      	b.n	800a47a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a30a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a30e:	2b20      	cmp	r3, #32
 800a310:	dc4a      	bgt.n	800a3a8 <UART_SetConfig+0x9b4>
 800a312:	2b00      	cmp	r3, #0
 800a314:	f2c0 8086 	blt.w	800a424 <UART_SetConfig+0xa30>
 800a318:	2b20      	cmp	r3, #32
 800a31a:	f200 8083 	bhi.w	800a424 <UART_SetConfig+0xa30>
 800a31e:	a201      	add	r2, pc, #4	; (adr r2, 800a324 <UART_SetConfig+0x930>)
 800a320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a324:	0800a3af 	.word	0x0800a3af
 800a328:	0800a3c9 	.word	0x0800a3c9
 800a32c:	0800a425 	.word	0x0800a425
 800a330:	0800a425 	.word	0x0800a425
 800a334:	0800a3d1 	.word	0x0800a3d1
 800a338:	0800a425 	.word	0x0800a425
 800a33c:	0800a425 	.word	0x0800a425
 800a340:	0800a425 	.word	0x0800a425
 800a344:	0800a3e1 	.word	0x0800a3e1
 800a348:	0800a425 	.word	0x0800a425
 800a34c:	0800a425 	.word	0x0800a425
 800a350:	0800a425 	.word	0x0800a425
 800a354:	0800a425 	.word	0x0800a425
 800a358:	0800a425 	.word	0x0800a425
 800a35c:	0800a425 	.word	0x0800a425
 800a360:	0800a425 	.word	0x0800a425
 800a364:	0800a3f1 	.word	0x0800a3f1
 800a368:	0800a425 	.word	0x0800a425
 800a36c:	0800a425 	.word	0x0800a425
 800a370:	0800a425 	.word	0x0800a425
 800a374:	0800a425 	.word	0x0800a425
 800a378:	0800a425 	.word	0x0800a425
 800a37c:	0800a425 	.word	0x0800a425
 800a380:	0800a425 	.word	0x0800a425
 800a384:	0800a425 	.word	0x0800a425
 800a388:	0800a425 	.word	0x0800a425
 800a38c:	0800a425 	.word	0x0800a425
 800a390:	0800a425 	.word	0x0800a425
 800a394:	0800a425 	.word	0x0800a425
 800a398:	0800a425 	.word	0x0800a425
 800a39c:	0800a425 	.word	0x0800a425
 800a3a0:	0800a425 	.word	0x0800a425
 800a3a4:	0800a417 	.word	0x0800a417
 800a3a8:	2b40      	cmp	r3, #64	; 0x40
 800a3aa:	d037      	beq.n	800a41c <UART_SetConfig+0xa28>
 800a3ac:	e03a      	b.n	800a424 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3ae:	f7fc f81d 	bl	80063ec <HAL_RCC_GetPCLK1Freq>
 800a3b2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a3b4:	e03c      	b.n	800a430 <UART_SetConfig+0xa3c>
 800a3b6:	bf00      	nop
 800a3b8:	003d0900 	.word	0x003d0900
 800a3bc:	0800b2e0 	.word	0x0800b2e0
 800a3c0:	58024400 	.word	0x58024400
 800a3c4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3c8:	f7fc f826 	bl	8006418 <HAL_RCC_GetPCLK2Freq>
 800a3cc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a3ce:	e02f      	b.n	800a430 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3d0:	f107 0314 	add.w	r3, r7, #20
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7fc ff8b 	bl	80072f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3de:	e027      	b.n	800a430 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3e0:	f107 0308 	add.w	r3, r7, #8
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fd f8d7 	bl	8007598 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3ee:	e01f      	b.n	800a430 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3f0:	4b2c      	ldr	r3, [pc, #176]	; (800a4a4 <UART_SetConfig+0xab0>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 0320 	and.w	r3, r3, #32
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d009      	beq.n	800a410 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3fc:	4b29      	ldr	r3, [pc, #164]	; (800a4a4 <UART_SetConfig+0xab0>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	08db      	lsrs	r3, r3, #3
 800a402:	f003 0303 	and.w	r3, r3, #3
 800a406:	4a28      	ldr	r2, [pc, #160]	; (800a4a8 <UART_SetConfig+0xab4>)
 800a408:	fa22 f303 	lsr.w	r3, r2, r3
 800a40c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a40e:	e00f      	b.n	800a430 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a410:	4b25      	ldr	r3, [pc, #148]	; (800a4a8 <UART_SetConfig+0xab4>)
 800a412:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a414:	e00c      	b.n	800a430 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a416:	4b25      	ldr	r3, [pc, #148]	; (800a4ac <UART_SetConfig+0xab8>)
 800a418:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a41a:	e009      	b.n	800a430 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a41c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a420:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a422:	e005      	b.n	800a430 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a424:	2300      	movs	r3, #0
 800a426:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a42e:	bf00      	nop
    }

    if (pclk != 0U)
 800a430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a432:	2b00      	cmp	r3, #0
 800a434:	d021      	beq.n	800a47a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43a:	4a1d      	ldr	r2, [pc, #116]	; (800a4b0 <UART_SetConfig+0xabc>)
 800a43c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a440:	461a      	mov	r2, r3
 800a442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a444:	fbb3 f2f2 	udiv	r2, r3, r2
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	085b      	lsrs	r3, r3, #1
 800a44e:	441a      	add	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	fbb2 f3f3 	udiv	r3, r2, r3
 800a458:	b29b      	uxth	r3, r3
 800a45a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45e:	2b0f      	cmp	r3, #15
 800a460:	d908      	bls.n	800a474 <UART_SetConfig+0xa80>
 800a462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a468:	d204      	bcs.n	800a474 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a470:	60da      	str	r2, [r3, #12]
 800a472:	e002      	b.n	800a47a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2201      	movs	r2, #1
 800a486:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a496:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3738      	adds	r7, #56	; 0x38
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bdb0      	pop	{r4, r5, r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	58024400 	.word	0x58024400
 800a4a8:	03d09000 	.word	0x03d09000
 800a4ac:	003d0900 	.word	0x003d0900
 800a4b0:	0800b2e0 	.word	0x0800b2e0

0800a4b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c0:	f003 0301 	and.w	r3, r3, #1
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00a      	beq.n	800a4de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	430a      	orrs	r2, r1
 800a4dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e2:	f003 0302 	and.w	r3, r3, #2
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00a      	beq.n	800a500 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	430a      	orrs	r2, r1
 800a4fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a504:	f003 0304 	and.w	r3, r3, #4
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00a      	beq.n	800a522 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	430a      	orrs	r2, r1
 800a520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a526:	f003 0308 	and.w	r3, r3, #8
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00a      	beq.n	800a544 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	430a      	orrs	r2, r1
 800a542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a548:	f003 0310 	and.w	r3, r3, #16
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00a      	beq.n	800a566 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	430a      	orrs	r2, r1
 800a564:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56a:	f003 0320 	and.w	r3, r3, #32
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00a      	beq.n	800a588 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	430a      	orrs	r2, r1
 800a586:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a590:	2b00      	cmp	r3, #0
 800a592:	d01a      	beq.n	800a5ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5b2:	d10a      	bne.n	800a5ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	430a      	orrs	r2, r1
 800a5c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00a      	beq.n	800a5ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	430a      	orrs	r2, r1
 800a5ea:	605a      	str	r2, [r3, #4]
  }
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b086      	sub	sp, #24
 800a5fc:	af02      	add	r7, sp, #8
 800a5fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a608:	f7f8 f908 	bl	800281c <HAL_GetTick>
 800a60c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f003 0308 	and.w	r3, r3, #8
 800a618:	2b08      	cmp	r3, #8
 800a61a:	d10e      	bne.n	800a63a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a61c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 f82f 	bl	800a68e <UART_WaitOnFlagUntilTimeout>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d001      	beq.n	800a63a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a636:	2303      	movs	r3, #3
 800a638:	e025      	b.n	800a686 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 0304 	and.w	r3, r3, #4
 800a644:	2b04      	cmp	r3, #4
 800a646:	d10e      	bne.n	800a666 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 f819 	bl	800a68e <UART_WaitOnFlagUntilTimeout>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d001      	beq.n	800a666 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a662:	2303      	movs	r3, #3
 800a664:	e00f      	b.n	800a686 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2220      	movs	r2, #32
 800a66a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2220      	movs	r2, #32
 800a672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b084      	sub	sp, #16
 800a692:	af00      	add	r7, sp, #0
 800a694:	60f8      	str	r0, [r7, #12]
 800a696:	60b9      	str	r1, [r7, #8]
 800a698:	603b      	str	r3, [r7, #0]
 800a69a:	4613      	mov	r3, r2
 800a69c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a69e:	e062      	b.n	800a766 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a6:	d05e      	beq.n	800a766 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6a8:	f7f8 f8b8 	bl	800281c <HAL_GetTick>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	1ad3      	subs	r3, r2, r3
 800a6b2:	69ba      	ldr	r2, [r7, #24]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d302      	bcc.n	800a6be <UART_WaitOnFlagUntilTimeout+0x30>
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d11d      	bne.n	800a6fa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a6cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	689a      	ldr	r2, [r3, #8]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f022 0201 	bic.w	r2, r2, #1
 800a6dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2220      	movs	r2, #32
 800a6e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2220      	movs	r2, #32
 800a6ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a6f6:	2303      	movs	r3, #3
 800a6f8:	e045      	b.n	800a786 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 0304 	and.w	r3, r3, #4
 800a704:	2b00      	cmp	r3, #0
 800a706:	d02e      	beq.n	800a766 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	69db      	ldr	r3, [r3, #28]
 800a70e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a716:	d126      	bne.n	800a766 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a720:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a730:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	689a      	ldr	r2, [r3, #8]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f022 0201 	bic.w	r2, r2, #1
 800a740:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2220      	movs	r2, #32
 800a746:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2220      	movs	r2, #32
 800a74e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2220      	movs	r2, #32
 800a756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a762:	2303      	movs	r3, #3
 800a764:	e00f      	b.n	800a786 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	69da      	ldr	r2, [r3, #28]
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	4013      	ands	r3, r2
 800a770:	68ba      	ldr	r2, [r7, #8]
 800a772:	429a      	cmp	r2, r3
 800a774:	bf0c      	ite	eq
 800a776:	2301      	moveq	r3, #1
 800a778:	2300      	movne	r3, #0
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	461a      	mov	r2, r3
 800a77e:	79fb      	ldrb	r3, [r7, #7]
 800a780:	429a      	cmp	r2, r3
 800a782:	d08d      	beq.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
	...

0800a790 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	4613      	mov	r3, r2
 800a79c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	68ba      	ldr	r2, [r7, #8]
 800a7a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	88fa      	ldrh	r2, [r7, #6]
 800a7a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	88fa      	ldrh	r2, [r7, #6]
 800a7b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7c2:	d10e      	bne.n	800a7e2 <UART_Start_Receive_IT+0x52>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d105      	bne.n	800a7d8 <UART_Start_Receive_IT+0x48>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a7d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7d6:	e02d      	b.n	800a834 <UART_Start_Receive_IT+0xa4>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	22ff      	movs	r2, #255	; 0xff
 800a7dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7e0:	e028      	b.n	800a834 <UART_Start_Receive_IT+0xa4>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d10d      	bne.n	800a806 <UART_Start_Receive_IT+0x76>
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	691b      	ldr	r3, [r3, #16]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d104      	bne.n	800a7fc <UART_Start_Receive_IT+0x6c>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	22ff      	movs	r2, #255	; 0xff
 800a7f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a7fa:	e01b      	b.n	800a834 <UART_Start_Receive_IT+0xa4>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	227f      	movs	r2, #127	; 0x7f
 800a800:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a804:	e016      	b.n	800a834 <UART_Start_Receive_IT+0xa4>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a80e:	d10d      	bne.n	800a82c <UART_Start_Receive_IT+0x9c>
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d104      	bne.n	800a822 <UART_Start_Receive_IT+0x92>
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	227f      	movs	r2, #127	; 0x7f
 800a81c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a820:	e008      	b.n	800a834 <UART_Start_Receive_IT+0xa4>
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	223f      	movs	r2, #63	; 0x3f
 800a826:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a82a:	e003      	b.n	800a834 <UART_Start_Receive_IT+0xa4>
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2200      	movs	r2, #0
 800a830:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	2222      	movs	r2, #34	; 0x22
 800a840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	689a      	ldr	r2, [r3, #8]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f042 0201 	orr.w	r2, r2, #1
 800a852:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a85c:	d12a      	bne.n	800a8b4 <UART_Start_Receive_IT+0x124>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a864:	88fa      	ldrh	r2, [r7, #6]
 800a866:	429a      	cmp	r2, r3
 800a868:	d324      	bcc.n	800a8b4 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a872:	d107      	bne.n	800a884 <UART_Start_Receive_IT+0xf4>
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	691b      	ldr	r3, [r3, #16]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d103      	bne.n	800a884 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	4a1f      	ldr	r2, [pc, #124]	; (800a8fc <UART_Start_Receive_IT+0x16c>)
 800a880:	671a      	str	r2, [r3, #112]	; 0x70
 800a882:	e002      	b.n	800a88a <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	4a1e      	ldr	r2, [pc, #120]	; (800a900 <UART_Start_Receive_IT+0x170>)
 800a888:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8a0:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	689a      	ldr	r2, [r3, #8]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a8b0:	609a      	str	r2, [r3, #8]
 800a8b2:	e01b      	b.n	800a8ec <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	689b      	ldr	r3, [r3, #8]
 800a8b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a8bc:	d107      	bne.n	800a8ce <UART_Start_Receive_IT+0x13e>
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d103      	bne.n	800a8ce <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	4a0e      	ldr	r2, [pc, #56]	; (800a904 <UART_Start_Receive_IT+0x174>)
 800a8ca:	671a      	str	r2, [r3, #112]	; 0x70
 800a8cc:	e002      	b.n	800a8d4 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	4a0d      	ldr	r2, [pc, #52]	; (800a908 <UART_Start_Receive_IT+0x178>)
 800a8d2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a8ea:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3714      	adds	r7, #20
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	0800ad85 	.word	0x0800ad85
 800a900:	0800ab81 	.word	0x0800ab81
 800a904:	0800aaa9 	.word	0x0800aaa9
 800a908:	0800a9d1 	.word	0x0800a9d1

0800a90c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a922:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	6899      	ldr	r1, [r3, #8]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	4b0f      	ldr	r3, [pc, #60]	; (800a96c <UART_EndRxTransfer+0x60>)
 800a930:	400b      	ands	r3, r1
 800a932:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a938:	2b01      	cmp	r3, #1
 800a93a:	d107      	bne.n	800a94c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f022 0210 	bic.w	r2, r2, #16
 800a94a:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2220      	movs	r2, #32
 800a950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a960:	bf00      	nop
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	effffffe 	.word	0xeffffffe

0800a970 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2200      	movs	r2, #0
 800a982:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f7ff f81a 	bl	80099c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a994:	bf00      	nop
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9b2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2220      	movs	r2, #32
 800a9b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f7f7 f962 	bl	8001c8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9c8:	bf00      	nop
 800a9ca:	3708      	adds	r7, #8
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a9de:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9e6:	2b22      	cmp	r3, #34	; 0x22
 800a9e8:	d152      	bne.n	800aa90 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a9f2:	89bb      	ldrh	r3, [r7, #12]
 800a9f4:	b2d9      	uxtb	r1, r3
 800a9f6:	89fb      	ldrh	r3, [r7, #14]
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9fe:	400a      	ands	r2, r1
 800aa00:	b2d2      	uxtb	r2, r2
 800aa02:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa08:	1c5a      	adds	r2, r3, #1
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	3b01      	subs	r3, #1
 800aa18:	b29a      	uxth	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d139      	bne.n	800aaa0 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800aa3a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	689a      	ldr	r2, [r3, #8]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f022 0201 	bic.w	r2, r2, #1
 800aa4a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2220      	movs	r2, #32
 800aa50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d10f      	bne.n	800aa82 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f022 0210 	bic.w	r2, r2, #16
 800aa70:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa78:	4619      	mov	r1, r3
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f7fe ffae 	bl	80099dc <HAL_UARTEx_RxEventCallback>
 800aa80:	e002      	b.n	800aa88 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f7f6 ffda 	bl	8001a3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800aa8e:	e007      	b.n	800aaa0 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	699a      	ldr	r2, [r3, #24]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f042 0208 	orr.w	r2, r2, #8
 800aa9e:	619a      	str	r2, [r3, #24]
}
 800aaa0:	bf00      	nop
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aab6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aabe:	2b22      	cmp	r3, #34	; 0x22
 800aac0:	d152      	bne.n	800ab68 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aace:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800aad0:	89ba      	ldrh	r2, [r7, #12]
 800aad2:	89fb      	ldrh	r3, [r7, #14]
 800aad4:	4013      	ands	r3, r2
 800aad6:	b29a      	uxth	r2, r3
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aae0:	1c9a      	adds	r2, r3, #2
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d139      	bne.n	800ab78 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ab12:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	689a      	ldr	r2, [r3, #8]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f022 0201 	bic.w	r2, r2, #1
 800ab22:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2220      	movs	r2, #32
 800ab28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d10f      	bne.n	800ab5a <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f022 0210 	bic.w	r2, r2, #16
 800ab48:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ab50:	4619      	mov	r1, r3
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f7fe ff42 	bl	80099dc <HAL_UARTEx_RxEventCallback>
 800ab58:	e002      	b.n	800ab60 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f7f6 ff6e 	bl	8001a3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ab66:	e007      	b.n	800ab78 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	699a      	ldr	r2, [r3, #24]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f042 0208 	orr.w	r2, r2, #8
 800ab76:	619a      	str	r2, [r3, #24]
}
 800ab78:	bf00      	nop
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b088      	sub	sp, #32
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab8e:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	69db      	ldr	r3, [r3, #28]
 800ab96:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abae:	2b22      	cmp	r3, #34	; 0x22
 800abb0:	f040 80d8 	bne.w	800ad64 <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800abba:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800abbc:	e0a8      	b.n	800ad10 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc4:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800abc6:	89bb      	ldrh	r3, [r7, #12]
 800abc8:	b2d9      	uxtb	r1, r3
 800abca:	8b7b      	ldrh	r3, [r7, #26]
 800abcc:	b2da      	uxtb	r2, r3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abd2:	400a      	ands	r2, r1
 800abd4:	b2d2      	uxtb	r2, r2
 800abd6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abdc:	1c5a      	adds	r2, r3, #1
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800abe8:	b29b      	uxth	r3, r3
 800abea:	3b01      	subs	r3, #1
 800abec:	b29a      	uxth	r2, r3
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	69db      	ldr	r3, [r3, #28]
 800abfa:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	f003 0307 	and.w	r3, r3, #7
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d04d      	beq.n	800aca2 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	f003 0301 	and.w	r3, r3, #1
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d010      	beq.n	800ac32 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00b      	beq.n	800ac32 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac28:	f043 0201 	orr.w	r2, r3, #1
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	f003 0302 	and.w	r3, r3, #2
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d010      	beq.n	800ac5e <UART_RxISR_8BIT_FIFOEN+0xde>
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	f003 0301 	and.w	r3, r3, #1
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d00b      	beq.n	800ac5e <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac54:	f043 0204 	orr.w	r2, r3, #4
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	f003 0304 	and.w	r3, r3, #4
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d010      	beq.n	800ac8a <UART_RxISR_8BIT_FIFOEN+0x10a>
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d00b      	beq.n	800ac8a <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2204      	movs	r2, #4
 800ac78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac80:	f043 0202 	orr.w	r2, r3, #2
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d006      	beq.n	800aca2 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f7fe fe97 	bl	80099c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d130      	bne.n	800ad10 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800acbc:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	6899      	ldr	r1, [r3, #8]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	4b2c      	ldr	r3, [pc, #176]	; (800ad7c <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 800acca:	400b      	ands	r3, r1
 800accc:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2220      	movs	r2, #32
 800acd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d10f      	bne.n	800ad04 <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f022 0210 	bic.w	r2, r2, #16
 800acf2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800acfa:	4619      	mov	r1, r3
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7fe fe6d 	bl	80099dc <HAL_UARTEx_RxEventCallback>
 800ad02:	e002      	b.n	800ad0a <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f7f6 fe99 	bl	8001a3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad10:	89fb      	ldrh	r3, [r7, #14]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d005      	beq.n	800ad22 <UART_RxISR_8BIT_FIFOEN+0x1a2>
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	f003 0320 	and.w	r3, r3, #32
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f47f af4e 	bne.w	800abbe <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad28:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ad2a:	897b      	ldrh	r3, [r7, #10]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d021      	beq.n	800ad74 <UART_RxISR_8BIT_FIFOEN+0x1f4>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ad36:	897a      	ldrh	r2, [r7, #10]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d21b      	bcs.n	800ad74 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	689a      	ldr	r2, [r3, #8]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ad4a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a0c      	ldr	r2, [pc, #48]	; (800ad80 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800ad50:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f042 0220 	orr.w	r2, r2, #32
 800ad60:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad62:	e007      	b.n	800ad74 <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	699a      	ldr	r2, [r3, #24]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f042 0208 	orr.w	r2, r2, #8
 800ad72:	619a      	str	r2, [r3, #24]
}
 800ad74:	bf00      	nop
 800ad76:	3720      	adds	r7, #32
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	effffffe 	.word	0xeffffffe
 800ad80:	0800a9d1 	.word	0x0800a9d1

0800ad84 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b08a      	sub	sp, #40	; 0x28
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad92:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	69db      	ldr	r3, [r3, #28]
 800ad9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adb2:	2b22      	cmp	r3, #34	; 0x22
 800adb4:	f040 80d8 	bne.w	800af68 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800adbe:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800adc0:	e0a8      	b.n	800af14 <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adce:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800add0:	8aba      	ldrh	r2, [r7, #20]
 800add2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800add4:	4013      	ands	r3, r2
 800add6:	b29a      	uxth	r2, r3
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ade0:	1c9a      	adds	r2, r3, #2
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800adec:	b29b      	uxth	r3, r3
 800adee:	3b01      	subs	r3, #1
 800adf0:	b29a      	uxth	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	69db      	ldr	r3, [r3, #28]
 800adfe:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	f003 0307 	and.w	r3, r3, #7
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d04d      	beq.n	800aea6 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0c:	f003 0301 	and.w	r3, r3, #1
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d010      	beq.n	800ae36 <UART_RxISR_16BIT_FIFOEN+0xb2>
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d00b      	beq.n	800ae36 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2201      	movs	r2, #1
 800ae24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae2c:	f043 0201 	orr.w	r2, r3, #1
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae38:	f003 0302 	and.w	r3, r3, #2
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d010      	beq.n	800ae62 <UART_RxISR_16BIT_FIFOEN+0xde>
 800ae40:	69bb      	ldr	r3, [r7, #24]
 800ae42:	f003 0301 	and.w	r3, r3, #1
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00b      	beq.n	800ae62 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2202      	movs	r2, #2
 800ae50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae58:	f043 0204 	orr.w	r2, r3, #4
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae64:	f003 0304 	and.w	r3, r3, #4
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d010      	beq.n	800ae8e <UART_RxISR_16BIT_FIFOEN+0x10a>
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	f003 0301 	and.w	r3, r3, #1
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00b      	beq.n	800ae8e <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2204      	movs	r2, #4
 800ae7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae84:	f043 0202 	orr.w	r2, r3, #2
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d006      	beq.n	800aea6 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f7fe fd95 	bl	80099c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d130      	bne.n	800af14 <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aec0:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	6899      	ldr	r1, [r3, #8]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	4b2c      	ldr	r3, [pc, #176]	; (800af80 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 800aece:	400b      	ands	r3, r1
 800aed0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2220      	movs	r2, #32
 800aed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d10f      	bne.n	800af08 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f022 0210 	bic.w	r2, r2, #16
 800aef6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7fe fd6b 	bl	80099dc <HAL_UARTEx_RxEventCallback>
 800af06:	e002      	b.n	800af0e <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f7f6 fd97 	bl	8001a3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800af14:	8afb      	ldrh	r3, [r7, #22]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d005      	beq.n	800af26 <UART_RxISR_16BIT_FIFOEN+0x1a2>
 800af1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1c:	f003 0320 	and.w	r3, r3, #32
 800af20:	2b00      	cmp	r3, #0
 800af22:	f47f af4e 	bne.w	800adc2 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800af2c:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800af2e:	89fb      	ldrh	r3, [r7, #14]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d021      	beq.n	800af78 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800af3a:	89fa      	ldrh	r2, [r7, #14]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d21b      	bcs.n	800af78 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	689a      	ldr	r2, [r3, #8]
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800af4e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a0c      	ldr	r2, [pc, #48]	; (800af84 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800af54:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f042 0220 	orr.w	r2, r2, #32
 800af64:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800af66:	e007      	b.n	800af78 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	699a      	ldr	r2, [r3, #24]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f042 0208 	orr.w	r2, r2, #8
 800af76:	619a      	str	r2, [r3, #24]
}
 800af78:	bf00      	nop
 800af7a:	3728      	adds	r7, #40	; 0x28
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	effffffe 	.word	0xeffffffe
 800af84:	0800aaa9 	.word	0x0800aaa9

0800af88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800af90:	bf00      	nop
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800afa4:	bf00      	nop
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800afb8:	bf00      	nop
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d101      	bne.n	800afda <HAL_UARTEx_DisableFifoMode+0x16>
 800afd6:	2302      	movs	r3, #2
 800afd8:	e027      	b.n	800b02a <HAL_UARTEx_DisableFifoMode+0x66>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2201      	movs	r2, #1
 800afde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2224      	movs	r2, #36	; 0x24
 800afe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f022 0201 	bic.w	r2, r2, #1
 800b000:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b008:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2220      	movs	r2, #32
 800b01c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3714      	adds	r7, #20
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr

0800b036 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b084      	sub	sp, #16
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b046:	2b01      	cmp	r3, #1
 800b048:	d101      	bne.n	800b04e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b04a:	2302      	movs	r3, #2
 800b04c:	e02d      	b.n	800b0aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2224      	movs	r2, #36	; 0x24
 800b05a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f022 0201 	bic.w	r2, r2, #1
 800b074:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	683a      	ldr	r2, [r7, #0]
 800b086:	430a      	orrs	r2, r1
 800b088:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f850 	bl	800b130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2220      	movs	r2, #32
 800b09c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b084      	sub	sp, #16
 800b0b6:	af00      	add	r7, sp, #0
 800b0b8:	6078      	str	r0, [r7, #4]
 800b0ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d101      	bne.n	800b0ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b0c6:	2302      	movs	r3, #2
 800b0c8:	e02d      	b.n	800b126 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2224      	movs	r2, #36	; 0x24
 800b0d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f022 0201 	bic.w	r2, r2, #1
 800b0f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	683a      	ldr	r2, [r7, #0]
 800b102:	430a      	orrs	r2, r1
 800b104:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 f812 	bl	800b130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68fa      	ldr	r2, [r7, #12]
 800b112:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2220      	movs	r2, #32
 800b118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
	...

0800b130 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b130:	b480      	push	{r7}
 800b132:	b085      	sub	sp, #20
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d108      	bne.n	800b152 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b150:	e031      	b.n	800b1b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b152:	2310      	movs	r3, #16
 800b154:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b156:	2310      	movs	r3, #16
 800b158:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	0e5b      	lsrs	r3, r3, #25
 800b162:	b2db      	uxtb	r3, r3
 800b164:	f003 0307 	and.w	r3, r3, #7
 800b168:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	0f5b      	lsrs	r3, r3, #29
 800b172:	b2db      	uxtb	r3, r3
 800b174:	f003 0307 	and.w	r3, r3, #7
 800b178:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b17a:	7bbb      	ldrb	r3, [r7, #14]
 800b17c:	7b3a      	ldrb	r2, [r7, #12]
 800b17e:	4911      	ldr	r1, [pc, #68]	; (800b1c4 <UARTEx_SetNbDataToProcess+0x94>)
 800b180:	5c8a      	ldrb	r2, [r1, r2]
 800b182:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b186:	7b3a      	ldrb	r2, [r7, #12]
 800b188:	490f      	ldr	r1, [pc, #60]	; (800b1c8 <UARTEx_SetNbDataToProcess+0x98>)
 800b18a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b18c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b190:	b29a      	uxth	r2, r3
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b198:	7bfb      	ldrb	r3, [r7, #15]
 800b19a:	7b7a      	ldrb	r2, [r7, #13]
 800b19c:	4909      	ldr	r1, [pc, #36]	; (800b1c4 <UARTEx_SetNbDataToProcess+0x94>)
 800b19e:	5c8a      	ldrb	r2, [r1, r2]
 800b1a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b1a4:	7b7a      	ldrb	r2, [r7, #13]
 800b1a6:	4908      	ldr	r1, [pc, #32]	; (800b1c8 <UARTEx_SetNbDataToProcess+0x98>)
 800b1a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b1aa:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b1b6:	bf00      	nop
 800b1b8:	3714      	adds	r7, #20
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop
 800b1c4:	0800b2f8 	.word	0x0800b2f8
 800b1c8:	0800b300 	.word	0x0800b300

0800b1cc <round>:
 800b1cc:	ee10 1a90 	vmov	r1, s1
 800b1d0:	f3c1 500a 	ubfx	r0, r1, #20, #11
 800b1d4:	f2a0 32ff 	subw	r2, r0, #1023	; 0x3ff
 800b1d8:	2a13      	cmp	r2, #19
 800b1da:	b510      	push	{r4, lr}
 800b1dc:	ee10 3a10 	vmov	r3, s0
 800b1e0:	dc19      	bgt.n	800b216 <round+0x4a>
 800b1e2:	2a00      	cmp	r2, #0
 800b1e4:	da09      	bge.n	800b1fa <round+0x2e>
 800b1e6:	3201      	adds	r2, #1
 800b1e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800b1ec:	d103      	bne.n	800b1f6 <round+0x2a>
 800b1ee:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800b1f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	e027      	b.n	800b24a <round+0x7e>
 800b1fa:	4816      	ldr	r0, [pc, #88]	; (800b254 <round+0x88>)
 800b1fc:	4110      	asrs	r0, r2
 800b1fe:	ea01 0400 	and.w	r4, r1, r0
 800b202:	4323      	orrs	r3, r4
 800b204:	d00e      	beq.n	800b224 <round+0x58>
 800b206:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b20a:	fa43 f202 	asr.w	r2, r3, r2
 800b20e:	4411      	add	r1, r2
 800b210:	ea21 0100 	bic.w	r1, r1, r0
 800b214:	e7ef      	b.n	800b1f6 <round+0x2a>
 800b216:	2a33      	cmp	r2, #51	; 0x33
 800b218:	dd05      	ble.n	800b226 <round+0x5a>
 800b21a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800b21e:	d101      	bne.n	800b224 <round+0x58>
 800b220:	ee30 0b00 	vadd.f64	d0, d0, d0
 800b224:	bd10      	pop	{r4, pc}
 800b226:	f2a0 4413 	subw	r4, r0, #1043	; 0x413
 800b22a:	f04f 30ff 	mov.w	r0, #4294967295
 800b22e:	fa20 f404 	lsr.w	r4, r0, r4
 800b232:	4223      	tst	r3, r4
 800b234:	d0f6      	beq.n	800b224 <round+0x58>
 800b236:	2001      	movs	r0, #1
 800b238:	f1c2 0233 	rsb	r2, r2, #51	; 0x33
 800b23c:	fa00 f202 	lsl.w	r2, r0, r2
 800b240:	189b      	adds	r3, r3, r2
 800b242:	bf28      	it	cs
 800b244:	1809      	addcs	r1, r1, r0
 800b246:	ea23 0004 	bic.w	r0, r3, r4
 800b24a:	460b      	mov	r3, r1
 800b24c:	4602      	mov	r2, r0
 800b24e:	ec43 2b10 	vmov	d0, r2, r3
 800b252:	e7e7      	b.n	800b224 <round+0x58>
 800b254:	000fffff 	.word	0x000fffff

0800b258 <__libc_init_array>:
 800b258:	b570      	push	{r4, r5, r6, lr}
 800b25a:	4d0d      	ldr	r5, [pc, #52]	; (800b290 <__libc_init_array+0x38>)
 800b25c:	4c0d      	ldr	r4, [pc, #52]	; (800b294 <__libc_init_array+0x3c>)
 800b25e:	1b64      	subs	r4, r4, r5
 800b260:	10a4      	asrs	r4, r4, #2
 800b262:	2600      	movs	r6, #0
 800b264:	42a6      	cmp	r6, r4
 800b266:	d109      	bne.n	800b27c <__libc_init_array+0x24>
 800b268:	4d0b      	ldr	r5, [pc, #44]	; (800b298 <__libc_init_array+0x40>)
 800b26a:	4c0c      	ldr	r4, [pc, #48]	; (800b29c <__libc_init_array+0x44>)
 800b26c:	f000 f820 	bl	800b2b0 <_init>
 800b270:	1b64      	subs	r4, r4, r5
 800b272:	10a4      	asrs	r4, r4, #2
 800b274:	2600      	movs	r6, #0
 800b276:	42a6      	cmp	r6, r4
 800b278:	d105      	bne.n	800b286 <__libc_init_array+0x2e>
 800b27a:	bd70      	pop	{r4, r5, r6, pc}
 800b27c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b280:	4798      	blx	r3
 800b282:	3601      	adds	r6, #1
 800b284:	e7ee      	b.n	800b264 <__libc_init_array+0xc>
 800b286:	f855 3b04 	ldr.w	r3, [r5], #4
 800b28a:	4798      	blx	r3
 800b28c:	3601      	adds	r6, #1
 800b28e:	e7f2      	b.n	800b276 <__libc_init_array+0x1e>
 800b290:	0800b310 	.word	0x0800b310
 800b294:	0800b310 	.word	0x0800b310
 800b298:	0800b310 	.word	0x0800b310
 800b29c:	0800b314 	.word	0x0800b314

0800b2a0 <memset>:
 800b2a0:	4402      	add	r2, r0
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d100      	bne.n	800b2aa <memset+0xa>
 800b2a8:	4770      	bx	lr
 800b2aa:	f803 1b01 	strb.w	r1, [r3], #1
 800b2ae:	e7f9      	b.n	800b2a4 <memset+0x4>

0800b2b0 <_init>:
 800b2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2b2:	bf00      	nop
 800b2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2b6:	bc08      	pop	{r3}
 800b2b8:	469e      	mov	lr, r3
 800b2ba:	4770      	bx	lr

0800b2bc <_fini>:
 800b2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2be:	bf00      	nop
 800b2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2c2:	bc08      	pop	{r3}
 800b2c4:	469e      	mov	lr, r3
 800b2c6:	4770      	bx	lr
